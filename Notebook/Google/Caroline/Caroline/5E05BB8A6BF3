
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20200925
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00001358  0x02  "COREv4"  "COREBOOT"  0x00000000  "CORE"   0x20230628
 02)  MCFG  0x0000003C  0x01  "COREv4"  "COREBOOT"  0x00000000  "CORE"   0x20230628
 03)  APIC  0x00000072  0x03  "COREv4"  "COREBOOT"  0x00000000  "CORE"   0x20230628
 04)  NHLT  0x00001A50  0x05  "COREv4"  "COREBOOT"  0x00000000  "CORE"   0x00000000
 05)  TCPA  0x00000032  0x02  "INTEL "  "EDK2    "  0x00000002  "    "   0x01000013
 06)  DSDT  0x000046CB  0x02  "COREv4"  "COREBOOT"  0x20110725  "INTL"   0x20230628
 07)  LPIT  0x00000094  0x00  "COREv4"  "COREBOOT"  0x00000000  "CORE"   0x20230628
 08)  DBG2  0x00000061  0x00  "COREv4"  "COREBOOT"  0x00000000  "CORE"   0x20230628
 09)  DMAR  0x00000088  0x01  "COREv4"  "COREBOOT"  0x00000000  "CORE"   0x20230628
 10)  FACP  0x00000114  0x06  "COREv4"  "COREBOOT"  0x00000000  "CORE"   0x20230628
 11)  TCPA  0x00000032  0x02  "COREv4"  "COREBOOT"  0x00000000  "CORE"   0x20230628
 12)  HPET  0x00000038  0x01  "COREv4"  "COREBOOT"  0x00000000  "CORE"   0x20230628
 13)  FACS  0x00000040  0x01
 14)  BGRT  0x00000038  0x01  "INTEL "  "EDK2    "  0x00000002  "    "   0x01000013

Found 14 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000072
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 2C
[00Ah 0010   6]                       Oem ID : "COREv4"
[010h 0016   8]                 Oem Table ID : "COREBOOT"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "CORE"
[020h 0032   4]        Asl Compiler Revision : 20230628

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : FBB84657
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 01
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 04 [Local APIC NMI]
[04Dh 0077   1]                       Length : 06
[04Eh 0078   1]                 Processor ID : FF
[04Fh 0079   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[051h 0081   1]         Interrupt Input LINT : 01

[052h 0082   1]                Subtable Type : 01 [I/O APIC]
[053h 0083   1]                       Length : 0C
[054h 0084   1]                  I/O Apic ID : 02
[055h 0085   1]                     Reserved : 00
[056h 0086   4]                      Address : FEC00000
[05Ah 0090   4]                    Interrupt : 00000000

[05Eh 0094   1]                Subtable Type : 02 [Interrupt Source Override]
[05Fh 0095   1]                       Length : 0A
[060h 0096   1]                          Bus : 00
[061h 0097   1]                       Source : 00
[062h 0098   4]                    Interrupt : 00000002
[066h 0102   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1

[068h 0104   1]                Subtable Type : 02 [Interrupt Source Override]
[069h 0105   1]                       Length : 0A
[06Ah 0106   1]                          Bus : 00
[06Bh 0107   1]                       Source : 09
[06Ch 0108   4]                    Interrupt : 00000009
[070h 0112   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

Raw Table Data: Length 114 (0x72)

    0000: 41 50 49 43 72 00 00 00 03 2C 43 4F 52 45 76 34  // APICr....,COREv4
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 28 06 23 20 00 00 E0 FE 57 46 B8 FB 00 08 00 00  // (.# ....WF......
    0030: 01 00 00 00 00 08 01 02 01 00 00 00 00 08 02 01  // ................
    0040: 01 00 00 00 00 08 03 03 01 00 00 00 04 06 FF 05  // ................
    0050: 00 01 01 0C 02 00 00 00 C0 FE 00 00 00 00 02 0A  // ................
    0060: 00 00 02 00 00 00 05 00 02 0A 00 09 09 00 00 00  // ................
    0070: 0D 00                                            // ..


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 94
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "EDK2    "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 00
                                   Displayed : 0
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 00000000772B2018
[030h 0048   4]                Image OffsetX : 00000307
[034h 0052   4]                Image OffsetY : 00000166

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 94 49 4E 54 45 4C 20  // BGRT8.....INTEL 
    0010: 45 44 4B 32 20 20 20 20 02 00 00 00 20 20 20 20  // EDK2    ....    
    0020: 13 00 00 01 01 00 00 00 18 20 2B 77 00 00 00 00  // ......... +w....
    0030: 07 03 00 00 66 01 00 00                          // ....f...


DBG2
----
[000h 0000   4]                    Signature : "DBG2"    [Debug Port table type 2]
[004h 0004   4]                 Table Length : 00000061
[008h 0008   1]                     Revision : 00
[009h 0009   1]                     Checksum : A0
[00Ah 0010   6]                       Oem ID : "COREv4"
[010h 0016   8]                 Oem Table ID : "COREBOOT"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "CORE"
[020h 0032   4]        Asl Compiler Revision : 20230628

[024h 0036   4]                  Info Offset : 0000002C
[028h 0040   4]                   Info Count : 00000001

[02Ch 0044   1]                     Revision : 00
[02Dh 0045   2]                       Length : 0035
[02Fh 0047   1]               Register Count : 01
[030h 0048   2]              Namepath Length : 000F
[032h 0050   2]              Namepath Offset : 0026
[034h 0052   2]              OEM Data Length : 0000 [Optional field not present]
[036h 0054   2]              OEM Data Offset : 0000 [Optional field not present]
[038h 0056   2]                    Port Type : 8000
[03Ah 0058   2]                 Port Subtype : 0000
[03Ch 0060   2]                     Reserved : 0000
[03Eh 0062   2]          Base Address Offset : 0016
[040h 0064   2]          Address Size Offset : 0022

[042h 0066  12]        Base Address Register : [Generic Address Structure]
[042h 0066   1]                     Space ID : 00 [SystemMemory]
[043h 0067   1]                    Bit Width : 00
[044h 0068   1]                   Bit Offset : 00
[045h 0069   1]         Encoded Access Width : 03 [DWord Access:32]
[046h 0070   8]                      Address : 00000000FE030000

[04Eh 0078   4]                 Address Size : 00001000

[052h 0082  15]                     Namepath : "\_SB.PCI0.UAR2"

Raw Table Data: Length 97 (0x61)

    0000: 44 42 47 32 61 00 00 00 00 A0 43 4F 52 45 76 34  // DBG2a.....COREv4
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 28 06 23 20 2C 00 00 00 01 00 00 00 00 35 00 01  // (.# ,........5..
    0030: 0F 00 26 00 00 00 00 00 00 80 00 00 00 00 16 00  // ..&.............
    0040: 22 00 00 00 00 03 00 00 03 FE 00 00 00 00 00 10  // "...............
    0050: 00 00 5C 5F 53 42 2E 50 43 49 30 2E 55 41 52 32  // ..\_SB.PCI0.UAR2
    0060: 00                                               // .


DMAR
----
[000h 0000   4]                    Signature : "DMAR"    [DMA Remapping table]
[004h 0004   4]                 Table Length : 00000088
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 82
[00Ah 0010   6]                       Oem ID : "COREv4"
[010h 0016   8]                 Oem Table ID : "COREBOOT"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "CORE"
[020h 0032   4]        Asl Compiler Revision : 20230628

[024h 0036   1]           Host Address Width : 26
[025h 0037   1]                        Flags : 01
[026h 0038  10]                     Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048   2]                Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050   2]                       Length : 0018

[034h 0052   1]                        Flags : 00
[035h 0053   1]                     Reserved : 00
[036h 0054   2]           PCI Segment Number : 0000
[038h 0056   8]        Register Base Address : 00000000FED90000

[040h 0064   1]            Device Scope Type : 01 [PCI Endpoint Device]
[041h 0065   1]                 Entry Length : 08
[042h 0066   2]                     Reserved : 0000
[044h 0068   1]               Enumeration ID : 00
[045h 0069   1]               PCI Bus Number : 00

[046h 0070   2]                     PCI Path : 02,00


[048h 0072   2]                Subtable Type : 0000 [Hardware Unit Definition]
[04Ah 0074   2]                       Length : 0020

[04Ch 0076   1]                        Flags : 01
[04Dh 0077   1]                     Reserved : 00
[04Eh 0078   2]           PCI Segment Number : 0000
[050h 0080   8]        Register Base Address : 00000000FED91000

[058h 0088   1]            Device Scope Type : 03 [IOAPIC Device]
[059h 0089   1]                 Entry Length : 08
[05Ah 0090   2]                     Reserved : 0000
[05Ch 0092   1]               Enumeration ID : 02
[05Dh 0093   1]               PCI Bus Number : FA

[05Eh 0094   2]                     PCI Path : 1F,00


[060h 0096   1]            Device Scope Type : 04 [Message-capable HPET Device]
[061h 0097   1]                 Entry Length : 08
[062h 0098   2]                     Reserved : 0000
[064h 0100   1]               Enumeration ID : 00
[065h 0101   1]               PCI Bus Number : FA

[066h 0102   2]                     PCI Path : 0F,00


[068h 0104   2]                Subtable Type : 0001 [Reserved Memory Region]
[06Ah 0106   2]                       Length : 0020

[06Ch 0108   2]                     Reserved : 0000
[06Eh 0110   2]           PCI Segment Number : 0000
[070h 0112   8]                 Base Address : 000000007B800000
[078h 0120   8]          End Address (limit) : 000000007FFFFFFF

[080h 0128   1]            Device Scope Type : 01 [PCI Endpoint Device]
[081h 0129   1]                 Entry Length : 08
[082h 0130   2]                     Reserved : 0000
[084h 0132   1]               Enumeration ID : 00
[085h 0133   1]               PCI Bus Number : 00

[086h 0134   2]                     PCI Path : 02,00


Raw Table Data: Length 136 (0x88)

    0000: 44 4D 41 52 88 00 00 00 01 82 43 4F 52 45 76 34  // DMAR......COREv4
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 28 06 23 20 26 01 00 00 00 00 00 00 00 00 00 00  // (.# &...........
    0030: 00 00 18 00 00 00 00 00 00 00 D9 FE 00 00 00 00  // ................
    0040: 01 08 00 00 00 00 02 00 00 00 20 00 01 00 00 00  // .......... .....
    0050: 00 10 D9 FE 00 00 00 00 03 08 00 00 02 FA 1F 00  // ................
    0060: 04 08 00 00 00 FA 0F 00 01 00 20 00 00 00 00 00  // .......... .....
    0070: 00 00 80 7B 00 00 00 00 FF FF FF 7F 00 00 00 00  // ...{............
    0080: 01 08 00 00 00 00 02 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "COREv4", "COREBOOT", 0x20110725)
{
    External (_SB_.CNOT, MethodObj)    // 1 Arguments
    External (_SB_.CP00._PSS, PkgObj)
    External (_SB_.DPTF.TPWR, DeviceObj)
    External (_SB_.MPDL, IntObj)
    External (_SB_.MPTS, MethodObj)    // 1 Arguments
    External (_SB_.MWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.A4GB, IntObj)
    External (_SB_.PCI0.A4GS, IntObj)
    External (_SB_.PCI0.EGPM, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GFX0.LCD0, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.PTS_, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPCB.EC0_.WAK_, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RGPM, MethodObj)    // 0 Arguments
    External (A4GB, IntObj)
    External (A4GS, IntObj)
    External (DNVS, OpRegionObj)
    External (GNVS, OpRegionObj)
    External (MPDL, IntObj)
    External (OSFG, IntObj)

    Scope (\)
    {
        OperationRegion (GNVS, SystemMemory, 0x7AFFE740, 0x38)
    }

    Name (OSYS, Zero)
    Name (PICM, Zero)
    Name (PWRS, One)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        PICM = Arg0
    }

    Scope (_SB)
    {
        Name (PCBA, 0xE0000000)
        Name (PCLN, 0x10000000)
        OperationRegion (PCFG, SystemMemory, PCBA, PCLN)
        Device (PERC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadWrite,
                    0xE0000000,         // Address Base
                    0x10000000,         // Address Length
                    )
            })
        }
    }

    Method (PNOT, 0, NotSerialized)
    {
        \_SB.CNOT (0x81)
    }

    Method (PPCN, 0, NotSerialized)
    {
        \_SB.CNOT (0x80)
    }

    Method (TNOT, 0, NotSerialized)
    {
        \_SB.CNOT (0x82)
    }

    Scope (_SB)
    {
        Method (_SWS, 0, NotSerialized)  // _SWS: System Wake Source
        {
            Return (PM1I) /* \PM1I */
        }
    }

    Scope (_GPE)
    {
        Method (_SWS, 0, NotSerialized)  // _SWS: System Wake Source
        {
            Return (GPEI) /* \GPEI */
        }
    }

    Name (DBG0, Zero)
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        DBG0 = 0x96
        If (CondRefOf (\_SB.PCI0.LPCB.EC0.PTS))
        {
            \_SB.PCI0.LPCB.EC0.PTS (Arg0)
        }

        If (CondRefOf (\_SB.MPTS))
        {
            \_SB.MPTS (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.EGPM))
        {
            \_SB.PCI0.EGPM ()
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG0 = 0x97
        If (CondRefOf (\_SB.PCI0.LPCB.EC0.WAK))
        {
            \_SB.PCI0.LPCB.EC0.WAK (Arg0)
        }

        If (CondRefOf (\_SB.MWAK))
        {
            \_SB.MWAK (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.RGPM))
        {
            \_SB.PCI0.RGPM ()
        }

        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Field (GNVS, ByteAcc, NoLock, Preserve)
    {
        Offset (0x02), 
        SMIF,   8, 
        Offset (0x04), 
        PPCM,   8, 
        TLVL,   8, 
        LIDS,   8, 
        Offset (0x08), 
        Offset (0x0C), 
        PM1I,   64, 
        GPEI,   64, 
        DPTE,   8, 
        NHLA,   64, 
        NHLL,   32, 
        Offset (0x2B), 
        U2WE,   16, 
        U3WE,   16, 
        UIOR,   8, 
        Offset (0x38)
    }

    Name (SSFG, 0x0D)
    If (One)
    {
        SSFG &= 0xFE
    }

    If (Zero)
    {
        SSFG &= 0xF7
    }

    If (CondRefOf (\OSFG))
    {
        SSFG = OSFG /* External reference */
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If ((SSFG & One))
    {
        Name (_S1, Package (0x04)  // _S1_: S1 System State
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If ((SSFG & 0x04))
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If ((SSFG & 0x08))
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x06, 
            0x04, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_SEG, Zero)  // _SEG: PCI Segment
            Name (_UID, Zero)  // _UID: Unique ID
            Device (MCHC)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (MCHP, PCI_Config, Zero, 0x0100)
                Field (MCHP, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                    EPEN,   1, 
                        ,   11, 
                    EPBR,   27, 
                    Offset (0x48), 
                    MHEN,   1, 
                        ,   14, 
                    MHBR,   24, 
                    Offset (0x60), 
                    PXEN,   1, 
                    PXSZ,   2, 
                        ,   23, 
                    PXBR,   13, 
                    Offset (0x68), 
                    DIEN,   1, 
                        ,   11, 
                    DIBR,   27, 
                    Offset (0x70), 
                    MEBA,   64, 
                    Offset (0xA0), 
                    TOM,    64, 
                    TUUD,   64, 
                    Offset (0xBC), 
                    TLUD,   32
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (MCRS, ResourceTemplate ()
                {
                    WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x00FF,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0100,             // Length
                        ,, )
                    DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x00000000,         // Granularity
                        0x00000000,         // Range Minimum
                        0x00000CF7,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00000CF8,         // Length
                        ,, , TypeStatic, DenseTranslation)
                    IO (Decode16,
                        0x0CF8,             // Range Minimum
                        0x0CF8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        )
                    DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x00000000,         // Granularity
                        0x00000D00,         // Range Minimum
                        0x0000FFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x0000F300,         // Length
                        ,, , TypeStatic, DenseTranslation)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000A0000,         // Range Minimum
                        0x000BFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00020000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000C0000,         // Range Minimum
                        0x000C3FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000C4000,         // Range Minimum
                        0x000C7FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000C8000,         // Range Minimum
                        0x000CBFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000CC000,         // Range Minimum
                        0x000CFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000D0000,         // Range Minimum
                        0x000D3FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000D4000,         // Range Minimum
                        0x000D7FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000D8000,         // Range Minimum
                        0x000DBFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000DC000,         // Range Minimum
                        0x000DFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000E0000,         // Range Minimum
                        0x000E3FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000E4000,         // Range Minimum
                        0x000E7FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000E8000,         // Range Minimum
                        0x000EBFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000EC000,         // Range Minimum
                        0x000EFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000F0000,         // Range Minimum
                        0x000FFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00010000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x00000000,         // Range Minimum
                        0xDFFFFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0xE0000000,         // Length
                        ,, _Y00, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000010000, // Range Minimum
                        0x000000000001FFFF, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000010000, // Length
                        ,, _Y01, AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0xFC800000,         // Range Minimum
                        0xFE7FFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x02000000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0xFED40000,         // Range Minimum
                        0xFED44FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00005000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                })
                CreateDWordField (MCRS, \_SB.PCI0._CRS._Y00._MIN, PMIN)  // _MIN: Minimum Base Address
                CreateDWordField (MCRS, \_SB.PCI0._CRS._Y00._MAX, PMAX)  // _MAX: Maximum Base Address
                CreateDWordField (MCRS, \_SB.PCI0._CRS._Y00._LEN, PLEN)  // _LEN: Length
                Local0 = (^MCHC.TLUD & 0xFFF00000)
                Local1 = ^MCHC.MEBA /* \_SB_.PCI0.MCHC.MEBA */
                If ((Local0 == Local1))
                {
                    Local0 = (^MCHC.TOM & 0x0000007FFFF00000)
                }

                PMIN = Local0
                PLEN = ((PMAX - PMIN) + One)
                If ((A4GS == Zero))
                {
                    CreateQWordField (MCRS, \_SB.PCI0._CRS._Y01._LEN, MSEN)  // _LEN: Length
                    MSEN = Zero
                }
                Else
                {
                    CreateQWordField (MCRS, \_SB.PCI0._CRS._Y01._MIN, MMIN)  // _MIN: Minimum Base Address
                    CreateQWordField (MCRS, \_SB.PCI0._CRS._Y01._MAX, MMAX)  // _MAX: Maximum Base Address
                    CreateQWordField (MCRS, \_SB.PCI0._CRS._Y01._LEN, MLEN)  // _LEN: Length
                    MLEN = A4GS /* External reference */
                    MMIN = A4GB /* External reference */
                    MMAX = ((MMIN + MLEN) - One)
                }

                Return (MCRS) /* \_SB_.PCI0._CRS.MCRS */
            }

            Method (GMHB, 0, Serialized)
            {
                Local0 = (^MCHC.MHBR << 0x0F)
                Return (Local0)
            }

            Method (GEPB, 0, Serialized)
            {
                Local0 = (^MCHC.EPBR << 0x0C)
                Return (Local0)
            }

            Method (GPCB, 0, Serialized)
            {
                Local0 = (^MCHC.PXBR << 0x1A)
                Return (Local0)
            }

            Method (GPCL, 0, Serialized)
            {
                Local0 = (0x10000000 >> ^MCHC.PXSZ) /* \_SB_.PCI0.MCHC.PXSZ */
                Return (Local0)
            }

            Method (GDMB, 0, Serialized)
            {
                Local0 = (^MCHC.DIBR << 0x0C)
                Return (Local0)
            }

            Device (PDRC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00008000,         // Address Length
                            _Y02)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y03)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y04)
                        Memory32Fixed (ReadOnly,
                            0xFED90000,         // Address Base
                            0x00004000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x01000000,         // Address Length
                            _Y05)
                        Memory32Fixed (ReadOnly,
                            0xFEE00000,         // Address Base
                            0x00100000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._CRS._Y02._BAS, MBR0)  // _BAS: Base Address
                    MBR0 = GMHB ()
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._CRS._Y03._BAS, DBR0)  // _BAS: Base Address
                    DBR0 = GDMB ()
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._CRS._Y04._BAS, EBR0)  // _BAS: Base Address
                    EBR0 = GEPB ()
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._CRS._Y05._BAS, FBR0)  // _BAS: Base Address
                    FBR0 = 0xFF000000
                    Return (BUF0) /* \_SB_.PCI0.PDRC._CRS.BUF0 */
                }
            }

            Device (GFX0)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
            }

            Name (PICP, Package (0x29)
            {
                Package (0x04)
                {
                    0x001FFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001EFFFF, 
                    Zero, 
                    Zero, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x001EFFFF, 
                    One, 
                    Zero, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x001EFFFF, 
                    0x02, 
                    Zero, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x001EFFFF, 
                    0x03, 
                    Zero, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0019FFFF, 
                    Zero, 
                    Zero, 
                    0x20
                }, 

                Package (0x04)
                {
                    0x0019FFFF, 
                    One, 
                    Zero, 
                    0x21
                }, 

                Package (0x04)
                {
                    0x0019FFFF, 
                    0x02, 
                    Zero, 
                    0x22
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0017FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    Zero, 
                    Zero, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }
            })
            Name (PICN, Package (0x21)
            {
                Package (0x04)
                {
                    0x001FFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001BFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001BFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001BFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001BFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0017FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (PICP) /* \_SB_.PCI0.PICP */
                }
                Else
                {
                    Return (PICN) /* \_SB_.PCI0.PICN */
                }
            }

            Method (GRXS, 1, Serialized)
            {
                OperationRegion (PREG, SystemMemory, GADD (Arg0), 0x04)
                Field (PREG, AnyAcc, NoLock, Preserve)
                {
                        ,   1, 
                    RXST,   1
                }

                Return (RXST) /* \_SB_.PCI0.GRXS.RXST */
            }

            Method (GTXS, 1, Serialized)
            {
                OperationRegion (PREG, SystemMemory, GADD (Arg0), 0x04)
                Field (PREG, AnyAcc, NoLock, Preserve)
                {
                    TXST,   1
                }

                Return (TXST) /* \_SB_.PCI0.GTXS.TXST */
            }

            Method (STXS, 1, Serialized)
            {
                OperationRegion (PREG, SystemMemory, GADD (Arg0), 0x04)
                Field (PREG, AnyAcc, NoLock, Preserve)
                {
                    TXST,   1
                }

                TXST = One
            }

            Method (CTXS, 1, Serialized)
            {
                OperationRegion (PREG, SystemMemory, GADD (Arg0), 0x04)
                Field (PREG, AnyAcc, NoLock, Preserve)
                {
                    TXST,   1
                }

                TXST = Zero
            }

            Method (GPMO, 2, Serialized)
            {
                OperationRegion (PREG, SystemMemory, GADD (Arg0), 0x04)
                Field (PREG, AnyAcc, NoLock, Preserve)
                {
                        ,   10, 
                    MODE,   3
                }

                MODE = Arg1
            }

            Method (GTXE, 2, Serialized)
            {
                OperationRegion (PREG, SystemMemory, GADD (Arg0), 0x04)
                Field (PREG, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    TXDI,   1
                }

                TXDI = !Arg1
            }

            Method (GRXE, 2, Serialized)
            {
                OperationRegion (PREG, SystemMemory, GADD (Arg0), 0x04)
                Field (PREG, AnyAcc, NoLock, Preserve)
                {
                        ,   9, 
                    RXDI,   1
                }

                RXDI = !Arg1
            }

            Method (GSCI, 2, Serialized)
            {
                OperationRegion (PREG, SystemMemory, GADD (Arg0), 0x04)
                Field (PREG, AnyAcc, NoLock, Preserve)
                {
                        ,   19, 
                    SCIR,   1
                }

                SCIR = Arg1
            }

            Device (GPIO)
            {
                Name (_HID, "INT344B")  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_DDN, "GPIO Controller")  // _DDN: DOS Device Name
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y06)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y07)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y08)
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y09)
                    {
                        0x00000000,
                    }
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (RBUF, \_SB.PCI0.GPIO._Y06._BAS, BAS0)  // _BAS: Base Address
                    CreateDWordField (RBUF, \_SB.PCI0.GPIO._Y06._LEN, LEN0)  // _LEN: Length
                    BAS0 = PCRB (0xAF)
                    LEN0 = 0x00010000
                    CreateDWordField (RBUF, \_SB.PCI0.GPIO._Y07._BAS, BAS1)  // _BAS: Base Address
                    CreateDWordField (RBUF, \_SB.PCI0.GPIO._Y07._LEN, LEN1)  // _LEN: Length
                    BAS1 = PCRB (0xAE)
                    LEN1 = 0x00010000
                    CreateDWordField (RBUF, \_SB.PCI0.GPIO._Y08._BAS, BAS3)  // _BAS: Base Address
                    CreateDWordField (RBUF, \_SB.PCI0.GPIO._Y08._LEN, LEN3)  // _LEN: Length
                    BAS3 = PCRB (0xAC)
                    LEN3 = 0x00010000
                    CreateDWordField (RBUF, \_SB.PCI0.GPIO._Y09._INT, IRQN)  // _INT: Interrupts
                    Local0 = (PCRR (0xAF, 0x10) & 0x08)
                    If ((Local0 == Zero))
                    {
                        IRQN = 0x0E
                    }
                    Else
                    {
                        IRQN = 0x0F
                    }

                    Return (RBUF) /* \_SB_.PCI0.GPIO.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }

            Method (GADD, 1, NotSerialized)
            {
                If (((Arg0 >= Zero) && (Arg0 <= 0x2F)))
                {
                    Local0 = 0xAF
                    Local1 = (Arg0 - Zero)
                }

                If (((Arg0 >= 0x30) && (Arg0 <= 0x77)))
                {
                    Local0 = 0xAE
                    Local1 = (Arg0 - 0x30)
                }

                If (((Arg0 >= 0x78) && (Arg0 <= 0x97)))
                {
                    Local0 = 0xAC
                    Local1 = (Arg0 - 0x78)
                }

                Local2 = PCRB (Local0)
                Local2 += 0x0400
                Return ((Local2 + (Local1 * 0x08)))
            }

            OperationRegion (ITSS, SystemMemory, 0xFDC43100, 0x08)
            Field (ITSS, ByteAcc, NoLock, Preserve)
            {
                PIRA,   8, 
                PIRB,   8, 
                PIRC,   8, 
                PIRD,   8, 
                PIRE,   8, 
                PIRF,   8, 
                PIRG,   8, 
                PIRH,   8
            }

            Name (IREN, 0x80)
            Name (IREM, 0x0F)
            Device (LNKA)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,10,11,12,14,15}
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (RTLA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {}
                    })
                    CreateWordField (RTLA, One, IRQ0)
                    IRQ0 = Zero
                    IRQ0 = (One << (PIRA & IREM))
                    Return (RTLA) /* \_SB_.PCI0.LNKA._CRS.RTLA */
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, One, IRQ0)
                    FindSetRightBit (IRQ0, Local0)
                    Local0--
                    PIRA = Local0
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((PIRA & IREN))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                {
                    PIRA |= IREN /* \_SB_.PCI0.IREN */
                }
            }

            Device (LNKB)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,10,11,12,14,15}
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (RTLA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {}
                    })
                    CreateWordField (RTLA, One, IRQ0)
                    IRQ0 = Zero
                    IRQ0 = (One << (PIRB & IREM))
                    Return (RTLA) /* \_SB_.PCI0.LNKB._CRS.RTLA */
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, One, IRQ0)
                    FindSetRightBit (IRQ0, Local0)
                    Local0--
                    PIRB = Local0
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((PIRB & IREN))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                {
                    PIRB |= IREN /* \_SB_.PCI0.IREN */
                }
            }

            Device (LNKC)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,10,11,12,14,15}
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (RTLA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {}
                    })
                    CreateWordField (RTLA, One, IRQ0)
                    IRQ0 = Zero
                    IRQ0 = (One << (PIRC & IREM))
                    Return (RTLA) /* \_SB_.PCI0.LNKC._CRS.RTLA */
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, One, IRQ0)
                    FindSetRightBit (IRQ0, Local0)
                    Local0--
                    PIRC = Local0
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((PIRC & IREN))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                {
                    PIRC |= IREN /* \_SB_.PCI0.IREN */
                }
            }

            Device (LNKD)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,10,11,12,14,15}
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (RTLA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {}
                    })
                    CreateWordField (RTLA, One, IRQ0)
                    IRQ0 = Zero
                    IRQ0 = (One << (PIRD & IREM))
                    Return (RTLA) /* \_SB_.PCI0.LNKD._CRS.RTLA */
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, One, IRQ0)
                    FindSetRightBit (IRQ0, Local0)
                    Local0--
                    PIRD = Local0
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((PIRD & IREN))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                {
                    PIRD |= IREN /* \_SB_.PCI0.IREN */
                }
            }

            Device (LNKE)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,10,11,12,14,15}
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (RTLA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {}
                    })
                    CreateWordField (RTLA, One, IRQ0)
                    IRQ0 = Zero
                    IRQ0 = (One << (PIRE & IREM))
                    Return (RTLA) /* \_SB_.PCI0.LNKE._CRS.RTLA */
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, One, IRQ0)
                    FindSetRightBit (IRQ0, Local0)
                    Local0--
                    PIRE = Local0
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((PIRE & IREN))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                {
                    PIRE |= IREN /* \_SB_.PCI0.IREN */
                }
            }

            Device (LNKF)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,10,11,12,14,15}
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (RTLA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {}
                    })
                    CreateWordField (RTLA, One, IRQ0)
                    IRQ0 = Zero
                    IRQ0 = (One << (PIRF & IREM))
                    Return (RTLA) /* \_SB_.PCI0.LNKF._CRS.RTLA */
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, One, IRQ0)
                    FindSetRightBit (IRQ0, Local0)
                    Local0--
                    PIRF = Local0
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((PIRF & IREN))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                {
                    PIRF |= IREN /* \_SB_.PCI0.IREN */
                }
            }

            Device (LNKG)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,10,11,12,14,15}
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (RTLA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {}
                    })
                    CreateWordField (RTLA, One, IRQ0)
                    IRQ0 = Zero
                    IRQ0 = (One << (PIRG & IREM))
                    Return (RTLA) /* \_SB_.PCI0.LNKG._CRS.RTLA */
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, One, IRQ0)
                    FindSetRightBit (IRQ0, Local0)
                    Local0--
                    PIRG = Local0
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((PIRG & IREN))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                {
                    PIRG |= IREN /* \_SB_.PCI0.IREN */
                }
            }

            Device (LNKH)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
                Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,6,10,11,12,14,15}
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (RTLA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {}
                    })
                    CreateWordField (RTLA, One, IRQ0)
                    IRQ0 = Zero
                    IRQ0 = (One << (PIRH & IREM))
                    Return (RTLA) /* \_SB_.PCI0.LNKH._CRS.RTLA */
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, One, IRQ0)
                    FindSetRightBit (IRQ0, Local0)
                    Local0--
                    PIRH = Local0
                }

                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((PIRH & IREN))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                {
                    PIRH |= IREN /* \_SB_.PCI0.IREN */
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Name (_DDN, "LPC Bus Device")  // _DDN: DOS Device Name
                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0093,             // Range Minimum
                            0x0093,             // Range Maximum
                            0x01,               // Alignment
                            0x0D,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (FWH)
                {
                    Name (_HID, EisaId ("INT0800") /* Intel 82802 Firmware Hub Device */)  // _HID: Hardware ID
                    Name (_DDN, "Firmware Hub")  // _DDN: DOS Device Name
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0C01") /* System Board */)  // _CID: Compatible ID
                    Name (_DDN, "High Precision Event Timer")  // _DDN: DOS Device Name
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_DDN, "8259 Interrupt Controller")  // _DDN: DOS Device Name
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B4,             // Range Minimum
                            0x00B4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (LDRC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_DDN, "Legacy Device Resources")  // _DDN: DOS Device Name
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x004E,             // Range Minimum
                            0x004E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x1800,             // Range Minimum
                            0x1800,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            )
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_DDN, "Real Time Clock")  // _DDN: DOS Device Name
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                    })
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_DDN, "8254 Timer")  // _DDN: DOS Device Name
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }
            }

            Scope (LPCB)
            {
                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_GPE, 0x50)  // _GPE: General Purpose Events
                    Name (TOFS, 0xC8)
                    Name (TNCA, 0xFC)
                    Name (TNOP, 0xFD)
                    Name (TBAD, 0xFE)
                    Name (TNPR, 0xFF)
                    Name (DWRN, 0x0F)
                    Name (DLOW, 0x0A)
                    OperationRegion (ERAM, EmbeddedControl, Zero, 0x20)
                    Field (ERAM, ByteAcc, Lock, Preserve)
                    {
                        RAMV,   8, 
                        TSTB,   8, 
                        TSTC,   8, 
                        KBLV,   8, 
                        FAND,   8, 
                        PATI,   8, 
                        PATT,   8, 
                        PATC,   8, 
                        CHGL,   8, 
                        TBMD,   1, 
                        DDPN,   3, 
                        STTB,   1, 
                        Offset (0x0A), 
                        DFUD,   1, 
                        FLSH,   1, 
                        PFAN,   1, 
                        KBLE,   1, 
                        LTBR,   1, 
                        LEDC,   1, 
                        MTNS,   1, 
                        KEYB,   1, 
                        PSTR,   1, 
                        P80P,   1, 
                        THRM,   1, 
                        SBKL,   1, 
                        WIFI,   1, 
                        HOST,   1, 
                        GPIO,   1, 
                        I2CB,   1, 
                        CHRG,   1, 
                        BATT,   1, 
                        SBAT,   1, 
                        HANG,   1, 
                        PMUI,   1, 
                        DSEC,   1, 
                        UPDC,   1, 
                        UMUX,   1, 
                        MSFF,   1, 
                        TVST,   1, 
                        TCMV,   1, 
                        RTCD,   1, 
                        FPRD,   1, 
                        TPAD,   1, 
                        RWSG,   1, 
                        DEVE,   1, 
                        Offset (0x0E), 
                        Offset (0x12), 
                        BTID,   8, 
                        USPP,   8, 
                        RFWU,   8, 
                        PBOK,   8
                    }

                    OperationRegion (EMEM, EmbeddedControl, 0x20, 0xE0)
                    Field (EMEM, ByteAcc, Lock, Preserve)
                    {
                        TIN0,   8, 
                        TIN1,   8, 
                        TIN2,   8, 
                        TIN3,   8, 
                        TIN4,   8, 
                        TIN5,   8, 
                        TIN6,   8, 
                        TIN7,   8, 
                        TIN8,   8, 
                        TIN9,   8, 
                        Offset (0x10), 
                        FAN0,   16, 
                        FAN1,   16, 
                        Offset (0x24), 
                        BTVR,   8, 
                        Offset (0x30), 
                        LIDS,   1, 
                        PBTN,   1, 
                        WPDI,   1, 
                        RECK,   1, 
                        RECD,   1, 
                        Offset (0x40), 
                        BTVO,   32, 
                        BTPR,   32, 
                        BTRA,   32, 
                        ACEX,   1, 
                        BTEX,   1, 
                        BFDC,   1, 
                        BFCG,   1, 
                        BFCR,   1, 
                        BFIV,   1, 
                        BFCT,   1, 
                        Offset (0x4D), 
                        BTCN,   8, 
                        BTIX,   8, 
                        Offset (0x50), 
                        BTDA,   32, 
                        BTDV,   32, 
                        BTDF,   32, 
                        BTCC,   32, 
                        BMFG,   64, 
                        BMOD,   64, 
                        BSER,   64, 
                        BTYP,   64, 
                        Offset (0x80), 
                        ALS0,   16, 
                        Offset (0xA6), 
                        GPUD,   8, 
                        Offset (0xA7), 
                        PWRT,   8, 
                        EOVD,   8
                    }

                    Device (LID0)
                    {
                        Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
                        Method (_LID, 0, NotSerialized)  // _LID: Lid Status
                        {
                            Return (LIDS) /* \_SB_.PCI0.LPCB.EC0_.LIDS */
                        }

                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x70, 
                            0x05
                        })
                    }

                    Method (TINS, 1, Serialized)
                    {
                        Switch (ToInteger (Arg0))
                        {
                            Case (Zero)
                            {
                                Return (TIN0) /* \_SB_.PCI0.LPCB.EC0_.TIN0 */
                            }
                            Case (One)
                            {
                                Return (TIN1) /* \_SB_.PCI0.LPCB.EC0_.TIN1 */
                            }
                            Case (0x02)
                            {
                                Return (TIN2) /* \_SB_.PCI0.LPCB.EC0_.TIN2 */
                            }
                            Case (0x03)
                            {
                                Return (TIN3) /* \_SB_.PCI0.LPCB.EC0_.TIN3 */
                            }
                            Case (0x04)
                            {
                                Return (TIN4) /* \_SB_.PCI0.LPCB.EC0_.TIN4 */
                            }
                            Case (0x05)
                            {
                                Return (TIN5) /* \_SB_.PCI0.LPCB.EC0_.TIN5 */
                            }
                            Case (0x06)
                            {
                                Return (TIN6) /* \_SB_.PCI0.LPCB.EC0_.TIN6 */
                            }
                            Case (0x07)
                            {
                                Return (TIN7) /* \_SB_.PCI0.LPCB.EC0_.TIN7 */
                            }
                            Case (0x08)
                            {
                                Return (TIN8) /* \_SB_.PCI0.LPCB.EC0_.TIN8 */
                            }
                            Case (0x09)
                            {
                                Return (TIN9) /* \_SB_.PCI0.LPCB.EC0_.TIN9 */
                            }
                            Default
                            {
                                Return (TIN0) /* \_SB_.PCI0.LPCB.EC0_.TIN0 */
                            }

                        }
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (ECMD, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0062,             // Range Minimum
                                0x0062,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0066,             // Range Minimum
                                0x0066,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                        })
                        Return (ECMD) /* \_SB_.PCI0.LPCB.EC0_._CRS.ECMD */
                    }

                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        PWRS = ACEX /* \_SB_.PCI0.LPCB.EC0_.ACEX */
                        PNOT ()
                    }

                    Method (TSRD, 1, Serialized)
                    {
                        Local0 = TINS (Arg0)
                        If ((Local0 == TNCA))
                        {
                            Return (Zero)
                        }

                        If ((Local0 == TNPR))
                        {
                            Return (Zero)
                        }

                        If ((Local0 == TNOP))
                        {
                            Return (Zero)
                        }

                        If ((Local0 == TBAD))
                        {
                            Return (Zero)
                        }

                        Local0 += TOFS /* \_SB_.PCI0.LPCB.EC0_.TOFS */
                        Local0 *= 0x0A
                        Return (Local0)
                    }

                    Method (S0IX, 1, Serialized)
                    {
                    }

                    Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: LID CLOSE"
                        Notify (LID0, 0x80) // Status Change
                    }

                    Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: LID OPEN"
                        Notify (CREC, 0x02) // Device Wake
                        Notify (LID0, 0x80) // Status Change
                    }

                    Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: POWER BUTTON"
                    }

                    Method (_Q04, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: AC CONNECTED"
                        PWRS = ACEX /* \_SB_.PCI0.LPCB.EC0_.ACEX */
                        Notify (AC, 0x80) // Status Change
                        PNOT ()
                    }

                    Method (_Q05, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: AC DISCONNECTED"
                        PWRS = ACEX /* \_SB_.PCI0.LPCB.EC0_.ACEX */
                        Notify (AC, 0x80) // Status Change
                        PNOT ()
                    }

                    Method (_Q06, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: BATTERY LOW"
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (_Q07, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: BATTERY CRITICAL"
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (_Q08, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: BATTERY INFO"
                        Notify (BAT0, 0x81) // Information Change
                    }

                    Method (_Q0A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: THERMAL OVERLOAD"
                        Notify (_TZ, 0x80) // Status Change
                    }

                    Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: THERMAL"
                        Notify (_TZ, 0x80) // Status Change
                    }

                    Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: KEY PRESSED"
                        Notify (CREC, 0x02) // Device Wake
                    }

                    Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: THERMAL SHUTDOWN"
                        Notify (_TZ, 0x80) // Status Change
                    }

                    Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: BATTERY SHUTDOWN"
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                    }

                    Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                    }

                    Method (_Q16, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: GOT PD EVENT"
                        Notify (^CREC.ECPD, 0x80) // Status Change
                        If (CondRefOf (\_SB.DPTF.TPWR))
                        {
                            Notify (^^^^DPTF.TPWR, 0x81) // Information Change
                        }
                    }

                    Method (_Q17, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: BATTERY STATUS"
                        Notify (BAT0, 0x80) // Status Change
                        PNOT ()
                    }

                    Method (_Q18, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: PANIC"
                        Notify (CREC, 0xB0) // Device-Specific
                    }

                    Method (_Q1B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: MKBP"
                        Notify (CREC, 0x80) // Status Change
                    }

                    Method (_Q1C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: USB MUX"
                        Notify (^CREC.ECPD, 0x80) // Status Change
                    }

                    Method (_Q1D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: TABLET mode switch Event"
                        Notify (CREC, 0x02) // Device Wake
                        ^^^^DPTF.TPET ()
                        Notify (^CREC.TBMC, 0x80) // Status Change
                        If ((TBMD == One))
                        {
                            Notify (VBTN, 0xCC) // Hardware-Specific
                        }
                        Else
                        {
                            Notify (VBTN, 0xCD) // Hardware-Specific
                        }
                    }

                    Method (_Q21, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: Body Detect Change Event"
                    }

                    Mutex (PATM, 0x01)
                    Method (PAT0, 2, Serialized)
                    {
                        If (Acquire (PATM, 0x03E8))
                        {
                            Return (Zero)
                        }

                        PATI = ToInteger (Arg0)
                        Local1 = (ToInteger (Arg1) / 0x0A)
                        PATT = (Local1 - TOFS) /* \_SB_.PCI0.LPCB.EC0_.TOFS */
                        PATC = 0x02
                        Release (PATM)
                        Return (One)
                    }

                    Method (PAT1, 2, Serialized)
                    {
                        If (Acquire (PATM, 0x03E8))
                        {
                            Return (Zero)
                        }

                        PATI = ToInteger (Arg0)
                        Local1 = (ToInteger (Arg1) / 0x0A)
                        PATT = (Local1 - TOFS) /* \_SB_.PCI0.LPCB.EC0_.TOFS */
                        PATC = 0x03
                        Release (PATM)
                        Return (One)
                    }

                    Method (PATD, 1, Serialized)
                    {
                        If (Acquire (PATM, 0x03E8))
                        {
                            Return (Zero)
                        }

                        PATI = ToInteger (Arg0)
                        PATT = Zero
                        PATC = Zero
                        PATC = One
                        Release (PATM)
                        Return (One)
                    }

                    Method (_Q09, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (!Acquire (PATM, 0x03E8))
                        {
                            Local0 = PATI /* \_SB_.PCI0.LPCB.EC0_.PATI */
                            While ((Local0 != 0xFF))
                            {
                                Local0 = PATI /* \_SB_.PCI0.LPCB.EC0_.PATI */
                            }

                            Release (PATM)
                        }
                    }

                    Method (CHGS, 1, Serialized)
                    {
                        CHGL = ToInteger (Arg0)
                    }

                    Method (CHGD, 0, Serialized)
                    {
                        CHGL = 0xFF
                    }

                    Method (RCTM, 0, NotSerialized)
                    {
                        Return (TBMD) /* \_SB_.PCI0.LPCB.EC0_.TBMD */
                    }

                    Method (RCDP, 0, NotSerialized)
                    {
                        If ((DDPN == Zero))
                        {
                            Return (TBMD) /* \_SB_.PCI0.LPCB.EC0_.TBMD */
                        }
                        Else
                        {
                            Local0 = (DDPN - One)
                            Return (Local0)
                        }
                    }

                    Device (AC)
                    {
                        Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                        Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                        {
                            _SB
                        })
                        Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                        {
                            Return (ACEX) /* \_SB_.PCI0.LPCB.EC0_.ACEX */
                        }

                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }
                    }

                    Mutex (BATM, 0x00)
                    Method (BTSW, 1, NotSerialized)
                    {
                        If ((Arg0 != Zero))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (BSTA, 1, Serialized)
                    {
                        If (Acquire (BATM, 0x03E8))
                        {
                            Return (Zero)
                        }

                        If ((~BTSW (Arg0) & BTEX))
                        {
                            Local0 = 0x1F
                        }
                        Else
                        {
                            Local0 = 0x0F
                        }

                        Release (BATM)
                        Return (Local0)
                    }

                    Method (BBIF, 2, Serialized)
                    {
                        If (Acquire (BATM, 0x03E8))
                        {
                            Return (Arg1)
                        }

                        If (BTSW (Arg0))
                        {
                            Release (BATM)
                            Return (Arg1)
                        }

                        Arg1 [0x02] = BTDF /* \_SB_.PCI0.LPCB.EC0_.BTDF */
                        Arg1 [0x04] = BTDV /* \_SB_.PCI0.LPCB.EC0_.BTDV */
                        Local0 = BTDA /* \_SB_.PCI0.LPCB.EC0_.BTDA */
                        Arg1 [One] = Local0
                        Local2 = ((Local0 * DWRN) / 0x64)
                        Arg1 [0x05] = Local2
                        Local2 = ((Local0 * DLOW) / 0x64)
                        Arg1 [0x06] = Local2
                        Arg1 [0x09] = ToString (Concatenate (BMOD, Zero), Ones)
                        Arg1 [0x0A] = ToString (Concatenate (BSER, Zero), Ones)
                        Arg1 [0x0C] = ToString (Concatenate (BMFG, Zero), Ones)
                        Release (BATM)
                        Return (Arg1)
                    }

                    Method (BBIX, 2, Serialized)
                    {
                        If (Acquire (BATM, 0x03E8))
                        {
                            Return (Arg1)
                        }

                        If (BTSW (Arg0))
                        {
                            Release (BATM)
                            Return (Arg1)
                        }

                        Arg1 [0x03] = BTDF /* \_SB_.PCI0.LPCB.EC0_.BTDF */
                        Arg1 [0x05] = BTDV /* \_SB_.PCI0.LPCB.EC0_.BTDV */
                        Local0 = BTDA /* \_SB_.PCI0.LPCB.EC0_.BTDA */
                        Arg1 [0x02] = Local0
                        Local2 = ((Local0 * DWRN) / 0x64)
                        Arg1 [0x06] = Local2
                        Local2 = ((Local0 * DLOW) / 0x64)
                        Arg1 [0x07] = Local2
                        Arg1 [0x08] = BTCC /* \_SB_.PCI0.LPCB.EC0_.BTCC */
                        Arg1 [0x10] = ToString (Concatenate (BMOD, Zero), Ones)
                        Arg1 [0x11] = ToString (Concatenate (BSER, Zero), Ones)
                        Arg1 [0x13] = ToString (Concatenate (BMFG, Zero), Ones)
                        Release (BATM)
                        Return (Arg1)
                    }

                    Method (BBST, 4, Serialized)
                    {
                        If (Acquire (BATM, 0x03E8))
                        {
                            Return (Arg1)
                        }

                        If (BTSW (Arg0))
                        {
                            Release (BATM)
                            Return (Arg1)
                        }

                        Local1 = Zero
                        If (ACEX)
                        {
                            If (BFCG)
                            {
                                Local1 = 0x02
                            }
                            ElseIf (BFDC)
                            {
                                Local1 = One
                            }
                        }
                        Else
                        {
                            Local1 = One
                        }

                        If (BFCR)
                        {
                            Local1 |= 0x04
                        }

                        Arg1 [Zero] = Local1
                        If ((Local1 != DerefOf (Arg2)))
                        {
                            Arg2 = Local1
                            If ((Arg0 == Zero))
                            {
                                Notify (BAT0, 0x80) // Status Change
                            }
                        }

                        Arg1 [One] = BTPR /* \_SB_.PCI0.LPCB.EC0_.BTPR */
                        Local1 = BTRA /* \_SB_.PCI0.LPCB.EC0_.BTRA */
                        If (((Arg3 && ACEX) && !(BFDC && BFCG)))
                        {
                            Local2 = BTDF /* \_SB_.PCI0.LPCB.EC0_.BTDF */
                            Local3 = (Local2 >> 0x04)
                            If (((Local1 > (Local2 - Local3)) && (Local1 < (Local2 + 
                                Local3))))
                            {
                                Local1 = Local2
                            }
                        }

                        Arg1 [0x02] = Local1
                        Arg1 [0x03] = BTVO /* \_SB_.PCI0.LPCB.EC0_.BTVO */
                        Release (BATM)
                        Return (Arg1)
                    }

                    Device (BAT0)
                    {
                        Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                        {
                            _SB
                        })
                        Name (PBIF, Package (0x0D)
                        {
                            One, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            One, 
                            0xFFFFFFFF, 
                            0x03, 
                            0xFFFFFFFF, 
                            One, 
                            One, 
                            "", 
                            "", 
                            "LION", 
                            ""
                        })
                        Name (PBIX, Package (0x14)
                        {
                            Zero, 
                            One, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            One, 
                            0xFFFFFFFF, 
                            0x03, 
                            0xFFFFFFFF, 
                            Zero, 
                            0x00018000, 
                            0x01F4, 
                            0x0A, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            One, 
                            One, 
                            "", 
                            "", 
                            "LION", 
                            ""
                        })
                        Name (PBST, Package (0x04)
                        {
                            Zero, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        Name (BSTP, Zero)
                        Name (BFWK, One)
                        Method (BFWE, 0, NotSerialized)
                        {
                            BFWK = One
                        }

                        Method (BFWD, 0, NotSerialized)
                        {
                            BFWK = Zero
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Return (BSTA (Zero))
                        }

                        Method (_BIF, 0, Serialized)  // _BIF: Battery Information
                        {
                            Return (BBIF (Zero, PBIF))
                        }

                        Method (_BIX, 0, Serialized)  // _BIX: Battery Information Extended
                        {
                            Return (BBIX (Zero, PBIX))
                        }

                        Method (_BST, 0, Serialized)  // _BST: Battery Status
                        {
                            Return (BBST (Zero, PBST, RefOf (BSTP), BFWK))
                        }
                    }

                    Device (CREC)
                    {
                        Name (_HID, "GOOG0004")  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Name (_DDN, "EC Command Device")  // _DDN: DOS Device Name
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x70, 
                            0x05
                        })
                        Device (CKSC)
                        {
                            Name (_HID, "GOOG0007")  // _HID: Hardware ID
                            Name (_UID, One)  // _UID: Unique ID
                            Name (_DDN, "EC MKBP Device")  // _DDN: DOS Device Name
                        }

                        Device (ECPD)
                        {
                            Name (_HID, "GOOG0003")  // _HID: Hardware ID
                            Name (_UID, One)  // _UID: Unique ID
                            Name (_DDN, "EC PD Device")  // _DDN: DOS Device Name
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (0x0F)
                            }
                        }

                        Device (TBMC)
                        {
                            Name (_HID, "GOOG0006")  // _HID: Hardware ID
                            Name (_UID, One)  // _UID: Unique ID
                            Name (_DDN, "Tablet Motion Control")  // _DDN: DOS Device Name
                            Method (TBMC, 0, NotSerialized)
                            {
                                If ((RCTM () == One))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                If ((MTNS == One))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }

                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }
                    }

                    Device (VBTN)
                    {
                        Name (_HID, "INT33D6" /* Intel Virtual Buttons Device */)  // _HID: Hardware ID
                        Name (_DDN, "Tablet Virtual Buttons")  // _DDN: DOS Device Name
                        Method (VBDL, 0, NotSerialized)
                        {
                        }

                        Method (VGBS, 0, NotSerialized)
                        {
                            If ((RCTM () == One))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (0x40)
                            }
                        }

                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }
                    }

                    Device (VBTO)
                    {
                        Name (_HID, "INT33D3" /* Intel GPIO Buttons */)  // _HID: Hardware ID
                        Name (_CID, "PNP0C60" /* Display Sensor Device */)  // _CID: Compatible ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }
                    }
                }

                Device (SIO)
                {
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (ECMM)
                    {
                        Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                        Name (_UID, 0x04)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IO (Decode16,
                                0x0900,             // Range Minimum
                                0x0900,             // Range Maximum
                                0x08,               // Alignment
                                0xFF,               // Length
                                )
                        })
                    }

                    Device (ECUI)
                    {
                        Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                        Name (_UID, 0x03)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IO (Decode16,
                                0x0200,             // Range Minimum
                                0x0200,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0204,             // Range Minimum
                                0x0204,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0800,             // Range Minimum
                                0x0800,             // Range Maximum
                                0x08,               // Alignment
                                0x80,               // Length
                                )
                            IO (Decode16,
                                0x0880,             // Range Minimum
                                0x0880,             // Range Maximum
                                0x08,               // Alignment
                                0x80,               // Length
                                )
                        })
                    }
                }

                Scope (^^PCI0)
                {
                    Device (PS2K)
                    {
                        Name (_UID, Zero)  // _UID: Unique ID
                        Name (_HID, "GOOG000A")  // _HID: Hardware ID
                        Name (_CID, Package (0x02)  // _CID: Compatible ID
                        {
                            EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */, 
                            EisaId ("PNP030B")
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IRQ (Edge, ActiveHigh, Exclusive, )
                                {1}
                        })
                    }
                }
            }

            Device (HDAS)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
                Name (_DDN, "Audio Controller")  // _DDN: DOS Device Name
                Name (UUID, ToUUID ("a69f886e-6ceb-4594-a41f-7b5dce24c553") /* Unknown UUID */)
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Name (NBUF, ResourceTemplate ()
                {
                    QWordMemory (ResourceConsumer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000001, // Length
                        ,, _Y0A, AddressRangeACPI, TypeStatic)
                })
                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == UUID))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((((Arg1 == One) && (NHLA != Zero)) && (
                                NHLL != Zero)))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x01                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y0A._MIN, NBAS)  // _MIN: Minimum Base Address
                            CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y0A._MAX, NMAS)  // _MAX: Maximum Base Address
                            CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y0A._LEN, NLEN)  // _LEN: Length
                            NBAS = NHLA /* \NHLA */
                            NMAS = NHLA /* \NHLA */
                            NLEN = NHLL /* \NHLL */
                            Return (NBUF) /* \_SB_.PCI0.HDAS.NBUF */
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (IRQM, 1, Serialized)
            {
                Name (IQAA, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (IQAP, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (IQBA, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x10
                    }
                })
                Name (IQBP, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKA, 
                        Zero
                    }
                })
                Name (IQCA, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x11
                    }
                })
                Name (IQCP, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (IQDA, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x12
                    }
                })
                Name (IQDP, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKC, 
                        Zero
                    }
                })
                Switch (ToInteger (Arg0))
                {
                    Case (Package (0x04)
                        {
                            One, 
                            0x05, 
                            0x09, 
                            0x0D
                        }

)
                    {
                        If (PICM)
                        {
                            Return (IQAA) /* \_SB_.PCI0.IRQM.IQAA */
                        }
                        Else
                        {
                            Return (IQAP) /* \_SB_.PCI0.IRQM.IQAP */
                        }
                    }
                    Case (Package (0x04)
                        {
                            0x02, 
                            0x06, 
                            0x0A, 
                            0x0E
                        }

)
                    {
                        If (PICM)
                        {
                            Return (IQBA) /* \_SB_.PCI0.IRQM.IQBA */
                        }
                        Else
                        {
                            Return (IQBP) /* \_SB_.PCI0.IRQM.IQBP */
                        }
                    }
                    Case (Package (0x04)
                        {
                            0x03, 
                            0x07, 
                            0x0B, 
                            0x0F
                        }

)
                    {
                        If (PICM)
                        {
                            Return (IQCA) /* \_SB_.PCI0.IRQM.IQCA */
                        }
                        Else
                        {
                            Return (IQCP) /* \_SB_.PCI0.IRQM.IQCP */
                        }
                    }
                    Case (Package (0x04)
                        {
                            0x04, 
                            0x08, 
                            0x0C, 
                            0x10
                        }

)
                    {
                        If (PICM)
                        {
                            Return (IQDA) /* \_SB_.PCI0.IRQM.IQDA */
                        }
                        Else
                        {
                            Return (IQDP) /* \_SB_.PCI0.IRQM.IQDP */
                        }
                    }
                    Default
                    {
                        If (PICM)
                        {
                            Return (IQDA) /* \_SB_.PCI0.IRQM.IQDA */
                        }
                        Else
                        {
                            Return (IQDP) /* \_SB_.PCI0.IRQM.IQDP */
                        }
                    }

                }
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP06)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP07)
            {
                Name (_ADR, 0x001C0006)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP08)
            {
                Name (_ADR, 0x001C0007)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP09)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP10)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP11)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP12)
            {
                Name (_ADR, 0x001D0003)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP13)
            {
                Name (_ADR, 0x001D0004)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP14)
            {
                Name (_ADR, 0x001D0005)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP15)
            {
                Name (_ADR, 0x001D0006)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP16)
            {
                Name (_ADR, 0x001D0007)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, 0x4C, 0x04)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Method (GPCR, 2, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Local0 = 0xFD000000
                }
                ElseIf ((Arg0 == One))
                {
                    Local0 = Zero
                }
                Else
                {
                    Debug = Concatenate (Concatenate ("Invalid Die index (", Arg0), ")\n")
                    Return (Zero)
                }

                Return ((Local0 + (Arg1 << 0x10)))
            }

            Method (RPCR, 3, Serialized)
            {
                OperationRegion (PCRD, SystemMemory, (GPCR (Arg0, Arg1) + Arg2), 0x04)
                Field (PCRD, DWordAcc, NoLock, Preserve)
                {
                    DATA,   32
                }

                Return (DATA) /* \_SB_.PCI0.RPCR.DATA */
            }

            Method (APCR, 4, Serialized)
            {
                OperationRegion (PCRD, SystemMemory, (GPCR (Arg0, Arg1) + Arg2), 0x04)
                Field (PCRD, DWordAcc, NoLock, Preserve)
                {
                    DATA,   32
                }

                DATA &= Arg3
                RPCR (Arg0, Arg1, Arg2)
            }

            Method (OPCR, 4, Serialized)
            {
                OperationRegion (PCRD, SystemMemory, (GPCR (Arg0, Arg1) + Arg2), 0x04)
                Field (PCRD, DWordAcc, NoLock, Preserve)
                {
                    DATA,   32
                }

                DATA |= Arg3
                RPCR (Arg0, Arg1, Arg2)
            }

            Method (PCRB, 1, NotSerialized)
            {
                Return (GPCR (Zero, Arg0))
            }

            Method (PCRR, 2, Serialized)
            {
                Return (RPCR (Zero, Arg0, Arg1))
            }

            Method (PCRA, 3, Serialized)
            {
                APCR (Zero, Arg0, Arg1, Arg2)
            }

            Method (PCRO, 3, Serialized)
            {
                OPCR (Zero, Arg0, Arg1, Arg2)
            }

            Device (PMC)
            {
                Name (_ADR, 0x001F0002)  // _ADR: Address
                Name (_DDN, "Power Management Controller")  // _DDN: DOS Device Name
                OperationRegion (PMCP, PCI_Config, Zero, 0x0100)
                Field (PMCP, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x48), 
                        ,   12, 
                    PWRM,   20
                }

                OperationRegion (PMCM, SystemMemory, (PWRM << 0x0C), 0x3F)
                Field (PMCM, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x1C), 
                    Offset (0x1F), 
                    PMFS,   1, 
                    Offset (0x20), 
                    MPMC,   32, 
                    Offset (0x24), 
                        ,   20, 
                    UWAB,   1
                }
            }

            Device (I2C0)
            {
                Name (_ADR, 0x00150000)  // _ADR: Address
                Name (_DDN, "Serial IO I2C Controller 0")  // _DDN: DOS Device Name
            }

            Device (I2C1)
            {
                Name (_ADR, 0x00150001)  // _ADR: Address
                Name (_DDN, "Serial IO I2C Controller 1")  // _DDN: DOS Device Name
            }

            Device (I2C2)
            {
                Name (_ADR, 0x00150002)  // _ADR: Address
                Name (_DDN, "Serial IO I2C Controller 2")  // _DDN: DOS Device Name
            }

            Device (I2C3)
            {
                Name (_ADR, 0x00150003)  // _ADR: Address
                Name (_DDN, "Serial IO I2C Controller 3")  // _DDN: DOS Device Name
            }

            Device (I2C4)
            {
                Name (_ADR, 0x00190002)  // _ADR: Address
                Name (_DDN, "Serial IO I2C Controller 4")  // _DDN: DOS Device Name
            }

            Device (I2C5)
            {
                Name (_ADR, 0x00190001)  // _ADR: Address
                Name (_DDN, "Serial IO I2C Controller 5")  // _DDN: DOS Device Name
            }

            Device (SPI0)
            {
                Name (_ADR, 0x001E0002)  // _ADR: Address
                Name (_DDN, "Serial IO SPI Controller 0")  // _DDN: DOS Device Name
            }

            Device (SPI1)
            {
                Name (_ADR, 0x001E0003)  // _ADR: Address
                Name (_DDN, "Serial IO SPI Controller 1")  // _DDN: DOS Device Name
            }

            Device (UAR0)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Name (_DDN, "Serial IO UART Controller 0")  // _DDN: DOS Device Name
            }

            Device (UAR1)
            {
                Name (_ADR, 0x001E0001)  // _ADR: Address
                Name (_DDN, "Serial IO UART Controller 1")  // _DDN: DOS Device Name
            }

            Device (UAR2)
            {
                Name (_ADR, 0x00190000)  // _ADR: Address
                Name (_DDN, "Serial IO UART Controller 2")  // _DDN: DOS Device Name
            }

            Device (SBUS)
            {
                Name (_ADR, 0x001F0004)  // _ADR: Address
            }

            Device (EMMC)
            {
                Name (_ADR, 0x001E0004)  // _ADR: Address
                Name (_DDN, "eMMC Controller")  // _DDN: DOS Device Name
                Name (UUID, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */)
                Name (TEMP, Zero)
                OperationRegion (EMCR, PCI_Config, Zero, 0x0100)
                Field (EMCR, WordAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PMCR,   16, 
                    Offset (0xA2), 
                        ,   2, 
                    PGEN,   1
                }

                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == UUID))
                    {
                        If ((Arg2 == 0x09))
                        {
                            If ((Arg1 == 0x03))
                            {
                                Return (Package (0x05)
                                {
                                    Zero, 
                                    Ones, 
                                    Ones, 
                                    Ones, 
                                    Ones
                                })
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    PGEN = Zero
                    PCRA (0xC0, 0x0600, 0x7FFFFFBA)
                    Sleep (0x02)
                    PCRO (0xC0, 0x0600, 0x80000045)
                    PMCR &= 0xFFFC
                    TEMP = PMCR /* \_SB_.PCI0.EMMC.PMCR */
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    PGEN = One
                    PMCR |= 0x03
                    TEMP = PMCR /* \_SB_.PCI0.EMMC.PMCR */
                }

                Device (CARD)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (SDXC)
            {
                Name (_ADR, 0x001E0006)  // _ADR: Address
                Name (_DDN, "SD Controller")  // _DDN: DOS Device Name
                Name (TEMP, Zero)
                OperationRegion (SDCR, PCI_Config, Zero, 0x0100)
                Field (SDCR, WordAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PMCR,   16, 
                    Offset (0xA2), 
                        ,   2, 
                    PGEN,   1
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    PCRA (0xAC, 0x04C4, 0xFFFFEFFF)
                    PCRA (0xAC, 0x04CC, 0xFFFFEFFF)
                    PCRA (0xAC, 0x04D4, 0xFFFFEFFF)
                    PCRA (0xAC, 0x04DC, 0xFFFFEFFF)
                    PCRA (0xAC, 0x04E4, 0xFFFFEFFF)
                    PCRA (0xAC, 0x04F4, 0xFFFFEFFF)
                    PGEN = Zero
                    PCRA (0xC0, 0x0600, 0xFFFFFE7A)
                    Sleep (0x02)
                    PCRO (0xC0, 0x0600, 0x0185)
                    PMCR &= 0xFFFC
                    TEMP = PMCR /* \_SB_.PCI0.SDXC.PMCR */
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    PGEN = One
                    PMCR |= 0x03
                    TEMP = PMCR /* \_SB_.PCI0.SDXC.PMCR */
                    PCRO (0xAC, 0x04C4, 0x1000)
                    PCRO (0xAC, 0x04CC, 0x1000)
                    PCRO (0xAC, 0x04D4, 0x1000)
                    PCRO (0xAC, 0x04DC, 0x1000)
                    PCRO (0xAC, 0x04E4, 0x1000)
                    PCRO (0xAC, 0x04F4, 0x1000)
                }

                Device (CARD)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (One)
                    }
                }
            }

            Method (UPWE, 3, Serialized)
            {
                Local0 = (Arg1 + ((Arg0 - One) * 0x10))
                OperationRegion (PSCR, SystemMemory, ((Arg2 << 0x10) + Local0), 0x10)
                Field (PSCR, DWordAcc, NoLock, Preserve)
                {
                    PSCT,   32
                }

                Local0 = PSCT /* \_SB_.PCI0.UPWE.PSCT */
                Local0 &= 0xFFFFFFFF7F01FFED
                Local0 |= 0x06000000
                PSCT = Local0
            }

            Method (UWES, 3, Serialized)
            {
                Local0 = Arg0
                While (One)
                {
                    FindSetRightBit (Local0, Local1)
                    If ((Local1 == Zero))
                    {
                        Break
                    }

                    UPWE (Local1, Arg1, Arg2)
                    Local0 &= (Local0 - One)
                }
            }

            Device (XHCI)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x6D, 
                    0x03
                })
                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    PMEE = Arg0
                    UWES ((U2WE & 0x03FF), 0x0480, XMEM)
                    UWES ((U3WE & 0x3F), 0x0540, XMEM)
                }

                Name (_S3D, 0x03)  // _S3D: S3 Device State
                Name (_S4D, 0x03)  // _S4D: S4 Device State
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Name (_S3W, 0x03)  // _S3W: S3 Device Wake State
                Name (_S4W, 0x03)  // _S4W: S4 Device Wake State
                OperationRegion (XPRT, PCI_Config, Zero, 0x0100)
                Field (XPRT, AnyAcc, NoLock, Preserve)
                {
                    DVID,   16, 
                    Offset (0x10), 
                    Offset (0x12), 
                    XMEM,   16, 
                    Offset (0x50), 
                        ,   2, 
                    STGE,   1, 
                    Offset (0x74), 
                    D0D3,   2, 
                    Offset (0x75), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1, 
                    Offset (0xA2), 
                        ,   2, 
                    D3HE,   1
                }

                OperationRegion (XREG, SystemMemory, ((XMEM << 0x10) + 0x8000), 0x0200)
                Field (XREG, DWordAcc, Lock, Preserve)
                {
                    Offset (0x1C4), 
                        ,   2, 
                    UPSW,   2
                }

                Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                {
                    Return (D0D3) /* \_SB_.PCI0.XHCI.D0D3 */
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If ((DVID != 0xFFFF))
                    {
                        If (!((XMEM == 0xFFFF) || (XMEM == Zero)))
                        {
                            D3HE = Zero
                            STGE = Zero
                            If ((D0D3 == 0x03))
                            {
                                Local0 = Zero
                                D0D3 = Local0
                                Local0 = D0D3 /* \_SB_.PCI0.XHCI.D0D3 */
                            }

                            UPSW = Zero
                            If (^^PMC.UWAB)
                            {
                                ^^PMC.MPMC = One
                                Local0 = 0x0A
                                While (^^PMC.PMFS)
                                {
                                    If (!Local0)
                                    {
                                        Break
                                    }

                                    Local0--
                                    Sleep (0x0A)
                                }
                            }
                        }
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If ((DVID != 0xFFFF))
                    {
                        If (!((XMEM == 0xFFFF) || (XMEM == Zero)))
                        {
                            PMES = One
                            PMEE = One
                            If ((D0D3 == 0x03))
                            {
                                Local0 = Zero
                                D0D3 = Local0
                                Local0 = D0D3 /* \_SB_.PCI0.XHCI.D0D3 */
                            }

                            UPSW = 0x03
                            D3HE = One
                            STGE = One
                            Local0 = 0x03
                            D0D3 = Local0
                            Local0 = D0D3 /* \_SB_.PCI0.XHCI.D0D3 */
                            If (^^PMC.UWAB)
                            {
                                ^^PMC.MPMC = 0x03
                                Local0 = 0x0A
                                While (^^PMC.PMFS)
                                {
                                    If (!Local0)
                                    {
                                        Break
                                    }

                                    Local0--
                                    Sleep (0x0A)
                                }
                            }
                        }
                    }
                }

                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (GPLD, 1, Serialized)
                    {
                        Name (PCKG, Package (0x01)
                        {
                            Buffer (0x10) {}
                        })
                        CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                        REV = 0x02
                        CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                        VISI = Arg0
                        Return (PCKG) /* \_SB_.PCI0.XHCI.RHUB.GPLD.PCKG */
                    }

                    Device (HS01)
                    {
                        Name (_ADR, One)  // _ADR: Address
                    }

                    Device (HS02)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }

                    Device (HS03)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                    }

                    Device (HS04)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                    }

                    Device (HS05)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                    }

                    Device (HS06)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                    }

                    Device (HS07)
                    {
                        Name (_ADR, 0x07)  // _ADR: Address
                    }

                    Device (HS08)
                    {
                        Name (_ADR, 0x08)  // _ADR: Address
                    }

                    Device (HS09)
                    {
                        Name (_ADR, 0x09)  // _ADR: Address
                    }

                    Device (HS10)
                    {
                        Name (_ADR, 0x0A)  // _ADR: Address
                    }

                    Device (USR1)
                    {
                        Name (_ADR, 0x0B)  // _ADR: Address
                    }

                    Device (USR2)
                    {
                        Name (_ADR, 0x0C)  // _ADR: Address
                    }

                    Device (SS01)
                    {
                        Name (_ADR, 0x0D)  // _ADR: Address
                    }

                    Device (SS02)
                    {
                        Name (_ADR, 0x0E)  // _ADR: Address
                    }

                    Device (SS03)
                    {
                        Name (_ADR, 0x0F)  // _ADR: Address
                    }

                    Device (SS04)
                    {
                        Name (_ADR, 0x10)  // _ADR: Address
                    }

                    Device (SS05)
                    {
                        Name (_ADR, 0x11)  // _ADR: Address
                    }

                    Device (SS06)
                    {
                        Name (_ADR, 0x12)  // _ADR: Address
                    }
                }
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    Return (Arg3)
                }
                Else
                {
                    CreateDWordField (Arg3, Zero, CDW1)
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Scope (GFX0)
            {
                OperationRegion (GFXC, PCI_Config, Zero, 0x0100)
                Field (GFXC, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    BAR0,   64, 
                    Offset (0xE4), 
                    ASLE,   32, 
                    Offset (0xFC), 
                    ASLS,   32
                }

                OperationRegion (GFRG, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFFFF0), 0x00400000)
                Field (GFRG, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xC8254), 
                    BCLV,   16
                }

                Field (GFRG, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xC8256), 
                    BCLM,   16
                }

                Device (BOX3)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (OPRG, SystemMemory, ASLS, 0x2000)
                    Field (OPRG, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x58), 
                        MBOX,   32, 
                        Offset (0x300), 
                        ARDY,   1, 
                        Offset (0x304), 
                        ASLC,   32, 
                        TCHE,   32, 
                        ALSI,   32, 
                        BCLP,   32, 
                        PFIT,   32, 
                        CBLV,   32
                    }

                    Method (XBCM, 1, Serialized)
                    {
                        If ((ASLS == Zero))
                        {
                            Return (Ones)
                        }

                        If ((MBOX & Zero))
                        {
                            Return (Ones)
                        }

                        Local1 = ((Arg0 * 0xFF) / 0x64)
                        If ((Local1 > 0xFF))
                        {
                            Local1 = 0xFF
                        }

                        BCLP = (Local1 | 0x80000000)
                        If ((ARDY == Zero))
                        {
                            Return (Ones)
                        }

                        ASLC = 0x02
                        ASLE = One
                        Local0 = 0x20
                        While ((Local0 > Zero))
                        {
                            Sleep (One)
                            If ((ASLC & Zero))
                            {
                                Local1 = ((ASLC >> 0x0C) & 0x03)
                                If ((Local1 == Zero))
                                {
                                    Return (Zero)
                                }
                                Else
                                {
                                    Return (Ones)
                                }
                            }

                            Local0--
                        }

                        Return (Ones)
                    }
                }

                Device (LEGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (DRCL, 2, NotSerialized)
                    {
                        Return (((Arg0 + (Arg1 / 0x02)) / Arg1))
                    }

                    Method (XBCM, 1, NotSerialized)
                    {
                        BCLV = DRCL ((Arg0 * BCLM), 0x64)
                    }

                    Method (XBQC, 0, NotSerialized)
                    {
                        If ((BCLM == Zero))
                        {
                            Return (Zero)
                        }

                        Local0 = DRCL ((BCLV * 0x64), BCLM)
                        Local1 = 0x02
                        While ((Local1 < (SizeOf (BRIG) - One)))
                        {
                            Local2 = DerefOf (BRIG [Local1])
                            Local3 = DerefOf (BRIG [(Local1 + One)])
                            If ((Local0 < Local3))
                            {
                                If (((Local0 < Local2) || ((Local0 - Local2) < (Local3 - 
                                    Local0))))
                                {
                                    Return (Local2)
                                }
                                Else
                                {
                                    Return (Local3)
                                }
                            }

                            Local1++
                        }

                        Return (Local3)
                    }
                }

                Method (XBCM, 1, NotSerialized)
                {
                    If ((^BOX3.XBCM (Arg0) == Ones))
                    {
                        ^LEGA.XBCM (Arg0)
                    }
                }

                Method (XBQC, 0, NotSerialized)
                {
                    Return (^LEGA.XBQC ())
                }

                Name (BRCT, Zero)
                Method (BRID, 1, NotSerialized)
                {
                    Local0 = Match (BRIG, MEQ, Arg0, MTR, Zero, 0x02)
                    If ((Local0 == Ones))
                    {
                        Return ((SizeOf (BRIG) - One))
                    }

                    Return (Local0)
                }

                Method (XBCL, 0, NotSerialized)
                {
                    BRCT = One
                    Return (BRIG) /* \_SB_.PCI0.GFX0.BRIG */
                }

                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                }

                Method (DECB, 0, NotSerialized)
                {
                    If (BRCT)
                    {
                        Notify (LCD0, 0x87) // Device-Specific
                    }
                    Else
                    {
                        Local0 = BRID (XBQC ())
                        If ((Local0 != 0x02))
                        {
                            Local0--
                        }

                        XBCM (DerefOf (BRIG [Local0]))
                    }
                }

                Method (INCB, 0, NotSerialized)
                {
                    If (BRCT)
                    {
                        Notify (LCD0, 0x86) // Device-Specific
                    }
                    Else
                    {
                        Local0 = BRID (XBQC ())
                        If ((Local0 != (SizeOf (BRIG) - One)))
                        {
                            Local0++
                        }

                        XBCM (DerefOf (BRIG [Local0]))
                    }
                }
            }

            Scope (GFX0)
            {
                Name (BRIG, Package (0x12)
                {
                    0x64, 
                    0x64, 
                    0x02, 
                    0x04, 
                    0x05, 
                    0x07, 
                    0x09, 
                    0x0B, 
                    0x0D, 
                    0x12, 
                    0x14, 
                    0x18, 
                    0x1D, 
                    0x21, 
                    0x28, 
                    0x32, 
                    0x43, 
                    0x64
                })
            }
        }

        Name (CHPS, Package (0x05)
        {
            Package (0x08)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0xFF, 
                0x0BB8, 
                "mA", 
                Zero
            }, 

            Package (0x08)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x18, 
                0x0600, 
                "mA", 
                Zero
            }, 

            Package (0x08)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x10, 
                0x0400, 
                "mA", 
                Zero
            }, 

            Package (0x08)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x08, 
                0x0200, 
                "mA", 
                Zero
            }, 

            Package (0x08)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x08, 
                0x0200, 
                "mA", 
                Zero
            }
        })
        Name (DTRT, Package (0x06)
        {
            Package (0x08)
            {
                PCI0.B0D4, 
                PCI0.B0D4, 
                0x64, 
                0x0A, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x08)
            {
                PCI0.B0D4, 
                DPTF.TSR0, 
                0x64, 
                0x0258, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x08)
            {
                PCI0.B0D4, 
                DPTF.TSR1, 
                0x64, 
                0x0258, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x08)
            {
                PCI0.B0D4, 
                DPTF.TSR2, 
                0x64, 
                0x5A, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x08)
            {
                DPTF.TCHG, 
                DPTF.TSR2, 
                0xC8, 
                0x0258, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x08)
            {
                PCI0.B0D4, 
                DPTF.TSR3, 
                0x64, 
                0x0258, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }
        })
        Name (MPPC, Package (0x03)
        {
            0x02, 
            Package (0x06)
            {
                Zero, 
                0x0BB8, 
                0x1B58, 
                0x1388, 
                0x1388, 
                0xC8
            }, 

            Package (0x06)
            {
                One, 
                0x3A98, 
                0x3A98, 
                0x03E8, 
                0x03E8, 
                0x03E8
            }
        })
        Device (DPTF)
        {
            Name (_HID, EisaId ("INT3400") /* Intel Dynamic Power Performance Management */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (IDSP, Package (0x03)
            {
                ToUUID ("42a441d6-ae6a-462b-a84b-4a8ce79027d3") /* Unknown UUID */, 
                ToUUID ("97c68ae7-15fa-499c-b8c9-5da81d606e0a") /* Unknown UUID */, 
                ToUUID ("16caf1b7-dd38-40ed-b1c1-1b8a1913d531") /* Unknown UUID */
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((DPTE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                If ((DerefOf (IDSP [Zero]) == Arg0))
                {
                    TINI ()
                    ^TCHG.INIT ()
                }

                Return (Arg3)
            }

            Name (TRTR, One)
            Method (_TRT, 0, NotSerialized)  // _TRT: Thermal Relationship Table
            {
                Return (DTRT) /* \_SB_.DTRT */
            }

            Method (CTOK, 1, NotSerialized)
            {
                Local0 = (Arg0 * 0x0A)
                Local0 += 0x0AAC
                Return (Local0)
            }

            Method (TEVT, 1, NotSerialized)
            {
                If ((ToInteger (Arg0) == One))
                {
                    Notify (TSR0, 0x90) // Device-Specific
                }

                If ((ToInteger (Arg0) == 0x02))
                {
                    Notify (TSR1, 0x90) // Device-Specific
                }

                If ((ToInteger (Arg0) == 0x03))
                {
                    Notify (TSR2, 0x90) // Device-Specific
                }

                If ((ToInteger (Arg0) == 0x04))
                {
                    Notify (TSR3, 0x90) // Device-Specific
                }
            }

            Method (TINI, 0, NotSerialized)
            {
                ^TSR0.PATD ()
                ^TSR1.PATD ()
                ^TSR2.PATD ()
                ^TSR3.PATD ()
            }

            Method (TPET, 0, NotSerialized)
            {
                Notify (TSR0, 0x81) // Information Change
                Notify (TSR1, 0x81) // Information Change
                Notify (TSR2, 0x81) // Information Change
                Notify (TSR3, 0x81) // Information Change
            }

            Method (DTRP, 2, Serialized)
            {
                If (CondRefOf (\_SB.PCI0.LPCB.EC0.RCDP))
                {
                    If ((^^PCI0.LPCB.EC0.RCDP () == One))
                    {
                        Return (CTOK (Arg0))
                    }
                }

                Return (CTOK (Arg1))
            }

            Device (TSR0)
            {
                Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (PTYP, 0x03)
                Name (TMPI, One)
                Name (_STR, Unicode ("Ambient"))  // _STR: Description String
                Name (GTSH, 0x14)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((DPTE == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_TMP, 0, Serialized)  // _TMP: Temperature
                {
                    Return (^^^PCI0.LPCB.EC0.TSRD (TMPI))
                }

                Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
                {
                    Return (DTRP (0x2C, 0x30))
                }

                Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
                {
                    Return (DTRP (0x5A, 0x5A))
                }

                Name (PATC, 0x02)
                Method (PAT0, 1, Serialized)
                {
                    ^^^PCI0.LPCB.EC0.PAT0 (TMPI, Arg0)
                }

                Method (PAT1, 1, Serialized)
                {
                    ^^^PCI0.LPCB.EC0.PAT1 (TMPI, Arg0)
                }

                Method (PATD, 0, Serialized)
                {
                    ^^^PCI0.LPCB.EC0.PATD (TMPI)
                }
            }

            Device (TSR1)
            {
                Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Name (PTYP, 0x03)
                Name (TMPI, 0x02)
                Name (_STR, Unicode ("Charger"))  // _STR: Description String
                Name (GTSH, 0x14)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((DPTE == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_TMP, 0, Serialized)  // _TMP: Temperature
                {
                    Return (^^^PCI0.LPCB.EC0.TSRD (TMPI))
                }

                Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
                {
                    Return (DTRP (0x2C, 0x30))
                }

                Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
                {
                    Return (DTRP (0x5A, 0x5A))
                }

                Name (PATC, 0x02)
                Method (PAT0, 1, Serialized)
                {
                    ^^^PCI0.LPCB.EC0.PAT0 (TMPI, Arg0)
                }

                Method (PAT1, 1, Serialized)
                {
                    ^^^PCI0.LPCB.EC0.PAT1 (TMPI, Arg0)
                }

                Method (PATD, 0, Serialized)
                {
                    ^^^PCI0.LPCB.EC0.PATD (TMPI)
                }
            }

            Device (TSR2)
            {
                Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
                Name (PTYP, 0x03)
                Name (TMPI, 0x03)
                Name (_STR, Unicode ("DRAM"))  // _STR: Description String
                Name (GTSH, 0x14)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((DPTE == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_TMP, 0, Serialized)  // _TMP: Temperature
                {
                    Return (^^^PCI0.LPCB.EC0.TSRD (TMPI))
                }

                Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
                {
                    Return (DTRP (0x2C, 0x30))
                }

                Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
                {
                    Return (DTRP (0x5A, 0x5A))
                }

                Name (PATC, 0x02)
                Method (PAT0, 1, Serialized)
                {
                    ^^^PCI0.LPCB.EC0.PAT0 (TMPI, Arg0)
                }

                Method (PAT1, 1, Serialized)
                {
                    ^^^PCI0.LPCB.EC0.PAT1 (TMPI, Arg0)
                }

                Method (PATD, 0, Serialized)
                {
                    ^^^PCI0.LPCB.EC0.PATD (TMPI)
                }
            }

            Device (TSR3)
            {
                Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
                Name (PTYP, 0x03)
                Name (TMPI, 0x04)
                Name (_STR, Unicode ("WiFi"))  // _STR: Description String
                Name (GTSH, 0x14)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((DPTE == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_TMP, 0, Serialized)  // _TMP: Temperature
                {
                    Return (^^^PCI0.LPCB.EC0.TSRD (TMPI))
                }

                Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
                {
                    Return (DTRP (0x2C, 0x30))
                }

                Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
                {
                    Return (DTRP (0x5A, 0x5A))
                }

                Name (PATC, 0x02)
                Method (PAT0, 1, Serialized)
                {
                    ^^^PCI0.LPCB.EC0.PAT0 (TMPI, Arg0)
                }

                Method (PAT1, 1, Serialized)
                {
                    ^^^PCI0.LPCB.EC0.PAT1 (TMPI, Arg0)
                }

                Method (PATD, 0, Serialized)
                {
                    ^^^PCI0.LPCB.EC0.PATD (TMPI)
                }
            }

            Device (TCHG)
            {
                Name (_HID, "INT3403" /* DPTF Temperature Sensor */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
                Name (PTYP, 0x0B)
                Name (_STR, Unicode ("Battery Charger"))  // _STR: Description String
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((DPTE == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (PPSS, 0, NotSerialized)
                {
                    Return (CHPS) /* \_SB_.CHPS */
                }

                Method (PPPC, 0, NotSerialized)
                {
                    Local0 = SizeOf (CHPS)
                    Local0--
                    If ((^^^PCI0.LPCB.EC0.ACEX == Zero))
                    {
                        Return (Local0)
                    }
                    Else
                    {
                        Return (Zero)
                    }

                    Return (Zero)
                }

                Method (SPPC, 1, NotSerialized)
                {
                    Local0 = DerefOf (DerefOf (CHPS [ToInteger (Arg0)]) [0x04]
                        )
                    ^^^PCI0.LPCB.EC0.CHGS (Local0)
                }

                Method (INIT, 0, NotSerialized)
                {
                    ^^^PCI0.LPCB.EC0.CHGD ()
                }
            }
        }

        Scope (PCI0)
        {
            Device (B0D4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((DPTE == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
                {
                    Return (Zero)
                }

                Method (SPPC, 1, NotSerialized)
                {
                    PPCM = Arg0
                    PPCN ()
                }

                Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
                {
                    If (CondRefOf (\_SB.CP00._PSS))
                    {
                        Return (^^^CP00._PSS) /* External reference */
                    }
                    Else
                    {
                        Return (Package (0x01)
                        {
                            Package (0x06)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }
                        })
                    }
                }

                Method (_PDL, 0, NotSerialized)  // _PDL: P-state Depth Limit
                {
                    If (CondRefOf (\_SB.MPDL))
                    {
                        Return (MPDL) /* External reference */
                    }
                    ElseIf (CondRefOf (\_SB.CP00._PSS))
                    {
                        Local0 = SizeOf (^^^CP00._PSS)
                        Local0--
                        Return (Local0)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (PPCC, 0, NotSerialized)
                {
                    Return (MPPC) /* \_SB_.MPPC */
                }

                Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
                {
                    Return (^^^DPTF.CTOK (0x64))
                }

                Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
                {
                    Return (^^^DPTF.CTOK (0x50))
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (PENH)
        {
            Name (_HID, "PRP0001")  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionInputOnly,
                    "\\_SB.PCI0.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x002B
                    }
            })
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "compatible", 
                        Package (0x01)
                        {
                            "gpio-keys"
                        }
                    }
                }
            })
            Device (EJCT)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x04)
                    {
                        Package (0x02)
                        {
                            "linux,code", 
                            0x0F
                        }, 

                        Package (0x02)
                        {
                            "linux,input-type", 
                            0x05
                        }, 

                        Package (0x02)
                        {
                            "label", 
                            "pen_eject"
                        }, 

                        Package (0x02)
                        {
                            "gpios", 
                            Package (0x04)
                            {
                                PENH, 
                                Zero, 
                                Zero, 
                                One
                            }
                        }
                    }
                })
            }
        }
    }

    Scope (_SB.PCI0.I2C2)
    {
        Device (DIGI)
        {
            Name (_HID, "WCOM005C")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x0F, 
                0x03
            })
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0009, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                    0x00, ResourceConsumer, , Exclusive,
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x0000003B,
                }
            })
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    ElseIf ((Arg2 == One))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : B3
[00Ah 0010   6]                       Oem ID : "COREv4"
[010h 0016   8]                 Oem Table ID : "COREBOOT"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "CORE"
[020h 0032   4]        Asl Compiler Revision : 20230628

[024h 0036   4]                 FACS Address : 7AA78240
[028h 0040   4]                 DSDT Address : 7AA57000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : E1
[035h 0053   1]           ACPI Disable Value : 1E
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00001800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00001804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00001850
[04Ch 0076   4]       PM Timer Block Address : 00001808
[050h 0080   4]           GPE0 Block Address : 00001880
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 20
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 00
[069h 0105   1]             Duty Cycle Width : 00
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0002
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 00000CA5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 1
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 01 [Byte Access:8]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 000000007AA57000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000001800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 00 [SystemMemory]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000001804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000001850

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000001808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 00
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000001880

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 00 [SystemMemory]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 B3 43 4F 52 45 76 34  // FACP......COREv4
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 28 06 23 20 40 82 A7 7A 00 70 A5 7A 00 02 09 00  // (.# @..z.p.z....
    0030: B2 00 00 00 E1 1E 00 00 00 18 00 00 00 00 00 00  // ................
    0040: 04 18 00 00 00 00 00 00 50 18 00 00 08 18 00 00  // ........P.......
    0050: 80 18 00 00 00 00 00 00 04 02 01 04 20 00 00 00  // ............ ...
    0060: 65 00 E9 03 00 00 00 00 00 00 0D 00 32 02 00 00  // e...........2...
    0070: A5 0C 00 00 01 08 00 01 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 00 00 00 00 00 00 00 00 00 00 70 A5 7A  // .............p.z
    0090: 00 00 00 00 01 20 00 02 00 18 00 00 00 00 00 00  // ..... ..........
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 18 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 50 18 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 03 08 18 00 00 00 00 00 00 01 00 00 01  // . ..............
    00E0: 80 18 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 4ADD29
[024h 0036   4]    OspmFlags (decoded below) : 63977B51
               64-bit Wake Env Required (V2) : 1

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 29 DD 4A 51 7B 97 63 C1 29 D9 4A 55 7B 93 63  // .).JQ{.c.).JU{.c
    0030: C1 A9 D9 CA 55 FB 93 E3 C1 A9 D9 CA 55 FB 93 E3  // ....U.......U...


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 10
[00Ah 0010   6]                       Oem ID : "COREv4"
[010h 0016   8]                 Oem Table ID : "COREBOOT"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "CORE"
[020h 0032   4]        Asl Compiler Revision : 20230628

[024h 0036   4]            Hardware Block ID : 8086A701

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0000
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 10 43 4F 52 45 76 34  // HPET8.....COREv4
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 28 06 23 20 01 A7 86 80 00 40 00 00 00 00 D0 FE  // (.# .....@......
    0030: 00 00 00 00 00 00 00 00                          // ........


LPIT
----
[000h 0000   4]                    Signature : "LPIT"    [Low Power Idle Table]
[004h 0004   4]                 Table Length : 00000094
[008h 0008   1]                     Revision : 00
[009h 0009   1]                     Checksum : 0F
[00Ah 0010   6]                       Oem ID : "COREv4"
[010h 0016   8]                 Oem Table ID : "COREBOOT"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "CORE"
[020h 0032   4]        Asl Compiler Revision : 20230628

[024h 0036   4]                Subtable Type : 00000000 [Native C-state Idle Structure]
[028h 0040   4]                       Length : 00000038
[02Ch 0044   2]                    Unique ID : 0000
[02Eh 0046   2]                     Reserved : 0000
[030h 0048   4]        Flags (decoded below) : 00000000
                              State Disabled : 0
                                  No Counter : 0

[034h 0052  12]                Entry Trigger : [Generic Address Structure]
[034h 0052   1]                     Space ID : 7F [FunctionalFixedHW]
[035h 0053   1]                    Bit Width : 01
[036h 0054   1]                   Bit Offset : 02
[037h 0055   1]         Encoded Access Width : 00 [Undefined/Legacy]
[038h 0056   8]                      Address : 0000000000000060

[040h 0064   4]                    Residency : 00007530
[044h 0068   4]                      Latency : 00000BB8
[048h 0072  12]            Residency Counter : [Generic Address Structure]
[048h 0072   1]                     Space ID : 7F [FunctionalFixedHW]
[049h 0073   1]                    Bit Width : 40
[04Ah 0074   1]                   Bit Offset : 00
[04Bh 0075   1]         Encoded Access Width : 00 [Undefined/Legacy]
[04Ch 0076   8]                      Address : 0000000000000632

[054h 0084   8]            Counter Frequency : 0000000000000000

[05Ch 0092   4]                Subtable Type : 00000000 [Native C-state Idle Structure]
[060h 0096   4]                       Length : 00000038
[064h 0100   2]                    Unique ID : 0001
[066h 0102   2]                     Reserved : 0000
[068h 0104   4]        Flags (decoded below) : 00000000
                              State Disabled : 0
                                  No Counter : 0

[06Ch 0108  12]                Entry Trigger : [Generic Address Structure]
[06Ch 0108   1]                     Space ID : 7F [FunctionalFixedHW]
[06Dh 0109   1]                    Bit Width : 01
[06Eh 0110   1]                   Bit Offset : 02
[06Fh 0111   1]         Encoded Access Width : 00 [Undefined/Legacy]
[070h 0112   8]                      Address : 0000000000000060

[078h 0120   4]                    Residency : 00007530
[07Ch 0124   4]                      Latency : 00000BB8
[080h 0128  12]            Residency Counter : [Generic Address Structure]
[080h 0128   1]                     Space ID : 00 [SystemMemory]
[081h 0129   1]                    Bit Width : 20
[082h 0130   1]                   Bit Offset : 00
[083h 0131   1]         Encoded Access Width : 03 [DWord Access:32]
[084h 0132   8]                      Address : 00000000FE00013C

[08Ch 0140   8]            Counter Frequency : 0000000000000000


Raw Table Data: Length 148 (0x94)

    0000: 4C 50 49 54 94 00 00 00 00 0F 43 4F 52 45 76 34  // LPIT......COREv4
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 28 06 23 20 00 00 00 00 38 00 00 00 00 00 00 00  // (.# ....8.......
    0030: 00 00 00 00 7F 01 02 00 60 00 00 00 00 00 00 00  // ........`.......
    0040: 30 75 00 00 B8 0B 00 00 7F 40 00 00 32 06 00 00  // 0u.......@..2...
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0060: 38 00 00 00 01 00 00 00 00 00 00 00 7F 01 02 00  // 8...............
    0070: 60 00 00 00 00 00 00 00 30 75 00 00 B8 0B 00 00  // `.......0u......
    0080: 00 20 00 03 3C 01 00 FE 00 00 00 00 00 00 00 00  // . ..<...........
    0090: 00 00 00 00                                      // ....


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : FD
[00Ah 0010   6]                       Oem ID : "COREv4"
[010h 0016   8]                 Oem Table ID : "COREBOOT"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "CORE"
[020h 0032   4]        Asl Compiler Revision : 20230628

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 FD 43 4F 52 45 76 34  // MCFG<.....COREv4
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 28 06 23 20 00 00 00 00 00 00 00 00 00 00 00 E0  // (.# ............
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


NHLT
----
[000h 0000   4]                    Signature : "NHLT"    
[004h 0004   4]                 Table Length : 00001A50
[008h 0008   1]                     Revision : 05
[009h 0009   1]                     Checksum : 0A
[00Ah 0010   6]                       Oem ID : "COREv4"
[010h 0016   8]                 Oem Table ID : "COREBOOT"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "CORE"
[020h 0032   4]        Asl Compiler Revision : 00000000


**** Unknown ACPI table signature [NHLT]


Raw Table Data: Length 6736 (0x1A50)

    0000: 4E 48 4C 54 50 1A 00 00 05 0A 43 4F 52 45 76 34  // NHLTP.....COREv4
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 00 00 00 00 05 C3 17 00 00 02 00 86 80 20 AE 01  // ............. ..
    0030: 00 01 00 00 00 01 01 00 03 00 00 00 00 01 0A 02  // ................
    0040: FE FF 02 00 80 BB 00 00 00 EE 02 00 04 00 10 00  // ................
    0050: 16 00 10 00 03 00 00 00 01 00 00 00 00 00 10 00  // ................
    0060: 80 00 00 AA 00 38 9B 71 A8 0B 00 00 00 00 00 00  // .....8.q........
    0070: 10 FF FF FF 10 10 FF FF 01 01 FF FF 00 11 FF FF  // ................
    0080: 03 00 00 00 03 00 00 00 03 00 30 00 03 00 30 00  // ..........0...0.
    0090: 03 00 00 00 01 00 00 00 00 09 00 04 00 00 00 00  // ................
    00A0: 03 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 00 00 00 00 11 00 00 00 A0 00 04 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 00 00 00 00 11 00 00 00 B6 01 0E 00 00 00 00 00  // ................
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 08 00 00 00 AE FF 0F 00 12 FF 0F 00  // ................
    0100: FB FD 0F 00 61 FC 0F 00 5B FA 0F 00 2C F8 0F 00  // ....a...[...,...
    0110: 43 F6 0F 00 23 F5 0F 00 47 F5 0F 00 F8 F6 0F 00  // C...#...G.......
    0120: 29 FA 0F 00 68 FE 0F 00 E2 02 00 00 8F 06 00 00  // )...h...........
    0130: 75 08 00 00 EF 07 00 00 F3 04 00 00 28 00 00 00  // u...........(...
    0140: D3 FA 0F 00 8A F6 0F 00 C1 F4 0F 00 51 F6 0F 00  // ............Q...
    0150: 22 FB 0F 00 11 02 00 00 29 09 00 00 2C 0E 00 00  // ".......)...,...
    0160: 3E 0F 00 00 8E 0B 00 00 BB 03 00 00 CB F9 0F 00  // >...............
    0170: B0 F0 0F 00 71 EB 0F 00 2E EC 0F 00 56 F3 0F 00  // ....q.......V...
    0180: 53 FF 0F 00 CE 0C 00 00 9C 17 00 00 F8 1B 00 00  // S...............
    0190: D1 17 00 00 9D 0B 00 00 79 FA 0F 00 6D E9 0F 00  // ........y...m...
    01A0: F8 DD 0F 00 53 DC 0F 00 F6 E5 0F 00 D5 F8 0F 00  // ....S...........
    01B0: BB 0F 00 00 A7 23 00 00 EF 2D 00 00 6A 2A 00 00  // .....#...-..j*..
    01C0: 05 19 00 00 24 FE 0F 00 99 E1 0F 00 68 CC 0F 00  // ....$.......h...
    01D0: F7 C5 0F 00 8A D1 0F 00 E1 EC 0F 00 79 10 00 00  // ............y...
    01E0: 99 31 00 00 78 45 00 00 BC 44 00 00 15 2E 00 00  // .1..xE...D......
    01F0: 1B 07 00 00 08 DB 0F 00 84 B7 0F 00 77 A8 0F 00  // ............w...
    0200: 1A B4 0F 00 97 D8 0F 00 10 0C 00 00 3B 3F 00 00  // ............;?..
    0210: E1 61 00 00 F6 67 00 00 B0 4D 00 00 40 19 00 00  // .a...g...M..@...
    0220: 81 D9 0F 00 CA A1 0F 00 1F 84 0F 00 6B 8B 0F 00  // ............k...
    0230: A8 B7 0F 00 3A FD 0F 00 E6 47 00 00 AC 80 00 00  // ....:....G......
    0240: CF 94 00 00 EB 7B 00 00 25 3B 00 00 4A E4 0F 00  // .....{..%;..J...
    0250: FE 90 0F 00 2E 5B 0F 00 12 55 0F 00 2C 83 0F 00  // .....[...U..,...
    0260: 2D DA 0F 00 A3 41 00 00 D1 9A 00 00 C2 C9 00 00  // -....A..........
    0270: F2 BD 00 00 E2 77 00 00 BC 09 00 00 AB 92 0F 00  // .....w..........
    0280: 0F 36 0F 00 0C 11 0F 00 8C 31 0F 00 65 91 0F 00  // .6.......1..e...
    0290: 50 17 00 00 91 9D 00 00 90 FC 00 00 6E 16 01 00  // P...........n...
    02A0: 25 E0 00 00 89 65 00 00 C7 C6 0F 00 EA 2F 0F 00  // %....e......./..
    02B0: AC CC 0E 00 FA BB 0E 00 A9 06 0F 00 25 9C 0F 00  // ............%...
    02C0: 2C 56 00 00 A9 02 01 00 27 71 01 00 2C 80 01 00  // ,V......'q..,...
    02D0: DD 26 01 00 2B 78 00 00 A6 9E 0F 00 F0 D1 0E 00  // .&..+x..........
    02E0: 85 48 0E 00 8B 29 0E 00 65 82 0E 00 A4 42 0F 00  // .H...)..e....B..
    02F0: 71 3F 00 00 8C 3D 01 00 57 FF 01 00 7A 53 02 00  // q?...=..W...zS..
    0300: 9E 20 02 00 73 6B 01 00 CE 55 00 00 49 17 0F 00  // . ..sk...U..I...
    0310: 42 F1 0D 00 2B 21 0D 00 3E D4 0C 00 22 1F 0D 00  // B...+!..>..."...
    0320: 0F FB 0D 00 8E 48 0F 00 D5 D6 00 00 C5 6D 02 00  // .....H.......m..
    0330: 44 D8 03 00 D5 EC 04 00 01 93 05 00 ED C4 05 00  // D...............
    0340: 6F 8D 05 00 85 03 05 00 8D 44 04 00 82 6E 03 00  // o........D...n..
    0350: 5D 9B 02 00 2D DE 01 00 11 42 01 00 C9 CA 00 00  // ]...-....B......
    0360: 5B 76 00 00 38 3F 00 00 4A 1E 00 00 93 0C 00 00  // [v..8?..J.......
    0370: 3B 04 00 00 F9 00 00 00 D6 FF 0F 00 17 02 00 00  // ;...............
    0380: 5B 02 00 00 83 03 00 00 07 05 00 00 E2 06 00 00  // [...............
    0390: 16 09 00 00 A1 0B 00 00 7B 0E 00 00 9A 11 00 00  // ........{.......
    03A0: EC 14 00 00 59 18 00 00 C7 1B 00 00 15 1F 00 00  // ....Y...........
    03B0: 1D 22 00 00 BA 24 00 00 C3 26 00 00 10 28 00 00  // ."...$...&...(..
    03C0: 7E 28 00 00 EC 27 00 00 40 26 00 00 6C 23 00 00  // ~(...'..@&..l#..
    03D0: 6A 1F 00 00 40 1A 00 00 02 14 00 00 D3 0C 00 00  // j...@...........
    03E0: E2 04 00 00 6B FC 0F 00 B7 F3 0F 00 17 EB 0F 00  // ....k...........
    03F0: E2 E2 0F 00 73 DB 0F 00 26 D5 0F 00 4F D0 0F 00  // ....s...&...O...
    0400: 3A CD 0F 00 27 CC 0F 00 42 CD 0F 00 A5 D0 0F 00  // :...'...B.......
    0410: 4F D6 0F 00 28 DE 0F 00 FD E7 0F 00 82 F3 0F 00  // O...(...........
    0420: 4F 00 00 00 EB 0D 00 00 C8 1B 00 00 4E 29 00 00  // O...........N)..
    0430: DD 35 00 00 D8 40 00 00 A7 49 00 00 C4 4F 00 00  // .5...@...I...O..
    0440: BE 52 00 00 42 52 00 00 1E 4E 00 00 4A 46 00 00  // .R..BR...N..JF..
    0450: E5 3A 00 00 3B 2C 00 00 C1 1A 00 00 14 07 00 00  // .:..;,..........
    0460: F4 F1 0F 00 3B DC 0F 00 D6 C6 0F 00 C0 B2 0F 00  // ....;...........
    0470: EC A0 0F 00 47 92 0F 00 A1 87 0F 00 AD 81 0F 00  // ....G...........
    0480: EC 80 0F 00 B1 85 0F 00 0D 90 0F 00 DA 9F 0F 00  // ................
    0490: AA B4 0F 00 DA CD 0F 00 84 EA 0F 00 96 09 00 00  // ................
    04A0: D1 29 00 00 E0 49 00 00 55 68 00 00 CF 83 00 00  // .)...I..Uh......
    04B0: F4 9A 00 00 91 AC 00 00 9E B7 00 00 55 BB 00 00  // ............U...
    04C0: 32 B7 00 00 0B AB 00 00 03 97 00 00 9F 7B 00 00  // 2............{..
    04D0: B2 59 00 00 67 32 00 00 29 07 00 00 A4 D9 0F 00  // .Y..g2..).......
    04E0: A8 AB 0F 00 24 7F 0F 00 02 56 0F 00 23 32 0F 00  // ....$....V..#2..
    04F0: 3C 15 0F 00 CF 00 0F 00 0A F6 0E 00 C9 F5 0E 00  // <...............
    0500: 79 00 0F 00 1E 16 0F 00 45 36 0F 00 0D 60 0F 00  // y.......E6...`..
    0510: 25 92 0F 00 DE CA 0F 00 33 08 00 00 E1 47 00 00  // %.......3....G..
    0520: 77 87 00 00 73 C4 00 00 56 FC 00 00 C0 2C 01 00  // w...s...V....,..
    0530: 88 53 01 00 D4 6E 01 00 2B 7D 01 00 87 7D 01 00  // .S...n..+}...}..
    0540: 60 6F 01 00 B9 52 01 00 1A 28 01 00 95 F0 00 00  // `o...R...(......
    0550: BD AD 00 00 96 61 00 00 87 0E 00 00 47 B7 0F 00  // .....a......G...
    0560: C0 5E 0F 00 FC 07 0F 00 05 B6 0E 00 CB 6B 0E 00  // .^...........k..
    0570: 0F 2C 0E 00 44 F9 0D 00 7E D5 0D 00 5F C2 0D 00  // .,..D...~..._...
    0580: 0A C1 0D 00 1A D2 0D 00 9C F5 0D 00 14 2B 0E 00  // .............+..
    0590: 7C 71 0E 00 55 C7 0E 00 AD 2A 0F 00 3A 99 0F 00  // |q..U....*..:...
    05A0: 64 10 00 00 63 8D 00 00 4F 0D 01 00 3F 8D 01 00  // d...c...O...?...
    05B0: 57 0A 02 00 E5 81 02 00 6E F1 02 00 C1 56 03 00  // W.......n....V..
    05C0: 05 B0 03 00 C3 FB 03 00 EA 38 04 00 D2 66 04 00  // .........8...f..
    05D0: 3F 85 04 00 57 94 04 00 A1 94 04 00 F4 86 04 00  // ?...W...........
    05E0: 73 6C 04 00 7A 46 04 00 91 16 04 00 61 DE 03 00  // sl..zF......a...
    05F0: A1 9F 03 00 0B 5C 03 00 4E 15 03 00 02 CD 02 00  // .....\..N.......
    0600: A2 84 02 00 80 3D 02 00 C4 F8 01 00 63 B7 01 00  // .....=......c...
    0610: 21 7A 01 00 92 41 01 00 16 0E 01 00 E3 DF 00 00  // !z...A..........
    0620: 06 B7 00 00 68 93 00 00 D3 74 00 00 F9 5A 00 00  // ....h....t...Z..
    0630: 7C 45 00 00 EF 33 00 00 DF 25 00 00 D6 1A 00 00  // |E...3...%......
    0640: 62 12 00 00 13 0C 00 00 83 07 00 00 57 04 00 00  // b...........W...
    0650: D8 02 00 00 01 00 00 00 00 09 00 04 00 00 00 00  // ................
    0660: 03 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0670: 00 00 00 00 11 00 00 00 A0 00 04 00 00 00 00 00  // ................
    0680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0690: 00 00 00 00 11 00 00 00 B6 01 0E 00 00 00 00 00  // ................
    06A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06B0: 00 00 00 00 08 00 00 00 AE FF 0F 00 12 FF 0F 00  // ................
    06C0: FB FD 0F 00 61 FC 0F 00 5B FA 0F 00 2C F8 0F 00  // ....a...[...,...
    06D0: 43 F6 0F 00 23 F5 0F 00 47 F5 0F 00 F8 F6 0F 00  // C...#...G.......
    06E0: 29 FA 0F 00 68 FE 0F 00 E2 02 00 00 8F 06 00 00  // )...h...........
    06F0: 75 08 00 00 EF 07 00 00 F3 04 00 00 28 00 00 00  // u...........(...
    0700: D3 FA 0F 00 8A F6 0F 00 C1 F4 0F 00 51 F6 0F 00  // ............Q...
    0710: 22 FB 0F 00 11 02 00 00 29 09 00 00 2C 0E 00 00  // ".......)...,...
    0720: 3E 0F 00 00 8E 0B 00 00 BB 03 00 00 CB F9 0F 00  // >...............
    0730: B0 F0 0F 00 71 EB 0F 00 2E EC 0F 00 56 F3 0F 00  // ....q.......V...
    0740: 53 FF 0F 00 CE 0C 00 00 9C 17 00 00 F8 1B 00 00  // S...............
    0750: D1 17 00 00 9D 0B 00 00 79 FA 0F 00 6D E9 0F 00  // ........y...m...
    0760: F8 DD 0F 00 53 DC 0F 00 F6 E5 0F 00 D5 F8 0F 00  // ....S...........
    0770: BB 0F 00 00 A7 23 00 00 EF 2D 00 00 6A 2A 00 00  // .....#...-..j*..
    0780: 05 19 00 00 24 FE 0F 00 99 E1 0F 00 68 CC 0F 00  // ....$.......h...
    0790: F7 C5 0F 00 8A D1 0F 00 E1 EC 0F 00 79 10 00 00  // ............y...
    07A0: 99 31 00 00 78 45 00 00 BC 44 00 00 15 2E 00 00  // .1..xE...D......
    07B0: 1B 07 00 00 08 DB 0F 00 84 B7 0F 00 77 A8 0F 00  // ............w...
    07C0: 1A B4 0F 00 97 D8 0F 00 10 0C 00 00 3B 3F 00 00  // ............;?..
    07D0: E1 61 00 00 F6 67 00 00 B0 4D 00 00 40 19 00 00  // .a...g...M..@...
    07E0: 81 D9 0F 00 CA A1 0F 00 1F 84 0F 00 6B 8B 0F 00  // ............k...
    07F0: A8 B7 0F 00 3A FD 0F 00 E6 47 00 00 AC 80 00 00  // ....:....G......
    0800: CF 94 00 00 EB 7B 00 00 25 3B 00 00 4A E4 0F 00  // .....{..%;..J...
    0810: FE 90 0F 00 2E 5B 0F 00 12 55 0F 00 2C 83 0F 00  // .....[...U..,...
    0820: 2D DA 0F 00 A3 41 00 00 D1 9A 00 00 C2 C9 00 00  // -....A..........
    0830: F2 BD 00 00 E2 77 00 00 BC 09 00 00 AB 92 0F 00  // .....w..........
    0840: 0F 36 0F 00 0C 11 0F 00 8C 31 0F 00 65 91 0F 00  // .6.......1..e...
    0850: 50 17 00 00 91 9D 00 00 90 FC 00 00 6E 16 01 00  // P...........n...
    0860: 25 E0 00 00 89 65 00 00 C7 C6 0F 00 EA 2F 0F 00  // %....e......./..
    0870: AC CC 0E 00 FA BB 0E 00 A9 06 0F 00 25 9C 0F 00  // ............%...
    0880: 2C 56 00 00 A9 02 01 00 27 71 01 00 2C 80 01 00  // ,V......'q..,...
    0890: DD 26 01 00 2B 78 00 00 A6 9E 0F 00 F0 D1 0E 00  // .&..+x..........
    08A0: 85 48 0E 00 8B 29 0E 00 65 82 0E 00 A4 42 0F 00  // .H...)..e....B..
    08B0: 71 3F 00 00 8C 3D 01 00 57 FF 01 00 7A 53 02 00  // q?...=..W...zS..
    08C0: 9E 20 02 00 73 6B 01 00 CE 55 00 00 49 17 0F 00  // . ..sk...U..I...
    08D0: 42 F1 0D 00 2B 21 0D 00 3E D4 0C 00 22 1F 0D 00  // B...+!..>..."...
    08E0: 0F FB 0D 00 8E 48 0F 00 D5 D6 00 00 C5 6D 02 00  // .....H.......m..
    08F0: 44 D8 03 00 D5 EC 04 00 01 93 05 00 ED C4 05 00  // D...............
    0900: 6F 8D 05 00 85 03 05 00 8D 44 04 00 82 6E 03 00  // o........D...n..
    0910: 5D 9B 02 00 2D DE 01 00 11 42 01 00 C9 CA 00 00  // ]...-....B......
    0920: 5B 76 00 00 38 3F 00 00 4A 1E 00 00 93 0C 00 00  // [v..8?..J.......
    0930: 3B 04 00 00 F9 00 00 00 D6 FF 0F 00 17 02 00 00  // ;...............
    0940: 5B 02 00 00 83 03 00 00 07 05 00 00 E2 06 00 00  // [...............
    0950: 16 09 00 00 A1 0B 00 00 7B 0E 00 00 9A 11 00 00  // ........{.......
    0960: EC 14 00 00 59 18 00 00 C7 1B 00 00 15 1F 00 00  // ....Y...........
    0970: 1D 22 00 00 BA 24 00 00 C3 26 00 00 10 28 00 00  // ."...$...&...(..
    0980: 7E 28 00 00 EC 27 00 00 40 26 00 00 6C 23 00 00  // ~(...'..@&..l#..
    0990: 6A 1F 00 00 40 1A 00 00 02 14 00 00 D3 0C 00 00  // j...@...........
    09A0: E2 04 00 00 6B FC 0F 00 B7 F3 0F 00 17 EB 0F 00  // ....k...........
    09B0: E2 E2 0F 00 73 DB 0F 00 26 D5 0F 00 4F D0 0F 00  // ....s...&...O...
    09C0: 3A CD 0F 00 27 CC 0F 00 42 CD 0F 00 A5 D0 0F 00  // :...'...B.......
    09D0: 4F D6 0F 00 28 DE 0F 00 FD E7 0F 00 82 F3 0F 00  // O...(...........
    09E0: 4F 00 00 00 EB 0D 00 00 C8 1B 00 00 4E 29 00 00  // O...........N)..
    09F0: DD 35 00 00 D8 40 00 00 A7 49 00 00 C4 4F 00 00  // .5...@...I...O..
    0A00: BE 52 00 00 42 52 00 00 1E 4E 00 00 4A 46 00 00  // .R..BR...N..JF..
    0A10: E5 3A 00 00 3B 2C 00 00 C1 1A 00 00 14 07 00 00  // .:..;,..........
    0A20: F4 F1 0F 00 3B DC 0F 00 D6 C6 0F 00 C0 B2 0F 00  // ....;...........
    0A30: EC A0 0F 00 47 92 0F 00 A1 87 0F 00 AD 81 0F 00  // ....G...........
    0A40: EC 80 0F 00 B1 85 0F 00 0D 90 0F 00 DA 9F 0F 00  // ................
    0A50: AA B4 0F 00 DA CD 0F 00 84 EA 0F 00 96 09 00 00  // ................
    0A60: D1 29 00 00 E0 49 00 00 55 68 00 00 CF 83 00 00  // .)...I..Uh......
    0A70: F4 9A 00 00 91 AC 00 00 9E B7 00 00 55 BB 00 00  // ............U...
    0A80: 32 B7 00 00 0B AB 00 00 03 97 00 00 9F 7B 00 00  // 2............{..
    0A90: B2 59 00 00 67 32 00 00 29 07 00 00 A4 D9 0F 00  // .Y..g2..).......
    0AA0: A8 AB 0F 00 24 7F 0F 00 02 56 0F 00 23 32 0F 00  // ....$....V..#2..
    0AB0: 3C 15 0F 00 CF 00 0F 00 0A F6 0E 00 C9 F5 0E 00  // <...............
    0AC0: 79 00 0F 00 1E 16 0F 00 45 36 0F 00 0D 60 0F 00  // y.......E6...`..
    0AD0: 25 92 0F 00 DE CA 0F 00 33 08 00 00 E1 47 00 00  // %.......3....G..
    0AE0: 77 87 00 00 73 C4 00 00 56 FC 00 00 C0 2C 01 00  // w...s...V....,..
    0AF0: 88 53 01 00 D4 6E 01 00 2B 7D 01 00 87 7D 01 00  // .S...n..+}...}..
    0B00: 60 6F 01 00 B9 52 01 00 1A 28 01 00 95 F0 00 00  // `o...R...(......
    0B10: BD AD 00 00 96 61 00 00 87 0E 00 00 47 B7 0F 00  // .....a......G...
    0B20: C0 5E 0F 00 FC 07 0F 00 05 B6 0E 00 CB 6B 0E 00  // .^...........k..
    0B30: 0F 2C 0E 00 44 F9 0D 00 7E D5 0D 00 5F C2 0D 00  // .,..D...~..._...
    0B40: 0A C1 0D 00 1A D2 0D 00 9C F5 0D 00 14 2B 0E 00  // .............+..
    0B50: 7C 71 0E 00 55 C7 0E 00 AD 2A 0F 00 3A 99 0F 00  // |q..U....*..:...
    0B60: 64 10 00 00 63 8D 00 00 4F 0D 01 00 3F 8D 01 00  // d...c...O...?...
    0B70: 57 0A 02 00 E5 81 02 00 6E F1 02 00 C1 56 03 00  // W.......n....V..
    0B80: 05 B0 03 00 C3 FB 03 00 EA 38 04 00 D2 66 04 00  // .........8...f..
    0B90: 3F 85 04 00 57 94 04 00 A1 94 04 00 F4 86 04 00  // ?...W...........
    0BA0: 73 6C 04 00 7A 46 04 00 91 16 04 00 61 DE 03 00  // sl..zF......a...
    0BB0: A1 9F 03 00 0B 5C 03 00 4E 15 03 00 02 CD 02 00  // .....\..N.......
    0BC0: A2 84 02 00 80 3D 02 00 C4 F8 01 00 63 B7 01 00  // .....=......c...
    0BD0: 21 7A 01 00 92 41 01 00 16 0E 01 00 E3 DF 00 00  // !z...A..........
    0BE0: 06 B7 00 00 68 93 00 00 D3 74 00 00 F9 5A 00 00  // ....h....t...Z..
    0BF0: 7C 45 00 00 EF 33 00 00 DF 25 00 00 D6 1A 00 00  // |E...3...%......
    0C00: 62 12 00 00 13 0C 00 00 83 07 00 00 57 04 00 00  // b...........W...
    0C10: D8 02 00 00 FE FF 02 00 80 BB 00 00 00 DC 05 00  // ................
    0C20: 08 00 20 00 16 00 20 00 03 00 00 00 01 00 00 00  // .. ... .........
    0C30: 00 00 10 00 80 00 00 AA 00 38 9B 71 A8 0B 00 00  // .........8.q....
    0C40: 00 00 00 00 10 FF FF FF 10 10 FF FF 01 01 FF FF  // ................
    0C50: 00 11 FF FF 03 00 00 00 03 00 00 00 03 00 38 00  // ..............8.
    0C60: 03 00 38 00 03 00 00 00 01 00 00 00 00 09 00 04  // ..8.............
    0C70: 00 00 00 00 03 08 00 00 00 00 00 00 00 00 00 00  // ................
    0C80: 00 00 00 00 00 00 00 00 11 00 00 00 A0 00 04 00  // ................
    0C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CA0: 00 00 00 00 00 00 00 00 11 00 00 00 B6 01 0E 00  // ................
    0CB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CC0: 00 00 00 00 00 00 00 00 08 00 00 00 AE FF 0F 00  // ................
    0CD0: 12 FF 0F 00 FB FD 0F 00 61 FC 0F 00 5B FA 0F 00  // ........a...[...
    0CE0: 2C F8 0F 00 43 F6 0F 00 23 F5 0F 00 47 F5 0F 00  // ,...C...#...G...
    0CF0: F8 F6 0F 00 29 FA 0F 00 68 FE 0F 00 E2 02 00 00  // ....)...h.......
    0D00: 8F 06 00 00 75 08 00 00 EF 07 00 00 F3 04 00 00  // ....u...........
    0D10: 28 00 00 00 D3 FA 0F 00 8A F6 0F 00 C1 F4 0F 00  // (...............
    0D20: 51 F6 0F 00 22 FB 0F 00 11 02 00 00 29 09 00 00  // Q...".......)...
    0D30: 2C 0E 00 00 3E 0F 00 00 8E 0B 00 00 BB 03 00 00  // ,...>...........
    0D40: CB F9 0F 00 B0 F0 0F 00 71 EB 0F 00 2E EC 0F 00  // ........q.......
    0D50: 56 F3 0F 00 53 FF 0F 00 CE 0C 00 00 9C 17 00 00  // V...S...........
    0D60: F8 1B 00 00 D1 17 00 00 9D 0B 00 00 79 FA 0F 00  // ............y...
    0D70: 6D E9 0F 00 F8 DD 0F 00 53 DC 0F 00 F6 E5 0F 00  // m.......S.......
    0D80: D5 F8 0F 00 BB 0F 00 00 A7 23 00 00 EF 2D 00 00  // .........#...-..
    0D90: 6A 2A 00 00 05 19 00 00 24 FE 0F 00 99 E1 0F 00  // j*......$.......
    0DA0: 68 CC 0F 00 F7 C5 0F 00 8A D1 0F 00 E1 EC 0F 00  // h...............
    0DB0: 79 10 00 00 99 31 00 00 78 45 00 00 BC 44 00 00  // y....1..xE...D..
    0DC0: 15 2E 00 00 1B 07 00 00 08 DB 0F 00 84 B7 0F 00  // ................
    0DD0: 77 A8 0F 00 1A B4 0F 00 97 D8 0F 00 10 0C 00 00  // w...............
    0DE0: 3B 3F 00 00 E1 61 00 00 F6 67 00 00 B0 4D 00 00  // ;?...a...g...M..
    0DF0: 40 19 00 00 81 D9 0F 00 CA A1 0F 00 1F 84 0F 00  // @...............
    0E00: 6B 8B 0F 00 A8 B7 0F 00 3A FD 0F 00 E6 47 00 00  // k.......:....G..
    0E10: AC 80 00 00 CF 94 00 00 EB 7B 00 00 25 3B 00 00  // .........{..%;..
    0E20: 4A E4 0F 00 FE 90 0F 00 2E 5B 0F 00 12 55 0F 00  // J........[...U..
    0E30: 2C 83 0F 00 2D DA 0F 00 A3 41 00 00 D1 9A 00 00  // ,...-....A......
    0E40: C2 C9 00 00 F2 BD 00 00 E2 77 00 00 BC 09 00 00  // .........w......
    0E50: AB 92 0F 00 0F 36 0F 00 0C 11 0F 00 8C 31 0F 00  // .....6.......1..
    0E60: 65 91 0F 00 50 17 00 00 91 9D 00 00 90 FC 00 00  // e...P...........
    0E70: 6E 16 01 00 25 E0 00 00 89 65 00 00 C7 C6 0F 00  // n...%....e......
    0E80: EA 2F 0F 00 AC CC 0E 00 FA BB 0E 00 A9 06 0F 00  // ./..............
    0E90: 25 9C 0F 00 2C 56 00 00 A9 02 01 00 27 71 01 00  // %...,V......'q..
    0EA0: 2C 80 01 00 DD 26 01 00 2B 78 00 00 A6 9E 0F 00  // ,....&..+x......
    0EB0: F0 D1 0E 00 85 48 0E 00 8B 29 0E 00 65 82 0E 00  // .....H...)..e...
    0EC0: A4 42 0F 00 71 3F 00 00 8C 3D 01 00 57 FF 01 00  // .B..q?...=..W...
    0ED0: 7A 53 02 00 9E 20 02 00 73 6B 01 00 CE 55 00 00  // zS... ..sk...U..
    0EE0: 49 17 0F 00 42 F1 0D 00 2B 21 0D 00 3E D4 0C 00  // I...B...+!..>...
    0EF0: 22 1F 0D 00 0F FB 0D 00 8E 48 0F 00 D5 D6 00 00  // "........H......
    0F00: C5 6D 02 00 44 D8 03 00 D5 EC 04 00 01 93 05 00  // .m..D...........
    0F10: ED C4 05 00 6F 8D 05 00 85 03 05 00 8D 44 04 00  // ....o........D..
    0F20: 82 6E 03 00 5D 9B 02 00 2D DE 01 00 11 42 01 00  // .n..]...-....B..
    0F30: C9 CA 00 00 5B 76 00 00 38 3F 00 00 4A 1E 00 00  // ....[v..8?..J...
    0F40: 93 0C 00 00 3B 04 00 00 F9 00 00 00 D6 FF 0F 00  // ....;...........
    0F50: 17 02 00 00 5B 02 00 00 83 03 00 00 07 05 00 00  // ....[...........
    0F60: E2 06 00 00 16 09 00 00 A1 0B 00 00 7B 0E 00 00  // ............{...
    0F70: 9A 11 00 00 EC 14 00 00 59 18 00 00 C7 1B 00 00  // ........Y.......
    0F80: 15 1F 00 00 1D 22 00 00 BA 24 00 00 C3 26 00 00  // ....."...$...&..
    0F90: 10 28 00 00 7E 28 00 00 EC 27 00 00 40 26 00 00  // .(..~(...'..@&..
    0FA0: 6C 23 00 00 6A 1F 00 00 40 1A 00 00 02 14 00 00  // l#..j...@.......
    0FB0: D3 0C 00 00 E2 04 00 00 6B FC 0F 00 B7 F3 0F 00  // ........k.......
    0FC0: 17 EB 0F 00 E2 E2 0F 00 73 DB 0F 00 26 D5 0F 00  // ........s...&...
    0FD0: 4F D0 0F 00 3A CD 0F 00 27 CC 0F 00 42 CD 0F 00  // O...:...'...B...
    0FE0: A5 D0 0F 00 4F D6 0F 00 28 DE 0F 00 FD E7 0F 00  // ....O...(.......
    0FF0: 82 F3 0F 00 4F 00 00 00 EB 0D 00 00 C8 1B 00 00  // ....O...........
    1000: 4E 29 00 00 DD 35 00 00 D8 40 00 00 A7 49 00 00  // N)...5...@...I..
    1010: C4 4F 00 00 BE 52 00 00 42 52 00 00 1E 4E 00 00  // .O...R..BR...N..
    1020: 4A 46 00 00 E5 3A 00 00 3B 2C 00 00 C1 1A 00 00  // JF...:..;,......
    1030: 14 07 00 00 F4 F1 0F 00 3B DC 0F 00 D6 C6 0F 00  // ........;.......
    1040: C0 B2 0F 00 EC A0 0F 00 47 92 0F 00 A1 87 0F 00  // ........G.......
    1050: AD 81 0F 00 EC 80 0F 00 B1 85 0F 00 0D 90 0F 00  // ................
    1060: DA 9F 0F 00 AA B4 0F 00 DA CD 0F 00 84 EA 0F 00  // ................
    1070: 96 09 00 00 D1 29 00 00 E0 49 00 00 55 68 00 00  // .....)...I..Uh..
    1080: CF 83 00 00 F4 9A 00 00 91 AC 00 00 9E B7 00 00  // ................
    1090: 55 BB 00 00 32 B7 00 00 0B AB 00 00 03 97 00 00  // U...2...........
    10A0: 9F 7B 00 00 B2 59 00 00 67 32 00 00 29 07 00 00  // .{...Y..g2..)...
    10B0: A4 D9 0F 00 A8 AB 0F 00 24 7F 0F 00 02 56 0F 00  // ........$....V..
    10C0: 23 32 0F 00 3C 15 0F 00 CF 00 0F 00 0A F6 0E 00  // #2..<...........
    10D0: C9 F5 0E 00 79 00 0F 00 1E 16 0F 00 45 36 0F 00  // ....y.......E6..
    10E0: 0D 60 0F 00 25 92 0F 00 DE CA 0F 00 33 08 00 00  // .`..%.......3...
    10F0: E1 47 00 00 77 87 00 00 73 C4 00 00 56 FC 00 00  // .G..w...s...V...
    1100: C0 2C 01 00 88 53 01 00 D4 6E 01 00 2B 7D 01 00  // .,...S...n..+}..
    1110: 87 7D 01 00 60 6F 01 00 B9 52 01 00 1A 28 01 00  // .}..`o...R...(..
    1120: 95 F0 00 00 BD AD 00 00 96 61 00 00 87 0E 00 00  // .........a......
    1130: 47 B7 0F 00 C0 5E 0F 00 FC 07 0F 00 05 B6 0E 00  // G....^..........
    1140: CB 6B 0E 00 0F 2C 0E 00 44 F9 0D 00 7E D5 0D 00  // .k...,..D...~...
    1150: 5F C2 0D 00 0A C1 0D 00 1A D2 0D 00 9C F5 0D 00  // _...............
    1160: 14 2B 0E 00 7C 71 0E 00 55 C7 0E 00 AD 2A 0F 00  // .+..|q..U....*..
    1170: 3A 99 0F 00 64 10 00 00 63 8D 00 00 4F 0D 01 00  // :...d...c...O...
    1180: 3F 8D 01 00 57 0A 02 00 E5 81 02 00 6E F1 02 00  // ?...W.......n...
    1190: C1 56 03 00 05 B0 03 00 C3 FB 03 00 EA 38 04 00  // .V...........8..
    11A0: D2 66 04 00 3F 85 04 00 57 94 04 00 A1 94 04 00  // .f..?...W.......
    11B0: F4 86 04 00 73 6C 04 00 7A 46 04 00 91 16 04 00  // ....sl..zF......
    11C0: 61 DE 03 00 A1 9F 03 00 0B 5C 03 00 4E 15 03 00  // a........\..N...
    11D0: 02 CD 02 00 A2 84 02 00 80 3D 02 00 C4 F8 01 00  // .........=......
    11E0: 63 B7 01 00 21 7A 01 00 92 41 01 00 16 0E 01 00  // c...!z...A......
    11F0: E3 DF 00 00 06 B7 00 00 68 93 00 00 D3 74 00 00  // ........h....t..
    1200: F9 5A 00 00 7C 45 00 00 EF 33 00 00 DF 25 00 00  // .Z..|E...3...%..
    1210: D6 1A 00 00 62 12 00 00 13 0C 00 00 83 07 00 00  // ....b...........
    1220: 57 04 00 00 D8 02 00 00 01 00 00 00 00 09 00 04  // W...............
    1230: 00 00 00 00 03 08 00 00 00 00 00 00 00 00 00 00  // ................
    1240: 00 00 00 00 00 00 00 00 11 00 00 00 A0 00 04 00  // ................
    1250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1260: 00 00 00 00 00 00 00 00 11 00 00 00 B6 01 0E 00  // ................
    1270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1280: 00 00 00 00 00 00 00 00 08 00 00 00 AE FF 0F 00  // ................
    1290: 12 FF 0F 00 FB FD 0F 00 61 FC 0F 00 5B FA 0F 00  // ........a...[...
    12A0: 2C F8 0F 00 43 F6 0F 00 23 F5 0F 00 47 F5 0F 00  // ,...C...#...G...
    12B0: F8 F6 0F 00 29 FA 0F 00 68 FE 0F 00 E2 02 00 00  // ....)...h.......
    12C0: 8F 06 00 00 75 08 00 00 EF 07 00 00 F3 04 00 00  // ....u...........
    12D0: 28 00 00 00 D3 FA 0F 00 8A F6 0F 00 C1 F4 0F 00  // (...............
    12E0: 51 F6 0F 00 22 FB 0F 00 11 02 00 00 29 09 00 00  // Q...".......)...
    12F0: 2C 0E 00 00 3E 0F 00 00 8E 0B 00 00 BB 03 00 00  // ,...>...........
    1300: CB F9 0F 00 B0 F0 0F 00 71 EB 0F 00 2E EC 0F 00  // ........q.......
    1310: 56 F3 0F 00 53 FF 0F 00 CE 0C 00 00 9C 17 00 00  // V...S...........
    1320: F8 1B 00 00 D1 17 00 00 9D 0B 00 00 79 FA 0F 00  // ............y...
    1330: 6D E9 0F 00 F8 DD 0F 00 53 DC 0F 00 F6 E5 0F 00  // m.......S.......
    1340: D5 F8 0F 00 BB 0F 00 00 A7 23 00 00 EF 2D 00 00  // .........#...-..
    1350: 6A 2A 00 00 05 19 00 00 24 FE 0F 00 99 E1 0F 00  // j*......$.......
    1360: 68 CC 0F 00 F7 C5 0F 00 8A D1 0F 00 E1 EC 0F 00  // h...............
    1370: 79 10 00 00 99 31 00 00 78 45 00 00 BC 44 00 00  // y....1..xE...D..
    1380: 15 2E 00 00 1B 07 00 00 08 DB 0F 00 84 B7 0F 00  // ................
    1390: 77 A8 0F 00 1A B4 0F 00 97 D8 0F 00 10 0C 00 00  // w...............
    13A0: 3B 3F 00 00 E1 61 00 00 F6 67 00 00 B0 4D 00 00  // ;?...a...g...M..
    13B0: 40 19 00 00 81 D9 0F 00 CA A1 0F 00 1F 84 0F 00  // @...............
    13C0: 6B 8B 0F 00 A8 B7 0F 00 3A FD 0F 00 E6 47 00 00  // k.......:....G..
    13D0: AC 80 00 00 CF 94 00 00 EB 7B 00 00 25 3B 00 00  // .........{..%;..
    13E0: 4A E4 0F 00 FE 90 0F 00 2E 5B 0F 00 12 55 0F 00  // J........[...U..
    13F0: 2C 83 0F 00 2D DA 0F 00 A3 41 00 00 D1 9A 00 00  // ,...-....A......
    1400: C2 C9 00 00 F2 BD 00 00 E2 77 00 00 BC 09 00 00  // .........w......
    1410: AB 92 0F 00 0F 36 0F 00 0C 11 0F 00 8C 31 0F 00  // .....6.......1..
    1420: 65 91 0F 00 50 17 00 00 91 9D 00 00 90 FC 00 00  // e...P...........
    1430: 6E 16 01 00 25 E0 00 00 89 65 00 00 C7 C6 0F 00  // n...%....e......
    1440: EA 2F 0F 00 AC CC 0E 00 FA BB 0E 00 A9 06 0F 00  // ./..............
    1450: 25 9C 0F 00 2C 56 00 00 A9 02 01 00 27 71 01 00  // %...,V......'q..
    1460: 2C 80 01 00 DD 26 01 00 2B 78 00 00 A6 9E 0F 00  // ,....&..+x......
    1470: F0 D1 0E 00 85 48 0E 00 8B 29 0E 00 65 82 0E 00  // .....H...)..e...
    1480: A4 42 0F 00 71 3F 00 00 8C 3D 01 00 57 FF 01 00  // .B..q?...=..W...
    1490: 7A 53 02 00 9E 20 02 00 73 6B 01 00 CE 55 00 00  // zS... ..sk...U..
    14A0: 49 17 0F 00 42 F1 0D 00 2B 21 0D 00 3E D4 0C 00  // I...B...+!..>...
    14B0: 22 1F 0D 00 0F FB 0D 00 8E 48 0F 00 D5 D6 00 00  // "........H......
    14C0: C5 6D 02 00 44 D8 03 00 D5 EC 04 00 01 93 05 00  // .m..D...........
    14D0: ED C4 05 00 6F 8D 05 00 85 03 05 00 8D 44 04 00  // ....o........D..
    14E0: 82 6E 03 00 5D 9B 02 00 2D DE 01 00 11 42 01 00  // .n..]...-....B..
    14F0: C9 CA 00 00 5B 76 00 00 38 3F 00 00 4A 1E 00 00  // ....[v..8?..J...
    1500: 93 0C 00 00 3B 04 00 00 F9 00 00 00 D6 FF 0F 00  // ....;...........
    1510: 17 02 00 00 5B 02 00 00 83 03 00 00 07 05 00 00  // ....[...........
    1520: E2 06 00 00 16 09 00 00 A1 0B 00 00 7B 0E 00 00  // ............{...
    1530: 9A 11 00 00 EC 14 00 00 59 18 00 00 C7 1B 00 00  // ........Y.......
    1540: 15 1F 00 00 1D 22 00 00 BA 24 00 00 C3 26 00 00  // ....."...$...&..
    1550: 10 28 00 00 7E 28 00 00 EC 27 00 00 40 26 00 00  // .(..~(...'..@&..
    1560: 6C 23 00 00 6A 1F 00 00 40 1A 00 00 02 14 00 00  // l#..j...@.......
    1570: D3 0C 00 00 E2 04 00 00 6B FC 0F 00 B7 F3 0F 00  // ........k.......
    1580: 17 EB 0F 00 E2 E2 0F 00 73 DB 0F 00 26 D5 0F 00  // ........s...&...
    1590: 4F D0 0F 00 3A CD 0F 00 27 CC 0F 00 42 CD 0F 00  // O...:...'...B...
    15A0: A5 D0 0F 00 4F D6 0F 00 28 DE 0F 00 FD E7 0F 00  // ....O...(.......
    15B0: 82 F3 0F 00 4F 00 00 00 EB 0D 00 00 C8 1B 00 00  // ....O...........
    15C0: 4E 29 00 00 DD 35 00 00 D8 40 00 00 A7 49 00 00  // N)...5...@...I..
    15D0: C4 4F 00 00 BE 52 00 00 42 52 00 00 1E 4E 00 00  // .O...R..BR...N..
    15E0: 4A 46 00 00 E5 3A 00 00 3B 2C 00 00 C1 1A 00 00  // JF...:..;,......
    15F0: 14 07 00 00 F4 F1 0F 00 3B DC 0F 00 D6 C6 0F 00  // ........;.......
    1600: C0 B2 0F 00 EC A0 0F 00 47 92 0F 00 A1 87 0F 00  // ........G.......
    1610: AD 81 0F 00 EC 80 0F 00 B1 85 0F 00 0D 90 0F 00  // ................
    1620: DA 9F 0F 00 AA B4 0F 00 DA CD 0F 00 84 EA 0F 00  // ................
    1630: 96 09 00 00 D1 29 00 00 E0 49 00 00 55 68 00 00  // .....)...I..Uh..
    1640: CF 83 00 00 F4 9A 00 00 91 AC 00 00 9E B7 00 00  // ................
    1650: 55 BB 00 00 32 B7 00 00 0B AB 00 00 03 97 00 00  // U...2...........
    1660: 9F 7B 00 00 B2 59 00 00 67 32 00 00 29 07 00 00  // .{...Y..g2..)...
    1670: A4 D9 0F 00 A8 AB 0F 00 24 7F 0F 00 02 56 0F 00  // ........$....V..
    1680: 23 32 0F 00 3C 15 0F 00 CF 00 0F 00 0A F6 0E 00  // #2..<...........
    1690: C9 F5 0E 00 79 00 0F 00 1E 16 0F 00 45 36 0F 00  // ....y.......E6..
    16A0: 0D 60 0F 00 25 92 0F 00 DE CA 0F 00 33 08 00 00  // .`..%.......3...
    16B0: E1 47 00 00 77 87 00 00 73 C4 00 00 56 FC 00 00  // .G..w...s...V...
    16C0: C0 2C 01 00 88 53 01 00 D4 6E 01 00 2B 7D 01 00  // .,...S...n..+}..
    16D0: 87 7D 01 00 60 6F 01 00 B9 52 01 00 1A 28 01 00  // .}..`o...R...(..
    16E0: 95 F0 00 00 BD AD 00 00 96 61 00 00 87 0E 00 00  // .........a......
    16F0: 47 B7 0F 00 C0 5E 0F 00 FC 07 0F 00 05 B6 0E 00  // G....^..........
    1700: CB 6B 0E 00 0F 2C 0E 00 44 F9 0D 00 7E D5 0D 00  // .k...,..D...~...
    1710: 5F C2 0D 00 0A C1 0D 00 1A D2 0D 00 9C F5 0D 00  // _...............
    1720: 14 2B 0E 00 7C 71 0E 00 55 C7 0E 00 AD 2A 0F 00  // .+..|q..U....*..
    1730: 3A 99 0F 00 64 10 00 00 63 8D 00 00 4F 0D 01 00  // :...d...c...O...
    1740: 3F 8D 01 00 57 0A 02 00 E5 81 02 00 6E F1 02 00  // ?...W.......n...
    1750: C1 56 03 00 05 B0 03 00 C3 FB 03 00 EA 38 04 00  // .V...........8..
    1760: D2 66 04 00 3F 85 04 00 57 94 04 00 A1 94 04 00  // .f..?...W.......
    1770: F4 86 04 00 73 6C 04 00 7A 46 04 00 91 16 04 00  // ....sl..zF......
    1780: 61 DE 03 00 A1 9F 03 00 0B 5C 03 00 4E 15 03 00  // a........\..N...
    1790: 02 CD 02 00 A2 84 02 00 80 3D 02 00 C4 F8 01 00  // .........=......
    17A0: 63 B7 01 00 21 7A 01 00 92 41 01 00 16 0E 01 00  // c...!z...A......
    17B0: E3 DF 00 00 06 B7 00 00 68 93 00 00 D3 74 00 00  // ........h....t..
    17C0: F9 5A 00 00 7C 45 00 00 EF 33 00 00 DF 25 00 00  // .Z..|E...3...%..
    17D0: D6 1A 00 00 62 12 00 00 13 0C 00 00 83 07 00 00  // ....b...........
    17E0: 57 04 00 00 D8 02 00 00 98 00 00 00 03 00 86 80  // W...............
    17F0: 34 AE 01 00 01 00 00 00 04 00 00 00 00 00 00 01  // 4...............
    1800: FE FF 02 00 80 BB 00 00 00 DC 05 00 08 00 20 00  // .............. .
    1810: 16 00 18 00 03 00 00 00 01 00 00 00 00 00 10 00  // ................
    1820: 80 00 00 AA 00 38 9B 71 54 00 00 00 00 00 00 00  // .....8.qT.......
    1830: 20 FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  //  ...............
    1840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1850: 37 04 D0 83 00 00 70 C0 00 00 00 00 05 00 01 02  // 7.....p.........
    1860: 0F 00 00 00 0F 00 00 00 02 40 00 00 04 00 00 00  // .........@......
    1870: 00 0F 07 07 20 00 00 00 01 00 00 00 FF 0F 00 00  // .... ...........
    1880: 98 00 00 00 03 00 86 80 34 AE 01 00 01 00 00 00  // ........4.......
    1890: 04 01 00 00 00 00 00 01 FE FF 04 00 80 BB 00 00  // ................
    18A0: 00 B8 0B 00 10 00 20 00 16 00 20 00 00 00 00 00  // ...... ... .....
    18B0: 01 00 00 00 00 00 10 00 80 00 00 AA 00 38 9B 71  // .............8.q
    18C0: 54 00 00 00 00 00 00 00 10 32 FF FF 00 00 00 00  // T........2......
    18D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    18E0: 00 00 00 00 00 00 00 00 37 04 D0 83 00 00 70 C0  // ........7.....p.
    18F0: 00 00 00 00 05 00 01 02 0F 00 00 00 0F 00 00 00  // ................
    1900: 02 40 00 00 04 00 00 00 00 0F 07 07 20 00 00 00  // .@.......... ...
    1910: 01 00 00 00 FF 0F 00 00 9A 00 00 00 03 00 86 80  // ................
    1920: 34 AE 01 00 01 00 00 00 04 00 01 02 00 00 00 00  // 4...............
    1930: 00 01 FE FF 02 00 80 BB 00 00 00 DC 05 00 08 00  // ................
    1940: 20 00 16 00 18 00 03 00 00 00 01 00 00 00 00 00  //  ...............
    1950: 10 00 80 00 00 AA 00 38 9B 71 54 00 00 00 00 00  // .......8.qT.....
    1960: 00 00 10 FF FF FF 32 FF FF FF 10 32 FF FF 10 32  // ......2....2...2
    1970: FF FF 10 32 FF FF 10 32 FF FF 10 32 FF FF 10 32  // ...2...2...2...2
    1980: FF FF 37 09 D0 81 00 00 70 C0 00 00 00 00 00 00  // ..7.....p.......
    1990: 99 02 03 00 00 00 03 00 00 00 02 40 00 00 00 00  // ...........@....
    19A0: 00 00 00 0F 07 07 20 00 00 00 01 00 00 00 FF 0F  // ...... .........
    19B0: 00 00 9A 00 00 00 03 00 86 80 34 AE 01 00 01 00  // ..........4.....
    19C0: 00 00 04 01 01 02 00 00 00 00 00 01 FE FF 02 00  // ................
    19D0: 80 BB 00 00 00 DC 05 00 08 00 20 00 16 00 18 00  // .......... .....
    19E0: 03 00 00 00 01 00 00 00 00 00 10 00 80 00 00 AA  // ................
    19F0: 00 38 9B 71 54 00 00 00 00 00 00 00 10 FF FF FF  // .8.qT...........
    1A00: 32 FF FF FF 10 32 FF FF 10 32 FF FF 10 32 FF FF  // 2....2...2...2..
    1A10: 10 32 FF FF 10 32 FF FF 10 32 FF FF 37 09 D0 81  // .2...2...2..7...
    1A20: 00 00 70 C0 00 00 00 00 00 00 99 02 03 00 00 00  // ..p.............
    1A30: 03 00 00 00 02 40 00 00 00 00 00 00 00 0F 07 07  // .....@..........
    1A40: 20 00 00 00 01 00 00 00 FF 0F 00 00 00 00 00 00  //  ...............


SSDT
----
DefinitionBlock ("", "SSDT", 2, "COREv4", "COREBOOT", 0x00000000)
{
    /*
     * iASL Warning: There were 6 external control methods found during
     * disassembly, but only 0 were resolved (6 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.MDSX, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.MS0X, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.DPOF, UnknownObj)
    External (_SB_.PCI0.EGPM, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GFX0, DeviceObj)
    External (_SB_.PCI0.GFX0.XBCL, IntObj)
    External (_SB_.PCI0.GFX0.XBQC, IntObj)
    External (_SB_.PCI0.I2C0, DeviceObj)
    External (_SB_.PCI0.I2C1, DeviceObj)
    External (_SB_.PCI0.I2C2, DeviceObj)
    External (_SB_.PCI0.I2C4, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.EDSX, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.LPCB.EC0_.S0IX, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.RGPM, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.TPM_.USER, UnknownObj)

    Device (CTBL)
    {
        Name (_HID, "BOOT0000")  // _HID: Hardware ID
        Name (_UID, Zero)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (0x0F)
        }

        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            Memory32Fixed (ReadOnly,
                0x7AA9C000,         // Address Base
                0x00008000,         // Address Length
                )
        })
    }

    Scope (\_SB.PCI0)
    {
        Name (A4GB, 0x000000017F000000)
        Name (A4GS, 0x0000007E81000000)
    }

    Device (\_SB.CP00)
    {
        Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
        Name (_UID, Zero)  // _UID: Unique ID
        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000001, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x01, 
                0x0000, 
                0x000003E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000010, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x004F, 
                0x000001F4
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000033, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x0097, 
                0x000000C8
            }
        })
        Name (GCPC, Package (0x15)
        {
            0x00000015, 
            0x02, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000000000CE, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000777, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000770, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x0A,               // Bit Width
                    0x20,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.CP00.GCPC)
        }
    }

    Device (\_SB.CP01)
    {
        Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
        Name (_UID, One)  // _UID: Unique ID
        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000001, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x01, 
                0x0000, 
                0x000003E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000010, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x004F, 
                0x000001F4
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000033, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x0097, 
                0x000000C8
            }
        })
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.CP00.GCPC)
        }
    }

    Device (\_SB.CP02)
    {
        Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
        Name (_UID, 0x02)  // _UID: Unique ID
        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000001, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x01, 
                0x0000, 
                0x000003E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000010, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x004F, 
                0x000001F4
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000033, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x0097, 
                0x000000C8
            }
        })
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.CP00.GCPC)
        }
    }

    Device (\_SB.CP03)
    {
        Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
        Name (_UID, 0x03)  // _UID: Unique ID
        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000001, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x01, 
                0x0000, 
                0x000003E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000010, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x004F, 
                0x000001F4
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000033, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x0097, 
                0x000000C8
            }
        })
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.CP00.GCPC)
        }
    }

    Name (PPKG, Package (0x04)
    {
        \_SB.CP00, 
        \_SB.CP01, 
        \_SB.CP02, 
        \_SB.CP03
    })
    Method (\_SB.CNOT, 1, NotSerialized)
    {
        Notify (\_SB.CP00, Arg0)
        Notify (\_SB.CP01, Arg0)
        Notify (\_SB.CP02, Arg0)
        Notify (\_SB.CP03, Arg0)
    }

    Scope (\_SB.PCI0.GFX0)
    {
        Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
        {
            Return (Package (0x03)
            {
                0x80010100, 
                0x80010240, 
                0x80010410
            })
        }

        Device (VGA0)
        {
            Name (_ADR, 0x00000100)  // _ADR: Address
            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                Return (0x1D)
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                Return (Zero)
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
            }
        }

        Device (TV0)
        {
            Name (_ADR, 0x00000240)  // _ADR: Address
            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                Return (0x1D)
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                Return (Zero)
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
            }
        }

        Device (LCD0)
        {
            Name (_ADR, 0x00000410)  // _ADR: Address
            Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
            {
                Return (^^XBCL) /* External reference */
            }

            Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
            {
                Return (^^XBQC) /* External reference */
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                Return (0x1D)
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                Return (Zero)
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
            }
        }
    }

    Scope (\_SB.PCI0.I2C0)
    {
        Name (FMCN, Package (0x03)
        {
            0x005E, 
            0x00BF, 
            0x00000024
        })
    }

    Scope (\_SB.PCI0.I2C1)
    {
        Name (FMCN, Package (0x03)
        {
            0x005E, 
            0x00BF, 
            0x00000024
        })
    }

    Scope (\_SB.PCI0.I2C2)
    {
        Name (FMCN, Package (0x03)
        {
            0x005E, 
            0x00BF, 
            0x00000024
        })
    }

    Scope (\_SB.PCI0.I2C4)
    {
        Name (FMCN, Package (0x03)
        {
            0x005E, 
            0x00BF, 
            0x00000024
        })
    }

    Scope (\_SB.PCI0)
    {
        Device (PEPD)
        {
            Name (_HID, "INT33A1" /* Intel Power Engine */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0D80") /* Windows-compatible System Power Management Controller */)  // _CID: Compatible ID
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ToBuffer (Arg0, Local0)
                If ((Local0 == ToUUID ("c4eb40a0-6cd2-11e2-bcfd-0800200c9a66") /* Unknown UUID */))
                {
                    ToInteger (Arg2, Local1)
                    If ((Local1 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x7B                                             // {
                        })
                    }

                    If ((Local1 == One))
                    {
                        Return (Package (0x01)
                        {
                            Package (0x03)
                            {
                                \_SB.CP00, 
                                Zero, 
                                Package (0x02)
                                {
                                    Zero, 
                                    Package (0x02)
                                    {
                                        0xFF, 
                                        Zero
                                    }
                                }
                            }
                        })
                    }

                    If ((Local1 == 0x02)) {}
                    If ((Local1 == 0x03))
                    {
                        If (CondRefOf (\_SB.PCI0.LPCB.EC0.EDSX))
                        {
                            \_SB.PCI0.LPCB.EC0.EDSX (Zero)
                        }

                        If (CondRefOf (\_SB.MDSX))
                        {
                            \_SB.MDSX (Zero)
                        }
                    }

                    If ((Local1 == 0x04))
                    {
                        If (CondRefOf (\_SB.PCI0.LPCB.EC0.EDSX))
                        {
                            \_SB.PCI0.LPCB.EC0.EDSX (One)
                        }

                        If (CondRefOf (\_SB.MDSX))
                        {
                            \_SB.MDSX (One)
                        }
                    }

                    If ((Local1 == 0x05))
                    {
                        If (CondRefOf (\_SB.PCI0.LPCB.EC0.S0IX))
                        {
                            \_SB.PCI0.LPCB.EC0.S0IX (One)
                        }

                        If (CondRefOf (\_SB.MS0X))
                        {
                            \_SB.MS0X (One)
                        }

                        If (CondRefOf (\_SB.PCI0.EGPM))
                        {
                            \_SB.PCI0.EGPM ()
                        }

                        If (CondRefOf (\_SB.PCI0.TXHC))
                        {
                            \_SB.PCI0.DPOF = One
                        }
                    }

                    If ((Local1 == 0x06))
                    {
                        If (CondRefOf (\_SB.PCI0.LPCB.EC0.S0IX))
                        {
                            \_SB.PCI0.LPCB.EC0.S0IX (Zero)
                        }

                        If (CondRefOf (\_SB.MS0X))
                        {
                            \_SB.MS0X (Zero)
                        }

                        If (CondRefOf (\_SB.PCI0.RGPM))
                        {
                            \_SB.PCI0.RGPM ()
                        }

                        If (CondRefOf (\_SB.PCI0.TXHC))
                        {
                            \_SB.PCI0.DPOF = Zero
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (\_SB.PCI0.I2C0)
    {
        Device (D04B)
        {
            Name (_HID, "ATML0001")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_DDN, "Atmel Touchscreen")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x004B, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                    0x00, ResourceConsumer, , Exclusive,
                    )
                Interrupt (ResourceConsumer, Edge, ActiveLow, Exclusive, ,, )
                {
                    0x0000001F,
                }
            })
        }
    }

    Scope (\_SB.PCI0.I2C1)
    {
        Device (D04A)
        {
            Name (_HID, "ATML0000")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_DDN, "Atmel Touchpad")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x004A, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                    0x00, ResourceConsumer, , Exclusive,
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x00000033,
                }
            })
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x05, 
                0x03
            })
        }
    }

    Scope (\_SB.PCI0.I2C4)
    {
        Device (NAU8)
        {
            Name (_HID, "10508825")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_DDN, "Nuvoton NAU8825 Codec")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x001A, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                    0x00, ResourceConsumer, , Exclusive,
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x0000003A,
                }
            })
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x10)
                {
                    Package (0x02)
                    {
                        "nuvoton,jkdet-enable", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,jkdet-pull-enable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,jkdet-pull-up", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,jkdet-polarity", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,vref-impedance", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,micbias-voltage", 
                        0x06
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,sar-hysteresis", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,sar-voltage", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,sar-compare-time", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,sar-sampling-time", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,short-key-debounce", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,jack-insert-debounce", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,jack-eject-debounce", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,sar-threshold-num", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,adcout-drive-strong", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "nuvoton,sar-threshold", 
                        Package (0x04)
                        {
                            0x0C, 
                            0x1C, 
                            0x38, 
                            0x60
                        }
                    }
                }
            })
        }
    }

    Scope (\_SB.PCI0.I2C4)
    {
        Device (D034)
        {
            Name (_HID, "INT343B")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_DDN, "SSM4567 Left Speaker Amp")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0034, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
        }
    }

    Scope (\_SB.PCI0.I2C4)
    {
        Device (D035)
        {
            Name (_HID, "INT343B")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_DDN, "SSM4567 Right Speaker Amp")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0035, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
        }
    }

    Device (\_SB.PCI0.RP01.WF00)
    {
        Name (_UID, 0x923ACF1C)  // _UID: Unique ID
        Name (_DDN, "WIFI Device")  // _DDN: DOS Device Name
        Name (_ADR, 0x0000000000000000)  // _ADR: Address
    }

    Scope (\_SB.PCI0.RP01.WF00)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x10, 
            0x03
        })
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            ToBuffer (Arg0, Local0)
            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (\_SB.PCI0)
    {
        Device (TPM)
        {
            Name (_HID, EisaId ("PNP0C31"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
            Name (_UID, 0x89E37D9C)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
                IO (Decode16,
                    0x0C31,             // Range Minimum
                    0x0C31,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
            })
            OperationRegion (PPOP, SystemMemory, 0x7AFFE5E0, 0x015A)
            Field (PPOP, AnyAcc, NoLock, Preserve)
            {
                Offset (0x100), 
                PPIN,   8, 
                PPIP,   32, 
                RESU,   32, 
                CMDR,   32, 
                OARG,   32, 
                LCMD,   32, 
                FRET,   32
            }

            Name (TPM2, Package (0x02)
            {
                0x00000000, 
                0x00000000
            })
            Name (TPM3, Package (0x03)
            {
                0x00000000, 
                0x00000000, 
                0x00000000
            })
            Method (FUNC, 1, Serialized)
            {
                ToInteger (Arg0, Local0)
                ToInteger (Arg1, Local1)
                If ((Local0 > 0x80))
                {
                    Return (Zero)
                }

                CreateByteField (PPOP, Local0, TPPF)
                ToInteger (TPPF, Local0)
                Return (Local0)
            }

            Method (FSUP, 2, NotSerialized)
            {
                ToInteger (Arg0, Local0)
                ToInteger (Arg1, Local1)
                If ((Local0 > 0x80))
                {
                    Return (Zero)
                }

                If ((Local1 == One))
                {
                    If ((Local0 == Zero))
                    {
                        Return (One)
                    }

                    If ((Local0 == One))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x02))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x03))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x04))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x05))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x06))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x07))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x08))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x09))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x0A))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x0B))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x0E))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x0F))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x10))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x15))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x16))
                    {
                        Return (One)
                    }
                }

                If ((Local1 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Return (One)
                    }

                    If ((Local0 == One))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x02))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x05))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x0E))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x11))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x12))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x15))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x16))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x17))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x18))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x19))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x1A))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x1B))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x1C))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x1D))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x1E))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x1F))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x20))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x21))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x22))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x60))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x61))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x62))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x63))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x64))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x65))
                    {
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ToBuffer (Arg0, Local0)
                If ((Local0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                {
                    ToInteger (Arg2, Local1)
                    If ((Local1 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }

                    If ((Local1 == One))
                    {
                        Return ("1.2")
                    }

                    If ((Local1 == 0x02))
                    {
                        ToInteger (Arg1, Local0)
                        If ((Local0 == One))
                        {
                            Local1 = ObjectType (Arg3)
                            If ((Local1 == 0x04))
                            {
                                Local2 = DerefOf (Arg3 [Zero])
                            }

                            Local1 = ObjectType (Arg3)
                            If ((Local1 == 0x03))
                            {
                                ToInteger (Arg3, Local2)
                            }

                            Local1 = ^FSUP (Local2, One)
                            If ((Local1 == Zero))
                            {
                                Local1 = ^FSUP (Local2, Zero)
                                If ((Local1 == One))
                                {
                                    Return (Zero)
                                }

                                Return (One)
                            }

                            ^CMDR = Local2
                            ^OARG = Zero
                            ^USER = Zero
                            Return (Zero)
                        }

                        Return (0x02)
                    }

                    If ((Local1 == 0x03))
                    {
                        Local0 = One
                        ^TPM3 [Zero] = Local0
                        ^TPM2 [Zero] = Local0
                        ToInteger (Arg1, Local0)
                        If ((Local0 == One))
                        {
                            Local1 = Zero
                            ^TPM2 [Zero] = Local1
                            ^TPM2 [One] = ^CMDR /* \_SB_.PCI0.TPM_.CMDR */
                            Return (^TPM2) /* \_SB_.PCI0.TPM_.TPM2 */
                        }

                        If ((Local0 == 0x02))
                        {
                            Local1 = Zero
                            ^TPM3 [Zero] = Local1
                            ^TPM3 [One] = ^CMDR /* \_SB_.PCI0.TPM_.CMDR */
                            ^TPM3 [0x02] = ^OARG /* \_SB_.PCI0.TPM_.OARG */
                            Return (^TPM3) /* \_SB_.PCI0.TPM_.TPM3 */
                        }

                        Return (^TPM3) /* \_SB_.PCI0.TPM_.TPM3 */
                    }

                    If ((Local1 == 0x04))
                    {
                        Return (0x02)
                    }

                    If ((Local1 == 0x05))
                    {
                        Local1 = One
                        ^TPM3 [Zero] = Local1
                        ToInteger (Arg1, Local0)
                        If ((Local0 == One))
                        {
                            Local1 = Zero
                            ^TPM3 [Zero] = Local1
                            ^TPM3 [One] = ^LCMD /* \_SB_.PCI0.TPM_.LCMD */
                            ^TPM3 [0x02] = ^RESU /* \_SB_.PCI0.TPM_.RESU */
                        }

                        Return (^TPM3) /* \_SB_.PCI0.TPM_.TPM3 */
                    }

                    If ((Local1 == 0x06))
                    {
                        Return (0x03)
                    }

                    If ((Local1 == 0x07))
                    {
                        ToInteger (Arg1, Local0)
                        Local1 = ObjectType (Arg3)
                        If ((Local1 == 0x04))
                        {
                            Local2 = DerefOf (Arg3 [Zero])
                        }

                        Local1 = ObjectType (Arg3)
                        If ((Local1 == 0x03))
                        {
                            ToInteger (Arg3, Local2)
                        }

                        Local1 = ^FSUP (Local2, One)
                        If ((Local1 == Zero))
                        {
                            Local1 = ^FSUP (Local2, Zero)
                            If ((Local1 == One))
                            {
                                Return (Zero)
                            }

                            Return (One)
                        }

                        Local1 = ObjectType (Arg3)
                        If ((Local1 == 0x03))
                        {
                            Local0 = One
                        }

                        If ((Local0 == One))
                        {
                            ^CMDR = Local2
                            ^OARG = Zero
                            Return (0x00)
                        }

                        If ((Local0 == 0x02))
                        {
                            ^CMDR = Local2
                            Local3 = DerefOf (Arg3 [One])
                            ^OARG = Local3
                            Return (0x00)
                        }

                        Return (0x02)
                    }

                    If ((Local1 == 0x08))
                    {
                        ToInteger (Arg1, Local0)
                        If ((Local0 == One))
                        {
                            Local2 = DerefOf (Arg3 [Zero])
                            Local1 = ^FSUP (Local2, One)
                            If ((Local1 == Zero))
                            {
                                Return (0x00)
                            }

                            If ((Local2 == Zero))
                            {
                                Return (0x04)
                            }

                            If ((Local2 == 0x12))
                            {
                                Return (0x04)
                            }

                            If ((Local2 == 0x14))
                            {
                                Return (0x04)
                            }

                            If ((Local2 == 0x10))
                            {
                                Return (0x04)
                            }

                            Return (0x03)
                        }

                        Return (Zero)
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                If ((Local0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
                {
                    ToInteger (Arg2, Local1)
                    If ((Local1 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }

                    If ((Local1 == One))
                    {
                        Return (0x00)
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



TCPA1
-----
[000h 0000   4]                    Signature : "TCPA"    [Trusted Computing Platform Alliance table]
[004h 0004   4]                 Table Length : 00000032
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 26
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "EDK2    "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   2]               Platform Class : 0000
[026h 0038   4]         Min Event Log Length : 00010000
[02Ah 0042   8]            Event Log Address : 000000007A3B1000

Raw Table Data: Length 50 (0x32)

    0000: 54 43 50 41 32 00 00 00 02 26 49 4E 54 45 4C 20  // TCPA2....&INTEL 
    0010: 45 44 4B 32 20 20 20 20 02 00 00 00 20 20 20 20  // EDK2    ....    
    0020: 13 00 00 01 00 00 00 00 01 00 00 10 3B 7A 00 00  // ............;z..
    0030: 00 00                                            // ..


TCPA2
-----
[000h 0000   4]                    Signature : "TCPA"    [Trusted Computing Platform Alliance table]
[004h 0004   4]                 Table Length : 00000032
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 39
[00Ah 0010   6]                       Oem ID : "COREv4"
[010h 0016   8]                 Oem Table ID : "COREBOOT"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "CORE"
[020h 0032   4]        Asl Compiler Revision : 20230628

[024h 0036   2]               Platform Class : 0000
[026h 0038   4]         Min Event Log Length : 00010000
[02Ah 0042   8]            Event Log Address : 000000007AA68000

Raw Table Data: Length 50 (0x32)

    0000: 54 43 50 41 32 00 00 00 02 39 43 4F 52 45 76 34  // TCPA2....9COREv4
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 28 06 23 20 00 00 00 00 01 00 00 80 A6 7A 00 00  // (.# .........z..
    0030: 00 00                                            // ..


