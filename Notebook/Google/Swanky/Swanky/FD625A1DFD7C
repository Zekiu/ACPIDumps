
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20240927
Copyright (c) 2000 - 2023 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000E22  0x02  "COREv4"  "COREBOOT"  0x00000000  "CORE"   0x20230628
 02)  MCFG  0x0000003C  0x01  "COREv4"  "COREBOOT"  0x00000000  "CORE"   0x20230628
 03)  APIC  0x00000062  0x03  "COREv4"  "COREBOOT"  0x00000000  "CORE"   0x20230628
 04)  TCPA  0x00000032  0x02  "INTEL "  "EDK2    "  0x00000002  "    "   0x01000013
 05)  DSDT  0x00003F60  0x02  "COREv4"  "COREBOOT"  0x20110725  "INTL"   0x20230628
 06)  FACP  0x00000114  0x06  "COREv4"  "COREBOOT"  0x00000000  "CORE"   0x20230628
 07)  TCPA  0x00000032  0x02  "COREv4"  "COREBOOT"  0x00000000  "CORE"   0x20230628
 08)  HPET  0x00000038  0x01  "COREv4"  "COREBOOT"  0x00000000  "CORE"   0x20230628
 09)  FACS  0x00000040  0x01
 10)  BGRT  0x00000038  0x01  "INTEL "  "EDK2    "  0x00000002  "    "   0x01000013

Found 10 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 00000062
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : A8
[00Ah 0010 006h]                      Oem ID : "COREv4"
[010h 0016 008h]                Oem Table ID : "COREBOOT"
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : "CORE"
[020h 0032 004h]       Asl Compiler Revision : 20230628

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 00
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 01
[037h 0055 001h]               Local Apic ID : 02
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 04 [Local APIC NMI]
[03Dh 0061 001h]                      Length : 06
[03Eh 0062 001h]                Processor ID : FF
[03Fh 0063 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[041h 0065 001h]        Interrupt Input LINT : 01

[042h 0066 001h]               Subtable Type : 01 [I/O APIC]
[043h 0067 001h]                      Length : 0C
[044h 0068 001h]                 I/O Apic ID : 00
[045h 0069 001h]                    Reserved : 00
[046h 0070 004h]                     Address : FEC00000
[04Ah 0074 004h]                   Interrupt : 00000000

[04Eh 0078 001h]               Subtable Type : 02 [Interrupt Source Override]
[04Fh 0079 001h]                      Length : 0A
[050h 0080 001h]                         Bus : 00
[051h 0081 001h]                      Source : 00
[052h 0082 004h]                   Interrupt : 00000002
[056h 0086 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1

[058h 0088 001h]               Subtable Type : 02 [Interrupt Source Override]
[059h 0089 001h]                      Length : 0A
[05Ah 0090 001h]                         Bus : 00
[05Bh 0091 001h]                      Source : 09
[05Ch 0092 004h]                   Interrupt : 00000009
[060h 0096 002h]       Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

Raw Table Data: Length 98 (0x62)

    0000: 41 50 49 43 62 00 00 00 03 A8 43 4F 52 45 76 34  // APICb.....COREv4
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 28 06 23 20 00 00 E0 FE 01 00 00 00 00 08 00 00  // (.# ............
    0030: 01 00 00 00 00 08 01 02 01 00 00 00 04 06 FF 05  // ................
    0040: 00 01 01 0C 00 00 00 00 C0 FE 00 00 00 00 02 0A  // ................
    0050: 00 00 02 00 00 00 05 00 02 0A 00 09 09 00 00 00  // ................
    0060: 0D 00                                            // ..


BGRT
----
[000h 0000 004h]                   Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 1C
[00Ah 0010 006h]                      Oem ID : "INTEL "
[010h 0016 008h]                Oem Table ID : "EDK2    "
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "    "
[020h 0032 004h]       Asl Compiler Revision : 01000013

[024h 0036 002h]                     Version : 0001
[026h 0038 001h]      Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039 001h]                  Image Type : 00
[028h 0040 008h]               Image Address : 000000001C9D0018
[030h 0048 004h]               Image OffsetX : 0000022E
[034h 0052 004h]               Image OffsetY : 000000C1

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 1C 49 4E 54 45 4C 20  // BGRT8.....INTEL 
    0010: 45 44 4B 32 20 20 20 20 02 00 00 00 20 20 20 20  // EDK2    ....    
    0020: 13 00 00 01 01 00 01 00 18 00 9D 1C 00 00 00 00  // ................
    0030: 2E 02 00 00 C1 00 00 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "COREv4", "COREBOOT", 0x20110725)
{
    External (_SB_.CNOT, MethodObj)    // 1 Arguments
    External (_SB_.DPTF.TPWR, DeviceObj)
    External (_SB_.PCI0.GFX0.LCD0, DeviceObj)
    External (DNVS, OpRegionObj)
    External (GNVS, OpRegionObj)
    External (OSFG, IntObj)
    External (TOLM, IntObj)

    Scope (\)
    {
        OperationRegion (GNVS, SystemMemory, 0x7AFFE820, 0x3C)
        OperationRegion (DNVS, SystemMemory, 0x7AFFE860, 0xA6)
    }

    Name (OSYS, Zero)
    Name (PICM, Zero)
    Name (PWRS, One)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        PICM = Arg0
    }

    Scope (_SB)
    {
        Name (PCBA, 0xE0000000)
        Name (PCLN, 0x10000000)
        OperationRegion (PCFG, SystemMemory, PCBA, PCLN)
        Device (PERC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadWrite,
                    0xE0000000,         // Address Base
                    0x10000000,         // Address Length
                    )
            })
        }
    }

    Field (DNVS, ByteAcc, NoLock, Preserve)
    {
        S0EN,   8, 
        S1EN,   8, 
        S2EN,   8, 
        S3EN,   8, 
        S4EN,   8, 
        S5EN,   8, 
        S6EN,   8, 
        S7EN,   8, 
        S8EN,   8, 
        S9EN,   8, 
        SAEN,   8, 
        SBEN,   8, 
        SCEN,   8, 
        SDEN,   8, 
        C0EN,   8, 
        C1EN,   8, 
        C2EN,   8, 
        LPEN,   8, 
        S0B0,   32, 
        S1B0,   32, 
        S2B0,   32, 
        S3B0,   32, 
        S4B0,   32, 
        S5B0,   32, 
        S6B0,   32, 
        S7B0,   32, 
        S8B0,   32, 
        S9B0,   32, 
        SAB0,   32, 
        SBB0,   32, 
        SCB0,   32, 
        SDB0,   32, 
        C0B0,   32, 
        C1B0,   32, 
        C2B0,   32, 
        LPB0,   32, 
        S0B1,   32, 
        S1B1,   32, 
        S2B1,   32, 
        S3B1,   32, 
        S4B1,   32, 
        S5B1,   32, 
        S6B1,   32, 
        S7B1,   32, 
        S8B1,   32, 
        S9B1,   32, 
        SAB1,   32, 
        SBB1,   32, 
        SCB1,   32, 
        SDB1,   32, 
        C0B1,   32, 
        C1B1,   32, 
        C2B1,   32, 
        LPB1,   32, 
        LPFW,   32
    }

    OperationRegion (APMP, SystemIO, 0xB2, 0x02)
    Field (APMP, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMS,   8
    }

    Name (DBG0, Zero)
    Method (GOS, 0, NotSerialized)
    {
        OSYS = 0x07D0
        If (CondRefOf (_OSI))
        {
            If (_OSI ("Windows 2001"))
            {
                OSYS = 0x07D1
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSYS = 0x07D1
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSYS = 0x07D2
            }

            If (_OSI ("Windows 2006"))
            {
                OSYS = 0x07D6
            }
        }
    }

    Method (HPTS, 1, NotSerialized)
    {
        If (!Arg0)
        {
            Return (Zero)
        }

        If ((OSYS < 0x07D1))
        {
            Return (0x0B)
        }

        Return (0x0F)
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Method (_SWS, 0, NotSerialized)  // _SWS: System Wake Source
    {
        Return (PM1I) /* \PM1I */
    }

    Field (GNVS, ByteAcc, NoLock, Preserve)
    {
        Offset (0x02), 
        SMIF,   8, 
        Offset (0x04), 
        Offset (0x05), 
        SCIF,   8, 
        Offset (0x07), 
        Offset (0x08), 
        Offset (0x09), 
        Offset (0x0A), 
        Offset (0x0B), 
        P80D,   32, 
        LIDS,   8, 
        Offset (0x11), 
        Offset (0x12), 
        TPMP,   8, 
        TLVL,   8, 
        PPCM,   8, 
        PM1I,   32, 
        GPEI,   32, 
        Offset (0x20), 
        S5U0,   8, 
        S5U1,   8, 
        S3U0,   8, 
        S3U1,   8, 
        TACT,   8, 
        TPSV,   8, 
        TCRT,   8, 
        DPTE,   8, 
        Offset (0x30), 
        Offset (0x34), 
        Offset (0x38), 
        Offset (0x3C)
    }

    Method (PNOT, 0, NotSerialized)
    {
        \_SB.CNOT (0x81)
    }

    Method (PPCN, 0, NotSerialized)
    {
        \_SB.CNOT (0x80)
    }

    Method (TNOT, 0, NotSerialized)
    {
        \_SB.CNOT (0x82)
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Scope (\)
            {
                OperationRegion (ILBS, SystemMemory, 0xFED08000, 0x0400)
                Field (ILBS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    PRTA,   8, 
                    PRTB,   8, 
                    PRTC,   8, 
                    PRTD,   8, 
                    PRTE,   8, 
                    PRTF,   8, 
                    PRTG,   8, 
                    PRTH,   8
                }
            }

            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_BBN, Zero)  // _BBN: BIOS Bus Number
            Name (MCRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED40000,         // Range Minimum
                    0xFED44FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00005000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (MCRS, \_SB.PCI0._Y00._MIN, LMIN)  // _MIN: Minimum Base Address
                CreateDWordField (MCRS, \_SB.PCI0._Y00._MAX, LMAX)  // _MAX: Maximum Base Address
                CreateDWordField (MCRS, \_SB.PCI0._Y00._LEN, LLEN)  // _LEN: Length
                If (((LPFW != Zero) && (LPEN == One)))
                {
                    LMIN = LPFW /* \LPFW */
                    LLEN = 0x00100000
                    LMAX = ((LMIN + LLEN) - One)
                }
                Else
                {
                    LMIN = Zero
                    LMAX = Zero
                    LLEN = Zero
                }

                CreateDWordField (MCRS, \_SB.PCI0._Y01._MIN, PMIN)  // _MIN: Minimum Base Address
                CreateDWordField (MCRS, \_SB.PCI0._Y01._MAX, PMAX)  // _MAX: Maximum Base Address
                CreateDWordField (MCRS, \_SB.PCI0._Y01._LEN, PLEN)  // _LEN: Length
                PMIN = TOLM /* External reference */
                PMAX = 0xDFFFFFFF
                PLEN = ((PMAX - PMIN) + One)
                Return (MCRS) /* \_SB_.PCI0.MCRS */
            }

            Device (PDRC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (PDRS, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEB00000,         // Address Base
                        0x00100000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED03000,         // Address Base
                        0x00000400,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED08000,         // Address Base
                        0x00000400,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED01000,         // Address Base
                        0x00000400,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEF00000,         // Address Base
                        0x00100000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED05000,         // Address Base
                        0x00000800,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED1C000,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Return (PDRS) /* \_SB_.PCI0.PDRC.PDRS */
                }
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    Return (Arg3)
                }
                Else
                {
                    CreateDWordField (Arg3, Zero, CDW1)
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Device (IOSF)
            {
                Name (_HID, "INT33BD" /* Intel Baytrail Mailbox Device */)  // _HID: Hardware ID
                Name (_CID, "INT33BD" /* Intel Baytrail Mailbox Device */)  // _CID: Compatible ID
                Name (_UID, One)  // _UID: Unique ID
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x0000000C,         // Address Length
                        _Y02)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (RBUF, \_SB.PCI0.IOSF._Y02._BAS, RBAS)  // _BAS: Base Address
                    RBAS = 0xE00000D0
                    Return (RBUF) /* \_SB_.PCI0.IOSF.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (Zero)
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Device (LNKA)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PRTA = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLA, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLA, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PRTA & 0x0F))
                        Return (RTLA) /* \_SB_.PCI0.LPCB.LNKA._CRS.RTLA */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PRTA = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PRTA & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKB)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PRTB = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,11,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLB, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLB, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PRTB & 0x0F))
                        Return (RTLB) /* \_SB_.PCI0.LPCB.LNKB._CRS.RTLB */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PRTB = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PRTB & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKC)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PRTC = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLC, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLC, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PRTC & 0x0F))
                        Return (RTLC) /* \_SB_.PCI0.LPCB.LNKC._CRS.RTLC */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PRTC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PRTC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKD)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PRTD = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,11,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLD, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLD, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PRTD & 0x0F))
                        Return (RTLD) /* \_SB_.PCI0.LPCB.LNKD._CRS.RTLD */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PRTD = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PRTD & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKE)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PRTE = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLE, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLE, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PRTE & 0x0F))
                        Return (RTLE) /* \_SB_.PCI0.LPCB.LNKE._CRS.RTLE */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PRTE = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PRTE & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKF)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x06)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PRTF = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,11,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLF, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLF, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PRTF & 0x0F))
                        Return (RTLF) /* \_SB_.PCI0.LPCB.LNKF._CRS.RTLF */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PRTF = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PRTF & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKG)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x07)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PRTG = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,10,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLG, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLG, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PRTG & 0x0F))
                        Return (RTLG) /* \_SB_.PCI0.LPCB.LNKG._CRS.RTLG */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PRTG = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PRTG & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKH)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x08)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PRTH = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,6,7,11,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLH, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLH, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PRTH & 0x0F))
                        Return (RTLH) /* \_SB_.PCI0.LPCB.LNKH._CRS.RTLH */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PRTH = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PRTH & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_GPE, 0x18)  // _GPE: General Purpose Events
                    Name (TOFS, 0xC8)
                    Name (TNCA, 0xFC)
                    Name (TNOP, 0xFD)
                    Name (TBAD, 0xFE)
                    Name (TNPR, 0xFF)
                    Name (DWRN, 0x0F)
                    Name (DLOW, 0x0A)
                    OperationRegion (ERAM, EmbeddedControl, Zero, 0x20)
                    Field (ERAM, ByteAcc, Lock, Preserve)
                    {
                        RAMV,   8, 
                        TSTB,   8, 
                        TSTC,   8, 
                        KBLV,   8, 
                        FAND,   8, 
                        PATI,   8, 
                        PATT,   8, 
                        PATC,   8, 
                        CHGL,   8, 
                        TBMD,   1, 
                        DDPN,   3, 
                        STTB,   1, 
                        Offset (0x0A), 
                        DFUD,   1, 
                        FLSH,   1, 
                        PFAN,   1, 
                        KBLE,   1, 
                        LTBR,   1, 
                        LEDC,   1, 
                        MTNS,   1, 
                        KEYB,   1, 
                        PSTR,   1, 
                        P80P,   1, 
                        THRM,   1, 
                        SBKL,   1, 
                        WIFI,   1, 
                        HOST,   1, 
                        GPIO,   1, 
                        I2CB,   1, 
                        CHRG,   1, 
                        BATT,   1, 
                        SBAT,   1, 
                        HANG,   1, 
                        PMUI,   1, 
                        DSEC,   1, 
                        UPDC,   1, 
                        UMUX,   1, 
                        MSFF,   1, 
                        TVST,   1, 
                        TCMV,   1, 
                        RTCD,   1, 
                        FPRD,   1, 
                        TPAD,   1, 
                        RWSG,   1, 
                        DEVE,   1, 
                        Offset (0x0E), 
                        Offset (0x12), 
                        BTID,   8, 
                        USPP,   8, 
                        RFWU,   8, 
                        PBOK,   8
                    }

                    OperationRegion (EMEM, SystemIO, 0x0900, 0xFF)
                    Field (EMEM, ByteAcc, NoLock, Preserve)
                    {
                        TIN0,   8, 
                        TIN1,   8, 
                        TIN2,   8, 
                        TIN3,   8, 
                        TIN4,   8, 
                        TIN5,   8, 
                        TIN6,   8, 
                        TIN7,   8, 
                        TIN8,   8, 
                        TIN9,   8, 
                        Offset (0x10), 
                        FAN0,   16, 
                        FAN1,   16, 
                        Offset (0x24), 
                        BTVR,   8, 
                        Offset (0x30), 
                        LIDS,   1, 
                        PBTN,   1, 
                        WPDI,   1, 
                        RECK,   1, 
                        RECD,   1, 
                        Offset (0x40), 
                        BTVO,   32, 
                        BTPR,   32, 
                        BTRA,   32, 
                        ACEX,   1, 
                        BTEX,   1, 
                        BFDC,   1, 
                        BFCG,   1, 
                        BFCR,   1, 
                        BFIV,   1, 
                        BFCT,   1, 
                        Offset (0x4D), 
                        BTCN,   8, 
                        BTIX,   8, 
                        Offset (0x50), 
                        BTDA,   32, 
                        BTDV,   32, 
                        BTDF,   32, 
                        BTCC,   32, 
                        BMFG,   64, 
                        BMOD,   64, 
                        BSER,   64, 
                        BTYP,   64, 
                        Offset (0x80), 
                        ALS0,   16, 
                        Offset (0xA6), 
                        GPUD,   8, 
                        Offset (0xA7), 
                        PWRT,   8, 
                        EOVD,   8
                    }

                    Device (LID0)
                    {
                        Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
                        Method (_LID, 0, NotSerialized)  // _LID: Lid Status
                        {
                            Return (LIDS) /* \_SB_.PCI0.LPCB.EC0_.LIDS */
                        }

                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x10, 
                            0x05
                        })
                    }

                    Method (TINS, 1, Serialized)
                    {
                        Switch (ToInteger (Arg0))
                        {
                            Case (Zero)
                            {
                                Return (TIN0) /* \_SB_.PCI0.LPCB.EC0_.TIN0 */
                            }
                            Case (One)
                            {
                                Return (TIN1) /* \_SB_.PCI0.LPCB.EC0_.TIN1 */
                            }
                            Case (0x02)
                            {
                                Return (TIN2) /* \_SB_.PCI0.LPCB.EC0_.TIN2 */
                            }
                            Case (0x03)
                            {
                                Return (TIN3) /* \_SB_.PCI0.LPCB.EC0_.TIN3 */
                            }
                            Case (0x04)
                            {
                                Return (TIN4) /* \_SB_.PCI0.LPCB.EC0_.TIN4 */
                            }
                            Case (0x05)
                            {
                                Return (TIN5) /* \_SB_.PCI0.LPCB.EC0_.TIN5 */
                            }
                            Case (0x06)
                            {
                                Return (TIN6) /* \_SB_.PCI0.LPCB.EC0_.TIN6 */
                            }
                            Case (0x07)
                            {
                                Return (TIN7) /* \_SB_.PCI0.LPCB.EC0_.TIN7 */
                            }
                            Case (0x08)
                            {
                                Return (TIN8) /* \_SB_.PCI0.LPCB.EC0_.TIN8 */
                            }
                            Case (0x09)
                            {
                                Return (TIN9) /* \_SB_.PCI0.LPCB.EC0_.TIN9 */
                            }
                            Default
                            {
                                Return (TIN0) /* \_SB_.PCI0.LPCB.EC0_.TIN0 */
                            }

                        }
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (ECMD, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0062,             // Range Minimum
                                0x0062,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0066,             // Range Minimum
                                0x0066,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                        })
                        Return (ECMD) /* \_SB_.PCI0.LPCB.EC0_._CRS.ECMD */
                    }

                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        PWRS = ACEX /* \_SB_.PCI0.LPCB.EC0_.ACEX */
                        PNOT ()
                    }

                    Method (TSRD, 1, Serialized)
                    {
                        Local0 = TINS (Arg0)
                        If ((Local0 == TNCA))
                        {
                            Return (Zero)
                        }

                        If ((Local0 == TNPR))
                        {
                            Return (Zero)
                        }

                        If ((Local0 == TNOP))
                        {
                            Return (Zero)
                        }

                        If ((Local0 == TBAD))
                        {
                            Return (Zero)
                        }

                        Local0 += TOFS /* \_SB_.PCI0.LPCB.EC0_.TOFS */
                        Local0 *= 0x0A
                        Return (Local0)
                    }

                    Method (S0IX, 1, Serialized)
                    {
                    }

                    Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: LID CLOSE"
                        Notify (LID0, 0x80) // Status Change
                    }

                    Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: LID OPEN"
                        Notify (CREC, 0x02) // Device Wake
                        Notify (LID0, 0x80) // Status Change
                    }

                    Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: POWER BUTTON"
                    }

                    Method (_Q04, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: AC CONNECTED"
                        PWRS = ACEX /* \_SB_.PCI0.LPCB.EC0_.ACEX */
                        Notify (AC, 0x80) // Status Change
                        PNOT ()
                    }

                    Method (_Q05, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: AC DISCONNECTED"
                        PWRS = ACEX /* \_SB_.PCI0.LPCB.EC0_.ACEX */
                        Notify (AC, 0x80) // Status Change
                        PNOT ()
                    }

                    Method (_Q06, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: BATTERY LOW"
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (_Q07, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: BATTERY CRITICAL"
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (_Q08, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: BATTERY INFO"
                        Notify (BAT0, 0x81) // Information Change
                    }

                    Method (_Q0A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: THERMAL OVERLOAD"
                        Notify (_TZ, 0x80) // Status Change
                    }

                    Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: THERMAL"
                        Notify (_TZ, 0x80) // Status Change
                    }

                    Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: KEY PRESSED"
                        Notify (CREC, 0x02) // Device Wake
                    }

                    Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: THERMAL SHUTDOWN"
                        Notify (_TZ, 0x80) // Status Change
                    }

                    Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: BATTERY SHUTDOWN"
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                    }

                    Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                    }

                    Method (_Q17, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: BATTERY STATUS"
                        Notify (BAT0, 0x80) // Status Change
                        PNOT ()
                    }

                    Method (_Q18, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: PANIC"
                        Notify (CREC, 0xB0) // Device-Specific
                    }

                    Method (_Q1B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: MKBP"
                        Notify (CREC, 0x80) // Status Change
                    }

                    Method (_Q1D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: TABLET mode switch Event"
                        Notify (CREC, 0x02) // Device Wake
                    }

                    Method (_Q21, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: Body Detect Change Event"
                    }

                    Mutex (PATM, 0x01)
                    Method (PAT0, 2, Serialized)
                    {
                        If (Acquire (PATM, 0x03E8))
                        {
                            Return (Zero)
                        }

                        PATI = ToInteger (Arg0)
                        Local1 = (ToInteger (Arg1) / 0x0A)
                        PATT = (Local1 - TOFS) /* \_SB_.PCI0.LPCB.EC0_.TOFS */
                        PATC = 0x02
                        Release (PATM)
                        Return (One)
                    }

                    Method (PAT1, 2, Serialized)
                    {
                        If (Acquire (PATM, 0x03E8))
                        {
                            Return (Zero)
                        }

                        PATI = ToInteger (Arg0)
                        Local1 = (ToInteger (Arg1) / 0x0A)
                        PATT = (Local1 - TOFS) /* \_SB_.PCI0.LPCB.EC0_.TOFS */
                        PATC = 0x03
                        Release (PATM)
                        Return (One)
                    }

                    Method (PATD, 1, Serialized)
                    {
                        If (Acquire (PATM, 0x03E8))
                        {
                            Return (Zero)
                        }

                        PATI = ToInteger (Arg0)
                        PATT = Zero
                        PATC = Zero
                        PATC = One
                        Release (PATM)
                        Return (One)
                    }

                    Method (_Q09, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (!Acquire (PATM, 0x03E8))
                        {
                            Local0 = PATI /* \_SB_.PCI0.LPCB.EC0_.PATI */
                            While ((Local0 != 0xFF))
                            {
                                Local0 = PATI /* \_SB_.PCI0.LPCB.EC0_.PATI */
                            }

                            Release (PATM)
                        }
                    }

                    Method (CHGS, 1, Serialized)
                    {
                        CHGL = ToInteger (Arg0)
                    }

                    Method (CHGD, 0, Serialized)
                    {
                        CHGL = 0xFF
                    }

                    Method (RCTM, 0, NotSerialized)
                    {
                        Return (TBMD) /* \_SB_.PCI0.LPCB.EC0_.TBMD */
                    }

                    Device (AC)
                    {
                        Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                        Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                        {
                            _SB
                        })
                        Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                        {
                            Return (ACEX) /* \_SB_.PCI0.LPCB.EC0_.ACEX */
                        }

                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }
                    }

                    Mutex (BATM, 0x00)
                    Method (BTSW, 1, NotSerialized)
                    {
                        If ((Arg0 != Zero))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (BSTA, 1, Serialized)
                    {
                        If (Acquire (BATM, 0x03E8))
                        {
                            Return (Zero)
                        }

                        If ((~BTSW (Arg0) & BTEX))
                        {
                            Local0 = 0x1F
                        }
                        Else
                        {
                            Local0 = 0x0F
                        }

                        Release (BATM)
                        Return (Local0)
                    }

                    Method (BBIF, 2, Serialized)
                    {
                        If (Acquire (BATM, 0x03E8))
                        {
                            Return (Arg1)
                        }

                        If (BTSW (Arg0))
                        {
                            Release (BATM)
                            Return (Arg1)
                        }

                        Arg1 [0x02] = BTDF /* \_SB_.PCI0.LPCB.EC0_.BTDF */
                        Arg1 [0x04] = BTDV /* \_SB_.PCI0.LPCB.EC0_.BTDV */
                        Local0 = BTDA /* \_SB_.PCI0.LPCB.EC0_.BTDA */
                        Arg1 [One] = Local0
                        Local2 = ((Local0 * DWRN) / 0x64)
                        Arg1 [0x05] = Local2
                        Local2 = ((Local0 * DLOW) / 0x64)
                        Arg1 [0x06] = Local2
                        Arg1 [0x09] = ToString (Concatenate (BMOD, Zero), Ones)
                        Arg1 [0x0A] = ToString (Concatenate (BSER, Zero), Ones)
                        Arg1 [0x0C] = ToString (Concatenate (BMFG, Zero), Ones)
                        Release (BATM)
                        Return (Arg1)
                    }

                    Method (BBIX, 2, Serialized)
                    {
                        If (Acquire (BATM, 0x03E8))
                        {
                            Return (Arg1)
                        }

                        If (BTSW (Arg0))
                        {
                            Release (BATM)
                            Return (Arg1)
                        }

                        Arg1 [0x03] = BTDF /* \_SB_.PCI0.LPCB.EC0_.BTDF */
                        Arg1 [0x05] = BTDV /* \_SB_.PCI0.LPCB.EC0_.BTDV */
                        Local0 = BTDA /* \_SB_.PCI0.LPCB.EC0_.BTDA */
                        Arg1 [0x02] = Local0
                        Local2 = ((Local0 * DWRN) / 0x64)
                        Arg1 [0x06] = Local2
                        Local2 = ((Local0 * DLOW) / 0x64)
                        Arg1 [0x07] = Local2
                        Arg1 [0x08] = BTCC /* \_SB_.PCI0.LPCB.EC0_.BTCC */
                        Arg1 [0x10] = ToString (Concatenate (BMOD, Zero), Ones)
                        Arg1 [0x11] = ToString (Concatenate (BSER, Zero), Ones)
                        Arg1 [0x13] = ToString (Concatenate (BMFG, Zero), Ones)
                        Release (BATM)
                        Return (Arg1)
                    }

                    Method (BBST, 4, Serialized)
                    {
                        If (Acquire (BATM, 0x03E8))
                        {
                            Return (Arg1)
                        }

                        If (BTSW (Arg0))
                        {
                            Release (BATM)
                            Return (Arg1)
                        }

                        Local1 = Zero
                        If (ACEX)
                        {
                            If (BFCG)
                            {
                                Local1 = 0x02
                            }
                            ElseIf (BFDC)
                            {
                                Local1 = One
                            }
                        }
                        Else
                        {
                            Local1 = One
                        }

                        If (BFCR)
                        {
                            Local1 |= 0x04
                        }

                        Arg1 [Zero] = Local1
                        If ((Local1 != DerefOf (Arg2)))
                        {
                            Arg2 = Local1
                            If ((Arg0 == Zero))
                            {
                                Notify (BAT0, 0x80) // Status Change
                            }
                        }

                        Arg1 [One] = BTPR /* \_SB_.PCI0.LPCB.EC0_.BTPR */
                        Local1 = BTRA /* \_SB_.PCI0.LPCB.EC0_.BTRA */
                        If (((Arg3 && ACEX) && !(BFDC && BFCG)))
                        {
                            Local2 = BTDF /* \_SB_.PCI0.LPCB.EC0_.BTDF */
                            Local3 = (Local2 >> 0x04)
                            If (((Local1 > (Local2 - Local3)) && (Local1 < (Local2 + 
                                Local3))))
                            {
                                Local1 = Local2
                            }
                        }

                        Arg1 [0x02] = Local1
                        Arg1 [0x03] = BTVO /* \_SB_.PCI0.LPCB.EC0_.BTVO */
                        Release (BATM)
                        Return (Arg1)
                    }

                    Device (BAT0)
                    {
                        Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                        {
                            _SB
                        })
                        Name (PBIF, Package (0x0D)
                        {
                            One, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            One, 
                            0xFFFFFFFF, 
                            0x03, 
                            0xFFFFFFFF, 
                            One, 
                            One, 
                            "", 
                            "", 
                            "LION", 
                            ""
                        })
                        Name (PBIX, Package (0x14)
                        {
                            Zero, 
                            One, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            One, 
                            0xFFFFFFFF, 
                            0x03, 
                            0xFFFFFFFF, 
                            Zero, 
                            0x00018000, 
                            0x01F4, 
                            0x0A, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            One, 
                            One, 
                            "", 
                            "", 
                            "LION", 
                            ""
                        })
                        Name (PBST, Package (0x04)
                        {
                            Zero, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        Name (BSTP, Zero)
                        Name (BFWK, One)
                        Method (BFWE, 0, NotSerialized)
                        {
                            BFWK = One
                        }

                        Method (BFWD, 0, NotSerialized)
                        {
                            BFWK = Zero
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Return (BSTA (Zero))
                        }

                        Method (_BIF, 0, Serialized)  // _BIF: Battery Information
                        {
                            Return (BBIF (Zero, PBIF))
                        }

                        Method (_BIX, 0, Serialized)  // _BIX: Battery Information Extended
                        {
                            Return (BBIX (Zero, PBIX))
                        }

                        Method (_BST, 0, Serialized)  // _BST: Battery Status
                        {
                            Return (BBST (Zero, PBST, RefOf (BSTP), BFWK))
                        }
                    }

                    Device (CREC)
                    {
                        Name (_HID, "GOOG0004")  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Name (_DDN, "EC Command Device")  // _DDN: DOS Device Name
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x10, 
                            0x05
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }
                    }
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0093,             // Range Minimum
                            0x0093,             // Range Maximum
                            0x01,               // Alignment
                            0x0D,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (FWH)
                {
                    Name (_HID, EisaId ("INT0800") /* Intel 82802 Firmware Hub Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0C01") /* System Board */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B4,             // Range Minimum
                            0x00B4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (LDRC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (RBUF, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (RBUF) /* \_SB_.PCI0.LPCB.LDRC.RBUF */
                    }
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                    })
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (SIO)
                {
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (ECMM)
                    {
                        Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                        Name (_UID, 0x04)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IO (Decode16,
                                0x0900,             // Range Minimum
                                0x0900,             // Range Maximum
                                0x08,               // Alignment
                                0xFF,               // Length
                                )
                        })
                    }

                    Device (ECUI)
                    {
                        Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                        Name (_UID, 0x03)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IO (Decode16,
                                0x0200,             // Range Minimum
                                0x0200,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0204,             // Range Minimum
                                0x0204,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0800,             // Range Minimum
                                0x0800,             // Range Maximum
                                0x08,               // Alignment
                                0x80,               // Length
                                )
                            IO (Decode16,
                                0x0880,             // Range Minimum
                                0x0880,             // Range Maximum
                                0x08,               // Alignment
                                0x80,               // Length
                                )
                        })
                    }
                }

                Scope (^^PCI0)
                {
                    Device (PS2K)
                    {
                        Name (_UID, Zero)  // _UID: Unique ID
                        Name (_HID, "GOOG000A")  // _HID: Hardware ID
                        Name (_CID, Package (0x02)  // _CID: Compatible ID
                        {
                            EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */, 
                            EisaId ("PNP030B")
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            Interrupt (ResourceConsumer, Edge, ActiveLow, Exclusive, ,, )
                            {
                                0x00000035,
                            }
                        })
                    }
                }
            }

            Device (XHCI)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x03
                })
                Name (_S3D, 0x03)  // _S3D: S3 Device State
                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (GPLD, 1, Serialized)
                    {
                        Name (PCKG, Package (0x01)
                        {
                            Buffer (0x10){}
                        })
                        CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                        REV = 0x02
                        CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                        VISI = Arg0
                        Return (PCKG) /* \_SB_.PCI0.XHCI.RHUB.GPLD.PCKG */
                    }

                    Device (PRT1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }

                    Device (PRT3)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                    }

                    Device (PRT4)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                    }

                    Device (SSP1)
                    {
                        Name (_ADR, 0x07)  // _ADR: Address
                    }
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (Package (0x38)
                    {
                        Package (0x04)
                        {
                            0x0002FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0011FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0011FFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0011FFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0011FFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0012FFFF, 
                            Zero, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0012FFFF, 
                            One, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0012FFFF, 
                            0x02, 
                            Zero, 
                            0x14
                        }, 

                        Package (0x04)
                        {
                            0x0012FFFF, 
                            0x03, 
                            Zero, 
                            0x15
                        }, 

                        Package (0x04)
                        {
                            0x0013FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0013FFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0013FFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0013FFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0017FFFF, 
                            Zero, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0017FFFF, 
                            One, 
                            Zero, 
                            0x14
                        }, 

                        Package (0x04)
                        {
                            0x0017FFFF, 
                            0x02, 
                            Zero, 
                            0x15
                        }, 

                        Package (0x04)
                        {
                            0x0017FFFF, 
                            0x03, 
                            Zero, 
                            0x16
                        }, 

                        Package (0x04)
                        {
                            0x0018FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0018FFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0018FFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0018FFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            Zero, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            One, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            0x02, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            0x03, 
                            Zero, 
                            0x14
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }
                    })
                }
                Else
                {
                    Return (Package (0x38)
                    {
                        Package (0x04)
                        {
                            0x0002FFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            One, 
                            ^LPCB.LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x02, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x03, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0011FFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0011FFFF, 
                            One, 
                            ^LPCB.LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0011FFFF, 
                            0x02, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0011FFFF, 
                            0x03, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0012FFFF, 
                            Zero, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0012FFFF, 
                            One, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0012FFFF, 
                            0x02, 
                            ^LPCB.LNKE, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0012FFFF, 
                            0x03, 
                            ^LPCB.LNKF, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0013FFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0013FFFF, 
                            One, 
                            ^LPCB.LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0013FFFF, 
                            0x02, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0013FFFF, 
                            0x03, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            One, 
                            ^LPCB.LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x02, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x03, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            One, 
                            ^LPCB.LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            0x02, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            0x03, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0017FFFF, 
                            Zero, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0017FFFF, 
                            One, 
                            ^LPCB.LNKE, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0017FFFF, 
                            0x02, 
                            ^LPCB.LNKF, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0017FFFF, 
                            0x03, 
                            ^LPCB.LNKG, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0018FFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0018FFFF, 
                            One, 
                            ^LPCB.LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0018FFFF, 
                            0x02, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0018FFFF, 
                            0x03, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            One, 
                            ^LPCB.LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x02, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x03, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            One, 
                            ^LPCB.LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x02, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x03, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            One, 
                            ^LPCB.LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            One, 
                            ^LPCB.LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x03, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            Zero, 
                            ^LPCB.LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            One, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            0x02, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            0x03, 
                            ^LPCB.LNKE, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            One, 
                            ^LPCB.LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x02, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x03, 
                            ^LPCB.LNKD, 
                            Zero
                        }
                    })
                }
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x13
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                ^^LPCB.LNKA, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                ^^LPCB.LNKB, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPCB.LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPCB.LNKD, 
                                Zero
                            }
                        })
                    }
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x10
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                ^^LPCB.LNKB, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                ^^LPCB.LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPCB.LNKD, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPCB.LNKA, 
                                Zero
                            }
                        })
                    }
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x11
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                ^^LPCB.LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                ^^LPCB.LNKD, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPCB.LNKA, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPCB.LNKB, 
                                Zero
                            }
                        })
                    }
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x12
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                ^^LPCB.LNKD, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                ^^LPCB.LNKA, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPCB.LNKB, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPCB.LNKC, 
                                Zero
                            }
                        })
                    }
                }
            }

            Scope (\_SB)
            {
                Device (GPSC)
                {
                    Name (_HID, "INT33FC" /* Intel Baytrail GPIO Controller */)  // _HID: Hardware ID
                    Name (_CID, "INT33FC" /* Intel Baytrail GPIO Controller */)  // _CID: Compatible ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y03)
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                        {
                            0x00000031,
                        }
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.GPSC._Y03._BAS, RBAS)  // _BAS: Base Address
                        RBAS = 0xFED0C000
                        Return (RBUF) /* \_SB_.GPSC.RBUF */
                    }

                    Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                    {
                        Return (0x06)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }
                }

                Device (GPNC)
                {
                    Name (_HID, "INT33FC" /* Intel Baytrail GPIO Controller */)  // _HID: Hardware ID
                    Name (_CID, "INT33FC" /* Intel Baytrail GPIO Controller */)  // _CID: Compatible ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y04)
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                        {
                            0x00000030,
                        }
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.GPNC._Y04._BAS, RBAS)  // _BAS: Base Address
                        RBAS = 0xFED0D000
                        Return (RBUF) /* \_SB_.GPNC.RBUF */
                    }

                    Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                    {
                        Return (0x06)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }
                }

                Device (GPSS)
                {
                    Name (_HID, "INT33FC" /* Intel Baytrail GPIO Controller */)  // _HID: Hardware ID
                    Name (_CID, "INT33FC" /* Intel Baytrail GPIO Controller */)  // _CID: Compatible ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y05)
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                        {
                            0x00000032,
                        }
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.GPSS._Y05._BAS, RBAS)  // _BAS: Base Address
                        RBAS = 0xFED0E000
                        Return (RBUF) /* \_SB_.GPSS.RBUF */
                    }

                    Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                    {
                        Return (0x06)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }
                }
            }

            Scope (\_SB.PCI0)
            {
                Device (SDM1)
                {
                    Name (_HID, "INTL9C60" /* Intel Baytrail SOC DMA Controller */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_DDN, "DMA Controller #1")  // _DDN: DOS Device Name
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y06)
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x0000002A,
                        }
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.SDM1._Y06._BAS, RBAS)  // _BAS: Base Address
                        RBAS = S0B0 /* \S0B0 */
                        Return (RBUF) /* \_SB_.PCI0.SDM1.RBUF */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((S0EN == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (SDM2)
                {
                    Name (_HID, "INTL9C60" /* Intel Baytrail SOC DMA Controller */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_DDN, "DMA Controller #2")  // _DDN: DOS Device Name
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y07)
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x0000002B,
                        }
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.SDM2._Y07._BAS, RBAS)  // _BAS: Base Address
                        RBAS = S8B0 /* \S8B0 */
                        Return (RBUF) /* \_SB_.PCI0.SDM2.RBUF */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((S8EN == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (I2C1)
                {
                    Name (_HID, "80860F41" /* Intel Baytrail I2C Host Controller */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_DDN, "I2C Controller #1")  // _DDN: DOS Device Name
                    Name (SSCN, Package (0x03)
                    {
                        0x0200, 
                        0x0200, 
                        0x06
                    })
                    Name (FMCN, Package (0x03)
                    {
                        0x55, 
                        0x99, 
                        0x06
                    })
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y08)
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x00000020,
                        }
                        FixedDMA (0x0010, 0x0000, Width32bit, )
                        FixedDMA (0x0011, 0x0001, Width32bit, )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.I2C1._Y08._BAS, RBAS)  // _BAS: Base Address
                        RBAS = S1B0 /* \S1B0 */
                        Return (RBUF) /* \_SB_.PCI0.I2C1.RBUF */
                    }

                    Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                    {
                        Return (0x06)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((S1EN == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    OperationRegion (KEYS, SystemMemory, S1B1, 0x0100)
                    Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0x84), 
                        PSAT,   32
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        PSAT |= 0x03
                        PSAT |= Zero
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        PSAT &= 0xFFFFFFFC
                        PSAT |= Zero
                    }
                }

                Device (I2C2)
                {
                    Name (_HID, "80860F41" /* Intel Baytrail I2C Host Controller */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_DDN, "I2C Controller #2")  // _DDN: DOS Device Name
                    Name (SSCN, Package (0x03)
                    {
                        0x0200, 
                        0x0200, 
                        0x06
                    })
                    Name (FMCN, Package (0x03)
                    {
                        0x55, 
                        0x99, 
                        0x06
                    })
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y09)
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x00000021,
                        }
                        FixedDMA (0x0012, 0x0002, Width32bit, )
                        FixedDMA (0x0013, 0x0003, Width32bit, )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.I2C2._Y09._BAS, RBAS)  // _BAS: Base Address
                        RBAS = S2B0 /* \S2B0 */
                        Return (RBUF) /* \_SB_.PCI0.I2C2.RBUF */
                    }

                    Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                    {
                        Return (0x06)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((S2EN == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    OperationRegion (KEYS, SystemMemory, S2B1, 0x0100)
                    Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0x84), 
                        PSAT,   32
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        PSAT |= 0x03
                        PSAT |= Zero
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        PSAT &= 0xFFFFFFFC
                        PSAT |= Zero
                    }
                }

                Device (I2C3)
                {
                    Name (_HID, "80860F41" /* Intel Baytrail I2C Host Controller */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Name (_DDN, "I2C Controller #3")  // _DDN: DOS Device Name
                    Name (SSCN, Package (0x03)
                    {
                        0x0200, 
                        0x0200, 
                        0x06
                    })
                    Name (FMCN, Package (0x03)
                    {
                        0x55, 
                        0x99, 
                        0x06
                    })
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y0A)
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x00000022,
                        }
                        FixedDMA (0x0014, 0x0004, Width32bit, )
                        FixedDMA (0x0015, 0x0005, Width32bit, )
                    })
                    Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                    {
                        Return (0x06)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.I2C3._Y0A._BAS, RBAS)  // _BAS: Base Address
                        RBAS = S3B0 /* \S3B0 */
                        Return (RBUF) /* \_SB_.PCI0.I2C3.RBUF */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((S3EN == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    OperationRegion (KEYS, SystemMemory, S3B1, 0x0100)
                    Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0x84), 
                        PSAT,   32
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        PSAT |= 0x03
                        PSAT |= Zero
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        PSAT &= 0xFFFFFFFC
                        PSAT |= Zero
                    }
                }

                Device (I2C4)
                {
                    Name (_HID, "80860F41" /* Intel Baytrail I2C Host Controller */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Name (_DDN, "I2C Controller #4")  // _DDN: DOS Device Name
                    Name (SSCN, Package (0x03)
                    {
                        0x0200, 
                        0x0200, 
                        0x06
                    })
                    Name (FMCN, Package (0x03)
                    {
                        0x55, 
                        0x99, 
                        0x06
                    })
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y0B)
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x00000023,
                        }
                        FixedDMA (0x0016, 0x0006, Width32bit, )
                        FixedDMA (0x0017, 0x0007, Width32bit, )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.I2C4._Y0B._BAS, RBAS)  // _BAS: Base Address
                        RBAS = S4B0 /* \S4B0 */
                        Return (RBUF) /* \_SB_.PCI0.I2C4.RBUF */
                    }

                    Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                    {
                        Return (0x06)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((S4EN == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    OperationRegion (KEYS, SystemMemory, S4B1, 0x0100)
                    Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0x84), 
                        PSAT,   32
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        PSAT |= 0x03
                        PSAT |= Zero
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        PSAT &= 0xFFFFFFFC
                        PSAT |= Zero
                    }
                }

                Device (I2C5)
                {
                    Name (_HID, "80860F41" /* Intel Baytrail I2C Host Controller */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Name (_DDN, "I2C Controller #5")  // _DDN: DOS Device Name
                    Name (SSCN, Package (0x03)
                    {
                        0x0200, 
                        0x0200, 
                        0x06
                    })
                    Name (FMCN, Package (0x03)
                    {
                        0x55, 
                        0x99, 
                        0x06
                    })
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y0C)
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x00000024,
                        }
                        FixedDMA (0x0018, 0x0000, Width32bit, )
                        FixedDMA (0x0019, 0x0001, Width32bit, )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.I2C5._Y0C._BAS, RBAS)  // _BAS: Base Address
                        RBAS = S5B0 /* \S5B0 */
                        Return (RBUF) /* \_SB_.PCI0.I2C5.RBUF */
                    }

                    Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                    {
                        Return (0x06)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((S5EN == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    OperationRegion (KEYS, SystemMemory, S5B1, 0x0100)
                    Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0x84), 
                        PSAT,   32
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        PSAT |= 0x03
                        PSAT |= Zero
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        PSAT &= 0xFFFFFFFC
                        PSAT |= Zero
                    }
                }

                Device (I2C6)
                {
                    Name (_HID, "80860F41" /* Intel Baytrail I2C Host Controller */)  // _HID: Hardware ID
                    Name (_UID, 0x06)  // _UID: Unique ID
                    Name (_DDN, "I2C Controller #6")  // _DDN: DOS Device Name
                    Name (SSCN, Package (0x03)
                    {
                        0x0200, 
                        0x0200, 
                        0x06
                    })
                    Name (FMCN, Package (0x03)
                    {
                        0x55, 
                        0x99, 
                        0x06
                    })
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y0D)
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x00000025,
                        }
                        FixedDMA (0x001A, 0x0002, Width32bit, )
                        FixedDMA (0x001B, 0x0003, Width32bit, )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.I2C6._Y0D._BAS, RBAS)  // _BAS: Base Address
                        RBAS = S6B0 /* \S6B0 */
                        Return (RBUF) /* \_SB_.PCI0.I2C6.RBUF */
                    }

                    Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                    {
                        Return (0x06)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((S6EN == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    OperationRegion (KEYS, SystemMemory, S6B1, 0x0100)
                    Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0x84), 
                        PSAT,   32
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        PSAT |= 0x03
                        PSAT |= Zero
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        PSAT &= 0xFFFFFFFC
                        PSAT |= Zero
                    }
                }

                Device (I2C7)
                {
                    Name (_HID, "80860F41" /* Intel Baytrail I2C Host Controller */)  // _HID: Hardware ID
                    Name (_UID, 0x07)  // _UID: Unique ID
                    Name (_DDN, "I2C Controller #7")  // _DDN: DOS Device Name
                    Name (SSCN, Package (0x03)
                    {
                        0x0200, 
                        0x0200, 
                        0x06
                    })
                    Name (FMCN, Package (0x03)
                    {
                        0x55, 
                        0x99, 
                        0x06
                    })
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y0E)
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x00000026,
                        }
                        FixedDMA (0x001C, 0x0004, Width32bit, )
                        FixedDMA (0x001D, 0x0005, Width32bit, )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.I2C7._Y0E._BAS, RBAS)  // _BAS: Base Address
                        RBAS = S7B0 /* \S7B0 */
                        Return (RBUF) /* \_SB_.PCI0.I2C7.RBUF */
                    }

                    Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                    {
                        Return (0x06)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((S7EN == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    OperationRegion (KEYS, SystemMemory, S7B1, 0x0100)
                    Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0x84), 
                        PSAT,   32
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        PSAT |= 0x03
                        PSAT |= Zero
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        PSAT &= 0xFFFFFFFC
                        PSAT |= Zero
                    }
                }

                Device (SPI1)
                {
                    Name (_HID, "80860F0E" /* Intel SPI Controller */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_DDN, "SPI Controller #2")  // _DDN: DOS Device Name
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y0F)
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x00000029,
                        }
                        FixedDMA (0x0000, 0x0000, Width32bit, )
                        FixedDMA (0x0001, 0x0001, Width32bit, )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.SPI1._Y0F._BAS, RBAS)  // _BAS: Base Address
                        RBAS = S9B0 /* \S9B0 */
                        Return (RBUF) /* \_SB_.PCI0.SPI1.RBUF */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((S9EN == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    OperationRegion (KEYS, SystemMemory, S9B1, 0x0100)
                    Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0x84), 
                        PSAT,   32
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        PSAT |= 0x03
                        PSAT |= Zero
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        PSAT &= 0xFFFFFFFC
                        PSAT |= Zero
                    }
                }

                Device (PWM1)
                {
                    Name (_HID, "80860F09" /* Intel PWM Controller */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_DDN, "PWM Controller #1")  // _DDN: DOS Device Name
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y10)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.PWM1._Y10._BAS, RBAS)  // _BAS: Base Address
                        RBAS = SAB0 /* \SAB0 */
                        Return (RBUF) /* \_SB_.PCI0.PWM1.RBUF */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((SAEN == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (PWM2)
                {
                    Name (_HID, "80860F09" /* Intel PWM Controller */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_DDN, "PWM Controller #2")  // _DDN: DOS Device Name
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y11)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.PWM2._Y11._BAS, RBAS)  // _BAS: Base Address
                        RBAS = SBB0 /* \SBB0 */
                        Return (RBUF) /* \_SB_.PCI0.PWM2.RBUF */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((SBEN == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (UAR1)
                {
                    Name (_HID, "80860F0A" /* Intel Atom UART Controller */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_DDN, "HS-UART Controller #1")  // _DDN: DOS Device Name
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y12)
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x00000027,
                        }
                        FixedDMA (0x0002, 0x0002, Width32bit, )
                        FixedDMA (0x0003, 0x0003, Width32bit, )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.UAR1._Y12._BAS, RBAS)  // _BAS: Base Address
                        RBAS = SCB0 /* \SCB0 */
                        Return (RBUF) /* \_SB_.PCI0.UAR1.RBUF */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((SCEN == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    OperationRegion (KEYS, SystemMemory, SCB1, 0x0100)
                    Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0x84), 
                        PSAT,   32
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        PSAT |= 0x03
                        PSAT |= Zero
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        PSAT &= 0xFFFFFFFC
                        PSAT |= Zero
                    }
                }

                Device (UAR2)
                {
                    Name (_HID, "80860F0A" /* Intel Atom UART Controller */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_DDN, "HS-UART Controller #2")  // _DDN: DOS Device Name
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y13)
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x00000028,
                        }
                        FixedDMA (0x0004, 0x0004, Width32bit, )
                        FixedDMA (0x0005, 0x0005, Width32bit, )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.UAR2._Y13._BAS, RBAS)  // _BAS: Base Address
                        RBAS = SDB0 /* \SDB0 */
                        Return (RBUF) /* \_SB_.PCI0.UAR2.RBUF */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((SDEN == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    OperationRegion (KEYS, SystemMemory, SDB1, 0x0100)
                    Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0x84), 
                        PSAT,   32
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        PSAT |= 0x03
                        PSAT |= Zero
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        PSAT &= 0xFFFFFFFC
                        PSAT |= Zero
                    }
                }

                Device (EMMC)
                {
                    Name (_HID, "80860F14" /* Intel Baytrail SDIO/MMC Host Controller */)  // _HID: Hardware ID
                    Name (_CID, "PNP0D40" /* SDA Standard Compliant SD Host Controller */)  // _CID: Compatible ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_DDN, "eMMC Controller 4.5")  // _DDN: DOS Device Name
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y14)
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x0000002C,
                        }
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.EMMC._Y14._BAS, RBAS)  // _BAS: Base Address
                        RBAS = C0B0 /* \C0B0 */
                        Return (RBUF) /* \_SB_.PCI0.EMMC.RBUF */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((C0EN == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    OperationRegion (KEYS, SystemMemory, C0B1, 0x0100)
                    Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0x84), 
                        PSAT,   32
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        PSAT |= 0x03
                        PSAT |= Zero
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        PSAT &= 0xFFFFFFFC
                        PSAT |= Zero
                    }

                    Device (EM45)
                    {
                        Name (_ADR, 0x08)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (SDIO)
                {
                    Name (_HID, "INT33BB" /* Intel Baytrail SD Host Controller */)  // _HID: Hardware ID
                    Name (_CID, "PNP0D40" /* SDA Standard Compliant SD Host Controller */)  // _CID: Compatible ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_DDN, "SDIO Controller")  // _DDN: DOS Device Name
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y15)
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x0000002E,
                        }
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.SDIO._Y15._BAS, RBAS)  // _BAS: Base Address
                        RBAS = C1B0 /* \C1B0 */
                        Return (RBUF) /* \_SB_.PCI0.SDIO.RBUF */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((C1EN == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    OperationRegion (KEYS, SystemMemory, C1B1, 0x0100)
                    Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0x84), 
                        PSAT,   32
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        PSAT |= 0x03
                        PSAT |= Zero
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        PSAT &= 0xFFFFFFFC
                        PSAT |= Zero
                    }
                }

                Device (SDCD)
                {
                    Name (_HID, "80860F16")  // _HID: Hardware ID
                    Name (_CID, "PNP0D40" /* SDA Standard Compliant SD Host Controller */)  // _CID: Compatible ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Name (_DDN, "SD Card Controller")  // _DDN: DOS Device Name
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y16)
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x0000002F,
                        }
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.SDCD._Y16._BAS, RBAS)  // _BAS: Base Address
                        RBAS = C2B0 /* \C2B0 */
                        Return (RBUF) /* \_SB_.PCI0.SDCD.RBUF */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((C2EN == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    OperationRegion (KEYS, SystemMemory, C2B1, 0x0100)
                    Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0x84), 
                        PSAT,   32
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        PSAT |= 0x03
                        PSAT |= Zero
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        PSAT &= 0xFFFFFFFC
                        PSAT |= Zero
                    }
                }

                Device (LPEA)
                {
                    Name (_HID, "80860F28" /* Intel SST Audio DSP */)  // _HID: Hardware ID
                    Name (_CID, "80860F28" /* Intel SST Audio DSP */)  // _CID: Compatible ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_DDN, "Low Power Audio Controller")  // _DDN: DOS Device Name
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PLPE
                    })
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00200000,         // Address Length
                            _Y17)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y18)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00100000,         // Address Length
                            _Y19)
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x00000018,
                        }
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x00000019,
                        }
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x0000001A,
                        }
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x0000001B,
                        }
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x0000001C,
                        }
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x0000001D,
                        }
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.LPEA._Y17._BAS, BAS0)  // _BAS: Base Address
                        BAS0 = LPB0 /* \LPB0 */
                        CreateDWordField (RBUF, \_SB.PCI0.LPEA._Y18._BAS, BAS1)  // _BAS: Base Address
                        BAS1 = LPB1 /* \LPB1 */
                        CreateDWordField (RBUF, \_SB.PCI0.LPEA._Y19._BAS, BAS2)  // _BAS: Base Address
                        BAS2 = LPFW /* \LPFW */
                        If (CondRefOf (^GBUF))
                        {
                            ConcatenateResTemplate (RBUF, GBUF, Local1)
                            Return (Local1)
                        }

                        Return (RBUF) /* \_SB_.PCI0.LPEA.RBUF */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((LPEN == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    OperationRegion (KEYS, SystemMemory, LPB1, 0x0100)
                    Field (KEYS, DWordAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0x84), 
                        PSAT,   32
                    }

                    PowerResource (PLPE, 0x00, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (One)
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                            PSAT |= 0x03
                            PSAT |= Zero
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                            PSAT &= 0xFFFFFFFC
                            PSAT |= Zero
                        }
                    }
                }
            }

            Device (GFX0)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
            }

            Scope (GFX0)
            {
                OperationRegion (GFXC, PCI_Config, Zero, 0x0100)
                Field (GFXC, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    BAR0,   64, 
                    Offset (0xE4), 
                    ASLE,   32, 
                    Offset (0xFC), 
                    ASLS,   32
                }

                OperationRegion (GFRG, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFFFF0), 0x00400000)
                Field (GFRG, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xC8254), 
                    BCLV,   16
                }

                Field (GFRG, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xC8256), 
                    BCLM,   16
                }

                Device (BOX3)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (OPRG, SystemMemory, ASLS, 0x2000)
                    Field (OPRG, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x58), 
                        MBOX,   32, 
                        Offset (0x300), 
                        ARDY,   1, 
                        Offset (0x304), 
                        ASLC,   32, 
                        TCHE,   32, 
                        ALSI,   32, 
                        BCLP,   32, 
                        PFIT,   32, 
                        CBLV,   32
                    }

                    Method (XBCM, 1, Serialized)
                    {
                        If ((ASLS == Zero))
                        {
                            Return (Ones)
                        }

                        If ((MBOX & Zero))
                        {
                            Return (Ones)
                        }

                        Local1 = ((Arg0 * 0xFF) / 0x64)
                        If ((Local1 > 0xFF))
                        {
                            Local1 = 0xFF
                        }

                        BCLP = (Local1 | 0x80000000)
                        If ((ARDY == Zero))
                        {
                            Return (Ones)
                        }

                        ASLC = 0x02
                        ASLE = One
                        Local0 = 0x20
                        While ((Local0 > Zero))
                        {
                            Sleep (One)
                            If ((ASLC & Zero))
                            {
                                Local1 = ((ASLC >> 0x0C) & 0x03)
                                If ((Local1 == Zero))
                                {
                                    Return (Zero)
                                }
                                Else
                                {
                                    Return (Ones)
                                }
                            }

                            Local0--
                        }

                        Return (Ones)
                    }
                }

                Device (LEGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (DRCL, 2, NotSerialized)
                    {
                        Return (((Arg0 + (Arg1 / 0x02)) / Arg1))
                    }

                    Method (XBCM, 1, NotSerialized)
                    {
                        BCLV = DRCL ((Arg0 * BCLM), 0x64)
                    }

                    Method (XBQC, 0, NotSerialized)
                    {
                        If ((BCLM == Zero))
                        {
                            Return (Zero)
                        }

                        Local0 = DRCL ((BCLV * 0x64), BCLM)
                        Local1 = 0x02
                        While ((Local1 < (SizeOf (BRIG) - One)))
                        {
                            Local2 = DerefOf (BRIG [Local1])
                            Local3 = DerefOf (BRIG [(Local1 + One)])
                            If ((Local0 < Local3))
                            {
                                If (((Local0 < Local2) || ((Local0 - Local2) < (Local3 - 
                                    Local0))))
                                {
                                    Return (Local2)
                                }
                                Else
                                {
                                    Return (Local3)
                                }
                            }

                            Local1++
                        }

                        Return (Local3)
                    }
                }

                Method (XBCM, 1, NotSerialized)
                {
                    If ((^BOX3.XBCM (Arg0) == Ones))
                    {
                        ^LEGA.XBCM (Arg0)
                    }
                }

                Method (XBQC, 0, NotSerialized)
                {
                    Return (^LEGA.XBQC ())
                }

                Name (BRCT, Zero)
                Method (BRID, 1, NotSerialized)
                {
                    Local0 = Match (BRIG, MEQ, Arg0, MTR, Zero, 0x02)
                    If ((Local0 == Ones))
                    {
                        Return ((SizeOf (BRIG) - One))
                    }

                    Return (Local0)
                }

                Method (XBCL, 0, NotSerialized)
                {
                    BRCT = One
                    Return (BRIG) /* \_SB_.PCI0.GFX0.BRIG */
                }

                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                }

                Method (DECB, 0, NotSerialized)
                {
                    If (BRCT)
                    {
                        Notify (LCD0, 0x87) // Device-Specific
                    }
                    Else
                    {
                        Local0 = BRID (XBQC ())
                        If ((Local0 != 0x02))
                        {
                            Local0--
                        }

                        XBCM (DerefOf (BRIG [Local0]))
                    }
                }

                Method (INCB, 0, NotSerialized)
                {
                    If (BRCT)
                    {
                        Notify (LCD0, 0x86) // Device-Specific
                    }
                    Else
                    {
                        Local0 = BRID (XBQC ())
                        If ((Local0 != (SizeOf (BRIG) - One)))
                        {
                            Local0++
                        }

                        XBCM (DerefOf (BRIG [Local0]))
                    }
                }
            }

            Scope (GFX0)
            {
                Name (BRIG, Package (0x12)
                {
                    0x64, 
                    0x64, 
                    0x02, 
                    0x04, 
                    0x05, 
                    0x07, 
                    0x09, 
                    0x0B, 
                    0x0D, 
                    0x12, 
                    0x14, 
                    0x18, 
                    0x1D, 
                    0x21, 
                    0x28, 
                    0x32, 
                    0x43, 
                    0x64
                })
            }
        }
    }

    Name (SSFG, 0x0D)
    If (Zero)
    {
        SSFG &= 0xFE
    }

    If (Zero)
    {
        SSFG &= 0xF7
    }

    If (CondRefOf (\OSFG))
    {
        SSFG = OSFG /* External reference */
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If ((SSFG & One))
    {
        Name (_S1, Package (0x04)  // _S1_: S1 System State
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If ((SSFG & 0x04))
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If ((SSFG & 0x08))
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x06, 
            0x04, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Scope (_SB)
    {
        Device (TPAD)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x11, 
                0x03
            })
            Name (RBUF, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x00000033,
                }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((S1EN == Zero))
                {
                    Return (RBUF) /* \_SB_.TPAD.RBUF */
                }

                Return (Buffer (0x02)
                {
                     0x79, 0x00                                       // y.
                })
            }
        }
    }

    Scope (_SB.PCI0.I2C2)
    {
        Device (CODC)
        {
            Name (_HID, "193C9890")  // _HID: Hardware ID
            Name (_DDN, "Maxim 98090 Codec")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0010, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                    0x00, ResourceConsumer, , Exclusive,
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x00000043,
                }
                GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionNone,
                    "\\_SB.GPSC", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x000E
                    }
                GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionNone,
                    "\\_SB.GPSC", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x000F
                    }
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((S2EN == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0.LPEA)
    {
        Name (GBUF, ResourceTemplate ()
        {
            GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionNone,
                "\\_SB.GPSC", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x000E
                }
            GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionNone,
                "\\_SB.GPSC", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x000F
                }
            GpioInt (Edge, ActiveHigh, Exclusive, PullNone, 0x0000,
                "\\_SB.GPSS", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x001C
                }
        })
        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
        {
        }
    }

    Scope (_SB.PCI0.I2C1)
    {
        Device (ETPA)
        {
            Name (_HID, "ELAN0000")  // _HID: Hardware ID
            Name (_DDN, "Elan Touchpad")  // _DDN: DOS Device Name
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (ISTP, One)
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                    0x00, ResourceConsumer, , Exclusive,
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x00000033,
                }
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((S1EN == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
        }
    }
}



FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 00000114
[008h 0008 001h]                    Revision : 06
[009h 0009 001h]                    Checksum : 60
[00Ah 0010 006h]                      Oem ID : "COREv4"
[010h 0016 008h]                Oem Table ID : "COREBOOT"
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : "CORE"
[020h 0032 004h]       Asl Compiler Revision : 20230628

[024h 0036 004h]                FACS Address : 7AF30240
[028h 0040 004h]                DSDT Address : 1FFF8000
[02Ch 0044 001h]                       Model : 00
[02Dh 0045 001h]                  PM Profile : 02 [Mobile]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B2
[034h 0052 001h]           ACPI Enable Value : E1
[035h 0053 001h]          ACPI Disable Value : 1E
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 00
[038h 0056 004h]    PM1A Event Block Address : 00000400
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00000404
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 00000450
[04Ch 0076 004h]      PM Timer Block Address : 00000408
[050h 0080 004h]          GPE0 Block Address : 00000420
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 10
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 00
[05Fh 0095 001h]                _CST Support : 00
[060h 0096 002h]                  C2 Latency : 0065
[062h 0098 002h]                  C3 Latency : 03E9
[064h 0100 002h]              CPU Cache Size : 0000
[066h 0102 002h]          Cache Flush Stride : 0000
[068h 0104 001h]           Duty Cycle Offset : 00
[069h 0105 001h]            Duty Cycle Width : 00
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 32
[06Dh 0109 002h]  Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 00008CA5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 1
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 01 [Byte Access:8]
[078h 0120 008h]                     Address : 0000000000000CF9

[080h 0128 001h]        Value to cause reset : 06
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 00
[084h 0132 008h]                FACS Address : 0000000000000000
[08Ch 0140 008h]                DSDT Address : 000000001FFF8000
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 02 [Word Access:16]
[098h 0152 008h]                     Address : 0000000000000400

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 00 [SystemMemory]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000000404

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 00 [SystemMemory]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200 008h]                     Address : 0000000000000450

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000000408

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 80
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224 008h]                     Address : 0000000000000420

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 00 [SystemMemory]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236 008h]                     Address : 0000000000000000


[0F4h 0244 00Ch]      Sleep Control Register : [Generic Address Structure]
[0F4h 0244 001h]                    Space ID : 00 [SystemMemory]
[0F5h 0245 001h]                   Bit Width : 00
[0F6h 0246 001h]                  Bit Offset : 00
[0F7h 0247 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248 008h]                     Address : 0000000000000000

[100h 0256 00Ch]       Sleep Status Register : [Generic Address Structure]
[100h 0256 001h]                    Space ID : 00 [SystemMemory]
[101h 0257 001h]                   Bit Width : 00
[102h 0258 001h]                  Bit Offset : 00
[103h 0259 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260 008h]                     Address : 0000000000000000

[10Ch 0268 008h]               Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 60 43 4F 52 45 76 34  // FACP.....`COREv4
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 28 06 23 20 40 02 F3 7A 00 80 FF 1F 00 02 09 00  // (.# @..z........
    0030: B2 00 00 00 E1 1E 00 00 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 50 04 00 00 08 04 00 00  // ........P.......
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 10 00 00 00  //  ...............
    0060: 65 00 E9 03 00 00 00 00 00 00 0D 00 32 03 00 00  // e...........2...
    0070: A5 8C 00 00 01 08 00 01 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 00 00 00 00 00 00 00 00 00 00 80 FF 1F  // ................
    0090: 00 00 00 00 01 20 00 02 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 50 04 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 03 08 04 00 00 00 00 00 00 01 80 00 01  // . ..............
    00E0: 20 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : 00000000
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 01
[021h 0033 003h]                    Reserved : AC1857
[024h 0036 004h]   OspmFlags (decoded below) : 9B863CD1
               64-bit Wake Env Required (V2) : 1

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 57 18 AC D1 3C 86 9B F0 A3 12 54 D4 60 86 37  // .W...<.....T.`.7
    0030: A1 90 F6 6D 06 EC EF 7B AE 12 BD 0C 83 CC AF 63  // ...m...{.......c


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 15
[00Ah 0010 006h]                      Oem ID : "COREv4"
[010h 0016 008h]                Oem Table ID : "COREBOOT"
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : "CORE"
[020h 0032 004h]       Asl Compiler Revision : 20230628

[024h 0036 004h]           Hardware Block ID : 8086A201

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 40
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 0000
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 15 43 4F 52 45 76 34  // HPET8.....COREv4
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 28 06 23 20 01 A2 86 80 00 40 00 00 00 00 D0 FE  // (.# .....@......
    0030: 00 00 00 00 00 00 00 00                          // ........


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : FD
[00Ah 0010 006h]                      Oem ID : "COREv4"
[010h 0016 008h]                Oem Table ID : "COREBOOT"
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : "CORE"
[020h 0032 004h]       Asl Compiler Revision : 20230628

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000E0000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : FF
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 FD 43 4F 52 45 76 34  // MCFG<.....COREv4
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 28 06 23 20 00 00 00 00 00 00 00 00 00 00 00 E0  // (.# ............
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


SSDT
----
DefinitionBlock ("", "SSDT", 2, "COREv4", "COREBOOT", 0x00000000)
{
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.GFX0, DeviceObj)
    External (_SB_.PCI0.GFX0.XBCL, IntObj)
    External (_SB_.PCI0.GFX0.XBQC, IntObj)
    External (_SB_.PCI0.TPM_.USER, UnknownObj)
    External (PPCM, IntObj)
    External (TLVL, IntObj)

    Device (CTBL)
    {
        Name (_HID, "BOOT0000")  // _HID: Hardware ID
        Name (_UID, Zero)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (0x0F)
        }

        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            Memory32Fixed (ReadOnly,
                0x7AF54000,         // Address Base
                0x00008000,         // Address Length
                )
        })
    }

    Device (\_SB.CP00)
    {
        Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
        Name (_UID, Zero)  // _UID: Unique ID
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCM) /* External reference */
        }

        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000001
            }
        })
        Name (_PSS, Package (0x0C)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000877, 
                0x00001B58, 
                0x0000000A, 
                0x0000000A, 
                0x00001F4C, 
                0x00001F4C
            }, 

            Package (0x06)
            {
                0x00000876, 
                0x00001B58, 
                0x0000000A, 
                0x0000000A, 
                0x00001A41, 
                0x00001A41
            }, 

            Package (0x06)
            {
                0x000007CF, 
                0x000018A8, 
                0x0000000A, 
                0x0000000A, 
                0x00001841, 
                0x00001841
            }, 

            Package (0x06)
            {
                0x00000729, 
                0x00001611, 
                0x0000000A, 
                0x0000000A, 
                0x0000163D, 
                0x0000163D
            }, 

            Package (0x06)
            {
                0x00000682, 
                0x00001398, 
                0x0000000A, 
                0x0000000A, 
                0x0000143A, 
                0x0000143A
            }, 

            Package (0x06)
            {
                0x000005DB, 
                0x0000113C, 
                0x0000000A, 
                0x0000000A, 
                0x00001237, 
                0x00001237
            }, 

            Package (0x06)
            {
                0x00000535, 
                0x00000EF3, 
                0x0000000A, 
                0x0000000A, 
                0x00001033, 
                0x00001033
            }, 

            Package (0x06)
            {
                0x0000048E, 
                0x00000CC4, 
                0x0000000A, 
                0x0000000A, 
                0x00000E30, 
                0x00000E30
            }, 

            Package (0x06)
            {
                0x000003E7, 
                0x00000AAD, 
                0x0000000A, 
                0x0000000A, 
                0x00000C2D, 
                0x00000C2D
            }, 

            Package (0x06)
            {
                0x00000341, 
                0x000008AC, 
                0x0000000A, 
                0x0000000A, 
                0x00000A29, 
                0x00000A29
            }, 

            Package (0x06)
            {
                0x0000029A, 
                0x000006C1, 
                0x0000000A, 
                0x0000000A, 
                0x00000826, 
                0x00000826
            }, 

            Package (0x06)
            {
                0x000001F3, 
                0x000004EF, 
                0x0000000A, 
                0x0000000A, 
                0x00000622, 
                0x00000622
            }
        })
        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x01, 
                0x0001, 
                0x000003E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000051, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x01F4, 
                0x0000000A
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000052, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x05DC, 
                0x00000001
            }
        })
        Name (_TSD, Package (0x01)  // _TSD: Throttling State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000002
            }
        })
        Name (_PTC, Package (0x02)  // _PTC: Processor Throttling Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (\TLVL) /* External reference */
        }

        Name (_TSS, Package (0x08)  // _TSS: Throttling Supported States
        {
            Package (0x05)
            {
                0x00000064, 
                0x000003E8, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000058, 
                0x0000036B, 
                0x00000000, 
                0x0000001E, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x0000004B, 
                0x000002EE, 
                0x00000000, 
                0x0000001C, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x0000003F, 
                0x00000271, 
                0x00000000, 
                0x0000001A, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000032, 
                0x000001F4, 
                0x00000000, 
                0x00000018, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000026, 
                0x00000177, 
                0x00000000, 
                0x00000016, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000019, 
                0x000000FA, 
                0x00000000, 
                0x00000014, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x0000000D, 
                0x0000007D, 
                0x00000000, 
                0x00000012, 
                0x00000000
            }
        })
    }

    Device (\_SB.CP01)
    {
        Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
        Name (_UID, One)  // _UID: Unique ID
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCM) /* External reference */
        }

        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000001
            }
        })
        Name (_PSS, Package (0x0C)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000877, 
                0x00001B58, 
                0x0000000A, 
                0x0000000A, 
                0x00001F4C, 
                0x00001F4C
            }, 

            Package (0x06)
            {
                0x00000876, 
                0x00001B58, 
                0x0000000A, 
                0x0000000A, 
                0x00001A41, 
                0x00001A41
            }, 

            Package (0x06)
            {
                0x000007CF, 
                0x000018A8, 
                0x0000000A, 
                0x0000000A, 
                0x00001841, 
                0x00001841
            }, 

            Package (0x06)
            {
                0x00000729, 
                0x00001611, 
                0x0000000A, 
                0x0000000A, 
                0x0000163D, 
                0x0000163D
            }, 

            Package (0x06)
            {
                0x00000682, 
                0x00001398, 
                0x0000000A, 
                0x0000000A, 
                0x0000143A, 
                0x0000143A
            }, 

            Package (0x06)
            {
                0x000005DB, 
                0x0000113C, 
                0x0000000A, 
                0x0000000A, 
                0x00001237, 
                0x00001237
            }, 

            Package (0x06)
            {
                0x00000535, 
                0x00000EF3, 
                0x0000000A, 
                0x0000000A, 
                0x00001033, 
                0x00001033
            }, 

            Package (0x06)
            {
                0x0000048E, 
                0x00000CC4, 
                0x0000000A, 
                0x0000000A, 
                0x00000E30, 
                0x00000E30
            }, 

            Package (0x06)
            {
                0x000003E7, 
                0x00000AAD, 
                0x0000000A, 
                0x0000000A, 
                0x00000C2D, 
                0x00000C2D
            }, 

            Package (0x06)
            {
                0x00000341, 
                0x000008AC, 
                0x0000000A, 
                0x0000000A, 
                0x00000A29, 
                0x00000A29
            }, 

            Package (0x06)
            {
                0x0000029A, 
                0x000006C1, 
                0x0000000A, 
                0x0000000A, 
                0x00000826, 
                0x00000826
            }, 

            Package (0x06)
            {
                0x000001F3, 
                0x000004EF, 
                0x0000000A, 
                0x0000000A, 
                0x00000622, 
                0x00000622
            }
        })
        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x01, 
                0x0001, 
                0x000003E8
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000051, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x01F4, 
                0x0000000A
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000052, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x05DC, 
                0x00000001
            }
        })
        Name (_TSD, Package (0x01)  // _TSD: Throttling State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FC, 
                0x00000002
            }
        })
        Name (_PTC, Package (0x02)  // _PTC: Processor Throttling Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (\TLVL) /* External reference */
        }

        Name (_TSS, Package (0x08)  // _TSS: Throttling Supported States
        {
            Package (0x05)
            {
                0x00000064, 
                0x000003E8, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000058, 
                0x0000036B, 
                0x00000000, 
                0x0000001E, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x0000004B, 
                0x000002EE, 
                0x00000000, 
                0x0000001C, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x0000003F, 
                0x00000271, 
                0x00000000, 
                0x0000001A, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000032, 
                0x000001F4, 
                0x00000000, 
                0x00000018, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000026, 
                0x00000177, 
                0x00000000, 
                0x00000016, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000019, 
                0x000000FA, 
                0x00000000, 
                0x00000014, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x0000000D, 
                0x0000007D, 
                0x00000000, 
                0x00000012, 
                0x00000000
            }
        })
    }

    Name (PPKG, Package (0x02)
    {
        \_SB.CP00, 
        \_SB.CP01
    })
    Method (\_SB.CNOT, 1, NotSerialized)
    {
        Notify (\_SB.CP00, Arg0)
        Notify (\_SB.CP01, Arg0)
    }

    Scope (\)
    {
        Name (TOLM, 0x80000000)
    }

    Scope (\_SB.PCI0.GFX0)
    {
        Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
        {
            Return (Package (0x03)
            {
                0x80010100, 
                0x80010240, 
                0x80010410
            })
        }

        Device (VGA0)
        {
            Name (_ADR, 0x00000100)  // _ADR: Address
            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                Return (0x1D)
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                Return (Zero)
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
            }
        }

        Device (TV0)
        {
            Name (_ADR, 0x00000240)  // _ADR: Address
            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                Return (0x1D)
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                Return (Zero)
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
            }
        }

        Device (LCD0)
        {
            Name (_ADR, 0x00000410)  // _ADR: Address
            Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
            {
                Return (^^XBCL) /* External reference */
            }

            Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
            {
                Return (^^XBQC) /* External reference */
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                Return (0x1D)
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                Return (Zero)
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
            }
        }
    }

    Scope (\_SB.PCI0)
    {
        Device (TPM)
        {
            Name (_HID, EisaId ("PNP0C31"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
                IO (Decode16,
                    0x0C31,             // Range Minimum
                    0x0C31,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
            })
            OperationRegion (PPOP, SystemMemory, 0x7AFFE6C0, 0x015A)
            Field (PPOP, AnyAcc, NoLock, Preserve)
            {
                Offset (0x100), 
                PPIN,   8, 
                PPIP,   32, 
                RESU,   32, 
                CMDR,   32, 
                OARG,   32, 
                LCMD,   32, 
                FRET,   32
            }

            Name (TPM2, Package (0x02)
            {
                0x00000000, 
                0x00000000
            })
            Name (TPM3, Package (0x03)
            {
                0x00000000, 
                0x00000000, 
                0x00000000
            })
            Method (FUNC, 1, Serialized)
            {
                ToInteger (Arg0, Local0)
                ToInteger (Arg1, Local1)
                If ((Local0 > 0x80))
                {
                    Return (Zero)
                }

                CreateByteField (PPOP, Local0, TPPF)
                ToInteger (TPPF, Local0)
                Return (Local0)
            }

            Method (FSUP, 2, NotSerialized)
            {
                ToInteger (Arg0, Local0)
                ToInteger (Arg1, Local1)
                If ((Local0 > 0x80))
                {
                    Return (Zero)
                }

                If ((Local1 == One))
                {
                    If ((Local0 == Zero))
                    {
                        Return (One)
                    }

                    If ((Local0 == One))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x02))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x03))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x04))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x05))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x06))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x07))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x08))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x09))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x0A))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x0B))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x0E))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x0F))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x10))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x15))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x16))
                    {
                        Return (One)
                    }
                }

                If ((Local1 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Return (One)
                    }

                    If ((Local0 == One))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x02))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x05))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x0E))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x11))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x12))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x15))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x16))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x17))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x18))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x19))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x1A))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x1B))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x1C))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x1D))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x1E))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x1F))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x20))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x21))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x22))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x60))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x61))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x62))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x63))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x64))
                    {
                        Return (One)
                    }

                    If ((Local0 == 0x65))
                    {
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ToBuffer (Arg0, Local0)
                If ((Local0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                {
                    ToInteger (Arg2, Local1)
                    If ((Local1 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }

                    If ((Local1 == One))
                    {
                        Return ("1.2")
                    }

                    If ((Local1 == 0x02))
                    {
                        ToInteger (Arg1, Local0)
                        If ((Local0 == One))
                        {
                            Local1 = ObjectType (Arg3)
                            If ((Local1 == 0x04))
                            {
                                Local2 = DerefOf (Arg3 [Zero])
                            }

                            Local1 = ObjectType (Arg3)
                            If ((Local1 == 0x03))
                            {
                                ToInteger (Arg3, Local2)
                            }

                            Local1 = ^FSUP (Local2, One)
                            If ((Local1 == Zero))
                            {
                                Local1 = ^FSUP (Local2, Zero)
                                If ((Local1 == One))
                                {
                                    Return (Zero)
                                }

                                Return (One)
                            }

                            ^CMDR = Local2
                            ^OARG = Zero
                            ^USER = Zero
                            Return (Zero)
                        }

                        Return (0x02)
                    }

                    If ((Local1 == 0x03))
                    {
                        Local0 = One
                        ^TPM3 [Zero] = Local0
                        ^TPM2 [Zero] = Local0
                        ToInteger (Arg1, Local0)
                        If ((Local0 == One))
                        {
                            Local1 = Zero
                            ^TPM2 [Zero] = Local1
                            ^TPM2 [One] = ^CMDR /* \_SB_.PCI0.TPM_.CMDR */
                            Return (^TPM2) /* \_SB_.PCI0.TPM_.TPM2 */
                        }

                        If ((Local0 == 0x02))
                        {
                            Local1 = Zero
                            ^TPM3 [Zero] = Local1
                            ^TPM3 [One] = ^CMDR /* \_SB_.PCI0.TPM_.CMDR */
                            ^TPM3 [0x02] = ^OARG /* \_SB_.PCI0.TPM_.OARG */
                            Return (^TPM3) /* \_SB_.PCI0.TPM_.TPM3 */
                        }

                        Return (^TPM3) /* \_SB_.PCI0.TPM_.TPM3 */
                    }

                    If ((Local1 == 0x04))
                    {
                        Return (0x02)
                    }

                    If ((Local1 == 0x05))
                    {
                        Local1 = One
                        ^TPM3 [Zero] = Local1
                        ToInteger (Arg1, Local0)
                        If ((Local0 == One))
                        {
                            Local1 = Zero
                            ^TPM3 [Zero] = Local1
                            ^TPM3 [One] = ^LCMD /* \_SB_.PCI0.TPM_.LCMD */
                            ^TPM3 [0x02] = ^RESU /* \_SB_.PCI0.TPM_.RESU */
                        }

                        Return (^TPM3) /* \_SB_.PCI0.TPM_.TPM3 */
                    }

                    If ((Local1 == 0x06))
                    {
                        Return (0x03)
                    }

                    If ((Local1 == 0x07))
                    {
                        ToInteger (Arg1, Local0)
                        Local1 = ObjectType (Arg3)
                        If ((Local1 == 0x04))
                        {
                            Local2 = DerefOf (Arg3 [Zero])
                        }

                        Local1 = ObjectType (Arg3)
                        If ((Local1 == 0x03))
                        {
                            ToInteger (Arg3, Local2)
                        }

                        Local1 = ^FSUP (Local2, One)
                        If ((Local1 == Zero))
                        {
                            Local1 = ^FSUP (Local2, Zero)
                            If ((Local1 == One))
                            {
                                Return (Zero)
                            }

                            Return (One)
                        }

                        Local1 = ObjectType (Arg3)
                        If ((Local1 == 0x03))
                        {
                            Local0 = One
                        }

                        If ((Local0 == One))
                        {
                            ^CMDR = Local2
                            ^OARG = Zero
                            Return (0x00)
                        }

                        If ((Local0 == 0x02))
                        {
                            ^CMDR = Local2
                            Local3 = DerefOf (Arg3 [One])
                            ^OARG = Local3
                            Return (0x00)
                        }

                        Return (0x02)
                    }

                    If ((Local1 == 0x08))
                    {
                        ToInteger (Arg1, Local0)
                        If ((Local0 == One))
                        {
                            Local2 = DerefOf (Arg3 [Zero])
                            Local1 = ^FSUP (Local2, One)
                            If ((Local1 == Zero))
                            {
                                Return (0x00)
                            }

                            If ((Local2 == Zero))
                            {
                                Return (0x04)
                            }

                            If ((Local2 == 0x12))
                            {
                                Return (0x04)
                            }

                            If ((Local2 == 0x14))
                            {
                                Return (0x04)
                            }

                            If ((Local2 == 0x10))
                            {
                                Return (0x04)
                            }

                            Return (0x03)
                        }

                        Return (Zero)
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                If ((Local0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
                {
                    ToInteger (Arg2, Local1)
                    If ((Local1 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }

                    If ((Local1 == One))
                    {
                        Return (0x00)
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



TCPA1
-----
[000h 0000 004h]                   Signature : "TCPA"    [Trusted Computing Platform Alliance Table]
[004h 0004 004h]                Table Length : 00000032
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : 89
[00Ah 0010 006h]                      Oem ID : "INTEL "
[010h 0016 008h]                Oem Table ID : "EDK2    "
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "    "
[020h 0032 004h]       Asl Compiler Revision : 01000013

[024h 0036 002h]              Platform Class : 0000
[026h 0038 004h]        Min Event Log Length : 00010000
[02Ah 0042 008h]           Event Log Address : 000000001F93B000

Raw Table Data: Length 50 (0x32)

    0000: 54 43 50 41 32 00 00 00 02 89 49 4E 54 45 4C 20  // TCPA2.....INTEL 
    0010: 45 44 4B 32 20 20 20 20 02 00 00 00 20 20 20 20  // EDK2    ....    
    0020: 13 00 00 01 00 00 00 00 01 00 00 B0 93 1F 00 00  // ................
    0030: 00 00                                            // ..


TCPA2
-----
[000h 0000 004h]                   Signature : "TCPA"    [Trusted Computing Platform Alliance Table]
[004h 0004 004h]                Table Length : 00000032
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : 6D
[00Ah 0010 006h]                      Oem ID : "COREv4"
[010h 0016 008h]                Oem Table ID : "COREBOOT"
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : "CORE"
[020h 0032 004h]       Asl Compiler Revision : 20230628

[024h 0036 002h]              Platform Class : 0000
[026h 0038 004h]        Min Event Log Length : 00010000
[02Ah 0042 008h]           Event Log Address : 000000007AF20000

Raw Table Data: Length 50 (0x32)

    0000: 54 43 50 41 32 00 00 00 02 6D 43 4F 52 45 76 34  // TCPA2....mCOREv4
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 28 06 23 20 00 00 00 00 01 00 00 00 F2 7A 00 00  // (.# .........z..
    0030: 00 00                                            // ..


