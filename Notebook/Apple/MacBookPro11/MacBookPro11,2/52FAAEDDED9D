
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20230628
Copyright (c) 2000 - 2023 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000032  0x01  "APPLE "  "SsdtS3  "  0x00001000  "INTL"   0x20100915
 02)  MCFG  0x0000003C  0x01  "APPLE "  "Apple00 "  0x00000001  "Loki"   0x0000005F
 03)  APIC  0x000000BC  0x02  "APPLE "  "Apple00 "  0x00000001  "Loki"   0x0000005F
 04)  ECDT  0x00000053  0x01  "APPLE "  "Apple00 "  0x00000001  "Loki"   0x0000005F
 05)  SSDT  0x00000024  0x01  "APPLE "  "SmcDppt "  0x00001000  "INTL"   0x20100915
 06)  SSDT  0x00000B83  0x01  "PmRef "  "CpuPm   "  0x00003000  "INTL"   0x20100915
 07)  DSDT  0x00006C21  0x03  "APPLE "  "MacBookP"  0x00110002  "INTL"   0x20100915
 08)  SSDT  0x000003E0  0x01  "APPLE "  "SaHdaCdc"  0x00001000  "INTL"   0x20100915
 09)  SBST  0x00000030  0x01  "APPLE "  "Apple00 "  0x00000001  "Loki"   0x0000005F
 10)  SSDT  0x00005CBF  0x01  "APPLE "  "TbtPEG10"  0x00001000  "INTL"   0x20100915
 11)  SSDT  0x00000688  0x01  "APPLE "  "SDUsbLpt"  0x00001000  "INTL"   0x20100915
 12)  DMAR  0x00000088  0x01  "APPLE "  "HSW     "  0x00000001  "AAPL"   0x00000001
 13)  FACP  0x000000F4  0x05  "APPLE "  "Apple00 "  0x00000000  "Loki"   0x0000005F
 14)  SSDT  0x0000010B  0x01  "APPLE "  "SataAhci"  0x00001000  "INTL"   0x20100915
 15)  SSDT  0x0000069C  0x01  "PmRef "  "Cpu0Ist "  0x00003000  "INTL"   0x20100915
 16)  HPET  0x00000038  0x01  "APPLE "  "Apple00 "  0x00000001  "Loki"   0x0000005F
 17)  SSDT  0x000000B8  0x01  "APPLE "  "Sdxc    "  0x00001000  "INTL"   0x20100915
 18)  FACS  0x00000040  0x01
 19)  SSDT  0x00000119  0x01  "PmRef "  "ApCst   "  0x00003000  "INTL"   0x20100915
 20)  SSDT  0x000004F0  0x01  "PmRef "  "Cpu0Cst "  0x00003001  "INTL"   0x20100915
 21)  SSDT  0x0000067C  0x01  "PmRef "  "ApIst   "  0x00003000  "INTL"   0x20100915

Found 21 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 000000BC
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : 41
[00Ah 0010 006h]                      Oem ID : "APPLE "
[010h 0016 008h]                Oem Table ID : "Apple00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "Loki"
[020h 0032 004h]       Asl Compiler Revision : 0000005F

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 01
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 02
[037h 0055 001h]               Local Apic ID : 02
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 00 [Processor Local APIC]
[03Dh 0061 001h]                      Length : 08
[03Eh 0062 001h]                Processor ID : 03
[03Fh 0063 001h]               Local Apic ID : 04
[040h 0064 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068 001h]               Subtable Type : 00 [Processor Local APIC]
[045h 0069 001h]                      Length : 08
[046h 0070 001h]                Processor ID : 04
[047h 0071 001h]               Local Apic ID : 06
[048h 0072 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076 001h]               Subtable Type : 00 [Processor Local APIC]
[04Dh 0077 001h]                      Length : 08
[04Eh 0078 001h]                Processor ID : 05
[04Fh 0079 001h]               Local Apic ID : 01
[050h 0080 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084 001h]               Subtable Type : 00 [Processor Local APIC]
[055h 0085 001h]                      Length : 08
[056h 0086 001h]                Processor ID : 06
[057h 0087 001h]               Local Apic ID : 03
[058h 0088 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092 001h]               Subtable Type : 00 [Processor Local APIC]
[05Dh 0093 001h]                      Length : 08
[05Eh 0094 001h]                Processor ID : 07
[05Fh 0095 001h]               Local Apic ID : 05
[060h 0096 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100 001h]               Subtable Type : 00 [Processor Local APIC]
[065h 0101 001h]                      Length : 08
[066h 0102 001h]                Processor ID : 08
[067h 0103 001h]               Local Apic ID : 07
[068h 0104 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108 001h]               Subtable Type : 01 [I/O APIC]
[06Dh 0109 001h]                      Length : 0C
[06Eh 0110 001h]                 I/O Apic ID : 02
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]                     Address : FEC00000
[074h 0116 004h]                   Interrupt : 00000000

[078h 0120 001h]               Subtable Type : 02 [Interrupt Source Override]
[079h 0121 001h]                      Length : 0A
[07Ah 0122 001h]                         Bus : 00
[07Bh 0123 001h]                      Source : 00
[07Ch 0124 004h]                   Interrupt : 00000002
[080h 0128 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[082h 0130 001h]               Subtable Type : 02 [Interrupt Source Override]
[083h 0131 001h]                      Length : 0A
[084h 0132 001h]                         Bus : 00
[085h 0133 001h]                      Source : 09
[086h 0134 004h]                   Interrupt : 00000009
[08Ah 0138 002h]       Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[08Ch 0140 001h]               Subtable Type : 04 [Local APIC NMI]
[08Dh 0141 001h]                      Length : 06
[08Eh 0142 001h]                Processor ID : 01
[08Fh 0143 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[091h 0145 001h]        Interrupt Input LINT : 01

[092h 0146 001h]               Subtable Type : 04 [Local APIC NMI]
[093h 0147 001h]                      Length : 06
[094h 0148 001h]                Processor ID : 02
[095h 0149 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[097h 0151 001h]        Interrupt Input LINT : 01

[098h 0152 001h]               Subtable Type : 04 [Local APIC NMI]
[099h 0153 001h]                      Length : 06
[09Ah 0154 001h]                Processor ID : 03
[09Bh 0155 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[09Dh 0157 001h]        Interrupt Input LINT : 01

[09Eh 0158 001h]               Subtable Type : 04 [Local APIC NMI]
[09Fh 0159 001h]                      Length : 06
[0A0h 0160 001h]                Processor ID : 04
[0A1h 0161 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0A3h 0163 001h]        Interrupt Input LINT : 01

[0A4h 0164 001h]               Subtable Type : 04 [Local APIC NMI]
[0A5h 0165 001h]                      Length : 06
[0A6h 0166 001h]                Processor ID : 05
[0A7h 0167 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0A9h 0169 001h]        Interrupt Input LINT : 01

[0AAh 0170 001h]               Subtable Type : 04 [Local APIC NMI]
[0ABh 0171 001h]                      Length : 06
[0ACh 0172 001h]                Processor ID : 06
[0ADh 0173 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0AFh 0175 001h]        Interrupt Input LINT : 01

[0B0h 0176 001h]               Subtable Type : 04 [Local APIC NMI]
[0B1h 0177 001h]                      Length : 06
[0B2h 0178 001h]                Processor ID : 07
[0B3h 0179 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0B5h 0181 001h]        Interrupt Input LINT : 01

[0B6h 0182 001h]               Subtable Type : 04 [Local APIC NMI]
[0B7h 0183 001h]                      Length : 06
[0B8h 0184 001h]                Processor ID : 08
[0B9h 0185 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0BBh 0187 001h]        Interrupt Input LINT : 01

Raw Table Data: Length 188 (0xBC)

    0000: 41 50 49 43 BC 00 00 00 02 41 41 50 50 4C 45 20  // APIC.....AAPPLE 
    0010: 41 70 70 6C 65 30 30 00 01 00 00 00 4C 6F 6B 69  // Apple00.....Loki
    0020: 5F 00 00 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // _...............
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 03 04  // ................
    0040: 01 00 00 00 00 08 04 06 01 00 00 00 00 08 05 01  // ................
    0050: 01 00 00 00 00 08 06 03 01 00 00 00 00 08 07 05  // ................
    0060: 01 00 00 00 00 08 08 07 01 00 00 00 01 0C 02 00  // ................
    0070: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0080: 00 00 02 0A 00 09 09 00 00 00 0D 00 04 06 01 05  // ................
    0090: 00 01 04 06 02 05 00 01 04 06 03 05 00 01 04 06  // ................
    00A0: 04 05 00 01 04 06 05 05 00 01 04 06 06 05 00 01  // ................
    00B0: 04 06 07 05 00 01 04 06 08 05 00 01              // ............


DMAR
----
[000h 0000 004h]                   Signature : "DMAR"    [DMA Remapping Table]
[004h 0004 004h]                Table Length : 00000088
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : FC
[00Ah 0010 006h]                      Oem ID : "APPLE "
[010h 0016 008h]                Oem Table ID : "HSW "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AAPL"
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 001h]          Host Address Width : 26
[025h 0037 001h]                       Flags : 01
[026h 0038 00Ah]                    Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050 002h]                      Length : 0018

[034h 0052 001h]                       Flags : 00
[035h 0053 001h]                    Reserved : 00
[036h 0054 002h]          PCI Segment Number : 0000
[038h 0056 008h]       Register Base Address : 00000000FED90000

[040h 0064 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[041h 0065 001h]                Entry Length : 08
[042h 0066 002h]                    Reserved : 0000
[044h 0068 001h]              Enumeration ID : 00
[045h 0069 001h]              PCI Bus Number : 00

[046h 0070 002h]                    PCI Path : 02,00


[048h 0072 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[04Ah 0074 002h]                      Length : 0020

[04Ch 0076 001h]                       Flags : 01
[04Dh 0077 001h]                    Reserved : 00
[04Eh 0078 002h]          PCI Segment Number : 0000
[050h 0080 008h]       Register Base Address : 00000000FED91000

[058h 0088 001h]           Device Scope Type : 03 [IOAPIC Device]
[059h 0089 001h]                Entry Length : 08
[05Ah 0090 002h]                    Reserved : 0000
[05Ch 0092 001h]              Enumeration ID : 02
[05Dh 0093 001h]              PCI Bus Number : F0

[05Eh 0094 002h]                    PCI Path : 1F,00


[060h 0096 001h]           Device Scope Type : 04 [Message-capable HPET Device]
[061h 0097 001h]                Entry Length : 08
[062h 0098 002h]                    Reserved : 0000
[064h 0100 001h]              Enumeration ID : 00
[065h 0101 001h]              PCI Bus Number : F0

[066h 0102 002h]                    PCI Path : 0F,00


[068h 0104 002h]               Subtable Type : 0001 [Reserved Memory Region]
[06Ah 0106 002h]                      Length : 0020

[06Ch 0108 002h]                    Reserved : 0000
[06Eh 0110 002h]          PCI Segment Number : 0000
[070h 0112 008h]                Base Address : 000000007B800000
[078h 0120 008h]         End Address (limit) : 000000007F9FFFFF

[080h 0128 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[081h 0129 001h]                Entry Length : 08
[082h 0130 002h]                    Reserved : 0000
[084h 0132 001h]              Enumeration ID : 00
[085h 0133 001h]              PCI Bus Number : 00

[086h 0134 002h]                    PCI Path : 02,00


Raw Table Data: Length 136 (0x88)

    0000: 44 4D 41 52 88 00 00 00 01 FC 41 50 50 4C 45 20  // DMAR......APPLE 
    0010: 48 53 57 20 00 00 00 00 01 00 00 00 41 41 50 4C  // HSW ........AAPL
    0020: 01 00 00 00 26 01 00 00 00 00 00 00 00 00 00 00  // ....&...........
    0030: 00 00 18 00 00 00 00 00 00 00 D9 FE 00 00 00 00  // ................
    0040: 01 08 00 00 00 00 02 00 00 00 20 00 01 00 00 00  // .......... .....
    0050: 00 10 D9 FE 00 00 00 00 03 08 00 00 02 F0 1F 00  // ................
    0060: 04 08 00 00 00 F0 0F 00 01 00 20 00 00 00 00 00  // .......... .....
    0070: 00 00 80 7B 00 00 00 00 FF FF 9F 7F 00 00 00 00  // ...{............
    0080: 01 08 00 00 00 00 02 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 3, "APPLE ", "MacBookP", 0x00110002)
{
    /*
     * iASL Warning: There were 11 external control methods found during
     * disassembly, but only 0 were resolved (11 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.DTBP, UnknownObj)
    External (_SB_.PCI0.DTLK, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.HDAU.AINI, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.HDAU.ASTR, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.HDAU.CXDC, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.P0P2.GFX0, UnknownObj)
    External (_SB_.PCI0.RMCR, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.RMCW, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.TGPE, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.UTLK, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.XHC1, UnknownObj)
    External (_SB_.PCI0.XHC1.LEGM, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (HDOS, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (HNOT, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (P2TR, UnknownObj)
    External (PDC0, UnknownObj)
    External (PDC1, UnknownObj)
    External (PDC2, UnknownObj)
    External (PDC3, UnknownObj)
    External (PDC4, UnknownObj)
    External (PDC5, UnknownObj)
    External (PDC6, UnknownObj)
    External (PDC7, UnknownObj)
    External (T2PR, IntObj)

    Name (SP2O, 0x4E)
    Name (SP1O, 0x164E)
    Name (IO1B, 0x0600)
    Name (IO1L, 0x70)
    Name (IO2B, 0x0680)
    Name (IO2L, 0x20)
    Name (IO3B, 0x0290)
    Name (IO3L, 0x10)
    Name (SP3O, 0x2E)
    Name (IO4B, 0x0A20)
    Name (IO4L, 0x20)
    Name (MCHB, 0xFED10000)
    Name (MCHL, 0x4000)
    Name (EGPB, 0xFED19000)
    Name (EGPL, 0x1000)
    Name (DMIB, 0xFED18000)
    Name (DMIL, 0x1000)
    Name (IFPB, 0xFED14000)
    Name (IFPL, 0x1000)
    Name (PEBS, 0xE0000000)
    Name (PELN, 0x04000000)
    Name (TTTB, 0xFED20000)
    Name (TTTL, 0x00020000)
    Name (SMBS, 0xEFA0)
    Name (SMBL, 0x10)
    Name (PBLK, 0x1810)
    Name (PMLN, 0x80)
    Name (LVL2, 0x1814)
    Name (LVL3, 0x1815)
    Name (LVL4, 0x1816)
    Name (SMIP, 0xB2)
    Name (GPBS, 0x0800)
    Name (GPLN, 0x80)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (PM30, 0x1830)
    Name (SRCB, 0xFED1C000)
    Name (SRCL, 0x4000)
    Name (SUSW, 0xFF)
    Name (HPTB, 0xFED00000)
    Name (HPTC, 0xFED1C404)
    Name (ACPH, 0xDE)
    Name (ASSB, 0x00)
    Name (AOTB, 0x00)
    Name (AAXB, 0x00)
    Name (PEHP, 0x01)
    Name (SHPC, 0x01)
    Name (PEPM, 0x01)
    Name (PEER, 0x01)
    Name (PECS, 0x01)
    Name (ITKE, 0x00)
    Name (DSSP, 0x00)
    Name (FHPP, 0x01)
    Name (FMBL, 0x01)
    Name (FDTP, 0x02)
    Name (BSH, 0x00)
    Name (BEL, 0x01)
    Name (BEH, 0x02)
    Name (BRH, 0x03)
    Name (BTF, 0x04)
    Name (BHC, 0x05)
    Name (BYB, 0x06)
    Name (BPH, 0x07)
    Name (BSHS, 0x08)
    Name (BELS, 0x09)
    Name (BRHS, 0x0A)
    Name (BTFS, 0x0B)
    Name (BEHS, 0x0C)
    Name (BPHS, 0x0D)
    Name (BTL, 0x10)
    Name (BOF, 0x20)
    Name (BEF, 0x21)
    Name (BLLE, 0x22)
    Name (BLLC, 0x23)
    Name (BLCA, 0x24)
    Name (TCGM, 0x01)
    Name (TRTP, 0x01)
    Name (TRTD, 0x02)
    Name (TRTI, 0x03)
    Name (GCDD, 0x01)
    Name (DSTA, 0x0A)
    Name (DSLO, 0x0C)
    Name (DSLC, 0x0E)
    Name (PITS, 0x10)
    Name (SBCS, 0x12)
    Name (SALS, 0x13)
    Name (LSSS, 0x2A)
    Name (SOOT, 0x35)
    Name (PDBR, 0x4D)
    Name (WOWE, 0x00)
    Name (TAPD, 0x00)
    OperationRegion (GNVS, SystemMemory, 0x7AD3AA90, 0x026E)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        P80D,   32, 
        LIDS,   8, 
        PWRS,   8, 
        DBGS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
        Offset (0x25), 
        REVN,   8, 
        Offset (0x28), 
        APIC,   8, 
        TCNT,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        C67L,   8, 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        CMCP,   8, 
        CIRP,   8, 
        SMSC,   8, 
        W381,   8, 
        SMC1,   8, 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        Offset (0x42), 
        MEFE,   8, 
        DSTS,   8, 
        Offset (0x46), 
        TPMP,   8, 
        TPME,   8, 
        MORD,   8, 
        TCGP,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        GTF0,   56, 
        GTF2,   56, 
        IDEM,   8, 
        GTF1,   56, 
        BDID,   8, 
        Offset (0x78), 
        OSCC,   8, 
        NEXP,   8, 
        SDGV,   8, 
        SDDV,   8, 
        Offset (0x81), 
        DSEN,   8, 
        ECON,   8, 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        ATMC,   8, 
        PTMC,   8, 
        ATRA,   8, 
        PTRA,   8, 
        PNHM,   32, 
        TBAB,   32, 
        TBAH,   32, 
        RTIP,   8, 
        TSOD,   8, 
        ATPC,   8, 
        PTPC,   8, 
        PFLV,   8, 
        BREV,   8, 
        DPBM,   8, 
        DPCM,   8, 
        DPDM,   8, 
        SDID,   8, 
        BLCP,   8, 
        BLCC,   8, 
        Offset (0xA5), 
        BLCT,   32, 
        BLCB,   32, 
        Offset (0xB2), 
        NHIB,   32, 
        Offset (0xBA), 
        GVNV,   32, 
        MM64,   8, 
        Offset (0x12C), 
        SARV,   32, 
        ASLB,   32, 
        IMON,   8, 
        IGDS,   8, 
        CADL,   8, 
        PADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        DID9,   32, 
        DIDA,   32, 
        DIDB,   32, 
        IBTT,   8, 
        IPAT,   8, 
        IPSC,   8, 
        IBLC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        IPCF,   8, 
        IDMS,   8, 
        IF1E,   8, 
        HVCO,   8, 
        NXD1,   32, 
        NXD2,   32, 
        NXD3,   32, 
        NXD4,   32, 
        NXD5,   32, 
        NXD6,   32, 
        NXD7,   32, 
        NXD8,   32, 
        GSMI,   8, 
        PAVP,   8, 
        GLID,   8, 
        KSV0,   32, 
        KSV1,   8, 
        BBAR,   32, 
        BLCS,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        ALFP,   8, 
        AUDA,   32, 
        AUDB,   32, 
        AUDC,   32, 
        DIDC,   32, 
        DIDD,   32, 
        DIDE,   32, 
        DIDF,   32, 
        CADR,   32, 
        CCNT,   8, 
        Offset (0x1F4), 
        SGMD,   8, 
        SGFL,   8, 
        PWOK,   8, 
        HLRS,   8, 
        PWEN,   8, 
        PRST,   8, 
        CPSP,   32, 
        EECP,   8, 
        EVCP,   16, 
        XBAS,   32, 
        GBAS,   16, 
        SGGP,   8, 
        NVGA,   32, 
        NVHA,   32, 
        AMDA,   32, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        OBS1,   32, 
        OBS2,   32, 
        OBS3,   32, 
        OBS4,   32, 
        OBS5,   32, 
        OBS6,   32, 
        OBS7,   32, 
        OBS8,   32, 
        LTRA,   8, 
        OBFA,   8, 
        LTRB,   8, 
        OBFB,   8, 
        LTRC,   8, 
        OBFC,   8, 
        SMSL,   16, 
        SNSL,   16, 
        P0UB,   8, 
        P1UB,   8, 
        P2UB,   8, 
        EDPV,   8, 
        NXDX,   32, 
        DIDX,   32, 
        PCSL,   8, 
        SC7A,   8, 
        USBO,   8
    }

    Scope (\_SB)
    {
        Name (PR00, Package (0x1E)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                LNKF, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                LNKG, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x00, 
                LNKH, 
                0x00
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x01, 
                LNKF, 
                0x00
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                LNKG, 
                0x00
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x00, 
                LNKE, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x00, 
                LNKE, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }
        })
        Name (AR00, Package (0x1E)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                0x00, 
                0x15
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                0x00, 
                0x16
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x00, 
                0x00, 
                0x17
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x01, 
                0x00, 
                0x15
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                0x00, 
                0x16
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x00, 
                0x00, 
                0x14
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x00, 
                0x00, 
                0x14
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x10
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                0x00
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x12
            }
        })
        Name (PR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                0x00
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x12
            }
        })
        Name (PR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                0x00
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x12
            }
        })
        Name (PR01, Package (0x0C)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKF, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKG, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKG, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKF, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKE, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKH, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                LNKE, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKG, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKF, 
                0x00
            }
        })
        Name (AR01, Package (0x0C)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x15
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x16
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x17
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x14
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x16
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x15
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x14
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x17
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                0x00, 
                0x14
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                0x00, 
                0x16
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                0x00, 
                0x15
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,7,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (0x00)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00 ())
                }

                Return (PR00 ())
            }

            OperationRegion (HBUS, PCI_Config, 0x00, 0x0100)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                Offset (0x48), 
                MHEN,   1, 
                    ,   14, 
                MHBR,   17, 
                Offset (0x50), 
                GCLK,   1, 
                Offset (0x54), 
                D0EN,   1, 
                Offset (0x60), 
                PXEN,   1, 
                PXSZ,   2, 
                    ,   23, 
                PXBR,   6, 
                Offset (0x68), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                Offset (0x70), 
                    ,   20, 
                MEBR,   12, 
                Offset (0x80), 
                    ,   4, 
                PM0H,   2, 
                Offset (0x81), 
                PM1L,   2, 
                    ,   2, 
                PM1H,   2, 
                Offset (0x82), 
                PM2L,   2, 
                    ,   2, 
                PM2H,   2, 
                Offset (0x83), 
                PM3L,   2, 
                    ,   2, 
                PM3H,   2, 
                Offset (0x84), 
                PM4L,   2, 
                    ,   2, 
                PM4H,   2, 
                Offset (0x85), 
                PM5L,   2, 
                    ,   2, 
                PM5H,   2, 
                Offset (0x86), 
                PM6L,   2, 
                    ,   2, 
                PM6H,   2, 
                Offset (0x87), 
                Offset (0xA8), 
                    ,   20, 
                TUUD,   19, 
                Offset (0xBC), 
                    ,   20, 
                TLUD,   12, 
                Offset (0xC8), 
                    ,   7, 
                HTSE,   1
            }

            OperationRegion (MCHT, SystemMemory, 0xFED10000, 0x6000)
            Field (MCHT, ByteAcc, NoLock, Preserve)
            {
                Offset (0x5994), 
                RPSL,   8, 
                Offset (0x5998), 
                RP0C,   8, 
                RP1C,   8, 
                RPNC,   8
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xFEAFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFEB00000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED40000,         // Range Minimum
                    0xFED44FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00005000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y00._LEN, C0LN)  // _LEN: Length
                    C0LN = Zero
                }

                If ((PM1L == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y00._RW, C0RW)  // _RW_: Read-Write Status
                    C0RW = Zero
                }

                If (PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y01._LEN, C4LN)  // _LEN: Length
                    C4LN = Zero
                }

                If ((PM1H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y01._RW, C4RW)  // _RW_: Read-Write Status
                    C4RW = Zero
                }

                If (PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y02._LEN, C8LN)  // _LEN: Length
                    C8LN = Zero
                }

                If ((PM2L == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y02._RW, C8RW)  // _RW_: Read-Write Status
                    C8RW = Zero
                }

                If (PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y03._LEN, CCLN)  // _LEN: Length
                    CCLN = Zero
                }

                If ((PM2H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y03._RW, CCRW)  // _RW_: Read-Write Status
                    CCRW = Zero
                }

                If (PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y04._LEN, D0LN)  // _LEN: Length
                    D0LN = Zero
                }

                If ((PM3L == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y04._RW, D0RW)  // _RW_: Read-Write Status
                    D0RW = Zero
                }

                If (PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y05._LEN, D4LN)  // _LEN: Length
                    D4LN = Zero
                }

                If ((PM3H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y05._RW, D4RW)  // _RW_: Read-Write Status
                    D4RW = Zero
                }

                If (PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y06._LEN, D8LN)  // _LEN: Length
                    D8LN = Zero
                }

                If ((PM4L == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y06._RW, D8RW)  // _RW_: Read-Write Status
                    D8RW = Zero
                }

                If (PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y07._LEN, DCLN)  // _LEN: Length
                    DCLN = Zero
                }

                If ((PM4H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y07._RW, DCRW)  // _RW_: Read-Write Status
                    DCRW = Zero
                }

                If (PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y08._LEN, E0LN)  // _LEN: Length
                    E0LN = Zero
                }

                If ((PM5L == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y08._RW, E0RW)  // _RW_: Read-Write Status
                    E0RW = Zero
                }

                If (PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y09._LEN, E4LN)  // _LEN: Length
                    E4LN = Zero
                }

                If ((PM5H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y09._RW, E4RW)  // _RW_: Read-Write Status
                    E4RW = Zero
                }

                If (PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0A._LEN, E8LN)  // _LEN: Length
                    E8LN = Zero
                }

                If ((PM6L == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0A._RW, E8RW)  // _RW_: Read-Write Status
                    E8RW = Zero
                }

                If (PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0B._LEN, ECLN)  // _LEN: Length
                    ECLN = Zero
                }

                If ((PM6H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0B._RW, ECRW)  // _RW_: Read-Write Status
                    ECRW = Zero
                }

                If (PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0C._LEN, F0LN)  // _LEN: Length
                    F0LN = Zero
                }

                If ((PM0H == 0x01))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0C._RW, F0RW)  // _RW_: Read-Write Status
                    F0RW = Zero
                }

                CreateDWordField (BUF0, \_SB.PCI0._Y0D._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0D._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0D._LEN, M1LN)  // _LEN: Length
                M1MN = (TLUD << 0x14)
                M1LN = ((M1MX - M1MN) + 0x01)
                Return (BUF0) /* \_SB_.PCI0.BUF0 */
            }

            Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg3
                CreateDWordField (Local0, 0x00, CDW1)
                CreateDWordField (Local0, 0x04, CDW2)
                CreateDWordField (Local0, 0x08, CDW3)
                SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                If ((0x01 == OSDW ()))
                {
                    If (((Arg0 == GUID) && NEXP))
                    {
                        If (~(CDW1 & 0x01))
                        {
                            If ((CTRL & 0x02))
                            {
                                NHPG ()
                            }

                            If ((CTRL & 0x04))
                            {
                                NPME ()
                            }
                        }

                        If ((Arg1 != One))
                        {
                            CDW1 |= 0x08
                        }

                        If ((CDW3 != CTRL))
                        {
                            CDW1 |= 0x10
                        }

                        CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                        OSCC = CTRL /* \_SB_.PCI0.CTRL */
                        Return (Local0)
                    }
                    Else
                    {
                        CDW1 |= 0x04
                        Return (Local0)
                    }
                }
                Else
                {
                    If ((Arg0 == GUID))
                    {
                        If ((\_SB.PCI0.DTBP == 0x01))
                        {
                            CDW3 &= 0xFFFFFFFB
                        }
                    }

                    Return (Local0)
                }
            }

            Scope (\_SB.PCI0)
            {
                Method (AR00, 0, NotSerialized)
                {
                    Return (\_SB.AR00)
                }

                Method (PR00, 0, NotSerialized)
                {
                    Return (\_SB.PR00)
                }

                Method (AR01, 0, NotSerialized)
                {
                    Return (\_SB.AR01)
                }

                Method (PR01, 0, NotSerialized)
                {
                    Return (\_SB.PR01)
                }

                Method (AR02, 0, NotSerialized)
                {
                    Return (\_SB.AR02)
                }

                Method (PR02, 0, NotSerialized)
                {
                    Return (\_SB.PR02)
                }

                Method (AR04, 0, NotSerialized)
                {
                    Return (\_SB.AR04)
                }

                Method (PR04, 0, NotSerialized)
                {
                    Return (\_SB.PR04)
                }

                Method (AR05, 0, NotSerialized)
                {
                    Return (\_SB.AR05)
                }

                Method (PR05, 0, NotSerialized)
                {
                    Return (\_SB.PR05)
                }

                Method (AR06, 0, NotSerialized)
                {
                    Return (\_SB.AR06)
                }

                Method (PR06, 0, NotSerialized)
                {
                    Return (\_SB.PR06)
                }

                Method (AR07, 0, NotSerialized)
                {
                    Return (\_SB.AR07)
                }

                Method (PR07, 0, NotSerialized)
                {
                    Return (\_SB.PR07)
                }

                Method (AR08, 0, NotSerialized)
                {
                    Return (\_SB.AR08)
                }

                Method (PR08, 0, NotSerialized)
                {
                    Return (\_SB.PR08)
                }

                Method (AR09, 0, NotSerialized)
                {
                    Return (\_SB.AR09)
                }

                Method (PR09, 0, NotSerialized)
                {
                    Return (\_SB.PR09)
                }

                Method (AR0A, 0, NotSerialized)
                {
                    Return (\_SB.AR0A)
                }

                Method (PR0A, 0, NotSerialized)
                {
                    Return (\_SB.PR0A)
                }

                Method (AR0B, 0, NotSerialized)
                {
                    Return (\_SB.AR0B)
                }

                Method (PR0B, 0, NotSerialized)
                {
                    Return (\_SB.PR0B)
                }
            }

            Device (MCHC)
            {
                Name (_ADR, 0x00)  // _ADR: Address
            }

            Device (P0P2)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (OSDW ())
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x03
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x03
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02 ())
                    }

                    Return (PR02 ())
                }
            }

            Device (PEG1)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (OSDW ())
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x03
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x03
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A ())
                    }

                    Return (PR0A ())
                }
            }

            Device (IGPU)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (GFXH, PCI_Config, 0x00, 0x40)
                Field (GFXH, ByteAcc, NoLock, Preserve)
                {
                    VID0,   16, 
                    DID0,   16
                }

                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("a0b5b7c6-1318-441c-b0c9-fe695eaf949b") /* Unknown UUID */))
                    {
                        If (((VID0 & 0xFFFF) != 0xFFFF))
                        {
                            Local0 = Package (0x02)
                                {
                                    "hda-gfx", 
                                    Buffer (0x0A)
                                    {
                                        "onboard-1"
                                    }
                                }
                            DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))
                            Return (Local0)
                        }
                    }

                    Return (0x00)
                }

                Method (PCPC, 0, NotSerialized)
                {
                }

                Method (PAPR, 0, NotSerialized)
                {
                    Return (0x00)
                }

                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    DSEN = (Arg0 & 0x07)
                    If (((Arg0 & 0x03) == 0x00))
                    {
                        If (CondRefOf (HDOS))
                        {
                            HDOS ()
                        }
                    }
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    If (CondRefOf (IDAB)){}
                    Else
                    {
                        NDID = 0x00
                        If ((DIDL != Zero))
                        {
                            DID1 = SDDL (DIDL)
                        }

                        If ((DDL2 != Zero))
                        {
                            DID2 = SDDL (DDL2)
                        }

                        If ((DDL3 != Zero))
                        {
                            DID3 = SDDL (DDL3)
                        }

                        If ((DDL4 != Zero))
                        {
                            DID4 = SDDL (DDL4)
                        }

                        If ((DDL5 != Zero))
                        {
                            DID5 = SDDL (DDL5)
                        }

                        If ((DDL6 != Zero))
                        {
                            DID6 = SDDL (DDL6)
                        }

                        If ((DDL7 != Zero))
                        {
                            DID7 = SDDL (DDL7)
                        }

                        If ((DDL8 != Zero))
                        {
                            DID8 = SDDL (DDL8)
                        }
                    }

                    If ((NDID == 0x01))
                    {
                        Name (TMP1, Package (0x01)
                        {
                            0xFFFFFFFF
                        })
                        TMP1 [0x00] = (0x00010000 | DID1)
                        Return (TMP1) /* \_SB_.PCI0.IGPU._DOD.TMP1 */
                    }

                    If ((NDID == 0x02))
                    {
                        Name (TMP2, Package (0x02)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP2 [0x00] = (0x00010000 | DID1)
                        TMP2 [0x01] = (0x00010000 | DID2)
                        Return (TMP2) /* \_SB_.PCI0.IGPU._DOD.TMP2 */
                    }

                    If ((NDID == 0x03))
                    {
                        Name (TMP3, Package (0x03)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP3 [0x00] = (0x00010000 | DID1)
                        TMP3 [0x01] = (0x00010000 | DID2)
                        TMP3 [0x02] = (0x00010000 | DID3)
                        Return (TMP3) /* \_SB_.PCI0.IGPU._DOD.TMP3 */
                    }

                    If ((NDID == 0x04))
                    {
                        Name (TMP4, Package (0x04)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP4 [0x00] = (0x00010000 | DID1)
                        TMP4 [0x01] = (0x00010000 | DID2)
                        TMP4 [0x02] = (0x00010000 | DID3)
                        TMP4 [0x03] = (0x00010000 | DID4)
                        Return (TMP4) /* \_SB_.PCI0.IGPU._DOD.TMP4 */
                    }

                    If ((NDID == 0x05))
                    {
                        Name (TMP5, Package (0x05)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP5 [0x00] = (0x00010000 | DID1)
                        TMP5 [0x01] = (0x00010000 | DID2)
                        TMP5 [0x02] = (0x00010000 | DID3)
                        TMP5 [0x03] = (0x00010000 | DID4)
                        TMP5 [0x04] = (0x00010000 | DID5)
                        Return (TMP5) /* \_SB_.PCI0.IGPU._DOD.TMP5 */
                    }

                    If ((NDID == 0x06))
                    {
                        Name (TMP6, Package (0x06)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP6 [0x00] = (0x00010000 | DID1)
                        TMP6 [0x01] = (0x00010000 | DID2)
                        TMP6 [0x02] = (0x00010000 | DID3)
                        TMP6 [0x03] = (0x00010000 | DID4)
                        TMP6 [0x04] = (0x00010000 | DID5)
                        TMP6 [0x05] = (0x00010000 | DID6)
                        Return (TMP6) /* \_SB_.PCI0.IGPU._DOD.TMP6 */
                    }

                    If ((NDID == 0x07))
                    {
                        Name (TMP7, Package (0x07)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP7 [0x00] = (0x00010000 | DID1)
                        TMP7 [0x01] = (0x00010000 | DID2)
                        TMP7 [0x02] = (0x00010000 | DID3)
                        TMP7 [0x03] = (0x00010000 | DID4)
                        TMP7 [0x04] = (0x00010000 | DID5)
                        TMP7 [0x05] = (0x00010000 | DID6)
                        TMP7 [0x06] = (0x00010000 | DID7)
                        Return (TMP7) /* \_SB_.PCI0.IGPU._DOD.TMP7 */
                    }

                    If ((NDID == 0x08))
                    {
                        Name (TMP8, Package (0x08)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP8 [0x00] = (0x00010000 | DID1)
                        TMP8 [0x01] = (0x00010000 | DID2)
                        TMP8 [0x02] = (0x00010000 | DID3)
                        TMP8 [0x03] = (0x00010000 | DID4)
                        TMP8 [0x04] = (0x00010000 | DID5)
                        TMP8 [0x05] = (0x00010000 | DID6)
                        TMP8 [0x06] = (0x00010000 | DID7)
                        TMP8 [0x07] = (0x00010000 | DID8)
                        Return (TMP8) /* \_SB_.PCI0.IGPU._DOD.TMP8 */
                    }

                    Return (Package (0x01)
                    {
                        0x0400
                    })
                }

                Name (EDPV, 0x00)
                Name (DIDX, 0x00)
                Name (NXDX, 0x00)
                Name (BRTN, Package (0x12)
                {
                    0x50, 
                    0x2F, 
                    0x00, 
                    0x07, 
                    0x0D, 
                    0x14, 
                    0x1B, 
                    0x21, 
                    0x28, 
                    0x2F, 
                    0x35, 
                    0x3C, 
                    0x43, 
                    0x49, 
                    0x50, 
                    0x57, 
                    0x5D, 
                    0x64
                })
                Method (ABCL, 0, NotSerialized)
                {
                    If ((OSYS < 0x07DC))
                    {
                        BRTN [0x00] = DerefOf (BRTN [0x0F])
                        BRTN [0x01] = DerefOf (BRTN [0x0A])
                        Return (BRTN) /* \_SB_.PCI0.IGPU.BRTN */
                    }
                    Else
                    {
                        Return (Package (0x67)
                        {
                            0x50, 
                            0x32, 
                            0x00, 
                            0x01, 
                            0x02, 
                            0x03, 
                            0x04, 
                            0x05, 
                            0x06, 
                            0x07, 
                            0x08, 
                            0x09, 
                            0x0A, 
                            0x0B, 
                            0x0C, 
                            0x0D, 
                            0x0E, 
                            0x0F, 
                            0x10, 
                            0x11, 
                            0x12, 
                            0x13, 
                            0x14, 
                            0x15, 
                            0x16, 
                            0x17, 
                            0x18, 
                            0x19, 
                            0x1A, 
                            0x1B, 
                            0x1C, 
                            0x1D, 
                            0x1E, 
                            0x1F, 
                            0x20, 
                            0x21, 
                            0x22, 
                            0x23, 
                            0x24, 
                            0x25, 
                            0x26, 
                            0x27, 
                            0x28, 
                            0x29, 
                            0x2A, 
                            0x2B, 
                            0x2C, 
                            0x2D, 
                            0x2E, 
                            0x2F, 
                            0x30, 
                            0x31, 
                            0x32, 
                            0x33, 
                            0x34, 
                            0x35, 
                            0x36, 
                            0x37, 
                            0x38, 
                            0x39, 
                            0x3A, 
                            0x3B, 
                            0x3C, 
                            0x3D, 
                            0x3E, 
                            0x3F, 
                            0x40, 
                            0x41, 
                            0x42, 
                            0x43, 
                            0x44, 
                            0x45, 
                            0x46, 
                            0x47, 
                            0x48, 
                            0x49, 
                            0x4A, 
                            0x4B, 
                            0x4C, 
                            0x4D, 
                            0x4E, 
                            0x4F, 
                            0x50, 
                            0x51, 
                            0x52, 
                            0x53, 
                            0x54, 
                            0x55, 
                            0x56, 
                            0x57, 
                            0x58, 
                            0x59, 
                            0x5A, 
                            0x5B, 
                            0x5C, 
                            0x5D, 
                            0x5E, 
                            0x5F, 
                            0x60, 
                            0x61, 
                            0x62, 
                            0x63, 
                            0x64
                        })
                    }
                }

                Method (ABCM, 1, NotSerialized)
                {
                    If (((Arg0 >= 0x00) && (Arg0 <= 0x64)))
                    {
                        BRTL = Arg0
                        \_SB.PCI0.IGPU.AINT (0x01, Arg0)
                    }

                    Return (Zero)
                }

                Method (ABQC, 0, NotSerialized)
                {
                    Return (BRTL) /* \BRTL */
                }

                Device (DD01)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((0x0F00 & DID1) == 0x0302))
                        {
                            EDPV = 0x01
                            NXDX = NXD1 /* \NXD1 */
                            DIDX = DID1 /* \DID1 */
                            Return (0x01)
                        }

                        If ((DID1 == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID1))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (CDDS (DID1))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (CondRefOf (SNXD))
                        {
                            Return (NXD1) /* \NXD1 */
                        }

                        Return (NDDS (DID1))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }

                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        Return (\_SB.PCI0.IGPU.ABCL ())
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        \_SB.PCI0.IGPU.ABCM (Arg0)
                        Return (Zero)
                    }

                    Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                    {
                        Return (\_SB.PCI0.IGPU.ABQC ())
                    }
                }

                Device (DD02)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((0x0F00 & DID2) == 0x0302))
                        {
                            EDPV = 0x02
                            NXDX = NXD2 /* \NXD2 */
                            DIDX = DID2 /* \DID2 */
                            Return (0x02)
                        }

                        If ((DID2 == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID2))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((LIDS == 0x00))
                        {
                            Return (0x00)
                        }

                        Return (CDDS (DID2))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (CondRefOf (SNXD))
                        {
                            Return (NXD2) /* \NXD2 */
                        }

                        Return (NDDS (DID2))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD03)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((0x0F00 & DID3) == 0x0302))
                        {
                            EDPV = 0x03
                            NXDX = NXD3 /* \NXD3 */
                            DIDX = DID3 /* \DID3 */
                            Return (0x03)
                        }

                        If ((DID3 == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID3))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID3 == 0x00))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID3))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (CondRefOf (SNXD))
                        {
                            Return (NXD3) /* \NXD3 */
                        }

                        Return (NDDS (DID3))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD04)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((0x0F00 & DID4) == 0x0302))
                        {
                            EDPV = 0x04
                            NXDX = NXD4 /* \NXD4 */
                            DIDX = DID4 /* \DID4 */
                            Return (0x04)
                        }

                        If ((DID4 == 0x00))
                        {
                            Return (0x04)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID4))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID4 == 0x00))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID4))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (CondRefOf (SNXD))
                        {
                            Return (NXD4) /* \NXD4 */
                        }

                        Return (NDDS (DID4))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD05)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((0x0F00 & DID5) == 0x0302))
                        {
                            EDPV = 0x05
                            NXDX = NXD5 /* \NXD5 */
                            DIDX = DID5 /* \DID5 */
                            Return (0x05)
                        }

                        If ((DID5 == 0x00))
                        {
                            Return (0x05)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID5))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID5 == 0x00))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID5))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (CondRefOf (SNXD))
                        {
                            Return (NXD5) /* \NXD5 */
                        }

                        Return (NDDS (DID5))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD06)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((0x0F00 & DID6) == 0x0302))
                        {
                            EDPV = 0x06
                            NXDX = NXD6 /* \NXD6 */
                            DIDX = DID6 /* \DID6 */
                            Return (0x06)
                        }

                        If ((DID6 == 0x00))
                        {
                            Return (0x06)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID6))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID6 == 0x00))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID6))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (CondRefOf (SNXD))
                        {
                            Return (NXD6) /* \NXD6 */
                        }

                        Return (NDDS (DID6))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD07)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((0x0F00 & DID7) == 0x0302))
                        {
                            EDPV = 0x07
                            NXDX = NXD7 /* \NXD7 */
                            DIDX = DID7 /* \DID7 */
                            Return (0x07)
                        }

                        If ((DID7 == 0x00))
                        {
                            Return (0x07)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID7))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID7 == 0x00))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID7))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (CondRefOf (SNXD))
                        {
                            Return (NXD7) /* \NXD7 */
                        }

                        Return (NDDS (DID7))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD08)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((0x0F00 & DID8) == 0x0302))
                        {
                            EDPV = 0x08
                            NXDX = NXD8 /* \NXD8 */
                            DIDX = DID8 /* \DID8 */
                            Return (0x08)
                        }

                        If ((DID8 == 0x00))
                        {
                            Return (0x08)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID8))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID8 == 0x00))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID8))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (CondRefOf (SNXD))
                        {
                            Return (NXD8) /* \NXD8 */
                        }

                        Return (NDDS (DID8))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD1F)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((EDPV == 0x00))
                        {
                            Return (0x1F)
                        }
                        Else
                        {
                            Return ((0xFFFF & DIDX))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((EDPV == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Return (CDDS (DIDX))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (CondRefOf (SNXD))
                        {
                            Return (NXDX) /* \_SB_.PCI0.IGPU.NXDX */
                        }

                        Return (NDDS (DIDX))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Method (SDDL, 1, NotSerialized)
                {
                    NDID++
                    Local0 = (Arg0 & 0x0F0F)
                    Local1 = (0x80000000 | Local0)
                    If ((DIDL == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL2 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL3 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL4 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL5 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL6 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL7 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL8 == Local0))
                    {
                        Return (Local1)
                    }

                    Return (0x00)
                }

                Method (CDDS, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F0F)
                    If ((0x00 == Local0))
                    {
                        Return (0x1D)
                    }

                    If ((CADL == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL2 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL3 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL4 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL5 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL6 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL7 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL8 == Local0))
                    {
                        Return (0x1F)
                    }

                    Return (0x1D)
                }

                Method (NDDS, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F0F)
                    If ((0x00 == Local0))
                    {
                        Return (0x00)
                    }

                    If ((NADL == Local0))
                    {
                        Return (0x01)
                    }

                    If ((NDL2 == Local0))
                    {
                        Return (0x01)
                    }

                    If ((NDL3 == Local0))
                    {
                        Return (0x01)
                    }

                    If ((NDL4 == Local0))
                    {
                        Return (0x01)
                    }

                    If ((NDL5 == Local0))
                    {
                        Return (0x01)
                    }

                    If ((NDL6 == Local0))
                    {
                        Return (0x01)
                    }

                    If ((NDL7 == Local0))
                    {
                        Return (0x01)
                    }

                    If ((NDL8 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Scope (\_SB.PCI0)
                {
                    OperationRegion (MCHP, PCI_Config, 0x40, 0xC0)
                    Field (MCHP, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x14), 
                        AUDE,   8, 
                        Offset (0x60), 
                        TASM,   10, 
                        Offset (0x62)
                    }
                }

                OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
                Field (IGDP, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x12), 
                        ,   1, 
                    GIVD,   1, 
                        ,   2, 
                    GUMA,   3, 
                    Offset (0x14), 
                        ,   4, 
                    GMFN,   1, 
                    Offset (0x18), 
                    Offset (0xA4), 
                    ASLE,   8, 
                    Offset (0xA8), 
                    GSSE,   1, 
                    GSSB,   14, 
                    GSES,   1, 
                    Offset (0xB0), 
                        ,   12, 
                    CDVL,   1, 
                    Offset (0xB2), 
                    Offset (0xB5), 
                    LBPC,   8, 
                    Offset (0xBC), 
                    ASLS,   32
                }

                OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
                Field (IGDM, AnyAcc, NoLock, Preserve)
                {
                    SIGN,   128, 
                    SIZE,   32, 
                    OVER,   32, 
                    SVER,   256, 
                    VVER,   128, 
                    GVER,   128, 
                    MBOX,   32, 
                    DMOD,   32, 
                    Offset (0x100), 
                    DRDY,   32, 
                    CSTS,   32, 
                    CEVT,   32, 
                    Offset (0x120), 
                    DIDL,   32, 
                    DDL2,   32, 
                    DDL3,   32, 
                    DDL4,   32, 
                    DDL5,   32, 
                    DDL6,   32, 
                    DDL7,   32, 
                    DDL8,   32, 
                    CPDL,   32, 
                    CPL2,   32, 
                    CPL3,   32, 
                    CPL4,   32, 
                    CPL5,   32, 
                    CPL6,   32, 
                    CPL7,   32, 
                    CPL8,   32, 
                    CADL,   32, 
                    CAL2,   32, 
                    CAL3,   32, 
                    CAL4,   32, 
                    CAL5,   32, 
                    CAL6,   32, 
                    CAL7,   32, 
                    CAL8,   32, 
                    NADL,   32, 
                    NDL2,   32, 
                    NDL3,   32, 
                    NDL4,   32, 
                    NDL5,   32, 
                    NDL6,   32, 
                    NDL7,   32, 
                    NDL8,   32, 
                    ASLP,   32, 
                    TIDX,   32, 
                    CHPD,   32, 
                    CLID,   32, 
                    CDCK,   32, 
                    SXSW,   32, 
                    EVTS,   32, 
                    CNOT,   32, 
                    NRDY,   32, 
                    Offset (0x200), 
                    SCIE,   1, 
                    GEFC,   4, 
                    GXFC,   3, 
                    GESF,   8, 
                    Offset (0x204), 
                    PARM,   32, 
                    DSLP,   32, 
                    Offset (0x300), 
                    ARDY,   32, 
                    ASLC,   32, 
                    TCHE,   32, 
                    ALSI,   32, 
                    BCLP,   32, 
                    PFIT,   32, 
                    CBLV,   32, 
                    BCLM,   320, 
                    CPFM,   32, 
                    EPFM,   32, 
                    PLUT,   592, 
                    PFMB,   32, 
                    CCDV,   32, 
                    PCFT,   32, 
                    Offset (0x400), 
                    GVD1,   49152, 
                    PHED,   32, 
                    BDDC,   2048
                }

                Name (DBTB, Package (0x15)
                {
                    0x00, 
                    0x07, 
                    0x38, 
                    0x01C0, 
                    0x0E00, 
                    0x3F, 
                    0x01C7, 
                    0x0E07, 
                    0x01F8, 
                    0x0E38, 
                    0x0FC0, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x7000, 
                    0x7007, 
                    0x7038, 
                    0x71C0, 
                    0x7E00
                })
                Name (CDCT, Package (0x05)
                {
                    Package (0x02)
                    {
                        0xE4, 
                        0x0140
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }, 

                    Package (0x02)
                    {
                        0x00, 
                        0x00
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }
                })
                Name (SUCC, 0x01)
                Name (NVLD, 0x02)
                Name (CRIT, 0x04)
                Name (NCRT, 0x06)
                Method (GSCI, 0, Serialized)
                {
                    Method (GBDA, 0, Serialized)
                    {
                        If ((GESF == 0x00))
                        {
                            PARM = 0x00020000
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x01))
                        {
                            PARM = 0x00200000
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x04))
                        {
                            PARM &= 0xEFFF0000
                            PARM &= (DerefOf (DBTB [IBTT]) << 0x10)
                            PARM |= IBTT /* \_SB_.PCI0.IGPU.PARM */
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x05))
                        {
                            PARM = IPSC /* \IPSC */
                            PARM |= (IPAT << 0x08)
                            PARM += 0x0100
                            PARM |= (LIDS << 0x10)
                            PARM += 0x00010000
                            PARM |= (IBIA << 0x14)
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x06))
                        {
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x07))
                        {
                            PARM = GIVD /* \_SB_.PCI0.IGPU.GIVD */
                            PARM ^= 0x01
                            PARM |= (GMFN << 0x01)
                            PARM |= (0x03 << 0x0B)
                            PARM |= (IDMS << 0x11)
                            PARM |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                                0x15) /* \_SB_.PCI0.IGPU.PARM */
                            GESF = 0x01
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x0A))
                        {
                            PARM = 0x00
                            If (ISSC)
                            {
                                PARM |= 0x03
                            }

                            GESF = 0x00
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x0B))
                        {
                            PARM = KSV0 /* \KSV0 */
                            GESF = KSV1 /* \KSV1 */
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        GESF = Zero
                        Return (CRIT) /* \_SB_.PCI0.IGPU.CRIT */
                    }

                    Method (SBCB, 0, Serialized)
                    {
                        If ((GESF == 0x00))
                        {
                            PARM = 0x00
                            PARM = 0x00020000
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x01))
                        {
                            PARM = 0x00
                            GESF = Zero
                            PARM = 0x00200000
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x03))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x04))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x05))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x06))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x07))
                        {
                            If ((PARM == 0x00))
                            {
                                Local0 = CLID /* \_SB_.PCI0.IGPU.CLID */
                                If ((0x80000000 & Local0))
                                {
                                    CLID &= 0x0F
                                    GLID (CLID)
                                }
                            }

                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x08))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x09))
                        {
                            IBTT = (PARM & 0xFF)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x0A))
                        {
                            IPSC = (PARM & 0xFF)
                            If (((PARM >> 0x08) & 0xFF))
                            {
                                IPAT = ((PARM >> 0x08) & 0xFF)
                                IPAT--
                            }

                            IBIA = ((PARM >> 0x14) & 0x07)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x0B))
                        {
                            IF1E = ((PARM >> 0x01) & 0x01)
                            If ((PARM & (0x0F << 0x0D)))
                            {
                                IDMS = ((PARM >> 0x0D) & 0x0F)
                            }
                            Else
                            {
                                IDMS = ((PARM >> 0x11) & 0x0F)
                            }

                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x10))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x11))
                        {
                            PARM = (LIDS << 0x08)
                            PARM += 0x0100
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x12))
                        {
                            If ((PARM & 0x01))
                            {
                                If (((PARM >> 0x01) == 0x01))
                                {
                                    ISSC = 0x01
                                }
                                Else
                                {
                                    GESF = Zero
                                    Return (CRIT) /* \_SB_.PCI0.IGPU.CRIT */
                                }
                            }
                            Else
                            {
                                ISSC = 0x00
                            }

                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x13))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x14))
                        {
                            PAVP = (PARM & 0x0F)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        If ((GESF == 0x15))
                        {
                            If ((PARM == 0x01))
                            {
                                \_SB.PCI0.AUDE |= 0x20
                                \_SB.PCI0.HDAU.ASTR (\_SB.PCI0.HDAU.AINI (\_SB.PCI0.HDAU.CXDC ()), Notify (\_SB.PCI0, 0x00) // Bus Check)
                            }

                            If ((PARM == 0x00))
                            {
                                \_SB.PCI0.AUDE &= 0xDF
                                Notify (\_SB.PCI0, 0x00) // Bus Check
                            }

                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                        }

                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.IGPU.SUCC */
                    }

                    If ((GEFC == 0x04))
                    {
                        GXFC = GBDA ()
                    }

                    If ((GEFC == 0x06))
                    {
                        GXFC = SBCB ()
                    }

                    GEFC = 0x00
                    SCIS = 0x01
                    GSSE = 0x00
                    SCIE = 0x00
                    Return (Zero)
                }

                Method (PDRD, 0, NotSerialized)
                {
                    If (!DRDY)
                    {
                        Sleep (ASLP)
                    }

                    Return (!DRDY)
                }

                Method (PSTS, 0, NotSerialized)
                {
                    If ((CSTS > 0x02))
                    {
                        Sleep (ASLP)
                    }

                    Return ((CSTS == 0x03))
                }

                Method (GNOT, 2, NotSerialized)
                {
                    If (PDRD ())
                    {
                        Return (0x01)
                    }

                    CEVT = Arg0
                    CSTS = 0x03
                    If (((CHPD == 0x00) && (Arg1 == 0x00)))
                    {
                        If (((OSYS > 0x07D0) || (OSYS < 0x07D6)))
                        {
                            Notify (\_SB.PCI0, Arg1)
                        }
                        Else
                        {
                            Notify (\_SB.PCI0.IGPU, Arg1)
                        }
                    }

                    If (CondRefOf (HNOT))
                    {
                        HNOT (Arg0)
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.IGPU, 0x80) // Status Change
                    }

                    Return (0x00)
                }

                Method (GHDS, 1, NotSerialized)
                {
                    TIDX = Arg0
                    Return (GNOT (0x01, 0x00))
                }

                Method (GLID, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        CLID = 0x03
                    }
                    Else
                    {
                        CLID = Arg0
                    }

                    Return (GNOT (0x02, 0x00))
                }

                Method (GDCK, 1, NotSerialized)
                {
                    CDCK = Arg0
                    Return (GNOT (0x04, 0x00))
                }

                Method (PARD, 0, NotSerialized)
                {
                    If (!ARDY)
                    {
                        Sleep (ASLP)
                    }

                    Return (!ARDY)
                }

                Method (AINT, 2, NotSerialized)
                {
                    If (!(TCHE & (0x01 << Arg0)))
                    {
                        Return (0x01)
                    }

                    If (PARD ())
                    {
                        Return (0x01)
                    }

                    If ((Arg0 == 0x02))
                    {
                        If (CPFM)
                        {
                            Local0 = (CPFM & 0x0F)
                            Local1 = (EPFM & 0x0F)
                            If ((Local0 == 0x01))
                            {
                                If ((Local1 & 0x06))
                                {
                                    PFIT = 0x06
                                }
                                ElseIf ((Local1 & 0x08))
                                {
                                    PFIT = 0x08
                                }
                                Else
                                {
                                    PFIT = 0x01
                                }
                            }

                            If ((Local0 == 0x06))
                            {
                                If ((Local1 & 0x08))
                                {
                                    PFIT = 0x08
                                }
                                ElseIf ((Local1 & 0x01))
                                {
                                    PFIT = 0x01
                                }
                                Else
                                {
                                    PFIT = 0x06
                                }
                            }

                            If ((Local0 == 0x08))
                            {
                                If ((Local1 & 0x01))
                                {
                                    PFIT = 0x01
                                }
                                ElseIf ((Local1 & 0x06))
                                {
                                    PFIT = 0x06
                                }
                                Else
                                {
                                    PFIT = 0x08
                                }
                            }
                        }
                        Else
                        {
                            PFIT ^= 0x07
                        }

                        PFIT |= 0x80000000
                        ASLC = 0x04
                    }
                    ElseIf ((Arg0 == 0x01))
                    {
                        BCLP = ((Arg1 * 0xFF) / 0x64)
                        BCLP |= 0x80000000
                        ASLC = 0x02
                    }
                    ElseIf ((Arg0 == 0x00))
                    {
                        ALSI = Arg1
                        ASLC = 0x01
                    }
                    Else
                    {
                        Return (0x01)
                    }

                    ASLE = 0x01
                    Return (0x00)
                }

                Method (SCIP, 0, NotSerialized)
                {
                    If ((OVER != 0x00))
                    {
                        Return (!GSMI)
                    }

                    Return (0x00)
                }

                Device (\_SB.MEM2)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x20000000,         // Address Base
                            0x00200000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0x40000000,         // Address Base
                            0x00200000,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (CRS) /* \_SB_.MEM2.CRS_ */
                    }
                }
            }

            Device (SBUS)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
                OperationRegion (SMBP, PCI_Config, 0x40, 0xC0)
                Field (SMBP, DWordAcc, NoLock, Preserve)
                {
                        ,   2, 
                    I2CE,   1
                }

                OperationRegion (SMPB, PCI_Config, 0x20, 0x04)
                Field (SMPB, DWordAcc, NoLock, Preserve)
                {
                        ,   5, 
                    SBAR,   11
                }

                OperationRegion (SMBI, SystemIO, (SBAR << 0x05), 0x10)
                Field (SMBI, ByteAcc, NoLock, Preserve)
                {
                    HSTS,   8, 
                    Offset (0x02), 
                    HCON,   8, 
                    HCOM,   8, 
                    TXSA,   8, 
                    DAT0,   8, 
                    DAT1,   8, 
                    HBDR,   8, 
                    PECR,   8, 
                    RXSA,   8, 
                    SDAT,   16
                }

                Method (SSXB, 2, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0x00)
                    }

                    I2CE = 0x00
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    HCON = 0x48
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (SRXB, 1, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0xFFFF)
                    }

                    I2CE = 0x00
                    HSTS = 0xBF
                    TXSA = (Arg0 | 0x01)
                    HCON = 0x44
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                    }

                    Return (0xFFFF)
                }

                Method (SWRB, 3, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0x00)
                    }

                    I2CE = 0x00
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    DAT0 = Arg2
                    HCON = 0x48
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (SRDB, 2, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0xFFFF)
                    }

                    I2CE = 0x00
                    HSTS = 0xBF
                    TXSA = (Arg0 | 0x01)
                    HCOM = Arg1
                    HCON = 0x48
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                    }

                    Return (0xFFFF)
                }

                Method (SWRW, 3, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0x00)
                    }

                    I2CE = 0x00
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    DAT1 = (Arg2 & 0xFF)
                    DAT0 = ((Arg2 >> 0x08) & 0xFF)
                    HCON = 0x4C
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (SRDW, 2, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0xFFFF)
                    }

                    I2CE = 0x00
                    HSTS = 0xBF
                    TXSA = (Arg0 | 0x01)
                    HCOM = Arg1
                    HCON = 0x4C
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (((DAT0 << 0x08) | DAT1))
                    }

                    Return (0xFFFFFFFF)
                }

                Method (SBLW, 4, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0x00)
                    }

                    I2CE = Arg3
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    DAT0 = SizeOf (Arg2)
                    Local1 = 0x00
                    HBDR = DerefOf (Arg2 [0x00])
                    HCON = 0x54
                    While ((SizeOf (Arg2) > Local1))
                    {
                        Local0 = 0x4E20
                        While ((!(HSTS & 0x80) && Local0))
                        {
                            Local0--
                        }

                        If (!Local0)
                        {
                            KILL ()
                            Return (0x00)
                        }

                        Local1++
                        If ((SizeOf (Arg2) > Local1))
                        {
                            HBDR = DerefOf (Arg2 [Local1])
                            HSTS = 0x80
                        }
                    }

                    HSTS = 0x80
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (SBLR, 3, Serialized)
                {
                    Name (TBUF, Buffer (0x0100){})
                    If (STRT ())
                    {
                        Return (0x00)
                    }

                    I2CE = Arg2
                    HSTS = 0xBF
                    TXSA = (Arg0 | 0x01)
                    HCOM = Arg1
                    HCON = 0x54
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (0x00)
                    }

                    TBUF [0x00] = DAT0 /* \_SB_.PCI0.SBUS.DAT0 */
                    HSTS = 0x80
                    Local1 = 0x01
                    While ((Local1 < DerefOf (TBUF [0x00])))
                    {
                        Local0 = 0x0FA0
                        While ((!(HSTS & 0x80) && Local0))
                        {
                            Local0--
                            Stall (0x32)
                        }

                        If (!Local0)
                        {
                            KILL ()
                            Return (0x00)
                        }

                        TBUF [Local1] = HBDR /* \_SB_.PCI0.SBUS.HBDR */
                        HSTS = 0x80
                        Local1++
                    }

                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (TBUF) /* \_SB_.PCI0.SBUS.SBLR.TBUF */
                    }

                    Return (0x00)
                }

                Method (STRT, 0, Serialized)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        If ((HSTS & 0x40))
                        {
                            Local0--
                            Sleep (0x01)
                            If ((Local0 == 0x00))
                            {
                                Return (0x01)
                            }
                        }
                        Else
                        {
                            Local0 = 0x00
                        }
                    }

                    Local0 = 0x0FA0
                    While (Local0)
                    {
                        If ((HSTS & 0x01))
                        {
                            Local0--
                            Stall (0x32)
                            If ((Local0 == 0x00))
                            {
                                KILL ()
                            }
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Return (0x01)
                }

                Method (COMP, 0, Serialized)
                {
                    Local0 = 0x0FA0
                    While (Local0)
                    {
                        If ((HSTS & 0x02))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0--
                            Stall (0x32)
                            If ((Local0 == 0x00))
                            {
                                KILL ()
                            }
                        }
                    }

                    Return (0x00)
                }

                Method (KILL, 0, Serialized)
                {
                    HCON |= 0x02
                    HSTS |= 0xFF
                }

                Device (BUS0)
                {
                    Name (_CID, "smbus")  // _CID: Compatible ID
                    Name (_ADR, 0x00)  // _ADR: Address
                }

                Device (BUS1)
                {
                    Name (_CID, "smbus")  // _CID: Compatible ID
                    Name (_ADR, 0x01)  // _ADR: Address
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Scope (\_SB)
                {
                    OperationRegion (\_SB.PCI0.LPCB.LPC1, PCI_Config, 0x40, 0xC0)
                    Field (\_SB.PCI0.LPCB.LPC1, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x20), 
                        PARC,   8, 
                        PBRC,   8, 
                        PCRC,   8, 
                        PDRC,   8, 
                        Offset (0x28), 
                        PERC,   8, 
                        PFRC,   8, 
                        PGRC,   8, 
                        PHRC,   8
                    }

                    Device (LNKA)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x01)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PARC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,10,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLA, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, _Y0E)
                                    {}
                            })
                            CreateWordField (RTLA, \_SB.LNKA._CRS._Y0E._INT, IRQ0)  // _INT: Interrupts
                            IRQ0 = Zero
                            IRQ0 = (0x01 << (PARC & 0x0F))
                            Return (RTLA) /* \_SB_.LNKA._CRS.RTLA */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, 0x01, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PARC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PARC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKB)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x02)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PBRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,11,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLB, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, _Y0F)
                                    {}
                            })
                            CreateWordField (RTLB, \_SB.LNKB._CRS._Y0F._INT, IRQ0)  // _INT: Interrupts
                            IRQ0 = Zero
                            IRQ0 = (0x01 << (PBRC & 0x0F))
                            Return (RTLB) /* \_SB_.LNKB._CRS.RTLB */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, 0x01, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PBRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PBRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKC)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x03)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PCRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,10,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLC, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, _Y10)
                                    {}
                            })
                            CreateWordField (RTLC, \_SB.LNKC._CRS._Y10._INT, IRQ0)  // _INT: Interrupts
                            IRQ0 = Zero
                            IRQ0 = (0x01 << (PCRC & 0x0F))
                            Return (RTLC) /* \_SB_.LNKC._CRS.RTLC */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, 0x01, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PCRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PCRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKD)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x04)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PDRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,11,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLD, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, _Y11)
                                    {}
                            })
                            CreateWordField (RTLD, \_SB.LNKD._CRS._Y11._INT, IRQ0)  // _INT: Interrupts
                            IRQ0 = Zero
                            IRQ0 = (0x01 << (PDRC & 0x0F))
                            Return (RTLD) /* \_SB_.LNKD._CRS.RTLD */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, 0x01, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PDRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PDRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKE)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x05)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PERC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,10,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLE, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, _Y12)
                                    {}
                            })
                            CreateWordField (RTLE, \_SB.LNKE._CRS._Y12._INT, IRQ0)  // _INT: Interrupts
                            IRQ0 = Zero
                            IRQ0 = (0x01 << (PERC & 0x0F))
                            Return (RTLE) /* \_SB_.LNKE._CRS.RTLE */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, 0x01, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PERC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PERC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKF)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x06)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PFRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,11,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLF, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, _Y13)
                                    {}
                            })
                            CreateWordField (RTLF, \_SB.LNKF._CRS._Y13._INT, IRQ0)  // _INT: Interrupts
                            IRQ0 = Zero
                            IRQ0 = (0x01 << (PFRC & 0x0F))
                            Return (RTLF) /* \_SB_.LNKF._CRS.RTLF */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, 0x01, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PFRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PFRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKG)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x07)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PGRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,10,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLG, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, _Y14)
                                    {}
                            })
                            CreateWordField (RTLG, \_SB.LNKG._CRS._Y14._INT, IRQ0)  // _INT: Interrupts
                            IRQ0 = Zero
                            IRQ0 = (0x01 << (PGRC & 0x0F))
                            Return (RTLG) /* \_SB_.LNKG._CRS.RTLG */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, 0x01, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PGRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PGRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKH)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x08)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PHRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,11,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLH, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, _Y15)
                                    {}
                            })
                            CreateWordField (RTLH, \_SB.LNKH._CRS._Y15._INT, IRQ0)  // _INT: Interrupts
                            IRQ0 = Zero
                            IRQ0 = (0x01 << (PHRC & 0x0F))
                            Return (RTLH) /* \_SB_.LNKH._CRS.RTLH */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, 0x01, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PHRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PHRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }
                }

                OperationRegion (LPC0, PCI_Config, 0x40, 0xC0)
                Field (LPC0, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                    IOD0,   8, 
                    IOD1,   8, 
                    Offset (0xB0), 
                    RAEN,   1, 
                        ,   13, 
                    RCBA,   18
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0093,             // Range Minimum
                            0x0093,             // Range Maximum
                            0x01,               // Alignment
                            0x0D,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (FWHD)
                {
                    Name (_HID, EisaId ("INT0800") /* Intel 82802 Firmware Hub Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0C01") /* System Board */)  // _CID: Compatible ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00004000,         // Address Length
                            _Y16)
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSYS >= 0x07D1))
                        {
                            If (HPAE)
                            {
                                Return (0x0F)
                            }
                        }
                        ElseIf (HPAE)
                        {
                            Return (0x0B)
                        }

                        Return (0x00)
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            CreateDWordField (BUF0, \_SB.PCI0.LPCB.HPET._Y16._BAS, HPT0)  // _BAS: Base Address
                            If ((HPAS == 0x01))
                            {
                                HPT0 = 0xFED01000
                            }

                            If ((HPAS == 0x02))
                            {
                                HPT0 = 0xFED02000
                            }

                            If ((HPAS == 0x03))
                            {
                                HPT0 = 0xFED03000
                            }
                        }

                        Return (BUF0) /* \_SB_.PCI0.LPCB.HPET.BUF0 */
                    }
                }

                Device (IPIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B4,             // Range Minimum
                            0x00B4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (LDRC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x004E,             // Range Minimum
                            0x004E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x1800,             // Range Minimum
                            0x1800,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                    })
                    OperationRegion (CMS0, SystemCMOS, 0x00, 0x40)
                    Field (CMS0, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x38), 
                        ISTB,   1, 
                            ,   6, 
                        ISLG,   1
                    }
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                    })
                }

                Device (SMC)
                {
                    Name (_HID, EisaId ("APP0001"))  // _HID: Hardware ID
                    Name (_CID, "smc-huronriver")  // _CID: Compatible ID
                    Name (_STA, 0x0B)  // _STA: Status
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0300,             // Range Minimum
                            0x0300,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFEF00000,         // Address Base
                            0x00010000,         // Address Length
                            )
                        IRQNoFlags ()
                            {6}
                    })
                }

                Device (ALS0)
                {
                    Name (_HID, "ACPI0008" /* Ambient Light Sensor Device */)  // _HID: Hardware ID
                    Name (_CID, "smc-als")  // _CID: Compatible ID
                    Name (BUFF, Buffer (0x02){})
                    CreateByteField (BUFF, 0x00, OB0)
                    CreateByteField (BUFF, 0x01, OB1)
                    CreateWordField (BUFF, 0x00, ALSI)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSYS >= 0x07D9))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Method (_ALI, 0, NotSerialized)  // _ALI: Ambient Light Illuminance
                    {
                        OB0 = \_SB.PCI0.LPCB.EC.ALB0
                        OB1 = \_SB.PCI0.LPCB.EC.ALB1
                        Local0 = ALSI /* \_SB_.PCI0.LPCB.ALS0.ALSI */
                        Return (Local0)
                    }

                    Name (_ALR, Package (0x05)  // _ALR: Ambient Light Response
                    {
                        Package (0x02)
                        {
                            0x0A, 
                            0x00
                        }, 

                        Package (0x02)
                        {
                            0x14, 
                            0x0A
                        }, 

                        Package (0x02)
                        {
                            0x32, 
                            0x50
                        }, 

                        Package (0x02)
                        {
                            0x5A, 
                            0x012C
                        }, 

                        Package (0x02)
                        {
                            0x64, 
                            0x03E8
                        }
                    })
                }

                Device (EC)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0066,             // Range Minimum
                            0x0066,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                    Name (_GPE, 0x17)  // _GPE: General Purpose Events
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (OSDW ())
                        {
                            Return (Package (0x02)
                            {
                                0x23, 
                                0x04
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                0x23, 
                                0x03
                            })
                        }
                    }

                    Name (ECOK, 0x00)
                    OperationRegion (ECOR, EmbeddedControl, 0x00, 0xFF)
                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        ECVS,   8, 
                        Offset (0x02), 
                        Offset (0x03), 
                        G3HT,   1, 
                        Offset (0x04), 
                        WBCB,   1, 
                        DSLP,   1, 
                        Offset (0x05), 
                        Offset (0x06), 
                        WKRS,   8, 
                        Offset (0x10), 
                        ECSS,   8, 
                        PLIM,   8, 
                        ALB0,   8, 
                        ALB1,   8, 
                        WTLB,   8, 
                        WTMB,   8, 
                        Offset (0x20), 
                        SPTR,   8, 
                        SSTS,   8, 
                        SADR,   8, 
                        SCMD,   8, 
                        SBFR,   256, 
                        SCNT,   8, 
                        SAAD,   8, 
                        SAD0,   8, 
                        SAD1,   8, 
                        SMUX,   8, 
                        Offset (0x60), 
                        ELSW,   1, 
                        EACP,   1, 
                        ECDI,   1, 
                        ENMI,   1, 
                        Offset (0x61), 
                        EMHP,   1, 
                        Offset (0x62), 
                        Offset (0x63), 
                        Offset (0x64), 
                        SWLO,   1, 
                        SWLC,   1, 
                        SWAI,   1, 
                        SWAR,   1, 
                        SWCI,   1, 
                        SWCE,   1, 
                        SWMI,   1, 
                        SWMR,   1, 
                        SWPB,   1, 
                        SWGP,   1, 
                        SWPM,   1, 
                        SWWT,   1, 
                        SWLB,   1, 
                        Offset (0x66), 
                        Offset (0x67), 
                        Offset (0x68), 
                        EWLO,   1, 
                        EWLC,   1, 
                        EWAI,   1, 
                        EWAR,   1, 
                        EWCI,   1, 
                        EWCE,   1, 
                        EWMI,   1, 
                        EWMR,   1, 
                        EWPB,   1, 
                        EWGP,   1, 
                        EWPM,   1, 
                        ENWT,   1, 
                        EWLB,   1, 
                        Offset (0x6A), 
                        Offset (0x6B), 
                        Offset (0x6C), 
                        LWLO,   1, 
                        LWLC,   1, 
                        LWAI,   1, 
                        LWAR,   1, 
                        LWCI,   1, 
                        LWCE,   1, 
                        LWMI,   1, 
                        LWMR,   1, 
                        LWPB,   1, 
                        LWGP,   1, 
                        LWPM,   1, 
                        LWWT,   1, 
                        LWLB,   1, 
                        Offset (0x6E), 
                        Offset (0x6F), 
                        Offset (0x70)
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x03), 
                        G3AD,   1, 
                        BLOD,   1, 
                        S4WE,   1, 
                        APWC,   1, 
                        Offset (0x04), 
                        Offset (0x6C), 
                        LWE0,   8, 
                        LWE1,   8, 
                        LWE2,   8, 
                        LWE3,   8
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x24), 
                        SBDW,   16, 
                        Offset (0x46), 
                        SADW,   16
                    }

                    Method (WAKE, 0, NotSerialized)
                    {
                        If (ECOK)
                        {
                            Return (WKRS) /* \_SB_.PCI0.LPCB.EC__.WKRS */
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Device (SMB0)
                    {
                        Name (_HID, "ACPI0001" /* SMBus 1.0 Host Controller */)  // _HID: Hardware ID
                        Name (_EC, 0x2010)  // _EC_: Embedded Controller
                        Mutex (SMTX, 0x00)
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (OSDW ())
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }

                        Device (SBS0)
                        {
                            Name (_HID, "ACPI0002" /* Smart Battery Subsystem */)  // _HID: Hardware ID
                            Name (_SBS, 0x01)  // _SBS: Smart Battery Subsystem
                        }

                        Method (SBPC, 1, NotSerialized)
                        {
                            Local0 = Arg0
                            While (Local0)
                            {
                                If ((SPTR == 0x00))
                                {
                                    Return ((SSTS & 0x1F))
                                }

                                Sleep (0x01)
                                Local0--
                            }

                            Return (0x18)
                        }

                        Method (SBRW, 3, NotSerialized)
                        {
                            Local0 = One
                            If (!Acquire (\_SB.PCI0.LPCB.EC.SMB0.SMTX, 0xFFFF))
                            {
                                If ((SPTR == 0x00))
                                {
                                    SADR = (Arg0 << 0x01)
                                    SCMD = Arg1
                                    SPTR = 0x09
                                    Local0 = SBPC (0x03E8)
                                    If (!Local0)
                                    {
                                        Arg2 = SBDW /* \_SB_.PCI0.LPCB.EC__.SBDW */
                                    }
                                }

                                Release (\_SB.PCI0.LPCB.EC.SMB0.SMTX)
                            }

                            Return (Local0)
                        }

                        Method (SBRB, 3, NotSerialized)
                        {
                            Local0 = One
                            Local1 = Buffer (0x01)
                                {
                                     0x00                                             // .
                                }
                            If (!Acquire (\_SB.PCI0.LPCB.EC.SMB0.SMTX, 0xFFFF))
                            {
                                If ((SPTR == 0x00))
                                {
                                    SADR = (Arg0 << 0x01)
                                    SCMD = Arg1
                                    SPTR = 0x0B
                                    Local0 = SBPC (0x03E8)
                                    If (!Local0)
                                    {
                                        Arg2 = SBFR /* \_SB_.PCI0.LPCB.EC__.SBFR */
                                    }
                                }

                                Release (\_SB.PCI0.LPCB.EC.SMB0.SMTX)
                            }

                            Return (Local0)
                        }
                    }

                    Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (OSDW ())
                        {
                            Notify (\_SB.PCI0.LPCB.EC.SMB0, 0x80) // Status Change
                        }
                        ElseIf ((SSTS & 0x40))
                        {
                            If (!Acquire (\_SB.PCI0.LPCB.EC.SMB0.SMTX, 0xFFFF))
                            {
                                Local0 = (SAAD >> 0x01)
                                If ((Local0 == 0x0A))
                                {
                                    \_SB.BAT0.BNOT (SADW)
                                }

                                SSTS = 0x00
                                Release (\_SB.PCI0.LPCB.EC.SMB0.SMTX)
                            }
                        }
                    }

                    Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        LIDS = ELSW /* \_SB_.PCI0.LPCB.EC__.ELSW */
                        \_SB.PCI0.IGPU.CLID = ELSW /* \_SB_.PCI0.LPCB.EC__.ELSW */
                        Notify (\_SB.LID0, 0x80) // Status Change
                    }

                    Method (_Q21, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (EACP)
                        {
                            PWRS = 0x01
                        }
                        Else
                        {
                            PWRS = 0x00
                        }

                        Notify (\_SB.ADP1, 0x80) // Status Change
                        PNOT ()
                    }

                    Method (_Q40, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (\_SB.PCI0.LPCB.ALS0, 0x80) // Status Change
                    }

                    Method (_Q5A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (\_SB.SLPB, 0x80) // Status Change
                    }

                    Method (_Q80, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                        Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                        Notify (\_PR.CPU2, 0x80) // Performance Capability Change
                        Notify (\_PR.CPU3, 0x80) // Performance Capability Change
                        Notify (\_PR.CPU4, 0x80) // Performance Capability Change
                        Notify (\_PR.CPU5, 0x80) // Performance Capability Change
                        Notify (\_PR.CPU6, 0x80) // Performance Capability Change
                        Notify (\_PR.CPU7, 0x80) // Performance Capability Change
                        If ((\_SB.PCI0.IGPU.VID0 == 0x8086))
                        {
                            Local0 = IGPS /* \IGPS */
                            Local0 = (RP0C - Local0)
                            RPSL = Local0
                        }
                        Else
                        {
                            Local0 = EGPS /* \EGPS */
                            If (((Local0 >= 0x00) && (Local0 <= 0x04)))
                            {
                                Local0 += 0xD1
                                Notify (\_SB.PCI0.P0P2.GFX0, Local0)
                            }
                        }
                    }

                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x03) || (OSYS >= 0x07D6)))
                        {
                            ECOK = Arg1
                            If ((Arg1 == 0x01))
                            {
                                ECSS = 0x00
                                LIDS = ELSW /* \_SB_.PCI0.LPCB.EC__.ELSW */
                                \_SB.PCI0.IGPU.CLID = ELSW /* \_SB_.PCI0.LPCB.EC__.ELSW */
                                PWRS = EACP /* \_SB_.PCI0.LPCB.EC__.EACP */
                                Notify (\_SB.ADP1, 0x80) // Status Change
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Device (BAT0)
                    {
                        Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                        Name (_UID, 0x00)  // _UID: Unique ID
                        Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                        {
                            \_SB
                        })
                        Name (BSSW, 0xFFFF)
                        Name (PBIF, Package (0x0D)
                        {
                            0x00, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0x01, 
                            0xFFFFFFFF, 
                            0xFA, 
                            0x64, 
                            0x0A, 
                            0x0A, 
                            " ", 
                            " ", 
                            " ", 
                            " "
                        })
                        Name (PBST, Package (0x04)
                        {
                            0x00, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (OSDW ())
                            {
                                Return (0x00)
                            }

                            If (\_SB.PCI0.LPCB.EC.ECOK)
                            {
                                UBSS ()
                                If ((BSSW & 0x01))
                                {
                                    Return (0x1F)
                                }
                                Else
                                {
                                    Return (0x0F)
                                }
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                        {
                            If ((BSSW & 0x01))
                            {
                                UBST ()
                            }
                            Else
                            {
                                PBST [0x00] = 0x00
                                PBST [0x01] = 0xFFFFFFFF
                                PBST [0x02] = 0xFFFFFFFF
                            }

                            Return (PBST) /* \_SB_.BAT0.PBST */
                        }

                        Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
                        {
                            If ((BSSW & 0x01))
                            {
                                UBIF ()
                            }

                            Return (PBIF) /* \_SB_.BAT0.PBIF */
                        }

                        Method (BNOT, 1, NotSerialized)
                        {
                            Local0 = BSSW /* \_SB_.BAT0.BSSW */
                            BSSW = Arg0
                            Notify (\_SB.BAT0, 0x80) // Status Change
                            If (((Local0 ^ Arg0) & 0x01))
                            {
                                Notify (\_SB.BAT0, 0x81) // Information Change
                            }
                        }

                        Method (UBSS, 0, NotSerialized)
                        {
                            \_SB.PCI0.LPCB.EC.SMB0.SBRW (0x0A, 0x01, RefOf (BSSW))
                        }

                        Method (UBIF, 0, NotSerialized)
                        {
                            \_SB.PCI0.LPCB.EC.SMB0.SBRW (0x0B, 0x18, RefOf (Local0))
                            PBIF [0x01] = (Local0 * 0x0A)
                            \_SB.PCI0.LPCB.EC.SMB0.SBRW (0x0B, 0x10, RefOf (Local0))
                            PBIF [0x02] = (Local0 * 0x0A)
                            \_SB.PCI0.LPCB.EC.SMB0.SBRW (0x0B, 0x19, RefOf (Local0))
                            PBIF [0x04] = Local0
                            \_SB.PCI0.LPCB.EC.SMB0.SBRB (0x0B, 0x21, RefOf (Local0))
                            PBIF [0x09] = Local0
                            PBIF [0x0A] = Buffer (0x01)
                                {
                                     0x00                                             // .
                                }
                            \_SB.PCI0.LPCB.EC.SMB0.SBRB (0x0B, 0x22, RefOf (Local0))
                            PBIF [0x0B] = Local0
                            \_SB.PCI0.LPCB.EC.SMB0.SBRB (0x0B, 0x20, RefOf (Local0))
                            PBIF [0x0C] = Local0
                        }

                        Method (UBST, 0, NotSerialized)
                        {
                            \_SB.PCI0.LPCB.EC.SMB0.SBRW (0x0B, 0x09, RefOf (Local2))
                            PBST [0x03] = Local2
                            \_SB.PCI0.LPCB.EC.SMB0.SBRW (0x0B, 0x0A, RefOf (Local0))
                            If ((Local0 & 0x8000))
                            {
                                Local0 = ~Local0
                                Local0 = (Local0++ & 0xFFFF)
                            }

                            Local0 *= Local2
                            PBST [0x01] = (Local0 / 0x03E8)
                            \_SB.PCI0.LPCB.EC.SMB0.SBRW (0x0B, 0x0F, RefOf (Local0))
                            PBST [0x02] = (Local0 * 0x0A)
                            Local1 = 0x00
                            If (PWRS)
                            {
                                \_SB.PCI0.LPCB.EC.SMB0.SBRW (0x0B, 0x16, RefOf (Local0))
                                If (!(Local0 & 0x40))
                                {
                                    Local1 = 0x02
                                }
                            }
                            Else
                            {
                                Local1 = 0x01
                            }

                            PBST [0x00] = Local1
                        }
                    }
                }

                Device (GMUX)
                {
                    Name (_HID, EisaId ("APP000B"))  // _HID: Hardware ID
                    Name (_CID, "gmux")  // _CID: Compatible ID
                    Name (_STA, 0x0B)  // _STA: Status
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0700,             // Range Minimum
                            0x07FF,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            )
                    })
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (OSDW ())
                        {
                            Return (Package (0x02)
                            {
                                0x16, 
                                0x03
                            })
                        }

                        Return (Package (0x02)
                        {
                            0x16, 
                            0x03
                        })
                    }

                    Scope (\_GPE)
                    {
                        Method (_L16, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                        {
                            Notify (\_SB.PCI0.LPCB.GMUX, 0x80) // Status Change
                        }
                    }

                    Name (GMGP, 0x16)
                    Method (GMSP, 1, NotSerialized)
                    {
                        If ((Arg0 <= 0x01))
                        {
                            GP06 |= Arg0
                        }
                    }

                    Method (GMLV, 0, NotSerialized)
                    {
                        Return (GP06) /* \GP06 */
                    }
                }
            }

            Device (HDEF)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (OSDW ())
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x03
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x03
                        })
                    }
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (OSDW ())
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x03
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x04
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }

                    Return (PR06 ())
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (OSDW ())
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x03
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x04
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }

                    Return (PR07 ())
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (OSDW ())
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x03
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x03
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08 ())
                    }

                    Return (PR08 ())
                }
            }

            Scope (\_SB.PCI0.RP03)
            {
                OperationRegion (A1E0, PCI_Config, 0x00, 0x0380)
                Field (A1E0, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                    BMIE,   3, 
                    Offset (0x19), 
                    SECB,   8, 
                    SBBN,   8, 
                    Offset (0x1E), 
                        ,   13, 
                    MABT,   1, 
                    Offset (0x4A), 
                        ,   5, 
                    TPEN,   1, 
                    Offset (0x50), 
                        ,   4, 
                    LDIS,   1, 
                        ,   24, 
                    LACT,   1, 
                    Offset (0xA4), 
                    PSTA,   2, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23D,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1
                }

                OperationRegion (A1E1, PCI_Config, 0x18, 0x04)
                Field (A1E1, DWordAcc, NoLock, Preserve)
                {
                    BNIR,   32
                }

                Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                {
                    If (((BMIE == 0x00) && (SECB == 0xFF)))
                    {
                        Return (SNBS) /* \_SB_.PCI0.RP03.SNBS */
                    }
                    Else
                    {
                        Return (SECB) /* \_SB_.PCI0.RP03.SECB */
                    }
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Name (BMIS, 0x00)
                Name (SNBS, 0x00)
                Name (BNIS, 0x00)
                Method (APPD, 0, Serialized)
                {
                    If ((!OSDW () || ((WOWE == 0x01) || (TAPD != 0x01))))
                    {
                        Return (Zero)
                    }

                    \_SB.PCI0.RP03.ARPT.PSTA = 0x03
                    If ((((BMIE != 0x00) && (BMIE != BMIS)) && (
                        ((SECB != 0x00) && (SECB != SNBS)) && ((BNIR != 
                        0x00) && (BNIR != BNIS)))))
                    {
                        BMIS = BMIE /* \_SB_.PCI0.RP03.BMIE */
                        SNBS = SECB /* \_SB_.PCI0.RP03.SECB */
                        BNIS = BNIR /* \_SB_.PCI0.RP03.BNIR */
                    }

                    BMIE = 0x00
                    BNIR = 0x00FEFF00
                    Local0 = TPEN /* \_SB_.PCI0.RP03.TPEN */
                    PSTA = 0x03
                    Local0 = TPEN /* \_SB_.PCI0.RP03.TPEN */
                    LDIS = 0x01
                    Local0 = (Timer + 0x00989680)
                    While ((Timer <= Local0))
                    {
                        If ((LACT == 0x00))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((TAPD == 0x01))
                    {
                        \_SB.PCI0.LPCB.EC.APWC = 0x00
                        Sleep (0x0107)
                    }

                    Return (Zero)
                }

                Method (APPU, 0, Serialized)
                {
                    If ((OSDW () && ((WOWE == 0x01) && (TAPD == 0x01))))
                    {
                        WAPS ()
                    }

                    If ((!OSDW () || ((WOWE == 0x01) || (TAPD != 0x01))))
                    {
                        WOWE = 0x00
                        Return (Zero)
                    }

                    PSTA = 0x00
                    If ((SECB != 0xFF))
                    {
                        WAPS ()
                        Return (Zero)
                    }

                    BNIR = BNIS /* \_SB_.PCI0.RP03.BNIS */
                    LDIS = 0x00
                    WOWE = 0x00
                    If ((\_SB.PCI0.LPCB.EC.APWC == 0x01))
                    {
                        WAPS ()
                        Return (Zero)
                    }

                    Local0 = 0x00
                    While (0x01)
                    {
                        \_SB.PCI0.LPCB.EC.APWC = 0x01
                        Sleep (0xFA)
                        Local1 = 0x00
                        Local2 = (Timer + 0x00989680)
                        While ((Timer <= Local2))
                        {
                            If (((LACT == 0x01) && (\_SB.PCI0.RP03.ARPT.AVND != 0xFFFF)))
                            {
                                Local1 = 0x01
                                Break
                            }

                            Sleep (0x0A)
                        }

                        If ((Local1 == 0x01))
                        {
                            WAPS ()
                            MABT = 0x01
                            Break
                        }

                        If ((Local0 == 0x04))
                        {
                            Break
                        }

                        Local0++
                        \_SB.PCI0.LPCB.EC.APWC = 0x00
                        Sleep (0x0107)
                    }

                    Return (Zero)
                }

                Method (ALPR, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        APPD ()
                    }
                    Else
                    {
                        APPU ()
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (OSDW ())
                    {
                        ALPR (0x00)
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (OSDW ())
                    {
                        ALPR (0x01)
                    }
                }

                Method (WAPS, 0, Serialized)
                {
                    PSTA = 0x00
                    If ((BNIS != BNIR))
                    {
                        BNIR = BNIS /* \_SB_.PCI0.RP03.BNIS */
                    }

                    \_SB.PCI0.RP03.ARPT.PSTA = 0x00
                    \_SB.PCI0.RP03.ARPT.BDEN = 0x40
                    \_SB.PCI0.RP03.ARPT.BDMR = 0x18003000
                    \_SB.PCI0.RP03.ARPT.BDIR = 0x0120
                    \_SB.PCI0.RP03.ARPT.BDDR = 0x0438
                    \_SB.PCI0.RP03.ARPT.BDIR = 0x0124
                    \_SB.PCI0.RP03.ARPT.BDDR = 0x0134106B
                    \_SB.PCI0.RP03.ARPT.BDEN = 0x00
                }

                Device (ARPT)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (ARE2, PCI_Config, 0x00, 0x80)
                    Field (ARE2, ByteAcc, NoLock, Preserve)
                    {
                        AVND,   16, 
                        ADID,   16, 
                        Offset (0x44), 
                        PSTA,   2
                    }

                    OperationRegion (ARE3, PCI_Config, 0x80, 0x80)
                    Field (ARE3, DWordAcc, NoLock, Preserve)
                    {
                        BDMR,   32, 
                        Offset (0x08), 
                        BDEN,   32, 
                        Offset (0x20), 
                        BDIR,   32, 
                        BDDR,   32
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (OSDW ())
                        {
                            Return (Package (0x02)
                            {
                                0x09, 
                                0x04
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                0x09, 
                                0x04
                            })
                        }
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (0x00)
                    }

                    Method (WWEN, 1, NotSerialized)
                    {
                        If ((Arg0 != 0x00))
                        {
                            WOWE = Arg0
                        }
                    }

                    Method (PDEN, 1, NotSerialized)
                    {
                        TAPD = Arg0
                    }
                }
            }

            Scope (\_SB.PCI0.RP04)
            {
                OperationRegion (A1E0, PCI_Config, 0x00, 0x0380)
                Field (A1E0, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                    BMIE,   3, 
                    Offset (0x19), 
                    SECB,   8, 
                    SBBN,   8, 
                    Offset (0x1E), 
                        ,   13, 
                    MABT,   1, 
                    Offset (0x4A), 
                        ,   5, 
                    TPEN,   1, 
                    Offset (0x50), 
                    ASPM,   2, 
                        ,   2, 
                    LDIS,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LACT,   1, 
                    Offset (0xA4), 
                    PSTA,   2, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23D,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1
                }

                Device (CMRA)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (ARE3, PCI_Config, 0x00, 0xFF)
                    Field (ARE3, ByteAcc, NoLock, Preserve)
                    {
                        AVND,   16, 
                        ADID,   16, 
                        Offset (0x4C), 
                        DPST,   2
                    }

                    Name (S2PM, 0x02)
                    Method (CMPE, 1, Serialized)
                    {
                        If ((Arg0 <= 0x01))
                        {
                            If ((Arg0 == 0x01))
                            {
                                GD42 = 0x01
                                \_SB.PCI0.RP04.ASPM = S2PM /* \_SB_.PCI0.RP04.CMRA.S2PM */
                                \_SB.PCI0.RP04.PSTA = 0x00
                                While ((\_SB.PCI0.RP04.PSTA != 0x00))
                                {
                                    Sleep (0x01)
                                }

                                \_SB.PCI0.RP04.LDIS = 0x00
                                Local0 = (Timer + 0x00989680)
                                While ((Timer <= Local0))
                                {
                                    If ((LACT == 0x01))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                            Else
                            {
                                \_SB.PCI0.RP04.CMRA.DPST = 0x03
                                While ((\_SB.PCI0.RP04.CMRA.DPST != 0x03))
                                {
                                    Sleep (0x01)
                                }

                                \_SB.PCI0.RP04.PSTA = 0x03
                                While ((\_SB.PCI0.RP04.PSTA != 0x03))
                                {
                                    Sleep (0x01)
                                }

                                S2PM = \_SB.PCI0.RP04.ASPM
                                \_SB.PCI0.RP04.ASPM = 0x00
                                \_SB.PCI0.RP04.LDIS = 0x01
                                GP42 = 0x00
                                GD42 = 0x00
                            }
                        }

                        Return (Zero)
                    }
                }

                Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                {
                    Return (SECB) /* \_SB_.PCI0.RP04.SECB */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }

            Scope (\_SB.PCI0.RP05)
            {
                OperationRegion (A1E0, PCI_Config, 0x00, 0x0380)
                Field (A1E0, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                    BMIE,   3, 
                    Offset (0x19), 
                    SECB,   8, 
                    SBBN,   8, 
                    Offset (0x1E), 
                        ,   13, 
                    MABT,   1, 
                    Offset (0x4A), 
                        ,   5, 
                    TPEN,   1, 
                    Offset (0x50), 
                    ASPM,   2, 
                        ,   2, 
                    LDIS,   1, 
                    LRTN,   1, 
                    Offset (0x52), 
                    LSPD,   4, 
                        ,   7, 
                    LTRN,   1, 
                        ,   1, 
                    LACT,   1, 
                    Offset (0xA4), 
                    PSTA,   2, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23D,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (OSDW ())
                    {
                        GD41 = 0x01
                        PSTA = 0x00
                        While ((PSTA != 0x00))
                        {
                            Sleep (0x01)
                        }

                        Sleep (0x46)
                        LDIS = 0x00
                        Local0 = (Timer + 0x00989680)
                        While ((Timer <= Local0))
                        {
                            If (((LACT == 0x01) && (\_SB.PCI0.RP05.SSD0.SVID != 0xFFFF)))
                            {
                                Local1 = 0x00
                                While ((LSPD != 0x02))
                                {
                                    LRTN = 0x01
                                    Local2 = 0x00
                                    While (((LACT != 0x01) || (LTRN == 0x01)))
                                    {
                                        If ((Local2 > 0x01F4))
                                        {
                                            Break
                                        }

                                        Local2++
                                        Sleep (0x01)
                                    }

                                    If ((Local1 == 0x05))
                                    {
                                        Break
                                    }

                                    Local1++
                                }

                                Break
                            }

                            Sleep (0x0A)
                        }
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (OSDW ())
                    {
                        PSTA = 0x03
                        While ((PSTA != 0x03))
                        {
                            Sleep (0x01)
                        }

                        LDIS = 0x01
                        GP41 = 0x00
                        GD41 = 0x00
                        Sleep (0x0384)
                    }
                }

                Device (SSD0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (0x00)
                    }

                    OperationRegion (SSE1, PCI_Config, 0x00, 0x10)
                    Field (SSE1, ByteAcc, NoLock, Preserve)
                    {
                        SVID,   16
                    }

                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        Local0 = Package (0x04)
                            {
                                "use-msi", 
                                0x01, 
                                "sata-express-power-off", 
                                0x01
                            }
                        DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))
                        Return (Local0)
                    }
                }
            }
        }

        Device (ADP1)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (OSDW ())
                {
                    Return (Package (0x02)
                    {
                        0x23, 
                        0x04
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        0x23, 
                        0x03
                    })
                }
            }

            Name (WK00, 0x01)
            Method (SWAK, 1, NotSerialized)
            {
                WK00 = (Arg0 & 0x03)
                If (!WK00)
                {
                    WK00 = 0x01
                }
            }

            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                Return (PWRS) /* \PWRS */
            }

            Method (_PCL, 0, NotSerialized)  // _PCL: Power Consumer List
            {
                Return (\_SB)
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (OSDW ())
                {
                    If (\_SB.PCI0.LPCB.EC.ECOK)
                    {
                        If (Arg0)
                        {
                            If ((WK00 & 0x01))
                            {
                                \_SB.PCI0.LPCB.EC.EWAI = 0x01
                            }

                            If ((WK00 & 0x02))
                            {
                                \_SB.PCI0.LPCB.EC.EWAR = 0x01
                            }
                        }
                        Else
                        {
                            \_SB.PCI0.LPCB.EC.EWAI = 0x00
                            \_SB.PCI0.LPCB.EC.EWAR = 0x00
                        }
                    }
                }
            }
        }

        Device (LID0)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (OSDW ())
                {
                    Return (Package (0x02)
                    {
                        0x23, 
                        0x04
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        0x23, 
                        0x03
                    })
                }
            }

            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Return (LIDS) /* \LIDS */
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (\_SB.PCI0.LPCB.EC.ECOK)
                {
                    If (Arg0)
                    {
                        \_SB.PCI0.LPCB.EC.EWLO = 0x01
                    }
                    Else
                    {
                        \_SB.PCI0.LPCB.EC.EWLO = 0x00
                    }
                }
            }
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
        }
    }

    Scope (\_PR)
    {
        Processor (CPU0, 0x01, 0x00000410, 0x06){}
        Processor (CPU1, 0x02, 0x00000410, 0x06){}
        Processor (CPU2, 0x03, 0x00000410, 0x06){}
        Processor (CPU3, 0x04, 0x00000410, 0x06){}
        Processor (CPU4, 0x05, 0x00000410, 0x06){}
        Processor (CPU5, 0x06, 0x00000410, 0x06){}
        Processor (CPU6, 0x07, 0x00000410, 0x06){}
        Processor (CPU7, 0x08, 0x00000410, 0x06){}
    }

    Mutex (MUTX, 0x00)
    Name (SLTP, 0x00)
    OperationRegion (PRT0, SystemIO, 0x80, 0x04)
    Field (PRT0, DWordAcc, Lock, Preserve)
    {
        P80H,   32
    }

    OperationRegion (PLMT, SystemIO, 0x0310, 0x0A)
    Field (PLMT, WordAcc, Lock, Preserve)
    {
        CPLT,   8, 
        IGPS,   8, 
        MPLT,   8, 
        CFIL,   8, 
        EGPS,   8
    }

    OperationRegion (D29C, SystemMemory, 0xE00E8000, 0x04)
    Field (D29C, DWordAcc, Lock, Preserve)
    {
        VEID,   16
    }

    OperationRegion (S0BA, SystemMemory, 0xE00A8084, 0x04)
    Field (S0BA, DWordAcc, Lock, Preserve)
    {
        S0D3,   2
    }

    OperationRegion (S4BA, SystemMemory, 0xE00AC084, 0x04)
    Field (S4BA, DWordAcc, Lock, Preserve)
    {
        S4D3,   2
    }

    OperationRegion (TCOI, SystemIO, 0x1860, 0x08)
    Field (TCOI, WordAcc, NoLock, Preserve)
    {
        Offset (0x04), 
            ,   9, 
        SCIS,   1, 
        Offset (0x06)
    }

    Method (P8XH, 2, Serialized)
    {
        If ((Arg0 == 0x00))
        {
            P80D = ((P80D & 0xFFFFFF00) | Arg1)
        }

        If ((Arg0 == 0x01))
        {
            P80D = ((P80D & 0xFFFF00FF) | (Arg1 << 0x08))
        }

        If ((Arg0 == 0x02))
        {
            P80D = ((P80D & 0xFF00FFFF) | (Arg1 << 0x10))
        }

        If ((Arg0 == 0x03))
        {
            P80D = ((P80D & 0x00FFFFFF) | (Arg1 << 0x18))
        }

        P80H = P80D /* \P80D */
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8, 
        SSMY,   8
    }

    Method (\_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3) /* \GETB.TBF3 */
    }

    Method (PNOT, 0, Serialized)
    {
        If ((TCNT > 0x01))
        {
            If ((PDC0 & 0x08))
            {
                Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                If ((PDC0 & 0x10))
                {
                    Notify (\_PR.CPU0, 0x81) // C-State Change
                }
            }

            If ((PDC1 & 0x08))
            {
                Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                If ((PDC1 & 0x10))
                {
                    Notify (\_PR.CPU1, 0x81) // C-State Change
                }
            }

            If ((PDC2 & 0x08))
            {
                Notify (\_PR.CPU2, 0x80) // Performance Capability Change
                If ((PDC2 & 0x10))
                {
                    Notify (\_PR.CPU2, 0x81) // C-State Change
                }
            }

            If ((PDC3 & 0x08))
            {
                Notify (\_PR.CPU3, 0x80) // Performance Capability Change
                If ((PDC3 & 0x10))
                {
                    Notify (\_PR.CPU3, 0x81) // C-State Change
                }
            }

            If ((PDC4 & 0x08))
            {
                Notify (\_PR.CPU4, 0x80) // Performance Capability Change
                If ((PDC4 & 0x10))
                {
                    Notify (\_PR.CPU4, 0x81) // C-State Change
                }
            }

            If ((PDC5 & 0x08))
            {
                Notify (\_PR.CPU5, 0x80) // Performance Capability Change
                If ((PDC5 & 0x10))
                {
                    Notify (\_PR.CPU5, 0x81) // C-State Change
                }
            }

            If ((PDC6 & 0x08))
            {
                Notify (\_PR.CPU6, 0x80) // Performance Capability Change
                If ((PDC6 & 0x10))
                {
                    Notify (\_PR.CPU6, 0x81) // C-State Change
                }
            }

            If ((PDC7 & 0x08))
            {
                Notify (\_PR.CPU7, 0x80) // Performance Capability Change
                If ((PDC7 & 0x10))
                {
                    Notify (\_PR.CPU7, 0x81) // C-State Change
                }
            }
        }
        Else
        {
            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
            Notify (\_PR.CPU0, 0x81) // C-State Change
        }
    }

    Method (DSPI, 0, Serialized)
    {
        If (!OSDW ())
        {
            S0D3 = 0x03
            Local0 = IOSR /* \IOSR */
            Local1 = (Local0 & 0x01)
            While ((Local1 != 0x00))
            {
                Local0 = IOSR /* \IOSR */
                Local1 = (Local0 & 0x01)
            }

            IOIR = 0xCE00AA07
            IOSR = 0x0600
            IONR = 0xF000
            Local0 = IOSR /* \IOSR */
            Local0 |= 0x01
            IOSR = Local0
            Local0 = IOSR /* \IOSR */
            Local1 = (Local0 & 0x01)
            While ((Local1 != 0x00))
            {
                Local0 = IOSR /* \IOSR */
                Local1 = (Local0 & 0x01)
            }

            Local1 = (Local0 & 0x06)
            If ((Local1 == 0x00))
            {
                Local3 = IODR /* \IODR */
            }

            Local3 |= 0x0100
            IOSR = 0x0700
            IODR = Local3
            IONR = 0xF000
            Local0 = IOSR /* \IOSR */
            Local0 |= 0x01
            IOSR = Local0
            Local0 = IOSR /* \IOSR */
            Local1 = (Local0 & 0x01)
            While ((Local1 != 0x00))
            {
                Local0 = IOSR /* \IOSR */
                Local1 = (Local0 & 0x01)
            }

            Local1 = (Local0 & 0x06)
            If ((Local1 == 0x00)){}
            S4D3 = 0x03
            Local0 = IOSR /* \IOSR */
            Local1 = (Local0 & 0x01)
            While ((Local1 != 0x00))
            {
                Local0 = IOSR /* \IOSR */
                Local1 = (Local0 & 0x01)
            }

            IOIR = 0xCE00AB07
            IOSR = 0x0600
            IONR = 0xF000
            Local0 = IOSR /* \IOSR */
            Local0 |= 0x01
            IOSR = Local0
            Local0 = IOSR /* \IOSR */
            Local1 = (Local0 & 0x01)
            While ((Local1 != 0x00))
            {
                Local0 = IOSR /* \IOSR */
                Local1 = (Local0 & 0x01)
            }

            Local1 = (Local0 & 0x06)
            If ((Local1 == 0x00))
            {
                Local3 = IODR /* \IODR */
            }

            Local3 |= 0x0100
            IOSR = 0x0700
            IODR = Local3
            IONR = 0xF000
            Local0 = IOSR /* \IOSR */
            Local0 |= 0x01
            IOSR = Local0
            Local0 = IOSR /* \IOSR */
            Local1 = (Local0 & 0x01)
            While ((Local1 != 0x00))
            {
                Local0 = IOSR /* \IOSR */
                Local1 = (Local0 & 0x01)
            }

            Local1 = (Local0 & 0x06)
            If ((Local1 == 0x00)){}
        }
    }

    Method (TRAP, 2, Serialized)
    {
        SMIF = Arg1
        If ((Arg0 == \TRTP))
        {
            TRP0 = 0x00
        }

        If ((Arg0 == \TRTD))
        {
            DTSF = Arg1
            TRPD = 0x00
            Return (DTSF) /* \DTSF */
        }

        If ((Arg0 == \TRTI))
        {
            TRPH = 0x00
        }

        Return (SMIF) /* \SMIF */
    }

    Scope (\_SB)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            PINI ()
            If (OSDW ())
            {
                If (USBO)
                {
                    EH1D = 0x01
                    EH2D = 0x01
                }
            }
            Else
            {
                RUSB ()
            }
        }

        Device (PNLF)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            Name (_HID, EisaId ("APP0002"))  // _HID: Hardware ID
            Name (_CID, "backlight")  // _CID: Compatible ID
            Name (_UID, 0x0E)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Scope (\_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            \_SB.PCI0.RMCR ()
            OSYS = 0x07DC
            If (CondRefOf (\_OSI, Local0))
            {
                If (_OSI ("Darwin"))
                {
                    OSYS = 0x2710
                }

                If (\_OSI ("Linux"))
                {
                    OSYS = 0x03E8
                }

                If (\_OSI ("Windows 2009"))
                {
                    OSYS = 0x07D9
                }

                If (\_OSI ("Windows 2012"))
                {
                    OSYS = 0x07DC
                }
            }
        }

        Method (NHPG, 0, Serialized)
        {
        }

        Method (NPME, 0, Serialized)
        {
        }
    }

    Scope (\)
    {
        Name (PICM, 0x00)
        Method (OSDW, 0, NotSerialized)
        {
            If ((OSYS == 0x2710))
            {
                Return (0x01)
            }
            Else
            {
                Return (0x00)
            }
        }

        Method (PINI, 0, NotSerialized)
        {
            OSYS = 0x07DC
            If (CondRefOf (_OSI, Local0))
            {
                If (_OSI ("Darwin"))
                {
                    OSYS = 0x2710
                }
                ElseIf (_OSI ("Linux"))
                {
                    OSYS = 0x03E8
                }
                ElseIf (_OSI ("Windows 2009"))
                {
                    OSYS = 0x07D9
                }
                ElseIf (_OSI ("Windows 2012"))
                {
                    OSYS = 0x07DC
                }
            }
            Else
            {
                OSYS = 0x07DC
            }
        }

        Method (RUSB, 0, NotSerialized)
        {
            If ((VEID == 0x8086))
            {
                If (\_SB.PCI0.LPCB.RTC.ISLG)
                {
                    \_SB.PCI0.XHC1.LEGM ()
                }
            }
        }

        Method (HUSB, 0, NotSerialized)
        {
            If ((VEID == 0x8086))
            {
                \_SB.PCI0.XHC1.LEGM ()
            }
        }
    }

    Scope (\_SB.PCI0)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00004000,         // Address Length
                    _Y17)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00008000,         // Address Length
                    _Y19)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y1A)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y1B)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y1C)
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00020000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFED90000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED45000,         // Address Base
                    0x0004B000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFF000000,         // Address Base
                    0x01000000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y18)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y17._BAS, RBR0)  // _BAS: Base Address
                RBR0 = (\_SB.PCI0.LPCB.RCBA << 0x0E)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y18._BAS, TBR0)  // _BAS: Base Address
                TBR0 = TBAB /* \TBAB */
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y18._LEN, TBLN)  // _LEN: Length
                If ((TBAB == 0x00))
                {
                    TBLN = 0x00
                }

                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y19._BAS, MBR0)  // _BAS: Base Address
                MBR0 = (\_SB.PCI0.MHBR << 0x0F)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y1A._BAS, DBR0)  // _BAS: Base Address
                DBR0 = (\_SB.PCI0.DIBR << 0x0C)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y1B._BAS, EBR0)  // _BAS: Base Address
                EBR0 = (\_SB.PCI0.EPBR << 0x0C)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y1C._BAS, XBR0)  // _BAS: Base Address
                XBR0 = (\_SB.PCI0.PXBR << 0x1A)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y1C._LEN, XSZ0)  // _LEN: Length
                XSZ0 = (0x10000000 >> \_SB.PCI0.PXSZ)
                Return (BUF0) /* \_SB_.PCI0.PDRC.BUF0 */
            }
        }
    }

    Scope (\)
    {
        Name (PCHS, 0x00000001)
        OperationRegion (IO_T, SystemIO, 0x0800, 0x10)
        Field (IO_T, ByteAcc, NoLock, Preserve)
        {
            TRPI,   16, 
            Offset (0x04), 
            Offset (0x06), 
            Offset (0x08), 
            TRP0,   8, 
            Offset (0x0A), 
            Offset (0x0B), 
            Offset (0x0C), 
            Offset (0x0D), 
            Offset (0x0E), 
            Offset (0x0F), 
            Offset (0x10)
        }

        OperationRegion (IO_D, SystemIO, 0x0810, 0x04)
        Field (IO_D, ByteAcc, NoLock, Preserve)
        {
            TRPD,   8
        }

        OperationRegion (IO_H, SystemIO, 0x1000, 0x04)
        Field (IO_H, ByteAcc, NoLock, Preserve)
        {
            TRPH,   8
        }

        OperationRegion (RCRB, SystemMemory, \SRCB, 0x4000)
        Field (RCRB, DWordAcc, Lock, Preserve)
        {
            Offset (0x1000), 
            Offset (0x2330), 
            IOIR,   32, 
            IODR,   32, 
            IOSR,   16, 
            IONR,   16, 
            Offset (0x3000), 
            Offset (0x3404), 
            HPAS,   2, 
                ,   5, 
            HPAE,   1, 
            Offset (0x3418), 
                ,   1, 
                ,   1, 
            SATD,   1, 
            SMBD,   1, 
            HDAD,   1, 
                ,   2, 
            UH6D,   1, 
            UH1D,   1, 
            UH2D,   1, 
            UH3D,   1, 
            UH4D,   1, 
            UH5D,   1, 
            EH2D,   1, 
                ,   1, 
            EH1D,   1, 
            RP1D,   1, 
            RP2D,   1, 
            RP3D,   1, 
            RP4D,   1, 
            RP5D,   1, 
            RP6D,   1, 
            RP7D,   1, 
            RP8D,   1, 
                ,   4, 
            UH7D,   1
        }
    }

    Scope (\_GPE)
    {
        Method (_L07, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.SBUS.HSTS = 0x20
        }

        Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((\_SB.PCI0.IGPU.GSSE && !GSMI))
            {
                \_SB.PCI0.IGPU.GSCI ()
            }
            Else
            {
                \_SB.PCI0.IGPU.GEFC = 0x00
                SCIS = 0x01
                \_SB.PCI0.IGPU.GSSE = 0x00
                \_SB.PCI0.IGPU.SCIE = 0x00
            }
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.P0P2, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP03, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP04, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP05, 0x02) // Device Wake
            \_SB.PCI0.TGPE ()
            Notify (\_SB.PCI0.RP03.ARPT, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
            Notify (\_SB.PCI0.XHC1, 0x02) // Device Wake
            If (OSDW ())
            {
                Notify (\_SB.PCI0.HDEF, 0x02) // Device Wake
            }
        }
    }

    Method (DTGP, 5, NotSerialized)
    {
        If ((Arg0 == ToUUID ("a0b5b7c6-1318-441c-b0c9-fe695eaf949b") /* Unknown UUID */))
        {
            If ((Arg1 == One))
            {
                If ((Arg2 == Zero))
                {
                    Arg4 = Buffer (0x01)
                        {
                             0x03                                             // .
                        }
                    Return (One)
                }

                If ((Arg2 == One))
                {
                    Return (One)
                }
            }
        }

        Arg4 = Buffer (0x01)
            {
                 0x00                                             // .
            }
        Return (Zero)
    }

    Name (_S0, Package (0x03)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00
    })
    Name (_S4, Package (0x03)  // _S4_: S4 System State
    {
        0x06, 
        0x06, 
        0x00
    })
    Name (_S5, Package (0x03)  // _S5_: S5 System State
    {
        0x07, 
        0x07, 
        0x00
    })
    Method (_TTS, 1, NotSerialized)  // _TTS: Transition To State
    {
        SLTP = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        P80D = 0x00
        P8XH (0x00, Arg0)
        \_SB.PCI0.LPCB.EC.ECSS = Arg0
        If (!OSDW ())
        {
            If ((Arg0 == 0x03))
            {
                Local0 = 0x00
                While (((\_SB.PCI0.RP04.CMRA.DPST != 0x03) && (Local0 < 0x1388)))
                {
                    Sleep (0x01)
                    Local0++
                }

                \_SB.PCI0.RP04.CMRA.CMPE (0x00)
            }

            If ((Arg0 >= 0x03))
            {
                \_SB.PCI0.UTLK (0x01, 0x03E8)
                P2TR = 0x05
                Sleep (0xFA)
                GP23 = 0x00
                Local0 = T2PR /* External reference */
            }
        }

        If ((!OSDW () && (Arg0 >= 0x04)))
        {
            \_SB.PCI0.LPCB.EC.EWLO = 0x00
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        P8XH (0x00, 0x00)
        \_SB.PCI0.LPCB.EC.ECSS = 0x00
        If (OSDW ()){}
        ElseIf ((Arg0 == 0x03))
        {
            \_SB.PCI0.RP04.CMRA.CMPE (0x01)
        }

        LIDS = \_SB.PCI0.LPCB.EC.ELSW
        \_SB.PCI0.IGPU.CLID = \_SB.PCI0.LPCB.EC.ELSW
        PWRS = \_SB.PCI0.LPCB.EC.EACP
        If (!OSDW ())
        {
            \_SB.PCI0.LPCB.EC.LWE0 = 0x00
            \_SB.PCI0.LPCB.EC.LWE1 = 0x00
            \_SB.PCI0.LPCB.EC.LWE2 = 0x00
            \_SB.PCI0.LPCB.EC.LWE3 = 0x00
            If ((Arg0 == 0x03))
            {
                \_SB.PCI0.DTLK ()
            }

            If ((Arg0 == 0x04))
            {
                \_SB.PCI0.RMCW ()
            }
        }

        PNOT ()
        If ((Arg0 == 0x04))
        {
            HUSB ()
        }

        If (OSDW ())
        {
            If (USBO)
            {
                EH1D = 0x01
                EH2D = 0x01
            }
        }

        Return (Package (0x02)
        {
            0x00, 
            0x00
        })
    }

    Scope (\)
    {
        OperationRegion (GPIO, SystemIO, \GPBS, 0x64)
        Field (GPIO, ByteAcc, NoLock, Preserve)
        {
                ,   5, 
            GU05,   1, 
            Offset (0x01), 
            Offset (0x02), 
            Offset (0x03), 
            Offset (0x04), 
            GD00,   4, 
            GD04,   1, 
                ,   5, 
            GD10,   1, 
                ,   1, 
            GD12,   1, 
                ,   1, 
            GD14,   1, 
            Offset (0x07), 
            GD24,   1, 
            Offset (0x08), 
            Offset (0x0C), 
                ,   3, 
            GP03,   1, 
            GP04,   1, 
            GP05,   1, 
            GP06,   1, 
            GP07,   1, 
            GP08,   1, 
            GP09,   1, 
            GP10,   1, 
            GP11,   1, 
            GP12,   1, 
            GP13,   1, 
            GP14,   1, 
            GP15,   1, 
            GP16,   1, 
            GP17,   1, 
            GP18,   1, 
            GP19,   1, 
            GP20,   1, 
            GP21,   1, 
            GP22,   1, 
            GP23,   1, 
            GP24,   1, 
                ,   2, 
            GP27,   1, 
            GP28,   1, 
            Offset (0x10), 
            Offset (0x18), 
            GB00,   8, 
            GB01,   8, 
            GB02,   8, 
            GB03,   8, 
            Offset (0x2C), 
                ,   3, 
            GI03,   1, 
            GI04,   1, 
            GI05,   1, 
            GI06,   1, 
            Offset (0x2D), 
            GI08,   1, 
            GI09,   1, 
            GI10,   1, 
            GI11,   1, 
            Offset (0x2E), 
            Offset (0x2F), 
            Offset (0x30), 
            Offset (0x31), 
            Offset (0x32), 
            Offset (0x33), 
            Offset (0x34), 
            Offset (0x35), 
            GD40,   1, 
            GD41,   1, 
            GD42,   1, 
                ,   1, 
            GD44,   1, 
                ,   1, 
            GD46,   1, 
            Offset (0x36), 
                ,   6, 
            GD54,   1, 
                ,   4, 
            GD59,   1, 
            GD60,   1, 
            Offset (0x38), 
                ,   1, 
            GP33,   1, 
                ,   2, 
            GP36,   1, 
            Offset (0x39), 
            GP40,   1, 
            GP41,   1, 
            GP42,   1, 
                ,   1, 
            GP44,   1, 
            GP45,   1, 
            GP46,   1, 
            Offset (0x3A), 
            GP48,   1, 
            GP49,   1, 
            GP50,   1, 
            GP51,   1, 
            GP52,   1, 
            GP53,   1, 
            GP54,   1, 
                ,   4, 
            GP59,   1, 
            GP60,   1, 
            Offset (0x3C), 
            Offset (0x40), 
            Offset (0x41), 
            Offset (0x42), 
            Offset (0x43), 
            Offset (0x44), 
                ,   4, 
            GD68,   1, 
            GD69,   1, 
            GD70,   1, 
            GD71,   1, 
            GD72,   1, 
            GD73,   1, 
            GD74,   1, 
                ,   4, 
                ,   8, 
                ,   8, 
            Offset (0x48), 
            GP64,   1, 
                ,   3, 
            GP68,   1, 
            GP69,   1, 
            Offset (0x49), 
            GP72,   1, 
            GP73,   1, 
            GP74,   1, 
            Offset (0x4A), 
            Offset (0x4B), 
            Offset (0x4C)
        }
    }
}



ECDT
----
[000h 0000 004h]                   Signature : "ECDT"    [Embedded Controller Boot Resources Table]
[004h 0004 004h]                Table Length : 00000053
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 39
[00Ah 0010 006h]                      Oem ID : "APPLE "
[010h 0016 008h]                Oem Table ID : "Apple00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "Loki"
[020h 0032 004h]       Asl Compiler Revision : 0000005F


[024h 0036 00Ch]     Command/Status Register : [Generic Address Structure]
[024h 0036 001h]                    Space ID : 01 [SystemIO]
[025h 0037 001h]                   Bit Width : 08
[026h 0038 001h]                  Bit Offset : 00
[027h 0039 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[028h 0040 008h]                     Address : 0000000000000066

[030h 0048 00Ch]               Data Register : [Generic Address Structure]
[030h 0048 001h]                    Space ID : 01 [SystemIO]
[031h 0049 001h]                   Bit Width : 08
[032h 0050 001h]                  Bit Offset : 00
[033h 0051 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[034h 0052 008h]                     Address : 0000000000000062

[03Ch 0060 004h]                         UID : 00000000
[040h 0064 001h]                  GPE Number : 17
[041h 0065 012h]                    Namepath : "\_SB.PCI0.LPCB.EC"

Raw Table Data: Length 83 (0x53)

    0000: 45 43 44 54 53 00 00 00 01 39 41 50 50 4C 45 20  // ECDTS....9APPLE 
    0010: 41 70 70 6C 65 30 30 00 01 00 00 00 4C 6F 6B 69  // Apple00.....Loki
    0020: 5F 00 00 00 01 08 00 00 66 00 00 00 00 00 00 00  // _.......f.......
    0030: 01 08 00 00 62 00 00 00 00 00 00 00 00 00 00 00  // ....b...........
    0040: 17 5C 5F 53 42 2E 50 43 49 30 2E 4C 50 43 42 2E  // .\_SB.PCI0.LPCB.
    0050: 45 43 00                                         // EC.


FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 000000F4
[008h 0008 001h]                    Revision : 05
[009h 0009 001h]                    Checksum : 2E
[00Ah 0010 006h]                      Oem ID : "APPLE "
[010h 0016 008h]                Oem Table ID : "Apple00"
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : "Loki"
[020h 0032 004h]       Asl Compiler Revision : 0000005F

[024h 0036 004h]                FACS Address : 7AD18000
[028h 0040 004h]                DSDT Address : 7AD80000
[02Ch 0044 001h]                       Model : 00
[02Dh 0045 001h]                  PM Profile : 02 [Mobile]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B2
[034h 0052 001h]           ACPI Enable Value : F0
[035h 0053 001h]          ACPI Disable Value : F1
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 00
[038h 0056 004h]    PM1A Event Block Address : 00001800
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00001804
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 00001850
[04Ch 0076 004h]      PM Timer Block Address : 00001808
[050h 0080 004h]          GPE0 Block Address : 00001820
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 10
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 10
[05Fh 0095 001h]                _CST Support : 85
[060h 0096 002h]                  C2 Latency : 0065
[062h 0098 002h]                  C3 Latency : 03E9
[064h 0100 002h]              CPU Cache Size : 0000
[066h 0102 002h]          Cache Flush Stride : 0000
[068h 0104 001h]           Duty Cycle Offset : 01
[069h 0105 001h]            Duty Cycle Width : 03
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 32
[06Dh 0109 002h]  Boot Flags (decoded below) : 0001
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 0000C4A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 01 [Byte Access:8]
[078h 0120 008h]                     Address : 0000000000000CF9

[080h 0128 001h]        Value to cause reset : 06
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 00
[084h 0132 008h]                FACS Address : 000000007AD18000
[08Ch 0140 008h]                DSDT Address : 000000007AD80000
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 03 [DWord Access:32]
[098h 0152 008h]                     Address : 0000000000001800

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 01 [SystemIO]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000001804

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 01 [SystemIO]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200 008h]                     Address : 0000000000001850

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000001808

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 00
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224 008h]                     Address : 0000000000001820

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 01 [SystemIO]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236 008h]                     Address : 0000000000000000


// ACPI Warning: FADT revision 5 does not match length: found F4 expected 10C

Raw Table Data: Length 244 (0xF4)

    0000: 46 41 43 50 F4 00 00 00 05 2E 41 50 50 4C 45 20  // FACP......APPLE 
    0010: 41 70 70 6C 65 30 30 00 00 00 00 00 4C 6F 6B 69  // Apple00.....Loki
    0020: 5F 00 00 00 00 80 D1 7A 00 00 D8 7A 00 02 09 00  // _......z...z....
    0030: B2 00 00 00 F0 F1 00 00 00 18 00 00 00 00 00 00  // ................
    0040: 04 18 00 00 00 00 00 00 50 18 00 00 08 18 00 00  // ........P.......
    0050: 20 18 00 00 00 00 00 00 04 02 01 04 10 00 10 85  //  ...............
    0060: 65 00 E9 03 00 00 00 00 01 03 0D 00 32 01 00 00  // e...........2...
    0070: A5 C4 00 00 01 08 00 01 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 00 00 80 D1 7A 00 00 00 00 00 00 D8 7A  // .......z.......z
    0090: 00 00 00 00 01 20 00 03 00 18 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 00 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 18 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 00 50 18 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 03 08 18 00 00 00 00 00 00 01 00 00 01  // . ..............
    00E0: 20 18 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : 00000000
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 01
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 8C
[00Ah 0010 006h]                      Oem ID : "APPLE "
[010h 0016 008h]                Oem Table ID : "Apple00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "Loki"
[020h 0032 004h]       Asl Compiler Revision : 0000005F

[024h 0036 004h]           Hardware Block ID : 8086A201

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 40
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 0080
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 8C 41 50 50 4C 45 20  // HPET8.....APPLE 
    0010: 41 70 70 6C 65 30 30 00 01 00 00 00 4C 6F 6B 69  // Apple00.....Loki
    0020: 5F 00 00 00 01 A2 86 80 00 40 00 00 00 00 D0 FE  // _........@......
    0030: 00 00 00 00 00 80 00 00                          // ........


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 58
[00Ah 0010 006h]                      Oem ID : "APPLE "
[010h 0016 008h]                Oem Table ID : "Apple00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "Loki"
[020h 0032 004h]       Asl Compiler Revision : 0000005F

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000E0000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : 9B
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 58 41 50 50 4C 45 20  // MCFG<....XAPPLE 
    0010: 41 70 70 6C 65 30 30 00 01 00 00 00 4C 6F 6B 69  // Apple00.....Loki
    0020: 5F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // _...............
    0030: 00 00 00 00 00 00 00 9B 00 00 00 00              // ............


SBST
----
[000h 0000 004h]                   Signature : "SBST"    [Smart Battery Specification Table]
[004h 0004 004h]                Table Length : 00000030
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 84
[00Ah 0010 006h]                      Oem ID : "APPLE "
[010h 0016 008h]                Oem Table ID : "Apple00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "Loki"
[020h 0032 004h]       Asl Compiler Revision : 0000005F

[024h 0036 004h]               Warning Level : 0000001E
[028h 0040 004h]                   Low Level : 00000014
[02Ch 0044 004h]              Critical Level : 0000000A

Raw Table Data: Length 48 (0x30)

    0000: 53 42 53 54 30 00 00 00 01 84 41 50 50 4C 45 20  // SBST0.....APPLE 
    0010: 41 70 70 6C 65 30 30 00 01 00 00 00 4C 6F 6B 69  // Apple00.....Loki
    0020: 5F 00 00 00 1E 00 00 00 14 00 00 00 0A 00 00 00  // _...............


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "APPLE ", "SsdtS3", 0x00001000)
{
    Name (_S3, Package (0x03)  // _S3_: S3 System State
    {
        0x05, 
        0x05, 
        0x00
    })
}



SSDT10
------
DefinitionBlock ("", "SSDT", 1, "PmRef", "ApCst", 0x00003000)
{
    External (_PR_.CPU0._CST, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Cst", 0x00003001)
{
    External (_PR_.CPU0, DeviceObj)
    External (C3LT, IntObj)
    External (C3MW, IntObj)
    External (C6LT, IntObj)
    External (C6MW, IntObj)
    External (C7LT, IntObj)
    External (C7MW, IntObj)
    External (CDLT, IntObj)
    External (CDLV, IntObj)
    External (CDMW, IntObj)
    External (CDPW, IntObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (C1TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x01, 
            0x01, 
            0x03E8
        })
        Name (C3TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001814, // Address
                    ,)
            }, 

            0x02, 
            0x00, 
            0x01F4
        })
        Name (C6TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001815, // Address
                    ,)
            }, 

            0x02, 
            0x00, 
            0x015E
        })
        Name (C7TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x02, 
            0x00, 
            0xC8
        })
        Name (CDTM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x03, 
            0x00, 
            0x00
        })
        Name (MWES, ResourceTemplate ()
        {
            Register (FFixedHW, 
                0x01,               // Bit Width
                0x02,               // Bit Offset
                0x0000000000000000, // Address
                0x01,               // Access Size
                )
        })
        Name (AC2V, 0x00)
        Name (AC3V, 0x00)
        Name (C3ST, Package (0x04)
        {
            0x03, 
            Package (0x00){}, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C2ST, Package (0x03)
        {
            0x02, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C1ST, Package (0x02)
        {
            0x01, 
            Package (0x00){}
        })
        Name (CSTF, 0x00)
        Name (GEAR, 0x00)
        Method (_CST, 0, Serialized)  // _CST: C-States
        {
            If (!CSTF)
            {
                C3TM [0x02] = C3LT /* External reference */
                C6TM [0x02] = C6LT /* External reference */
                C7TM [0x02] = C7LT /* External reference */
                CDTM [0x02] = CDLT /* External reference */
                CDTM [0x03] = CDPW /* External reference */
                DerefOf (CDTM [0x00]) [0x07] = CDLV /* External reference */
                If (((CFGD & 0x0800) && (PDC0 & 0x0200)))
                {
                    C1TM [0x00] = MWES /* \_PR_.CPU0.MWES */
                    C3TM [0x00] = MWES /* \_PR_.CPU0.MWES */
                    C6TM [0x00] = MWES /* \_PR_.CPU0.MWES */
                    C7TM [0x00] = MWES /* \_PR_.CPU0.MWES */
                    CDTM [0x00] = MWES /* \_PR_.CPU0.MWES */
                    DerefOf (C3TM [0x00]) [0x07] = C3MW /* External reference */
                    DerefOf (C6TM [0x00]) [0x07] = C6MW /* External reference */
                    DerefOf (C7TM [0x00]) [0x07] = C7MW /* External reference */
                    DerefOf (CDTM [0x00]) [0x07] = CDMW /* External reference */
                }
                ElseIf (((CFGD & 0x0800) && (PDC0 & 0x0100)))
                {
                    C1TM [0x00] = MWES /* \_PR_.CPU0.MWES */
                }

                CSTF = Ones
            }

            AC2V = Zero
            AC3V = Zero
            C3ST [0x01] = C1TM /* \_PR_.CPU0.C1TM */
            If ((CFGD & 0x20))
            {
                C3ST [0x02] = C7TM /* \_PR_.CPU0.C7TM */
                AC2V = Ones
            }
            ElseIf ((CFGD & 0x10))
            {
                C3ST [0x02] = C6TM /* \_PR_.CPU0.C6TM */
                AC2V = Ones
            }
            ElseIf ((CFGD & 0x08))
            {
                C3ST [0x02] = C3TM /* \_PR_.CPU0.C3TM */
                AC2V = Ones
            }

            If ((CFGD & 0x4000))
            {
                C3ST [0x03] = CDTM /* \_PR_.CPU0.CDTM */
                AC3V = Ones
            }

            If ((GEAR == 0x01))
            {
                If ((CFGD & 0x08))
                {
                    C3ST [0x02] = C3TM /* \_PR_.CPU0.C3TM */
                    AC2V = Ones
                    AC3V = Zero
                }
                Else
                {
                    AC2V = Zero
                    AC3V = Zero
                }
            }

            If ((GEAR == 0x02))
            {
                AC2V = Zero
                AC3V = Zero
            }

            If ((AC2V && AC3V))
            {
                Return (C3ST) /* \_PR_.CPU0.C3ST */
            }
            ElseIf (AC2V)
            {
                C2ST [0x01] = DerefOf (C3ST [0x01])
                C2ST [0x02] = DerefOf (C3ST [0x02])
                Return (C2ST) /* \_PR_.CPU0.C2ST */
            }
            ElseIf (AC3V)
            {
                C2ST [0x01] = DerefOf (C3ST [0x01])
                C2ST [0x02] = DerefOf (C3ST [0x03])
                DerefOf (C2ST [0x02]) [0x01] = 0x02
                Return (C2ST) /* \_PR_.CPU0.C2ST */
            }
            Else
            {
                C1ST [0x01] = DerefOf (C3ST [0x01])
                Return (C1ST) /* \_PR_.CPU0.C1ST */
            }
        }

        Method (ACST, 0, NotSerialized)
        {
            If ((CFGD & 0x20))
            {
                Return (Package (0x06)
                {
                    0x01, 
                    0x04, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        0x01, 
                        0x03, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000010, // Address
                                0x03,               // Access Size
                                )
                        }, 

                        0x03, 
                        0xCD, 
                        0x01F4
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000020, // Address
                                0x03,               // Access Size
                                )
                        }, 

                        0x06, 
                        0xF5, 
                        0x015E
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000030, // Address
                                0x03,               // Access Size
                                )
                        }, 

                        0x07, 
                        0xF5, 
                        0xC8
                    }
                })
            }

            Return (Package (0x05)
            {
                0x01, 
                0x03, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000000, // Address
                            0x01,               // Access Size
                            )
                    }, 

                    0x01, 
                    0x03, 
                    0x03E8
                }, 

                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000010, // Address
                            0x03,               // Access Size
                            )
                    }, 

                    0x03, 
                    0xCD, 
                    0x01F4
                }, 

                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000020, // Address
                            0x03,               // Access Size
                            )
                    }, 

                    0x06, 
                    0xF5, 
                    0x015E
                }
            })
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 1, "PmRef", "ApIst", 0x00003000)
{
    External (_PR_.CPU0._PCT, IntObj)
    External (_PR_.CPU0._PPC, IntObj)
    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU0.APSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)
    External (PDC0, UnknownObj)
    External (TCNT, IntObj)

    Scope (\_PR.CPU1)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (APSS, 0, NotSerialized)
        {
            Return (\_PR.CPU0.APSS) /* External reference */
        }

        Name (PSDF, 0x00)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [0x00]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [0x00]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU1.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU1.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU2)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (APSS, 0, NotSerialized)
        {
            Return (\_PR.CPU0.APSS) /* External reference */
        }

        Name (PSDF, 0x00)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [0x00]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [0x00]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU2.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU2.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU3)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (APSS, 0, NotSerialized)
        {
            Return (\_PR.CPU0.APSS) /* External reference */
        }

        Name (PSDF, 0x00)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [0x00]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [0x00]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU3.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU3.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU4)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (APSS, 0, NotSerialized)
        {
            Return (\_PR.CPU0.APSS) /* External reference */
        }

        Name (PSDF, 0x00)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [0x00]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [0x00]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU4.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU4.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU5)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (APSS, 0, NotSerialized)
        {
            Return (\_PR.CPU0.APSS) /* External reference */
        }

        Name (PSDF, 0x00)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [0x00]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [0x00]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU5.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU5.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU6)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (APSS, 0, NotSerialized)
        {
            Return (\_PR.CPU0.APSS) /* External reference */
        }

        Name (PSDF, 0x00)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [0x00]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [0x00]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU6.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU6.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU7)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (APSS, 0, NotSerialized)
        {
            Return (\_PR.CPU0.APSS) /* External reference */
        }

        Name (PSDF, 0x00)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [0x00]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [0x00]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU7.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU7.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFC, 
                0x80
            }
        })
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "APPLE ", "SmcDppt", 0x00001000)
{


SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "CpuPm", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU0._PPC, UnknownObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0x75527190, 
            0x00000000, 
            "APIST   ", 
            0x7AF88190, 
            0x0000067C, 
            "CPU0CST ", 
            0x7AF87890, 
            0x000004F0, 
            "APCST   ", 
            0x7AF86D90, 
            0x00000119
        })
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\PDC2, 0x80000000)
        Name (\PDC3, 0x80000000)
        Name (\PDC4, 0x80000000)
        Name (\PDC5, 0x80000000)
        Name (\PDC6, 0x80000000)
        Name (\PDC7, 0x80000000)
        Name (\SDTL, 0x00)
    }

    Scope (\_PR)
    {
        OperationRegion (PPMT, SystemMemory, 0x7AD17F90, 0x003A)
        Field (PPMT, AnyAcc, Lock, Preserve)
        {
            PGRV,   8, 
            CFGD,   32, 
            Offset (0x06), 
            ACRT,   8, 
            APSV,   8, 
            AAC0,   8, 
            CPID,   32, 
            CPPC,   8, 
            CCTP,   8, 
            CLVL,   8, 
            CBMI,   8, 
            PL10,   16, 
            PL20,   16, 
            PLW0,   8, 
            CTC0,   8, 
            TAR0,   8, 
            PPC0,   8, 
            PL11,   16, 
            PL21,   16, 
            PLW1,   8, 
            CTC1,   8, 
            TAR1,   8, 
            PPC1,   8, 
            PL12,   16, 
            PL22,   16, 
            PLW2,   8, 
            CTC2,   8, 
            TAR2,   8, 
            PPC2,   8, 
            C3MW,   8, 
            C6MW,   8, 
            C7MW,   8, 
            CDMW,   8, 
            C3LT,   16, 
            C6LT,   16, 
            C7LT,   16, 
            CDLT,   16, 
            CDLV,   16, 
            CDPW,   16, 
            MPMF,   8
        }
    }

    Scope (\_PR.CPU0)
    {
        Name (HI0, 0x00)
        Name (HC0, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            If (CondRefOf (\_PR.CPU0._PPC))
            {
                \_PR.CPU0._PPC = CPPC /* \_PR_.CPPC */
            }

            Local0 = CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (CPDC, 1, NotSerialized)
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2))
        }

        Method (COSC, 4, NotSerialized)
        {
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            Return (Arg3)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, 0x00, STS0)
            CreateDWordField (Arg0, 0x04, CAP0)
            If (((STS0 == 0x06) || (STS0 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Zero)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0.GCAP.CAP0 */
            If ((CFGD & 0x7A))
            {
                If ((((CFGD & 0x0200) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            Return (Zero)
        }

        Method (DTGP, 5, NotSerialized)
        {
            If ((Arg0 == ToUUID ("a0b5b7c6-1318-441c-b0c9-fe695eaf949b") /* Unknown UUID */))
            {
                If ((Arg1 == One))
                {
                    If ((Arg2 == Zero))
                    {
                        Arg4 = Buffer (0x01)
                            {
                                 0x03                                             // .
                            }
                        Return (One)
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }
                }
            }

            Arg4 = Buffer (0x01)
                {
                     0x00                                             // .
                }
            Return (Zero)
        }

        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            Debug = "Writing plugin-type to Registry!"
            Local0 = Package (0x02)
                {
                    "plugin-type", 
                    0x01
                }
            DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))
            Return (Local0)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, 0x00)
        Name (HC1, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, 0x00, STS1)
            CreateDWordField (Arg0, 0x04, CAP1)
            If (((STS1 == 0x06) || (STS1 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS1 & 0x01))
            {
                CAP1 &= 0x0BFF
                Return (Zero)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1.GCAP.CAP1 */
            If (((PDC1 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((PDC1 & 0x18))
            {
                APCT ()
            }

            PDC0 = PDC1 /* \PDC1 */
            Return (Zero)
        }

        Method (APCT, 0, NotSerialized)
        {
            If (((CFGD & 0x7A) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
            }
        }

        Method (APPT, 0, NotSerialized)
        {
            If (((CFGD & 0x01) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
            }
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, 0x00, STS2)
            CreateDWordField (Arg0, 0x04, CAP2)
            If (((STS2 == 0x06) || (STS2 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS2 & 0x01))
            {
                CAP2 &= 0x0BFF
                Return (Zero)
            }

            PDC2 = ((PDC2 & 0x7FFFFFFF) | CAP2) /* \_PR_.CPU2.GCAP.CAP2 */
            If (((PDC2 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC2 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC2 /* \PDC2 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, 0x00, STS3)
            CreateDWordField (Arg0, 0x04, CAP3)
            If (((STS3 == 0x06) || (STS3 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS3 & 0x01))
            {
                CAP3 &= 0x0BFF
                Return (Zero)
            }

            PDC3 = ((PDC3 & 0x7FFFFFFF) | CAP3) /* \_PR_.CPU3.GCAP.CAP3 */
            If (((PDC3 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC3 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC3 /* \PDC3 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, 0x00, STS4)
            CreateDWordField (Arg0, 0x04, CAP4)
            If (((STS4 == 0x06) || (STS4 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS4 & 0x01))
            {
                CAP4 &= 0x0BFF
                Return (Zero)
            }

            PDC4 = ((PDC4 & 0x7FFFFFFF) | CAP4) /* \_PR_.CPU4.GCAP.CAP4 */
            If (((PDC4 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC4 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC4 /* \PDC4 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, 0x00, STS5)
            CreateDWordField (Arg0, 0x04, CAP5)
            If (((STS5 == 0x06) || (STS5 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS5 & 0x01))
            {
                CAP5 &= 0x0BFF
                Return (Zero)
            }

            PDC5 = ((PDC5 & 0x7FFFFFFF) | CAP5) /* \_PR_.CPU5.GCAP.CAP5 */
            If (((PDC5 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC5 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC5 /* \PDC5 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, 0x00, STS6)
            CreateDWordField (Arg0, 0x04, CAP6)
            If (((STS6 == 0x06) || (STS6 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS6 & 0x01))
            {
                CAP6 &= 0x0BFF
                Return (Zero)
            }

            PDC6 = ((PDC6 & 0x7FFFFFFF) | CAP6) /* \_PR_.CPU6.GCAP.CAP6 */
            If (((PDC6 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC6 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC6 /* \PDC6 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, 0x00, STS7)
            CreateDWordField (Arg0, 0x04, CAP7)
            If (((STS7 == 0x06) || (STS7 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS7 & 0x01))
            {
                CAP7 &= 0x0BFF
                Return (Zero)
            }

            PDC7 = ((PDC7 & 0x7FFFFFFF) | CAP7) /* \_PR_.CPU7.GCAP.CAP7 */
            If (((PDC7 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC7 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC7 /* \PDC7 */
            Return (Zero)
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "APPLE ", "SaHdaCdc", 0x00001000)
{
    /*
     * iASL Warning: There were 2 external control methods found during
     * disassembly, but only 0 were resolved (2 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0, DeviceObj)
    External (AUDA, IntObj)
    External (AUDB, IntObj)
    External (AUDC, IntObj)
    External (BBAR, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (CADR, IntObj)
    External (CCNT, UnknownObj)
    External (DTGP, MethodObj)    // Warning: Unknown method, guessing 5 arguments

    Scope (\_SB.PCI0)
    {
        Device (HDAU)
        {
            Name (_ADR, 0x00030000)  // _ADR: Address
            OperationRegion (HDAH, PCI_Config, 0x00, 0x40)
            Field (HDAH, ByteAcc, NoLock, Preserve)
            {
                VID0,   16, 
                DID0,   16, 
                Offset (0x10), 
                ABAR,   32
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((VID0 != 0xFFFF))
                {
                    Return (0x0F)
                }

                Return (0x00)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("a0b5b7c6-1318-441c-b0c9-fe695eaf949b") /* Unknown UUID */))
                {
                    If (((VID0 & 0xFFFF) != 0xFFFF))
                    {
                        Local0 = Package (0x02)
                            {
                                "hda-gfx", 
                                Buffer (0x0A)
                                {
                                    "onboard-1"
                                }
                            }
                        DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))
                        Return (Local0)
                    }
                }

                Return (0x80000002)
            }

            Method (ASTR, 0, Serialized)
            {
                If (((ABAR != 0xFFFFFFFF) && ((ABAR & 0xFFFFC000) != 
                    0x00)))
                {
                    BBAR (EMWA = AUDA /* External reference */ = (BBAR (0x1000) + BBAR (OperationRegion (RPCY, SystemMemory, BBAR (0x25), 
                        Field (RPCY, DWordAcc, NoLock, Preserve)
                                        {
                                            Offset (0x0C), 
                                            EM4W,   32, 
                                            EMWA,   32, 
                                            Offset (0x1C), 
                                            ADWA,   32
                                        })))) = (ABAR & 0xFFFFFFF0)
                    ADWA = AUDB /* External reference */
                    EM4W = AUDC /* External reference */
                }
            }

            Method (VSTR, 1, Serialized)
            {
                Name (CONT, 0x03E8)
                Name (ADDR, 0x80000000)
                ADDR = Arg0
                OperationRegion (CCDC, SystemMemory, ADDR, 0x04)
                Field (CCDC, ByteAcc, NoLock, Preserve)
                {
                    CDEC,   32
                }

                If (((ABAR != 0xFFFFFFFF) && ((ABAR & 0xFFFFC000) != 
                    0x00)))
                {
                    If ((CDEC != 0x00))
                    {
                        BBAR (OperationRegion (IPCV, SystemMemory, BBAR (0x70), Field (IPCV, DWordAcc, NoLock, Preserve)
                                    {
                                        Offset (0x60), 
                                        AVIC,   32, 
                                        Offset (0x68), 
                                        AIRS,   16
                                    })) = (ABAR & 0xFFFFFFF0)
                        CONT = 0x03E8
                        While ((((AIRS & 0x01) == 0x01) && (CONT != 0x00)))
                        {
                            Stall (0x01)
                            CONT--
                        }

                        AIRS |= 0x02
                        AVIC = CDEC /* \_SB_.PCI0.HDAU.VSTR.CDEC */
                        AIRS |= 0x01
                        CONT = 0x03E8
                        While ((((AIRS & 0x01) == 0x01) && (CONT != 0x00)))
                        {
                            Stall (0x01)
                            CONT--
                        }
                    }
                }
            }

            Method (CXDC, 0, Serialized)
            {
                Name (IDDX, 0x80000000)
                If (((CADR != 0x00) && (CCNT != 0x00)))
                {
                    IDDX = CADR /* External reference */
                    While ((IDDX < (CADR + (CCNT * 0x04))))
                    {
                        VSTR (IDDX)
                        IDDX += 0x04
                    }
                }
            }

            Method (AINI, 0, Serialized)
            {
                Name (CONT, 0x03E8)
                If (((ABAR != 0xFFFFFFFF) && ((ABAR & 0xFFFFC000) != 
                    0x00)))
                {
                    BBAR (OperationRegion (IPCV, SystemMemory, BBAR (0x70), Field (IPCV, DWordAcc, NoLock, Preserve)
                                {
                                    GCAP,   16, 
                                    Offset (0x08), 
                                    GCTL,   32, 
                                    Offset (0x0E), 
                                    SSTS,   8, 
                                    Offset (0x60), 
                                    AVIC,   32, 
                                    Offset (0x68), 
                                    AIRS,   16
                                })) = (ABAR & 0xFFFFFFF0)
                    GCTL |= 0x01
                    CONT = 0x03E8
                    While ((((GCTL & 0x01) == 0x01) && (CONT != 0x00)))
                    {
                        Stall (0x01)
                        CONT--
                    }

                    GCAP &= 0xFFFF
                    SSTS |= 0x0F
                    GCTL &= 0xFFFFFFFE
                    CONT = 0x03E8
                    While ((((GCTL & 0x01) == 0x01) && (CONT != 0x00)))
                    {
                        Stall (0x01)
                        CONT--
                    }

                    GCTL |= 0x01
                    CONT = 0x03E8
                    While ((((GCTL & 0x01) == 0x01) && (CONT != 0x00)))
                    {
                        Stall (0x01)
                        CONT--
                    }
                }
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "APPLE ", "TbtPEG10", 0x00001000)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.LPCB.RTC_.ISTB, UnknownObj)
    External (_SB_.PCI0.P0P2, DeviceObj)
    External (DTGP, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (GD04, UnknownObj)
    External (GI04, UnknownObj)
    External (GP04, IntObj)
    External (GP23, UnknownObj)
    External (OSDW, IntObj)

    OperationRegion (T2PM, SystemMemory, 0xE0100548, 0x08)
    Field (T2PM, DWordAcc, Lock, Preserve)
    {
        T2PR,   32, 
        P2TR,   32
    }

    Scope (\_SB.PCI0)
    {
        Method (TGPE, 0, Serialized)
        {
            Notify (\_SB.PCI0.P0P2, 0x02) // Device Wake
        }

        Method (DTBP, 0, Serialized)
        {
            If ((\_SB.PCI0.P0P2.LDIS == 0x00))
            {
                Return (0x01)
            }

            Return (0x00)
        }

        Name (EJCD, 0x00)
        Name (TBBT, 0x00)
        Method (RMC1, 0, Serialized)
        {
            \_SB.PCI0.P0P2.LDIS = 0x01
            Sleep (0x07D0)
            GP23 = 0x00
        }

        Method (RMCR, 0, Serialized)
        {
            If (!OSDW)
            {
                If (EJCD)
                {
                    RMC1 ()
                    Return (Zero)
                }

                If ((((\_SB.PCI0.P0P2.UPSB.DSB1.UPS0.AVND == 0xFFFF) && (\_SB.PCI0.P0P2.UPSB.DSB2.UPS0.AVND == 0xFFFF)) && (\_SB.PCI0.P0P2.UPSB.DSB3.UPS0.AVND == 0xFFFF)))
                {
                    RMC1 ()
                    Return (Zero)
                }
                Else
                {
                    TBBT = 0x01
                }
            }

            Return (Zero)
        }

        Method (RMCW, 0, Serialized)
        {
            If (!OSDW)
            {
                If (EJCD)
                {
                    RMC1 ()
                    Return (Zero)
                }

                If ((TBBT && !\_SB.PCI0.LPCB.RTC.ISTB))
                {
                    \_SB.PCI0.P0P2.UPSB.DSB0.NHI0._EJ0 (0x01)
                }
                ElseIf (!TBBT)
                {
                    RMC1 ()
                }
            }

            Return (Zero)
        }

        Method (DTLK, 0, Serialized)
        {
            \_SB.PCI0.P0P2.LDIS = 0x01
            Sleep (0x07D0)
            GP23 = 0x00
        }

        Method (UTLK, 2, Serialized)
        {
            Local0 = 0x00
            If ((GP23 == 0x00))
            {
                \_SB.PCI0.P0P2.PSTA = 0x00
                While (0x01)
                {
                    If ((\_SB.PCI0.P0P2.LDIS == 0x01))
                    {
                        \_SB.PCI0.P0P2.LDIS = 0x00
                    }

                    GP23 = 0x01
                    Local1 = 0x00
                    Local2 = (Timer + 0x00989680)
                    While ((Timer <= Local2))
                    {
                        If ((\_SB.PCI0.P0P2.LACR == 0x00))
                        {
                            If ((\_SB.PCI0.P0P2.LTRN != 0x01))
                            {
                                Break
                            }
                        }
                        ElseIf (((\_SB.PCI0.P0P2.LTRN != 0x01) && (\_SB.PCI0.P0P2.LACT == 0x01)))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    Sleep (Arg1)
                    While ((Timer <= Local2))
                    {
                        If ((\_SB.PCI0.P0P2.UPSB.AVND != 0xFFFFFFFF))
                        {
                            Local1 = 0x01
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local1 == 0x01))
                    {
                        \_SB.PCI0.P0P2.MABT = 0x01
                        Break
                    }

                    If ((Local0 == 0x04))
                    {
                        Break
                    }

                    Local0++
                    GP23 = 0x00
                    Sleep (0x03E8)
                }
            }
        }

        Scope (\_SB.PCI0.P0P2)
        {
            OperationRegion (ADD8, SystemMemory, 0xE0008DD8, 0x04)
            Field (ADD8, ByteAcc, Lock, Preserve)
            {
                FDD8,   32
            }

            Name (VDD8, 0x00)
            OperationRegion (A900, SystemMemory, 0xE0008900, 0x04)
            Field (A900, ByteAcc, Lock, Preserve)
            {
                F900,   32
            }

            Name (V900, 0x00)
            OperationRegion (A904, SystemMemory, 0xE0008904, 0x04)
            Field (A904, ByteAcc, Lock, Preserve)
            {
                F904,   32
            }

            Name (V904, 0x00)
            OperationRegion (A908, SystemMemory, 0xE0008908, 0x04)
            Field (A908, ByteAcc, Lock, Preserve)
            {
                F908,   32
            }

            Name (V908, 0x00)
            OperationRegion (A90C, SystemMemory, 0xE000890C, 0x04)
            Field (A90C, ByteAcc, Lock, Preserve)
            {
                F90C,   32
            }

            Name (V90C, 0x00)
            OperationRegion (A910, SystemMemory, 0xE0008910, 0x04)
            Field (A910, ByteAcc, Lock, Preserve)
            {
                F910,   32
            }

            Name (V910, 0x00)
            OperationRegion (A80C, SystemMemory, 0xE000880C, 0x04)
            Field (A80C, ByteAcc, Lock, Preserve)
            {
                F80C,   32
            }

            Name (V80C, 0x00)
            OperationRegion (A920, SystemMemory, 0xE0008920, 0x04)
            Field (A920, ByteAcc, Lock, Preserve)
            {
                F920,   32
            }

            Name (V920, 0x00)
            OperationRegion (A924, SystemMemory, 0xE0008924, 0x04)
            Field (A924, ByteAcc, Lock, Preserve)
            {
                F924,   32
            }

            Name (V924, 0x00)
            OperationRegion (A928, SystemMemory, 0xE0008928, 0x04)
            Field (A928, ByteAcc, Lock, Preserve)
            {
                F928,   32
            }

            Name (V928, 0x00)
            OperationRegion (A92C, SystemMemory, 0xE000892C, 0x04)
            Field (A92C, ByteAcc, Lock, Preserve)
            {
                F92C,   32
            }

            Name (V92C, 0x00)
            OperationRegion (A930, SystemMemory, 0xE0008930, 0x04)
            Field (A930, ByteAcc, Lock, Preserve)
            {
                F930,   32
            }

            Name (V930, 0x00)
            OperationRegion (A82C, SystemMemory, 0xE000882C, 0x04)
            Field (A82C, ByteAcc, Lock, Preserve)
            {
                F82C,   32
            }

            Name (V82C, 0x00)
            OperationRegion (A940, SystemMemory, 0xE0008940, 0x04)
            Field (A940, ByteAcc, Lock, Preserve)
            {
                F940,   32
            }

            Name (V940, 0x00)
            OperationRegion (A944, SystemMemory, 0xE0008944, 0x04)
            Field (A944, ByteAcc, Lock, Preserve)
            {
                F944,   32
            }

            Name (V944, 0x00)
            OperationRegion (A948, SystemMemory, 0xE0008948, 0x04)
            Field (A948, ByteAcc, Lock, Preserve)
            {
                F948,   32
            }

            Name (V948, 0x00)
            OperationRegion (A94C, SystemMemory, 0xE000894C, 0x04)
            Field (A94C, ByteAcc, Lock, Preserve)
            {
                F94C,   32
            }

            Name (V94C, 0x00)
            OperationRegion (A950, SystemMemory, 0xE0008950, 0x04)
            Field (A950, ByteAcc, Lock, Preserve)
            {
                F950,   32
            }

            Name (V950, 0x00)
            OperationRegion (A84C, SystemMemory, 0xE000884C, 0x04)
            Field (A84C, ByteAcc, Lock, Preserve)
            {
                F84C,   32
            }

            Name (V84C, 0x00)
            OperationRegion (A960, SystemMemory, 0xE0008960, 0x04)
            Field (A960, ByteAcc, Lock, Preserve)
            {
                F960,   32
            }

            Name (V960, 0x00)
            OperationRegion (A964, SystemMemory, 0xE0008964, 0x04)
            Field (A964, ByteAcc, Lock, Preserve)
            {
                F964,   32
            }

            Name (V964, 0x00)
            OperationRegion (A968, SystemMemory, 0xE0008968, 0x04)
            Field (A968, ByteAcc, Lock, Preserve)
            {
                F968,   32
            }

            Name (V968, 0x00)
            OperationRegion (A96C, SystemMemory, 0xE000896C, 0x04)
            Field (A96C, ByteAcc, Lock, Preserve)
            {
                F96C,   32
            }

            Name (V96C, 0x00)
            OperationRegion (A970, SystemMemory, 0xE0008970, 0x04)
            Field (A970, ByteAcc, Lock, Preserve)
            {
                F970,   32
            }

            Name (V970, 0x00)
            OperationRegion (A86C, SystemMemory, 0xE000886C, 0x04)
            Field (A86C, ByteAcc, Lock, Preserve)
            {
                F86C,   32
            }

            Name (V86C, 0x00)
            OperationRegion (A980, SystemMemory, 0xE0008980, 0x04)
            Field (A980, ByteAcc, Lock, Preserve)
            {
                F980,   32
            }

            Name (V980, 0x00)
            OperationRegion (A984, SystemMemory, 0xE0008984, 0x04)
            Field (A984, ByteAcc, Lock, Preserve)
            {
                F984,   32
            }

            Name (V984, 0x00)
            OperationRegion (A988, SystemMemory, 0xE0008988, 0x04)
            Field (A988, ByteAcc, Lock, Preserve)
            {
                F988,   32
            }

            Name (V988, 0x00)
            OperationRegion (A98C, SystemMemory, 0xE000898C, 0x04)
            Field (A98C, ByteAcc, Lock, Preserve)
            {
                F98C,   32
            }

            Name (V98C, 0x00)
            OperationRegion (A990, SystemMemory, 0xE0008990, 0x04)
            Field (A990, ByteAcc, Lock, Preserve)
            {
                F990,   32
            }

            Name (V990, 0x00)
            OperationRegion (A88C, SystemMemory, 0xE000888C, 0x04)
            Field (A88C, ByteAcc, Lock, Preserve)
            {
                F88C,   32
            }

            Name (V88C, 0x00)
            OperationRegion (A9A0, SystemMemory, 0xE00089A0, 0x04)
            Field (A9A0, ByteAcc, Lock, Preserve)
            {
                F9A0,   32
            }

            Name (V9A0, 0x00)
            OperationRegion (A9A4, SystemMemory, 0xE00089A4, 0x04)
            Field (A9A4, ByteAcc, Lock, Preserve)
            {
                F9A4,   32
            }

            Name (V9A4, 0x00)
            OperationRegion (A9A8, SystemMemory, 0xE00089A8, 0x04)
            Field (A9A8, ByteAcc, Lock, Preserve)
            {
                F9A8,   32
            }

            Name (V9A8, 0x00)
            OperationRegion (A9AC, SystemMemory, 0xE00089AC, 0x04)
            Field (A9AC, ByteAcc, Lock, Preserve)
            {
                F9AC,   32
            }

            Name (V9AC, 0x00)
            OperationRegion (A9B0, SystemMemory, 0xE00089B0, 0x04)
            Field (A9B0, ByteAcc, Lock, Preserve)
            {
                F9B0,   32
            }

            Name (V9B0, 0x00)
            OperationRegion (A8AC, SystemMemory, 0xE00088AC, 0x04)
            Field (A8AC, ByteAcc, Lock, Preserve)
            {
                F8AC,   32
            }

            Name (V8AC, 0x00)
            OperationRegion (A9C0, SystemMemory, 0xE00089C0, 0x04)
            Field (A9C0, ByteAcc, Lock, Preserve)
            {
                F9C0,   32
            }

            Name (V9C0, 0x00)
            OperationRegion (A9C4, SystemMemory, 0xE00089C4, 0x04)
            Field (A9C4, ByteAcc, Lock, Preserve)
            {
                F9C4,   32
            }

            Name (V9C4, 0x00)
            OperationRegion (A9C8, SystemMemory, 0xE00089C8, 0x04)
            Field (A9C8, ByteAcc, Lock, Preserve)
            {
                F9C8,   32
            }

            Name (V9C8, 0x00)
            OperationRegion (A9CC, SystemMemory, 0xE00089CC, 0x04)
            Field (A9CC, ByteAcc, Lock, Preserve)
            {
                F9CC,   32
            }

            Name (V9CC, 0x00)
            OperationRegion (A9D0, SystemMemory, 0xE00089D0, 0x04)
            Field (A9D0, ByteAcc, Lock, Preserve)
            {
                F9D0,   32
            }

            Name (V9D0, 0x00)
            OperationRegion (A8CC, SystemMemory, 0xE00088CC, 0x04)
            Field (A8CC, ByteAcc, Lock, Preserve)
            {
                F8CC,   32
            }

            Name (V8CC, 0x00)
            OperationRegion (A9E0, SystemMemory, 0xE00089E0, 0x04)
            Field (A9E0, ByteAcc, Lock, Preserve)
            {
                F9E0,   32
            }

            Name (V9E0, 0x00)
            OperationRegion (A9E4, SystemMemory, 0xE00089E4, 0x04)
            Field (A9E4, ByteAcc, Lock, Preserve)
            {
                F9E4,   32
            }

            Name (V9E4, 0x00)
            OperationRegion (A9E8, SystemMemory, 0xE00089E8, 0x04)
            Field (A9E8, ByteAcc, Lock, Preserve)
            {
                F9E8,   32
            }

            Name (V9E8, 0x00)
            OperationRegion (A9EC, SystemMemory, 0xE00089EC, 0x04)
            Field (A9EC, ByteAcc, Lock, Preserve)
            {
                F9EC,   32
            }

            Name (V9EC, 0x00)
            OperationRegion (A9F0, SystemMemory, 0xE00089F0, 0x04)
            Field (A9F0, ByteAcc, Lock, Preserve)
            {
                F9F0,   32
            }

            Name (V9F0, 0x00)
            OperationRegion (A8EC, SystemMemory, 0xE00088EC, 0x04)
            Field (A8EC, ByteAcc, Lock, Preserve)
            {
                F8EC,   32
            }

            Name (V8EC, 0x00)
            OperationRegion (AC30, SystemMemory, 0xE0008C30, 0x04)
            Field (AC30, ByteAcc, Lock, Preserve)
            {
                FC30,   32
            }

            Name (VC30, 0x00)
            OperationRegion (AA00, SystemMemory, 0xE0008A00, 0x04)
            Field (AA00, ByteAcc, Lock, Preserve)
            {
                FA00,   32
            }

            Name (VA00, 0x00)
            OperationRegion (AA04, SystemMemory, 0xE0008A04, 0x04)
            Field (AA04, ByteAcc, Lock, Preserve)
            {
                FA04,   32
            }

            Name (VA04, 0x00)
            OperationRegion (AA08, SystemMemory, 0xE0008A08, 0x04)
            Field (AA08, ByteAcc, Lock, Preserve)
            {
                FA08,   32
            }

            Name (VA08, 0x00)
            OperationRegion (AA0C, SystemMemory, 0xE0008A0C, 0x04)
            Field (AA0C, ByteAcc, Lock, Preserve)
            {
                FA0C,   32
            }

            Name (VA0C, 0x00)
            OperationRegion (AA10, SystemMemory, 0xE0008A10, 0x04)
            Field (AA10, ByteAcc, Lock, Preserve)
            {
                FA10,   32
            }

            Name (VA10, 0x00)
            OperationRegion (AA14, SystemMemory, 0xE0008A14, 0x04)
            Field (AA14, ByteAcc, Lock, Preserve)
            {
                FA14,   32
            }

            Name (VA14, 0x00)
            OperationRegion (AA18, SystemMemory, 0xE0008A18, 0x04)
            Field (AA18, ByteAcc, Lock, Preserve)
            {
                FA18,   32
            }

            Name (VA18, 0x00)
            OperationRegion (AA1C, SystemMemory, 0xE0008A1C, 0x04)
            Field (AA1C, ByteAcc, Lock, Preserve)
            {
                FA1C,   32
            }

            Name (VA1C, 0x00)
            OperationRegion (AA20, SystemMemory, 0xE0008A20, 0x04)
            Field (AA20, ByteAcc, Lock, Preserve)
            {
                FA20,   32
            }

            Name (VA20, 0x00)
            OperationRegion (AA24, SystemMemory, 0xE0008A24, 0x04)
            Field (AA24, ByteAcc, Lock, Preserve)
            {
                FA24,   32
            }

            Name (VA24, 0x00)
            OperationRegion (AA28, SystemMemory, 0xE0008A28, 0x04)
            Field (AA28, ByteAcc, Lock, Preserve)
            {
                FA28,   32
            }

            Name (VA28, 0x00)
            OperationRegion (AA2C, SystemMemory, 0xE0008A2C, 0x04)
            Field (AA2C, ByteAcc, Lock, Preserve)
            {
                FA2C,   32
            }

            Name (VA2C, 0x00)
            OperationRegion (AA30, SystemMemory, 0xE0008A30, 0x04)
            Field (AA30, ByteAcc, Lock, Preserve)
            {
                FA30,   32
            }

            Name (VA30, 0x00)
            OperationRegion (AA34, SystemMemory, 0xE0008A34, 0x04)
            Field (AA34, ByteAcc, Lock, Preserve)
            {
                FA34,   32
            }

            Name (VA34, 0x00)
            OperationRegion (AA38, SystemMemory, 0xE0008A38, 0x04)
            Field (AA38, ByteAcc, Lock, Preserve)
            {
                FA38,   32
            }

            Name (VA38, 0x00)
            OperationRegion (AA3C, SystemMemory, 0xE0008A3C, 0x04)
            Field (AA3C, ByteAcc, Lock, Preserve)
            {
                FA3C,   32
            }

            Name (VA3C, 0x00)
            OperationRegion (AA40, SystemMemory, 0xE0008A40, 0x04)
            Field (AA40, ByteAcc, Lock, Preserve)
            {
                FA40,   32
            }

            Name (VA40, 0x00)
            OperationRegion (AA44, SystemMemory, 0xE0008A44, 0x04)
            Field (AA44, ByteAcc, Lock, Preserve)
            {
                FA44,   32
            }

            Name (VA44, 0x00)
            OperationRegion (AA48, SystemMemory, 0xE0008A48, 0x04)
            Field (AA48, ByteAcc, Lock, Preserve)
            {
                FA48,   32
            }

            Name (VA48, 0x00)
            OperationRegion (AA4C, SystemMemory, 0xE0008A4C, 0x04)
            Field (AA4C, ByteAcc, Lock, Preserve)
            {
                FA4C,   32
            }

            Name (VA4C, 0x00)
            OperationRegion (AA50, SystemMemory, 0xE0008A50, 0x04)
            Field (AA50, ByteAcc, Lock, Preserve)
            {
                FA50,   32
            }

            Name (VA50, 0x00)
            OperationRegion (AA54, SystemMemory, 0xE0008A54, 0x04)
            Field (AA54, ByteAcc, Lock, Preserve)
            {
                FA54,   32
            }

            Name (VA54, 0x00)
            OperationRegion (AA58, SystemMemory, 0xE0008A58, 0x04)
            Field (AA58, ByteAcc, Lock, Preserve)
            {
                FA58,   32
            }

            Name (VA58, 0x00)
            OperationRegion (AA5C, SystemMemory, 0xE0008A5C, 0x04)
            Field (AA5C, ByteAcc, Lock, Preserve)
            {
                FA5C,   32
            }

            Name (VA5C, 0x00)
            OperationRegion (AA60, SystemMemory, 0xE0008A60, 0x04)
            Field (AA60, ByteAcc, Lock, Preserve)
            {
                FA60,   32
            }

            Name (VA60, 0x00)
            OperationRegion (AA64, SystemMemory, 0xE0008A64, 0x04)
            Field (AA64, ByteAcc, Lock, Preserve)
            {
                FA64,   32
            }

            Name (VA64, 0x00)
            OperationRegion (AA68, SystemMemory, 0xE0008A68, 0x04)
            Field (AA68, ByteAcc, Lock, Preserve)
            {
                FA68,   32
            }

            Name (VA68, 0x00)
            OperationRegion (AA6C, SystemMemory, 0xE0008A6C, 0x04)
            Field (AA6C, ByteAcc, Lock, Preserve)
            {
                FA6C,   32
            }

            Name (VA6C, 0x00)
            OperationRegion (AA70, SystemMemory, 0xE0008A70, 0x04)
            Field (AA70, ByteAcc, Lock, Preserve)
            {
                FA70,   32
            }

            Name (VA70, 0x00)
            OperationRegion (AA74, SystemMemory, 0xE0008A74, 0x04)
            Field (AA74, ByteAcc, Lock, Preserve)
            {
                FA74,   32
            }

            Name (VA74, 0x00)
            OperationRegion (AA78, SystemMemory, 0xE0008A78, 0x04)
            Field (AA78, ByteAcc, Lock, Preserve)
            {
                FA78,   32
            }

            Name (VA78, 0x00)
            OperationRegion (AA7C, SystemMemory, 0xE0008A7C, 0x04)
            Field (AA7C, ByteAcc, Lock, Preserve)
            {
                FA7C,   32
            }

            Name (VA7C, 0x00)
            OperationRegion (AA80, SystemMemory, 0xE0008A80, 0x04)
            Field (AA80, ByteAcc, Lock, Preserve)
            {
                FA80,   32
            }

            Name (VA80, 0x00)
            OperationRegion (AA84, SystemMemory, 0xE0008A84, 0x04)
            Field (AA84, ByteAcc, Lock, Preserve)
            {
                FA84,   32
            }

            Name (VA84, 0x00)
            OperationRegion (AA88, SystemMemory, 0xE0008A88, 0x04)
            Field (AA88, ByteAcc, Lock, Preserve)
            {
                FA88,   32
            }

            Name (VA88, 0x00)
            OperationRegion (AA8C, SystemMemory, 0xE0008A8C, 0x04)
            Field (AA8C, ByteAcc, Lock, Preserve)
            {
                FA8C,   32
            }

            Name (VA8C, 0x00)
            OperationRegion (AA90, SystemMemory, 0xE0008A90, 0x04)
            Field (AA90, ByteAcc, Lock, Preserve)
            {
                FA90,   32
            }

            Name (VA90, 0x00)
            OperationRegion (AA94, SystemMemory, 0xE0008A94, 0x04)
            Field (AA94, ByteAcc, Lock, Preserve)
            {
                FA94,   32
            }

            Name (VA94, 0x00)
            OperationRegion (AA98, SystemMemory, 0xE0008A98, 0x04)
            Field (AA98, ByteAcc, Lock, Preserve)
            {
                FA98,   32
            }

            Name (VA98, 0x00)
            OperationRegion (AA9C, SystemMemory, 0xE0008A9C, 0x04)
            Field (AA9C, ByteAcc, Lock, Preserve)
            {
                FA9C,   32
            }

            Name (VA9C, 0x00)
            OperationRegion (AAA0, SystemMemory, 0xE0008AA0, 0x04)
            Field (AAA0, ByteAcc, Lock, Preserve)
            {
                FAA0,   32
            }

            Name (VAA0, 0x00)
            OperationRegion (AAA4, SystemMemory, 0xE0008AA4, 0x04)
            Field (AAA4, ByteAcc, Lock, Preserve)
            {
                FAA4,   32
            }

            Name (VAA4, 0x00)
            OperationRegion (AAA8, SystemMemory, 0xE0008AA8, 0x04)
            Field (AAA8, ByteAcc, Lock, Preserve)
            {
                FAA8,   32
            }

            Name (VAA8, 0x00)
            OperationRegion (AAAC, SystemMemory, 0xE0008AAC, 0x04)
            Field (AAAC, ByteAcc, Lock, Preserve)
            {
                FAAC,   32
            }

            Name (VAAC, 0x00)
            OperationRegion (AAB0, SystemMemory, 0xE0008AB0, 0x04)
            Field (AAB0, ByteAcc, Lock, Preserve)
            {
                FAB0,   32
            }

            Name (VAB0, 0x00)
            OperationRegion (AAB4, SystemMemory, 0xE0008AB4, 0x04)
            Field (AAB4, ByteAcc, Lock, Preserve)
            {
                FAB4,   32
            }

            Name (VAB4, 0x00)
            OperationRegion (AAB8, SystemMemory, 0xE0008AB8, 0x04)
            Field (AAB8, ByteAcc, Lock, Preserve)
            {
                FAB8,   32
            }

            Name (VAB8, 0x00)
            OperationRegion (AABC, SystemMemory, 0xE0008ABC, 0x04)
            Field (AABC, ByteAcc, Lock, Preserve)
            {
                FABC,   32
            }

            Name (VABC, 0x00)
            OperationRegion (AAC0, SystemMemory, 0xE0008AC0, 0x04)
            Field (AAC0, ByteAcc, Lock, Preserve)
            {
                FAC0,   32
            }

            Name (VAC0, 0x00)
            OperationRegion (AAC4, SystemMemory, 0xE0008AC4, 0x04)
            Field (AAC4, ByteAcc, Lock, Preserve)
            {
                FAC4,   32
            }

            Name (VAC4, 0x00)
            OperationRegion (AAC8, SystemMemory, 0xE0008AC8, 0x04)
            Field (AAC8, ByteAcc, Lock, Preserve)
            {
                FAC8,   32
            }

            Name (VAC8, 0x00)
            OperationRegion (AACC, SystemMemory, 0xE0008ACC, 0x04)
            Field (AACC, ByteAcc, Lock, Preserve)
            {
                FACC,   32
            }

            Name (VACC, 0x00)
            OperationRegion (AAD0, SystemMemory, 0xE0008AD0, 0x04)
            Field (AAD0, ByteAcc, Lock, Preserve)
            {
                FAD0,   32
            }

            Name (VAD0, 0x00)
            OperationRegion (AAD4, SystemMemory, 0xE0008AD4, 0x04)
            Field (AAD4, ByteAcc, Lock, Preserve)
            {
                FAD4,   32
            }

            Name (VAD4, 0x00)
            OperationRegion (AAD8, SystemMemory, 0xE0008AD8, 0x04)
            Field (AAD8, ByteAcc, Lock, Preserve)
            {
                FAD8,   32
            }

            Name (VAD8, 0x00)
            OperationRegion (AADC, SystemMemory, 0xE0008ADC, 0x04)
            Field (AADC, ByteAcc, Lock, Preserve)
            {
                FADC,   32
            }

            Name (VADC, 0x00)
            OperationRegion (AAE0, SystemMemory, 0xE0008AE0, 0x04)
            Field (AAE0, ByteAcc, Lock, Preserve)
            {
                FAE0,   32
            }

            Name (VAE0, 0x00)
            OperationRegion (AAE4, SystemMemory, 0xE0008AE4, 0x04)
            Field (AAE4, ByteAcc, Lock, Preserve)
            {
                FAE4,   32
            }

            Name (VAE4, 0x00)
            OperationRegion (AAE8, SystemMemory, 0xE0008AE8, 0x04)
            Field (AAE8, ByteAcc, Lock, Preserve)
            {
                FAE8,   32
            }

            Name (VAE8, 0x00)
            OperationRegion (AAEC, SystemMemory, 0xE0008AEC, 0x04)
            Field (AAEC, ByteAcc, Lock, Preserve)
            {
                FAEC,   32
            }

            Name (VAEC, 0x00)
            OperationRegion (AAF0, SystemMemory, 0xE0008AF0, 0x04)
            Field (AAF0, ByteAcc, Lock, Preserve)
            {
                FAF0,   32
            }

            Name (VAF0, 0x00)
            OperationRegion (AAF4, SystemMemory, 0xE0008AF4, 0x04)
            Field (AAF4, ByteAcc, Lock, Preserve)
            {
                FAF4,   32
            }

            Name (VAF4, 0x00)
            OperationRegion (AAF8, SystemMemory, 0xE0008AF8, 0x04)
            Field (AAF8, ByteAcc, Lock, Preserve)
            {
                FAF8,   32
            }

            Name (VAF8, 0x00)
            OperationRegion (AAFC, SystemMemory, 0xE0008AFC, 0x04)
            Field (AAFC, ByteAcc, Lock, Preserve)
            {
                FAFC,   32
            }

            Name (VAFC, 0x00)
            OperationRegion (A918, SystemMemory, 0xE0008918, 0x04)
            Field (A918, ByteAcc, Lock, Preserve)
            {
                F918,   32
            }

            Name (V918, 0x00)
            OperationRegion (A938, SystemMemory, 0xE0008938, 0x04)
            Field (A938, ByteAcc, Lock, Preserve)
            {
                F938,   32
            }

            Name (V938, 0x00)
            OperationRegion (A958, SystemMemory, 0xE0008958, 0x04)
            Field (A958, ByteAcc, Lock, Preserve)
            {
                F958,   32
            }

            Name (V958, 0x00)
            OperationRegion (A978, SystemMemory, 0xE0008978, 0x04)
            Field (A978, ByteAcc, Lock, Preserve)
            {
                F978,   32
            }

            Name (V978, 0x00)
            OperationRegion (A998, SystemMemory, 0xE0008998, 0x04)
            Field (A998, ByteAcc, Lock, Preserve)
            {
                F998,   32
            }

            Name (V998, 0x00)
            OperationRegion (A9B8, SystemMemory, 0xE00089B8, 0x04)
            Field (A9B8, ByteAcc, Lock, Preserve)
            {
                F9B8,   32
            }

            Name (V9B8, 0x00)
            OperationRegion (A9D8, SystemMemory, 0xE00089D8, 0x04)
            Field (A9D8, ByteAcc, Lock, Preserve)
            {
                F9D8,   32
            }

            Name (V9D8, 0x00)
            OperationRegion (A9F8, SystemMemory, 0xE00089F8, 0x04)
            Field (A9F8, ByteAcc, Lock, Preserve)
            {
                F9F8,   32
            }

            Name (V9F8, 0x00)
            OperationRegion (A224, SystemMemory, 0xE0008224, 0x04)
            Field (A224, ByteAcc, Lock, Preserve)
            {
                F224,   32
            }

            Name (V224, 0x00)
            OperationRegion (C224, SystemMemory, 0xE0008224, 0x04)
            Field (C224, ByteAcc, Lock, Preserve)
            {
                W224,   5, 
                Offset (0x04)
            }

            OperationRegion (B224, SystemMemory, 0xE0009224, 0x04)
            Field (B224, ByteAcc, Lock, Preserve)
            {
                G224,   32
            }

            Name (Y224, 0x00)
            OperationRegion (A1F8, SystemMemory, 0xE00081F8, 0x04)
            Field (A1F8, ByteAcc, Lock, Preserve)
            {
                F1F8,   32
            }

            Name (V1F8, 0x00)
            OperationRegion (B1F8, SystemMemory, 0xE00091F8, 0x04)
            Field (B1F8, ByteAcc, Lock, Preserve)
            {
                G1F8,   32
            }

            Name (Y1F8, 0x00)
            OperationRegion (A260, SystemMemory, 0xE0008260, 0x04)
            Field (A260, ByteAcc, Lock, Preserve)
            {
                F260,   32
            }

            Name (V260, 0x00)
            OperationRegion (B260, SystemMemory, 0xE0009260, 0x04)
            Field (B260, ByteAcc, Lock, Preserve)
            {
                G260,   32
            }

            Name (Y260, 0x00)
            OperationRegion (AC28, SystemMemory, 0xE0008C28, 0x04)
            Field (AC28, ByteAcc, Lock, Preserve)
            {
                FC28,   32
            }

            Name (VC28, 0x00)
            OperationRegion (BC28, SystemMemory, 0xE0009C28, 0x04)
            Field (BC28, ByteAcc, Lock, Preserve)
            {
                GC28,   32
            }

            Name (YC28, 0x00)
            OperationRegion (AC38, SystemMemory, 0xE0008C38, 0x04)
            Field (AC38, ByteAcc, Lock, Preserve)
            {
                FC38,   32
            }

            Name (VC38, 0x00)
            OperationRegion (BC38, SystemMemory, 0xE0009C38, 0x04)
            Field (BC38, ByteAcc, Lock, Preserve)
            {
                GC38,   32
            }

            Name (YC38, 0x00)
            OperationRegion (AD14, SystemMemory, 0xE0008D14, 0x04)
            Field (AD14, ByteAcc, Lock, Preserve)
            {
                FD14,   32
            }

            Name (VD14, 0x00)
            OperationRegion (BD14, SystemMemory, 0xE0009D14, 0x04)
            Field (BD14, ByteAcc, Lock, Preserve)
            {
                GD14,   32
            }

            Name (YD14, 0x00)
            OperationRegion (A004, SystemMemory, 0xE0008004, 0x02)
            Field (A004, ByteAcc, Lock, Preserve)
            {
                F004,   16
            }

            Name (V004, 0x00)
            OperationRegion (B004, SystemMemory, 0xE0009004, 0x02)
            Field (B004, ByteAcc, Lock, Preserve)
            {
                G004,   16
            }

            Name (Y004, 0x00)
            OperationRegion (A00C, SystemMemory, 0xE000800C, 0x01)
            Field (A00C, ByteAcc, Lock, Preserve)
            {
                F00C,   8
            }

            Name (V00C, 0x00)
            OperationRegion (B00C, SystemMemory, 0xE000900C, 0x01)
            Field (B00C, ByteAcc, Lock, Preserve)
            {
                G00C,   8
            }

            Name (Y00C, 0x00)
            OperationRegion (A019, SystemMemory, 0xE0008019, 0x01)
            Field (A019, ByteAcc, Lock, Preserve)
            {
                F019,   8
            }

            Name (V019, 0x00)
            OperationRegion (B019, SystemMemory, 0xE0009019, 0x01)
            Field (B019, ByteAcc, Lock, Preserve)
            {
                G019,   8
            }

            Name (Y019, 0x00)
            OperationRegion (A01A, SystemMemory, 0xE000801A, 0x01)
            Field (A01A, ByteAcc, Lock, Preserve)
            {
                F01A,   8
            }

            Name (V01A, 0x00)
            OperationRegion (B01A, SystemMemory, 0xE000901A, 0x01)
            Field (B01A, ByteAcc, Lock, Preserve)
            {
                G01A,   8
            }

            Name (Y01A, 0x00)
            OperationRegion (A01C, SystemMemory, 0xE000801C, 0x01)
            Field (A01C, ByteAcc, Lock, Preserve)
            {
                F01C,   8
            }

            Name (V01C, 0x00)
            OperationRegion (B01C, SystemMemory, 0xE000901C, 0x01)
            Field (B01C, ByteAcc, Lock, Preserve)
            {
                G01C,   8
            }

            Name (Y01C, 0x00)
            OperationRegion (A01D, SystemMemory, 0xE000801D, 0x01)
            Field (A01D, ByteAcc, Lock, Preserve)
            {
                F01D,   8
            }

            Name (V01D, 0x00)
            OperationRegion (B01D, SystemMemory, 0xE000901D, 0x01)
            Field (B01D, ByteAcc, Lock, Preserve)
            {
                G01D,   8
            }

            Name (Y01D, 0x00)
            OperationRegion (A020, SystemMemory, 0xE0008020, 0x02)
            Field (A020, ByteAcc, Lock, Preserve)
            {
                F020,   16
            }

            Name (V020, 0x00)
            OperationRegion (B020, SystemMemory, 0xE0009020, 0x02)
            Field (B020, ByteAcc, Lock, Preserve)
            {
                G020,   16
            }

            Name (Y020, 0x00)
            OperationRegion (A022, SystemMemory, 0xE0008022, 0x02)
            Field (A022, ByteAcc, Lock, Preserve)
            {
                F022,   16
            }

            Name (V022, 0x00)
            OperationRegion (B022, SystemMemory, 0xE0009022, 0x02)
            Field (B022, ByteAcc, Lock, Preserve)
            {
                G022,   16
            }

            Name (Y022, 0x00)
            OperationRegion (A024, SystemMemory, 0xE0008024, 0x02)
            Field (A024, ByteAcc, Lock, Preserve)
            {
                F024,   16
            }

            Name (V024, 0x00)
            OperationRegion (B024, SystemMemory, 0xE0009024, 0x02)
            Field (B024, ByteAcc, Lock, Preserve)
            {
                G024,   16
            }

            Name (Y024, 0x00)
            OperationRegion (A026, SystemMemory, 0xE0008026, 0x02)
            Field (A026, ByteAcc, Lock, Preserve)
            {
                F026,   16
            }

            Name (V026, 0x00)
            OperationRegion (B026, SystemMemory, 0xE0009026, 0x02)
            Field (B026, ByteAcc, Lock, Preserve)
            {
                G026,   16
            }

            Name (Y026, 0x00)
            OperationRegion (A028, SystemMemory, 0xE0008028, 0x04)
            Field (A028, ByteAcc, Lock, Preserve)
            {
                F028,   32
            }

            Name (V028, 0x00)
            OperationRegion (B028, SystemMemory, 0xE0009028, 0x04)
            Field (B028, ByteAcc, Lock, Preserve)
            {
                G028,   32
            }

            Name (Y028, 0x00)
            OperationRegion (A02C, SystemMemory, 0xE000802C, 0x04)
            Field (A02C, ByteAcc, Lock, Preserve)
            {
                F02C,   32
            }

            Name (V02C, 0x00)
            OperationRegion (B02C, SystemMemory, 0xE000902C, 0x04)
            Field (B02C, ByteAcc, Lock, Preserve)
            {
                G02C,   32
            }

            Name (Y02C, 0x00)
            OperationRegion (A03C, SystemMemory, 0xE000803C, 0x01)
            Field (A03C, ByteAcc, Lock, Preserve)
            {
                F03C,   8
            }

            Name (V03C, 0x00)
            OperationRegion (B03C, SystemMemory, 0xE000903C, 0x01)
            Field (B03C, ByteAcc, Lock, Preserve)
            {
                G03C,   8
            }

            Name (Y03C, 0x00)
            OperationRegion (A03D, SystemMemory, 0xE000803D, 0x01)
            Field (A03D, ByteAcc, Lock, Preserve)
            {
                F03D,   8
            }

            Name (V03D, 0x00)
            OperationRegion (B03D, SystemMemory, 0xE000903D, 0x01)
            Field (B03D, ByteAcc, Lock, Preserve)
            {
                G03D,   8
            }

            Name (Y03D, 0x00)
            OperationRegion (A03E, SystemMemory, 0xE000803E, 0x02)
            Field (A03E, ByteAcc, Lock, Preserve)
            {
                F03E,   16
            }

            Name (V03E, 0x00)
            OperationRegion (B03E, SystemMemory, 0xE000903E, 0x02)
            Field (B03E, ByteAcc, Lock, Preserve)
            {
                G03E,   16
            }

            Name (Y03E, 0x00)
            OperationRegion (A084, SystemMemory, 0xE0008084, 0x04)
            Field (A084, ByteAcc, Lock, Preserve)
            {
                F084,   32
            }

            Name (V084, 0x00)
            OperationRegion (B084, SystemMemory, 0xE0009084, 0x04)
            Field (B084, ByteAcc, Lock, Preserve)
            {
                G084,   32
            }

            Name (Y084, 0x00)
            OperationRegion (A08C, SystemMemory, 0xE000808C, 0x04)
            Field (A08C, ByteAcc, Lock, Preserve)
            {
                F08C,   32
            }

            Name (V08C, 0x00)
            OperationRegion (B08C, SystemMemory, 0xE000908C, 0x04)
            Field (B08C, ByteAcc, Lock, Preserve)
            {
                G08C,   32
            }

            Name (Y08C, 0x00)
            OperationRegion (A092, SystemMemory, 0xE0008092, 0x02)
            Field (A092, ByteAcc, Lock, Preserve)
            {
                F092,   16
            }

            Name (V092, 0x00)
            OperationRegion (B092, SystemMemory, 0xE0009092, 0x02)
            Field (B092, ByteAcc, Lock, Preserve)
            {
                G092,   16
            }

            Name (Y092, 0x00)
            OperationRegion (A094, SystemMemory, 0xE0008094, 0x04)
            Field (A094, ByteAcc, Lock, Preserve)
            {
                F094,   32
            }

            Name (V094, 0x00)
            OperationRegion (B094, SystemMemory, 0xE0009094, 0x04)
            Field (B094, ByteAcc, Lock, Preserve)
            {
                G094,   32
            }

            Name (Y094, 0x00)
            OperationRegion (A098, SystemMemory, 0xE0008098, 0x02)
            Field (A098, ByteAcc, Lock, Preserve)
            {
                F098,   16
            }

            Name (V098, 0x00)
            OperationRegion (B098, SystemMemory, 0xE0009098, 0x02)
            Field (B098, ByteAcc, Lock, Preserve)
            {
                G098,   16
            }

            Name (Y098, 0x00)
            OperationRegion (A0A2, SystemMemory, 0xE00080A2, 0x02)
            Field (A0A2, ByteAcc, Lock, Preserve)
            {
                F0A2,   16
            }

            Name (V0A2, 0x00)
            OperationRegion (B0A2, SystemMemory, 0xE00090A2, 0x02)
            Field (B0A2, ByteAcc, Lock, Preserve)
            {
                G0A2,   16
            }

            Name (Y0A2, 0x00)
            OperationRegion (A0A8, SystemMemory, 0xE00080A8, 0x02)
            Field (A0A8, ByteAcc, Lock, Preserve)
            {
                F0A8,   16
            }

            Name (V0A8, 0x00)
            OperationRegion (B0A8, SystemMemory, 0xE00090A8, 0x02)
            Field (B0A8, ByteAcc, Lock, Preserve)
            {
                G0A8,   16
            }

            Name (Y0A8, 0x00)
            OperationRegion (A0AC, SystemMemory, 0xE00080AC, 0x02)
            Field (A0AC, ByteAcc, Lock, Preserve)
            {
                F0AC,   16
            }

            Name (V0AC, 0x00)
            OperationRegion (B0AC, SystemMemory, 0xE00090AC, 0x02)
            Field (B0AC, ByteAcc, Lock, Preserve)
            {
                G0AC,   16
            }

            Name (Y0AC, 0x00)
            OperationRegion (A0B0, SystemMemory, 0xE00080B0, 0x02)
            Field (A0B0, ByteAcc, Lock, Preserve)
            {
                F0B0,   16
            }

            Name (V0B0, 0x00)
            OperationRegion (B0B0, SystemMemory, 0xE00090B0, 0x02)
            Field (B0B0, ByteAcc, Lock, Preserve)
            {
                G0B0,   16
            }

            Name (Y0B0, 0x00)
            OperationRegion (A0B4, SystemMemory, 0xE00080B4, 0x04)
            Field (A0B4, ByteAcc, Lock, Preserve)
            {
                F0B4,   32
            }

            Name (V0B4, 0x00)
            OperationRegion (B0B4, SystemMemory, 0xE00090B4, 0x04)
            Field (B0B4, ByteAcc, Lock, Preserve)
            {
                G0B4,   32
            }

            Name (Y0B4, 0x00)
            OperationRegion (A0BC, SystemMemory, 0xE00080BC, 0x02)
            Field (A0BC, ByteAcc, Lock, Preserve)
            {
                F0BC,   16
            }

            Name (V0BC, 0x00)
            OperationRegion (B0BC, SystemMemory, 0xE00090BC, 0x02)
            Field (B0BC, ByteAcc, Lock, Preserve)
            {
                G0BC,   16
            }

            Name (Y0BC, 0x00)
            OperationRegion (A0C8, SystemMemory, 0xE00080C8, 0x02)
            Field (A0C8, ByteAcc, Lock, Preserve)
            {
                F0C8,   16
            }

            Name (V0C8, 0x00)
            OperationRegion (B0C8, SystemMemory, 0xE00090C8, 0x02)
            Field (B0C8, ByteAcc, Lock, Preserve)
            {
                G0C8,   16
            }

            Name (Y0C8, 0x00)
            OperationRegion (A0D0, SystemMemory, 0xE00080D0, 0x02)
            Field (A0D0, ByteAcc, Lock, Preserve)
            {
                F0D0,   16
            }

            Name (V0D0, 0x00)
            OperationRegion (B0D0, SystemMemory, 0xE00090D0, 0x02)
            Field (B0D0, ByteAcc, Lock, Preserve)
            {
                G0D0,   16
            }

            Name (Y0D0, 0x00)
            OperationRegion (A0EC, SystemMemory, 0xE00080EC, 0x04)
            Field (A0EC, ByteAcc, Lock, Preserve)
            {
                F0EC,   32
            }

            Name (V0EC, 0x00)
            OperationRegion (B0EC, SystemMemory, 0xE00090EC, 0x04)
            Field (B0EC, ByteAcc, Lock, Preserve)
            {
                G0EC,   32
            }

            Name (Y0EC, 0x00)
            OperationRegion (A114, SystemMemory, 0xE0008114, 0x04)
            Field (A114, ByteAcc, Lock, Preserve)
            {
                F114,   32
            }

            Name (V114, 0x00)
            OperationRegion (B114, SystemMemory, 0xE0009114, 0x04)
            Field (B114, ByteAcc, Lock, Preserve)
            {
                G114,   32
            }

            Name (Y114, 0x00)
            OperationRegion (A144, SystemMemory, 0xE0008144, 0x04)
            Field (A144, ByteAcc, Lock, Preserve)
            {
                F144,   32
            }

            Name (V144, 0x00)
            OperationRegion (B144, SystemMemory, 0xE0009144, 0x04)
            Field (B144, ByteAcc, Lock, Preserve)
            {
                G144,   32
            }

            Name (Y144, 0x00)
            OperationRegion (A150, SystemMemory, 0xE0008150, 0x04)
            Field (A150, ByteAcc, Lock, Preserve)
            {
                F150,   32
            }

            Name (V150, 0x00)
            OperationRegion (B150, SystemMemory, 0xE0009150, 0x04)
            Field (B150, ByteAcc, Lock, Preserve)
            {
                G150,   32
            }

            Name (Y150, 0x00)
            OperationRegion (A158, SystemMemory, 0xE0008158, 0x04)
            Field (A158, ByteAcc, Lock, Preserve)
            {
                F158,   32
            }

            Name (V158, 0x00)
            OperationRegion (B158, SystemMemory, 0xE0009158, 0x04)
            Field (B158, ByteAcc, Lock, Preserve)
            {
                G158,   32
            }

            Name (Y158, 0x00)
            OperationRegion (A15C, SystemMemory, 0xE000815C, 0x04)
            Field (A15C, ByteAcc, Lock, Preserve)
            {
                F15C,   32
            }

            Name (V15C, 0x00)
            OperationRegion (B15C, SystemMemory, 0xE000915C, 0x04)
            Field (B15C, ByteAcc, Lock, Preserve)
            {
                G15C,   32
            }

            Name (Y15C, 0x00)
            OperationRegion (A1CC, SystemMemory, 0xE00081CC, 0x04)
            Field (A1CC, ByteAcc, Lock, Preserve)
            {
                F1CC,   32
            }

            Name (V1CC, 0x00)
            OperationRegion (B1CC, SystemMemory, 0xE00091CC, 0x04)
            Field (B1CC, ByteAcc, Lock, Preserve)
            {
                G1CC,   32
            }

            Name (Y1CC, 0x00)
            OperationRegion (A1FC, SystemMemory, 0xE00081FC, 0x04)
            Field (A1FC, ByteAcc, Lock, Preserve)
            {
                F1FC,   32
            }

            Name (V1FC, 0x00)
            OperationRegion (B1FC, SystemMemory, 0xE00091FC, 0x04)
            Field (B1FC, ByteAcc, Lock, Preserve)
            {
                G1FC,   32
            }

            Name (Y1FC, 0x00)
            OperationRegion (A200, SystemMemory, 0xE0008200, 0x04)
            Field (A200, ByteAcc, Lock, Preserve)
            {
                F200,   32
            }

            Name (V200, 0x00)
            OperationRegion (B200, SystemMemory, 0xE0009200, 0x04)
            Field (B200, ByteAcc, Lock, Preserve)
            {
                G200,   32
            }

            Name (Y200, 0x00)
            OperationRegion (A204, SystemMemory, 0xE0008204, 0x04)
            Field (A204, ByteAcc, Lock, Preserve)
            {
                F204,   32
            }

            Name (V204, 0x00)
            OperationRegion (B204, SystemMemory, 0xE0009204, 0x04)
            Field (B204, ByteAcc, Lock, Preserve)
            {
                G204,   32
            }

            Name (Y204, 0x00)
            OperationRegion (A208, SystemMemory, 0xE0008208, 0x04)
            Field (A208, ByteAcc, Lock, Preserve)
            {
                F208,   32
            }

            Name (V208, 0x00)
            OperationRegion (B208, SystemMemory, 0xE0009208, 0x04)
            Field (B208, ByteAcc, Lock, Preserve)
            {
                G208,   32
            }

            Name (Y208, 0x00)
            OperationRegion (A228, SystemMemory, 0xE0008228, 0x04)
            Field (A228, ByteAcc, Lock, Preserve)
            {
                F228,   32
            }

            Name (V228, 0x00)
            OperationRegion (B228, SystemMemory, 0xE0009228, 0x04)
            Field (B228, ByteAcc, Lock, Preserve)
            {
                G228,   32
            }

            Name (Y228, 0x00)
            OperationRegion (A22C, SystemMemory, 0xE000822C, 0x04)
            Field (A22C, ByteAcc, Lock, Preserve)
            {
                F22C,   32
            }

            Name (V22C, 0x00)
            OperationRegion (B22C, SystemMemory, 0xE000922C, 0x04)
            Field (B22C, ByteAcc, Lock, Preserve)
            {
                G22C,   32
            }

            Name (Y22C, 0x00)
            OperationRegion (A238, SystemMemory, 0xE0008238, 0x04)
            Field (A238, ByteAcc, Lock, Preserve)
            {
                F238,   32
            }

            Name (V238, 0x00)
            OperationRegion (B238, SystemMemory, 0xE0009238, 0x04)
            Field (B238, ByteAcc, Lock, Preserve)
            {
                G238,   32
            }

            Name (Y238, 0x00)
            OperationRegion (A240, SystemMemory, 0xE0008240, 0x04)
            Field (A240, ByteAcc, Lock, Preserve)
            {
                F240,   32
            }

            Name (V240, 0x00)
            OperationRegion (B240, SystemMemory, 0xE0009240, 0x04)
            Field (B240, ByteAcc, Lock, Preserve)
            {
                G240,   32
            }

            Name (Y240, 0x00)
            OperationRegion (A244, SystemMemory, 0xE0008244, 0x04)
            Field (A244, ByteAcc, Lock, Preserve)
            {
                F244,   32
            }

            Name (V244, 0x00)
            OperationRegion (B244, SystemMemory, 0xE0009244, 0x04)
            Field (B244, ByteAcc, Lock, Preserve)
            {
                G244,   32
            }

            Name (Y244, 0x00)
            OperationRegion (A250, SystemMemory, 0xE0008250, 0x04)
            Field (A250, ByteAcc, Lock, Preserve)
            {
                F250,   32
            }

            Name (V250, 0x00)
            OperationRegion (B250, SystemMemory, 0xE0009250, 0x04)
            Field (B250, ByteAcc, Lock, Preserve)
            {
                G250,   32
            }

            Name (Y250, 0x00)
            OperationRegion (A258, SystemMemory, 0xE0008258, 0x04)
            Field (A258, ByteAcc, Lock, Preserve)
            {
                F258,   32
            }

            Name (V258, 0x00)
            OperationRegion (B258, SystemMemory, 0xE0009258, 0x04)
            Field (B258, ByteAcc, Lock, Preserve)
            {
                G258,   32
            }

            Name (Y258, 0x00)
            OperationRegion (A25C, SystemMemory, 0xE000825C, 0x04)
            Field (A25C, ByteAcc, Lock, Preserve)
            {
                F25C,   32
            }

            Name (V25C, 0x00)
            OperationRegion (B25C, SystemMemory, 0xE000925C, 0x04)
            Field (B25C, ByteAcc, Lock, Preserve)
            {
                G25C,   32
            }

            Name (Y25C, 0x00)
            OperationRegion (ACD0, SystemMemory, 0xE0008CD0, 0x04)
            Field (ACD0, ByteAcc, Lock, Preserve)
            {
                FCD0,   32
            }

            Name (VCD0, 0x00)
            OperationRegion (BCD0, SystemMemory, 0xE0009CD0, 0x04)
            Field (BCD0, ByteAcc, Lock, Preserve)
            {
                GCD0,   32
            }

            Name (YCD0, 0x00)
            OperationRegion (AD34, SystemMemory, 0xE0008D34, 0x04)
            Field (AD34, ByteAcc, Lock, Preserve)
            {
                FD34,   32
            }

            Name (VD34, 0x00)
            OperationRegion (BD34, SystemMemory, 0xE0009D34, 0x04)
            Field (BD34, ByteAcc, Lock, Preserve)
            {
                GD34,   32
            }

            Name (YD34, 0x00)
            OperationRegion (AD94, SystemMemory, 0xE0008D94, 0x04)
            Field (AD94, ByteAcc, Lock, Preserve)
            {
                FD94,   32
            }

            Name (VD94, 0x00)
            OperationRegion (BD94, SystemMemory, 0xE0009D94, 0x04)
            Field (BD94, ByteAcc, Lock, Preserve)
            {
                GD94,   32
            }

            Name (YD94, 0x00)
            OperationRegion (AD98, SystemMemory, 0xE0008D98, 0x04)
            Field (AD98, ByteAcc, Lock, Preserve)
            {
                FD98,   32
            }

            Name (VD98, 0x00)
            OperationRegion (BD98, SystemMemory, 0xE0009D98, 0x04)
            Field (BD98, ByteAcc, Lock, Preserve)
            {
                GD98,   32
            }

            Name (YD98, 0x00)
            OperationRegion (A0F4, SystemMemory, 0xE00080F4, 0x04)
            Field (A0F4, ByteAcc, Lock, Preserve)
            {
                F0F4,   32
            }

            Name (V0F4, 0x00)
            OperationRegion (B0F4, SystemMemory, 0xE00090F4, 0x04)
            Field (B0F4, ByteAcc, Lock, Preserve)
            {
                G0F4,   32
            }

            Name (Y0F4, 0x00)
            OperationRegion (ADA0, SystemMemory, 0xE0008DA0, 0x04)
            Field (ADA0, ByteAcc, Lock, Preserve)
            {
                FDA0,   32
            }

            Name (VDA0, 0x00)
            OperationRegion (BDA0, SystemMemory, 0xE0009DA0, 0x04)
            Field (BDA0, ByteAcc, Lock, Preserve)
            {
                GDA0,   32
            }

            Name (YDA0, 0x00)
            OperationRegion (ADA4, SystemMemory, 0xE0008DA4, 0x04)
            Field (ADA4, ByteAcc, Lock, Preserve)
            {
                FDA4,   32
            }

            Name (VDA4, 0x00)
            OperationRegion (BDA4, SystemMemory, 0xE0009DA4, 0x04)
            Field (BDA4, ByteAcc, Lock, Preserve)
            {
                GDA4,   32
            }

            Name (YDA4, 0x00)
            OperationRegion (ADA8, SystemMemory, 0xE0008DA8, 0x04)
            Field (ADA8, ByteAcc, Lock, Preserve)
            {
                FDA8,   32
            }

            Name (VDA8, 0x00)
            OperationRegion (BDA8, SystemMemory, 0xE0009DA8, 0x04)
            Field (BDA8, ByteAcc, Lock, Preserve)
            {
                GDA8,   32
            }

            Name (YDA8, 0x00)
            OperationRegion (ADAC, SystemMemory, 0xE0008DAC, 0x04)
            Field (ADAC, ByteAcc, Lock, Preserve)
            {
                FDAC,   32
            }

            Name (VDAC, 0x00)
            OperationRegion (BDAC, SystemMemory, 0xE0009DAC, 0x04)
            Field (BDAC, ByteAcc, Lock, Preserve)
            {
                GDAC,   32
            }

            Name (YDAC, 0x00)
            OperationRegion (ADB0, SystemMemory, 0xE0008DB0, 0x04)
            Field (ADB0, ByteAcc, Lock, Preserve)
            {
                FDB0,   32
            }

            Name (VDB0, 0x00)
            OperationRegion (BDB0, SystemMemory, 0xE0009DB0, 0x04)
            Field (BDB0, ByteAcc, Lock, Preserve)
            {
                GDB0,   32
            }

            Name (YDB0, 0x00)
            OperationRegion (ADB4, SystemMemory, 0xE0008DB4, 0x04)
            Field (ADB4, ByteAcc, Lock, Preserve)
            {
                FDB4,   32
            }

            Name (VDB4, 0x00)
            OperationRegion (BDB4, SystemMemory, 0xE0009DB4, 0x04)
            Field (BDB4, ByteAcc, Lock, Preserve)
            {
                GDB4,   32
            }

            Name (YDB4, 0x00)
            OperationRegion (ADB8, SystemMemory, 0xE0008DB8, 0x04)
            Field (ADB8, ByteAcc, Lock, Preserve)
            {
                FDB8,   32
            }

            Name (VDB8, 0x00)
            OperationRegion (BDB8, SystemMemory, 0xE0009DB8, 0x04)
            Field (BDB8, ByteAcc, Lock, Preserve)
            {
                GDB8,   32
            }

            Name (YDB8, 0x00)
            OperationRegion (ADBC, SystemMemory, 0xE0008DBC, 0x04)
            Field (ADBC, ByteAcc, Lock, Preserve)
            {
                FDBC,   32
            }

            Name (VDBC, 0x00)
            OperationRegion (BDBC, SystemMemory, 0xE0009DBC, 0x04)
            Field (BDBC, ByteAcc, Lock, Preserve)
            {
                GDBC,   32
            }

            Name (YDBC, 0x00)
            OperationRegion (ALCT, SystemMemory, 0xE00080B0, 0x02)
            Field (ALCT, ByteAcc, Lock, Preserve)
            {
                    ,   4, 
                FLDS,   1, 
                Offset (0x02)
            }

            OperationRegion (BLCT, SystemMemory, 0xE00090B0, 0x02)
            Field (BLCT, ByteAcc, Lock, Preserve)
            {
                    ,   4, 
                GLDS,   1, 
                Offset (0x02)
            }

            OperationRegion (ALST, SystemMemory, 0xE00080B2, 0x02)
            Field (ALST, ByteAcc, Lock, Preserve)
            {
                    ,   4, 
                    ,   7, 
                FLTR,   1, 
                    ,   1, 
                FLAC,   1, 
                Offset (0x02)
            }

            OperationRegion (BLST, SystemMemory, 0xE00090B2, 0x02)
            Field (BLST, ByteAcc, Lock, Preserve)
            {
                    ,   4, 
                    ,   7, 
                GLTR,   1, 
                    ,   1, 
                GLAC,   1, 
                Offset (0x02)
            }

            OperationRegion (A214, SystemMemory, 0xE0008214, 0x04)
            Field (A214, ByteAcc, Lock, Preserve)
            {
                Offset (0x02), 
                F214,   4, 
                Offset (0x04)
            }

            Name (V214, 0x00)
            OperationRegion (B214, SystemMemory, 0xE0009214, 0x04)
            Field (B214, ByteAcc, Lock, Preserve)
            {
                Offset (0x02), 
                G214,   4, 
                Offset (0x04)
            }

            Name (Y214, 0x00)
            OperationRegion (AC20, SystemMemory, 0xE0008C20, 0x04)
            Field (AC20, ByteAcc, Lock, Preserve)
            {
                    ,   4, 
                FSQ1,   1, 
                FSQ2,   1, 
                Offset (0x04)
            }

            OperationRegion (BC20, SystemMemory, 0xE0009C20, 0x04)
            Field (BC20, ByteAcc, Lock, Preserve)
            {
                    ,   4, 
                GSQ1,   1, 
                GSQ2,   1, 
                Offset (0x04)
            }

            OperationRegion (AD10, SystemMemory, 0xE0008D10, 0x04)
            Field (AD10, ByteAcc, Lock, Preserve)
            {
                FD10,   1, 
                Offset (0x04)
            }

            OperationRegion (BD10, SystemMemory, 0xE0009D10, 0x04)
            Field (BD10, ByteAcc, Lock, Preserve)
            {
                GD10,   1, 
                Offset (0x04)
            }

            OperationRegion (A006, SystemMemory, 0xE0008006, 0x02)
            Field (A006, ByteAcc, Lock, Preserve)
            {
                F006,   16
            }

            Name (V006, 0x00)
            OperationRegion (B006, SystemMemory, 0xE0009006, 0x02)
            Field (B006, ByteAcc, Lock, Preserve)
            {
                G006,   16
            }

            Name (Y006, 0x00)
            OperationRegion (A01E, SystemMemory, 0xE000801E, 0x02)
            Field (A01E, ByteAcc, Lock, Preserve)
            {
                F01E,   16
            }

            Name (V01E, 0x00)
            OperationRegion (B01E, SystemMemory, 0xE000901E, 0x02)
            Field (B01E, ByteAcc, Lock, Preserve)
            {
                G01E,   16
            }

            Name (Y01E, 0x00)
            OperationRegion (A0AA, SystemMemory, 0xE00080AA, 0x02)
            Field (A0AA, ByteAcc, Lock, Preserve)
            {
                F0AA,   16
            }

            Name (V0AA, 0x00)
            OperationRegion (B0AA, SystemMemory, 0xE00090AA, 0x02)
            Field (B0AA, ByteAcc, Lock, Preserve)
            {
                G0AA,   16
            }

            Name (Y0AA, 0x00)
            OperationRegion (A0C0, SystemMemory, 0xE00080C0, 0x04)
            Field (A0C0, ByteAcc, Lock, Preserve)
            {
                F0C0,   32
            }

            Name (V0C0, 0x00)
            OperationRegion (B0C0, SystemMemory, 0xE00090C0, 0x04)
            Field (B0C0, ByteAcc, Lock, Preserve)
            {
                G0C0,   32
            }

            Name (Y0C0, 0x00)
            OperationRegion (A0D2, SystemMemory, 0xE00080D2, 0x02)
            Field (A0D2, ByteAcc, Lock, Preserve)
            {
                F0D2,   16
            }

            Name (V0D2, 0x00)
            OperationRegion (B0D2, SystemMemory, 0xE00090D2, 0x02)
            Field (B0D2, ByteAcc, Lock, Preserve)
            {
                G0D2,   16
            }

            Name (Y0D2, 0x00)
            OperationRegion (A1C4, SystemMemory, 0xE00081C4, 0x02)
            Field (A1C4, ByteAcc, Lock, Preserve)
            {
                F1C4,   16
            }

            Name (V1C4, 0x00)
            OperationRegion (B1C4, SystemMemory, 0xE00091C4, 0x02)
            Field (B1C4, ByteAcc, Lock, Preserve)
            {
                G1C4,   16
            }

            Name (Y1C4, 0x00)
            OperationRegion (A1D0, SystemMemory, 0xE00081D0, 0x04)
            Field (A1D0, ByteAcc, Lock, Preserve)
            {
                F1D0,   32
            }

            Name (V1D0, 0x00)
            OperationRegion (B1D0, SystemMemory, 0xE00091D0, 0x04)
            Field (B1D0, ByteAcc, Lock, Preserve)
            {
                G1D0,   32
            }

            Name (Y1D0, 0x00)
            OperationRegion (A1F0, SystemMemory, 0xE00081F0, 0x04)
            Field (A1F0, ByteAcc, Lock, Preserve)
            {
                F1F0,   32
            }

            Name (V1F0, 0x00)
            OperationRegion (B1F0, SystemMemory, 0xE00091F0, 0x04)
            Field (B1F0, ByteAcc, Lock, Preserve)
            {
                G1F0,   32
            }

            Name (Y1F0, 0x00)
            OperationRegion (AD9C, SystemMemory, 0xE0008D9C, 0x04)
            Field (AD9C, ByteAcc, Lock, Preserve)
            {
                FD9C,   32
            }

            Name (VD9C, 0x00)
            OperationRegion (BD9C, SystemMemory, 0xE0009D9C, 0x04)
            Field (BD9C, ByteAcc, Lock, Preserve)
            {
                GD9C,   32
            }

            Name (YD9C, 0x00)
            OperationRegion (A0B2, SystemMemory, 0xE00080B2, 0x02)
            Field (A0B2, ByteAcc, Lock, Preserve)
            {
                F0B2,   16
            }

            Name (V0B2, 0x00)
            OperationRegion (B0B2, SystemMemory, 0xE00090B2, 0x02)
            Field (B0B2, ByteAcc, Lock, Preserve)
            {
                G0B2,   16
            }

            Name (Y0B2, 0x00)
            OperationRegion (A508, SystemMemory, 0xE0008508, 0x01)
            Field (A508, ByteAcc, Lock, Preserve)
            {
                F508,   1, 
                Offset (0x01)
            }

            Name (V508, 0x00)
            OperationRegion (B508, SystemMemory, 0xE0009508, 0x01)
            Field (B508, ByteAcc, Lock, Preserve)
            {
                G508,   1, 
                Offset (0x01)
            }

            Name (Y508, 0x00)
            OperationRegion (BND0, SystemMemory, 0xE000891C, 0x04)
            Field (BND0, ByteAcc, Lock, Preserve)
            {
                    ,   31, 
                B0PD,   1
            }

            OperationRegion (BND1, SystemMemory, 0xE000893C, 0x04)
            Field (BND1, ByteAcc, Lock, Preserve)
            {
                    ,   31, 
                B1PD,   1
            }

            OperationRegion (BND2, SystemMemory, 0xE000895C, 0x04)
            Field (BND2, ByteAcc, Lock, Preserve)
            {
                    ,   31, 
                B2PD,   1
            }

            OperationRegion (BND3, SystemMemory, 0xE000897C, 0x04)
            Field (BND3, ByteAcc, Lock, Preserve)
            {
                    ,   31, 
                B3PD,   1
            }

            OperationRegion (BND4, SystemMemory, 0xE000899C, 0x04)
            Field (BND4, ByteAcc, Lock, Preserve)
            {
                    ,   31, 
                B4PD,   1
            }

            OperationRegion (BND5, SystemMemory, 0xE00089BC, 0x04)
            Field (BND5, ByteAcc, Lock, Preserve)
            {
                    ,   31, 
                B5PD,   1
            }

            OperationRegion (BND6, SystemMemory, 0xE00089DC, 0x04)
            Field (BND6, ByteAcc, Lock, Preserve)
            {
                    ,   31, 
                B6PD,   1
            }

            OperationRegion (BND7, SystemMemory, 0xE00089FC, 0x04)
            Field (BND7, ByteAcc, Lock, Preserve)
            {
                    ,   31, 
                B7PD,   1
            }

            OperationRegion (C7AR, SystemMemory, 0xFED15DA8, 0x04)
            Field (C7AR, ByteAcc, Lock, Preserve)
            {
                    ,   2, 
                C7AE,   1, 
                Offset (0x04)
            }

            OperationRegion (A11A, SystemMemory, 0xE000811A, 0x02)
            Field (A11A, ByteAcc, Lock, Preserve)
            {
                    ,   1, 
                F11A,   1, 
                Offset (0x02)
            }

            OperationRegion (B11A, SystemMemory, 0xE000911A, 0x02)
            Field (B11A, ByteAcc, Lock, Preserve)
            {
                    ,   1, 
                G11A,   1, 
                Offset (0x02)
            }

            OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
            Field (A1E0, ByteAcc, NoLock, Preserve)
            {
                AVND,   32, 
                BMIE,   3, 
                Offset (0x18), 
                PRIB,   8, 
                SECB,   8, 
                SUBB,   8, 
                Offset (0x1E), 
                    ,   13, 
                MABT,   1
            }

            OperationRegion (A1E1, PCI_Config, 0xA0, 0x40)
            Field (A1E1, ByteAcc, NoLock, Preserve)
            {
                Offset (0x01), 
                Offset (0x02), 
                Offset (0x04), 
                Offset (0x08), 
                Offset (0x0A), 
                    ,   5, 
                TPEN,   1, 
                Offset (0x0C), 
                SSPD,   4, 
                    ,   16, 
                LACR,   1, 
                Offset (0x10), 
                    ,   4, 
                LDIS,   1, 
                LRTN,   1, 
                Offset (0x12), 
                CSPD,   4, 
                    ,   7, 
                LTRN,   1, 
                    ,   1, 
                LACT,   1, 
                Offset (0x14), 
                Offset (0x30), 
                TSPD,   4
            }

            OperationRegion (A1E2, PCI_Config, 0x80, 0x08)
            Field (A1E2, ByteAcc, NoLock, Preserve)
            {
                Offset (0x01), 
                Offset (0x02), 
                Offset (0x04), 
                PSTA,   2
            }

            OperationRegion (A1E3, PCI_Config, 0x0200, 0x20)
            Field (A1E3, ByteAcc, NoLock, Preserve)
            {
                Offset (0x14), 
                Offset (0x16), 
                PSTS,   4
            }

            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (0x00)
            }

            Device (UPSB)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                Field (A1E0, ByteAcc, NoLock, Preserve)
                {
                    AVND,   32, 
                    BMIE,   3, 
                    Offset (0x18), 
                    PRIB,   8, 
                    SECB,   8, 
                    SUBB,   8, 
                    Offset (0x1E), 
                        ,   13, 
                    MABT,   1
                }

                OperationRegion (A1E1, PCI_Config, 0xC0, 0x40)
                Field (A1E1, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    Offset (0x02), 
                    Offset (0x04), 
                    Offset (0x08), 
                    Offset (0x0A), 
                        ,   5, 
                    TPEN,   1, 
                    Offset (0x0C), 
                    SSPD,   4, 
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    LRTN,   1, 
                        ,   23, 
                    LACT,   1, 
                    Offset (0x30), 
                    TSPD,   4
                }

                OperationRegion (A1E2, PCI_Config, 0x80, 0x08)
                Field (A1E2, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    Offset (0x02), 
                    Offset (0x04), 
                    PSTA,   2
                }

                Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                {
                    Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.SECB */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (0x00)
                }

                Device (DSB0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                    Field (A1E0, ByteAcc, NoLock, Preserve)
                    {
                        AVND,   32, 
                        BMIE,   3, 
                        Offset (0x18), 
                        PRIB,   8, 
                        SECB,   8, 
                        SUBB,   8, 
                        Offset (0x1E), 
                            ,   13, 
                        MABT,   1
                    }

                    OperationRegion (A1E1, PCI_Config, 0xC0, 0x40)
                    Field (A1E1, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x01), 
                        Offset (0x02), 
                        Offset (0x04), 
                        Offset (0x08), 
                        Offset (0x0A), 
                            ,   5, 
                        TPEN,   1, 
                        Offset (0x0C), 
                        Offset (0x10), 
                            ,   4, 
                        LDIS,   1, 
                        LRTN,   1, 
                            ,   23, 
                        LACT,   1
                    }

                    OperationRegion (A1E2, PCI_Config, 0x80, 0x08)
                    Field (A1E2, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x01), 
                        Offset (0x02), 
                        Offset (0x04), 
                        PSTA,   2
                    }

                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                    {
                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB0.SECB */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (0x00)
                    }

                    Device (NHI0)
                    {
                        Method (PSSR, 1, Serialized)
                        {
                            If ((Arg0 == 0x01))
                            {
                                VDD8 = FDD8 /* \_SB_.PCI0.P0P2.FDD8 */
                                V900 = F900 /* \_SB_.PCI0.P0P2.F900 */
                                V904 = F904 /* \_SB_.PCI0.P0P2.F904 */
                                V908 = F908 /* \_SB_.PCI0.P0P2.F908 */
                                V90C = F90C /* \_SB_.PCI0.P0P2.F90C */
                                V910 = F910 /* \_SB_.PCI0.P0P2.F910 */
                                V80C = F80C /* \_SB_.PCI0.P0P2.F80C */
                                V920 = F920 /* \_SB_.PCI0.P0P2.F920 */
                                V924 = F924 /* \_SB_.PCI0.P0P2.F924 */
                                V928 = F928 /* \_SB_.PCI0.P0P2.F928 */
                                V92C = F92C /* \_SB_.PCI0.P0P2.F92C */
                                V930 = F930 /* \_SB_.PCI0.P0P2.F930 */
                                V82C = F82C /* \_SB_.PCI0.P0P2.F82C */
                                V940 = F940 /* \_SB_.PCI0.P0P2.F940 */
                                V944 = F944 /* \_SB_.PCI0.P0P2.F944 */
                                V948 = F948 /* \_SB_.PCI0.P0P2.F948 */
                                V94C = F94C /* \_SB_.PCI0.P0P2.F94C */
                                V950 = F950 /* \_SB_.PCI0.P0P2.F950 */
                                V84C = F84C /* \_SB_.PCI0.P0P2.F84C */
                                V960 = F960 /* \_SB_.PCI0.P0P2.F960 */
                                V964 = F964 /* \_SB_.PCI0.P0P2.F964 */
                                V968 = F968 /* \_SB_.PCI0.P0P2.F968 */
                                V96C = F96C /* \_SB_.PCI0.P0P2.F96C */
                                V970 = F970 /* \_SB_.PCI0.P0P2.F970 */
                                V86C = F86C /* \_SB_.PCI0.P0P2.F86C */
                                V980 = F980 /* \_SB_.PCI0.P0P2.F980 */
                                V984 = F984 /* \_SB_.PCI0.P0P2.F984 */
                                V988 = F988 /* \_SB_.PCI0.P0P2.F988 */
                                V98C = F98C /* \_SB_.PCI0.P0P2.F98C */
                                V990 = F990 /* \_SB_.PCI0.P0P2.F990 */
                                V88C = F88C /* \_SB_.PCI0.P0P2.F88C */
                                V9A0 = F9A0 /* \_SB_.PCI0.P0P2.F9A0 */
                                V9A4 = F9A4 /* \_SB_.PCI0.P0P2.F9A4 */
                                V9A8 = F9A8 /* \_SB_.PCI0.P0P2.F9A8 */
                                V9AC = F9AC /* \_SB_.PCI0.P0P2.F9AC */
                                V9B0 = F9B0 /* \_SB_.PCI0.P0P2.F9B0 */
                                V8AC = F8AC /* \_SB_.PCI0.P0P2.F8AC */
                                V9C0 = F9C0 /* \_SB_.PCI0.P0P2.F9C0 */
                                V9C4 = F9C4 /* \_SB_.PCI0.P0P2.F9C4 */
                                V9C8 = F9C8 /* \_SB_.PCI0.P0P2.F9C8 */
                                V9CC = F9CC /* \_SB_.PCI0.P0P2.F9CC */
                                V9D0 = F9D0 /* \_SB_.PCI0.P0P2.F9D0 */
                                V8CC = F8CC /* \_SB_.PCI0.P0P2.F8CC */
                                V9E0 = F9E0 /* \_SB_.PCI0.P0P2.F9E0 */
                                V9E4 = F9E4 /* \_SB_.PCI0.P0P2.F9E4 */
                                V9E8 = F9E8 /* \_SB_.PCI0.P0P2.F9E8 */
                                V9EC = F9EC /* \_SB_.PCI0.P0P2.F9EC */
                                V9F0 = F9F0 /* \_SB_.PCI0.P0P2.F9F0 */
                                V8EC = F8EC /* \_SB_.PCI0.P0P2.F8EC */
                                VC30 = FC30 /* \_SB_.PCI0.P0P2.FC30 */
                                VA00 = FA00 /* \_SB_.PCI0.P0P2.FA00 */
                                VA04 = FA04 /* \_SB_.PCI0.P0P2.FA04 */
                                VA08 = FA08 /* \_SB_.PCI0.P0P2.FA08 */
                                VA0C = FA0C /* \_SB_.PCI0.P0P2.FA0C */
                                VA10 = FA10 /* \_SB_.PCI0.P0P2.FA10 */
                                VA14 = FA14 /* \_SB_.PCI0.P0P2.FA14 */
                                VA18 = FA18 /* \_SB_.PCI0.P0P2.FA18 */
                                VA1C = FA1C /* \_SB_.PCI0.P0P2.FA1C */
                                VA20 = FA20 /* \_SB_.PCI0.P0P2.FA20 */
                                VA24 = FA24 /* \_SB_.PCI0.P0P2.FA24 */
                                VA28 = FA28 /* \_SB_.PCI0.P0P2.FA28 */
                                VA2C = FA2C /* \_SB_.PCI0.P0P2.FA2C */
                                VA30 = FA30 /* \_SB_.PCI0.P0P2.FA30 */
                                VA34 = FA34 /* \_SB_.PCI0.P0P2.FA34 */
                                VA38 = FA38 /* \_SB_.PCI0.P0P2.FA38 */
                                VA3C = FA3C /* \_SB_.PCI0.P0P2.FA3C */
                                VA40 = FA40 /* \_SB_.PCI0.P0P2.FA40 */
                                VA44 = FA44 /* \_SB_.PCI0.P0P2.FA44 */
                                VA48 = FA48 /* \_SB_.PCI0.P0P2.FA48 */
                                VA4C = FA4C /* \_SB_.PCI0.P0P2.FA4C */
                                VA50 = FA50 /* \_SB_.PCI0.P0P2.FA50 */
                                VA54 = FA54 /* \_SB_.PCI0.P0P2.FA54 */
                                VA58 = FA58 /* \_SB_.PCI0.P0P2.FA58 */
                                VA5C = FA5C /* \_SB_.PCI0.P0P2.FA5C */
                                VA60 = FA60 /* \_SB_.PCI0.P0P2.FA60 */
                                VA64 = FA64 /* \_SB_.PCI0.P0P2.FA64 */
                                VA68 = FA68 /* \_SB_.PCI0.P0P2.FA68 */
                                VA6C = FA6C /* \_SB_.PCI0.P0P2.FA6C */
                                VA70 = FA70 /* \_SB_.PCI0.P0P2.FA70 */
                                VA74 = FA74 /* \_SB_.PCI0.P0P2.FA74 */
                                VA78 = FA78 /* \_SB_.PCI0.P0P2.FA78 */
                                VA7C = FA7C /* \_SB_.PCI0.P0P2.FA7C */
                                VA80 = FA80 /* \_SB_.PCI0.P0P2.FA80 */
                                VA84 = FA84 /* \_SB_.PCI0.P0P2.FA84 */
                                VA88 = FA88 /* \_SB_.PCI0.P0P2.FA88 */
                                VA8C = FA8C /* \_SB_.PCI0.P0P2.FA8C */
                                VA90 = FA90 /* \_SB_.PCI0.P0P2.FA90 */
                                VA94 = FA94 /* \_SB_.PCI0.P0P2.FA94 */
                                VA98 = FA98 /* \_SB_.PCI0.P0P2.FA98 */
                                VA9C = FA9C /* \_SB_.PCI0.P0P2.FA9C */
                                VAA0 = FAA0 /* \_SB_.PCI0.P0P2.FAA0 */
                                VAA4 = FAA4 /* \_SB_.PCI0.P0P2.FAA4 */
                                VAA8 = FAA8 /* \_SB_.PCI0.P0P2.FAA8 */
                                VAAC = FAAC /* \_SB_.PCI0.P0P2.FAAC */
                                VAB0 = FAB0 /* \_SB_.PCI0.P0P2.FAB0 */
                                VAB4 = FAB4 /* \_SB_.PCI0.P0P2.FAB4 */
                                VAB8 = FAB8 /* \_SB_.PCI0.P0P2.FAB8 */
                                VABC = FABC /* \_SB_.PCI0.P0P2.FABC */
                                VAC0 = FAC0 /* \_SB_.PCI0.P0P2.FAC0 */
                                VAC4 = FAC4 /* \_SB_.PCI0.P0P2.FAC4 */
                                VAC8 = FAC8 /* \_SB_.PCI0.P0P2.FAC8 */
                                VACC = FACC /* \_SB_.PCI0.P0P2.FACC */
                                VAD0 = FAD0 /* \_SB_.PCI0.P0P2.FAD0 */
                                VAD4 = FAD4 /* \_SB_.PCI0.P0P2.FAD4 */
                                VAD8 = FAD8 /* \_SB_.PCI0.P0P2.FAD8 */
                                VADC = FADC /* \_SB_.PCI0.P0P2.FADC */
                                VAE0 = FAE0 /* \_SB_.PCI0.P0P2.FAE0 */
                                VAE4 = FAE4 /* \_SB_.PCI0.P0P2.FAE4 */
                                VAE8 = FAE8 /* \_SB_.PCI0.P0P2.FAE8 */
                                VAEC = FAEC /* \_SB_.PCI0.P0P2.FAEC */
                                VAF0 = FAF0 /* \_SB_.PCI0.P0P2.FAF0 */
                                VAF4 = FAF4 /* \_SB_.PCI0.P0P2.FAF4 */
                                VAF8 = FAF8 /* \_SB_.PCI0.P0P2.FAF8 */
                                VAFC = FAFC /* \_SB_.PCI0.P0P2.FAFC */
                                V918 = F918 /* \_SB_.PCI0.P0P2.F918 */
                                V938 = F938 /* \_SB_.PCI0.P0P2.F938 */
                                V958 = F958 /* \_SB_.PCI0.P0P2.F958 */
                                V978 = F978 /* \_SB_.PCI0.P0P2.F978 */
                                V998 = F998 /* \_SB_.PCI0.P0P2.F998 */
                                V9B8 = F9B8 /* \_SB_.PCI0.P0P2.F9B8 */
                                V9D8 = F9D8 /* \_SB_.PCI0.P0P2.F9D8 */
                                V9F8 = F9F8 /* \_SB_.PCI0.P0P2.F9F8 */
                            }
                            Else
                            {
                                FDD8 = VDD8 /* \_SB_.PCI0.P0P2.VDD8 */
                                F900 = V900 /* \_SB_.PCI0.P0P2.V900 */
                                F904 = V904 /* \_SB_.PCI0.P0P2.V904 */
                                F908 = V908 /* \_SB_.PCI0.P0P2.V908 */
                                F90C = V90C /* \_SB_.PCI0.P0P2.V90C */
                                F910 = V910 /* \_SB_.PCI0.P0P2.V910 */
                                F80C = V80C /* \_SB_.PCI0.P0P2.V80C */
                                F920 = V920 /* \_SB_.PCI0.P0P2.V920 */
                                F924 = V924 /* \_SB_.PCI0.P0P2.V924 */
                                F928 = V928 /* \_SB_.PCI0.P0P2.V928 */
                                F92C = V92C /* \_SB_.PCI0.P0P2.V92C */
                                F930 = V930 /* \_SB_.PCI0.P0P2.V930 */
                                F82C = V82C /* \_SB_.PCI0.P0P2.V82C */
                                F940 = V940 /* \_SB_.PCI0.P0P2.V940 */
                                F944 = V944 /* \_SB_.PCI0.P0P2.V944 */
                                F948 = V948 /* \_SB_.PCI0.P0P2.V948 */
                                F94C = V94C /* \_SB_.PCI0.P0P2.V94C */
                                F950 = V950 /* \_SB_.PCI0.P0P2.V950 */
                                F84C = V84C /* \_SB_.PCI0.P0P2.V84C */
                                F960 = V960 /* \_SB_.PCI0.P0P2.V960 */
                                F964 = V964 /* \_SB_.PCI0.P0P2.V964 */
                                F968 = V968 /* \_SB_.PCI0.P0P2.V968 */
                                F96C = V96C /* \_SB_.PCI0.P0P2.V96C */
                                F970 = V970 /* \_SB_.PCI0.P0P2.V970 */
                                F86C = V86C /* \_SB_.PCI0.P0P2.V86C */
                                F980 = V980 /* \_SB_.PCI0.P0P2.V980 */
                                F984 = V984 /* \_SB_.PCI0.P0P2.V984 */
                                F988 = V988 /* \_SB_.PCI0.P0P2.V988 */
                                F98C = V98C /* \_SB_.PCI0.P0P2.V98C */
                                F990 = V990 /* \_SB_.PCI0.P0P2.V990 */
                                F88C = V88C /* \_SB_.PCI0.P0P2.V88C */
                                F9A0 = V9A0 /* \_SB_.PCI0.P0P2.V9A0 */
                                F9A4 = V9A4 /* \_SB_.PCI0.P0P2.V9A4 */
                                F9A8 = V9A8 /* \_SB_.PCI0.P0P2.V9A8 */
                                F9AC = V9AC /* \_SB_.PCI0.P0P2.V9AC */
                                F9B0 = V9B0 /* \_SB_.PCI0.P0P2.V9B0 */
                                F8AC = V8AC /* \_SB_.PCI0.P0P2.V8AC */
                                F9C0 = V9C0 /* \_SB_.PCI0.P0P2.V9C0 */
                                F9C4 = V9C4 /* \_SB_.PCI0.P0P2.V9C4 */
                                F9C8 = V9C8 /* \_SB_.PCI0.P0P2.V9C8 */
                                F9CC = V9CC /* \_SB_.PCI0.P0P2.V9CC */
                                F9D0 = V9D0 /* \_SB_.PCI0.P0P2.V9D0 */
                                F8CC = V8CC /* \_SB_.PCI0.P0P2.V8CC */
                                F9E0 = V9E0 /* \_SB_.PCI0.P0P2.V9E0 */
                                F9E4 = V9E4 /* \_SB_.PCI0.P0P2.V9E4 */
                                F9E8 = V9E8 /* \_SB_.PCI0.P0P2.V9E8 */
                                F9EC = V9EC /* \_SB_.PCI0.P0P2.V9EC */
                                F9F0 = V9F0 /* \_SB_.PCI0.P0P2.V9F0 */
                                F8EC = V8EC /* \_SB_.PCI0.P0P2.V8EC */
                                FC30 = VC30 /* \_SB_.PCI0.P0P2.VC30 */
                                FA00 = VA00 /* \_SB_.PCI0.P0P2.VA00 */
                                FA04 = VA04 /* \_SB_.PCI0.P0P2.VA04 */
                                FA08 = VA08 /* \_SB_.PCI0.P0P2.VA08 */
                                FA0C = VA0C /* \_SB_.PCI0.P0P2.VA0C */
                                FA10 = VA10 /* \_SB_.PCI0.P0P2.VA10 */
                                FA14 = VA14 /* \_SB_.PCI0.P0P2.VA14 */
                                FA18 = VA18 /* \_SB_.PCI0.P0P2.VA18 */
                                FA1C = VA1C /* \_SB_.PCI0.P0P2.VA1C */
                                FA20 = VA20 /* \_SB_.PCI0.P0P2.VA20 */
                                FA24 = VA24 /* \_SB_.PCI0.P0P2.VA24 */
                                FA28 = VA28 /* \_SB_.PCI0.P0P2.VA28 */
                                FA2C = VA2C /* \_SB_.PCI0.P0P2.VA2C */
                                FA30 = VA30 /* \_SB_.PCI0.P0P2.VA30 */
                                FA34 = VA34 /* \_SB_.PCI0.P0P2.VA34 */
                                FA38 = VA38 /* \_SB_.PCI0.P0P2.VA38 */
                                FA3C = VA3C /* \_SB_.PCI0.P0P2.VA3C */
                                FA40 = VA40 /* \_SB_.PCI0.P0P2.VA40 */
                                FA44 = VA44 /* \_SB_.PCI0.P0P2.VA44 */
                                FA48 = VA48 /* \_SB_.PCI0.P0P2.VA48 */
                                FA4C = VA4C /* \_SB_.PCI0.P0P2.VA4C */
                                FA50 = VA50 /* \_SB_.PCI0.P0P2.VA50 */
                                FA54 = VA54 /* \_SB_.PCI0.P0P2.VA54 */
                                FA58 = VA58 /* \_SB_.PCI0.P0P2.VA58 */
                                FA5C = VA5C /* \_SB_.PCI0.P0P2.VA5C */
                                FA60 = VA60 /* \_SB_.PCI0.P0P2.VA60 */
                                FA64 = VA64 /* \_SB_.PCI0.P0P2.VA64 */
                                FA68 = VA68 /* \_SB_.PCI0.P0P2.VA68 */
                                FA6C = VA6C /* \_SB_.PCI0.P0P2.VA6C */
                                FA70 = VA70 /* \_SB_.PCI0.P0P2.VA70 */
                                FA74 = VA74 /* \_SB_.PCI0.P0P2.VA74 */
                                FA78 = VA78 /* \_SB_.PCI0.P0P2.VA78 */
                                FA7C = VA7C /* \_SB_.PCI0.P0P2.VA7C */
                                FA80 = VA80 /* \_SB_.PCI0.P0P2.VA80 */
                                FA84 = VA84 /* \_SB_.PCI0.P0P2.VA84 */
                                FA88 = VA88 /* \_SB_.PCI0.P0P2.VA88 */
                                FA8C = VA8C /* \_SB_.PCI0.P0P2.VA8C */
                                FA90 = VA90 /* \_SB_.PCI0.P0P2.VA90 */
                                FA94 = VA94 /* \_SB_.PCI0.P0P2.VA94 */
                                FA98 = VA98 /* \_SB_.PCI0.P0P2.VA98 */
                                FA9C = VA9C /* \_SB_.PCI0.P0P2.VA9C */
                                FAA0 = VAA0 /* \_SB_.PCI0.P0P2.VAA0 */
                                FAA4 = VAA4 /* \_SB_.PCI0.P0P2.VAA4 */
                                FAA8 = VAA8 /* \_SB_.PCI0.P0P2.VAA8 */
                                FAAC = VAAC /* \_SB_.PCI0.P0P2.VAAC */
                                FAB0 = VAB0 /* \_SB_.PCI0.P0P2.VAB0 */
                                FAB4 = VAB4 /* \_SB_.PCI0.P0P2.VAB4 */
                                FAB8 = VAB8 /* \_SB_.PCI0.P0P2.VAB8 */
                                FABC = VABC /* \_SB_.PCI0.P0P2.VABC */
                                FAC0 = VAC0 /* \_SB_.PCI0.P0P2.VAC0 */
                                FAC4 = VAC4 /* \_SB_.PCI0.P0P2.VAC4 */
                                FAC8 = VAC8 /* \_SB_.PCI0.P0P2.VAC8 */
                                FACC = VACC /* \_SB_.PCI0.P0P2.VACC */
                                FAD0 = VAD0 /* \_SB_.PCI0.P0P2.VAD0 */
                                FAD4 = VAD4 /* \_SB_.PCI0.P0P2.VAD4 */
                                FAD8 = VAD8 /* \_SB_.PCI0.P0P2.VAD8 */
                                FADC = VADC /* \_SB_.PCI0.P0P2.VADC */
                                FAE0 = VAE0 /* \_SB_.PCI0.P0P2.VAE0 */
                                FAE4 = VAE4 /* \_SB_.PCI0.P0P2.VAE4 */
                                FAE8 = VAE8 /* \_SB_.PCI0.P0P2.VAE8 */
                                FAEC = VAEC /* \_SB_.PCI0.P0P2.VAEC */
                                FAF0 = VAF0 /* \_SB_.PCI0.P0P2.VAF0 */
                                FAF4 = VAF4 /* \_SB_.PCI0.P0P2.VAF4 */
                                FAF8 = VAF8 /* \_SB_.PCI0.P0P2.VAF8 */
                                FAFC = VAFC /* \_SB_.PCI0.P0P2.VAFC */
                                F918 = V918 /* \_SB_.PCI0.P0P2.V918 */
                                F938 = V938 /* \_SB_.PCI0.P0P2.V938 */
                                F958 = V958 /* \_SB_.PCI0.P0P2.V958 */
                                F978 = V978 /* \_SB_.PCI0.P0P2.V978 */
                                F998 = V998 /* \_SB_.PCI0.P0P2.V998 */
                                F9B8 = V9B8 /* \_SB_.PCI0.P0P2.V9B8 */
                                F9D8 = V9D8 /* \_SB_.PCI0.P0P2.V9D8 */
                                F9F8 = V9F8 /* \_SB_.PCI0.P0P2.V9F8 */
                            }
                        }

                        Method (P0SR, 1, Serialized)
                        {
                            If ((Arg0 == 0x01))
                            {
                                V224 = F224 /* \_SB_.PCI0.P0P2.F224 */
                                V1F8 = F1F8 /* \_SB_.PCI0.P0P2.F1F8 */
                                V260 = F260 /* \_SB_.PCI0.P0P2.F260 */
                                VC28 = FC28 /* \_SB_.PCI0.P0P2.FC28 */
                                VC38 = FC38 /* \_SB_.PCI0.P0P2.FC38 */
                                VD14 = FD14 /* \_SB_.PCI0.P0P2.FD14 */
                                V004 = F004 /* \_SB_.PCI0.P0P2.F004 */
                                V00C = F00C /* \_SB_.PCI0.P0P2.F00C */
                                V019 = F019 /* \_SB_.PCI0.P0P2.F019 */
                                V01A = F01A /* \_SB_.PCI0.P0P2.F01A */
                                V01C = F01C /* \_SB_.PCI0.P0P2.F01C */
                                V01D = F01D /* \_SB_.PCI0.P0P2.F01D */
                                V020 = F020 /* \_SB_.PCI0.P0P2.F020 */
                                V022 = F022 /* \_SB_.PCI0.P0P2.F022 */
                                V024 = F024 /* \_SB_.PCI0.P0P2.F024 */
                                V026 = F026 /* \_SB_.PCI0.P0P2.F026 */
                                V028 = F028 /* \_SB_.PCI0.P0P2.F028 */
                                V02C = F02C /* \_SB_.PCI0.P0P2.F02C */
                                V03C = F03C /* \_SB_.PCI0.P0P2.F03C */
                                V03D = F03D /* \_SB_.PCI0.P0P2.F03D */
                                V03E = F03E /* \_SB_.PCI0.P0P2.F03E */
                                V084 = F084 /* \_SB_.PCI0.P0P2.F084 */
                                V08C = F08C /* \_SB_.PCI0.P0P2.F08C */
                                V092 = F092 /* \_SB_.PCI0.P0P2.F092 */
                                V094 = F094 /* \_SB_.PCI0.P0P2.F094 */
                                V098 = F098 /* \_SB_.PCI0.P0P2.F098 */
                                V0A2 = F0A2 /* \_SB_.PCI0.P0P2.F0A2 */
                                V0A8 = F0A8 /* \_SB_.PCI0.P0P2.F0A8 */
                                V0AC = F0AC /* \_SB_.PCI0.P0P2.F0AC */
                                V0B0 = F0B0 /* \_SB_.PCI0.P0P2.F0B0 */
                                V0B4 = F0B4 /* \_SB_.PCI0.P0P2.F0B4 */
                                V0BC = F0BC /* \_SB_.PCI0.P0P2.F0BC */
                                V0C8 = F0C8 /* \_SB_.PCI0.P0P2.F0C8 */
                                V0D0 = F0D0 /* \_SB_.PCI0.P0P2.F0D0 */
                                V0EC = F0EC /* \_SB_.PCI0.P0P2.F0EC */
                                V114 = F114 /* \_SB_.PCI0.P0P2.F114 */
                                V144 = F144 /* \_SB_.PCI0.P0P2.F144 */
                                V150 = F150 /* \_SB_.PCI0.P0P2.F150 */
                                V158 = F158 /* \_SB_.PCI0.P0P2.F158 */
                                V15C = F15C /* \_SB_.PCI0.P0P2.F15C */
                                V1CC = F1CC /* \_SB_.PCI0.P0P2.F1CC */
                                V1FC = F1FC /* \_SB_.PCI0.P0P2.F1FC */
                                V200 = F200 /* \_SB_.PCI0.P0P2.F200 */
                                V204 = F204 /* \_SB_.PCI0.P0P2.F204 */
                                V208 = F208 /* \_SB_.PCI0.P0P2.F208 */
                                V228 = F228 /* \_SB_.PCI0.P0P2.F228 */
                                V22C = F22C /* \_SB_.PCI0.P0P2.F22C */
                                V238 = F238 /* \_SB_.PCI0.P0P2.F238 */
                                V240 = F240 /* \_SB_.PCI0.P0P2.F240 */
                                V244 = F244 /* \_SB_.PCI0.P0P2.F244 */
                                V250 = F250 /* \_SB_.PCI0.P0P2.F250 */
                                V258 = F258 /* \_SB_.PCI0.P0P2.F258 */
                                V25C = F25C /* \_SB_.PCI0.P0P2.F25C */
                                VCD0 = FCD0 /* \_SB_.PCI0.P0P2.FCD0 */
                                VD34 = FD34 /* \_SB_.PCI0.P0P2.FD34 */
                                VD94 = FD94 /* \_SB_.PCI0.P0P2.FD94 */
                                VD98 = FD98 /* \_SB_.PCI0.P0P2.FD98 */
                                V0F4 = F0F4 /* \_SB_.PCI0.P0P2.F0F4 */
                                VDA0 = FDA0 /* \_SB_.PCI0.P0P2.FDA0 */
                                VDA4 = FDA4 /* \_SB_.PCI0.P0P2.FDA4 */
                                VDA8 = FDA8 /* \_SB_.PCI0.P0P2.FDA8 */
                                VDAC = FDAC /* \_SB_.PCI0.P0P2.FDAC */
                                VDB0 = FDB0 /* \_SB_.PCI0.P0P2.FDB0 */
                                VDB4 = FDB4 /* \_SB_.PCI0.P0P2.FDB4 */
                                VDB8 = FDB8 /* \_SB_.PCI0.P0P2.FDB8 */
                                VDBC = FDBC /* \_SB_.PCI0.P0P2.FDBC */
                            }
                            Else
                            {
                                F224 = V224 /* \_SB_.PCI0.P0P2.V224 */
                                F1F8 = V1F8 /* \_SB_.PCI0.P0P2.V1F8 */
                                F260 = V260 /* \_SB_.PCI0.P0P2.V260 */
                                FC28 = VC28 /* \_SB_.PCI0.P0P2.VC28 */
                                FC38 = VC38 /* \_SB_.PCI0.P0P2.VC38 */
                                FD14 = VD14 /* \_SB_.PCI0.P0P2.VD14 */
                                F004 = V004 /* \_SB_.PCI0.P0P2.V004 */
                                F00C = V00C /* \_SB_.PCI0.P0P2.V00C */
                                F019 = V019 /* \_SB_.PCI0.P0P2.V019 */
                                F01A = V01A /* \_SB_.PCI0.P0P2.V01A */
                                F01C = V01C /* \_SB_.PCI0.P0P2.V01C */
                                F01D = V01D /* \_SB_.PCI0.P0P2.V01D */
                                F020 = V020 /* \_SB_.PCI0.P0P2.V020 */
                                F022 = V022 /* \_SB_.PCI0.P0P2.V022 */
                                F024 = V024 /* \_SB_.PCI0.P0P2.V024 */
                                F026 = V026 /* \_SB_.PCI0.P0P2.V026 */
                                F028 = V028 /* \_SB_.PCI0.P0P2.V028 */
                                F02C = V02C /* \_SB_.PCI0.P0P2.V02C */
                                F03C = V03C /* \_SB_.PCI0.P0P2.V03C */
                                F03D = V03D /* \_SB_.PCI0.P0P2.V03D */
                                F03E = V03E /* \_SB_.PCI0.P0P2.V03E */
                                F084 = V084 /* \_SB_.PCI0.P0P2.V084 */
                                F08C = V08C /* \_SB_.PCI0.P0P2.V08C */
                                F092 = V092 /* \_SB_.PCI0.P0P2.V092 */
                                F094 = V094 /* \_SB_.PCI0.P0P2.V094 */
                                F098 = V098 /* \_SB_.PCI0.P0P2.V098 */
                                F0A2 = V0A2 /* \_SB_.PCI0.P0P2.V0A2 */
                                F0A8 = V0A8 /* \_SB_.PCI0.P0P2.V0A8 */
                                F0AC = V0AC /* \_SB_.PCI0.P0P2.V0AC */
                                F0B0 = V0B0 /* \_SB_.PCI0.P0P2.V0B0 */
                                F0B4 = V0B4 /* \_SB_.PCI0.P0P2.V0B4 */
                                F0BC = V0BC /* \_SB_.PCI0.P0P2.V0BC */
                                F0C8 = V0C8 /* \_SB_.PCI0.P0P2.V0C8 */
                                F0D0 = V0D0 /* \_SB_.PCI0.P0P2.V0D0 */
                                F0EC = V0EC /* \_SB_.PCI0.P0P2.V0EC */
                                F114 = V114 /* \_SB_.PCI0.P0P2.V114 */
                                F144 = V144 /* \_SB_.PCI0.P0P2.V144 */
                                F150 = V150 /* \_SB_.PCI0.P0P2.V150 */
                                F158 = V158 /* \_SB_.PCI0.P0P2.V158 */
                                F15C = V15C /* \_SB_.PCI0.P0P2.V15C */
                                F1CC = V1CC /* \_SB_.PCI0.P0P2.V1CC */
                                F1FC = V1FC /* \_SB_.PCI0.P0P2.V1FC */
                                F200 = V200 /* \_SB_.PCI0.P0P2.V200 */
                                F204 = V204 /* \_SB_.PCI0.P0P2.V204 */
                                F208 = V208 /* \_SB_.PCI0.P0P2.V208 */
                                F228 = V228 /* \_SB_.PCI0.P0P2.V228 */
                                F22C = V22C /* \_SB_.PCI0.P0P2.V22C */
                                F238 = V238 /* \_SB_.PCI0.P0P2.V238 */
                                F240 = V240 /* \_SB_.PCI0.P0P2.V240 */
                                F244 = V244 /* \_SB_.PCI0.P0P2.V244 */
                                F250 = V250 /* \_SB_.PCI0.P0P2.V250 */
                                F258 = V258 /* \_SB_.PCI0.P0P2.V258 */
                                F25C = V25C /* \_SB_.PCI0.P0P2.V25C */
                                FCD0 = VCD0 /* \_SB_.PCI0.P0P2.VCD0 */
                                FD34 = VD34 /* \_SB_.PCI0.P0P2.VD34 */
                                FD94 = VD94 /* \_SB_.PCI0.P0P2.VD94 */
                                FD98 = VD98 /* \_SB_.PCI0.P0P2.VD98 */
                                F0F4 = V0F4 /* \_SB_.PCI0.P0P2.V0F4 */
                                FDA0 = VDA0 /* \_SB_.PCI0.P0P2.VDA0 */
                                FDA4 = VDA4 /* \_SB_.PCI0.P0P2.VDA4 */
                                FDA8 = VDA8 /* \_SB_.PCI0.P0P2.VDA8 */
                                FDAC = VDAC /* \_SB_.PCI0.P0P2.VDAC */
                                FDB0 = VDB0 /* \_SB_.PCI0.P0P2.VDB0 */
                                FDB4 = VDB4 /* \_SB_.PCI0.P0P2.VDB4 */
                                FDB8 = VDB8 /* \_SB_.PCI0.P0P2.VDB8 */
                                FDBC = VDBC /* \_SB_.PCI0.P0P2.VDBC */
                            }
                        }

                        Method (PUPD, 2, Serialized)
                        {
                            If ((Arg0 == 0x00))
                            {
                                PSSR (0x01)
                                P0SR (0x01)
                                FLDS = 0x01
                                Local0 = (Timer + 0x00989680)
                                While ((Timer <= Local0))
                                {
                                    If ((F214 == 0x00))
                                    {
                                        Break
                                    }
                                }

                                FSQ1 = 0x00
                                FSQ2 = 0x01
                                If ((Arg1 == 0x04))
                                {
                                    B0PD = 0x01
                                    B1PD = 0x01
                                    B2PD = 0x01
                                    B3PD = 0x01
                                }

                                If ((Arg1 == 0x02))
                                {
                                    B0PD = 0x01
                                    B1PD = 0x01
                                }
                            }
                            Else
                            {
                                PSSR (0x00)
                                P0SR (0x00)
                                F006 = 0x00
                                F01E = 0x00
                                F0AA = 0x00
                                F0C0 = 0x00
                                F0D2 = 0x00
                                F1C4 = 0x00
                                F1D0 = 0x00
                                F1F0 = 0x00
                                FD9C = 0x00
                                F0B2 = 0x00
                                FSQ1 = 0x00
                                FSQ2 = 0x00
                                If ((Arg1 == 0x04))
                                {
                                    B0PD = 0x00
                                    B1PD = 0x00
                                    B2PD = 0x00
                                    B3PD = 0x00
                                }

                                If ((Arg1 == 0x02))
                                {
                                    B0PD = 0x00
                                    B1PD = 0x00
                                }

                                FLDS = 0x00
                                F508 = 0x01
                                Local1 = (Timer + 0x000F4240)
                                While ((Timer <= Local1))
                                {
                                    If ((F11A == 0x00))
                                    {
                                        Break
                                    }
                                }
                            }
                        }

                        Name (_ADR, 0x00)  // _ADR: Address
                        Name (_STR, Unicode ("Thunderbolt"))  // _STR: Description String
                        Method (_EJ0, 1, NotSerialized)  // _EJx: Eject Device, x=0-9
                        {
                            EJCD = 0x01
                            If (!OSDW)
                            {
                                P2TR = 0x05
                                Sleep (0xFA)
                                Local0 = T2PR /* \T2PR */
                                If (((Local0 & 0x7F) == 0x05)){}
                                \_SB.PCI0.P0P2.PSTA = 0x03
                                \_SB.PCI0.P0P2.LDIS = 0x01
                                Local0 = (Timer + 0x00989680)
                                While ((Timer <= Local0))
                                {
                                    If ((\_SB.PCI0.P0P2.LACR == 0x01))
                                    {
                                        If ((\_SB.PCI0.P0P2.LACT == 0x00))
                                        {
                                            Break
                                        }
                                    }
                                    ElseIf ((\_SB.PCI0.P0P2.UPSB.AVND == 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }

                                GP23 = 0x00
                                Sleep (0xFA)
                                Notify (\_SB.PCI0.P0P2, 0x00) // Bus Check
                            }
                        }

                        Name (_GPE, 0x14)  // _GPE: General Purpose Events
                        OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                        Field (A1E0, ByteAcc, NoLock, Preserve)
                        {
                            AVND,   32, 
                            BMIE,   3, 
                            Offset (0x18), 
                            PRIB,   8, 
                            SECB,   8, 
                            SUBB,   8, 
                            Offset (0x1E), 
                                ,   13, 
                            MABT,   1
                        }

                        Method (TRPE, 2, Serialized)
                        {
                            If (OSDW)
                            {
                                If ((Arg0 <= 0x01))
                                {
                                    If ((Arg0 == 0x00))
                                    {
                                        PUPD (0x00, 0x02)
                                        \_SB.PCI0.P0P2.PSTA = 0x03
                                        GP23 = 0x00
                                    }
                                    Else
                                    {
                                        Local0 = 0x00
                                        If ((GP23 == 0x00))
                                        {
                                            \_SB.PCI0.P0P2.PSTA = 0x00
                                            While (0x01)
                                            {
                                                GP23 = 0x01
                                                Local1 = 0x00
                                                Sleep (0x1E)
                                                PUPD (0x01, 0x02)
                                                Local2 = (Timer + 0x00989680)
                                                While ((Timer <= Local2))
                                                {
                                                    If ((\_SB.PCI0.P0P2.LACR == 0x00))
                                                    {
                                                        If ((\_SB.PCI0.P0P2.LTRN != 0x01))
                                                        {
                                                            Break
                                                        }
                                                    }
                                                    ElseIf (((\_SB.PCI0.P0P2.LTRN != 0x01) && (\_SB.PCI0.P0P2.LACT == 0x01)))
                                                    {
                                                        Break
                                                    }

                                                    Sleep (0x0A)
                                                }

                                                Sleep (Arg1)
                                                While ((Timer <= Local2))
                                                {
                                                    If ((\_SB.PCI0.P0P2.UPSB.AVND != 0xFFFFFFFF))
                                                    {
                                                        Local1 = 0x01
                                                        Break
                                                    }

                                                    Sleep (0x0A)
                                                }

                                                If ((Local1 == 0x01))
                                                {
                                                    MABT = 0x01
                                                    Break
                                                }

                                                If ((Local0 == 0x04))
                                                {
                                                    Return (Zero)
                                                }

                                                Local0++
                                                GP23 = 0x00
                                                Sleep (0x03E8)
                                            }

                                            If ((\_SB.PCI0.P0P2.CSPD == 0x01))
                                            {
                                                If ((\_SB.PCI0.P0P2.SSPD == 0x02))
                                                {
                                                    If ((\_SB.PCI0.P0P2.UPSB.SSPD == 0x02))
                                                    {
                                                        If ((\_SB.PCI0.P0P2.TSPD != 0x02))
                                                        {
                                                            \_SB.PCI0.P0P2.TSPD = 0x02
                                                        }

                                                        If ((\_SB.PCI0.P0P2.UPSB.TSPD != 0x02))
                                                        {
                                                            \_SB.PCI0.P0P2.UPSB.TSPD = 0x02
                                                        }

                                                        \_SB.PCI0.P0P2.LRTN = 0x01
                                                        Local2 = (Timer + 0x00989680)
                                                        While ((Timer <= Local2))
                                                        {
                                                            If ((\_SB.PCI0.P0P2.LACR == 0x00))
                                                            {
                                                                If (((\_SB.PCI0.P0P2.LTRN != 0x01) && (\_SB.PCI0.P0P2.UPSB.AVND != 0xFFFFFFFF)))
                                                                {
                                                                    Local1 = 0x01
                                                                    Break
                                                                }
                                                            }
                                                            ElseIf ((((\_SB.PCI0.P0P2.LTRN != 0x01) && (\_SB.PCI0.P0P2.LACT == 0x01)) && 
                                                                (\_SB.PCI0.P0P2.UPSB.AVND != 0xFFFFFFFF)))
                                                            {
                                                                Local1 = 0x01
                                                                Break
                                                            }

                                                            Sleep (0x0A)
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Return (Zero)
                        }

                        Method (XRIP, 1, Serialized)
                        {
                            If ((Arg0 <= 0x01))
                            {
                                GI04 = Arg0
                            }
                        }

                        Method (XRIO, 1, Serialized)
                        {
                            If ((Arg0 <= 0x01))
                            {
                                GD04 = Arg0
                            }
                        }

                        Method (XRIL, 0, Serialized)
                        {
                            Return (GP04) /* External reference */
                        }

                        Name (XRIN, 0x14)
                        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                        {
                            If (OSDW)
                            {
                                Local0 = Package (0x03)
                                    {
                                        "power-save", 
                                        0x01, 
                                        Buffer (0x01)
                                        {
                                             0x00                                             // .
                                        }
                                    }
                                DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))
                                Return (Local0)
                            }

                            Return (Zero)
                        }

                        Method (SXFP, 1, Serialized)
                        {
                            If ((Arg0 == 0x00))
                            {
                                GP23 = 0x00
                            }
                        }
                    }
                }

                Device (DSB1)
                {
                    Name (_ADR, 0x00030000)  // _ADR: Address
                    Name (_SUN, 0x02)  // _SUN: Slot User Number
                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                    Field (A1E0, ByteAcc, NoLock, Preserve)
                    {
                        AVND,   32, 
                        BMIE,   3, 
                        Offset (0x18), 
                        PRIB,   8, 
                        SECB,   8, 
                        SUBB,   8, 
                        Offset (0x1E), 
                            ,   13, 
                        MABT,   1
                    }

                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                    {
                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB1.SECB */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (0x00)
                    }

                    Device (UPS0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        OperationRegion (ARE0, PCI_Config, 0x00, 0x04)
                        Field (ARE0, ByteAcc, NoLock, Preserve)
                        {
                            AVND,   16
                        }

                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            If (OSDW)
                            {
                                Return (0x01)
                            }

                            Return (0x00)
                        }

                        Device (DSB0)
                        {
                            Name (_ADR, 0x00)  // _ADR: Address
                            OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                            Field (A1E0, ByteAcc, NoLock, Preserve)
                            {
                                AVND,   32, 
                                BMIE,   3, 
                                Offset (0x18), 
                                PRIB,   8, 
                                SECB,   8, 
                                SUBB,   8, 
                                Offset (0x1E), 
                                    ,   13, 
                                MABT,   1, 
                                Offset (0x3E), 
                                    ,   6, 
                                SBRS,   1
                            }

                            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                            {
                                Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB1.UPS0.DSB0.SECB */
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (0x0F)
                            }

                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                If (OSDW)
                                {
                                    Return (0x01)
                                }

                                Return (0x00)
                            }

                            Device (DEV0)
                            {
                                Name (_ADR, 0x00)  // _ADR: Address
                                Method (_STA, 0, NotSerialized)  // _STA: Status
                                {
                                    Return (0x0F)
                                }

                                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                {
                                    If (OSDW)
                                    {
                                        Return (0x01)
                                    }

                                    Return (0x00)
                                }
                            }
                        }

                        Device (DSB3)
                        {
                            Name (_ADR, 0x00030000)  // _ADR: Address
                            OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                            Field (A1E0, ByteAcc, NoLock, Preserve)
                            {
                                AVND,   32, 
                                BMIE,   3, 
                                Offset (0x18), 
                                PRIB,   8, 
                                SECB,   8, 
                                SUBB,   8, 
                                Offset (0x1E), 
                                    ,   13, 
                                MABT,   1
                            }

                            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                            {
                                Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB1.UPS0.DSB3.SECB */
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (0x0F)
                            }

                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                If (OSDW)
                                {
                                    Return (0x01)
                                }

                                Return (0x00)
                            }

                            Device (UPS0)
                            {
                                Name (_ADR, 0x00)  // _ADR: Address
                                OperationRegion (ARE0, PCI_Config, 0x00, 0x04)
                                Field (ARE0, ByteAcc, NoLock, Preserve)
                                {
                                    AVND,   16
                                }

                                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                {
                                    If (OSDW)
                                    {
                                        Return (0x01)
                                    }

                                    Return (0x00)
                                }

                                Device (DSB0)
                                {
                                    Name (_ADR, 0x00)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1, 
                                        Offset (0x3E), 
                                            ,   6, 
                                        SBRS,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB1.UPS0.DSB3.UPS0.DSB0.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        Return (0x0F)
                                    }

                                    Device (DEV0)
                                    {
                                        Name (_ADR, 0x00)  // _ADR: Address
                                        Method (_STA, 0, NotSerialized)  // _STA: Status
                                        {
                                            Return (0x0F)
                                        }
                                    }
                                }

                                Device (DSB3)
                                {
                                    Name (_ADR, 0x00030000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB1.UPS0.DSB3.UPS0.DSB3.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        Return (0x0F)
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }

                                    Device (DEV0)
                                    {
                                        Name (_ADR, 0x00)  // _ADR: Address
                                        Method (_STA, 0, NotSerialized)  // _STA: Status
                                        {
                                            Return (0x0F)
                                        }

                                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                        {
                                            If (OSDW)
                                            {
                                                Return (0x01)
                                            }

                                            Return (0x00)
                                        }
                                    }
                                }

                                Device (DSB4)
                                {
                                    Name (_ADR, 0x00040000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB1.UPS0.DSB3.UPS0.DSB4.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        Return (0x0F)
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }

                                    Device (DEV0)
                                    {
                                        Name (_ADR, 0x00)  // _ADR: Address
                                        Method (_STA, 0, NotSerialized)  // _STA: Status
                                        {
                                            Return (0x0F)
                                        }

                                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                        {
                                            If (OSDW)
                                            {
                                                Return (0x01)
                                            }

                                            Return (0x00)
                                        }
                                    }
                                }

                                Device (DSB5)
                                {
                                    Name (_ADR, 0x00050000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB1.UPS0.DSB3.UPS0.DSB5.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x0F)
                                        }
                                        Else
                                        {
                                            Return (0x09)
                                        }
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }
                                }

                                Device (DSB6)
                                {
                                    Name (_ADR, 0x00060000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB1.UPS0.DSB3.UPS0.DSB6.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x0F)
                                        }
                                        Else
                                        {
                                            Return (0x09)
                                        }
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }
                                }
                            }
                        }

                        Device (DSB4)
                        {
                            Name (_ADR, 0x00040000)  // _ADR: Address
                            OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                            Field (A1E0, ByteAcc, NoLock, Preserve)
                            {
                                AVND,   32, 
                                BMIE,   3, 
                                Offset (0x18), 
                                PRIB,   8, 
                                SECB,   8, 
                                SUBB,   8, 
                                Offset (0x1E), 
                                    ,   13, 
                                MABT,   1
                            }

                            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                            {
                                Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB1.UPS0.DSB4.SECB */
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (0x0F)
                            }

                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                If (OSDW)
                                {
                                    Return (0x01)
                                }

                                Return (0x00)
                            }

                            Device (UPS0)
                            {
                                Name (_ADR, 0x00)  // _ADR: Address
                                OperationRegion (ARE0, PCI_Config, 0x00, 0x04)
                                Field (ARE0, ByteAcc, NoLock, Preserve)
                                {
                                    AVND,   16
                                }

                                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                {
                                    If (OSDW)
                                    {
                                        Return (0x01)
                                    }

                                    Return (0x00)
                                }

                                Device (DSB0)
                                {
                                    Name (_ADR, 0x00)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1, 
                                        Offset (0x3E), 
                                            ,   6, 
                                        SBRS,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB1.UPS0.DSB4.UPS0.DSB0.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        Return (0x0F)
                                    }

                                    Device (DEV0)
                                    {
                                        Name (_ADR, 0x00)  // _ADR: Address
                                        Method (_STA, 0, NotSerialized)  // _STA: Status
                                        {
                                            Return (0x0F)
                                        }

                                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                        {
                                            If (OSDW)
                                            {
                                                Return (0x01)
                                            }

                                            Return (0x00)
                                        }
                                    }
                                }

                                Device (DSB3)
                                {
                                    Name (_ADR, 0x00030000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB1.UPS0.DSB4.UPS0.DSB3.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        Return (0x0F)
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }

                                    Device (DEV0)
                                    {
                                        Name (_ADR, 0x00)  // _ADR: Address
                                        Method (_STA, 0, NotSerialized)  // _STA: Status
                                        {
                                            Return (0x0F)
                                        }

                                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                        {
                                            If (OSDW)
                                            {
                                                Return (0x01)
                                            }

                                            Return (0x00)
                                        }
                                    }
                                }

                                Device (DSB4)
                                {
                                    Name (_ADR, 0x00040000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB1.UPS0.DSB4.UPS0.DSB4.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        Return (0x0F)
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }

                                    Device (DEV0)
                                    {
                                        Name (_ADR, 0x00)  // _ADR: Address
                                        Method (_STA, 0, NotSerialized)  // _STA: Status
                                        {
                                            Return (0x0F)
                                        }

                                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                        {
                                            If (OSDW)
                                            {
                                                Return (0x01)
                                            }

                                            Return (0x00)
                                        }
                                    }
                                }

                                Device (DSB5)
                                {
                                    Name (_ADR, 0x00050000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB1.UPS0.DSB4.UPS0.DSB5.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x0F)
                                        }
                                        Else
                                        {
                                            Return (0x09)
                                        }
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }
                                }

                                Device (DSB6)
                                {
                                    Name (_ADR, 0x00060000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB1.UPS0.DSB4.UPS0.DSB6.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x0F)
                                        }
                                        Else
                                        {
                                            Return (0x09)
                                        }
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }
                                }
                            }
                        }

                        Device (DSB5)
                        {
                            Name (_ADR, 0x00050000)  // _ADR: Address
                            OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                            Field (A1E0, ByteAcc, NoLock, Preserve)
                            {
                                AVND,   32, 
                                BMIE,   3, 
                                Offset (0x18), 
                                PRIB,   8, 
                                SECB,   8, 
                                SUBB,   8, 
                                Offset (0x1E), 
                                    ,   13, 
                                MABT,   1
                            }

                            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                            {
                                Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB1.UPS0.DSB5.SECB */
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                If (OSDW)
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (0x09)
                                }
                            }

                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                If (OSDW)
                                {
                                    Return (0x01)
                                }

                                Return (0x00)
                            }
                        }

                        Device (DSB6)
                        {
                            Name (_ADR, 0x00060000)  // _ADR: Address
                            OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                            Field (A1E0, ByteAcc, NoLock, Preserve)
                            {
                                AVND,   32, 
                                BMIE,   3, 
                                Offset (0x18), 
                                PRIB,   8, 
                                SECB,   8, 
                                SUBB,   8, 
                                Offset (0x1E), 
                                    ,   13, 
                                MABT,   1
                            }

                            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                            {
                                Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB1.UPS0.DSB6.SECB */
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                If (OSDW)
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (0x09)
                                }
                            }

                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                If (OSDW)
                                {
                                    Return (0x01)
                                }

                                Return (0x00)
                            }
                        }
                    }
                }

                Device (DSB2)
                {
                    Name (_ADR, 0x00040000)  // _ADR: Address
                    Name (_SUN, 0x03)  // _SUN: Slot User Number
                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                    Field (A1E0, ByteAcc, NoLock, Preserve)
                    {
                        AVND,   32, 
                        BMIE,   3, 
                        Offset (0x18), 
                        PRIB,   8, 
                        SECB,   8, 
                        SUBB,   8, 
                        Offset (0x1E), 
                            ,   13, 
                        MABT,   1
                    }

                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                    {
                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB2.SECB */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (0x00)
                    }

                    Device (UPS0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        OperationRegion (ARE0, PCI_Config, 0x00, 0x04)
                        Field (ARE0, ByteAcc, NoLock, Preserve)
                        {
                            AVND,   16
                        }

                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            If (OSDW)
                            {
                                Return (0x01)
                            }

                            Return (0x00)
                        }

                        Device (DSB0)
                        {
                            Name (_ADR, 0x00)  // _ADR: Address
                            OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                            Field (A1E0, ByteAcc, NoLock, Preserve)
                            {
                                AVND,   32, 
                                BMIE,   3, 
                                Offset (0x18), 
                                PRIB,   8, 
                                SECB,   8, 
                                SUBB,   8, 
                                Offset (0x1E), 
                                    ,   13, 
                                MABT,   1, 
                                Offset (0x3E), 
                                    ,   6, 
                                SBRS,   1
                            }

                            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                            {
                                Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB2.UPS0.DSB0.SECB */
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (0x0F)
                            }

                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                If (OSDW)
                                {
                                    Return (0x01)
                                }

                                Return (0x00)
                            }

                            Device (DEV0)
                            {
                                Name (_ADR, 0x00)  // _ADR: Address
                                Method (_STA, 0, NotSerialized)  // _STA: Status
                                {
                                    Return (0x0F)
                                }

                                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                {
                                    If (OSDW)
                                    {
                                        Return (0x01)
                                    }

                                    Return (0x00)
                                }
                            }
                        }

                        Device (DSB3)
                        {
                            Name (_ADR, 0x00030000)  // _ADR: Address
                            OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                            Field (A1E0, ByteAcc, NoLock, Preserve)
                            {
                                AVND,   32, 
                                BMIE,   3, 
                                Offset (0x18), 
                                PRIB,   8, 
                                SECB,   8, 
                                SUBB,   8, 
                                Offset (0x1E), 
                                    ,   13, 
                                MABT,   1
                            }

                            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                            {
                                Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB2.UPS0.DSB3.SECB */
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (0x0F)
                            }

                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                If (OSDW)
                                {
                                    Return (0x01)
                                }

                                Return (0x00)
                            }

                            Device (UPS0)
                            {
                                Name (_ADR, 0x00)  // _ADR: Address
                                OperationRegion (ARE0, PCI_Config, 0x00, 0x04)
                                Field (ARE0, ByteAcc, NoLock, Preserve)
                                {
                                    AVND,   16
                                }

                                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                {
                                    If (OSDW)
                                    {
                                        Return (0x01)
                                    }

                                    Return (0x00)
                                }

                                Device (DSB0)
                                {
                                    Name (_ADR, 0x00)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1, 
                                        Offset (0x3E), 
                                            ,   6, 
                                        SBRS,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB2.UPS0.DSB3.UPS0.DSB0.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        Return (0x0F)
                                    }

                                    Device (DEV0)
                                    {
                                        Name (_ADR, 0x00)  // _ADR: Address
                                        Method (_STA, 0, NotSerialized)  // _STA: Status
                                        {
                                            Return (0x0F)
                                        }
                                    }
                                }

                                Device (DSB3)
                                {
                                    Name (_ADR, 0x00030000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB2.UPS0.DSB3.UPS0.DSB3.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        Return (0x0F)
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }

                                    Device (DEV0)
                                    {
                                        Name (_ADR, 0x00)  // _ADR: Address
                                        Method (_STA, 0, NotSerialized)  // _STA: Status
                                        {
                                            Return (0x0F)
                                        }

                                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                        {
                                            If (OSDW)
                                            {
                                                Return (0x01)
                                            }

                                            Return (0x00)
                                        }
                                    }
                                }

                                Device (DSB4)
                                {
                                    Name (_ADR, 0x00040000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB2.UPS0.DSB3.UPS0.DSB4.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        Return (0x0F)
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }

                                    Device (DEV0)
                                    {
                                        Name (_ADR, 0x00)  // _ADR: Address
                                        Method (_STA, 0, NotSerialized)  // _STA: Status
                                        {
                                            Return (0x0F)
                                        }

                                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                        {
                                            If (OSDW)
                                            {
                                                Return (0x01)
                                            }

                                            Return (0x00)
                                        }
                                    }
                                }

                                Device (DSB5)
                                {
                                    Name (_ADR, 0x00050000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB2.UPS0.DSB3.UPS0.DSB5.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x0F)
                                        }
                                        Else
                                        {
                                            Return (0x09)
                                        }
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }
                                }

                                Device (DSB6)
                                {
                                    Name (_ADR, 0x00060000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB2.UPS0.DSB3.UPS0.DSB6.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x0F)
                                        }
                                        Else
                                        {
                                            Return (0x09)
                                        }
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }
                                }
                            }
                        }

                        Device (DSB4)
                        {
                            Name (_ADR, 0x00040000)  // _ADR: Address
                            OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                            Field (A1E0, ByteAcc, NoLock, Preserve)
                            {
                                AVND,   32, 
                                BMIE,   3, 
                                Offset (0x18), 
                                PRIB,   8, 
                                SECB,   8, 
                                SUBB,   8, 
                                Offset (0x1E), 
                                    ,   13, 
                                MABT,   1
                            }

                            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                            {
                                Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB2.UPS0.DSB4.SECB */
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (0x0F)
                            }

                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                If (OSDW)
                                {
                                    Return (0x01)
                                }

                                Return (0x00)
                            }

                            Device (UPS0)
                            {
                                Name (_ADR, 0x00)  // _ADR: Address
                                OperationRegion (ARE0, PCI_Config, 0x00, 0x04)
                                Field (ARE0, ByteAcc, NoLock, Preserve)
                                {
                                    AVND,   16
                                }

                                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                {
                                    If (OSDW)
                                    {
                                        Return (0x01)
                                    }

                                    Return (0x00)
                                }

                                Device (DSB0)
                                {
                                    Name (_ADR, 0x00)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1, 
                                        Offset (0x3E), 
                                            ,   6, 
                                        SBRS,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB2.UPS0.DSB4.UPS0.DSB0.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        Return (0x0F)
                                    }

                                    Device (DEV0)
                                    {
                                        Name (_ADR, 0x00)  // _ADR: Address
                                        Method (_STA, 0, NotSerialized)  // _STA: Status
                                        {
                                            Return (0x0F)
                                        }

                                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                        {
                                            If (OSDW)
                                            {
                                                Return (0x01)
                                            }

                                            Return (0x00)
                                        }
                                    }
                                }

                                Device (DSB3)
                                {
                                    Name (_ADR, 0x00030000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB2.UPS0.DSB4.UPS0.DSB3.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        Return (0x0F)
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }

                                    Device (DEV0)
                                    {
                                        Name (_ADR, 0x00)  // _ADR: Address
                                        Method (_STA, 0, NotSerialized)  // _STA: Status
                                        {
                                            Return (0x0F)
                                        }

                                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                        {
                                            If (OSDW)
                                            {
                                                Return (0x01)
                                            }

                                            Return (0x00)
                                        }
                                    }
                                }

                                Device (DSB4)
                                {
                                    Name (_ADR, 0x00040000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB2.UPS0.DSB4.UPS0.DSB4.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        Return (0x0F)
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }

                                    Device (DEV0)
                                    {
                                        Name (_ADR, 0x00)  // _ADR: Address
                                        Method (_STA, 0, NotSerialized)  // _STA: Status
                                        {
                                            Return (0x0F)
                                        }

                                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                        {
                                            If (OSDW)
                                            {
                                                Return (0x01)
                                            }

                                            Return (0x00)
                                        }
                                    }
                                }

                                Device (DSB5)
                                {
                                    Name (_ADR, 0x00050000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB2.UPS0.DSB4.UPS0.DSB5.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x0F)
                                        }
                                        Else
                                        {
                                            Return (0x09)
                                        }
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }
                                }

                                Device (DSB6)
                                {
                                    Name (_ADR, 0x00060000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB2.UPS0.DSB4.UPS0.DSB6.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x0F)
                                        }
                                        Else
                                        {
                                            Return (0x09)
                                        }
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }
                                }
                            }
                        }

                        Device (DSB5)
                        {
                            Name (_ADR, 0x00050000)  // _ADR: Address
                            OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                            Field (A1E0, ByteAcc, NoLock, Preserve)
                            {
                                AVND,   32, 
                                BMIE,   3, 
                                Offset (0x18), 
                                PRIB,   8, 
                                SECB,   8, 
                                SUBB,   8, 
                                Offset (0x1E), 
                                    ,   13, 
                                MABT,   1
                            }

                            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                            {
                                Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB2.UPS0.DSB5.SECB */
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                If (OSDW)
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (0x09)
                                }
                            }

                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                If (OSDW)
                                {
                                    Return (0x01)
                                }

                                Return (0x00)
                            }
                        }

                        Device (DSB6)
                        {
                            Name (_ADR, 0x00060000)  // _ADR: Address
                            OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                            Field (A1E0, ByteAcc, NoLock, Preserve)
                            {
                                AVND,   32, 
                                BMIE,   3, 
                                Offset (0x18), 
                                PRIB,   8, 
                                SECB,   8, 
                                SUBB,   8, 
                                Offset (0x1E), 
                                    ,   13, 
                                MABT,   1
                            }

                            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                            {
                                Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB2.UPS0.DSB6.SECB */
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                If (OSDW)
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (0x09)
                                }
                            }

                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                If (OSDW)
                                {
                                    Return (0x01)
                                }

                                Return (0x00)
                            }
                        }
                    }
                }

                Device (DSB3)
                {
                    Name (_ADR, 0x00050000)  // _ADR: Address
                    Name (_SUN, 0x04)  // _SUN: Slot User Number
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (0x00)
                    }

                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                    Field (A1E0, ByteAcc, NoLock, Preserve)
                    {
                        AVND,   32, 
                        BMIE,   3, 
                        Offset (0x18), 
                        PRIB,   8, 
                        SECB,   8, 
                        SUBB,   8, 
                        Offset (0x1E), 
                            ,   13, 
                        MABT,   1
                    }

                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                    {
                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB3.SECB */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Device (UPS0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        OperationRegion (ARE0, PCI_Config, 0x00, 0x04)
                        Field (ARE0, ByteAcc, NoLock, Preserve)
                        {
                            AVND,   16
                        }

                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            If (OSDW)
                            {
                                Return (0x01)
                            }

                            Return (0x00)
                        }

                        Device (DSB0)
                        {
                            Name (_ADR, 0x00)  // _ADR: Address
                            OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                            Field (A1E0, ByteAcc, NoLock, Preserve)
                            {
                                AVND,   32, 
                                BMIE,   3, 
                                Offset (0x18), 
                                PRIB,   8, 
                                SECB,   8, 
                                SUBB,   8, 
                                Offset (0x1E), 
                                    ,   13, 
                                MABT,   1, 
                                Offset (0x3E), 
                                    ,   6, 
                                SBRS,   1
                            }

                            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                            {
                                Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB3.UPS0.DSB0.SECB */
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (0x0F)
                            }

                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                If (OSDW)
                                {
                                    Return (0x01)
                                }

                                Return (0x00)
                            }

                            Device (DEV0)
                            {
                                Name (_ADR, 0x00)  // _ADR: Address
                                Method (_STA, 0, NotSerialized)  // _STA: Status
                                {
                                    Return (0x0F)
                                }

                                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                {
                                    If (OSDW)
                                    {
                                        Return (0x01)
                                    }

                                    Return (0x00)
                                }
                            }
                        }

                        Device (DSB3)
                        {
                            Name (_ADR, 0x00030000)  // _ADR: Address
                            OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                            Field (A1E0, ByteAcc, NoLock, Preserve)
                            {
                                AVND,   32, 
                                BMIE,   3, 
                                Offset (0x18), 
                                PRIB,   8, 
                                SECB,   8, 
                                SUBB,   8, 
                                Offset (0x1E), 
                                    ,   13, 
                                MABT,   1
                            }

                            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                            {
                                Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB3.UPS0.DSB3.SECB */
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (0x0F)
                            }

                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                If (OSDW)
                                {
                                    Return (0x01)
                                }

                                Return (0x00)
                            }

                            Device (UPS0)
                            {
                                Name (_ADR, 0x00)  // _ADR: Address
                                OperationRegion (ARE0, PCI_Config, 0x00, 0x04)
                                Field (ARE0, ByteAcc, NoLock, Preserve)
                                {
                                    AVND,   16
                                }

                                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                {
                                    If (OSDW)
                                    {
                                        Return (0x01)
                                    }

                                    Return (0x00)
                                }

                                Device (DSB0)
                                {
                                    Name (_ADR, 0x00)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1, 
                                        Offset (0x3E), 
                                            ,   6, 
                                        SBRS,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB3.UPS0.DSB3.UPS0.DSB0.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        Return (0x0F)
                                    }

                                    Device (DEV0)
                                    {
                                        Name (_ADR, 0x00)  // _ADR: Address
                                        Method (_STA, 0, NotSerialized)  // _STA: Status
                                        {
                                            Return (0x0F)
                                        }
                                    }
                                }

                                Device (DSB3)
                                {
                                    Name (_ADR, 0x00030000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB3.UPS0.DSB3.UPS0.DSB3.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        Return (0x0F)
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }

                                    Device (DEV0)
                                    {
                                        Name (_ADR, 0x00)  // _ADR: Address
                                        Method (_STA, 0, NotSerialized)  // _STA: Status
                                        {
                                            Return (0x0F)
                                        }

                                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                        {
                                            If (OSDW)
                                            {
                                                Return (0x01)
                                            }

                                            Return (0x00)
                                        }
                                    }
                                }

                                Device (DSB4)
                                {
                                    Name (_ADR, 0x00040000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB3.UPS0.DSB3.UPS0.DSB4.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        Return (0x0F)
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }

                                    Device (DEV0)
                                    {
                                        Name (_ADR, 0x00)  // _ADR: Address
                                        Method (_STA, 0, NotSerialized)  // _STA: Status
                                        {
                                            Return (0x0F)
                                        }

                                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                        {
                                            If (OSDW)
                                            {
                                                Return (0x01)
                                            }

                                            Return (0x00)
                                        }
                                    }
                                }

                                Device (DSB5)
                                {
                                    Name (_ADR, 0x00050000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB3.UPS0.DSB3.UPS0.DSB5.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x0F)
                                        }
                                        Else
                                        {
                                            Return (0x09)
                                        }
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }
                                }

                                Device (DSB6)
                                {
                                    Name (_ADR, 0x00060000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB3.UPS0.DSB3.UPS0.DSB6.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x0F)
                                        }
                                        Else
                                        {
                                            Return (0x09)
                                        }
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }
                                }
                            }
                        }

                        Device (DSB4)
                        {
                            Name (_ADR, 0x00040000)  // _ADR: Address
                            OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                            Field (A1E0, ByteAcc, NoLock, Preserve)
                            {
                                AVND,   32, 
                                BMIE,   3, 
                                Offset (0x18), 
                                PRIB,   8, 
                                SECB,   8, 
                                SUBB,   8, 
                                Offset (0x1E), 
                                    ,   13, 
                                MABT,   1
                            }

                            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                            {
                                Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB3.UPS0.DSB4.SECB */
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (0x0F)
                            }

                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                If (OSDW)
                                {
                                    Return (0x01)
                                }

                                Return (0x00)
                            }

                            Device (UPS0)
                            {
                                Name (_ADR, 0x00)  // _ADR: Address
                                OperationRegion (ARE0, PCI_Config, 0x00, 0x04)
                                Field (ARE0, ByteAcc, NoLock, Preserve)
                                {
                                    AVND,   16
                                }

                                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                {
                                    If (OSDW)
                                    {
                                        Return (0x01)
                                    }

                                    Return (0x00)
                                }

                                Device (DSB0)
                                {
                                    Name (_ADR, 0x00)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1, 
                                        Offset (0x3E), 
                                            ,   6, 
                                        SBRS,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB3.UPS0.DSB4.UPS0.DSB0.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        Return (0x0F)
                                    }

                                    Device (DEV0)
                                    {
                                        Name (_ADR, 0x00)  // _ADR: Address
                                        Method (_STA, 0, NotSerialized)  // _STA: Status
                                        {
                                            Return (0x0F)
                                        }

                                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                        {
                                            If (OSDW)
                                            {
                                                Return (0x01)
                                            }

                                            Return (0x00)
                                        }
                                    }
                                }

                                Device (DSB3)
                                {
                                    Name (_ADR, 0x00030000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB3.UPS0.DSB4.UPS0.DSB3.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        Return (0x0F)
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }

                                    Device (DEV0)
                                    {
                                        Name (_ADR, 0x00)  // _ADR: Address
                                        Method (_STA, 0, NotSerialized)  // _STA: Status
                                        {
                                            Return (0x0F)
                                        }

                                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                        {
                                            If (OSDW)
                                            {
                                                Return (0x01)
                                            }

                                            Return (0x00)
                                        }
                                    }
                                }

                                Device (DSB4)
                                {
                                    Name (_ADR, 0x00040000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB3.UPS0.DSB4.UPS0.DSB4.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        Return (0x0F)
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }

                                    Device (DEV0)
                                    {
                                        Name (_ADR, 0x00)  // _ADR: Address
                                        Method (_STA, 0, NotSerialized)  // _STA: Status
                                        {
                                            Return (0x0F)
                                        }

                                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                        {
                                            If (OSDW)
                                            {
                                                Return (0x01)
                                            }

                                            Return (0x00)
                                        }
                                    }
                                }

                                Device (DSB5)
                                {
                                    Name (_ADR, 0x00050000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB3.UPS0.DSB4.UPS0.DSB5.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x0F)
                                        }
                                        Else
                                        {
                                            Return (0x09)
                                        }
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }
                                }

                                Device (DSB6)
                                {
                                    Name (_ADR, 0x00060000)  // _ADR: Address
                                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                                    Field (A1E0, ByteAcc, NoLock, Preserve)
                                    {
                                        AVND,   32, 
                                        BMIE,   3, 
                                        Offset (0x18), 
                                        PRIB,   8, 
                                        SECB,   8, 
                                        SUBB,   8, 
                                        Offset (0x1E), 
                                            ,   13, 
                                        MABT,   1
                                    }

                                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                                    {
                                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB3.UPS0.DSB4.UPS0.DSB6.SECB */
                                    }

                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x0F)
                                        }
                                        Else
                                        {
                                            Return (0x09)
                                        }
                                    }

                                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                    {
                                        If (OSDW)
                                        {
                                            Return (0x01)
                                        }

                                        Return (0x00)
                                    }
                                }
                            }
                        }

                        Device (DSB5)
                        {
                            Name (_ADR, 0x00050000)  // _ADR: Address
                            OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                            Field (A1E0, ByteAcc, NoLock, Preserve)
                            {
                                AVND,   32, 
                                BMIE,   3, 
                                Offset (0x18), 
                                PRIB,   8, 
                                SECB,   8, 
                                SUBB,   8, 
                                Offset (0x1E), 
                                    ,   13, 
                                MABT,   1
                            }

                            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                            {
                                Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB3.UPS0.DSB5.SECB */
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                If (OSDW)
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (0x09)
                                }
                            }

                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                If (OSDW)
                                {
                                    Return (0x01)
                                }

                                Return (0x00)
                            }
                        }

                        Device (DSB6)
                        {
                            Name (_ADR, 0x00060000)  // _ADR: Address
                            OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                            Field (A1E0, ByteAcc, NoLock, Preserve)
                            {
                                AVND,   32, 
                                BMIE,   3, 
                                Offset (0x18), 
                                PRIB,   8, 
                                SECB,   8, 
                                SUBB,   8, 
                                Offset (0x1E), 
                                    ,   13, 
                                MABT,   1
                            }

                            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                            {
                                Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB3.UPS0.DSB6.SECB */
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                If (OSDW)
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (0x09)
                                }
                            }

                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                If (OSDW)
                                {
                                    Return (0x01)
                                }

                                Return (0x00)
                            }
                        }
                    }
                }

                Device (DSB4)
                {
                    Name (_ADR, 0x00060000)  // _ADR: Address
                    Name (_SUN, 0x05)  // _SUN: Slot User Number
                    OperationRegion (A1E0, PCI_Config, 0x00, 0x40)
                    Field (A1E0, ByteAcc, NoLock, Preserve)
                    {
                        AVND,   32, 
                        BMIE,   3, 
                        Offset (0x18), 
                        PRIB,   8, 
                        SECB,   8, 
                        SUBB,   8, 
                        Offset (0x1E), 
                            ,   13, 
                        MABT,   1
                    }

                    Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                    {
                        Return (SECB) /* \_SB_.PCI0.P0P2.UPSB.DSB4.SECB */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (OSDW)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (0x00)
                    }
                }

                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If (OSDW)
                    {
                        If ((Arg0 == ToUUID ("a0b5b7c6-1318-441c-b0c9-fe695eaf949b") /* Unknown UUID */))
                        {
                            Local0 = Package (0x02)
                                {
                                    "PCI-Thunderbolt", 
                                    0x01
                                }
                            DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))
                            Return (Local0)
                        }
                    }

                    Return (Zero)
                }
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "APPLE ", "SDUsbLpt", 0x00001000)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0, DeviceObj)
    External (DTGP, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (GD10, UnknownObj)
    External (GP10, UnknownObj)
    External (OSDW, IntObj)

    Scope (\_SB.PCI0)
    {
        Device (XHC1)
        {
            Name (_ADR, 0x00140000)  // _ADR: Address
            Name (SDPC, 0x00)
            OperationRegion (XH1C, PCI_Config, 0xD0, 0x10)
            Field (XH1C, ByteAcc, NoLock, Preserve)
            {
                PAHC,   1, 
                PCHC,   1, 
                Offset (0x01), 
                PBHC,   1, 
                PDHC,   1, 
                    ,   3, 
                PKHC,   1, 
                Offset (0x08), 
                PASS,   1, 
                PBSS,   1, 
                PCSS,   1, 
                PDSS,   1
            }

            OperationRegion (XH2C, PCI_Config, 0xD0, 0x10)
            Field (XH2C, ByteAcc, NoLock, Preserve)
            {
                PHCA,   14, 
                Offset (0x08), 
                PSSA,   6
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (OSDW)
                {
                    Return (Package (0x02)
                    {
                        0x0D, 
                        0x03
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        0x0D, 
                        0x03
                    })
                }
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                Local0 = Package (0x09)
                    {
                        "AAPL,current-available", 
                        0x0834, 
                        "AAPL,current-extra", 
                        0x0898, 
                        "AAPL,current-extra-in-sleep", 
                        0x0640, 
                        "AAPL,max-port-current-in-sleep", 
                        0x0834, 
                        Buffer (0x01)
                        {
                             0x00                                             // .
                        }
                    }
                DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))
                Return (Local0)
            }

            Method (XHCA, 0, NotSerialized)
            {
                If (!OSDW)
                {
                    \_SB.PCI0.XHC1.PASS = 0x01
                }

                \_SB.PCI0.XHC1.PAHC = 0x01
            }

            Method (XHCB, 0, NotSerialized)
            {
                If (!OSDW)
                {
                    \_SB.PCI0.XHC1.PBSS = 0x01
                }

                \_SB.PCI0.XHC1.PBHC = 0x01
            }

            Method (XHCC, 0, NotSerialized)
            {
                If (!OSDW)
                {
                    \_SB.PCI0.XHC1.PCSS = 0x01
                }

                \_SB.PCI0.XHC1.PCHC = 0x01
            }

            Method (XHCD, 0, NotSerialized)
            {
                If (!OSDW)
                {
                    \_SB.PCI0.XHC1.PDSS = 0x01
                }

                \_SB.PCI0.XHC1.PDHC = 0x01
            }

            Method (EHCA, 0, NotSerialized)
            {
                If (!OSDW)
                {
                    \_SB.PCI0.XHC1.PASS = 0x00
                }

                \_SB.PCI0.XHC1.PAHC = 0x00
            }

            Method (EHCB, 0, NotSerialized)
            {
                If (!OSDW)
                {
                    \_SB.PCI0.XHC1.PBSS = 0x00
                }

                \_SB.PCI0.XHC1.PBHC = 0x00
            }

            Method (EHCC, 0, NotSerialized)
            {
                If (!OSDW)
                {
                    \_SB.PCI0.XHC1.PCSS = 0x00
                }

                \_SB.PCI0.XHC1.PCHC = 0x00
            }

            Method (EHCD, 0, NotSerialized)
            {
                If (!OSDW)
                {
                    \_SB.PCI0.XHC1.PDSS = 0x00
                }

                \_SB.PCI0.XHC1.PDHC = 0x00
            }

            Method (LEGM, 0, NotSerialized)
            {
                If (!OSDW)
                {
                    \_SB.PCI0.XHC1.PHCA = 0x3FFF
                    \_SB.PCI0.XHC1.PSSA = 0x3F
                    \_SB.PCI0.XHC1.PKHC = 0x00
                }
            }

            Device (RHUB)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Device (HS01)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0x03, 
                        0x00, 
                        0x00
                    })
                    Name (_PLD, Package (0x10)  // _PLD: Physical Location of Device
                    {
                        0x81, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x31, 
                        0x1C, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00
                    })
                    Name (MUXS, "EHCA")
                }

                Device (HS05)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0x03, 
                        0x00, 
                        0x00
                    })
                    Name (_PLD, Package (0x10)  // _PLD: Physical Location of Device
                    {
                        0x81, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x31, 
                        0x1C, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00
                    })
                    Name (MUXS, "EHCB")
                }

                Device (HS08)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0xFF, 
                        0x00, 
                        0x00
                    })
                    Name (_PLD, Package (0x10)  // _PLD: Physical Location of Device
                    {
                        0x81, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x30, 
                        0x1C, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00
                    })
                }

                Device (HS12)
                {
                    Name (_ADR, 0x0C)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0xFF, 
                        0x00, 
                        0x00
                    })
                    Name (_PLD, Package (0x10)  // _PLD: Physical Location of Device
                    {
                        0x81, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x30, 
                        0x1C, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00
                    })
                }

                Device (SSP1)
                {
                    Name (_ADR, 0x10)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0x03, 
                        0x00, 
                        0x00
                    })
                    Name (_PLD, Package (0x10)  // _PLD: Physical Location of Device
                    {
                        0x81, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x31, 
                        0x1C, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00
                    })
                    Name (XHCP, 0x01)
                }

                Device (SSP2)
                {
                    Name (_ADR, 0x11)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0x03, 
                        0x00, 
                        0x00
                    })
                    Name (_PLD, Package (0x10)  // _PLD: Physical Location of Device
                    {
                        0x81, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x31, 
                        0x1C, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00
                    })
                    Name (XHCP, 0x05)
                }

                Device (SSP4)
                {
                    Name (_ADR, 0x13)  // _ADR: Address
                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                    {
                        0xFF, 
                        0xFF, 
                        0x00, 
                        0x00
                    })
                    Name (_PLD, Package (0x10)  // _PLD: Physical Location of Device
                    {
                        0x81, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x31, 
                        0x1C, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00, 
                        0x00
                    })
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (0x00)
                    }

                    Name (BERT, 0x0C)
                    Name (IGNR, 0x00)
                    Method (SBHV, 1, Serialized)
                    {
                        If (Arg0)
                        {
                            IGNR = 0x01
                        }
                        Else
                        {
                            IGNR = 0x00
                        }
                    }

                    Method (GBHV, 0, Serialized)
                    {
                        Return (IGNR) /* \_SB_.PCI0.XHC1.RHUB.SSP4.IGNR */
                    }

                    Name (U3SD, 0x7C)
                    Name (S104, 0x0551)
                    Name (S050, 0x0551)
                    Name (S025, 0x0551)
                    Name (_GPE, 0x1E)  // _GPE: General Purpose Events
                }
            }

            Method (XEPC, 0, NotSerialized)
            {
                Return (0x60)
            }

            Method (MBSD, 0, NotSerialized)
            {
                Return (0x01)
            }

            Method (SPWR, 1, Serialized)
            {
                If ((Arg0 == 0x00))
                {
                    GD10 = 0x00
                    GP10 = 0x00
                }
                ElseIf ((Arg0 == 0x01))
                {
                    GD10 = 0x01
                    SDPC += 0x01
                }
                ElseIf ((Arg0 == 0x02))
                {
                    GD10 = 0x00
                    GP10 = 0x00
                }
                ElseIf ((Arg0 == 0x03))
                {
                    GD10 = 0x01
                }
            }

            Method (SPWC, 0, NotSerialized)
            {
                Return (SDPC) /* \_SB_.PCI0.XHC1.SDPC */
            }
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "APPLE ", "SataAhci", 0x00001000)
{
    External (_SB_.PCI0.RP05.SSD0, DeviceObj)
    External (GTF0, IntObj)

    Scope (\_SB.PCI0.RP05.SSD0)
    {
        Device (PRT0)
        {
            Name (_ADR, 0xFFFF)  // _ADR: Address
            Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
            {
                Name (GBU0, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
                })
                CreateByteField (GBU0, 0x00, GB00)
                CreateByteField (GBU0, 0x01, GB01)
                CreateByteField (GBU0, 0x02, GB02)
                CreateByteField (GBU0, 0x03, GB03)
                CreateByteField (GBU0, 0x04, GB04)
                CreateByteField (GBU0, 0x05, GB05)
                CreateByteField (GBU0, 0x06, GB06)
                If ((SizeOf (Arg0) == 0x0200))
                {
                    CreateWordField (Arg0, 0x9C, W780)
                    If ((W780 & 0x08))
                    {
                        GB00 = 0x10
                        GB01 = 0x03
                        GB06 = 0xEF
                    }
                    Else
                    {
                        GB00 = 0x90
                        GB01 = 0x03
                        GB06 = 0xEF
                    }
                }

                GTF0 = GBU0 /* \_SB_.PCI0.RP05.SSD0.PRT0._SDD.GBU0 */
            }

            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                Return (GTF0) /* External reference */
            }
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Ist", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (CPLT, IntObj)
    External (PDC0, UnknownObj)
    External (TCNT, IntObj)

    Scope (\_PR.CPU0)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Local0 = CPLT /* External reference */
            Return (Local0)
        }

        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000199, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x10,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000198, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x10)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000899, 
                0x0000B798, 
                0x0000000A, 
                0x0000000A, 
                0x00002400, 
                0x00002400
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x0000B798, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x0000AC6E, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x0000A17D, 
                0x0000000A, 
                0x0000000A, 
                0x00001400, 
                0x00001400
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00009889, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00008E01, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000856C, 
                0x0000000A, 
                0x0000000A, 
                0x00001100, 
                0x00001100
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00007B53, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000731A, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00006960, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x00006183, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x0000582D, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x0000044C, 
                0x000050AE, 
                0x0000000A, 
                0x0000000A, 
                0x00000B00, 
                0x00000B00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x000047BB, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00003EFC, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x000037FD, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }
        })
        Name (APSS, Package (0x1B)
        {
            Package (0x06)
            {
                0x00000D48, 
                0x0000B798, 
                0x0000000A, 
                0x0000000A, 
                0x00002200, 
                0x00002200
            }, 

            Package (0x06)
            {
                0x00000CE4, 
                0x0000B798, 
                0x0000000A, 
                0x0000000A, 
                0x00002100, 
                0x00002100
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x0000B798, 
                0x0000000A, 
                0x0000000A, 
                0x00002000, 
                0x00002000
            }, 

            Package (0x06)
            {
                0x00000C1C, 
                0x0000B798, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x0000B798, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000B54, 
                0x0000B798, 
                0x0000000A, 
                0x0000000A, 
                0x00001D00, 
                0x00001D00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x0000B798, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x0000B798, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x00000A28, 
                0x0000B798, 
                0x0000000A, 
                0x0000000A, 
                0x00001A00, 
                0x00001A00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x0000B798, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x0000B798, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x0000B798, 
                0x0000000A, 
                0x0000000A, 
                0x00001700, 
                0x00001700
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x0000B798, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x0000AC6E, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x0000A17D, 
                0x0000000A, 
                0x0000000A, 
                0x00001400, 
                0x00001400
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00009889, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00008E01, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000856C, 
                0x0000000A, 
                0x0000000A, 
                0x00001100, 
                0x00001100
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00007B53, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x0000731A, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00006960, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x00006183, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x0000582D, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x0000044C, 
                0x000050AE, 
                0x0000000A, 
                0x0000000A, 
                0x00000B00, 
                0x00000B00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x000047BB, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00003EFC, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x000037FD, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }
        })
        Name (APSN, 0x0C)
        Name (APLF, 0x00)
        Name (PSDF, 0x00)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [0x00]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [0x00]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU0.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU0.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00, 
                0xFC, 
                0x80
            }
        })
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 1, "APPLE ", "Sdxc", 0x00001000)
{
    Scope (\_SB)
    {
        Name (SDTB, Buffer (0x82)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00                                       // ..
        })
    }
}



