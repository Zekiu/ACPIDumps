
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20230628
Copyright (c) 2000 - 2023 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  APIC  0x00000068  0x02  "APPLE "  "Apple00 "  0x00000001  "Loki"   0x0000005F
 02)  MCFG  0x0000003C  0x01  "APPLE "  "Apple00 "  0x00000001  "Loki"   0x0000005F
 03)  ASF!  0x000000A5  0x20  "APPLE "  "Apple00 "  0x00000001  "Loki"   0x0000005F
 04)  ECDT  0x00000053  0x01  "APPLE "  "Apple00 "  0x00000001  "Loki"   0x0000005F
 05)  SSDT  0x000004DC  0x01  "APPLE "  "CpuPm   "  0x00003000  "INTL"   0x20061109
 06)  DSDT  0x00005B9E  0x01  "APPLE "  "MacBookP"  0x00050005  "INTL"   0x20061109
 07)  SBST  0x00000030  0x01  "APPLE "  "Apple00 "  0x00000001  "Loki"   0x0000005F
 08)  APIC  0x00000068  0x01  "APPLE "  "Apple00 "  0x00000001  "Loki"   0x0000005F
 09)  FACP  0x000000F4  0x04  "APPLE "  "Apple00 "  0x000000AC  "Loki"   0x0000005F
 10)  SSDT  0x0000023A  0x00  "  PLE "  "SataAhci"  0x00001000  "INTL"   0x20061109
 11)  HPET  0x00000038  0x01  "APPLE "  "Apple00 "  0x00000001  "Loki"   0x0000005F
 12)  FACS  0x00000040  0x01
 13)  SSDT  0x000002AD  0x01  "APPLE "  "Cpu0Cst "  0x00003001  "INTL"   0x20061109
 14)  SSDT  0x000000C8  0x01  "APPLE "  "Cpu1Ist "  0x00003000  "INTL"   0x20061109
 15)  SSDT  0x000002BC  0x01  "APPLE "  "Cpu0Ist "  0x00003000  "INTL"   0x20061109
 16)  SSDT  0x00000085  0x01  "APPLE "  "Cpu1Cst "  0x00003000  "INTL"   0x20061109

Found 16 ACPI tables in acpidump

APIC1
-----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 00000068
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : 8D
[00Ah 0010 006h]                      Oem ID : "APPLE "
[010h 0016 008h]                Oem Table ID : "Apple00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "Loki"
[020h 0032 004h]       Asl Compiler Revision : 0000005F

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 00
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 01
[037h 0055 001h]               Local Apic ID : 01
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 01 [I/O APIC]
[03Dh 0061 001h]                      Length : 0C
[03Eh 0062 001h]                 I/O Apic ID : 01
[03Fh 0063 001h]                    Reserved : 00
[040h 0064 004h]                     Address : FEC00000
[044h 0068 004h]                   Interrupt : 00000000

[048h 0072 001h]               Subtable Type : 02 [Interrupt Source Override]
[049h 0073 001h]                      Length : 0A
[04Ah 0074 001h]                         Bus : 00
[04Bh 0075 001h]                      Source : 00
[04Ch 0076 004h]                   Interrupt : 00000002
[050h 0080 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[052h 0082 001h]               Subtable Type : 02 [Interrupt Source Override]
[053h 0083 001h]                      Length : 0A
[054h 0084 001h]                         Bus : 00
[055h 0085 001h]                      Source : 09
[056h 0086 004h]                   Interrupt : 00000009
[05Ah 0090 002h]       Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[05Ch 0092 001h]               Subtable Type : 04 [Local APIC NMI]
[05Dh 0093 001h]                      Length : 06
[05Eh 0094 001h]                Processor ID : 00
[05Fh 0095 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[061h 0097 001h]        Interrupt Input LINT : 01

[062h 0098 001h]               Subtable Type : 04 [Local APIC NMI]
[063h 0099 001h]                      Length : 06
[064h 0100 001h]                Processor ID : 01
[065h 0101 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[067h 0103 001h]        Interrupt Input LINT : 01

Raw Table Data: Length 104 (0x68)

    0000: 41 50 49 43 68 00 00 00 02 8D 41 50 50 4C 45 20  // APICh.....APPLE 
    0010: 41 70 70 6C 65 30 30 00 01 00 00 00 4C 6F 6B 69  // Apple00.....Loki
    0020: 5F 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // _...............
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 01 0C 01 00  // ................
    0040: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0050: 00 00 02 0A 00 09 09 00 00 00 0D 00 04 06 00 05  // ................
    0060: 00 01 04 06 01 05 00 01                          // ........


APIC2
-----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 00000068
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 8E
[00Ah 0010 006h]                      Oem ID : "APPLE "
[010h 0016 008h]                Oem Table ID : "Apple00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "Loki"
[020h 0032 004h]       Asl Compiler Revision : 0000005F

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 00
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 01
[037h 0055 001h]               Local Apic ID : 01
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 01 [I/O APIC]
[03Dh 0061 001h]                      Length : 0C
[03Eh 0062 001h]                 I/O Apic ID : 01
[03Fh 0063 001h]                    Reserved : 00
[040h 0064 004h]                     Address : FEC00000
[044h 0068 004h]                   Interrupt : 00000000

[048h 0072 001h]               Subtable Type : 02 [Interrupt Source Override]
[049h 0073 001h]                      Length : 0A
[04Ah 0074 001h]                         Bus : 00
[04Bh 0075 001h]                      Source : 00
[04Ch 0076 004h]                   Interrupt : 00000002
[050h 0080 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[052h 0082 001h]               Subtable Type : 02 [Interrupt Source Override]
[053h 0083 001h]                      Length : 0A
[054h 0084 001h]                         Bus : 00
[055h 0085 001h]                      Source : 09
[056h 0086 004h]                   Interrupt : 00000009
[05Ah 0090 002h]       Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[05Ch 0092 001h]               Subtable Type : 04 [Local APIC NMI]
[05Dh 0093 001h]                      Length : 06
[05Eh 0094 001h]                Processor ID : 00
[05Fh 0095 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[061h 0097 001h]        Interrupt Input LINT : 01

[062h 0098 001h]               Subtable Type : 04 [Local APIC NMI]
[063h 0099 001h]                      Length : 06
[064h 0100 001h]                Processor ID : 01
[065h 0101 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[067h 0103 001h]        Interrupt Input LINT : 01

Raw Table Data: Length 104 (0x68)

    0000: 41 50 49 43 68 00 00 00 01 8E 41 50 50 4C 45 20  // APICh.....APPLE 
    0010: 41 70 70 6C 65 30 30 00 01 00 00 00 4C 6F 6B 69  // Apple00.....Loki
    0020: 5F 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // _...............
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 01 0C 01 00  // ................
    0040: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0050: 00 00 02 0A 00 09 09 00 00 00 0D 00 04 06 00 05  // ................
    0060: 00 01 04 06 01 05 00 01                          // ........


ASF!
----
[000h 0000 004h]                   Signature : "ASF!"    [Alert Standard Format Table]
[004h 0004 004h]                Table Length : 000000A5
[008h 0008 001h]                    Revision : 20
[009h 0009 001h]                    Checksum : B6
[00Ah 0010 006h]                      Oem ID : "APPLE "
[010h 0016 008h]                Oem Table ID : "Apple00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "Loki"
[020h 0032 004h]       Asl Compiler Revision : 0000005F

[024h 0036 001h]               Subtable Type : 00 [ASF Information]
[025h 0037 001h]                    Reserved : 00
[026h 0038 002h]                      Length : 0010
[028h 0040 001h]         Minimum Reset Value : 05
[029h 0041 001h]    Minimum Polling Interval : FF
[02Ah 0042 002h]                   System ID : 0001
[02Ch 0044 004h]             Manufacturer ID : BE110000
[030h 0048 001h]                       Flags : 00
[031h 0049 003h]                    Reserved : 000000

[034h 0052 001h]               Subtable Type : 01 [ASF Alerts]
[035h 0053 001h]                    Reserved : 00
[036h 0054 002h]                      Length : 002C
[038h 0056 001h]                  AssertMask : 00
[039h 0057 001h]                DeassertMask : 00
[03Ah 0058 001h]                 Alert Count : 03
[03Bh 0059 001h]           Alert Data Length : 0C

[03Ch 0060 001h]                     Address : 89
[03Dh 0061 001h]                     Command : 04
[03Eh 0062 001h]                        Mask : 01
[03Fh 0063 001h]                       Value : 01
[040h 0064 001h]                  SensorType : 05
[041h 0065 001h]                        Type : 6F
[042h 0066 001h]                      Offset : 00
[043h 0067 001h]                  SourceType : 68
[044h 0068 001h]                    Severity : 08
[045h 0069 001h]                SensorNumber : 88
[046h 0070 001h]                      Entity : 17
[047h 0071 001h]                    Instance : 00

[048h 0072 001h]                     Address : 89
[049h 0073 001h]                     Command : 04
[04Ah 0074 001h]                        Mask : 04
[04Bh 0075 001h]                       Value : 04
[04Ch 0076 001h]                  SensorType : 07
[04Dh 0077 001h]                        Type : 6F
[04Eh 0078 001h]                      Offset : 00
[04Fh 0079 001h]                  SourceType : 68
[050h 0080 001h]                    Severity : 20
[051h 0081 001h]                SensorNumber : 88
[052h 0082 001h]                      Entity : 03
[053h 0083 001h]                    Instance : 00

[054h 0084 001h]                     Address : 89
[055h 0085 001h]                     Command : 05
[056h 0086 001h]                        Mask : 01
[057h 0087 001h]                       Value : 01
[058h 0088 001h]                  SensorType : 19
[059h 0089 001h]                        Type : 6F
[05Ah 0090 001h]                      Offset : 00
[05Bh 0091 001h]                  SourceType : 68
[05Ch 0092 001h]                    Severity : 20
[05Dh 0093 001h]                SensorNumber : 88
[05Eh 0094 001h]                      Entity : 22
[05Fh 0095 001h]                    Instance : 00

[060h 0096 001h]               Subtable Type : 02 [ASF Remote Control]
[061h 0097 001h]                    Reserved : 00
[062h 0098 002h]                      Length : 0018
[064h 0100 001h]               Control Count : 04
[065h 0101 001h]         Control Data Length : 04
[066h 0102 002h]                    Reserved : 0000

[068h 0104 001h]                    Function : 00
[069h 0105 001h]                     Address : 88
[06Ah 0106 001h]                     Command : 00
[06Bh 0107 001h]                       Value : 03

[06Ch 0108 001h]                    Function : 01
[06Dh 0109 001h]                     Address : 88
[06Eh 0110 001h]                     Command : 00
[06Fh 0111 001h]                       Value : 02

[070h 0112 001h]                    Function : 02
[071h 0113 001h]                     Address : 88
[072h 0114 001h]                     Command : 00
[073h 0115 001h]                       Value : 01

[074h 0116 001h]                    Function : 03
[075h 0117 001h]                     Address : 88
[076h 0118 001h]                     Command : 00
[077h 0119 001h]                       Value : 04

[078h 0120 001h]               Subtable Type : 03 [ASF RMCP Boot Options]
[079h 0121 001h]                    Reserved : 00
[07Ah 0122 002h]                      Length : 0017
[07Ch 0124 007h]                Capabilities : 20 F8 00 00 00 1F F0
[083h 0131 001h]             Completion Code : 00
[084h 0132 004h]               Enterprise ID : BE110000
[088h 0136 001h]                     Command : 00
[089h 0137 002h]                   Parameter : 0000
[08Bh 0139 002h]                Boot Options : 0100
[08Dh 0141 002h]              Oem Parameters : 0000

[08Fh 0143 001h]               Subtable Type : 84 [ASF Address]
[090h 0144 001h]                    Reserved : 00
[091h 0145 002h]                      Length : 0016
[093h 0147 001h]               Eprom Address : 00
[094h 0148 001h]                Device Count : 10
[095h 0149 001h]                   Addresses : 5C 68 88 C2 D2 DC A0 A2 A4 A6 C8 00 00 00 00 00 


Raw Table Data: Length 165 (0xA5)

    0000: 41 53 46 21 A5 00 00 00 20 B6 41 50 50 4C 45 20  // ASF!.... .APPLE 
    0010: 41 70 70 6C 65 30 30 00 01 00 00 00 4C 6F 6B 69  // Apple00.....Loki
    0020: 5F 00 00 00 00 00 10 00 05 FF 01 00 00 00 11 BE  // _...............
    0030: 00 00 00 00 01 00 2C 00 00 00 03 0C 89 04 01 01  // ......,.........
    0040: 05 6F 00 68 08 88 17 00 89 04 04 04 07 6F 00 68  // .o.h.........o.h
    0050: 20 88 03 00 89 05 01 01 19 6F 00 68 20 88 22 00  //  ........o.h .".
    0060: 02 00 18 00 04 04 00 00 00 88 00 03 01 88 00 02  // ................
    0070: 02 88 00 01 03 88 00 04 03 00 17 00 20 F8 00 00  // ............ ...
    0080: 00 1F F0 00 00 00 11 BE 00 00 00 00 01 00 00 84  // ................
    0090: 00 16 00 00 10 5C 68 88 C2 D2 DC A0 A2 A4 A6 C8  // .....\h.........
    00A0: 00 00 00 00 00                                   // .....


DSDT
----
DefinitionBlock ("", "DSDT", 1, "APPLE ", "MacBookP", 0x00050005)
{
    External (_SB_.PCI0.SATA.PRT1, UnknownObj)
    External (PDC0, UnknownObj)
    External (PDC1, UnknownObj)

    OperationRegion (PRT0, SystemIO, 0x80, 0x02)
    Field (PRT0, WordAcc, Lock, Preserve)
    {
        P80H,   16
    }

    OperationRegion (SPRT, SystemIO, 0x052E, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    OperationRegion (IO_T, SystemIO, 0x0800, 0x10)
    Field (IO_T, ByteAcc, NoLock, Preserve)
    {
        TRPI,   16, 
        Offset (0x04), 
        Offset (0x06), 
        Offset (0x08), 
        TRP0,   8, 
        TRPC,   8, 
        Offset (0x0B), 
        Offset (0x0C), 
        Offset (0x0D), 
        Offset (0x0E), 
        Offset (0x0F), 
        Offset (0x10)
    }

    OperationRegion (IO_D, SystemIO, 0x0810, 0x08)
    Field (IO_D, ByteAcc, NoLock, Preserve)
    {
        TRPD,   8
    }

    OperationRegion (PMIO, SystemIO, 0x0400, 0x80)
    Field (PMIO, ByteAcc, NoLock, Preserve)
    {
        Offset (0x20), 
            ,   2, 
        SPST,   1, 
        Offset (0x42), 
            ,   1, 
        GPEC,   1
    }

    OperationRegion (GNVS, SystemMemory, 0xBFED5A98, 0x0100)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        P80D,   32, 
        LIDS,   8, 
        PWRS,   8, 
        DBGS,   8, 
        LINX,   8, 
        Offset (0x14), 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
        BNUM,   8, 
        B0SC,   8, 
        B1SC,   8, 
        B2SC,   8, 
        B0SS,   8, 
        B1SS,   8, 
        B2SS,   8, 
        Offset (0x28), 
        APIC,   8, 
        MPEN,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        Offset (0x32), 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        CMCP,   8, 
        CIRP,   8, 
        Offset (0x3C), 
        IGDS,   8, 
        TLST,   8, 
        CADL,   8, 
        PADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        SSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        BDSP,   8, 
        PTY1,   8, 
        PTY2,   8, 
        PSCL,   8, 
        TVF1,   8, 
        TVF2,   8, 
        Offset (0x63), 
        GOPB,   32, 
        BLCS,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        Offset (0x6E), 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        Offset (0x74), 
        MEFE,   8, 
        Offset (0x82), 
        GTF0,   56, 
        GTF2,   56, 
        IDEM,   8, 
        GTF1,   56, 
        GTF3,   56, 
        GTF4,   56, 
        GTF5,   56
    }

    Name (\GBRD, 0x01)
    OperationRegion (NVSB, SystemIO, 0x0500, 0x0100)
    Field (NVSB, ByteAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        GP01,   1, 
        GP02,   1, 
        GP03,   1, 
        GP04,   1, 
        GP05,   1, 
        GP06,   1, 
        GP07,   1, 
        GP08,   1, 
        GP09,   1, 
        GP10,   1, 
        GP11,   1, 
        GP12,   1, 
        GP13,   1, 
        GP14,   1, 
        GP15,   1, 
        GP16,   1, 
        GP17,   1, 
        GP18,   1, 
        GP19,   1, 
        GP20,   1, 
        GP21,   1, 
        GP22,   1, 
        GP23,   1, 
        GP24,   1, 
        GP25,   1, 
        GP26,   1, 
        GP27,   1, 
        GP28,   1, 
        GP29,   1, 
        GP30,   1, 
        GP31,   1, 
        GP32,   1, 
        GP33,   1, 
        GP34,   1, 
        GP35,   1, 
        GP36,   1, 
        GP37,   1, 
        GP38,   1, 
        GP39,   1, 
        GP40,   1, 
        GP41,   1, 
        GP42,   1, 
        GP43,   1, 
        GP44,   1, 
        GP45,   1, 
        GP46,   1, 
        GP47,   1, 
        GP48,   1, 
        GP49,   1, 
        GP50,   1, 
        GP51,   1, 
        GP52,   1, 
        GP53,   1, 
        GP54,   1, 
        GP55,   1, 
        GP56,   1, 
        GP57,   1, 
        GP58,   1, 
        GP59,   1, 
        GP60,   1, 
        GP61,   1, 
        GP62,   1, 
        GP63,   1, 
        GP64,   1, 
        Offset (0xC4), 
        GI05,   8, 
        Offset (0xD0), 
        GI17,   8, 
        Offset (0xE5), 
        GI38,   8, 
        Offset (0xFF), 
            ,   2, 
        APPS,   1, 
        Offset (0x100)
    }

    Mutex (MUTX, 0x00)
    Scope (\_PR)
    {
        Processor (CPU0, 0x00, 0x00000410, 0x06){}
        Processor (CPU1, 0x01, 0x00000410, 0x06){}
    }

    Name (\DSEN, 0x01)
    Name (\ECON, 0x00)
    Name (\GPIC, 0x00)
    Name (\CTYP, 0x00)
    Name (\VFN0, 0x00)
    Method (OSDW, 0, NotSerialized)
    {
        If ((OSYS == 0x2710))
        {
            Return (0x01)
        }
        Else
        {
            Return (0x00)
        }
    }

    Method (PINI, 0, NotSerialized)
    {
        If (CondRefOf (_OSI, Local0))
        {
            If (_OSI ("Darwin"))
            {
                OSYS = 0x2710
            }
            ElseIf (_OSI ("Linux"))
            {
                OSYS = 0x03E8
            }
            ElseIf (_OSI ("Windows 2006"))
            {
                OSYS = 0x07D6
            }
            ElseIf (_OSI ("Windows 2001 SP2"))
            {
                OSYS = 0x07D2
            }
            ElseIf (_OSI ("Windows 2001 SP1"))
            {
                OSYS = 0x07D1
            }
            ElseIf (_OSI ("Windows 2001"))
            {
                OSYS = 0x07D1
            }
        }
        Else
        {
            OSYS = 0x07D0
        }
    }

    Method (\_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
    }

    Method (DTGP, 5, NotSerialized)
    {
        If ((Arg0 == ToUUID ("a0b5b7c6-1318-441c-b0c9-fe695eaf949b") /* Unknown UUID */))
        {
            If ((Arg1 == One))
            {
                If ((Arg2 == Zero))
                {
                    Arg4 = Buffer (0x01)
                        {
                             0x03                                             // .
                        }
                    Return (One)
                }

                If ((Arg2 == One))
                {
                    Return (One)
                }
            }
        }

        Arg4 = Buffer (0x01)
            {
                 0x00                                             // .
            }
        Return (Zero)
    }

    Name (_S0, Package (0x03)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00
    })
    Name (_S3, Package (0x03)  // _S3_: S3 System State
    {
        0x05, 
        0x05, 
        0x00
    })
    Name (_S4, Package (0x03)  // _S4_: S4 System State
    {
        0x06, 
        0x06, 
        0x00
    })
    Name (_S5, Package (0x03)  // _S5_: S5 System State
    {
        0x07, 
        0x07, 
        0x00
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        P80D = 0x00
        P8XH (0x00, Arg0)
        \_SB.PCI0.LPCB.EC.ECSS = Arg0
        GP61 = 0x01
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        P8XH (0x00, 0x00)
        \_SB.PCI0.LPCB.EC.ECSS = 0x00
        If (OSDW ())
        {
            \_SB.PCI0.SBUS.ENAB ()
        }

        LIDS = \_SB.PCI0.LPCB.EC.LSTE
        PWRS = \_SB.PCI0.LPCB.EC.RPWR
        PNOT ()
        Return (Package (0x02)
        {
            0x00, 
            0x00
        })
    }

    Scope (\_GPE)
    {
        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            GPEC = 0x00
        }

        Method (_L11, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.RP04, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP05, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L14, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.RP04, 0x00) // Bus Check
            Notify (\_SB.PCI0.RP05, 0x00) // Bus Check
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Method (P8XH, 2, Serialized)
    {
        If ((Arg0 == 0x00))
        {
            P80D = ((P80D & 0xFFFFFF00) | Arg1)
        }

        If ((Arg0 == 0x01))
        {
            P80D = ((P80D & 0xFFFF00FF) | (Arg1 << 0x08))
        }

        If ((Arg0 == 0x02))
        {
            P80D = ((P80D & 0xFF00FFFF) | (Arg1 << 0x10))
        }

        If ((Arg0 == 0x03))
        {
            P80D = ((P80D & 0x00FFFFFF) | (Arg1 << 0x18))
        }

        P80H = P80D /* \P80D */
    }

    Method (PNOT, 0, Serialized)
    {
        If (MPEN)
        {
            If ((PDC0 & 0x08))
            {
                Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                If ((PDC0 & 0x10))
                {
                    If ((0x01 != OSDW ()))
                    {
                        Sleep (0x64)
                    }

                    Notify (\_PR.CPU0, 0x81) // C-State Change
                }
            }

            If ((PDC1 & 0x08))
            {
                Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                If ((PDC1 & 0x10))
                {
                    If ((0x01 != OSDW ()))
                    {
                        Sleep (0x64)
                    }

                    Notify (\_PR.CPU1, 0x81) // C-State Change
                }
            }
        }
        Else
        {
            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
            If ((0x01 != OSDW ()))
            {
                Sleep (0x64)
            }

            Notify (\_PR.CPU0, 0x81) // C-State Change
        }
    }

    Method (TRAP, 2, Serialized)
    {
        SMIF = Arg1
        If ((Arg0 == 0x01))
        {
            TRP0 = 0x00
            Return (SMIF) /* \SMIF */
        }

        If ((Arg0 == 0x02))
        {
            TRPD = 0x00
            Return (SMIF) /* \SMIF */
        }

        Return (0x01)
    }

    Method (CREV, 0, NotSerialized)
    {
        Return (\_SB.PCI0.LPCB.REVI)
    }

    Scope (\_SB)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            PINI ()
        }

        Device (ADP1)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x3E, 
                0x03
            })
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                Return (PWRS) /* \PWRS */
            }

            Method (_PCL, 0, NotSerialized)  // _PCL: Power Consumer List
            {
                Return (\_SB)
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (OSDW ())
                {
                    If (\_SB.PCI0.LPCB.EC.ECOK)
                    {
                        If (Arg0)
                        {
                            \_SB.PCI0.LPCB.EC.ACWK = 0x01
                        }
                        Else
                        {
                            \_SB.PCI0.LPCB.EC.ACWK = 0x00
                        }
                    }
                }
            }
        }

        Device (LID0)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x3E, 
                0x03
            })
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Return (LIDS) /* \LIDS */
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (\_SB.PCI0.LPCB.EC.ECOK)
                {
                    If (Arg0)
                    {
                        \_SB.PCI0.LPCB.EC.LWAK = 0x01
                    }
                    Else
                    {
                        \_SB.PCI0.LPCB.EC.LWAK = 0x00
                    }
                }
            }
        }

        Device (PNLF)
        {
            Name (_HID, EisaId ("APP0002"))  // _HID: Hardware ID
            Name (_CID, "backlight")  // _CID: Compatible ID
            Name (_UID, 0x0A)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
        }

        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (PCI0)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (OSDW ())
                {
                    \_SB.PCI0.SBUS.ENAB ()
                }
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x03)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x03)
            }

            Name (_ADR, 0x00)  // _ADR: Address
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Device (MCHC)
            {
                Name (_ADR, 0x00)  // _ADR: Address
            }

            Device (MCH2)
            {
                Name (_ADR, 0x01)  // _ADR: Address
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CFF,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xFEBFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y00, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (BUF0, \_SB.PCI0._Y00._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y00._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y00._LEN, M1LN)  // _LEN: Length
                M1MN = (\_SB.PCI0.CMC2.TOLM << 0x1B)
                M1LN = ((M1MX - M1MN) + 0x01)
                Return (BUF0) /* \_SB_.PCI0.BUF0 */
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    If ((Arg2 >= 0x03))
                    {
                        Name (SUPP, 0x00)
                        Name (CTRL, 0x00)
                        Local0 = 0x03
                        CreateDWordField (Arg3, 0x04, CDW2)
                        CreateDWordField (Arg3, 0x08, CDW3)
                        SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                        CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                        CTRL &= 0x1D
                        If (((SUPP & 0x16) != 0x16))
                        {
                            CTRL &= 0x1E
                        }

                        If (!(CDW1 & 0x01))
                        {
                            If ((CTRL & 0x01))
                            {
                                Local0 &= 0x0E
                            }

                            If ((CTRL & 0x04))
                            {
                                Local0 &= 0x0D
                            }

                            If ((CTRL & 0x10)){}
                        }

                        If ((Arg1 != One))
                        {
                            CDW1 |= 0x08
                        }

                        If ((CDW3 != CTRL))
                        {
                            CDW1 |= 0x10
                        }

                        CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    }
                    Else
                    {
                        CDW1 |= 0x02
                    }
                }
                Else
                {
                    CDW1 |= 0x04
                }

                Return (Arg3)
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                Return (Package (0x11)
                {
                    Package (0x04)
                    {
                        0x0003FFFF, 
                        0x00, 
                        \_SB.PCI0.LSMB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0003FFFF, 
                        0x01, 
                        \_SB.PCI0.LPMU, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x00, 
                        \_SB.PCI0.LUS0, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x01, 
                        \_SB.PCI0.LUS2, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x00, 
                        \_SB.PCI0.Z000, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x01, 
                        \_SB.PCI0.Z001, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x00, 
                        \_SB.PCI0.LAZA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000AFFFF, 
                        0x00, 
                        \_SB.PCI0.LMAC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x000BFFFF, 
                        0x00, 
                        \_SB.PCI0.LSI0, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0015FFFF, 
                        0x00, 
                        \_SB.PCI0.Z00F, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0015FFFF, 
                        0x01, 
                        \_SB.PCI0.Z00G, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0015FFFF, 
                        0x02, 
                        \_SB.PCI0.Z00H, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0015FFFF, 
                        0x03, 
                        \_SB.PCI0.Z00I, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0016FFFF, 
                        0x00, 
                        \_SB.PCI0.Z00J, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0016FFFF, 
                        0x01, 
                        \_SB.PCI0.Z00K, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0016FFFF, 
                        0x02, 
                        \_SB.PCI0.Z00L, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0016FFFF, 
                        0x03, 
                        \_SB.PCI0.Z00M, 
                        0x00
                    }
                })
            }

            Device (PDRC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x01)  // _UID: Unique ID
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y01)
                    Memory32Fixed (ReadWrite,
                        0xF0000000,         // Address Base
                        0x04000000,         // Address Length
                        )
                })
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y01._BAS, MBAS)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y01._LEN, MBLE)  // _LEN: Length
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (BUF0) /* \_SB_.PCI0.PDRC.BUF0 */
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (P8, PCI_Config, 0x08, 0x01)
                Field (P8, AnyAcc, NoLock, Preserve)
                {
                    REVI,   8
                }

                OperationRegion (P44, PCI_Config, 0x44, 0x04)
                Field (P44, AnyAcc, NoLock, Preserve)
                {
                    MTBA,   32
                }

                OperationRegion (MMTO, PCI_Config, 0x74, 0x04)
                Field (MMTO, DWordAcc, NoLock, Preserve)
                {
                    MTSE,   32
                }

                Device (SMC)
                {
                    Name (_HID, EisaId ("APP0001"))  // _HID: Hardware ID
                    Name (_CID, "smc-mcp")  // _CID: Compatible ID
                    Name (_STA, 0x0B)  // _STA: Status
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0300,             // Range Minimum
                            0x0300,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IRQNoFlags ()
                            {6}
                    })
                    Device (ALS0)
                    {
                        Name (_HID, "ACPI0008" /* Ambient Light Sensor Device */)  // _HID: Hardware ID
                        Name (_CID, "smc-als")  // _CID: Compatible ID
                        Method (_ALI, 0, NotSerialized)  // _ALI: Ambient Light Illuminance
                        {
                            Return (0x012C)
                        }

                        Name (_ALR, Package (0x03)  // _ALR: Ambient Light Response
                        {
                            Package (0x02)
                            {
                                0x46, 
                                0x00
                            }, 

                            Package (0x02)
                            {
                                0x64, 
                                0x012C
                            }, 

                            Package (0x02)
                            {
                                0x96, 
                                0x03E8
                            }
                        })
                    }

                    Device (SMS0)
                    {
                        Name (_HID, EisaId ("APP0003"))  // _HID: Hardware ID
                        Name (_CID, "smc-sms")  // _CID: Compatible ID
                        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                        {
                            Local0 = Package (0x03)
                                {
                                    "disk-sense-level", 
                                    0x00, 
                                    Buffer (0x01)
                                    {
                                         0x00                                             // .
                                    }
                                }
                            DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))
                            Return (Local0)
                        }
                    }
                }

                Device (EC)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0066,             // Range Minimum
                            0x0066,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                    Name (_GPE, 0x3F)  // _GPE: General Purpose Events
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x3E, 
                        0x03
                    })
                    Name (ECOK, 0x00)
                    OperationRegion (ECOR, EmbeddedControl, 0x00, 0xFF)
                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        ECVS,   8, 
                        LSTE,   1, 
                        RPWR,   1, 
                        CDIN,   1, 
                        Offset (0x02), 
                        LWAK,   1, 
                        ACWK,   1, 
                        CDWK,   1, 
                        Offset (0x03), 
                        Offset (0x10), 
                        ECSS,   8, 
                        PLIM,   8, 
                        Offset (0x20), 
                        SPTR,   8, 
                        SSTS,   8, 
                        SADR,   8, 
                        SCMD,   8, 
                        SBFR,   256, 
                        SCNT,   8, 
                        SAAD,   8, 
                        SAD0,   8, 
                        SAD1,   8, 
                        SMUX,   8
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x24), 
                        SBDW,   16, 
                        Offset (0x46), 
                        SADW,   16
                    }

                    Device (SMB0)
                    {
                        Name (_HID, "ACPI0001" /* SMBus 1.0 Host Controller */)  // _HID: Hardware ID
                        Name (_EC, 0x2010)  // _EC_: Embedded Controller
                        Mutex (SMTX, 0x00)
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (OSDW ())
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }

                        Device (SBS0)
                        {
                            Name (_HID, "ACPI0002" /* Smart Battery Subsystem */)  // _HID: Hardware ID
                            Name (_SBS, 0x01)  // _SBS: Smart Battery Subsystem
                        }

                        Method (SBPC, 1, NotSerialized)
                        {
                            Local0 = Arg0
                            While (Local0)
                            {
                                If ((SPTR == 0x00))
                                {
                                    Return ((SSTS & 0x1F))
                                }

                                Sleep (0x01)
                                Local0--
                            }

                            Return (0x18)
                        }

                        Method (SBRW, 3, NotSerialized)
                        {
                            Local0 = One
                            If (!Acquire (\_SB.PCI0.LPCB.EC.SMB0.SMTX, 0xFFFF))
                            {
                                If ((SPTR == 0x00))
                                {
                                    SADR = (Arg0 << 0x01)
                                    SCMD = Arg1
                                    SPTR = 0x09
                                    Local0 = SBPC (0x03E8)
                                    If (!Local0)
                                    {
                                        Arg2 = SBDW /* \_SB_.PCI0.LPCB.EC__.SBDW */
                                    }
                                }

                                Release (\_SB.PCI0.LPCB.EC.SMB0.SMTX)
                            }

                            Return (Local0)
                        }

                        Method (SBRB, 3, NotSerialized)
                        {
                            Local0 = One
                            Local1 = Buffer (0x01)
                                {
                                     0x00                                             // .
                                }
                            If (!Acquire (\_SB.PCI0.LPCB.EC.SMB0.SMTX, 0xFFFF))
                            {
                                If ((SPTR == 0x00))
                                {
                                    SADR = (Arg0 << 0x01)
                                    SCMD = Arg1
                                    SPTR = 0x0B
                                    Local0 = SBPC (0x03E8)
                                    If (!Local0)
                                    {
                                        Arg2 = SBFR /* \_SB_.PCI0.LPCB.EC__.SBFR */
                                    }
                                }

                                Release (\_SB.PCI0.LPCB.EC.SMB0.SMTX)
                            }

                            Return (Local0)
                        }
                    }

                    Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (OSDW ())
                        {
                            Notify (\_SB.PCI0.LPCB.EC.SMB0, 0x80) // Status Change
                        }
                        ElseIf ((SSTS & 0x40))
                        {
                            If (!Acquire (\_SB.PCI0.LPCB.EC.SMB0.SMTX, 0xFFFF))
                            {
                                Local0 = (SAAD >> 0x01)
                                If ((Local0 == 0x0A))
                                {
                                    \_SB.BAT0.BNOT (SADW)
                                }

                                SSTS = 0x00
                                Release (\_SB.PCI0.LPCB.EC.SMB0.SMTX)
                            }
                        }
                    }

                    Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        LIDS = LSTE /* \_SB_.PCI0.LPCB.EC__.LSTE */
                        Notify (\_SB.LID0, 0x80) // Status Change
                    }

                    Method (_Q21, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (RPWR)
                        {
                            PWRS = 0x01
                        }
                        Else
                        {
                            PWRS = 0x00
                        }

                        Notify (\_SB.ADP1, 0x80) // Status Change
                        PNOT ()
                    }

                    Method (_Q5A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (\_SB.SLPB, 0x80) // Status Change
                    }

                    Method (_Q80, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        PNOT ()
                    }

                    Method (_QCD, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (CDIN)
                        {
                            Notify (\_SB.PCI0.SATA.PRT1, 0x81) // Information Change
                        }
                        Else
                        {
                            Notify (\_SB.PCI0.SATA.PRT1, 0x82) // Device-Specific Change
                        }
                    }

                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x03) || (OSYS == 0x07D6)))
                        {
                            ECOK = Arg1
                            If ((Arg1 == 0x01))
                            {
                                ECSS = 0x00
                                LIDS = LSTE /* \_SB_.PCI0.LPCB.EC__.LSTE */
                                Notify (\_SB.LID0, 0x80) // Status Change
                                PWRS = RPWR /* \_SB_.PCI0.LPCB.EC__.RPWR */
                                Notify (\_SB.ADP1, 0x80) // Status Change
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Device (BAT0)
                    {
                        Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                        Name (_UID, 0x00)  // _UID: Unique ID
                        Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                        {
                            \_SB
                        })
                        Name (BSSW, 0xFFFF)
                        Name (PBIF, Package (0x0D)
                        {
                            0x00, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0x01, 
                            0xFFFFFFFF, 
                            0xFA, 
                            0x64, 
                            0x0A, 
                            0x0A, 
                            " ", 
                            " ", 
                            " ", 
                            " "
                        })
                        Name (PBST, Package (0x04)
                        {
                            0x00, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (OSDW ())
                            {
                                Return (0x00)
                            }

                            If (\_SB.PCI0.LPCB.EC.ECOK)
                            {
                                UBSS ()
                                If ((BSSW & 0x01))
                                {
                                    Return (0x1F)
                                }
                                Else
                                {
                                    Return (0x0F)
                                }
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                        {
                            If ((BSSW & 0x01))
                            {
                                UBST ()
                            }
                            Else
                            {
                                PBST [0x00] = 0x00
                                PBST [0x01] = 0xFFFFFFFF
                                PBST [0x02] = 0xFFFFFFFF
                            }

                            Return (PBST) /* \_SB_.BAT0.PBST */
                        }

                        Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
                        {
                            If ((BSSW & 0x01))
                            {
                                UBIF ()
                            }

                            Return (PBIF) /* \_SB_.BAT0.PBIF */
                        }

                        Method (BNOT, 1, NotSerialized)
                        {
                            Local0 = BSSW /* \_SB_.BAT0.BSSW */
                            BSSW = Arg0
                            Notify (\_SB.BAT0, 0x80) // Status Change
                            If (((Local0 ^ Arg0) & 0x01))
                            {
                                Notify (\_SB.BAT0, 0x81) // Information Change
                            }
                        }

                        Method (UBSS, 0, NotSerialized)
                        {
                            \_SB.PCI0.LPCB.EC.SMB0.SBRW (0x0A, 0x01, RefOf (BSSW))
                        }

                        Method (UBIF, 0, NotSerialized)
                        {
                            \_SB.PCI0.LPCB.EC.SMB0.SBRW (0x0B, 0x18, RefOf (Local0))
                            PBIF [0x01] = (Local0 * 0x0A)
                            \_SB.PCI0.LPCB.EC.SMB0.SBRW (0x0B, 0x10, RefOf (Local0))
                            PBIF [0x02] = (Local0 * 0x0A)
                            \_SB.PCI0.LPCB.EC.SMB0.SBRW (0x0B, 0x19, RefOf (Local0))
                            PBIF [0x04] = Local0
                            \_SB.PCI0.LPCB.EC.SMB0.SBRB (0x0B, 0x21, RefOf (Local0))
                            PBIF [0x09] = Local0
                            PBIF [0x0A] = Buffer (0x01)
                                {
                                     0x00                                             // .
                                }
                            \_SB.PCI0.LPCB.EC.SMB0.SBRB (0x0B, 0x22, RefOf (Local0))
                            PBIF [0x0B] = Local0
                            \_SB.PCI0.LPCB.EC.SMB0.SBRB (0x0B, 0x20, RefOf (Local0))
                            PBIF [0x0C] = Local0
                        }

                        Method (UBST, 0, NotSerialized)
                        {
                            \_SB.PCI0.LPCB.EC.SMB0.SBRW (0x0B, 0x09, RefOf (Local2))
                            PBST [0x03] = Local2
                            \_SB.PCI0.LPCB.EC.SMB0.SBRW (0x0B, 0x0A, RefOf (Local0))
                            If ((Local0 & 0x8000))
                            {
                                Local0 = ~Local0
                                Local0 = (Local0++ & 0xFFFF)
                            }

                            Local0 *= Local2
                            PBST [0x01] = (Local0 / 0x03E8)
                            \_SB.PCI0.LPCB.EC.SMB0.SBRW (0x0B, 0x0F, RefOf (Local0))
                            PBST [0x02] = (Local0 * 0x0A)
                            Local1 = 0x00
                            If (PWRS)
                            {
                                \_SB.PCI0.LPCB.EC.SMB0.SBRW (0x0B, 0x16, RefOf (Local0))
                                If (!(Local0 & 0x40))
                                {
                                    Local1 = 0x02
                                }
                            }
                            Else
                            {
                                Local1 = 0x01
                            }

                            PBST [0x00] = Local1
                        }
                    }
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x09,               // Length
                            )
                        IO (Decode16,
                            0x000A,             // Range Minimum
                            0x000A,             // Range Maximum
                            0x01,               // Alignment
                            0x06,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x12,               // Length
                            )
                        IO (Decode16,
                            0x00D4,             // Range Minimum
                            0x00D4,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0C01") /* System Board */)  // _CID: Compatible ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y02)
                    })
                    Name (BUF1, Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSYS >= 0x07D1))
                        {
                            If ((\_SB.PCI0.LPCB.MTSE & 0x04))
                            {
                                Return (0x0F)
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.MTSE & 0x04))
                        {
                            Return (0x0B)
                        }

                        Return (0x00)
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((\_SB.PCI0.LPCB.MTSE & 0x04))
                        {
                            CreateDWordField (BUF0, \_SB.PCI0.LPCB.HPET._Y02._BAS, HPT0)  // _BAS: Base Address
                            HPT0 = \_SB.PCI0.LPCB.MTBA
                            Return (BUF0) /* \_SB_.PCI0.LPCB.HPET.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPCB.HPET.BUF1 */
                    }
                }

                Device (IPIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (LDRC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            _Y03)
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            _Y04)
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            _Y05)
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            _Y06)
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            _Y07)
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            _Y08)
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x01,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x01,               // Alignment
                            0x1C,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x09,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0074,             // Range Minimum
                            0x0074,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                        IO (Decode16,
                            0x0091,             // Range Minimum
                            0x0091,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0097,             // Range Minimum
                            0x0097,             // Range Maximum
                            0x01,               // Alignment
                            0x09,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x01,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0295,             // Range Minimum
                            0x0295,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    CreateWordField (BUF0, \_SB.PCI0.LPCB.LDRC._Y03._MIN, I1MN)  // _MIN: Minimum Base Address
                    CreateWordField (BUF0, \_SB.PCI0.LPCB.LDRC._Y03._MAX, I1MX)  // _MAX: Maximum Base Address
                    CreateWordField (BUF0, \_SB.PCI0.LPCB.LDRC._Y04._MIN, I2MN)  // _MIN: Minimum Base Address
                    CreateWordField (BUF0, \_SB.PCI0.LPCB.LDRC._Y04._MAX, I2MX)  // _MAX: Maximum Base Address
                    CreateWordField (BUF0, \_SB.PCI0.LPCB.LDRC._Y05._MIN, I3MN)  // _MIN: Minimum Base Address
                    CreateWordField (BUF0, \_SB.PCI0.LPCB.LDRC._Y05._MAX, I3MX)  // _MAX: Maximum Base Address
                    CreateWordField (BUF0, \_SB.PCI0.LPCB.LDRC._Y06._MIN, I4MN)  // _MIN: Minimum Base Address
                    CreateWordField (BUF0, \_SB.PCI0.LPCB.LDRC._Y06._MAX, I4MX)  // _MAX: Maximum Base Address
                    CreateWordField (BUF0, \_SB.PCI0.LPCB.LDRC._Y07._MIN, I5MN)  // _MIN: Minimum Base Address
                    CreateWordField (BUF0, \_SB.PCI0.LPCB.LDRC._Y07._MAX, I5MX)  // _MAX: Maximum Base Address
                    CreateWordField (BUF0, \_SB.PCI0.LPCB.LDRC._Y08._MIN, I6MN)  // _MIN: Minimum Base Address
                    CreateWordField (BUF0, \_SB.PCI0.LPCB.LDRC._Y08._MAX, I6MX)  // _MAX: Maximum Base Address
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        I1MN = (\_SB.PCI0.SBUS.PMBR & 0xFFFC)
                        I1MX = I1MN /* \_SB_.PCI0.LPCB.LDRC.I1MN */
                        Local0 = (I1MN + 0x80)
                        I2MN = Local0
                        I2MX = Local0
                        I3MN = (\_SB.PCI0.SBUS.NVSB & 0xFFFC)
                        I3MX = I3MN /* \_SB_.PCI0.LPCB.LDRC.I3MN */
                        Local0 = (I3MN + 0x80)
                        I4MN = Local0
                        I4MX = Local0
                        I5MN = (\_SB.PCI0.SBUS.ANLG & 0xFFFC)
                        I5MX = I5MN /* \_SB_.PCI0.LPCB.LDRC.I5MN */
                        Local0 = (I5MN + 0x80)
                        I6MN = Local0
                        I6MX = Local0
                        Return (BUF0) /* \_SB_.PCI0.LPCB.LDRC.BUF0 */
                    }
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                    })
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                    })
                }
            }

            Device (IMAP)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Scope (\)
                {
                    OperationRegion (\_SB.PCI0.IMAP.PIRQ, PCI_Config, 0x60, 0x3C)
                    Field (\_SB.PCI0.IMAP.PIRQ, AnyAcc, NoLock, Preserve)
                    {
                        PSI0,   8, 
                        PSI1,   8, 
                        IR01,   8, 
                        IR02,   8, 
                        IMAC,   8, 
                        IMA1,   8, 
                        IR03,   8, 
                        IR04,   8, 
                        IUS0,   8, 
                        IUS2,   8, 
                        Z018,   8, 
                        Z019,   8, 
                        ISCI,   8, 
                        ITCO,   8, 
                        ISMB,   8, 
                        INTS,   8, 
                        IAZA,   8, 
                        Z01A,   8, 
                        IPID,   8, 
                        INTU,   8, 
                        INTW,   8, 
                        INTX,   8, 
                        INTY,   8, 
                        INTZ,   8, 
                        DLIA,   8, 
                        DLIB,   8, 
                        DLIC,   8, 
                        DLID,   8, 
                        Z01B,   8, 
                        Z01C,   8, 
                        Z01D,   8, 
                        Z01E,   8, 
                        Z01F,   8, 
                        Z01G,   8, 
                        Z01H,   8, 
                        Z01I,   8, 
                        Z01J,   8, 
                        Z01K,   8, 
                        Z01L,   8, 
                        Z01M,   8, 
                        Z01N,   8, 
                        Z01O,   8, 
                        Z01P,   8, 
                        Z01Q,   8, 
                        Z01R,   8, 
                        Z01S,   8, 
                        Z01T,   8, 
                        Z01U,   8, 
                        Z01V,   8, 
                        Z01W,   8, 
                        Z01X,   8, 
                        Z01Y,   8, 
                        Z01Z,   8, 
                        Z020,   8, 
                        Z021,   8, 
                        Z022,   8, 
                        Z023,   8, 
                        Z024,   8, 
                        Z025,   8, 
                        Z026,   8
                    }
                }

                Scope (\_SB.PCI0)
                {
                    Name (BUFA, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {5,7,10,11,14,15}
                    })
                    Name (BUFB, ResourceTemplate ()
                    {
                        IRQ (Level, ActiveLow, Shared, _Y09)
                            {}
                    })
                    CreateWordField (BUFB, \_SB.PCI0._Y09._INT, IRQV)  // _INT: Interrupts
                    Method (CRS, 1, Serialized)
                    {
                        If (Arg0)
                        {
                            IRQV = (0x01 << Arg0)
                        }
                        Else
                        {
                            IRQV = 0x00
                        }

                        Return (BUFB) /* \_SB_.PCI0.BUFB */
                    }

                    Method (SRS, 1, Serialized)
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        Return (Local0)
                    }

                    Name (BUFI, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, 0x17, "", )
                        {
                            0x00000010,
                            0x00000011,
                            0x00000012,
                            0x00000013,
                            0x00000014,
                            0x00000015,
                            0x00000016,
                            0x00000017,
                        }
                    })
                    Name (BUFF, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, 0x0F, "", )
                        {
                            0x00000005,
                            0x00000007,
                            0x0000000A,
                            0x0000000B,
                            0x0000000E,
                            0x0000000F,
                        }
                    })
                    Method (CRSI, 1, Serialized)
                    {
                        Name (IRZ5, ResourceTemplate ()
                        {
                            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, 0x05, "", _Y0A)
                            {
                                0x00000005,
                            }
                        })
                        CreateWordField (IRZ5, \_SB.PCI0.CRSI._Y0A._INT, INZ5)  // _INT: Interrupts
                        Local0 = Arg0
                        If ((Arg0 == 0x03))
                        {
                            Local0 = 0x10
                        }

                        If ((Arg0 == 0x04))
                        {
                            Local0 = 0x11
                        }

                        If ((Arg0 == 0x06))
                        {
                            Local0 = 0x12
                        }

                        If ((Arg0 == 0x0C))
                        {
                            Local0 = 0x13
                        }

                        If ((Arg0 == 0x08))
                        {
                            Local0 = 0x14
                        }

                        If ((Arg0 == 0x0D))
                        {
                            Local0 = 0x15
                        }

                        If ((Arg0 == 0x02))
                        {
                            Local0 = 0x16
                        }

                        If ((Arg0 == 0x01))
                        {
                            Local0 = 0x17
                        }

                        INZ5 = Local0
                        Return (IRZ5) /* \_SB_.PCI0.CRSI.IRZ5 */
                    }

                    Method (SRSI, 1, Serialized)
                    {
                        CreateWordField (Arg0, 0x05, IRZ6)
                        Local0 = IRZ6 /* \_SB_.PCI0.SRSI.IRZ6 */
                        If ((IRZ6 == 0x10))
                        {
                            Local0 = 0x03
                        }

                        If ((IRZ6 == 0x11))
                        {
                            Local0 = 0x04
                        }

                        If ((IRZ6 == 0x12))
                        {
                            Local0 = 0x06
                        }

                        If ((IRZ6 == 0x13))
                        {
                            Local0 = 0x0C
                        }

                        If ((IRZ6 == 0x14))
                        {
                            Local0 = 0x08
                        }

                        If ((IRZ6 == 0x15))
                        {
                            Local0 = 0x0D
                        }

                        If ((IRZ6 == 0x16))
                        {
                            Local0 = 0x02
                        }

                        If ((IRZ6 == 0x17))
                        {
                            Local0 = 0x01
                        }

                        Return (Local0)
                    }

                    Device (LNK1)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x01)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (INTW)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            INTW = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFF) /* \_SB_.PCI0.BUFF */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (INTW))
                            }
                            Else
                            {
                                Return (CRSI (INTW))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                INTW = SRS (Arg0)
                            }
                            Else
                            {
                                INTW = SRSI (Arg0)
                            }
                        }
                    }

                    Device (LNK2)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x02)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (INTX)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            INTX = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFF) /* \_SB_.PCI0.BUFF */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (INTX))
                            }
                            Else
                            {
                                Return (CRSI (INTX))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                INTX = SRS (Arg0)
                            }
                            Else
                            {
                                INTX = SRSI (Arg0)
                            }
                        }
                    }

                    Device (LNK3)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x03)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (INTY)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            INTY = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFF) /* \_SB_.PCI0.BUFF */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (INTY))
                            }
                            Else
                            {
                                Return (CRSI (INTY))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                INTY = SRS (Arg0)
                            }
                            Else
                            {
                                INTY = SRSI (Arg0)
                            }
                        }
                    }

                    Device (LNK4)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x04)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (INTZ)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            INTZ = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFF) /* \_SB_.PCI0.BUFF */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (INTZ))
                            }
                            Else
                            {
                                Return (CRSI (INTZ))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                INTZ = SRS (Arg0)
                            }
                            Else
                            {
                                INTZ = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z003)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x05)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01B)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01B = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01B))
                            }
                            Else
                            {
                                Return (CRSI (Z01B))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01B = SRS (Arg0)
                            }
                            Else
                            {
                                Z01B = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z004)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x06)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01C)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01C = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01C))
                            }
                            Else
                            {
                                Return (CRSI (Z01C))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01C = SRS (Arg0)
                            }
                            Else
                            {
                                Z01C = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z005)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x07)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01D)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01D = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01D))
                            }
                            Else
                            {
                                Return (CRSI (Z01D))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01D = SRS (Arg0)
                            }
                            Else
                            {
                                Z01D = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z006)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x08)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01E)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01E = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01E))
                            }
                            Else
                            {
                                Return (CRSI (Z01E))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01E = SRS (Arg0)
                            }
                            Else
                            {
                                Z01E = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z007)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x09)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01F)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01F = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01F))
                            }
                            Else
                            {
                                Return (CRSI (Z01F))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01F = SRS (Arg0)
                            }
                            Else
                            {
                                Z01F = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z008)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x0A)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01G)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01G = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01G))
                            }
                            Else
                            {
                                Return (CRSI (Z01G))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01G = SRS (Arg0)
                            }
                            Else
                            {
                                Z01G = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z009)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x0B)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01H)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01H = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01H))
                            }
                            Else
                            {
                                Return (CRSI (Z01H))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01H = SRS (Arg0)
                            }
                            Else
                            {
                                Z01H = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00A)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x0C)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01I)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01I = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01I))
                            }
                            Else
                            {
                                Return (CRSI (Z01I))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01I = SRS (Arg0)
                            }
                            Else
                            {
                                Z01I = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00B)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x0D)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01J)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01J = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01J))
                            }
                            Else
                            {
                                Return (CRSI (Z01J))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01J = SRS (Arg0)
                            }
                            Else
                            {
                                Z01J = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00C)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x0E)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01K)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01K = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01K))
                            }
                            Else
                            {
                                Return (CRSI (Z01K))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01K = SRS (Arg0)
                            }
                            Else
                            {
                                Z01K = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00D)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x0F)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01L)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01L = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01L))
                            }
                            Else
                            {
                                Return (CRSI (Z01L))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01L = SRS (Arg0)
                            }
                            Else
                            {
                                Z01L = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00E)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x10)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01M)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01M = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01M))
                            }
                            Else
                            {
                                Return (CRSI (Z01M))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01M = SRS (Arg0)
                            }
                            Else
                            {
                                Z01M = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00F)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x11)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01N)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01N = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01N))
                            }
                            Else
                            {
                                Return (CRSI (Z01N))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01N = SRS (Arg0)
                            }
                            Else
                            {
                                Z01N = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00G)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x12)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01O)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01O = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01O))
                            }
                            Else
                            {
                                Return (CRSI (Z01O))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01O = SRS (Arg0)
                            }
                            Else
                            {
                                Z01O = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00H)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x13)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01P)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01P = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01P))
                            }
                            Else
                            {
                                Return (CRSI (Z01P))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01P = SRS (Arg0)
                            }
                            Else
                            {
                                Z01P = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00I)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x14)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01Q)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01Q = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01Q))
                            }
                            Else
                            {
                                Return (CRSI (Z01Q))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01Q = SRS (Arg0)
                            }
                            Else
                            {
                                Z01Q = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00J)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x15)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01R)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01R = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01R))
                            }
                            Else
                            {
                                Return (CRSI (Z01R))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01R = SRS (Arg0)
                            }
                            Else
                            {
                                Z01R = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00K)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x16)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01S)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01S = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01S))
                            }
                            Else
                            {
                                Return (CRSI (Z01S))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01S = SRS (Arg0)
                            }
                            Else
                            {
                                Z01S = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00L)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x17)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01T)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01T = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01T))
                            }
                            Else
                            {
                                Return (CRSI (Z01T))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01T = SRS (Arg0)
                            }
                            Else
                            {
                                Z01T = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00M)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x18)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01U)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01U = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01U))
                            }
                            Else
                            {
                                Return (CRSI (Z01U))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01U = SRS (Arg0)
                            }
                            Else
                            {
                                Z01U = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00N)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x19)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01V)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01V = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01V))
                            }
                            Else
                            {
                                Return (CRSI (Z01V))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01V = SRS (Arg0)
                            }
                            Else
                            {
                                Z01V = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00O)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x1A)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01W)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01W = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01W))
                            }
                            Else
                            {
                                Return (CRSI (Z01W))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01W = SRS (Arg0)
                            }
                            Else
                            {
                                Z01W = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00P)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x1B)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01X)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01X = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01X))
                            }
                            Else
                            {
                                Return (CRSI (Z01X))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01X = SRS (Arg0)
                            }
                            Else
                            {
                                Z01X = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00Q)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x1C)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01Y)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01Y = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01Y))
                            }
                            Else
                            {
                                Return (CRSI (Z01Y))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01Y = SRS (Arg0)
                            }
                            Else
                            {
                                Z01Y = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00R)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x1D)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01Z)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01Z = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01Z))
                            }
                            Else
                            {
                                Return (CRSI (Z01Z))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01Z = SRS (Arg0)
                            }
                            Else
                            {
                                Z01Z = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00S)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x1E)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z020)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z020 = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z020))
                            }
                            Else
                            {
                                Return (CRSI (Z020))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z020 = SRS (Arg0)
                            }
                            Else
                            {
                                Z020 = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00T)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x1F)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z021)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z021 = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z021))
                            }
                            Else
                            {
                                Return (CRSI (Z021))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z021 = SRS (Arg0)
                            }
                            Else
                            {
                                Z021 = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z00U)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x20)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (\Z022)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z022 = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z022))
                            }
                            Else
                            {
                                Return (CRSI (Z022))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z022 = SRS (Arg0)
                            }
                            Else
                            {
                                Z022 = SRSI (Arg0)
                            }
                        }
                    }

                    Device (LSMB)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x25)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (ISMB)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            ISMB = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (ISMB))
                            }
                            Else
                            {
                                Return (CRSI (ISMB))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                ISMB = SRS (Arg0)
                            }
                            Else
                            {
                                ISMB = SRSI (Arg0)
                            }
                        }
                    }

                    Device (LUS0)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x26)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (IUS0)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            IUS0 = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (IUS0))
                            }
                            Else
                            {
                                Return (CRSI (IUS0))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                IUS0 = SRS (Arg0)
                            }
                            Else
                            {
                                IUS0 = SRSI (Arg0)
                            }
                        }
                    }

                    Device (LUS2)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x27)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (IUS2)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            IUS2 = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (IUS2))
                            }
                            Else
                            {
                                Return (CRSI (IUS2))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                IUS2 = SRS (Arg0)
                            }
                            Else
                            {
                                IUS2 = SRSI (Arg0)
                            }
                        }
                    }

                    Device (LMAC)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x28)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (IMAC)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            IMAC = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (IMAC))
                            }
                            Else
                            {
                                Return (CRSI (IMAC))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                IMAC = SRS (Arg0)
                            }
                            Else
                            {
                                IMAC = SRSI (Arg0)
                            }
                        }
                    }

                    Device (LAZA)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x29)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (IAZA)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            IAZA = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (IAZA))
                            }
                            Else
                            {
                                Return (CRSI (IAZA))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                IAZA = SRS (Arg0)
                            }
                            Else
                            {
                                IAZA = SRSI (Arg0)
                            }
                        }
                    }

                    Device (LGPU)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x2A)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z01A)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z01A = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z01A))
                            }
                            Else
                            {
                                Return (CRSI (Z01A))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z01A = SRS (Arg0)
                            }
                            Else
                            {
                                Z01A = SRSI (Arg0)
                            }
                        }
                    }

                    Device (LPID)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x2B)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (IPID)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            IPID = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (IPID))
                            }
                            Else
                            {
                                Return (CRSI (IPID))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                IPID = SRS (Arg0)
                            }
                            Else
                            {
                                IPID = SRSI (Arg0)
                            }
                        }
                    }

                    Device (LSI0)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x2C)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (PSI0)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PSI0 = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (PSI0))
                            }
                            Else
                            {
                                Return (CRSI (PSI0))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                PSI0 = SRS (Arg0)
                            }
                            Else
                            {
                                PSI0 = SRSI (Arg0)
                            }
                        }
                    }

                    Device (LSI1)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x2D)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (PSI1)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PSI1 = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (PSI1))
                            }
                            Else
                            {
                                Return (CRSI (PSI1))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                PSI1 = SRS (Arg0)
                            }
                            Else
                            {
                                PSI1 = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z000)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x2E)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z018)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z018 = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z018))
                            }
                            Else
                            {
                                Return (CRSI (Z018))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z018 = SRS (Arg0)
                            }
                            Else
                            {
                                Z018 = SRSI (Arg0)
                            }
                        }
                    }

                    Device (Z001)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x2F)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (Z019)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Z019 = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (Z019))
                            }
                            Else
                            {
                                Return (CRSI (Z019))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Z019 = SRS (Arg0)
                            }
                            Else
                            {
                                Z019 = SRSI (Arg0)
                            }
                        }
                    }

                    Device (LPMU)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x30)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (INTS)
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x09)
                            }
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            INTS = 0x00
                        }

                        Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (BUFA) /* \_SB_.PCI0.BUFA */
                            }
                            Else
                            {
                                Return (BUFI) /* \_SB_.PCI0.BUFI */
                            }
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            If (!\GPIC)
                            {
                                Return (CRS (INTS))
                            }
                            Else
                            {
                                Return (CRSI (INTS))
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            If (!\GPIC)
                            {
                                INTS = SRS (Arg0)
                            }
                            Else
                            {
                                INTS = SRSI (Arg0)
                            }
                        }
                    }
                }
            }

            Device (SBUS)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                OperationRegion (SMBE, PCI_Config, 0x04, 0x02)
                Field (SMBE, AnyAcc, NoLock, Preserve)
                {
                    IOSE,   1, 
                    MMSE,   1
                }

                OperationRegion (SBA0, PCI_Config, 0x20, 0x04)
                Field (SBA0, AnyAcc, NoLock, Preserve)
                {
                    SB20,   16
                }

                OperationRegion (SBA1, PCI_Config, 0x24, 0x04)
                Field (SBA1, AnyAcc, NoLock, Preserve)
                {
                    SB24,   16
                }

                OperationRegion (SMBP, PCI_Config, 0x40, 0xC0)
                Field (SMBP, DWordAcc, NoLock, Preserve)
                {
                        ,   2, 
                    I2CE,   1
                }

                OperationRegion (SMCF, PCI_Config, 0x48, 0x04)
                Field (SMCF, AnyAcc, NoLock, Preserve)
                {
                    SMPM,   4
                }

                OperationRegion (P60, PCI_Config, 0x60, 0x02)
                Field (P60, AnyAcc, NoLock, Preserve)
                {
                    PMBR,   16
                }

                OperationRegion (P64, PCI_Config, 0x64, 0x02)
                Field (P64, AnyAcc, NoLock, Preserve)
                {
                    NVSB,   16
                }

                OperationRegion (P68, PCI_Config, 0x68, 0x02)
                Field (P68, AnyAcc, NoLock, Preserve)
                {
                    ANLG,   16
                }

                OperationRegion (SM6C, PCI_Config, 0x6C, 0x04)
                Field (SM6C, AnyAcc, NoLock, Preserve)
                {
                    WDTA,   32
                }

                OperationRegion (SM74, PCI_Config, 0x74, 0x04)
                Field (SM74, AnyAcc, NoLock, Preserve)
                {
                    SMUB,   32
                }

                OperationRegion (SM80, PCI_Config, 0x80, 0x04)
                Field (SM80, AnyAcc, NoLock, Preserve)
                {
                    NVAM,   32
                }

                OperationRegion (SME0, PCI_Config, 0xE0, 0x04)
                Field (SME0, AnyAcc, NoLock, Preserve)
                {
                    SE0R,   23, 
                    RSUS,   1
                }

                OperationRegion (SME4, PCI_Config, 0xE4, 0x04)
                Field (SME4, AnyAcc, NoLock, Preserve)
                {
                    SE4R,   4, 
                    RP1D,   1, 
                    RP2D,   1, 
                    RP3D,   1, 
                    RP4D,   1, 
                    RP5D,   1, 
                    RP6D,   1, 
                    RP7D,   1, 
                        ,   16, 
                    RMEN,   1
                }

                OperationRegion (SME8, PCI_Config, 0xE8, 0x04)
                Field (SME8, AnyAcc, NoLock, Preserve)
                {
                    SE8R,   13, 
                    GPUD,   1
                }

                OperationRegion (SMBI, SystemIO, 0x0B00, 0x10)
                Field (SMBI, ByteAcc, NoLock, Preserve)
                {
                    HSTS,   8, 
                    Offset (0x02), 
                    HCON,   8, 
                    HCOM,   8, 
                    TXSA,   8, 
                    DAT0,   8, 
                    DAT1,   8, 
                    HBDR,   8, 
                    PECR,   8, 
                    RXSA,   8, 
                    SDAT,   16
                }

                Method (ENAB, 0, NotSerialized)
                {
                    IOSE = 0x01
                }

                Method (SWRB, 3, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0x00)
                    }

                    I2CE = 0x00
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    DAT0 = Arg2
                    HCON = 0x48
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (SRDB, 2, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0xFFFF)
                    }

                    I2CE = 0x00
                    HSTS = 0xBF
                    TXSA = (Arg0 | 0x01)
                    HCOM = Arg1
                    HCON = 0x48
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                    }

                    Return (0xFFFF)
                }

                Method (STRT, 0, Serialized)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        If ((HSTS & 0x40))
                        {
                            Local0--
                            Sleep (0x01)
                            If ((Local0 == 0x00))
                            {
                                Return (0x01)
                            }
                        }
                        Else
                        {
                            Local0 = 0x00
                        }
                    }

                    Local0 = 0x0FA0
                    While (Local0)
                    {
                        If ((HSTS & 0x01))
                        {
                            Local0--
                            Stall (0x32)
                            If ((Local0 == 0x00))
                            {
                                KILL ()
                            }
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Return (0x01)
                }

                Method (COMP, 0, Serialized)
                {
                    Local0 = 0x0FA0
                    While (Local0)
                    {
                        If ((HSTS & 0x02))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0--
                            Stall (0x32)
                            If ((Local0 == 0x00))
                            {
                                KILL ()
                            }
                        }
                    }

                    Return (0x00)
                }

                Method (KILL, 0, Serialized)
                {
                    HCON |= 0x02
                    HSTS |= 0xFF
                }

                Device (BUS0)
                {
                    Name (_CID, "smbus")  // _CID: Compatible ID
                    Name (_ADR, 0x00)  // _ADR: Address
                }

                Device (BUS1)
                {
                    Name (_CID, "smbus")  // _CID: Compatible ID
                    Name (_ADR, 0x01)  // _ADR: Address
                    Device (MKY0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Name (_CID, "mikey")  // _CID: Compatible ID
                        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                        {
                            Local0 = Package (0x07)
                                {
                                    "refnum", 
                                    0x00, 
                                    "address", 
                                    0x39, 
                                    "device-id", 
                                    0x0CCB, 
                                    Buffer (0x01)
                                    {
                                         0x00                                             // .
                                    }
                                }
                            DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))
                            Return (Local0)
                        }

                        Method (H1EN, 1, Serialized)
                        {
                            If ((Arg0 <= 0x01))
                            {
                                GP38 = Arg0
                            }
                        }

                        Method (H1IL, 0, Serialized)
                        {
                            Return (GP05) /* \GP05 */
                        }

                        Method (H1IP, 1, Serialized)
                        {
                            Local0 = GI05 /* \GI05 */
                        }

                        Name (H1IN, 0x24)
                        Scope (\_GPE)
                        {
                            Method (_L24, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                            {
                                Notify (\_SB.PCI0.SBUS.BUS1.MKY0, 0x80) // Status Change
                            }
                        }

                        Method (P1IL, 0, Serialized)
                        {
                            Local0 = ((GI17 & 0x20) >> 0x05)
                            Return (Local0)
                        }

                        Method (P1IP, 1, Serialized)
                        {
                            If ((Arg0 <= 0x01))
                            {
                                Local0 = GI17 /* \GI17 */
                                Local0 &= 0xFC
                                GI17 = (Arg0 | Local0)
                            }
                        }

                        Name (P1IN, 0x30)
                        Scope (\_GPE)
                        {
                            Method (_L30, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                            {
                                GI17 ^= 0x01
                                Notify (\_SB.PCI0.SBUS.BUS1.MKY0, 0x81) // Information Change
                            }
                        }
                    }
                }
            }

            Device (TRIM)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
            }

            Device (NVPM)
            {
                Name (_ADR, 0x00030005)  // _ADR: Address
            }

            Device (OHC1)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                OperationRegion (U1CS, PCI_Config, 0x48, 0x04)
                Field (U1CS, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    U1EN,   1
                }

                Device (HUB1)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Name (_EJD, "\\_SB.PCI0.RP04.ARPT")  // _EJD: Ejection Dependent Device
                    }

                    Device (PRT3)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                    }

                    Device (PRT4)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                    }

                    Device (PRT5)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x03
                })
                Scope (\_GPE)
                {
                    Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                    {
                        Notify (\_SB.PCI0.OHC1, 0x02) // Device Wake
                        Notify (\_SB.PWRB, 0x02) // Device Wake
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x03)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    Local0 = Package (0x03)
                        {
                            "AAPL,device-internal", 
                            0x60, 
                            Buffer (0x01)
                            {
                                 0x00                                             // .
                            }
                        }
                    DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))
                    Return (Local0)
                }
            }

            Device (EHC1)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                OperationRegion (U1CS, PCI_Config, 0x84, 0x04)
                Field (U1CS, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    U1EN,   1
                }

                Device (HUB1)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Name (_EJD, "\\_SB.PCI0.RP04.ARPT")  // _EJD: Ejection Dependent Device
                    }

                    Device (PRT3)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                    }

                    Device (PRT4)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                    }

                    Device (PRT5)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x05, 
                    0x03
                })
                Scope (\_GPE)
                {
                    Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                    {
                        Notify (\_SB.PCI0.EHC1, 0x02) // Device Wake
                        Notify (\_SB.PWRB, 0x02) // Device Wake
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x03)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    Local0 = Package (0x09)
                        {
                            "AAPL,current-available", 
                            0x04B0, 
                            "AAPL,current-extra", 
                            0x02BC, 
                            "AAPL,current-in-sleep", 
                            0x03E8, 
                            "AAPL,device-internal", 
                            0x10, 
                            Buffer (0x01)
                            {
                                 0x00                                             // .
                            }
                        }
                    DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))
                    Return (Local0)
                }
            }

            Device (OHC2)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                OperationRegion (U1CS, PCI_Config, 0x48, 0x04)
                Field (U1CS, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    U1EN,   1
                }

                Device (HUB1)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }

                    Device (PRT3)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                    }

                    Device (PRT4)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                    }

                    Device (PRT5)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                        Method (SRST, 1, Serialized)
                        {
                            If ((Arg0 <= 0x01))
                            {
                                GP18 = Arg0
                            }
                        }
                    }

                    Device (PRT6)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                    }

                    Device (PRT7)
                    {
                        Name (_ADR, 0x07)  // _ADR: Address
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x18, 
                    0x03
                })
                Scope (\_GPE)
                {
                    Method (_L18, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                    {
                        Notify (\_SB.PCI0.OHC2, 0x02) // Device Wake
                        Notify (\_SB.PWRB, 0x02) // Device Wake
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x03)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    Local0 = Package (0x03)
                        {
                            "AAPL,device-internal", 
                            0x02, 
                            Buffer (0x01)
                            {
                                 0x00                                             // .
                            }
                        }
                    DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))
                    Return (Local0)
                }
            }

            Device (EHC2)
            {
                Name (_ADR, 0x00060001)  // _ADR: Address
                OperationRegion (U1CS, PCI_Config, 0x84, 0x04)
                Field (U1CS, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    U1EN,   1
                }

                Device (HUB1)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }

                    Device (PRT3)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                    }

                    Device (PRT4)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                    }

                    Device (PRT5)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                        {
                            Return (OSDW ())
                        }

                        Method (SRST, 1, Serialized)
                        {
                            If ((Arg0 <= 0x01))
                            {
                                GP18 = Arg0
                            }
                        }
                    }

                    Device (PRT6)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                    }

                    Device (PRT7)
                    {
                        Name (_ADR, 0x07)  // _ADR: Address
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x17, 
                    0x03
                })
                Scope (\_GPE)
                {
                    Method (_L17, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                    {
                        Notify (\_SB.PCI0.EHC2, 0x02) // Device Wake
                        Notify (\_SB.PWRB, 0x02) // Device Wake
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x03)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    Local0 = Package (0x09)
                        {
                            "AAPL,current-available", 
                            0x04B0, 
                            "AAPL,current-extra", 
                            0x02BC, 
                            "AAPL,current-in-sleep", 
                            0x03E8, 
                            "AAPL,device-internal", 
                            0x20, 
                            Buffer (0x01)
                            {
                                 0x00                                             // .
                            }
                        }
                    DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))
                    Return (Local0)
                }
            }

            Device (HDEF)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
            }

            Device (GIGE)
            {
                Name (_ADR, 0x000A0000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0B, 
                    0x05
                })
                Scope (\_GPE)
                {
                    Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                    {
                        Notify (\_SB.PCI0.GIGE, 0x02) // Device Wake
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    Debug = "Checking CREV > 0xB2"
                    If ((CREV () > 0xB2))
                    {
                        Debug = "CREV is > 0xB2"
                        If (Arg0)
                        {
                            Debug = "Writing 1 to RSUS"
                            \_SB.PCI0.SBUS.RSUS = 0x01
                        }
                        Else
                        {
                            Debug = "Writing 0 to RSUS"
                            \_SB.PCI0.SBUS.RSUS = 0x00
                        }
                    }
                }

                OperationRegion (ACTL, SystemIO, 0x0800, 0x0200)
                Field (ACTL, ByteAcc, NoLock, Preserve)
                {
                    BANK,   32, 
                    Offset (0xB4), 
                        ,   23, 
                    EPWD,   1, 
                    Offset (0xC0), 
                        ,   9, 
                    DPWR,   1
                }

                Method (PWRD, 1, Serialized)
                {
                    If (OSDW ())
                    {
                        If (Arg0)
                        {
                            Local0 = BANK /* \_SB_.PCI0.GIGE.BANK */
                            BANK = 0x01
                            DPWR = 0x01
                            EPWD = 0x01
                            BANK = Local0
                        }
                        Else
                        {
                            Local0 = BANK /* \_SB_.PCI0.GIGE.BANK */
                            BANK = 0x01
                            EPWD = 0x00
                            DPWR = 0x00
                            BANK = Local0
                        }
                    }
                }
            }

            Device (SATA)
            {
                Name (_ADR, 0x000B0000)  // _ADR: Address
                Name (PRIT, 0x00)
                Name (SECT, 0x00)
                Name (PSIT, 0x00)
                Name (SSIT, 0x00)
                Name (SYNC, 0x00)
                Name (SDT0, 0x00)
                Name (SDT1, 0x00)
                Name (STD2, 0x00)
                Name (SDT3, 0x00)
                Name (ICR0, 0x00)
                Name (ICR1, 0x00)
                Name (ICR2, 0x00)
                Name (ICR3, 0x00)
                Name (ICR4, 0x00)
                Name (ICR5, 0x00)
                Name (MAPV, 0x00)
            }

            Device (IXVE)
            {
                Name (_ADR, 0x00100000)  // _ADR: Address
                OperationRegion (A1E0, PCI_Config, 0x19, 0x01)
                Field (A1E0, ByteAcc, NoLock, Preserve)
                {
                    SECB,   8
                }

                Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                {
                    Return (SECB) /* \_SB_.PCI0.IXVE.SECB */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Device (IGPU)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (KFFS, SystemMemory, 0xFFFFC048, 0x1000)
                    Field (KFFS, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x18), 
                        KYSZ,   24, 
                        Offset (0x1C), 
                        KGLB,   32544
                    }

                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                        Name (TMP0, 0x00)
                        If ((Arg0 == ToUUID ("998669a6-8be9-49fb-bddb-51a1efe19c3d") /* Unknown UUID */))
                        {
                            If ((ToInteger (Arg1) == 0x0101))
                            {
                                _T_0 = ToInteger (Arg2)
                                If ((_T_0 == 0x00))
                                {
                                    Return (Buffer (0x04)
                                    {
                                         0xC1, 0x00, 0x00, 0x00                           // ....
                                    })
                                }
                                ElseIf ((_T_0 == 0x06))
                                {
                                    CreateWordField (Arg3, 0x02, UARG)
                                    If ((UARG != 0x484B))
                                    {
                                        Return (0x80000002)
                                    }

                                    CreateField (Arg3, 0x0C, 0x04, INST)
                                    TMP0 = INST /* \_SB_.PCI0.IXVE.IGPU._DSM.INST */
                                    If ((TMP0 != 0x00))
                                    {
                                        Return (0x80000002)
                                    }

                                    CreateField (Arg3, 0x00, 0x0C, KPG1)
                                    TMP0 = KPG1 /* \_SB_.PCI0.IXVE.IGPU._DSM.KPG1 */
                                    If ((TMP0 != 0x00))
                                    {
                                        Return (0x80000002)
                                    }

                                    Local0 = (KYSZ - 0x04)
                                    Name (KDT1, Buffer (Local0){})
                                    Mid (KGLB, 0x00, Local0, KDT1) /* \_SB_.PCI0.IXVE.IGPU._DSM.KDT1 */
                                    Return (KDT1) /* \_SB_.PCI0.IXVE.IGPU._DSM.KDT1 */
                                }
                                ElseIf ((_T_0 == 0x07))
                                {
                                    CreateField (Arg3, 0x00, 0x0C, KPG2)
                                    TMP0 = KPG2 /* \_SB_.PCI0.IXVE.IGPU._DSM.KPG2 */
                                    If ((TMP0 != 0x00))
                                    {
                                        Return (0x80000002)
                                    }

                                    Name (GHDR, Buffer (0x04)
                                    {
                                         0x01, 0x00, 0x4B, 0x48                           // ..KH
                                    })
                                    Local0 = (KYSZ - 0x04)
                                    Name (KDT2, Buffer (Local0){})
                                    Mid (KGLB, 0x00, Local0, KDT2) /* \_SB_.PCI0.IXVE.IGPU._DSM.KDT2 */
                                    Concatenate (GHDR, KDT2, Local1)
                                    Return (Local1)
                                }
                            }
                        }

                        Return (0x80000002)
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (Package (0x01)
                    {
                        Package (0x04)
                        {
                            0xFFFF, 
                            0x00, 
                            \_SB.PCI0.LGPU, 
                            0x00
                        }
                    })
                }
            }

            Scope (\_SB.PCI0)
            {
                Device (CMC2)
                {
                    Name (_ADR, 0x00010004)  // _ADR: Address
                    OperationRegion (D1F4, SystemMemory, 0xF000C000, 0xFF)
                    Field (D1F4, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x88), 
                        TOLM,   8
                    }
                }

                Device (P4MI)
                {
                    Name (_ADR, 0x00030003)  // _ADR: Address
                    OperationRegion (P4MR, PCI_Config, 0x00, 0xFF)
                    Field (P4MR, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x44), 
                        BPLM,   8, 
                            ,   1, 
                        BPLN,   8, 
                            ,   9, 
                        BPLP,   2, 
                        Offset (0x74), 
                            ,   18, 
                        VCO2,   1, 
                            ,   8, 
                        ASYC,   1, 
                        Offset (0x78), 
                        CPLM,   8, 
                        CPLN,   8, 
                        Offset (0xC8), 
                        MPLM,   4, 
                        MPLN,   4
                    }
                }
            }

            Method (MC1E, 0, NotSerialized)
            {
                Local0 = (0xF0000000 + 0xB000)
                Return (Local0)
            }

            Method (MC2E, 0, NotSerialized)
            {
                Local0 = (0xF0000000 + 0xC000)
                Return (Local0)
            }

            Method (MEXT, 0, NotSerialized)
            {
                Local0 = (0xF0000000 + 0xE100)
                Return (Local0)
            }

            OperationRegion (OA8D, SystemMemory, MC1E (), 0xFF)
            Field (OA8D, ByteAcc, NoLock, Preserve)
            {
                Offset (0x50), 
                NIST,   10, 
                    ,   2, 
                NSB1,   4, 
                NSB2,   4, 
                Offset (0x8C), 
                TRFC,   10, 
                Offset (0x8F), 
                TRCD,   4, 
                WRRC,   4, 
                Offset (0x91), 
                TR2P,   4, 
                Offset (0x9C), 
                Offset (0x9D), 
                TRP,    4, 
                Offset (0xA0), 
                Offset (0xA2), 
                TRC,    6, 
                Offset (0xA8), 
                TROE,   1, 
                    ,   3, 
                TROI,   3, 
                Offset (0xF4), 
                BWCP,   7, 
                Offset (0xF5), 
                BWIS,   7, 
                Offset (0xF6), 
                BWWB,   7, 
                Offset (0xF7), 
                BWHP,   7, 
                HPCR,   1
            }

            OperationRegion (O8ER, SystemMemory, MC2E (), 0xFF)
            Field (O8ER, ByteAcc, NoLock, Preserve)
            {
                Offset (0x70), 
                CDP0,   1, 
                Offset (0x71), 
                CDS0,   8, 
                    ,   4, 
                CDC0,   4, 
                    ,   5, 
                CDB0,   2, 
                Offset (0x74), 
                CDP1,   1, 
                Offset (0x75), 
                CDS1,   8, 
                    ,   4, 
                CDC1,   4, 
                    ,   5, 
                CDB1,   2, 
                Offset (0x78), 
                CDP2,   1, 
                Offset (0x79), 
                CDS2,   8, 
                    ,   4, 
                CDC2,   4, 
                    ,   5, 
                CDB2,   2, 
                Offset (0x7C), 
                CDP3,   1, 
                Offset (0x7D), 
                CDS3,   8, 
                    ,   4, 
                CDC3,   4, 
                    ,   5, 
                CDB3,   2, 
                Offset (0x80), 
                INTL,   2, 
                RCBD,   2, 
                Offset (0x81), 
                PCIH,   5, 
                Offset (0x88), 
                TOM1,   8, 
                TOM2,   9, 
                Offset (0x90), 
                P0P0,   1, 
                P1P0,   1, 
                P0N0,   1, 
                P1N0,   1, 
                PCR0,   1, 
                Offset (0x91), 
                PCB0,   9, 
                Offset (0x93), 
                PCS0,   8, 
                P0P1,   1, 
                P1P1,   1, 
                P0N1,   1, 
                P1N1,   1, 
                PCR1,   1, 
                Offset (0x95), 
                PCB1,   9, 
                Offset (0x97), 
                PCS1,   8, 
                P0P2,   1, 
                P1P2,   1, 
                P0N2,   1, 
                P1N2,   1, 
                PCR2,   1, 
                Offset (0x99), 
                PCB2,   9, 
                Offset (0x9B), 
                PCS2,   8, 
                P0P3,   1, 
                P1P3,   1, 
                P0N3,   1, 
                P1N3,   1, 
                PCR3,   1, 
                Offset (0x9D), 
                PCB3,   9, 
                Offset (0x9F), 
                PCS3,   8, 
                P0P4,   1, 
                P1P4,   1, 
                P0N4,   1, 
                P1N4,   1, 
                PCR4,   1, 
                Offset (0xA1), 
                PCB4,   9, 
                Offset (0xA3), 
                PCS4,   8, 
                Offset (0xC4), 
                REFP,   16, 
                REFB,   4
            }

            OperationRegion (OEER, SystemMemory, MEXT (), 0xFF)
            Field (OEER, ByteAcc, NoLock, Preserve)
            {
                Offset (0xAA), 
                CKDY,   16
            }

            Method (CIMP, 0, NotSerialized)
            {
                Name (ERR0, Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                           // ....
                })
                Name (BU2A, Buffer (0x04)
                {
                     0x00                                             // .
                })
                CreateField (BU2A, 0x10, 0x04, BF03)
                CreateField (BU2A, 0x14, 0x04, BF04)
                Name (BU2B, Buffer (0x04)
                {
                     0x00                                             // .
                })
                CreateField (BU2B, 0x00, 0x0B, BF07)
                CreateField (BU2B, 0x0B, 0x0E, BF08)
                Name (BU2C, Buffer (0x0A)
                {
                     0x00                                             // .
                })
                CreateField (BU2C, 0x00, 0x03, BF0A)
                CreateField (BU2C, 0x03, 0x04, BF0B)
                CreateField (BU2C, 0x07, 0x04, BF0C)
                CreateField (BU2C, 0x0B, 0x04, BF0D)
                CreateField (BU2C, 0x0F, 0x04, BF0E)
                CreateField (BU2C, 0x13, 0x26, BF0F)
                Name (BU2D, Buffer (0x0A)
                {
                     0x00                                             // .
                })
                CreateField (BU2D, 0x00, 0x10, BF1A)
                CreateField (BU2D, 0x10, 0x0B, TAVN)
                CreateField (BU2D, 0x1B, 0x0A, BASL)
                CreateField (BU2D, 0x25, 0x0B, LBWF)
                CreateField (BU2D, 0x30, 0x0C, ATBW)
                CreateField (BU2D, 0x3C, 0x0A, CLTF)
                CreateField (BU2D, 0x46, 0x0A, PMPF)
                Name (BNKN, 0x00)
                Name (BNKX, 0x00)
                Name (COLN, 0x00)
                Name (COLX, 0x00)
                BU2A [0x00] = 0x10
                BU2A [0x01] = 0x08
                BU2A [0x02] = 0x12
                BU2A [0x03] = 0xAA
                BF04 = 0x02
                Name (M2CL, 0x00)
                M2CL = GM2C ()
                BF08 = (M2CL * 0x02)
                BF07 = BASM (M2CL)
                Local2 = BU2B /* \_SB_.PCI0.CIMP.BU2B */
                If ((^RCBD == 0x00))
                {
                    BF03 = One
                    BF0F = (0x08000000 * ^TOM1) /* \_SB_.PCI0.TOM1 */
                    BF0A = 0x01
                    If (^INTL)
                    {
                        BF0A = 0x02
                    }

                    If (^CDP0)
                    {
                        BF0D = ^CDC0 /* \_SB_.PCI0.CDC0 */
                        BF0B = ^CDB0 /* \_SB_.PCI0.CDB0 */
                    }
                    ElseIf (^CDP1)
                    {
                        BF0D = ^CDC1 /* \_SB_.PCI0.CDC1 */
                        BF0B = ^CDB1 /* \_SB_.PCI0.CDB1 */
                    }
                    ElseIf (^CDP2)
                    {
                        BF0D = ^CDC2 /* \_SB_.PCI0.CDC2 */
                        BF0B = ^CDB2 /* \_SB_.PCI0.CDB2 */
                    }
                    ElseIf (^CDP3)
                    {
                        BF0D = ^CDC3 /* \_SB_.PCI0.CDC3 */
                        BF0B = ^CDB3 /* \_SB_.PCI0.CDB3 */
                    }

                    BF0E = BF0D /* \_SB_.PCI0.CIMP.BF0D */
                    BF0C = BF0B /* \_SB_.PCI0.CIMP.BF0B */
                    Local1 = Local2
                    Concatenate (Local1, BU2C, Local2)
                    If (^PCIH)
                    {
                        BF03 = 0x02
                        Local1 = (^TOM2 - 0x20)
                        BF0F = (0x08000000 * Local1)
                        Local1 = Local2
                        Concatenate (Local1, BU2C, Local2)
                    }
                }
                ElseIf ((^RCBD == 0x02))
                {
                    Name (NDRE, 0x00)
                    BF03 = Zero
                    Local6 = Zero
                    While (One)
                    {
                        If ((Local6 == 0x05))
                        {
                            Break
                        }

                        If ((MP0P (Local6) || MP1P (Local6)))
                        {
                            BF0F = (MCRS (Local6) * 0x08000000)
                            BF0A = 0x01
                            If (MPCR (Local6))
                            {
                                If (MP0P (Local6))
                                {
                                    If (MP1P (Local6))
                                    {
                                        BF0A = 0x02
                                    }
                                }
                            }

                            BNKN = 0x03
                            BNKX = 0x02
                            COLN = 0x0C
                            COLX = 0x08
                            If (MP0P (Local6))
                            {
                                Local5 = MP0N (Local6)
                            }
                            ElseIf (MP1P (Local6))
                            {
                                Local5 = MP1N (Local6)
                            }

                            If ((BNKN > MCDB (Local5)))
                            {
                                BNKN = MCDB (Local5)
                            }

                            If ((BNKX < MCDB (Local5)))
                            {
                                BNKX = MCDB (Local5)
                            }

                            If ((COLN > MCDC (Local5)))
                            {
                                COLN = MCDC (Local5)
                            }

                            If ((COLX < MCDC (Local5)))
                            {
                                COLX = MCDC (Local5)
                            }

                            BF0B = BNKN /* \_SB_.PCI0.CIMP.BNKN */
                            BF0C = BNKX /* \_SB_.PCI0.CIMP.BNKX */
                            BF0D = COLN /* \_SB_.PCI0.CIMP.COLN */
                            BF0E = COLX /* \_SB_.PCI0.CIMP.COLX */
                            NDRE++
                            Local1 = Local2
                            Concatenate (Local1, BU2C, Local2)
                        }

                        Local6++
                    }

                    BF03 = NDRE /* \_SB_.PCI0.CIMP.NDRE */
                }
                Else
                {
                    Local5 = Zero
                }

                BASL = BASM (M2CL)
                TAVN = BASL /* \_SB_.PCI0.CIMP.BASL */
                PMPF = PMPM (M2CL)
                CLTF = CLTM (M2CL)
                ATBW = ATBM (M2CL)
                LBWF = 0x0FFF
                BF1A = 0x3E
                Local1 = Local2
                Concatenate (Local1, BU2D, Local2)
                BF1A = 0xFFFF
                ATBW = ATBM (M2CL)
                LBWF = 0x0FFF
                Local1 = Local2
                Concatenate (Local1, BU2D, Local2)
                Concatenate (ERR0, BU2A, Local1)
                Concatenate (Local1, Local2, Local0)
                Return (Local0)
            }

            Method (MP0P, 1, NotSerialized)
            {
                If ((Arg0 == 0x00))
                {
                    Return (^P0P0) /* \_SB_.PCI0.P0P0 */
                }

                If ((Arg0 == 0x01))
                {
                    Return (^P0P1) /* \_SB_.PCI0.P0P1 */
                }

                If ((Arg0 == 0x02))
                {
                    Return (^P0P2) /* \_SB_.PCI0.P0P2 */
                }

                If ((Arg0 == 0x03))
                {
                    Return (^P0P3) /* \_SB_.PCI0.P0P3 */
                }

                If ((Arg0 == 0x04))
                {
                    Return (^P0P4) /* \_SB_.PCI0.P0P4 */
                }

                Return (Zero)
            }

            Method (MP1P, 1, NotSerialized)
            {
                If ((Arg0 == 0x00))
                {
                    Return (^P1P0) /* \_SB_.PCI0.P1P0 */
                }

                If ((Arg0 == 0x01))
                {
                    Return (^P1P1) /* \_SB_.PCI0.P1P1 */
                }

                If ((Arg0 == 0x02))
                {
                    Return (^P1P2) /* \_SB_.PCI0.P1P2 */
                }

                If ((Arg0 == 0x03))
                {
                    Return (^P1P3) /* \_SB_.PCI0.P1P3 */
                }

                If ((Arg0 == 0x04))
                {
                    Return (^P1P4) /* \_SB_.PCI0.P1P4 */
                }

                Return (Zero)
            }

            Method (MPCR, 1, NotSerialized)
            {
                If ((Arg0 == 0x00))
                {
                    Return (^PCR0) /* \_SB_.PCI0.PCR0 */
                }

                If ((Arg0 == 0x01))
                {
                    Return (^PCR1) /* \_SB_.PCI0.PCR1 */
                }

                If ((Arg0 == 0x02))
                {
                    Return (^PCR2) /* \_SB_.PCI0.PCR2 */
                }

                If ((Arg0 == 0x03))
                {
                    Return (^PCR3) /* \_SB_.PCI0.PCR3 */
                }

                If ((Arg0 == 0x04))
                {
                    Return (^PCR4) /* \_SB_.PCI0.PCR4 */
                }

                Return (Zero)
            }

            Method (MP0N, 1, NotSerialized)
            {
                If ((Arg0 == 0x00))
                {
                    Return (^P0N0) /* \_SB_.PCI0.P0N0 */
                }

                If ((Arg0 == 0x01))
                {
                    Return (^P0N1) /* \_SB_.PCI0.P0N1 */
                }

                If ((Arg0 == 0x02))
                {
                    Return (^P0N2) /* \_SB_.PCI0.P0N2 */
                }

                If ((Arg0 == 0x03))
                {
                    Return (^P0N3) /* \_SB_.PCI0.P0N3 */
                }

                If ((Arg0 == 0x04))
                {
                    Return (^P0N4) /* \_SB_.PCI0.P0N4 */
                }

                Return (Zero)
            }

            Method (MP1N, 1, NotSerialized)
            {
                If ((Arg0 == 0x00))
                {
                    Return (^P1N0) /* \_SB_.PCI0.P1N0 */
                }

                If ((Arg0 == 0x01))
                {
                    Return (^P1N1) /* \_SB_.PCI0.P1N1 */
                }

                If ((Arg0 == 0x02))
                {
                    Return (^P1N2) /* \_SB_.PCI0.P1N2 */
                }

                If ((Arg0 == 0x03))
                {
                    Return (^P1N3) /* \_SB_.PCI0.P1N3 */
                }

                If ((Arg0 == 0x04))
                {
                    Return (^P1N4) /* \_SB_.PCI0.P1N4 */
                }

                Return (Zero)
            }

            Method (MCRB, 1, NotSerialized)
            {
                If ((Arg0 == 0x00))
                {
                    Return (^PCB0) /* \_SB_.PCI0.PCB0 */
                }

                If ((Arg0 == 0x01))
                {
                    Return (^PCB1) /* \_SB_.PCI0.PCB1 */
                }

                If ((Arg0 == 0x02))
                {
                    Return (^PCB2) /* \_SB_.PCI0.PCB2 */
                }

                If ((Arg0 == 0x03))
                {
                    Return (^PCB3) /* \_SB_.PCI0.PCB3 */
                }

                If ((Arg0 == 0x04))
                {
                    Return (^PCB4) /* \_SB_.PCI0.PCB4 */
                }

                Return (Zero)
            }

            Method (MCRS, 1, NotSerialized)
            {
                If ((Arg0 == 0x00))
                {
                    Return (^PCS0) /* \_SB_.PCI0.PCS0 */
                }

                If ((Arg0 == 0x01))
                {
                    Return (^PCS1) /* \_SB_.PCI0.PCS1 */
                }

                If ((Arg0 == 0x02))
                {
                    Return (^PCS2) /* \_SB_.PCI0.PCS2 */
                }

                If ((Arg0 == 0x03))
                {
                    Return (^PCS3) /* \_SB_.PCI0.PCS3 */
                }

                If ((Arg0 == 0x04))
                {
                    Return (^PCS4) /* \_SB_.PCI0.PCS4 */
                }

                Return (Zero)
            }

            Method (MCDB, 1, NotSerialized)
            {
                If ((Arg0 == 0x00))
                {
                    Return (^CDB0) /* \_SB_.PCI0.CDB0 */
                }

                If ((Arg0 == 0x01))
                {
                    Return (^CDB1) /* \_SB_.PCI0.CDB1 */
                }

                If ((Arg0 == 0x02))
                {
                    Return (^CDB2) /* \_SB_.PCI0.CDB2 */
                }

                If ((Arg0 == 0x03))
                {
                    Return (^CDB3) /* \_SB_.PCI0.CDB3 */
                }

                Return (Zero)
            }

            Method (MCDC, 1, NotSerialized)
            {
                If ((Arg0 == 0x00))
                {
                    Return (^CDC0) /* \_SB_.PCI0.CDC0 */
                }

                If ((Arg0 == 0x01))
                {
                    Return (^CDC1) /* \_SB_.PCI0.CDC1 */
                }

                If ((Arg0 == 0x02))
                {
                    Return (^CDC2) /* \_SB_.PCI0.CDC2 */
                }

                If ((Arg0 == 0x03))
                {
                    Return (^CDC3) /* \_SB_.PCI0.CDC3 */
                }

                Return (Zero)
            }

            Method (NOCH, 0, NotSerialized)
            {
                If ((^INTL == 0x03))
                {
                    Local6 = 0x02
                }
                ElseIf ((^INTL == 0x00))
                {
                    Local6 = 0x01
                }
                ElseIf ((^INTL == 0x02))
                {
                    Local0 = (^CDP0 * ^CDS0) /* \_SB_.PCI0.CDS0 */
                    Local1 = (^CDP1 * ^CDS1) /* \_SB_.PCI0.CDS1 */
                    Local2 = (^CDP2 * ^CDS2) /* \_SB_.PCI0.CDS2 */
                    Local3 = (^CDP3 * ^CDS3) /* \_SB_.PCI0.CDS3 */
                    Local0 += Local1
                    Local2 += Local3
                    If ((Local0 == Local2))
                    {
                        Local6 = 0x02
                    }
                    Else
                    {
                        Local6 = 0x01
                    }
                }

                Return (Local6)
            }

            Method (ATBM, 1, NotSerialized)
            {
                Local0 = (Arg0 * 0x02)
                Local0 *= NOCH ()
                Local0 *= 0x08
                Local0 *= ^BWHP /* \_SB_.PCI0.BWHP */
                Local1 = (^BWCP + ^BWIS) /* \_SB_.PCI0.BWIS */
                Local1 += ^BWWB /* \_SB_.PCI0.BWWB */
                Local1 += ^BWHP /* \_SB_.PCI0.BWHP */
                Divide (Local0, Local1, Local1, Local0)
                Local0 *= 0x03
                Divide (Local0, 0x28, Local1, Local0)
                Return (Local0)
            }

            Method (GM2C, 0, NotSerialized)
            {
                Local1 = (\_SB.PCI0.P4MI.CPLN * 0x19)
                Local1 *= \_SB.PCI0.P4MI.BPLN
                Local2 = (\_SB.PCI0.P4MI.BPLP + 0x01)
                Local2 *= \_SB.PCI0.P4MI.CPLM
                Local2 *= \_SB.PCI0.P4MI.BPLM
                Local3 = Local1
                Local1 = (Local3 * \_SB.PCI0.P4MI.MPLN)
                Local2 *= \_SB.PCI0.P4MI.MPLM
                Local3 = (Local1 / Local2)
                If ((\_SB.PCI0.P4MI.VCO2 == 0x00))
                {
                    Local3 *= 0x02
                }

                Return (Local3)
            }

            Method (PMPM, 1, NotSerialized)
            {
                Local0 = (0x0F * 0x03E8)
                Divide (Local0, Arg0, Local0, Local1)
                Return (Local1)
            }

            Method (CLTM, 1, NotSerialized)
            {
                Divide (0x04, NOCH (), Local0, Local1)
                Local0 = (0x03E8 * Local1)
                Divide (Local0, Arg0, Local0, Local1)
                Return (Local1)
            }

            Method (BASM, 1, NotSerialized)
            {
                Name (M2CK, 0x00)
                Name (NPAR, 0x01)
                M2CK = Arg0
                Name (TPAR, 0x04)
                TPAR /= NPAR
                TPAR -= 0x02
                Name (BUCO, 0x00)
                BUCO = (TPAR + ^TRCD) /* \_SB_.PCI0.TRCD */
                BUCO += ^TR2P /* \_SB_.PCI0.TR2P */
                BUCO += ^TRP /* \_SB_.PCI0.TRP_ */
                Name (B2CO, 0x00)
                B2CO = MAX (^TRC, BUCO)
                B2CO = CEIL (B2CO, 0x02)
                Name (TBM2, 0x00)
                If ((^TROE == 0x01))
                {
                    TBM2 = ^TROI /* \_SB_.PCI0.TROI */
                }

                Name (TMAX, 0x00)
                TMAX += TBM2 /* \_SB_.PCI0.BASM.TBM2 */
                TMAX += BUCO /* \_SB_.PCI0.BASM.BUCO */
                TMAX += TPAR /* \_SB_.PCI0.BASM.TPAR */
                TMAX = MAX (TMAX, B2CO)
                Name (SWBC, 0x00)
                SWBC = (TMAX * ^BWWB) /* \_SB_.PCI0.BWWB */
                SWBC *= NPAR /* \_SB_.PCI0.BASM.NPAR */
                SWBC /= 0x02
                Name (SCPU, 0x00)
                SCPU = (TMAX * ^BWCP) /* \_SB_.PCI0.BWCP */
                SCPU *= NPAR /* \_SB_.PCI0.BASM.NPAR */
                SCPU /= 0x02
                Name (SISO, 0x00)
                Local1 = (TBM2 + BUCO) /* \_SB_.PCI0.BASM.BUCO */
                Local1 += NPAR /* \_SB_.PCI0.BASM.NPAR */
                Local1 -= 0x02
                Local1 = MAX (Local1, B2CO)
                SISO = (Local1 * ^BWIS) /* \_SB_.PCI0.BWIS */
                Name (RCBZ, 0x10)
                Name (CBHP, 0x02)
                Name (SHIS, 0x00)
                SHIS = (RCBZ * 0x04)
                SHIS /= NPAR
                SHIS -= 0x02
                SHIS += BUCO /* \_SB_.PCI0.BASM.BUCO */
                SHIS += TBM2 /* \_SB_.PCI0.BASM.TBM2 */
                SHIS = MAX (SHIS, B2CO)
                SHIS *= CBHP /* \_SB_.PCI0.BASM.CBHP */
                Name (BIDH, 0x01)
                Name (BWCO, 0x00)
                BWCO = (SWBC + SCPU) /* \_SB_.PCI0.BASM.SCPU */
                BWCO += SISO /* \_SB_.PCI0.BASM.SISO */
                BWCO += SHIS /* \_SB_.PCI0.BASM.SHIS */
                BWCO *= BIDH /* \_SB_.PCI0.BASM.BIDH */
                Name (NISB, 0x00)
                NISB = ^NSB1 /* \_SB_.PCI0.NSB1 */
                Local1 = (^NSB2 << 0x04)
                NISB |= Local1 /* \_SB_.PCI0.BASM.NISB */
                Name (NICO, 0x00)
                Divide (BWCO, ^NIST, Local2, Local1)
                If ((Local2 != 0x00))
                {
                    Local1 += 0x01
                }

                Local2 = (NISB * NPAR) /* \_SB_.PCI0.BASM.NPAR */
                Local3 = (TBM2 + NPAR) /* \_SB_.PCI0.BASM.NPAR */
                If ((Local3 > 0x02))
                {
                    Local3 -= 0x02
                }
                Else
                {
                    Local3 = 0x00
                }

                Local3 = MAX (Local3, B2CO)
                NICO = (Local2 * Local3)
                NICO *= Local1
                NICO /= 0x02
                Name (RECO, 0x00)
                RECO = (BWCO + NICO) /* \_SB_.PCI0.BASM.NICO */
                Divide (RECO, ^REFP, Local2, RECO) /* \_SB_.PCI0.BASM.RECO */
                If ((Local2 != 0x00))
                {
                    RECO += 0x01
                }

                RECO *= ^TRFC /* \_SB_.PCI0.TRFC */
                RECO *= ^REFB /* \_SB_.PCI0.REFB */
                Name (MELA, 0x00)
                MELA = (BWCO + RECO) /* \_SB_.PCI0.BASM.RECO */
                MELA += NICO /* \_SB_.PCI0.BASM.NICO */
                MELA *= 0x03E8
                MELA /= M2CK
                Name (WALA, 0x64)
                WALA += ^CKDY /* \_SB_.PCI0.CKDY */
                WALA *= 0x07D0
                WALA /= M2CK
                If ((WALA < 0x55F0))
                {
                    WALA = 0x55F0
                }

                Name (SWLA, 0x00)
                Name (M73L, 0x64)
                Name (PADD, 0x00)
                Local1 = (MELA + WALA) /* \_SB_.PCI0.BASM.WALA */
                Local1 += SWLA /* \_SB_.PCI0.BASM.SWLA */
                Local1 += M73L /* \_SB_.PCI0.BASM.M73L */
                Local1 += PADD /* \_SB_.PCI0.BASM.PADD */
                Local0 = (Local1 / 0x64)
                Return (Local0)
            }

            Method (MAX, 2, NotSerialized)
            {
                Local0 = Arg0
                If ((Arg1 > Arg0))
                {
                    Local0 = Arg1
                }

                Return (Local0)
            }

            Method (CEIL, 2, NotSerialized)
            {
                Local0 = Arg0
                Divide (Local0, Arg1, Local1, Local3)
                If ((Local1 != 0x00))
                {
                    Local0 -= Local1
                    Local0 += Arg1
                }

                Return (Local0)
            }

            Name (ERR0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (ERR1, Buffer (0x04)
            {
                 0x01, 0x00, 0x00, 0x80                           // ....
            })
            Name (ERR2, Buffer (0x04)
            {
                 0x02, 0x00, 0x00, 0x80                           // ....
            })
            Name (VER1, Buffer (0x04)
            {
                 0x01, 0x00, 0x00, 0x00                           // ....
            })
            Method (NVIF, 3, NotSerialized)
            {
                Local0 = ERR1 /* \_SB_.PCI0.ERR1 */
                If ((Arg0 == 0x01))
                {
                    If ((Arg1 == 0x00))
                    {
                        Concatenate (ERR0, VER1, Local0)
                    }
                }

                If ((Arg0 == 0x0D))
                {
                    If ((Arg1 == 0x00))
                    {
                        Concatenate (ERR0, VER1, Local0)
                    }

                    If ((Arg1 == 0x01))
                    {
                        Concatenate (ERR2, VER1, Local0)
                    }

                    If ((Arg1 == 0x03))
                    {
                        Name (BFD1, Buffer (0x06)
                        {
                             0x10, 0x04, 0x00, 0x00, 0x00, 0x00               // ......
                        })
                        CreateField (BFD1, 0x20, 0x10, SVMS)
                        SVMS = 0x40
                        Concatenate (ERR0, BFD1, Local0)
                    }

                    If ((Arg1 == 0x02))
                    {
                        Local0 = CIMP ()
                    }
                }

                Return (Local0)
            }

            Device (RP04)
            {
                Name (_ADR, 0x00150000)  // _ADR: Address
                OperationRegion (A1E0, PCI_Config, 0x00, 0x20)
                Field (A1E0, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x19), 
                    SECB,   8
                }

                Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                {
                    Return (SECB) /* \_SB_.PCI0.RP04.SECB */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Device (ARPT)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (ARE0, PCI_Config, 0x00, 0x04)
                    Field (ARE0, ByteAcc, NoLock, Preserve)
                    {
                        AVND,   16
                    }

                    Name (_EJD, "\\_SB.PCI0.EHC1.HUB1.PRT2")  // _EJD: Ejection Dependent Device
                    Name (WOWE, 0x00)
                    Method (WWEN, 1, NotSerialized)
                    {
                        WOWE = Arg0
                    }

                    Name (TAPD, 0x00)
                    Method (PDEN, 1, NotSerialized)
                    {
                        TAPD = Arg0
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If (OSDW ())
                        {
                            If (((WOWE != 0x01) && (TAPD == 0x01)))
                            {
                                APPS = 0x00
                                Sleep (0x6E)
                                Local0 = (Timer + 0x00989680)
                                While ((Timer <= Local0))
                                {
                                    If ((AVND != 0xFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If (OSDW ())
                        {
                            If (((WOWE != 0x01) && (TAPD == 0x01)))
                            {
                                APPS = 0x01
                                Sleep (0x64)
                            }
                        }
                    }
                }

                Method (SMPC, 1, NotSerialized)
                {
                    If ((\_SB.PCI0.SBUS.RP4D == 0x00))
                    {
                        If (!(Arg0 & 0x01)){}
                    }
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
                OperationRegion (A1E0, PCI_Config, 0x19, 0x01)
                Field (A1E0, ByteAcc, NoLock, Preserve)
                {
                    SECB,   8
                }

                Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                {
                    Return (SECB) /* \_SB_.PCI0.RP05.SECB */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Device (FRWR)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (_GPE, 0x32)  // _GPE: General Purpose Events
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        Local0 = Package (0x04)
                            {
                                "fwports", 
                                Buffer (0x04)
                                {
                                     0x01, 0x00, 0x00, 0x00                           // ....
                                }, 

                                "fws0", 
                                Buffer (0x04)
                                {
                                     0x01, 0x00, 0x00, 0x00                           // ....
                                }
                            }
                        DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))
                        Return (Local0)
                    }

                    Method (FPEN, 1, Serialized)
                    {
                        If ((Arg0 <= 0x01))
                        {
                            GP40 = Arg0
                        }
                    }

                    Scope (\_GPE)
                    {
                        Method (_L32, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                        {
                            Debug = "Received LPC_DRQ1 (FW_PME#)"
                            Notify (\_SB.PCI0.RP05.FRWR, 0x00) // Bus Check
                        }
                    }
                }
            }
        }
    }
}



ECDT
----
[000h 0000 004h]                   Signature : "ECDT"    [Embedded Controller Boot Resources Table]
[004h 0004 004h]                Table Length : 00000053
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 11
[00Ah 0010 006h]                      Oem ID : "APPLE "
[010h 0016 008h]                Oem Table ID : "Apple00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "Loki"
[020h 0032 004h]       Asl Compiler Revision : 0000005F


[024h 0036 00Ch]     Command/Status Register : [Generic Address Structure]
[024h 0036 001h]                    Space ID : 01 [SystemIO]
[025h 0037 001h]                   Bit Width : 08
[026h 0038 001h]                  Bit Offset : 00
[027h 0039 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[028h 0040 008h]                     Address : 0000000000000066

[030h 0048 00Ch]               Data Register : [Generic Address Structure]
[030h 0048 001h]                    Space ID : 01 [SystemIO]
[031h 0049 001h]                   Bit Width : 08
[032h 0050 001h]                  Bit Offset : 00
[033h 0051 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[034h 0052 008h]                     Address : 0000000000000062

[03Ch 0060 004h]                         UID : 00000000
[040h 0064 001h]                  GPE Number : 3F
[041h 0065 012h]                    Namepath : "\_SB.PCI0.LPCB.EC"

Raw Table Data: Length 83 (0x53)

    0000: 45 43 44 54 53 00 00 00 01 11 41 50 50 4C 45 20  // ECDTS.....APPLE 
    0010: 41 70 70 6C 65 30 30 00 01 00 00 00 4C 6F 6B 69  // Apple00.....Loki
    0020: 5F 00 00 00 01 08 00 00 66 00 00 00 00 00 00 00  // _.......f.......
    0030: 01 08 00 00 62 00 00 00 00 00 00 00 00 00 00 00  // ....b...........
    0040: 3F 5C 5F 53 42 2E 50 43 49 30 2E 4C 50 43 42 2E  // ?\_SB.PCI0.LPCB.
    0050: 45 43 00                                         // EC.


FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 000000F4
[008h 0008 001h]                    Revision : 04
[009h 0009 001h]                    Checksum : 7B
[00Ah 0010 006h]                      Oem ID : "APPLE "
[010h 0016 008h]                Oem Table ID : "Apple00"
[018h 0024 004h]                Oem Revision : 000000AC
[01Ch 0028 004h]             Asl Compiler ID : "Loki"
[020h 0032 004h]       Asl Compiler Revision : 0000005F

[024h 0036 004h]                FACS Address : BFECD000
[028h 0040 004h]                DSDT Address : BFEDF000
[02Ch 0044 001h]                       Model : 00
[02Dh 0045 001h]                  PM Profile : 02 [Mobile]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 0000052E
[034h 0052 001h]           ACPI Enable Value : F0
[035h 0053 001h]          ACPI Disable Value : F1
[036h 0054 001h]              S4BIOS Command : F2
[037h 0055 001h]             P-State Control : 80
[038h 0056 004h]    PM1A Event Block Address : 00000400
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00000404
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 0000041C
[04Ch 0076 004h]      PM Timer Block Address : 00000408
[050h 0080 004h]          GPE0 Block Address : 00000420
[054h 0084 004h]          GPE1 Block Address : 000005A0
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 08
[05Dh 0093 001h]           GPE1 Block Length : 10
[05Eh 0094 001h]            GPE1 Base Offset : 20
[05Fh 0095 001h]                _CST Support : 00
[060h 0096 002h]                  C2 Latency : 0065
[062h 0098 002h]                  C3 Latency : 03E9
[064h 0100 002h]              CPU Cache Size : 0000
[066h 0102 002h]          Cache Flush Stride : 0000
[068h 0104 001h]           Duty Cycle Offset : 01
[069h 0105 001h]            Duty Cycle Width : 03
[06Ah 0106 001h]         RTC Day Alarm Index : 7D
[06Bh 0107 001h]       RTC Month Alarm Index : 7E
[06Ch 0108 001h]           RTC Century Index : 32
[06Dh 0109 002h]  Boot Flags (decoded below) : 0001
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 000084A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 01 [Byte Access:8]
[078h 0120 008h]                     Address : 0000000000000CF9

[080h 0128 001h]        Value to cause reset : 06
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 00
[084h 0132 008h]                FACS Address : 00000000BFECD000
[08Ch 0140 008h]                DSDT Address : 00000000BFEDF000
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 03 [DWord Access:32]
[098h 0152 008h]                     Address : 0000000000000400

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 01 [SystemIO]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000000404

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 01 [SystemIO]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200 008h]                     Address : 000000000000041C

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000000408

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 40
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 04 [QWord Access:64]
[0E0h 0224 008h]                     Address : 0000000000000420

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 01 [SystemIO]
[0E9h 0233 001h]                   Bit Width : 80
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 04 [QWord Access:64]
[0ECh 0236 008h]                     Address : 00000000000005A0


Raw Table Data: Length 244 (0xF4)

    0000: 46 41 43 50 F4 00 00 00 04 7B 41 50 50 4C 45 20  // FACP.....{APPLE 
    0010: 41 70 70 6C 65 30 30 00 AC 00 00 00 4C 6F 6B 69  // Apple00.....Loki
    0020: 5F 00 00 00 00 D0 EC BF 00 F0 ED BF 00 02 09 00  // _...............
    0030: 2E 05 00 00 F0 F1 F2 80 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 1C 04 00 00 08 04 00 00  // ................
    0050: 20 04 00 00 A0 05 00 00 04 02 01 04 08 10 20 00  //  ............. .
    0060: 65 00 E9 03 00 00 00 00 01 03 7D 7E 32 01 00 00  // e.........}~2...
    0070: A5 84 00 00 01 08 00 01 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 00 00 D0 EC BF 00 00 00 00 00 F0 ED BF  // ................
    0090: 00 00 00 00 01 20 00 03 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 00 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 04 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 00 1C 04 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 04 00 00 00 00 00 00 01 40 00 04  // . ...........@..
    00E0: 20 04 00 00 00 00 00 00 01 80 00 04 A0 05 00 00  //  ...............
    00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : 00002000
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 01
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 20 00 00 00 00 00 00  // FACS@.... ......
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 8A
[00Ah 0010 006h]                      Oem ID : "APPLE "
[010h 0016 008h]                Oem Table ID : "Apple00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "Loki"
[020h 0032 004h]       Asl Compiler Revision : 0000005F

[024h 0036 004h]           Hardware Block ID : 10DE8201

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 00
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 00FA
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 8A 41 50 50 4C 45 20  // HPET8.....APPLE 
    0010: 41 70 70 6C 65 30 30 00 01 00 00 00 4C 6F 6B 69  // Apple00.....Loki
    0020: 5F 00 00 00 01 82 DE 10 00 00 00 00 00 00 D0 FE  // _...............
    0030: 00 00 00 00 00 FA 00 00                          // ........


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : E4
[00Ah 0010 006h]                      Oem ID : "APPLE "
[010h 0016 008h]                Oem Table ID : "Apple00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "Loki"
[020h 0032 004h]       Asl Compiler Revision : 0000005F

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000F0000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : FF
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 E4 41 50 50 4C 45 20  // MCFG<.....APPLE 
    0010: 41 70 70 6C 65 30 30 00 01 00 00 00 4C 6F 6B 69  // Apple00.....Loki
    0020: 5F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0  // _...............
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


SBST
----
[000h 0000 004h]                   Signature : "SBST"    [Smart Battery Specification Table]
[004h 0004 004h]                Table Length : 00000030
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 84
[00Ah 0010 006h]                      Oem ID : "APPLE "
[010h 0016 008h]                Oem Table ID : "Apple00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "Loki"
[020h 0032 004h]       Asl Compiler Revision : 0000005F

[024h 0036 004h]               Warning Level : 0000001E
[028h 0040 004h]                   Low Level : 00000014
[02Ch 0044 004h]              Critical Level : 0000000A

Raw Table Data: Length 48 (0x30)

    0000: 53 42 53 54 30 00 00 00 01 84 41 50 50 4C 45 20  // SBST0.....APPLE 
    0010: 41 70 70 6C 65 30 30 00 01 00 00 00 4C 6F 6B 69  // Apple00.....Loki
    0020: 5F 00 00 00 1E 00 00 00 14 00 00 00 0A 00 00 00  // _...............


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "APPLE", "CpuPm", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0xBFEC9C18, 
            0x000002BC, 
            "CPU1IST ", 
            0xBFEC9F18, 
            0x000000C8, 
            "CPU0CST ", 
            0xBFEC9918, 
            0x000002AD, 
            "CPU1CST ", 
            0xBFEC8F18, 
            0x00000085
        })
        Name (CFGD, 0x0D3B69F5)
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\SDTL, 0x00)
    }

    Scope (\_PR.CPU0)
    {
        Name (HI0, 0x00)
        Name (HC0, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0._OSC.CAP0 */
            If ((CFGD & 0x01))
            {
                If ((((CFGD & 0x01000000) && ((PDC0 & 0x09) == 
                    0x09)) && !(SDTL & 0x01)))
                {
                    SDTL |= 0x01
                    OperationRegion (IST0, SystemMemory, DerefOf (SSDT [0x01]), DerefOf (SSDT [0x02]))
                    Load (IST0, HI0) /* \_PR_.CPU0.HI0_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, 0x00)
        Name (HC1, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS1, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS1, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS1)
            CreateDWordField (Arg3, 0x04, CAP1)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID1, 0x00, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS1 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS1 [0x00] = 0x0A
                Return (Arg3)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1._OSC.CAP1 */
            If ((CFGD & 0x01))
            {
                If ((((CFGD & 0x01000000) && ((PDC1 & 0x09) == 
                    0x09)) && !(SDTL & 0x10)))
                {
                    SDTL |= 0x10
                    OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                    Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC1 & 0x18)) && !
                    (SDTL & 0x20)))
                {
                    SDTL |= 0x20
                    OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                    Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
                }
            }

            Return (Arg3)
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 0, "", "SataAhci", 0x00001000)
{
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.SATA, DeviceObj)
    External (GTF0, IntObj)
    External (GTF1, IntObj)

    Scope (\_SB.PCI0.SATA)
    {
        Device (PRT0)
        {
            Name (_ADR, 0xFFFF)  // _ADR: Address
            Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
            {
                Name (GBU0, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
                })
                CreateByteField (GBU0, 0x00, GB00)
                CreateByteField (GBU0, 0x01, GB01)
                CreateByteField (GBU0, 0x02, GB02)
                CreateByteField (GBU0, 0x03, GB03)
                CreateByteField (GBU0, 0x04, GB04)
                CreateByteField (GBU0, 0x05, GB05)
                CreateByteField (GBU0, 0x06, GB06)
                If ((SizeOf (Arg0) == 0x0200))
                {
                    CreateWordField (Arg0, 0x9C, W780)
                    If ((W780 & 0x08))
                    {
                        GB00 = 0x10
                        GB01 = 0x03
                        GB06 = 0xEF
                    }
                    Else
                    {
                        GB00 = 0x90
                        GB01 = 0x03
                        GB06 = 0xEF
                    }
                }

                GTF0 = GBU0 /* \_SB_.PCI0.SATA.PRT0._SDD.GBU0 */
            }

            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                Return (GTF0) /* External reference */
            }
        }

        Device (PRT1)
        {
            Name (_ADR, 0x0001FFFF)  // _ADR: Address
            Name (_CID, "media-notify")  // _CID: Compatible ID
            Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
            {
                Name (GBU1, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
                })
                CreateByteField (GBU1, 0x00, GB10)
                CreateByteField (GBU1, 0x01, GB11)
                CreateByteField (GBU1, 0x02, GB12)
                CreateByteField (GBU1, 0x03, GB13)
                CreateByteField (GBU1, 0x04, GB14)
                CreateByteField (GBU1, 0x05, GB15)
                CreateByteField (GBU1, 0x06, GB16)
                If ((SizeOf (Arg0) == 0x0200))
                {
                    CreateWordField (Arg0, 0x9C, W781)
                    If ((W781 & 0x08))
                    {
                        GB10 = 0x10
                        GB11 = 0x03
                        GB16 = 0xEF
                    }
                    Else
                    {
                        GB10 = 0x90
                        GB11 = 0x03
                        GB16 = 0xEF
                    }
                }

                GTF1 = GBU1 /* \_SB_.PCI0.SATA.PRT1._SDD.GBU1 */
            }

            Scope (\_SB.PCI0)
            {
                OperationRegion (SATP, SystemIO, 0x05FC, 0x01)
                Field (SATP, ByteAcc, Lock, Preserve)
                {
                    GP61,   8
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                GP61 &= 0xFC
                Sleep (0x14)
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                GP61 |= 0x01
            }

            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                Return (GTF1) /* External reference */
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "APPLE", "Cpu0Cst", 0x00003001)
{
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Method (ACST, 0, NotSerialized)
        {
            Return (Package (0x06)
            {
                0x01, 
                0x04, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000000, // Address
                            0x01,               // Access Size
                            )
                    }, 

                    0x01, 
                    0x01, 
                    0x03E8
                }, 

                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000010, // Address
                            0x01,               // Access Size
                            )
                    }, 

                    0x02, 
                    0x01, 
                    0x01F4
                }, 

                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000031, // Address
                            0x03,               // Access Size
                            )
                    }, 

                    0x04, 
                    0x39, 
                    0x64
                }, 

                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000031, // Address
                            0x03,               // Access Size
                            )
                    }, 

                    0x05, 
                    0x39, 
                    0x64
                }
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((CFGD & 0x01000000) && !(PDC0 & 0x10)))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x9D, 
                        0x03E8
                    }
                })
            }

            If ((PDC0 & 0x0300))
            {
                If ((CFGD & 0x80))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    ,)
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000031, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0x39, 
                            0x64
                        }
                    })
                }

                If ((CFGD & 0x20))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    ,)
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }
                    })
                }
            }

            If ((CFGD & 0x80))
            {
                Return (Package (0x04)
                {
                    0x03, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000414, // Address
                                ,)
                        }, 

                        0x02, 
                        0x01, 
                        0x01F4
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000416, // Address
                                ,)
                        }, 

                        0x03, 
                        0x39, 
                        0x64
                    }
                })
            }

            If ((CFGD & 0x20))
            {
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000414, // Address
                                ,)
                        }, 

                        0x02, 
                        0x01, 
                        0x01F4
                    }
                })
            }

            Return (Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03E8
                }
            })
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "APPLE", "Cpu1Ist", 0x00003000)
{
    External (_PR_.CPU0._PPC, IntObj)
    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (PDC1, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((PDC1 & 0x0800))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00, 
                        0xFE, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFC, 
                    0x02
                }
            })
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "APPLE", "Cpu0Ist", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (NPSS, IntObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (((CFGD & 0x01) && (PDC0 & 0x01)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000800, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B3, // Address
                        ,)
                }
            })
        }

        Method (XPSS, 0, NotSerialized)
        {
            If ((PDC0 & 0x01))
            {
                Return (NPSS) /* External reference */
            }

            Return (SPSS) /* \_PR_.CPU0.SPSS */
        }

        Name (SPSS, Package (0x06)
        {
            Package (0x06)
            {
                0x000009DF, 
                0x00007D00, 
                0x0000006E, 
                0x0000000A, 
                0x00000083, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x0000095A, 
                0x00007D00, 
                0x0000006E, 
                0x0000000A, 
                0x00000183, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000850, 
                0x000066DD, 
                0x0000006E, 
                0x0000000A, 
                0x00000283, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000746, 
                0x000050BA, 
                0x0000006E, 
                0x0000000A, 
                0x00000383, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x0000063C, 
                0x00003A98, 
                0x0000006E, 
                0x0000000A, 
                0x00000483, 
                0x00000004
            }, 

            Package (0x06)
            {
                0x0000031E, 
                0x000037DC, 
                0x0000006E, 
                0x0000000A, 
                0x00000583, 
                0x00000005
            }
        })
        Name (_PSS, Package (0x06)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009DF, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x00004925, 
                0x00004925
            }, 

            Package (0x06)
            {
                0x0000095A, 
                0x00007D00, 
                0x0000000A, 
                0x0000000A, 
                0x00000925, 
                0x00000925
            }, 

            Package (0x06)
            {
                0x00000850, 
                0x000066DD, 
                0x0000000A, 
                0x0000000A, 
                0x00000821, 
                0x00000821
            }, 

            Package (0x06)
            {
                0x00000746, 
                0x000050BA, 
                0x0000000A, 
                0x0000000A, 
                0x0000071C, 
                0x0000071C
            }, 

            Package (0x06)
            {
                0x0000063C, 
                0x00003A98, 
                0x0000000A, 
                0x0000000A, 
                0x00000617, 
                0x00000617
            }, 

            Package (0x06)
            {
                0x0000031E, 
                0x000037DC, 
                0x0000000A, 
                0x0000000A, 
                0x00008611, 
                0x00008611
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((CFGD & 0x01000000))
            {
                If ((PDC0 & 0x0800))
                {
                    Return (Package (0x01)
                    {
                        Package (0x05)
                        {
                            0x05, 
                            0x00, 
                            0x00, 
                            0xFE, 
                            0x02
                        }
                    })
                }

                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00, 
                        0xFC, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "APPLE", "Cpu1Cst", 0x00003000)
{
    External (_PR_.CPU0._CST, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC1, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((CFGD & 0x01000000) && !(PDC1 & 0x10)))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x9D, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.CPU0._CST) /* External reference */
        }
    }
}



