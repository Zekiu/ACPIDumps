
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20230628
Copyright (c) 2000 - 2023 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000394  0x02  "PmRef "  "Cpu0Cst "  0x00003001  "INTL"   0x20210930
 02)  MCFG  0x0000003C  0x01  "MSI_NB"  "MEGABOOK"  0x01072009  "AMI "   0x01000013
 03)  APIC  0x00000358  0x05  "MSI_NB"  "MEGABOOK"  0x01072009  "AMI "   0x01000013
 04)  SSDT  0x000005E4  0x02  "PmRef "  "Cpu0Hwp "  0x00003000  "INTL"   0x20210930
 05)  SSDT  0x00000CA6  0x02  "MSI_NB"  "PtidDevc"  0x00001000  "INTL"   0x20210930
 06)  TPM2  0x0000004C  0x04  "MSI_NB"  "MEGABOOK"  0x00000001  "AMI "   0x00000000
 07)  BGRT  0x00000038  0x01  "MSI_NB"  "MEGABOOK"  0x01072009  "AMI "   0x00010013
 08)  SSDT  0x0000FCEF  0x02  "MSI_NB"  "MtlP_Rvp"  0x00001000  "INTL"   0x20210930
 09)  DTPR  0x00000088  0x01  "      "  "        "  0x00000000  "    "   0x00000000
 10)  SSDT  0x00003BC8  0x02  "CpuRef"  "CpuSsdt "  0x00003000  "INTL"   0x20210930
 11)  SSDT  0x000011A0  0x02  "INTEL "  "St00Ssdt"  0x00001000  "INTL"   0x20210930
 12)  NHLT  0x00000960  0x00  "MSI_NB"  "MEGABOOK"  0x01072009  "AMI "   0x01000013
 13)  SSDT  0x00002494  0x02  "INTEL "  "IgfxSsdt"  0x00003000  "INTL"   0x20210930
 14)  DSDT  0x00061138  0x02  "MSI_NB"  "MEGABOOK"  0x01072009  "INTL"   0x20210930
 15)  SSDT  0x00001349  0x02  "PmRef "  "ApPsd   "  0x00003000  "INTL"   0x20210930
 16)  UEFI  0x0000005C  0x01  "INTEL "  "RstVmdV "  0x00000000  "INTL"   0x00000000
 17)  SSDT  0x0000281A  0x02  "SocGpe"  "SocGpe  "  0x00003000  "INTL"   0x20210930
 18)  WSMT  0x00000028  0x01  "MSI_NB"  "MEGABOOK"  0x01072009  "AMI "   0x00010013
 19)  SSDT  0x0000038C  0x02  "PmaxDv"  "Pmax_Dev"  0x00000001  "INTL"   0x20210930
 20)  LPIT  0x000000CC  0x01  "MSI_NB"  "MEGABOOK"  0x01072009  "AMI "   0x01000013
 21)  SSDT  0x00001BAF  0x02  "PmRef "  "ApIst   "  0x00003000  "INTL"   0x20210930
 22)  UEFI  0x00000048  0x01  "MSI_NB"  "MEGABOOK"  0x01072009  "AMI "   0x01000013
 23)  SSDT  0x00001191  0x02  "MSI_NB"  "UsbCTabl"  0x00001000  "INTL"   0x20210930
 24)  DBG2  0x00000054  0x00  "MSI_NB"  "MEGABOOK"  0x01072009  "AMI "   0x01000013
 25)  SSDT  0x00005835  0x02  "DptfTb"  "DptfTabl"  0x00001000  "INTL"   0x20210930
 26)  SSDT  0x000001AB  0x02  "PmRef "  "Cpu0Psd "  0x00003000  "INTL"   0x20210930
 27)  SSDT  0x0000587D  0x02  "MSI_NB"  "TbtTypeC"  0x00000000  "INTL"   0x20210930
 28)  DMAR  0x00000098  0x01  "MSI_NB"  "MEGABOOK"  0x01072009  "AMI "   0x01000013
 29)  FACP  0x00000114  0x06  "MSI_NB"  "MEGABOOK"  0x01072009  "AMI "   0x01000013
 30)  BGRT  0x00000038  0x01  "MSI_NB"  "MEGABOOK"  0x01072009  "AMI "   0x00010013
 31)  FPDT  0x00000044  0x01  "MSI_NB"  "A M I   "  0x01072009  "AMI "   0x01000013
 32)  PHAT  0x00000569  0x01  "MSI_NB"  "MEGABOOK"  0x00000005  "MSFT"   0x0100000D
 33)  SSDT  0x00000689  0x02  "PmRef "  "Cpu0Ist "  0x00003000  "INTL"   0x20210930
 34)  SSDT  0x0000147F  0x02  "MSI_NB"  "I2Pm_Rvp"  0x00001000  "INTL"   0x20210930
 35)  MSDM  0x00000055  0x03  "MSI_NB"  "MEGABOOK"  0x01072009  "AMI "   0x01000013
 36)  SSDT  0x00009AB7  0x02  "INTEL "  "TcssSsdt"  0x00001000  "INTL"   0x20210930
 37)  SSDT  0x00000FBB  0x02  "PmRef "  "ApCst   "  0x00003000  "INTL"   0x20210930
 38)  SSDT  0x000028D3  0x02  "SocCmn"  "SocCmn  "  0x00003000  "INTL"   0x20210930
 39)  DBGP  0x00000034  0x01  "MSI_NB"  "MEGABOOK"  0x01072009  "AMI "   0x01000013
 40)  SSDT  0x0000006B  0x02  "MSI_NB"  "MsiNvs  "  0x00003000  "INTL"   0x20210930
 41)  HPET  0x00000038  0x01  "MSI_NB"  "MEGABOOK"  0x01072009  "AMI "   0x01000013
 42)  SSDT  0x00001620  0x02  "PmRef "  "ApHwp   "  0x00003000  "INTL"   0x20210930
 43)  UEFI  0x0000063A  0x01  "INTEL "  "RstVmdE "  0x00000000  "INTL"   0x00000000
 44)  SSDT  0x00000FC6  0x02  "INTEL "  "xh_mtlp3"  0x00000000  "INTL"   0x20210930
 45)  FIDT  0x0000009C  0x01  "MSI_NB"  "MEGABOOK"  0x01072009  "AMI "   0x00010013
 46)  FACS  0x00000040  0x02
 47)  SSDT  0x00000D3B  0x02  "INTEL "  "PDatTabl"  0x00001000  "INTL"   0x20210930

Found 47 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 00000358
[008h 0008 001h]                    Revision : 05
[009h 0009 001h]                    Checksum : EF
[00Ah 0010 006h]                      Oem ID : "MSI_NB"
[010h 0016 008h]                Oem Table ID : "MEGABOOK"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 01000013

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 09 [Processor Local x2APIC]
[02Dh 0045 001h]                      Length : 10
[02Eh 0046 002h]                    Reserved : 0000
[030h 0048 004h]         Processor x2Apic ID : 00000010
[034h 0052 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[038h 0056 004h]               Processor UID : 00000008

[03Ch 0060 001h]               Subtable Type : 09 [Processor Local x2APIC]
[03Dh 0061 001h]                      Length : 10
[03Eh 0062 002h]                    Reserved : 0000
[040h 0064 004h]         Processor x2Apic ID : 00000011
[044h 0068 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[048h 0072 004h]               Processor UID : 00000009

[04Ch 0076 001h]               Subtable Type : 09 [Processor Local x2APIC]
[04Dh 0077 001h]                      Length : 10
[04Eh 0078 002h]                    Reserved : 0000
[050h 0080 004h]         Processor x2Apic ID : 00000018
[054h 0084 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[058h 0088 004h]               Processor UID : 0000000A

[05Ch 0092 001h]               Subtable Type : 09 [Processor Local x2APIC]
[05Dh 0093 001h]                      Length : 10
[05Eh 0094 002h]                    Reserved : 0000
[060h 0096 004h]         Processor x2Apic ID : 00000019
[064h 0100 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[068h 0104 004h]               Processor UID : 0000000B

[06Ch 0108 001h]               Subtable Type : 09 [Processor Local x2APIC]
[06Dh 0109 001h]                      Length : 10
[06Eh 0110 002h]                    Reserved : 0000
[070h 0112 004h]         Processor x2Apic ID : 00000020
[074h 0116 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[078h 0120 004h]               Processor UID : 0000000C

[07Ch 0124 001h]               Subtable Type : 09 [Processor Local x2APIC]
[07Dh 0125 001h]                      Length : 10
[07Eh 0126 002h]                    Reserved : 0000
[080h 0128 004h]         Processor x2Apic ID : 00000021
[084h 0132 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[088h 0136 004h]               Processor UID : 0000000D

[08Ch 0140 001h]               Subtable Type : 09 [Processor Local x2APIC]
[08Dh 0141 001h]                      Length : 10
[08Eh 0142 002h]                    Reserved : 0000
[090h 0144 004h]         Processor x2Apic ID : 00000028
[094h 0148 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[098h 0152 004h]               Processor UID : 0000000E

[09Ch 0156 001h]               Subtable Type : 09 [Processor Local x2APIC]
[09Dh 0157 001h]                      Length : 10
[09Eh 0158 002h]                    Reserved : 0000
[0A0h 0160 004h]         Processor x2Apic ID : 00000029
[0A4h 0164 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[0A8h 0168 004h]               Processor UID : 0000000F

[0ACh 0172 001h]               Subtable Type : 09 [Processor Local x2APIC]
[0ADh 0173 001h]                      Length : 10
[0AEh 0174 002h]                    Reserved : 0000
[0B0h 0176 004h]         Processor x2Apic ID : 00000030
[0B4h 0180 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[0B8h 0184 004h]               Processor UID : 00000010

[0BCh 0188 001h]               Subtable Type : 09 [Processor Local x2APIC]
[0BDh 0189 001h]                      Length : 10
[0BEh 0190 002h]                    Reserved : 0000
[0C0h 0192 004h]         Processor x2Apic ID : 00000031
[0C4h 0196 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[0C8h 0200 004h]               Processor UID : 00000011

[0CCh 0204 001h]               Subtable Type : 09 [Processor Local x2APIC]
[0CDh 0205 001h]                      Length : 10
[0CEh 0206 002h]                    Reserved : 0000
[0D0h 0208 004h]         Processor x2Apic ID : 00000038
[0D4h 0212 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[0D8h 0216 004h]               Processor UID : 00000012

[0DCh 0220 001h]               Subtable Type : 09 [Processor Local x2APIC]
[0DDh 0221 001h]                      Length : 10
[0DEh 0222 002h]                    Reserved : 0000
[0E0h 0224 004h]         Processor x2Apic ID : 00000039
[0E4h 0228 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[0E8h 0232 004h]               Processor UID : 00000013

[0ECh 0236 001h]               Subtable Type : 09 [Processor Local x2APIC]
[0EDh 0237 001h]                      Length : 10
[0EEh 0238 002h]                    Reserved : 0000
[0F0h 0240 004h]         Processor x2Apic ID : 00000000
[0F4h 0244 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[0F8h 0248 004h]               Processor UID : 00000000

[0FCh 0252 001h]               Subtable Type : 09 [Processor Local x2APIC]
[0FDh 0253 001h]                      Length : 10
[0FEh 0254 002h]                    Reserved : 0000
[100h 0256 004h]         Processor x2Apic ID : 00000002
[104h 0260 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[108h 0264 004h]               Processor UID : 00000001

[10Ch 0268 001h]               Subtable Type : 09 [Processor Local x2APIC]
[10Dh 0269 001h]                      Length : 10
[10Eh 0270 002h]                    Reserved : 0000
[110h 0272 004h]         Processor x2Apic ID : 00000004
[114h 0276 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[118h 0280 004h]               Processor UID : 00000002

[11Ch 0284 001h]               Subtable Type : 09 [Processor Local x2APIC]
[11Dh 0285 001h]                      Length : 10
[11Eh 0286 002h]                    Reserved : 0000
[120h 0288 004h]         Processor x2Apic ID : 00000006
[124h 0292 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[128h 0296 004h]               Processor UID : 00000003

[12Ch 0300 001h]               Subtable Type : 09 [Processor Local x2APIC]
[12Dh 0301 001h]                      Length : 10
[12Eh 0302 002h]                    Reserved : 0000
[130h 0304 004h]         Processor x2Apic ID : 00000008
[134h 0308 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[138h 0312 004h]               Processor UID : 00000004

[13Ch 0316 001h]               Subtable Type : 09 [Processor Local x2APIC]
[13Dh 0317 001h]                      Length : 10
[13Eh 0318 002h]                    Reserved : 0000
[140h 0320 004h]         Processor x2Apic ID : 0000000A
[144h 0324 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[148h 0328 004h]               Processor UID : 00000005

[14Ch 0332 001h]               Subtable Type : 09 [Processor Local x2APIC]
[14Dh 0333 001h]                      Length : 10
[14Eh 0334 002h]                    Reserved : 0000
[150h 0336 004h]         Processor x2Apic ID : 0000000C
[154h 0340 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[158h 0344 004h]               Processor UID : 00000006

[15Ch 0348 001h]               Subtable Type : 09 [Processor Local x2APIC]
[15Dh 0349 001h]                      Length : 10
[15Eh 0350 002h]                    Reserved : 0000
[160h 0352 004h]         Processor x2Apic ID : 0000000E
[164h 0356 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[168h 0360 004h]               Processor UID : 00000007

[16Ch 0364 001h]               Subtable Type : 09 [Processor Local x2APIC]
[16Dh 0365 001h]                      Length : 10
[16Eh 0366 002h]                    Reserved : 0000
[170h 0368 004h]         Processor x2Apic ID : 00000040
[174h 0372 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[178h 0376 004h]               Processor UID : 00000014

[17Ch 0380 001h]               Subtable Type : 09 [Processor Local x2APIC]
[17Dh 0381 001h]                      Length : 10
[17Eh 0382 002h]                    Reserved : 0000
[180h 0384 004h]         Processor x2Apic ID : 00000042
[184h 0388 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
[188h 0392 004h]               Processor UID : 00000015

[18Ch 0396 001h]               Subtable Type : 09 [Processor Local x2APIC]
[18Dh 0397 001h]                      Length : 10
[18Eh 0398 002h]                    Reserved : 0000
[190h 0400 004h]         Processor x2Apic ID : FFFFFFFF
[194h 0404 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[198h 0408 004h]               Processor UID : 00000016

[19Ch 0412 001h]               Subtable Type : 09 [Processor Local x2APIC]
[19Dh 0413 001h]                      Length : 10
[19Eh 0414 002h]                    Reserved : 0000
[1A0h 0416 004h]         Processor x2Apic ID : FFFFFFFF
[1A4h 0420 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[1A8h 0424 004h]               Processor UID : 00000017

[1ACh 0428 001h]               Subtable Type : 09 [Processor Local x2APIC]
[1ADh 0429 001h]                      Length : 10
[1AEh 0430 002h]                    Reserved : 0000
[1B0h 0432 004h]         Processor x2Apic ID : FFFFFFFF
[1B4h 0436 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[1B8h 0440 004h]               Processor UID : 00000018

[1BCh 0444 001h]               Subtable Type : 09 [Processor Local x2APIC]
[1BDh 0445 001h]                      Length : 10
[1BEh 0446 002h]                    Reserved : 0000
[1C0h 0448 004h]         Processor x2Apic ID : FFFFFFFF
[1C4h 0452 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[1C8h 0456 004h]               Processor UID : 00000019

[1CCh 0460 001h]               Subtable Type : 09 [Processor Local x2APIC]
[1CDh 0461 001h]                      Length : 10
[1CEh 0462 002h]                    Reserved : 0000
[1D0h 0464 004h]         Processor x2Apic ID : FFFFFFFF
[1D4h 0468 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[1D8h 0472 004h]               Processor UID : 0000001A

[1DCh 0476 001h]               Subtable Type : 09 [Processor Local x2APIC]
[1DDh 0477 001h]                      Length : 10
[1DEh 0478 002h]                    Reserved : 0000
[1E0h 0480 004h]         Processor x2Apic ID : FFFFFFFF
[1E4h 0484 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[1E8h 0488 004h]               Processor UID : 0000001B

[1ECh 0492 001h]               Subtable Type : 09 [Processor Local x2APIC]
[1EDh 0493 001h]                      Length : 10
[1EEh 0494 002h]                    Reserved : 0000
[1F0h 0496 004h]         Processor x2Apic ID : FFFFFFFF
[1F4h 0500 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[1F8h 0504 004h]               Processor UID : 0000001C

[1FCh 0508 001h]               Subtable Type : 09 [Processor Local x2APIC]
[1FDh 0509 001h]                      Length : 10
[1FEh 0510 002h]                    Reserved : 0000
[200h 0512 004h]         Processor x2Apic ID : FFFFFFFF
[204h 0516 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[208h 0520 004h]               Processor UID : 0000001D

[20Ch 0524 001h]               Subtable Type : 09 [Processor Local x2APIC]
[20Dh 0525 001h]                      Length : 10
[20Eh 0526 002h]                    Reserved : 0000
[210h 0528 004h]         Processor x2Apic ID : FFFFFFFF
[214h 0532 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[218h 0536 004h]               Processor UID : 0000001E

[21Ch 0540 001h]               Subtable Type : 09 [Processor Local x2APIC]
[21Dh 0541 001h]                      Length : 10
[21Eh 0542 002h]                    Reserved : 0000
[220h 0544 004h]         Processor x2Apic ID : FFFFFFFF
[224h 0548 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[228h 0552 004h]               Processor UID : 0000001F

[22Ch 0556 001h]               Subtable Type : 09 [Processor Local x2APIC]
[22Dh 0557 001h]                      Length : 10
[22Eh 0558 002h]                    Reserved : 0000
[230h 0560 004h]         Processor x2Apic ID : FFFFFFFF
[234h 0564 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[238h 0568 004h]               Processor UID : 00000020

[23Ch 0572 001h]               Subtable Type : 09 [Processor Local x2APIC]
[23Dh 0573 001h]                      Length : 10
[23Eh 0574 002h]                    Reserved : 0000
[240h 0576 004h]         Processor x2Apic ID : FFFFFFFF
[244h 0580 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[248h 0584 004h]               Processor UID : 00000021

[24Ch 0588 001h]               Subtable Type : 09 [Processor Local x2APIC]
[24Dh 0589 001h]                      Length : 10
[24Eh 0590 002h]                    Reserved : 0000
[250h 0592 004h]         Processor x2Apic ID : FFFFFFFF
[254h 0596 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[258h 0600 004h]               Processor UID : 00000022

[25Ch 0604 001h]               Subtable Type : 09 [Processor Local x2APIC]
[25Dh 0605 001h]                      Length : 10
[25Eh 0606 002h]                    Reserved : 0000
[260h 0608 004h]         Processor x2Apic ID : FFFFFFFF
[264h 0612 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[268h 0616 004h]               Processor UID : 00000023

[26Ch 0620 001h]               Subtable Type : 09 [Processor Local x2APIC]
[26Dh 0621 001h]                      Length : 10
[26Eh 0622 002h]                    Reserved : 0000
[270h 0624 004h]         Processor x2Apic ID : FFFFFFFF
[274h 0628 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[278h 0632 004h]               Processor UID : 00000024

[27Ch 0636 001h]               Subtable Type : 09 [Processor Local x2APIC]
[27Dh 0637 001h]                      Length : 10
[27Eh 0638 002h]                    Reserved : 0000
[280h 0640 004h]         Processor x2Apic ID : FFFFFFFF
[284h 0644 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[288h 0648 004h]               Processor UID : 00000025

[28Ch 0652 001h]               Subtable Type : 09 [Processor Local x2APIC]
[28Dh 0653 001h]                      Length : 10
[28Eh 0654 002h]                    Reserved : 0000
[290h 0656 004h]         Processor x2Apic ID : FFFFFFFF
[294h 0660 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[298h 0664 004h]               Processor UID : 00000026

[29Ch 0668 001h]               Subtable Type : 09 [Processor Local x2APIC]
[29Dh 0669 001h]                      Length : 10
[29Eh 0670 002h]                    Reserved : 0000
[2A0h 0672 004h]         Processor x2Apic ID : FFFFFFFF
[2A4h 0676 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[2A8h 0680 004h]               Processor UID : 00000027

[2ACh 0684 001h]               Subtable Type : 09 [Processor Local x2APIC]
[2ADh 0685 001h]                      Length : 10
[2AEh 0686 002h]                    Reserved : 0000
[2B0h 0688 004h]         Processor x2Apic ID : FFFFFFFF
[2B4h 0692 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[2B8h 0696 004h]               Processor UID : 00000028

[2BCh 0700 001h]               Subtable Type : 09 [Processor Local x2APIC]
[2BDh 0701 001h]                      Length : 10
[2BEh 0702 002h]                    Reserved : 0000
[2C0h 0704 004h]         Processor x2Apic ID : FFFFFFFF
[2C4h 0708 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[2C8h 0712 004h]               Processor UID : 00000029

[2CCh 0716 001h]               Subtable Type : 09 [Processor Local x2APIC]
[2CDh 0717 001h]                      Length : 10
[2CEh 0718 002h]                    Reserved : 0000
[2D0h 0720 004h]         Processor x2Apic ID : FFFFFFFF
[2D4h 0724 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[2D8h 0728 004h]               Processor UID : 0000002A

[2DCh 0732 001h]               Subtable Type : 09 [Processor Local x2APIC]
[2DDh 0733 001h]                      Length : 10
[2DEh 0734 002h]                    Reserved : 0000
[2E0h 0736 004h]         Processor x2Apic ID : FFFFFFFF
[2E4h 0740 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[2E8h 0744 004h]               Processor UID : 0000002B

[2ECh 0748 001h]               Subtable Type : 09 [Processor Local x2APIC]
[2EDh 0749 001h]                      Length : 10
[2EEh 0750 002h]                    Reserved : 0000
[2F0h 0752 004h]         Processor x2Apic ID : FFFFFFFF
[2F4h 0756 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[2F8h 0760 004h]               Processor UID : 0000002C

[2FCh 0764 001h]               Subtable Type : 09 [Processor Local x2APIC]
[2FDh 0765 001h]                      Length : 10
[2FEh 0766 002h]                    Reserved : 0000
[300h 0768 004h]         Processor x2Apic ID : FFFFFFFF
[304h 0772 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[308h 0776 004h]               Processor UID : 0000002D

[30Ch 0780 001h]               Subtable Type : 09 [Processor Local x2APIC]
[30Dh 0781 001h]                      Length : 10
[30Eh 0782 002h]                    Reserved : 0000
[310h 0784 004h]         Processor x2Apic ID : FFFFFFFF
[314h 0788 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[318h 0792 004h]               Processor UID : 0000002E

[31Ch 0796 001h]               Subtable Type : 09 [Processor Local x2APIC]
[31Dh 0797 001h]                      Length : 10
[31Eh 0798 002h]                    Reserved : 0000
[320h 0800 004h]         Processor x2Apic ID : FFFFFFFF
[324h 0804 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
[328h 0808 004h]               Processor UID : 0000002F

[32Ch 0812 001h]               Subtable Type : 01 [I/O APIC]
[32Dh 0813 001h]                      Length : 0C
[32Eh 0814 001h]                 I/O Apic ID : 02
[32Fh 0815 001h]                    Reserved : 00
[330h 0816 004h]                     Address : FEC00000
[334h 0820 004h]                   Interrupt : 00000000

[338h 0824 001h]               Subtable Type : 02 [Interrupt Source Override]
[339h 0825 001h]                      Length : 0A
[33Ah 0826 001h]                         Bus : 00
[33Bh 0827 001h]                      Source : 00
[33Ch 0828 004h]                   Interrupt : 00000002
[340h 0832 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[342h 0834 001h]               Subtable Type : 02 [Interrupt Source Override]
[343h 0835 001h]                      Length : 0A
[344h 0836 001h]                         Bus : 00
[345h 0837 001h]                      Source : 09
[346h 0838 004h]                   Interrupt : 00000009
[34Ah 0842 002h]       Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[34Ch 0844 001h]               Subtable Type : 0A [Local x2APIC NMI]
[34Dh 0845 001h]                      Length : 0C
[34Eh 0846 002h]       Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3
[350h 0848 004h]               Processor UID : FFFFFFFF
[354h 0852 001h]        Interrupt Input LINT : 01
[355h 0853 003h]                    Reserved : 000000

Raw Table Data: Length 856 (0x358)

    0000: 41 50 49 43 58 03 00 00 05 EF 4D 53 49 5F 4E 42  // APICX.....MSI_NB
    0010: 4D 45 47 41 42 4F 4F 4B 09 20 07 01 41 4D 49 20  // MEGABOOK. ..AMI 
    0020: 13 00 00 01 00 00 E0 FE 01 00 00 00 09 10 00 00  // ................
    0030: 10 00 00 00 01 00 00 00 08 00 00 00 09 10 00 00  // ................
    0040: 11 00 00 00 01 00 00 00 09 00 00 00 09 10 00 00  // ................
    0050: 18 00 00 00 01 00 00 00 0A 00 00 00 09 10 00 00  // ................
    0060: 19 00 00 00 01 00 00 00 0B 00 00 00 09 10 00 00  // ................
    0070: 20 00 00 00 01 00 00 00 0C 00 00 00 09 10 00 00  //  ...............
    0080: 21 00 00 00 01 00 00 00 0D 00 00 00 09 10 00 00  // !...............
    0090: 28 00 00 00 01 00 00 00 0E 00 00 00 09 10 00 00  // (...............
    00A0: 29 00 00 00 01 00 00 00 0F 00 00 00 09 10 00 00  // )...............
    00B0: 30 00 00 00 01 00 00 00 10 00 00 00 09 10 00 00  // 0...............
    00C0: 31 00 00 00 01 00 00 00 11 00 00 00 09 10 00 00  // 1...............
    00D0: 38 00 00 00 01 00 00 00 12 00 00 00 09 10 00 00  // 8...............
    00E0: 39 00 00 00 01 00 00 00 13 00 00 00 09 10 00 00  // 9...............
    00F0: 00 00 00 00 01 00 00 00 00 00 00 00 09 10 00 00  // ................
    0100: 02 00 00 00 01 00 00 00 01 00 00 00 09 10 00 00  // ................
    0110: 04 00 00 00 01 00 00 00 02 00 00 00 09 10 00 00  // ................
    0120: 06 00 00 00 01 00 00 00 03 00 00 00 09 10 00 00  // ................
    0130: 08 00 00 00 01 00 00 00 04 00 00 00 09 10 00 00  // ................
    0140: 0A 00 00 00 01 00 00 00 05 00 00 00 09 10 00 00  // ................
    0150: 0C 00 00 00 01 00 00 00 06 00 00 00 09 10 00 00  // ................
    0160: 0E 00 00 00 01 00 00 00 07 00 00 00 09 10 00 00  // ................
    0170: 40 00 00 00 01 00 00 00 14 00 00 00 09 10 00 00  // @...............
    0180: 42 00 00 00 01 00 00 00 15 00 00 00 09 10 00 00  // B...............
    0190: FF FF FF FF 00 00 00 00 16 00 00 00 09 10 00 00  // ................
    01A0: FF FF FF FF 00 00 00 00 17 00 00 00 09 10 00 00  // ................
    01B0: FF FF FF FF 00 00 00 00 18 00 00 00 09 10 00 00  // ................
    01C0: FF FF FF FF 00 00 00 00 19 00 00 00 09 10 00 00  // ................
    01D0: FF FF FF FF 00 00 00 00 1A 00 00 00 09 10 00 00  // ................
    01E0: FF FF FF FF 00 00 00 00 1B 00 00 00 09 10 00 00  // ................
    01F0: FF FF FF FF 00 00 00 00 1C 00 00 00 09 10 00 00  // ................
    0200: FF FF FF FF 00 00 00 00 1D 00 00 00 09 10 00 00  // ................
    0210: FF FF FF FF 00 00 00 00 1E 00 00 00 09 10 00 00  // ................
    0220: FF FF FF FF 00 00 00 00 1F 00 00 00 09 10 00 00  // ................
    0230: FF FF FF FF 00 00 00 00 20 00 00 00 09 10 00 00  // ........ .......
    0240: FF FF FF FF 00 00 00 00 21 00 00 00 09 10 00 00  // ........!.......
    0250: FF FF FF FF 00 00 00 00 22 00 00 00 09 10 00 00  // ........".......
    0260: FF FF FF FF 00 00 00 00 23 00 00 00 09 10 00 00  // ........#.......
    0270: FF FF FF FF 00 00 00 00 24 00 00 00 09 10 00 00  // ........$.......
    0280: FF FF FF FF 00 00 00 00 25 00 00 00 09 10 00 00  // ........%.......
    0290: FF FF FF FF 00 00 00 00 26 00 00 00 09 10 00 00  // ........&.......
    02A0: FF FF FF FF 00 00 00 00 27 00 00 00 09 10 00 00  // ........'.......
    02B0: FF FF FF FF 00 00 00 00 28 00 00 00 09 10 00 00  // ........(.......
    02C0: FF FF FF FF 00 00 00 00 29 00 00 00 09 10 00 00  // ........).......
    02D0: FF FF FF FF 00 00 00 00 2A 00 00 00 09 10 00 00  // ........*.......
    02E0: FF FF FF FF 00 00 00 00 2B 00 00 00 09 10 00 00  // ........+.......
    02F0: FF FF FF FF 00 00 00 00 2C 00 00 00 09 10 00 00  // ........,.......
    0300: FF FF FF FF 00 00 00 00 2D 00 00 00 09 10 00 00  // ........-.......
    0310: FF FF FF FF 00 00 00 00 2E 00 00 00 09 10 00 00  // ................
    0320: FF FF FF FF 00 00 00 00 2F 00 00 00 01 0C 02 00  // ......../.......
    0330: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0340: 00 00 02 0A 00 09 09 00 00 00 0D 00 0A 0C 0D 00  // ................
    0350: FF FF FF FF 01 00 00 00                          // ........


BGRT1
-----
[000h 0000 004h]                   Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 11
[00Ah 0010 006h]                      Oem ID : "MSI_NB"
[010h 0016 008h]                Oem Table ID : "MEGABOOK"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 002h]                     Version : 0001
[026h 0038 001h]      Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039 001h]                  Image Type : 00
[028h 0040 008h]               Image Address : 0000000057C7F018
[030h 0048 004h]               Image OffsetX : 00000240
[034h 0052 004h]               Image OffsetY : 000000C4

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 11 4D 53 49 5F 4E 42  // BGRT8.....MSI_NB
    0010: 4D 45 47 41 42 4F 4F 4B 09 20 07 01 41 4D 49 20  // MEGABOOK. ..AMI 
    0020: 13 00 01 00 01 00 01 00 18 F0 C7 57 00 00 00 00  // ...........W....
    0030: 40 02 00 00 C4 00 00 00                          // @.......


BGRT2
-----
[000h 0000 004h]                   Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 2C
[00Ah 0010 006h]                      Oem ID : "MSI_NB"
[010h 0016 008h]                Oem Table ID : "MEGABOOK"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 002h]                     Version : 0001
[026h 0038 001h]      Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039 001h]                  Image Type : 00
[028h 0040 008h]               Image Address : 00000000575C4018
[030h 0048 004h]               Image OffsetX : 00000240
[034h 0052 004h]               Image OffsetY : 000000C4

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 2C 4D 53 49 5F 4E 42  // BGRT8....,MSI_NB
    0010: 4D 45 47 41 42 4F 4F 4B 09 20 07 01 41 4D 49 20  // MEGABOOK. ..AMI 
    0020: 13 00 01 00 01 00 01 00 18 40 5C 57 00 00 00 00  // .........@\W....
    0030: 40 02 00 00 C4 00 00 00                          // @.......


DBG2
----
[000h 0000 004h]                   Signature : "DBG2"    [Debug Port Table type 2]
[004h 0004 004h]                Table Length : 00000054
[008h 0008 001h]                    Revision : 00
[009h 0009 001h]                    Checksum : DF
[00Ah 0010 006h]                      Oem ID : "MSI_NB"
[010h 0016 008h]                Oem Table ID : "MEGABOOK"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 01000013

[024h 0036 004h]                 Info Offset : 0000002C
[028h 0040 004h]                  Info Count : 00000001

[02Ch 0044 001h]                    Revision : 00
[02Dh 0045 002h]                      Length : 0028
[02Fh 0047 001h]              Register Count : 01
[030h 0048 002h]             Namepath Length : 0002
[032h 0050 002h]             Namepath Offset : 0026
[034h 0052 002h]             OEM Data Length : 0000 [Optional field not present]
[036h 0054 002h]             OEM Data Offset : 0000 [Optional field not present]
[038h 0056 002h]                   Port Type : 8000
[03Ah 0058 002h]                Port Subtype : 0001
[03Ch 0060 002h]                    Reserved : 0000
[03Eh 0062 002h]         Base Address Offset : 0016
[040h 0064 002h]         Address Size Offset : 0022

[042h 0066 00Ch]       Base Address Register : [Generic Address Structure]
[042h 0066 001h]                    Space ID : 01 [SystemIO]
[043h 0067 001h]                   Bit Width : 08
[044h 0068 001h]                  Bit Offset : 00
[045h 0069 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[046h 0070 008h]                     Address : 00000000000003F8

[04Eh 0078 004h]                Address Size : 0000000C

[052h 0082 002h]                    Namepath : "."

Raw Table Data: Length 84 (0x54)

    0000: 44 42 47 32 54 00 00 00 00 DF 4D 53 49 5F 4E 42  // DBG2T.....MSI_NB
    0010: 4D 45 47 41 42 4F 4F 4B 09 20 07 01 41 4D 49 20  // MEGABOOK. ..AMI 
    0020: 13 00 00 01 2C 00 00 00 01 00 00 00 00 28 00 01  // ....,........(..
    0030: 02 00 26 00 00 00 00 00 00 80 01 00 00 00 16 00  // ..&.............
    0040: 22 00 01 08 00 00 F8 03 00 00 00 00 00 00 0C 00  // "...............
    0050: 00 00 2E 00                                      // ....


DBGP
----
[000h 0000 004h]                   Signature : "DBGP"    [Debug Port Table]
[004h 0004 004h]                Table Length : 00000034
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 51
[00Ah 0010 006h]                      Oem ID : "MSI_NB"
[010h 0016 008h]                Oem Table ID : "MEGABOOK"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 01000013

[024h 0036 001h]              Interface Type : 00
[025h 0037 003h]                    Reserved : 000000

[028h 0040 00Ch]         Debug Port Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 01 [SystemIO]
[029h 0041 001h]                   Bit Width : 08
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000000003F8


Raw Table Data: Length 52 (0x34)

    0000: 44 42 47 50 34 00 00 00 01 51 4D 53 49 5F 4E 42  // DBGP4....QMSI_NB
    0010: 4D 45 47 41 42 4F 4F 4B 09 20 07 01 41 4D 49 20  // MEGABOOK. ..AMI 
    0020: 13 00 00 01 00 00 00 00 01 08 00 00 F8 03 00 00  // ................
    0030: 00 00 00 00                                      // ....


DMAR
----
[000h 0000 004h]                   Signature : "DMAR"    [DMA Remapping Table]
[004h 0004 004h]                Table Length : 00000098
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 59
[00Ah 0010 006h]                      Oem ID : "MSI_NB"
[010h 0016 008h]                Oem Table ID : "MEGABOOK"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 01000013

[024h 0036 001h]          Host Address Width : 29
[025h 0037 001h]                       Flags : 05
[026h 0038 00Ah]                    Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050 002h]                      Length : 0018

[034h 0052 001h]                       Flags : 00
[035h 0053 001h]                    Reserved : 00
[036h 0054 002h]          PCI Segment Number : 0000
[038h 0056 008h]       Register Base Address : 00000000FC800000

[040h 0064 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[041h 0065 001h]                Entry Length : 08
[042h 0066 002h]                    Reserved : 0000
[044h 0068 001h]              Enumeration ID : 00
[045h 0069 001h]              PCI Bus Number : 00

[046h 0070 002h]                    PCI Path : 02,00


[048h 0072 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[04Ah 0074 002h]                      Length : 0020

[04Ch 0076 001h]                       Flags : 01
[04Dh 0077 001h]                    Reserved : 00
[04Eh 0078 002h]          PCI Segment Number : 0000
[050h 0080 008h]       Register Base Address : 00000000FC801000

[058h 0088 001h]           Device Scope Type : 03 [IOAPIC Device]
[059h 0089 001h]                Entry Length : 08
[05Ah 0090 002h]                    Reserved : 0000
[05Ch 0092 001h]              Enumeration ID : 02
[05Dh 0093 001h]              PCI Bus Number : 00

[05Eh 0094 002h]                    PCI Path : 1E,07


[060h 0096 001h]           Device Scope Type : 04 [Message-capable HPET Device]
[061h 0097 001h]                Entry Length : 08
[062h 0098 002h]                    Reserved : 0000
[064h 0100 001h]              Enumeration ID : 00
[065h 0101 001h]              PCI Bus Number : 00

[066h 0102 002h]                    PCI Path : 1E,06


[068h 0104 002h]               Subtable Type : 0005 [SoC Integrated Address Translation Cache]
[06Ah 0106 002h]                      Length : 0018

[06Ch 0108 001h]                       Flags : 01
[06Dh 0109 001h]                    Reserved : 00
[06Eh 0110 002h]          PCI Segment Number : 0000

[070h 0112 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[071h 0113 001h]                Entry Length : 08
[072h 0114 002h]                    Reserved : 0000
[074h 0116 001h]              Enumeration ID : 00
[075h 0117 001h]              PCI Bus Number : 00

[076h 0118 002h]                    PCI Path : 02,00


[078h 0120 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[079h 0121 001h]                Entry Length : 08
[07Ah 0122 002h]                    Reserved : 0000
[07Ch 0124 001h]              Enumeration ID : 00
[07Dh 0125 001h]              PCI Bus Number : 00

[07Eh 0126 002h]                    PCI Path : 0B,00


[080h 0128 002h]               Subtable Type : 0006 [Unknown Subtable Type]
[082h 0130 002h]                      Length : 0018


**** Unknown DMAR subtable type 0x6


Raw Table Data: Length 152 (0x98)

    0000: 44 4D 41 52 98 00 00 00 01 59 4D 53 49 5F 4E 42  // DMAR.....YMSI_NB
    0010: 4D 45 47 41 42 4F 4F 4B 09 20 07 01 41 4D 49 20  // MEGABOOK. ..AMI 
    0020: 13 00 00 01 29 05 00 00 00 00 00 00 00 00 00 00  // ....)...........
    0030: 00 00 18 00 00 00 00 00 00 00 80 FC 00 00 00 00  // ................
    0040: 01 08 00 00 00 00 02 00 00 00 20 00 01 00 00 00  // .......... .....
    0050: 00 10 80 FC 00 00 00 00 03 08 00 00 02 00 1E 07  // ................
    0060: 04 08 00 00 00 00 1E 06 05 00 18 00 01 00 00 00  // ................
    0070: 01 08 00 00 00 00 02 00 01 08 00 00 00 00 0B 00  // ................
    0080: 06 00 18 00 00 00 00 00 01 08 1F 00 00 00 02 00  // ................
    0090: 01 08 1C 00 00 00 0B 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "MSI_NB", "MEGABOOK", 0x01072009)
{
    /*
     * iASL Warning: There were 113 external control methods found during
     * disassembly, but only 369 were resolved (4294967040 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_GPE.AL6B, MethodObj)    // 0 Arguments
    External (_GPE.AL6F, MethodObj)    // 0 Arguments
    External (_GPE.DTIN, MethodObj)    // 0 Arguments
    External (_GPE.PL6B, MethodObj)    // 0 Arguments
    External (_GPE.SL61, MethodObj)    // 0 Arguments
    External (_GPE.SL69, MethodObj)    // 0 Arguments
    External (_GPE.SL6F, MethodObj)    // 0 Arguments
    External (_GPE.SL71, MethodObj)    // 0 Arguments
    External (_GPE.SLA0, MethodObj)    // 0 Arguments
    External (_GPE.SLA1, MethodObj)    // 0 Arguments
    External (_GPE.SLA2, MethodObj)    // 0 Arguments
    External (_GPE.SLA7, MethodObj)    // 0 Arguments
    External (_GPE.SLC0, MethodObj)    // 0 Arguments
    External (_GPE.SLC1, MethodObj)    // 0 Arguments
    External (_GPE.SLC2, MethodObj)    // 0 Arguments
    External (_GPE.SLC7, MethodObj)    // 0 Arguments
    External (_SB_.BGIA, UnknownObj)
    External (_SB_.BGMA, UnknownObj)
    External (_SB_.BGMS, UnknownObj)
    External (_SB_.BTRK, MethodObj)    // 1 Arguments
    External (_SB_.CHGE, IntObj)
    External (_SB_.CPID, UnknownObj)
    External (_SB_.CPPC, IntObj)
    External (_SB_.DPTF, IntObj)
    External (_SB_.DTSE, UnknownObj)
    External (_SB_.DTSF, UnknownObj)
    External (_SB_.GBTR, MethodObj)    // 0 Arguments
    External (_SB_.GGOV, MethodObj)    // 1 Arguments
    External (_SB_.IETM, DeviceObj)
    External (_SB_.IETM.CHRG, DeviceObj)
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.ACET, UnknownObj)
    External (_SB_.PC00.ACWA, UnknownObj)
    External (_SB_.PC00.AWAC, DeviceObj)
    External (_SB_.PC00.AWAC.WAST, IntObj)
    External (_SB_.PC00.CNVW.BOFC, UnknownObj)
    External (_SB_.PC00.CNVW.CIRM, UnknownObj)
    External (_SB_.PC00.CNVW.CRFI, UnknownObj)
    External (_SB_.PC00.CNVW.DPRS, UnknownObj)
    External (_SB_.PC00.CNVW.FLRC, UnknownObj)
    External (_SB_.PC00.CNVW.PRRS, UnknownObj)
    External (_SB_.PC00.CNVW.RSTT, UnknownObj)
    External (_SB_.PC00.CNVW.RSTY, UnknownObj)
    External (_SB_.PC00.DCET, UnknownObj)
    External (_SB_.PC00.DCWA, UnknownObj)
    External (_SB_.PC00.DPOF, UnknownObj)
    External (_SB_.PC00.GBES, UnknownObj)
    External (_SB_.PC00.GFX0.CDCK, UnknownObj)
    External (_SB_.PC00.GFX0.CLID, UnknownObj)
    External (_SB_.PC00.GFX0.DD1F, DeviceObj)
    External (_SB_.PC00.GFX0.DD2F, DeviceObj)
    External (_SB_.PC00.GFX0.GLID, MethodObj)    // 1 Arguments
    External (_SB_.PC00.GFX0.IUEH, MethodObj)    // 1 Arguments
    External (_SB_.PC00.GFX0.IUER, IntObj)
    External (_SB_.PC00.GMHB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.HCID, MethodObj)    // 1 Arguments
    External (_SB_.PC00.HDAS.HIDW, MethodObj)    // 4 Arguments
    External (_SB_.PC00.HDAS.HIWC, MethodObj)    // 1 Arguments
    External (_SB_.PC00.HDAS.PPMS, MethodObj)    // 1 Arguments
    External (_SB_.PC00.HDAS.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.HDAS.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.HIDW, MethodObj)    // 4 Arguments
    External (_SB_.PC00.HIWC, MethodObj)    // 1 Arguments
    External (_SB_.PC00.I2C0.PPDI, UnknownObj)
    External (_SB_.PC00.I2C1.PPDI, UnknownObj)
    External (_SB_.PC00.I2C2.PPDI, UnknownObj)
    External (_SB_.PC00.I2C3.PPDI, UnknownObj)
    External (_SB_.PC00.I2C4.PPDI, UnknownObj)
    External (_SB_.PC00.I2C5.PPDI, UnknownObj)
    External (_SB_.PC00.IMNG, MethodObj)    // 1 Arguments
    External (_SB_.PC00.ITSP, UnknownObj)
    External (_SB_.PC00.LPCB.BPNT, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.DGBA, UnknownObj)
    External (_SB_.PC00.LPCB.EC__, DeviceObj)
    External (_SB_.PC00.LPCB.EC__.KBBL, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC__.MODS, FieldUnitObj)
    External (_SB_.PC00.LPCB.H_EC.DUMY, DeviceObj)
    External (_SB_.PC00.LPCB.H_EC.DUMY.BAT0, DeviceObj)
    External (_SB_.PC00.LPCB.H_EC.DUMY.BAT1, DeviceObj)
    External (_SB_.PC00.LPCB.H_EC.DUMY.BNUM, IntObj)
    External (_SB_.PC00.LPCB.H_EC.DUMY.EPET, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.ERAP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.ERB1, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.ERBA, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.ERBP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.ERCF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.ERLD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.ERMT, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.ERPC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.ERPD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.ERPE, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.ERPH, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.ERPM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.ERPN, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.ERPS, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.ERSP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.ERVP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.LID0, DeviceObj)
    External (_SB_.PC00.LPCB.H_EC.DUMY.ONTM, IntObj)
    External (_SB_.PC00.LPCB.H_EC.DUMY.PGER, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.SPET, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.UPBT, MethodObj)    // 2 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.UPCF, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.UPFS, MethodObj)    // 2 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.UTEC, MethodObj)    // 2 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.WPED, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.H_EC.DUMY.XDAT, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.ECWT, MethodObj)    // 2 Arguments
    External (_SB_.PC00.LPCB.H_EC.LID0, DeviceObj)
    External (_SB_.PC00.LPCB.H_EC.LSTE, UnknownObj)
    External (_SB_.PC00.LPCB.H_EC.XDAT, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.NRTS, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.NTIR, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.SPNT, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.TPDV, UnknownObj)
    External (_SB_.PC00.LPCB.WKEC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.M32B, UnknownObj)
    External (_SB_.PC00.M32L, UnknownObj)
    External (_SB_.PC00.M64B, UnknownObj)
    External (_SB_.PC00.M64L, UnknownObj)
    External (_SB_.PC00.PAUD.PUAM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PC2M, MethodObj)    // 2 Arguments
    External (_SB_.PC00.PDRC.DPTR, UnknownObj)
    External (_SB_.PC00.PDRC.EPTR, UnknownObj)
    External (_SB_.PC00.RP01, DeviceObj)
    External (_SB_.PC00.RP01.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PBNU, IntObj)
    External (_SB_.PC00.RP01.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP01.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PRMV, IntObj)
    External (_SB_.PC00.RP01.PRTP, IntObj)
    External (_SB_.PC00.RP01.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP01.PXSX.BOFC, UnknownObj)
    External (_SB_.PC00.RP01.PXSX.BRMT, IntObj)
    External (_SB_.PC00.RP01.PXSX.CIRM, UnknownObj)
    External (_SB_.PC00.RP01.PXSX.CRFI, UnknownObj)
    External (_SB_.PC00.RP01.PXSX.DPRS, UnknownObj)
    External (_SB_.PC00.RP01.PXSX.FDEL, IntObj)
    External (_SB_.PC00.RP01.PXSX.FLRC, UnknownObj)
    External (_SB_.PC00.RP01.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PXSX.PDEL, IntObj)
    External (_SB_.PC00.RP01.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP01.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PXSX.RDLY, IntObj)
    External (_SB_.PC00.RP01.PXSX.RSTY, UnknownObj)
    External (_SB_.PC00.RP01.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP01.PXSX.VDEL, IntObj)
    External (_SB_.PC00.RP01.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PXSX.WVHO, IntObj)
    External (_SB_.PC00.RP01.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.RD3C, IntObj)
    External (_SB_.PC00.RP01.SLOT, IntObj)
    External (_SB_.PC00.RP01.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP01.VDID, FieldUnitObj)
    External (_SB_.PC00.RP02, DeviceObj)
    External (_SB_.PC00.RP02.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PBNU, IntObj)
    External (_SB_.PC00.RP02.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP02.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PRMV, IntObj)
    External (_SB_.PC00.RP02.PRTP, IntObj)
    External (_SB_.PC00.RP02.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP02.PXSX.BOFC, UnknownObj)
    External (_SB_.PC00.RP02.PXSX.BRMT, IntObj)
    External (_SB_.PC00.RP02.PXSX.CIRM, UnknownObj)
    External (_SB_.PC00.RP02.PXSX.CRFI, UnknownObj)
    External (_SB_.PC00.RP02.PXSX.DPRS, UnknownObj)
    External (_SB_.PC00.RP02.PXSX.FDEL, IntObj)
    External (_SB_.PC00.RP02.PXSX.FLRC, UnknownObj)
    External (_SB_.PC00.RP02.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PXSX.PDEL, IntObj)
    External (_SB_.PC00.RP02.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP02.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PXSX.RDLY, IntObj)
    External (_SB_.PC00.RP02.PXSX.RSTY, UnknownObj)
    External (_SB_.PC00.RP02.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP02.PXSX.VDEL, IntObj)
    External (_SB_.PC00.RP02.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PXSX.WVHO, IntObj)
    External (_SB_.PC00.RP02.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.RD3C, IntObj)
    External (_SB_.PC00.RP02.SLOT, IntObj)
    External (_SB_.PC00.RP02.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP02.VDID, FieldUnitObj)
    External (_SB_.PC00.RP03, DeviceObj)
    External (_SB_.PC00.RP03.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PBNU, IntObj)
    External (_SB_.PC00.RP03.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP03.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PRMV, IntObj)
    External (_SB_.PC00.RP03.PRTP, IntObj)
    External (_SB_.PC00.RP03.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP03.PXSX.BOFC, UnknownObj)
    External (_SB_.PC00.RP03.PXSX.BRMT, IntObj)
    External (_SB_.PC00.RP03.PXSX.CIRM, UnknownObj)
    External (_SB_.PC00.RP03.PXSX.CRFI, UnknownObj)
    External (_SB_.PC00.RP03.PXSX.DPRS, UnknownObj)
    External (_SB_.PC00.RP03.PXSX.FDEL, IntObj)
    External (_SB_.PC00.RP03.PXSX.FLRC, UnknownObj)
    External (_SB_.PC00.RP03.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PXSX.PDEL, IntObj)
    External (_SB_.PC00.RP03.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP03.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PXSX.RDLY, IntObj)
    External (_SB_.PC00.RP03.PXSX.RSTY, UnknownObj)
    External (_SB_.PC00.RP03.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP03.PXSX.VDEL, IntObj)
    External (_SB_.PC00.RP03.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PXSX.WVHO, IntObj)
    External (_SB_.PC00.RP03.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.RD3C, IntObj)
    External (_SB_.PC00.RP03.SLOT, IntObj)
    External (_SB_.PC00.RP03.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP03.VDID, FieldUnitObj)
    External (_SB_.PC00.RP04, DeviceObj)
    External (_SB_.PC00.RP04.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PBNU, IntObj)
    External (_SB_.PC00.RP04.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP04.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PRMV, IntObj)
    External (_SB_.PC00.RP04.PRTP, IntObj)
    External (_SB_.PC00.RP04.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP04.PXSX.BOFC, UnknownObj)
    External (_SB_.PC00.RP04.PXSX.BRMT, IntObj)
    External (_SB_.PC00.RP04.PXSX.CIRM, UnknownObj)
    External (_SB_.PC00.RP04.PXSX.CRFI, UnknownObj)
    External (_SB_.PC00.RP04.PXSX.DPRS, UnknownObj)
    External (_SB_.PC00.RP04.PXSX.FDEL, IntObj)
    External (_SB_.PC00.RP04.PXSX.FLRC, UnknownObj)
    External (_SB_.PC00.RP04.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PXSX.PDEL, IntObj)
    External (_SB_.PC00.RP04.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP04.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PXSX.RDLY, IntObj)
    External (_SB_.PC00.RP04.PXSX.RSTY, UnknownObj)
    External (_SB_.PC00.RP04.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP04.PXSX.VDEL, IntObj)
    External (_SB_.PC00.RP04.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PXSX.WVHO, IntObj)
    External (_SB_.PC00.RP04.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.RD3C, IntObj)
    External (_SB_.PC00.RP04.SLOT, IntObj)
    External (_SB_.PC00.RP04.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP04.VDID, FieldUnitObj)
    External (_SB_.PC00.RP05, DeviceObj)
    External (_SB_.PC00.RP05.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PBNU, IntObj)
    External (_SB_.PC00.RP05.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP05.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PRMV, IntObj)
    External (_SB_.PC00.RP05.PRTP, IntObj)
    External (_SB_.PC00.RP05.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP05.PXSX.BOFC, UnknownObj)
    External (_SB_.PC00.RP05.PXSX.BRMT, IntObj)
    External (_SB_.PC00.RP05.PXSX.CIRM, UnknownObj)
    External (_SB_.PC00.RP05.PXSX.CRFI, UnknownObj)
    External (_SB_.PC00.RP05.PXSX.DPRS, UnknownObj)
    External (_SB_.PC00.RP05.PXSX.FDEL, IntObj)
    External (_SB_.PC00.RP05.PXSX.FLRC, UnknownObj)
    External (_SB_.PC00.RP05.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PXSX.PDEL, IntObj)
    External (_SB_.PC00.RP05.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP05.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PXSX.RDLY, IntObj)
    External (_SB_.PC00.RP05.PXSX.RSTY, UnknownObj)
    External (_SB_.PC00.RP05.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP05.PXSX.VDEL, IntObj)
    External (_SB_.PC00.RP05.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PXSX.WVHO, IntObj)
    External (_SB_.PC00.RP05.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.RD3C, IntObj)
    External (_SB_.PC00.RP05.SLOT, IntObj)
    External (_SB_.PC00.RP05.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP05.VDID, FieldUnitObj)
    External (_SB_.PC00.RP06, DeviceObj)
    External (_SB_.PC00.RP06.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PBNU, IntObj)
    External (_SB_.PC00.RP06.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP06.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PRMV, IntObj)
    External (_SB_.PC00.RP06.PRTP, IntObj)
    External (_SB_.PC00.RP06.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP06.PXSX.BOFC, UnknownObj)
    External (_SB_.PC00.RP06.PXSX.BRMT, IntObj)
    External (_SB_.PC00.RP06.PXSX.CIRM, UnknownObj)
    External (_SB_.PC00.RP06.PXSX.CRFI, UnknownObj)
    External (_SB_.PC00.RP06.PXSX.DPRS, UnknownObj)
    External (_SB_.PC00.RP06.PXSX.FDEL, IntObj)
    External (_SB_.PC00.RP06.PXSX.FLRC, UnknownObj)
    External (_SB_.PC00.RP06.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PXSX.PDEL, IntObj)
    External (_SB_.PC00.RP06.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP06.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PXSX.RDLY, IntObj)
    External (_SB_.PC00.RP06.PXSX.RSTY, UnknownObj)
    External (_SB_.PC00.RP06.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP06.PXSX.VDEL, IntObj)
    External (_SB_.PC00.RP06.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PXSX.WVHO, IntObj)
    External (_SB_.PC00.RP06.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.RD3C, IntObj)
    External (_SB_.PC00.RP06.SLOT, IntObj)
    External (_SB_.PC00.RP06.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP06.VDID, FieldUnitObj)
    External (_SB_.PC00.RP07, DeviceObj)
    External (_SB_.PC00.RP07.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PBNU, IntObj)
    External (_SB_.PC00.RP07.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP07.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PRMV, IntObj)
    External (_SB_.PC00.RP07.PRTP, IntObj)
    External (_SB_.PC00.RP07.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP07.PXSX.BOFC, UnknownObj)
    External (_SB_.PC00.RP07.PXSX.BRMT, IntObj)
    External (_SB_.PC00.RP07.PXSX.CIRM, UnknownObj)
    External (_SB_.PC00.RP07.PXSX.CRFI, UnknownObj)
    External (_SB_.PC00.RP07.PXSX.DPRS, UnknownObj)
    External (_SB_.PC00.RP07.PXSX.FDEL, IntObj)
    External (_SB_.PC00.RP07.PXSX.FLRC, UnknownObj)
    External (_SB_.PC00.RP07.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PXSX.PDEL, IntObj)
    External (_SB_.PC00.RP07.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP07.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PXSX.RDLY, IntObj)
    External (_SB_.PC00.RP07.PXSX.RSTY, UnknownObj)
    External (_SB_.PC00.RP07.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP07.PXSX.VDEL, IntObj)
    External (_SB_.PC00.RP07.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PXSX.WVHO, IntObj)
    External (_SB_.PC00.RP07.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.RD3C, IntObj)
    External (_SB_.PC00.RP07.SLOT, IntObj)
    External (_SB_.PC00.RP07.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP07.VDID, FieldUnitObj)
    External (_SB_.PC00.RP08, DeviceObj)
    External (_SB_.PC00.RP08.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PBNU, IntObj)
    External (_SB_.PC00.RP08.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP08.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PRMV, IntObj)
    External (_SB_.PC00.RP08.PRTP, IntObj)
    External (_SB_.PC00.RP08.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP08.PXSX.BOFC, UnknownObj)
    External (_SB_.PC00.RP08.PXSX.BRMT, IntObj)
    External (_SB_.PC00.RP08.PXSX.CIRM, UnknownObj)
    External (_SB_.PC00.RP08.PXSX.CRFI, UnknownObj)
    External (_SB_.PC00.RP08.PXSX.DPRS, UnknownObj)
    External (_SB_.PC00.RP08.PXSX.FDEL, IntObj)
    External (_SB_.PC00.RP08.PXSX.FLRC, UnknownObj)
    External (_SB_.PC00.RP08.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PXSX.PDEL, IntObj)
    External (_SB_.PC00.RP08.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP08.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PXSX.RDLY, IntObj)
    External (_SB_.PC00.RP08.PXSX.RSTY, UnknownObj)
    External (_SB_.PC00.RP08.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP08.PXSX.VDEL, IntObj)
    External (_SB_.PC00.RP08.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PXSX.WVHO, IntObj)
    External (_SB_.PC00.RP08.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.RD3C, IntObj)
    External (_SB_.PC00.RP08.SLOT, IntObj)
    External (_SB_.PC00.RP08.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP08.VDID, FieldUnitObj)
    External (_SB_.PC00.RP09, DeviceObj)
    External (_SB_.PC00.RP09.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PBNU, IntObj)
    External (_SB_.PC00.RP09.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP09.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PRMV, IntObj)
    External (_SB_.PC00.RP09.PRTP, IntObj)
    External (_SB_.PC00.RP09.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.BOFC, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.BRMT, IntObj)
    External (_SB_.PC00.RP09.PXSX.CIRM, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.CRFI, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.DPRS, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.FDEL, IntObj)
    External (_SB_.PC00.RP09.PXSX.FLRC, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PXSX.PDEL, IntObj)
    External (_SB_.PC00.RP09.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PXSX.RDLY, IntObj)
    External (_SB_.PC00.RP09.PXSX.RSTY, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.VDEL, IntObj)
    External (_SB_.PC00.RP09.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PXSX.WVHO, IntObj)
    External (_SB_.PC00.RP09.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.RD3C, IntObj)
    External (_SB_.PC00.RP09.SLOT, IntObj)
    External (_SB_.PC00.RP09.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP09.VDID, FieldUnitObj)
    External (_SB_.PC00.RP10, DeviceObj)
    External (_SB_.PC00.RP10.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PBNU, IntObj)
    External (_SB_.PC00.RP10.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP10.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PRMV, IntObj)
    External (_SB_.PC00.RP10.PRTP, IntObj)
    External (_SB_.PC00.RP10.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.BOFC, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.BRMT, IntObj)
    External (_SB_.PC00.RP10.PXSX.CIRM, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.CRFI, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.DPRS, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.FDEL, IntObj)
    External (_SB_.PC00.RP10.PXSX.FLRC, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PXSX.PDEL, IntObj)
    External (_SB_.PC00.RP10.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PXSX.RDLY, IntObj)
    External (_SB_.PC00.RP10.PXSX.RSTY, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.VDEL, IntObj)
    External (_SB_.PC00.RP10.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PXSX.WVHO, IntObj)
    External (_SB_.PC00.RP10.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.RD3C, IntObj)
    External (_SB_.PC00.RP10.SLOT, IntObj)
    External (_SB_.PC00.RP10.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP10.VDID, FieldUnitObj)
    External (_SB_.PC00.RP11, DeviceObj)
    External (_SB_.PC00.RP11.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PBNU, IntObj)
    External (_SB_.PC00.RP11.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP11.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PRMV, IntObj)
    External (_SB_.PC00.RP11.PRTP, IntObj)
    External (_SB_.PC00.RP11.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP11.PXSX.BOFC, UnknownObj)
    External (_SB_.PC00.RP11.PXSX.BRMT, IntObj)
    External (_SB_.PC00.RP11.PXSX.CIRM, UnknownObj)
    External (_SB_.PC00.RP11.PXSX.CRFI, UnknownObj)
    External (_SB_.PC00.RP11.PXSX.DPRS, UnknownObj)
    External (_SB_.PC00.RP11.PXSX.FDEL, IntObj)
    External (_SB_.PC00.RP11.PXSX.FLRC, UnknownObj)
    External (_SB_.PC00.RP11.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PXSX.PDEL, IntObj)
    External (_SB_.PC00.RP11.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP11.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PXSX.RDLY, IntObj)
    External (_SB_.PC00.RP11.PXSX.RSTY, UnknownObj)
    External (_SB_.PC00.RP11.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP11.PXSX.VDEL, IntObj)
    External (_SB_.PC00.RP11.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PXSX.WVHO, IntObj)
    External (_SB_.PC00.RP11.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.RD3C, IntObj)
    External (_SB_.PC00.RP11.SLOT, IntObj)
    External (_SB_.PC00.RP11.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP11.VDID, FieldUnitObj)
    External (_SB_.PC00.RP12, DeviceObj)
    External (_SB_.PC00.RP12.ADSD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.CBLV, UnknownObj)
    External (_SB_.PC00.RP12.CLID, UnknownObj)
    External (_SB_.PC00.RP12.DD10, UnknownObj)
    External (_SB_.PC00.RP12.DD11, UnknownObj)
    External (_SB_.PC00.RP12.DD12, UnknownObj)
    External (_SB_.PC00.RP12.DD13, UnknownObj)
    External (_SB_.PC00.RP12.DD14, UnknownObj)
    External (_SB_.PC00.RP12.DD15, UnknownObj)
    External (_SB_.PC00.RP12.DDL2, UnknownObj)
    External (_SB_.PC00.RP12.DDL3, UnknownObj)
    External (_SB_.PC00.RP12.DDL4, UnknownObj)
    External (_SB_.PC00.RP12.DDL5, UnknownObj)
    External (_SB_.PC00.RP12.DDL6, UnknownObj)
    External (_SB_.PC00.RP12.DDL7, UnknownObj)
    External (_SB_.PC00.RP12.DDL8, UnknownObj)
    External (_SB_.PC00.RP12.DDL9, UnknownObj)
    External (_SB_.PC00.RP12.DIDL, UnknownObj)
    External (_SB_.PC00.RP12.DLID, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP12.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PBNU, IntObj)
    External (_SB_.PC00.RP12.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP12.PPS0, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PPS3, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PRMV, IntObj)
    External (_SB_.PC00.RP12.PRTP, IntObj)
    External (_SB_.PC00.RP12.PXSX.ASLC, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.BCCX, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.BCLP, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.BOFC, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.BRMT, IntObj)
    External (_SB_.PC00.RP12.PXSX.BTIE, FieldUnitObj)
    External (_SB_.PC00.RP12.PXSX.CIRM, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.CRFI, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DBRL, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGD1, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGD2, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGD3, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGD4, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGD5, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGD6, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGD7, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGD8, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGD9, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGDA, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGDB, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGDC, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGDD, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGDE, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGDF, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGDS, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DGDX, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DNID, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.DPRS, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.EDMX, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.FDEL, IntObj)
    External (_SB_.PC00.RP12.PXSX.FLRC, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.ISGX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PXSX.PDEL, IntObj)
    External (_SB_.PC00.RP12.PXSX.PEGB.PEGE.DEDP, DeviceObj)
    External (_SB_.PC00.RP12.PXSX.PIXX, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PXSX.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PXSX.RDLY, IntObj)
    External (_SB_.PC00.RP12.PXSX.RSTY, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.SCCX, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.VDEL, IntObj)
    External (_SB_.PC00.RP12.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PXSX.WVHO, IntObj)
    External (_SB_.PC00.RP12.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.RD3C, IntObj)
    External (_SB_.PC00.RP12.SLOT, IntObj)
    External (_SB_.PC00.RP12.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP12.VDID, FieldUnitObj)
    External (_SB_.PC00.RP13, DeviceObj)
    External (_SB_.PC00.RP13.PRMV, IntObj)
    External (_SB_.PC00.RP13.PRTP, IntObj)
    External (_SB_.PC00.RP13.RD3C, IntObj)
    External (_SB_.PC00.RP13.SLOT, IntObj)
    External (_SB_.PC00.RP14, DeviceObj)
    External (_SB_.PC00.RP14.PRMV, IntObj)
    External (_SB_.PC00.RP14.PRTP, IntObj)
    External (_SB_.PC00.RP14.RD3C, IntObj)
    External (_SB_.PC00.RP14.SLOT, IntObj)
    External (_SB_.PC00.RP15, DeviceObj)
    External (_SB_.PC00.RP15.PRMV, IntObj)
    External (_SB_.PC00.RP15.PRTP, IntObj)
    External (_SB_.PC00.RP15.RD3C, IntObj)
    External (_SB_.PC00.RP15.SLOT, IntObj)
    External (_SB_.PC00.RP16, DeviceObj)
    External (_SB_.PC00.RP16.PRMV, IntObj)
    External (_SB_.PC00.RP16.PRTP, IntObj)
    External (_SB_.PC00.RP16.RD3C, IntObj)
    External (_SB_.PC00.RP16.SLOT, IntObj)
    External (_SB_.PC00.RP17, DeviceObj)
    External (_SB_.PC00.RP17.PRMV, IntObj)
    External (_SB_.PC00.RP17.PRTP, IntObj)
    External (_SB_.PC00.RP17.RD3C, IntObj)
    External (_SB_.PC00.RP17.SLOT, IntObj)
    External (_SB_.PC00.RP18, DeviceObj)
    External (_SB_.PC00.RP18.PRMV, IntObj)
    External (_SB_.PC00.RP18.PRTP, IntObj)
    External (_SB_.PC00.RP18.RD3C, IntObj)
    External (_SB_.PC00.RP18.SLOT, IntObj)
    External (_SB_.PC00.RP19, DeviceObj)
    External (_SB_.PC00.RP19.PRMV, IntObj)
    External (_SB_.PC00.RP19.PRTP, IntObj)
    External (_SB_.PC00.RP19.RD3C, IntObj)
    External (_SB_.PC00.RP19.SLOT, IntObj)
    External (_SB_.PC00.RP20, DeviceObj)
    External (_SB_.PC00.RP20.PRMV, IntObj)
    External (_SB_.PC00.RP20.PRTP, IntObj)
    External (_SB_.PC00.RP20.RD3C, IntObj)
    External (_SB_.PC00.RP20.SLOT, IntObj)
    External (_SB_.PC00.RP21, DeviceObj)
    External (_SB_.PC00.RP21.PRMV, IntObj)
    External (_SB_.PC00.RP21.PRTP, IntObj)
    External (_SB_.PC00.RP21.RD3C, IntObj)
    External (_SB_.PC00.RP21.SLOT, IntObj)
    External (_SB_.PC00.RP22, DeviceObj)
    External (_SB_.PC00.RP22.PRMV, IntObj)
    External (_SB_.PC00.RP22.PRTP, IntObj)
    External (_SB_.PC00.RP22.RD3C, IntObj)
    External (_SB_.PC00.RP22.SLOT, IntObj)
    External (_SB_.PC00.RP23, DeviceObj)
    External (_SB_.PC00.RP23.PRMV, IntObj)
    External (_SB_.PC00.RP23.PRTP, IntObj)
    External (_SB_.PC00.RP23.RD3C, IntObj)
    External (_SB_.PC00.RP23.SLOT, IntObj)
    External (_SB_.PC00.RP24, DeviceObj)
    External (_SB_.PC00.RP24.PRMV, IntObj)
    External (_SB_.PC00.RP24.PRTP, IntObj)
    External (_SB_.PC00.RP24.RD3C, IntObj)
    External (_SB_.PC00.RP24.SLOT, IntObj)
    External (_SB_.PC00.RP25, DeviceObj)
    External (_SB_.PC00.RP25.PRMV, IntObj)
    External (_SB_.PC00.RP25.PRTP, IntObj)
    External (_SB_.PC00.RP25.RD3C, IntObj)
    External (_SB_.PC00.RP25.SLOT, IntObj)
    External (_SB_.PC00.RP26, DeviceObj)
    External (_SB_.PC00.RP26.PRMV, IntObj)
    External (_SB_.PC00.RP26.PRTP, IntObj)
    External (_SB_.PC00.RP26.RD3C, IntObj)
    External (_SB_.PC00.RP26.SLOT, IntObj)
    External (_SB_.PC00.RP27, DeviceObj)
    External (_SB_.PC00.RP27.PRMV, IntObj)
    External (_SB_.PC00.RP27.PRTP, IntObj)
    External (_SB_.PC00.RP27.RD3C, IntObj)
    External (_SB_.PC00.RP27.SLOT, IntObj)
    External (_SB_.PC00.RP28, DeviceObj)
    External (_SB_.PC00.RP28.PRMV, IntObj)
    External (_SB_.PC00.RP28.PRTP, IntObj)
    External (_SB_.PC00.RP28.RD3C, IntObj)
    External (_SB_.PC00.RP28.SLOT, IntObj)
    External (_SB_.PC00.SAT0.PRT0.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT0.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT0.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT1.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT1.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT1.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT2.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT2.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT2.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT3.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT3.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT3.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT4.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT4.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT4.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT5.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT5.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT5.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT6, DeviceObj)
    External (_SB_.PC00.SAT0.PRT6.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT6.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT6.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT7, DeviceObj)
    External (_SB_.PC00.SAT0.PRT7.PRES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT7.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT7.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.SATC, MethodObj)    // 1 Arguments
    External (_SB_.PC00.SAT0.SATD, MethodObj)    // 4 Arguments
    External (_SB_.PC00.SWAK, MethodObj)    // 2 Arguments
    External (_SB_.PC00.TDM0, DeviceObj)
    External (_SB_.PC00.TDM0._STA, UnknownObj)
    External (_SB_.PC00.TDM0.SCME, UnknownObj)
    External (_SB_.PC00.TDM0.STCM, MethodObj)    // 2 Arguments
    External (_SB_.PC00.TDM1, DeviceObj)
    External (_SB_.PC00.TDM1._STA, UnknownObj)
    External (_SB_.PC00.TDM1.SCME, UnknownObj)
    External (_SB_.PC00.TDM1.STCM, MethodObj)    // 2 Arguments
    External (_SB_.PC00.THC0, DeviceObj)
    External (_SB_.PC00.THC0.CINI, MethodObj)    // 2 Arguments
    External (_SB_.PC00.THC1, DeviceObj)
    External (_SB_.PC00.THC1.CINI, MethodObj)    // 2 Arguments
    External (_SB_.PC00.TXHC, DeviceObj)
    External (_SB_.PC00.UF0E, UnknownObj)
    External (_SB_.PC00.VMD0.PRT0._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT0.D3CV, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.PRT0.RPD_, IntObj)
    External (_SB_.PC00.VMD0.PRT0.RPF_, IntObj)
    External (_SB_.PC00.VMD0.PRT0.RSPI, IntObj)
    External (_SB_.PC00.VMD0.PRT0.RSPT, IntObj)
    External (_SB_.PC00.VMD0.PRT1._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT1.D3CV, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.PRT1.RPD_, IntObj)
    External (_SB_.PC00.VMD0.PRT1.RPF_, IntObj)
    External (_SB_.PC00.VMD0.PRT1.RSPI, IntObj)
    External (_SB_.PC00.VMD0.PRT1.RSPT, IntObj)
    External (_SB_.PC00.VMD0.PRT2._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT2.D3CV, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.PRT2.RPD_, IntObj)
    External (_SB_.PC00.VMD0.PRT2.RPF_, IntObj)
    External (_SB_.PC00.VMD0.PRT2.RSPI, IntObj)
    External (_SB_.PC00.VMD0.PRT2.RSPT, IntObj)
    External (_SB_.PC00.VMD0.PRT3._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT3.D3CV, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.PRT3.RPD_, IntObj)
    External (_SB_.PC00.VMD0.PRT3.RPF_, IntObj)
    External (_SB_.PC00.VMD0.PRT3.RSPI, IntObj)
    External (_SB_.PC00.VMD0.PRT3.RSPT, IntObj)
    External (_SB_.PC00.VMD0.PRT4._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT4.D3CV, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.PRT4.RPD_, IntObj)
    External (_SB_.PC00.VMD0.PRT4.RPF_, IntObj)
    External (_SB_.PC00.VMD0.PRT4.RSPI, IntObj)
    External (_SB_.PC00.VMD0.PRT4.RSPT, IntObj)
    External (_SB_.PC00.VMD0.PRT5._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT5.D3CV, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.PRT5.RPD_, IntObj)
    External (_SB_.PC00.VMD0.PRT5.RPF_, IntObj)
    External (_SB_.PC00.VMD0.PRT5.RSPI, IntObj)
    External (_SB_.PC00.VMD0.PRT5.RSPT, IntObj)
    External (_SB_.PC00.VMD0.PRT6._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT6.D3CV, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.PRT6.RPD_, IntObj)
    External (_SB_.PC00.VMD0.PRT6.RPF_, IntObj)
    External (_SB_.PC00.VMD0.PRT6.RSPI, IntObj)
    External (_SB_.PC00.VMD0.PRT6.RSPT, IntObj)
    External (_SB_.PC00.VMD0.PRT7._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT7.D3CV, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.PRT7.RPD_, IntObj)
    External (_SB_.PC00.VMD0.PRT7.RPF_, IntObj)
    External (_SB_.PC00.VMD0.PRT7.RSPI, IntObj)
    External (_SB_.PC00.VMD0.PRT7.RSPT, IntObj)
    External (_SB_.PC00.VMD0.SP01._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP01.CBAR, MethodObj)    // 3 Arguments
    External (_SB_.PC00.VMD0.SP01.D3CV, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.SP01.RPB_, IntObj)
    External (_SB_.PC00.VMD0.SP01.RPD_, IntObj)
    External (_SB_.PC00.VMD0.SP01.RPF_, IntObj)
    External (_SB_.PC00.VMD0.SP01.RSPI, IntObj)
    External (_SB_.PC00.VMD0.SP01.RSPT, IntObj)
    External (_SB_.PC00.VMD0.SP02._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP02.CBAR, MethodObj)    // 3 Arguments
    External (_SB_.PC00.VMD0.SP02.D3CV, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.SP02.RPB_, IntObj)
    External (_SB_.PC00.VMD0.SP02.RPD_, IntObj)
    External (_SB_.PC00.VMD0.SP02.RPF_, IntObj)
    External (_SB_.PC00.VMD0.SP02.RSPI, IntObj)
    External (_SB_.PC00.VMD0.SP02.RSPT, IntObj)
    External (_SB_.PC00.VMD0.SP03._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP03.CBAR, MethodObj)    // 3 Arguments
    External (_SB_.PC00.VMD0.SP03.D3CV, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.SP03.RPB_, IntObj)
    External (_SB_.PC00.VMD0.SP03.RPD_, IntObj)
    External (_SB_.PC00.VMD0.SP03.RPF_, IntObj)
    External (_SB_.PC00.VMD0.SP03.RSPI, IntObj)
    External (_SB_.PC00.VMD0.SP03.RSPT, IntObj)
    External (_SB_.PC00.VMD0.SP04._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP04.CBAR, MethodObj)    // 3 Arguments
    External (_SB_.PC00.VMD0.SP04.D3CV, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.SP04.RPB_, IntObj)
    External (_SB_.PC00.VMD0.SP04.RPD_, IntObj)
    External (_SB_.PC00.VMD0.SP04.RPF_, IntObj)
    External (_SB_.PC00.VMD0.SP04.RSPI, IntObj)
    External (_SB_.PC00.VMD0.SP04.RSPT, IntObj)
    External (_SB_.PC00.VMD0.SP05._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP05.CBAR, MethodObj)    // 3 Arguments
    External (_SB_.PC00.VMD0.SP05.D3CV, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.SP05.RPB_, IntObj)
    External (_SB_.PC00.VMD0.SP05.RPD_, IntObj)
    External (_SB_.PC00.VMD0.SP05.RPF_, IntObj)
    External (_SB_.PC00.VMD0.SP05.RSPI, IntObj)
    External (_SB_.PC00.VMD0.SP05.RSPT, IntObj)
    External (_SB_.PC00.VMD0.SP06._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP06.CBAR, MethodObj)    // 3 Arguments
    External (_SB_.PC00.VMD0.SP06.D3CV, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.SP06.RPB_, IntObj)
    External (_SB_.PC00.VMD0.SP06.RPD_, IntObj)
    External (_SB_.PC00.VMD0.SP06.RPF_, IntObj)
    External (_SB_.PC00.VMD0.SP06.RSPI, IntObj)
    External (_SB_.PC00.VMD0.SP06.RSPT, IntObj)
    External (_SB_.PC00.VMD0.SP07._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP07.CBAR, MethodObj)    // 3 Arguments
    External (_SB_.PC00.VMD0.SP07.D3CV, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.SP07.RPB_, IntObj)
    External (_SB_.PC00.VMD0.SP07.RPD_, IntObj)
    External (_SB_.PC00.VMD0.SP07.RPF_, IntObj)
    External (_SB_.PC00.VMD0.SP07.RSPI, IntObj)
    External (_SB_.PC00.VMD0.SP07.RSPT, IntObj)
    External (_SB_.PC00.VMD0.SP08._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP08.CBAR, MethodObj)    // 3 Arguments
    External (_SB_.PC00.VMD0.SP08.D3CV, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.SP08.RPB_, IntObj)
    External (_SB_.PC00.VMD0.SP08.RPD_, IntObj)
    External (_SB_.PC00.VMD0.SP08.RPF_, IntObj)
    External (_SB_.PC00.VMD0.SP08.RSPI, IntObj)
    External (_SB_.PC00.VMD0.SP08.RSPT, IntObj)
    External (_SB_.PC00.VMD0.SP09._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP09.CBAR, MethodObj)    // 3 Arguments
    External (_SB_.PC00.VMD0.SP09.D3CV, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.SP09.RPB_, IntObj)
    External (_SB_.PC00.VMD0.SP09.RPD_, IntObj)
    External (_SB_.PC00.VMD0.SP09.RPF_, IntObj)
    External (_SB_.PC00.VMD0.SP09.RSPI, IntObj)
    External (_SB_.PC00.VMD0.SP09.RSPT, IntObj)
    External (_SB_.PC00.VMD0.SP10._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP10.CBAR, MethodObj)    // 3 Arguments
    External (_SB_.PC00.VMD0.SP10.D3CV, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.SP10.RPB_, IntObj)
    External (_SB_.PC00.VMD0.SP10.RPD_, IntObj)
    External (_SB_.PC00.VMD0.SP10.RPF_, IntObj)
    External (_SB_.PC00.VMD0.SP10.RSPI, IntObj)
    External (_SB_.PC00.VMD0.SP10.RSPT, IntObj)
    External (_SB_.PC00.VMD0.SP11._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP11.CBAR, MethodObj)    // 3 Arguments
    External (_SB_.PC00.VMD0.SP11.D3CV, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.SP11.RPB_, IntObj)
    External (_SB_.PC00.VMD0.SP11.RPD_, IntObj)
    External (_SB_.PC00.VMD0.SP11.RPF_, IntObj)
    External (_SB_.PC00.VMD0.SP11.RSPI, IntObj)
    External (_SB_.PC00.VMD0.SP11.RSPT, IntObj)
    External (_SB_.PC00.VMD0.SP12._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP12.CBAR, MethodObj)    // 3 Arguments
    External (_SB_.PC00.VMD0.SP12.D3CV, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.SP12.RPB_, IntObj)
    External (_SB_.PC00.VMD0.SP12.RPD_, IntObj)
    External (_SB_.PC00.VMD0.SP12.RPF_, IntObj)
    External (_SB_.PC00.VMD0.SP12.RSPI, IntObj)
    External (_SB_.PC00.VMD0.SP12.RSPT, IntObj)
    External (_SB_.PC00.VMD0.VDOF, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.VDON, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.VLOF, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.VLON, MethodObj)    // 2 Arguments
    External (_SB_.PC00.XDCI.XDAT, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI._PS0.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI._PS3.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.DUAM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.HS03.VTCM, IntObj)
    External (_SB_.PC00.XHCI.RHUB.HS05.VTCM, IntObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.BRMT, IntObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.CBTA, IntObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.CBTC, IntObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.CBTI, IntObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.CRFP, UnknownObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.RDLY, UnknownObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.WVHO, IntObj)
    External (_SB_.PC00.XHCI.RHUB.INIR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS2X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC02, DeviceObj)
    External (_SB_.PC02.HDAS.HIDW, MethodObj)    // 4 Arguments
    External (_SB_.PC02.HDAS.HIWC, MethodObj)    // 1 Arguments
    External (_SB_.PC02.HDAS.PPMS, MethodObj)    // 1 Arguments
    External (_SB_.PC02.HDAS.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC02.HDAS.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC02.HDBO, UnknownObj)
    External (_SB_.PC02.HIDW, MethodObj)    // 4 Arguments
    External (_SB_.PC02.HIWC, MethodObj)    // 1 Arguments
    External (_SB_.PC02.I2C0.PPDI, UnknownObj)
    External (_SB_.PC02.I2C1.PPDI, UnknownObj)
    External (_SB_.PC02.I2C2.PPDI, UnknownObj)
    External (_SB_.PC02.I2C3.PPDI, UnknownObj)
    External (_SB_.PC02.I2C4.PPDI, UnknownObj)
    External (_SB_.PC02.I2C5.PPDI, UnknownObj)
    External (_SB_.PC02.PPMC.ACET, UnknownObj)
    External (_SB_.PC02.PPMC.ACWA, UnknownObj)
    External (_SB_.PC02.PPMC.DCET, UnknownObj)
    External (_SB_.PC02.PPMC.DCWA, UnknownObj)
    External (_SB_.PC02.RP01, DeviceObj)
    External (_SB_.PC02.RP01.PRMV, IntObj)
    External (_SB_.PC02.RP01.PRTP, IntObj)
    External (_SB_.PC02.RP01.RD3C, IntObj)
    External (_SB_.PC02.RP01.SLOT, IntObj)
    External (_SB_.PC02.RP04, DeviceObj)
    External (_SB_.PC02.RP04.PRMV, IntObj)
    External (_SB_.PC02.RP04.PRTP, IntObj)
    External (_SB_.PC02.RP04.RD3C, IntObj)
    External (_SB_.PC02.RP04.SLOT, IntObj)
    External (_SB_.PC02.RP05, DeviceObj)
    External (_SB_.PC02.RP05.PRMV, IntObj)
    External (_SB_.PC02.RP05.PRTP, IntObj)
    External (_SB_.PC02.RP05.RD3C, IntObj)
    External (_SB_.PC02.RP05.SLOT, IntObj)
    External (_SB_.PC02.RP07, DeviceObj)
    External (_SB_.PC02.RP07.PRMV, IntObj)
    External (_SB_.PC02.RP07.PRTP, IntObj)
    External (_SB_.PC02.RP07.RD3C, IntObj)
    External (_SB_.PC02.RP07.SLOT, IntObj)
    External (_SB_.PC02.RP08, DeviceObj)
    External (_SB_.PC02.RP08.PRMV, IntObj)
    External (_SB_.PC02.RP08.PRTP, IntObj)
    External (_SB_.PC02.RP08.RD3C, IntObj)
    External (_SB_.PC02.RP08.SLOT, IntObj)
    External (_SB_.PC02.RP09, DeviceObj)
    External (_SB_.PC02.RP09.PRMV, IntObj)
    External (_SB_.PC02.RP09.PRTP, IntObj)
    External (_SB_.PC02.RP09.RD3C, IntObj)
    External (_SB_.PC02.RP09.SLOT, IntObj)
    External (_SB_.PC02.RP13, DeviceObj)
    External (_SB_.PC02.RP13.PRMV, IntObj)
    External (_SB_.PC02.RP13.PRTP, IntObj)
    External (_SB_.PC02.RP13.RD3C, IntObj)
    External (_SB_.PC02.RP13.SLOT, IntObj)
    External (_SB_.PC02.RP17, DeviceObj)
    External (_SB_.PC02.RP17.PRMV, IntObj)
    External (_SB_.PC02.RP17.PRTP, IntObj)
    External (_SB_.PC02.RP17.RD3C, IntObj)
    External (_SB_.PC02.RP17.SLOT, IntObj)
    External (_SB_.PC02.RP21, DeviceObj)
    External (_SB_.PC02.RP21.PRMV, IntObj)
    External (_SB_.PC02.RP21.PRTP, IntObj)
    External (_SB_.PC02.RP21.RD3C, IntObj)
    External (_SB_.PC02.RP21.SLOT, IntObj)
    External (_SB_.PC02.SAT0.SATC, MethodObj)    // 1 Arguments
    External (_SB_.PC02.SAT0.SATD, MethodObj)    // 4 Arguments
    External (_SB_.PC02.THC0.CINI, MethodObj)    // 2 Arguments
    External (_SB_.PC02.THC1.CINI, MethodObj)    // 2 Arguments
    External (_SB_.PC02.XDCI.XDAT, MethodObj)    // 0 Arguments
    External (_SB_.PC02.XHCI._PS0.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC02.XHCI._PS3.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC02.XHCI.RHUB.HS03.VTCM, IntObj)
    External (_SB_.PC02.XHCI.RHUB.HS05.VTCM, IntObj)
    External (_SB_.PC02.XHCI.RHUB.INIR, MethodObj)    // 0 Arguments
    External (_SB_.PC02.XHCI.RHUB.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC02.XHCI.RHUB.PS2X, MethodObj)    // 0 Arguments
    External (_SB_.PC02.XHCI.RHUB.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PDTS, UnknownObj)
    External (_SB_.PGPI.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.PKGA, UnknownObj)
    External (_SB_.PR00._PPC, MethodObj)    // 0 Arguments
    External (_SB_.PR00._PSS, MethodObj)    // 0 Arguments
    External (_SB_.PR00.LPSS, PkgObj)
    External (_SB_.PR00.TPSS, PkgObj)
    External (_SB_.PWRB, DeviceObj)
    External (_SB_.PWRB.PBST, IntObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.TCWK, MethodObj)    // 1 Arguments
    External (_SB_.TPM_.PTS_, MethodObj)    // 1 Arguments
    External (_SB_.TRPD, UnknownObj)
    External (_SB_.TRPF, UnknownObj)
    External (_TZ_.ETMD, IntObj)
    External (_TZ_.TZ00, DeviceObj)
    External (_TZ_.TZ00._TMP, MethodObj)    // 0 Arguments
    External (AC0F, FieldUnitObj)
    External (AC1F, FieldUnitObj)
    External (ACET, IntObj)
    External (ACWA, IntObj)
    External (ADBG, MethodObj)    // 1 Arguments
    External (ARLP, UnknownObj)
    External (BGIA, IntObj)
    External (BGMA, IntObj)
    External (BGMS, IntObj)
    External (BRMT, IntObj)
    External (CGLS, UnknownObj)
    External (CNMT, UnknownObj)
    External (CRBI, UnknownObj)
    External (DBRL, IntObj)
    External (DCET, IntObj)
    External (DCWA, IntObj)
    External (DGBA, UnknownObj)
    External (DGD1, IntObj)
    External (DGD2, IntObj)
    External (DGD3, IntObj)
    External (DGD4, IntObj)
    External (DGD5, IntObj)
    External (DGD6, IntObj)
    External (DGD7, IntObj)
    External (DGD8, IntObj)
    External (DGD9, IntObj)
    External (DGDA, IntObj)
    External (DGDB, IntObj)
    External (DGDC, IntObj)
    External (DGDD, IntObj)
    External (DGDE, IntObj)
    External (DGDF, IntObj)
    External (DGDX, UnknownObj)
    External (DIDX, UnknownObj)
    External (DIDY, UnknownObj)
    External (DME0, UnknownObj)
    External (DME1, UnknownObj)
    External (DPRS, IntObj)
    External (DPTR, IntObj)
    External (DRRD, UnknownObj)
    External (DSCE, IntObj)
    External (DTFS, UnknownObj)
    External (DTRT, UnknownObj)
    External (EPTU, FieldUnitObj)
    External (ESPC, UnknownObj)
    External (GBES, UnknownObj)
    External (GMIO, MethodObj)    // 3 Arguments
    External (GPRV, MethodObj)    // 2 Arguments
    External (HDBO, UnknownObj)
    External (HGDT, UnknownObj)
    External (IGDS, FieldUnitObj)
    External (ISAR, MethodObj)    // 4 Arguments
    External (ITSP, IntObj)
    External (LIDS, FieldUnitObj)
    External (M32B, IntObj)
    External (M32L, IntObj)
    External (M64B, IntObj)
    External (M64L, IntObj)
    External (MDBG, MethodObj)    // 1 Arguments
    External (ODBG, MethodObj)    // 1 Arguments
    External (P0WK, UnknownObj)
    External (P1WK, UnknownObj)
    External (P2WK, UnknownObj)
    External (P3WK, UnknownObj)
    External (PBNU, IntObj)
    External (PBSS, FieldUnitObj)
    External (PCHS, FieldUnitObj)
    External (PG3S, UnknownObj)
    External (PPOE, UnknownObj)
    External (PSON, UnknownObj)
    External (PWRS, FieldUnitObj)
    External (RPN0, IntObj)
    External (RPN1, IntObj)
    External (RPS0, IntObj)
    External (RPS1, IntObj)
    External (RPSG, FieldUnitObj)
    External (RSTY, IntObj)
    External (SIME, UnknownObj)
    External (SPNT, MethodObj)    // 0 Arguments
    External (SPTS, MethodObj)    // 1 Arguments
    External (STD3, FieldUnitObj)
    External (SWAK, MethodObj)    // 2 Arguments
    External (TDCE, UnknownObj)
    External (TFWB, FieldUnitObj)
    External (THCE, UnknownObj)
    External (TRE0, UnknownObj)
    External (TRE1, UnknownObj)
    External (TRE2, UnknownObj)
    External (TRE3, UnknownObj)
    External (TVBS, FieldUnitObj)
    External (VDSD, IntObj)
    External (VMDE, FieldUnitObj)
    External (VMSP, UnknownObj)
    External (XBAS, UnknownObj)
    External (ZPPB, FieldUnitObj)

    Name (MCHB, 0xFEDC0000)
    Name (MCHL, 0x00020000)
    Name (EGPB, 0xFEDA1000)
    Name (EGPL, 0x1000)
    Name (DMIB, 0xFEDA0000)
    Name (DMIL, 0x1000)
    Name (VTBS, 0xFC800000)
    Name (VTLN, 0x00020000)
    Name (CPVD, Zero)
    Name (SMIP, 0xB2)
    Name (PMBA, 0x1800)
    Name (SMCR, 0x1830)
    Name (TCBR, 0xFED08000)
    Name (TCLT, 0x1000)
    Name (SMBL, 0x20)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (ITSW, 0xBD)
    Name (FMBL, One)
    Name (FDTP, 0x02)
    Name (FUPS, 0x04)
    Name (FUWS, 0x03)
    Name (FEMD, 0x04)
    Name (IOBS, Zero)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, One)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (MBEC, 0xFFFF)
    Name (PEBS, 0xC0000000)
    Name (PELN, 0x10000000)
    Name (CSMI, 0x61)
    Name (FHPP, One)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, Zero)
    Name (TTDP, One)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPBS, 0x1000)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPCS, 0x1000)
    Name (TPMM, 0xFED40000)
    Name (FTPM, 0xFED40040)
    Name (PPIM, 0x65844018)
    Name (PPIL, 0x1C)
    Name (AMDT, Zero)
    Name (TPMF, One)
    Name (PPIV, One)
    Name (DTP1, One)
    Name (SANB, 0x65844C98)
    Name (SANL, 0x0138)
    Name (VMNB, 0x65844E18)
    Name (VMNL, 0x000B)
    Name (BRMT, Zero)
    Name (RDLY, 0xA0)
    OperationRegion (SANV, SystemMemory, SANB, SANL)
    Field (SANV, AnyAcc, Lock, Preserve)
    {
        ASLB,   32, 
        IGDS,   8, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        DID9,   32, 
        DIDA,   32, 
        DIDB,   32, 
        DIDC,   32, 
        DIDD,   32, 
        DIDE,   32, 
        DIDF,   32, 
        DIDX,   32, 
        NXD1,   32, 
        NXD2,   32, 
        NXD3,   32, 
        NXD4,   32, 
        NXD5,   32, 
        NXD6,   32, 
        NXD7,   32, 
        NXD8,   32, 
        NXDX,   32, 
        LIDS,   8, 
        BRTL,   8, 
        ALSE,   8, 
        LLOW,   8, 
        LHIH,   8, 
        IPTP,   8, 
        EDPV,   8, 
        DLPW,   16, 
        DLHR,   16, 
        XBAS,   32, 
        AMDA,   32, 
        LTRZ,   8, 
        M64B,   64, 
        M64L,   64, 
        CPEX,   32, 
        M32B,   32, 
        M32L,   32, 
        P0WK,   32, 
        P1WK,   32, 
        P2WK,   32, 
        VTDS,   8, 
        VTB1,   32, 
        VTB2,   32, 
        VTB3,   32, 
        VTB4,   32, 
        VTB5,   32, 
        VTB6,   32, 
        VTB7,   32, 
        VE1V,   16, 
        VE2V,   16, 
        RPIN,   8, 
        RPBA,   32, 
        SIME,   8, 
        THCE,   8, 
        TDCE,   8, 
        DME0,   8, 
        DME1,   8, 
        TRE0,   8, 
        TRE1,   8, 
        TRE2,   8, 
        TRE3,   8, 
        TPA0,   32, 
        TPA1,   32, 
        TPA2,   32, 
        TPA3,   32, 
        TCDS,   32, 
        TCIT,   8, 
        TCIR,   8, 
        TRTD,   8, 
        ITM0,   32, 
        ITM1,   32, 
        LTE0,   8, 
        LTE1,   8, 
        LTE2,   8, 
        LTE3,   8, 
        PSL0,   16, 
        PSL1,   16, 
        PSL2,   16, 
        PSL3,   16, 
        PNS0,   16, 
        PNS1,   16, 
        PNS2,   16, 
        PNS3,   16, 
        IMRY,   8, 
        TIVS,   8, 
        DIDY,   32, 
        NXDY,   32, 
        SLTS,   8, 
        MPGN,   8, 
        CMBM,   8, 
        DPMS,   8, 
        PMSA,   64, 
        PMRL,   64, 
        PBR1,   8, 
        PBR2,   8, 
        PBR3,   8, 
        REGO,   16, 
        IOMB,   64, 
        RTBM,   8, 
        RPCC,   32
    }

    OperationRegion (VMNV, SystemMemory, VMNB, VMNL)
    Field (VMNV, AnyAcc, Lock, Preserve)
    {
        VMDE,   8, 
        VMSP,   32, 
        VMPP,   32, 
        VMS0,   8, 
        PBUS,   8
    }

    OperationRegion (GNVS, SystemMemory, 0x6580C000, 0x0D8B)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        PWRS,   8, 
        DBGS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        REVN,   8, 
        APIC,   8, 
        TCNT,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        C67L,   8, 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        CMCP,   8, 
        CIRP,   8, 
        SMSC,   8, 
        W381,   8, 
        SMC1,   8, 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        MEFE,   8, 
        DSTS,   8, 
        MORD,   8, 
        TCGP,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        IDEM,   8, 
        PLID,   8, 
        BTYP,   8, 
        OSCC,   8, 
        NEXP,   8, 
        SBV1,   8, 
        SBV2,   8, 
        ECON,   8, 
        DSEN,   8, 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        VFN2,   8, 
        VFN3,   8, 
        VFN4,   8, 
        VFN5,   8, 
        VFN6,   8, 
        VFN7,   8, 
        VFN8,   8, 
        VFN9,   8, 
        PNHM,   32, 
        TBAL,   32, 
        TBAH,   32, 
        TSOD,   8, 
        PFLV,   8, 
        BREV,   16, 
        PAMT,   8, 
        AC0F,   8, 
        AC1F,   8, 
        XTUB,   32, 
        XTUS,   32, 
        XMPB,   32, 
        DDRF,   8, 
        RTD3,   8, 
        PEP0,   8, 
        PEP3,   8, 
        PGRT,   8, 
        S0ID,   8, 
        PUIS,   8, 
        CTDB,   8, 
        DKSM,   8, 
        SIO1,   16, 
        SIO2,   16, 
        SPBA,   16, 
        Offset (0x1F3), 
        PG3S,   8, 
        XHPR,   8, 
        RIC0,   8, 
        GBSX,   8, 
        AUDD,   16, 
        IC0D,   16, 
        IC1D,   16, 
        IC1S,   16, 
        VRRD,   16, 
        PSCP,   8, 
        I20D,   16, 
        I21D,   16, 
        RCG0,   16, 
        RCG1,   16, 
        STD3,   8, 
        P2ME,   8, 
        SCMK,   8, 
        SSH0,   16, 
        SSL0,   16, 
        SSD0,   16, 
        FMH0,   16, 
        FML0,   16, 
        FMD0,   16, 
        FPH0,   16, 
        FPL0,   16, 
        FPD0,   16, 
        HSH0,   16, 
        HSL0,   16, 
        HSD0,   16, 
        Offset (0x23D), 
        SSH1,   16, 
        SSL1,   16, 
        SSD1,   16, 
        FMH1,   16, 
        FML1,   16, 
        FMD1,   16, 
        FPH1,   16, 
        FPL1,   16, 
        FPD1,   16, 
        HSH1,   16, 
        HSL1,   16, 
        HSD1,   16, 
        Offset (0x256), 
        SSH2,   16, 
        SSL2,   16, 
        SSD2,   16, 
        FMH2,   16, 
        FML2,   16, 
        FMD2,   16, 
        FPH2,   16, 
        FPL2,   16, 
        FPD2,   16, 
        HSH2,   16, 
        HSL2,   16, 
        HSD2,   16, 
        Offset (0x26F), 
        SSH3,   16, 
        SSL3,   16, 
        SSD3,   16, 
        FMH3,   16, 
        FML3,   16, 
        FMD3,   16, 
        FPH3,   16, 
        FPL3,   16, 
        FPD3,   16, 
        HSH3,   16, 
        HSL3,   16, 
        HSD3,   16, 
        Offset (0x288), 
        SSH4,   16, 
        SSL4,   16, 
        SSD4,   16, 
        FMH4,   16, 
        FML4,   16, 
        FMD4,   16, 
        FPH4,   16, 
        FPL4,   16, 
        FPD4,   16, 
        HSH4,   16, 
        HSL4,   16, 
        HSD4,   16, 
        Offset (0x2A1), 
        SSH5,   16, 
        SSL5,   16, 
        SSD5,   16, 
        FMH5,   16, 
        FML5,   16, 
        FMD5,   16, 
        FPH5,   16, 
        FPL5,   16, 
        FPD5,   16, 
        HSH5,   16, 
        HSL5,   16, 
        HSD5,   16, 
        Offset (0x2BA), 
        M0C0,   16, 
        M1C0,   16, 
        M0C1,   16, 
        M1C1,   16, 
        M0C2,   16, 
        M1C2,   16, 
        M0C3,   16, 
        M1C3,   16, 
        M0C4,   16, 
        M1C4,   16, 
        M0C5,   16, 
        M1C5,   16, 
        M0C6,   16, 
        M1C6,   16, 
        M0C7,   16, 
        M1C7,   16, 
        M0C8,   16, 
        M1C8,   16, 
        Offset (0x2DF), 
        M0C9,   16, 
        M1C9,   16, 
        M0CA,   16, 
        M1CA,   16, 
        M0CB,   16, 
        M1CB,   16, 
        Offset (0x2EC), 
        GIRQ,   32, 
        DMTP,   8, 
        DMTD,   8, 
        DMSH,   8, 
        SHSB,   8, 
        PLCS,   8, 
        PLVL,   16, 
        WWSD,   8, 
        CVSD,   8, 
        SSDD,   8, 
        INLD,   8, 
        IFAT,   8, 
        IFPT,   8, 
        IFCT,   8, 
        IFHT,   8, 
        USBH,   8, 
        BCV4,   8, 
        WTV0,   8, 
        WTV1,   8, 
        APFU,   8, 
        Offset (0x30A), 
        PEPC,   64, 
        VRSD,   16, 
        PB1E,   8, 
        GNID,   8, 
        Offset (0x320), 
        AUPL,   32, 
        ESPC,   8, 
        PSME,   8, 
        PDT1,   8, 
        PLM1,   32, 
        PTW1,   32, 
        DDT1,   8, 
        DDP1,   8, 
        DLI1,   16, 
        DPL1,   16, 
        DTW1,   32, 
        DMI1,   16, 
        DMA1,   16, 
        DMT1,   16, 
        WIFE,   8, 
        DOM1,   8, 
        LIM1,   16, 
        TIM1,   32, 
        TRD0,   8, 
        TRL0,   8, 
        TRD1,   8, 
        TRL1,   8, 
        WDM1,   8, 
        CID1,   16, 
        Offset (0x3FB), 
        SDS0,   8, 
        SDS1,   8, 
        SDS2,   8, 
        SDS3,   8, 
        SDS4,   8, 
        SDS5,   8, 
        SDS6,   8, 
        SDS7,   8, 
        SDS8,   8, 
        SDS9,   8, 
        SDSA,   8, 
        TPLT,   8, 
        TPLM,   8, 
        TPLB,   8, 
        TPLH,   16, 
        TPLS,   8, 
        TPDT,   8, 
        TPDM,   8, 
        TPDB,   8, 
        TPDH,   16, 
        TPDS,   8, 
        FPTT,   8, 
        FPTM,   8, 
        WTVX,   8, 
        WITX,   8, 
        GPTD,   8, 
        GDBT,   16, 
        UTKX,   8, 
        SPTD,   8, 
        Offset (0x42A), 
        ATLB,   32, 
        SDM0,   8, 
        SDM1,   8, 
        SDM2,   8, 
        SDM3,   8, 
        SDM4,   8, 
        SDM5,   8, 
        SDM6,   8, 
        SDM7,   8, 
        SDM8,   8, 
        SDM9,   8, 
        SDMA,   8, 
        SDMB,   8, 
        Offset (0x43B), 
        USTP,   8, 
        Offset (0x465), 
        GFPS,   32, 
        GFPI,   32, 
        WBBR,   32, 
        GBTK,   32, 
        GBTI,   32, 
        GPDI,   32, 
        CL00,   8, 
        CL01,   8, 
        CL02,   8, 
        CL03,   8, 
        CL04,   8, 
        CL05,   8, 
        L0EN,   8, 
        L1EN,   8, 
        L2EN,   8, 
        L3EN,   8, 
        L4EN,   8, 
        L5EN,   8, 
        L0LC,   8, 
        L1LC,   8, 
        L2LC,   8, 
        L3LC,   8, 
        L4LC,   8, 
        L5LC,   8, 
        C0VE,   8, 
        C0TP,   8, 
        C0CV,   8, 
        C0IC,   32, 
        C0GP,   8, 
        C0IB,   8, 
        C0IA,   16, 
        C0P0,   8, 
        C0P1,   8, 
        C0P2,   8, 
        C0P3,   8, 
        C0P4,   8, 
        C0P5,   8, 
        C0G0,   8, 
        C0G1,   8, 
        C0G2,   8, 
        C0G3,   8, 
        C0G4,   8, 
        C0G5,   8, 
        C0F0,   8, 
        C0F1,   8, 
        C0F2,   8, 
        C0F3,   8, 
        C0F4,   8, 
        C0F5,   8, 
        C0A0,   8, 
        C0A1,   8, 
        C0A2,   8, 
        C0A3,   8, 
        C0A4,   8, 
        C0A5,   8, 
        C0I0,   8, 
        C0I1,   8, 
        C0I2,   8, 
        C0I3,   8, 
        C0I4,   8, 
        C0I5,   8, 
        C0PL,   8, 
        C0W0,   8, 
        C0W1,   8, 
        C0W2,   8, 
        C0W3,   8, 
        C0SP,   8, 
        C0W4,   8, 
        C0W5,   8, 
        C0CS,   8, 
        C1VE,   8, 
        C1TP,   8, 
        C1CV,   8, 
        C1IC,   32, 
        C1GP,   8, 
        C1IB,   8, 
        C1IA,   16, 
        C1P0,   8, 
        C1P1,   8, 
        C1P2,   8, 
        C1P3,   8, 
        C1P4,   8, 
        C1P5,   8, 
        C1G0,   8, 
        C1G1,   8, 
        C1G2,   8, 
        C1G3,   8, 
        C1G4,   8, 
        C1G5,   8, 
        C1F0,   8, 
        C1F1,   8, 
        C1F2,   8, 
        C1F3,   8, 
        C1F4,   8, 
        C1F5,   8, 
        C1A0,   8, 
        C1A1,   8, 
        C1A2,   8, 
        C1A3,   8, 
        C1A4,   8, 
        C1A5,   8, 
        C1I0,   8, 
        C1I1,   8, 
        C1I2,   8, 
        C1I3,   8, 
        C1I4,   8, 
        C1I5,   8, 
        C1PL,   8, 
        C1W0,   8, 
        C1W1,   8, 
        C1W2,   8, 
        C1W3,   8, 
        C1SP,   8, 
        C1W4,   8, 
        C1W5,   8, 
        C1CS,   8, 
        C2VE,   8, 
        C2TP,   8, 
        C2CV,   8, 
        C2IC,   32, 
        C2GP,   8, 
        C2IB,   8, 
        C2IA,   16, 
        C2P0,   8, 
        C2P1,   8, 
        C2P2,   8, 
        C2P3,   8, 
        C2P4,   8, 
        C2P5,   8, 
        C2G0,   8, 
        C2G1,   8, 
        C2G2,   8, 
        C2G3,   8, 
        C2G4,   8, 
        C2G5,   8, 
        C2F0,   8, 
        C2F1,   8, 
        C2F2,   8, 
        C2F3,   8, 
        C2F4,   8, 
        C2F5,   8, 
        C2A0,   8, 
        C2A1,   8, 
        C2A2,   8, 
        C2A3,   8, 
        C2A4,   8, 
        C2A5,   8, 
        C2I0,   8, 
        C2I1,   8, 
        C2I2,   8, 
        C2I3,   8, 
        C2I4,   8, 
        C2I5,   8, 
        C2PL,   8, 
        C2W0,   8, 
        C2W1,   8, 
        C2W2,   8, 
        C2W3,   8, 
        C2SP,   8, 
        C2W4,   8, 
        C2W5,   8, 
        C2CS,   8, 
        C3VE,   8, 
        C3TP,   8, 
        C3CV,   8, 
        C3IC,   32, 
        C3GP,   8, 
        C3IB,   8, 
        C3IA,   16, 
        C3P0,   8, 
        C3P1,   8, 
        C3P2,   8, 
        C3P3,   8, 
        C3P4,   8, 
        C3P5,   8, 
        C3G0,   8, 
        C3G1,   8, 
        C3G2,   8, 
        C3G3,   8, 
        C3G4,   8, 
        C3G5,   8, 
        C3F0,   8, 
        C3F1,   8, 
        C3F2,   8, 
        C3F3,   8, 
        C3F4,   8, 
        C3F5,   8, 
        C3A0,   8, 
        C3A1,   8, 
        C3A2,   8, 
        C3A3,   8, 
        C3A4,   8, 
        C3A5,   8, 
        C3I0,   8, 
        C3I1,   8, 
        C3I2,   8, 
        C3I3,   8, 
        C3I4,   8, 
        C3I5,   8, 
        C3PL,   8, 
        C3W0,   8, 
        C3W1,   8, 
        C3W2,   8, 
        C3W3,   8, 
        C3SP,   8, 
        C3W4,   8, 
        C3W5,   8, 
        C3CS,   8, 
        C4VE,   8, 
        C4TP,   8, 
        C4CV,   8, 
        C4IC,   32, 
        C4GP,   8, 
        C4IB,   8, 
        C4IA,   16, 
        C4P0,   8, 
        C4P1,   8, 
        C4P2,   8, 
        C4P3,   8, 
        C4P4,   8, 
        C4P5,   8, 
        C4G0,   8, 
        C4G1,   8, 
        C4G2,   8, 
        C4G3,   8, 
        C4G4,   8, 
        C4G5,   8, 
        C4F0,   8, 
        C4F1,   8, 
        C4F2,   8, 
        C4F3,   8, 
        C4F4,   8, 
        C4F5,   8, 
        C4A0,   8, 
        C4A1,   8, 
        C4A2,   8, 
        C4A3,   8, 
        C4A4,   8, 
        C4A5,   8, 
        C4I0,   8, 
        C4I1,   8, 
        C4I2,   8, 
        C4I3,   8, 
        C4I4,   8, 
        C4I5,   8, 
        C4PL,   8, 
        C4W0,   8, 
        C4W1,   8, 
        C4W2,   8, 
        C4W3,   8, 
        C4SP,   8, 
        C4W4,   8, 
        C4W5,   8, 
        C4CS,   8, 
        C5VE,   8, 
        C5TP,   8, 
        C5CV,   8, 
        C5IC,   32, 
        C5GP,   8, 
        C5IB,   8, 
        C5IA,   16, 
        C5P0,   8, 
        C5P1,   8, 
        C5P2,   8, 
        C5P3,   8, 
        C5P4,   8, 
        C5P5,   8, 
        C5G0,   8, 
        C5G1,   8, 
        C5G2,   8, 
        C5G3,   8, 
        C5G4,   8, 
        C5G5,   8, 
        C5F0,   8, 
        C5F1,   8, 
        C5F2,   8, 
        C5F3,   8, 
        C5F4,   8, 
        C5F5,   8, 
        C5A0,   8, 
        C5A1,   8, 
        C5A2,   8, 
        C5A3,   8, 
        C5A4,   8, 
        C5A5,   8, 
        C5I0,   8, 
        C5I1,   8, 
        C5I2,   8, 
        C5I3,   8, 
        C5I4,   8, 
        C5I5,   8, 
        C5PL,   8, 
        C5W0,   8, 
        C5W1,   8, 
        C5W2,   8, 
        C5W3,   8, 
        C5SP,   8, 
        C5W4,   8, 
        C5W5,   8, 
        C5CS,   8, 
        L0SM,   8, 
        L0H0,   8, 
        L0H1,   8, 
        L0H2,   8, 
        L0H3,   8, 
        L0H4,   8, 
        L0H5,   8, 
        L0H6,   8, 
        L0H7,   8, 
        L0H8,   8, 
        L0PL,   8, 
        L0M0,   8, 
        L0M1,   8, 
        L0M2,   8, 
        L0M3,   8, 
        L0M4,   8, 
        L0M5,   8, 
        L0M6,   8, 
        L0M7,   8, 
        L0M8,   8, 
        L0M9,   8, 
        L0MA,   8, 
        L0MB,   8, 
        L0MC,   8, 
        L0MD,   8, 
        L0ME,   8, 
        L0MF,   8, 
        L0DI,   8, 
        L0BS,   8, 
        L0A0,   16, 
        L0A1,   16, 
        L0A2,   16, 
        L0A3,   16, 
        L0A4,   16, 
        L0A5,   16, 
        L0A6,   16, 
        L0A7,   16, 
        L0A8,   16, 
        L0A9,   16, 
        L0AA,   16, 
        L0AB,   16, 
        L0D0,   8, 
        L0D1,   8, 
        L0D2,   8, 
        L0D3,   8, 
        L0D4,   8, 
        L0D5,   8, 
        L0D6,   8, 
        L0D7,   8, 
        L0D8,   8, 
        L0D9,   8, 
        L0DA,   8, 
        L0DB,   8, 
        L0DV,   8, 
        L0CV,   8, 
        L0LU,   8, 
        L0NL,   8, 
        L0EE,   8, 
        L0VC,   8, 
        L0FS,   8, 
        L0LE,   8, 
        L0DG,   8, 
        L0CK,   32, 
        L0CL,   8, 
        L0PP,   8, 
        L0VR,   8, 
        L0FD,   8, 
        L1SM,   8, 
        L1H0,   8, 
        L1H1,   8, 
        L1H2,   8, 
        L1H3,   8, 
        L1H4,   8, 
        L1H5,   8, 
        L1H6,   8, 
        L1H7,   8, 
        L1H8,   8, 
        L1PL,   8, 
        L1M0,   8, 
        L1M1,   8, 
        L1M2,   8, 
        L1M3,   8, 
        L1M4,   8, 
        L1M5,   8, 
        L1M6,   8, 
        L1M7,   8, 
        L1M8,   8, 
        L1M9,   8, 
        L1MA,   8, 
        L1MB,   8, 
        L1MC,   8, 
        L1MD,   8, 
        L1ME,   8, 
        L1MF,   8, 
        L1DI,   8, 
        L1BS,   8, 
        L1A0,   16, 
        L1A1,   16, 
        L1A2,   16, 
        L1A3,   16, 
        L1A4,   16, 
        L1A5,   16, 
        L1A6,   16, 
        L1A7,   16, 
        L1A8,   16, 
        L1A9,   16, 
        L1AA,   16, 
        L1AB,   16, 
        L1D0,   8, 
        L1D1,   8, 
        L1D2,   8, 
        L1D3,   8, 
        L1D4,   8, 
        L1D5,   8, 
        L1D6,   8, 
        L1D7,   8, 
        L1D8,   8, 
        L1D9,   8, 
        L1DA,   8, 
        L1DB,   8, 
        L1DV,   8, 
        L1CV,   8, 
        L1LU,   8, 
        L1NL,   8, 
        L1EE,   8, 
        L1VC,   8, 
        L1FS,   8, 
        L1LE,   8, 
        L1DG,   8, 
        L1CK,   32, 
        L1CL,   8, 
        L1PP,   8, 
        L1VR,   8, 
        L1FD,   8, 
        L2SM,   8, 
        L2H0,   8, 
        L2H1,   8, 
        L2H2,   8, 
        L2H3,   8, 
        L2H4,   8, 
        L2H5,   8, 
        L2H6,   8, 
        L2H7,   8, 
        L2H8,   8, 
        L2PL,   8, 
        L2M0,   8, 
        L2M1,   8, 
        L2M2,   8, 
        L2M3,   8, 
        L2M4,   8, 
        L2M5,   8, 
        L2M6,   8, 
        L2M7,   8, 
        L2M8,   8, 
        L2M9,   8, 
        L2MA,   8, 
        L2MB,   8, 
        L2MC,   8, 
        L2MD,   8, 
        L2ME,   8, 
        L2MF,   8, 
        L2DI,   8, 
        L2BS,   8, 
        L2A0,   16, 
        L2A1,   16, 
        L2A2,   16, 
        L2A3,   16, 
        L2A4,   16, 
        L2A5,   16, 
        L2A6,   16, 
        L2A7,   16, 
        L2A8,   16, 
        L2A9,   16, 
        L2AA,   16, 
        L2AB,   16, 
        L2D0,   8, 
        L2D1,   8, 
        L2D2,   8, 
        L2D3,   8, 
        L2D4,   8, 
        L2D5,   8, 
        L2D6,   8, 
        L2D7,   8, 
        L2D8,   8, 
        L2D9,   8, 
        L2DA,   8, 
        L2DB,   8, 
        L2DV,   8, 
        L2CV,   8, 
        L2LU,   8, 
        L2NL,   8, 
        L2EE,   8, 
        L2VC,   8, 
        L2FS,   8, 
        L2LE,   8, 
        L2DG,   8, 
        L2CK,   32, 
        L2CL,   8, 
        L2PP,   8, 
        L2VR,   8, 
        L2FD,   8, 
        L3SM,   8, 
        L3H0,   8, 
        L3H1,   8, 
        L3H2,   8, 
        L3H3,   8, 
        L3H4,   8, 
        L3H5,   8, 
        L3H6,   8, 
        L3H7,   8, 
        L3H8,   8, 
        L3PL,   8, 
        L3M0,   8, 
        L3M1,   8, 
        L3M2,   8, 
        L3M3,   8, 
        L3M4,   8, 
        L3M5,   8, 
        L3M6,   8, 
        L3M7,   8, 
        L3M8,   8, 
        L3M9,   8, 
        L3MA,   8, 
        L3MB,   8, 
        L3MC,   8, 
        L3MD,   8, 
        L3ME,   8, 
        L3MF,   8, 
        L3DI,   8, 
        L3BS,   8, 
        L3A0,   16, 
        L3A1,   16, 
        L3A2,   16, 
        L3A3,   16, 
        L3A4,   16, 
        L3A5,   16, 
        L3A6,   16, 
        L3A7,   16, 
        L3A8,   16, 
        L3A9,   16, 
        L3AA,   16, 
        L3AB,   16, 
        L3D0,   8, 
        L3D1,   8, 
        L3D2,   8, 
        L3D3,   8, 
        L3D4,   8, 
        L3D5,   8, 
        L3D6,   8, 
        L3D7,   8, 
        L3D8,   8, 
        L3D9,   8, 
        L3DA,   8, 
        L3DB,   8, 
        L3DV,   8, 
        L3CV,   8, 
        L3LU,   8, 
        L3NL,   8, 
        L3EE,   8, 
        L3VC,   8, 
        L3FS,   8, 
        L3LE,   8, 
        L3DG,   8, 
        L3CK,   32, 
        L3CL,   8, 
        L3PP,   8, 
        L3VR,   8, 
        L3FD,   8, 
        L4SM,   8, 
        L4H0,   8, 
        L4H1,   8, 
        L4H2,   8, 
        L4H3,   8, 
        L4H4,   8, 
        L4H5,   8, 
        L4H6,   8, 
        L4H7,   8, 
        L4H8,   8, 
        L4PL,   8, 
        L4M0,   8, 
        L4M1,   8, 
        L4M2,   8, 
        L4M3,   8, 
        L4M4,   8, 
        L4M5,   8, 
        L4M6,   8, 
        L4M7,   8, 
        L4M8,   8, 
        L4M9,   8, 
        L4MA,   8, 
        L4MB,   8, 
        L4MC,   8, 
        L4MD,   8, 
        L4ME,   8, 
        L4MF,   8, 
        L4DI,   8, 
        L4BS,   8, 
        L4A0,   16, 
        L4A1,   16, 
        L4A2,   16, 
        L4A3,   16, 
        L4A4,   16, 
        L4A5,   16, 
        L4A6,   16, 
        L4A7,   16, 
        L4A8,   16, 
        L4A9,   16, 
        L4AA,   16, 
        L4AB,   16, 
        L4D0,   8, 
        L4D1,   8, 
        L4D2,   8, 
        L4D3,   8, 
        L4D4,   8, 
        L4D5,   8, 
        L4D6,   8, 
        L4D7,   8, 
        L4D8,   8, 
        L4D9,   8, 
        L4DA,   8, 
        L4DB,   8, 
        L4DV,   8, 
        L4CV,   8, 
        L4LU,   8, 
        L4NL,   8, 
        L4EE,   8, 
        L4VC,   8, 
        L4FS,   8, 
        L4LE,   8, 
        L4DG,   8, 
        L4CK,   32, 
        L4CL,   8, 
        L4PP,   8, 
        L4VR,   8, 
        L4FD,   8, 
        L5SM,   8, 
        L5H0,   8, 
        L5H1,   8, 
        L5H2,   8, 
        L5H3,   8, 
        L5H4,   8, 
        L5H5,   8, 
        L5H6,   8, 
        L5H7,   8, 
        L5H8,   8, 
        L5PL,   8, 
        L5M0,   8, 
        L5M1,   8, 
        L5M2,   8, 
        L5M3,   8, 
        L5M4,   8, 
        L5M5,   8, 
        L5M6,   8, 
        L5M7,   8, 
        L5M8,   8, 
        L5M9,   8, 
        L5MA,   8, 
        L5MB,   8, 
        L5MC,   8, 
        L5MD,   8, 
        L5ME,   8, 
        L5MF,   8, 
        L5DI,   8, 
        L5BS,   8, 
        L5A0,   16, 
        L5A1,   16, 
        L5A2,   16, 
        L5A3,   16, 
        L5A4,   16, 
        L5A5,   16, 
        L5A6,   16, 
        L5A7,   16, 
        L5A8,   16, 
        L5A9,   16, 
        L5AA,   16, 
        L5AB,   16, 
        L5D0,   8, 
        L5D1,   8, 
        L5D2,   8, 
        L5D3,   8, 
        L5D4,   8, 
        L5D5,   8, 
        L5D6,   8, 
        L5D7,   8, 
        L5D8,   8, 
        L5D9,   8, 
        L5DA,   8, 
        L5DB,   8, 
        L5DV,   8, 
        L5CV,   8, 
        L5LU,   8, 
        L5NL,   8, 
        L5EE,   8, 
        L5VC,   8, 
        L5FS,   8, 
        L5LE,   8, 
        L5DG,   8, 
        L5CK,   32, 
        L5CL,   8, 
        L5PP,   8, 
        L5VR,   8, 
        L5FD,   8, 
        F0FM,   8, 
        F0MS,   8, 
        F0M0,   8, 
        F0M1,   8, 
        F0M2,   8, 
        F0M3,   8, 
        F0M4,   8, 
        F0M5,   8, 
        F0M6,   8, 
        F0M7,   8, 
        F0M8,   8, 
        F0M9,   8, 
        F0MA,   8, 
        F0MB,   8, 
        F0MC,   8, 
        F0MD,   8, 
        F0ME,   8, 
        F0MF,   8, 
        F0BS,   8, 
        F0AB,   16, 
        F0GP,   8, 
        F0GG,   16, 
        F0AV,   8, 
        F0IV,   8, 
        F0OM,   8, 
        F1FM,   8, 
        F1MS,   8, 
        F1M0,   8, 
        F1M1,   8, 
        F1M2,   8, 
        F1M3,   8, 
        F1M4,   8, 
        F1M5,   8, 
        F1M6,   8, 
        F1M7,   8, 
        F1M8,   8, 
        F1M9,   8, 
        F1MA,   8, 
        F1MB,   8, 
        F1MC,   8, 
        F1MD,   8, 
        F1ME,   8, 
        F1MF,   8, 
        F1BS,   8, 
        F1AB,   16, 
        F1GP,   8, 
        F1GG,   16, 
        F1AV,   8, 
        F1IV,   8, 
        F1OM,   8, 
        F2FM,   8, 
        F2MS,   8, 
        F2M0,   8, 
        F2M1,   8, 
        F2M2,   8, 
        F2M3,   8, 
        F2M4,   8, 
        F2M5,   8, 
        F2M6,   8, 
        F2M7,   8, 
        F2M8,   8, 
        F2M9,   8, 
        F2MA,   8, 
        F2MB,   8, 
        F2MC,   8, 
        F2MD,   8, 
        F2ME,   8, 
        F2MF,   8, 
        F2BS,   8, 
        F2AB,   16, 
        F2GP,   8, 
        F2GG,   16, 
        F2AV,   8, 
        F2IV,   8, 
        F2OM,   8, 
        F3FM,   8, 
        F3MS,   8, 
        F3M0,   8, 
        F3M1,   8, 
        F3M2,   8, 
        F3M3,   8, 
        F3M4,   8, 
        F3M5,   8, 
        F3M6,   8, 
        F3M7,   8, 
        F3M8,   8, 
        F3M9,   8, 
        F3MA,   8, 
        F3MB,   8, 
        F3MC,   8, 
        F3MD,   8, 
        F3ME,   8, 
        F3MF,   8, 
        F3BS,   8, 
        F3AB,   16, 
        F3GP,   8, 
        F3GG,   16, 
        F3AV,   8, 
        F3IV,   8, 
        F3OM,   8, 
        F4FM,   8, 
        F4MS,   8, 
        F4M0,   8, 
        F4M1,   8, 
        F4M2,   8, 
        F4M3,   8, 
        F4M4,   8, 
        F4M5,   8, 
        F4M6,   8, 
        F4M7,   8, 
        F4M8,   8, 
        F4M9,   8, 
        F4MA,   8, 
        F4MB,   8, 
        F4MC,   8, 
        F4MD,   8, 
        F4ME,   8, 
        F4MF,   8, 
        F4BS,   8, 
        F4AB,   16, 
        F4GP,   8, 
        F4GG,   16, 
        F4AV,   8, 
        F4IV,   8, 
        F4OM,   8, 
        F5FM,   8, 
        F5MS,   8, 
        F5M0,   8, 
        F5M1,   8, 
        F5M2,   8, 
        F5M3,   8, 
        F5M4,   8, 
        F5M5,   8, 
        F5M6,   8, 
        F5M7,   8, 
        F5M8,   8, 
        F5M9,   8, 
        F5MA,   8, 
        F5MB,   8, 
        F5MC,   8, 
        F5MD,   8, 
        F5ME,   8, 
        F5MF,   8, 
        F5BS,   8, 
        F5AB,   16, 
        F5GP,   8, 
        F5GG,   16, 
        F5AV,   8, 
        F5IV,   8, 
        F5OM,   8, 
        Offset (0x84D), 
        ECR1,   8, 
        I2SC,   8, 
        I2SI,   32, 
        I2SB,   8, 
        UBCB,   32, 
        PPOE,   8, 
        Offset (0x85E), 
        WIFC,   8, 
        Offset (0x865), 
        ADPM,   32, 
        AG1L,   64, 
        AG1H,   64, 
        AG2L,   64, 
        AG2H,   64, 
        AG3L,   64, 
        AG3H,   64, 
        HEFE,   8, 
        XDCE,   8, 
        STXE,   8, 
        ST10,   8, 
        ST11,   8, 
        ST12,   8, 
        ST13,   8, 
        ST14,   8, 
        ST15,   8, 
        ST16,   8, 
        ST17,   8, 
        ST18,   8, 
        ST19,   8, 
        ENVM,   8, 
        DHSP,   16, 
        DSSP,   16, 
        DSTP,   8, 
        STDE,   8, 
        STRS,   8, 
        ST20,   8, 
        ST21,   8, 
        ST22,   8, 
        ST23,   8, 
        ST24,   8, 
        ST25,   8, 
        ST26,   8, 
        ST27,   8, 
        ST28,   8, 
        ST29,   8, 
        ST30,   8, 
        ST31,   8, 
        ST32,   8, 
        ST33,   8, 
        ST34,   8, 
        ST35,   8, 
        ST36,   8, 
        ST37,   8, 
        ST38,   8, 
        ST39,   8, 
        ST40,   8, 
        ST41,   8, 
        ST42,   8, 
        ST43,   8, 
        ST44,   8, 
        ST45,   8, 
        ST46,   8, 
        ST47,   8, 
        ST48,   8, 
        ST49,   8, 
        SD11,   8, 
        SD12,   8, 
        SD13,   8, 
        SD14,   8, 
        SD15,   8, 
        SD16,   8, 
        SD21,   8, 
        SD22,   8, 
        SD23,   8, 
        SD24,   8, 
        SD25,   8, 
        SD26,   8, 
        SD31,   8, 
        SD32,   8, 
        SD33,   8, 
        SD34,   8, 
        SD35,   8, 
        SD36,   8, 
        Offset (0x907), 
        SDAA,   8, 
        SDAB,   8, 
        BTSE,   8, 
        BIPM,   8, 
        BSPL,   8, 
        BTBR,   8, 
        BED2,   8, 
        BED3,   8, 
        BTLE,   8, 
        BTL2,   8, 
        BTLL,   8, 
        ATDV,   8, 
        COEM,   8, 
        RTVM,   8, 
        USTC,   8, 
        HEB1,   32, 
        TSDB,   8, 
        Offset (0x91C), 
        CVFS,   8, 
        CVFT,   8, 
        CUPN,   8, 
        SCSS,   8, 
        NCTC,   8, 
        NCTI,   8, 
        NCTH,   8, 
        HSIO,   8, 
        HUAR,   8, 
        ZPOD,   8, 
        RGBC,   8, 
        DPTC,   8, 
        CEDS,   8, 
        VBST,   8, 
        AEAB,   8, 
        AHDB,   8, 
        UCMS,   8, 
        UCG1,   32, 
        UCG2,   32, 
        RPSG,   32, 
        TBD3,   8, 
        Offset (0x972), 
        UDGF,   8, 
        UDUP,   8, 
        DBGF,   8, 
        DBUP,   8, 
        TTUP,   8, 
        TP1T,   8, 
        TP1P,   8, 
        TP1D,   8, 
        TP2T,   8, 
        TP2P,   8, 
        TP2D,   8, 
        TP3T,   8, 
        TP3P,   8, 
        TP3D,   8, 
        TP4T,   8, 
        TP4P,   8, 
        TP4D,   8, 
        TP5T,   8, 
        TP5P,   8, 
        TP5D,   8, 
        TP6T,   8, 
        TP6P,   8, 
        TP6D,   8, 
        STAS,   8, 
        WRTO,   8, 
        PRST,   32, 
        WPRP,   8, 
        P1WG,   32, 
        P1RN,   8, 
        P1PG,   32, 
        P1EP,   8, 
        P1RG,   32, 
        P1RP,   8, 
        P2WG,   32, 
        P2RN,   8, 
        P2PG,   32, 
        P2EP,   8, 
        P2RG,   32, 
        P2RP,   8, 
        P3WG,   32, 
        P3RN,   8, 
        P3PG,   32, 
        P3EP,   8, 
        P3RG,   32, 
        P3RP,   8, 
        P4WG,   32, 
        P4RN,   8, 
        P4PG,   32, 
        P4EP,   8, 
        P4RG,   32, 
        P4RP,   8, 
        P5WG,   32, 
        P5RN,   8, 
        P5PG,   32, 
        P5EP,   8, 
        P5RG,   32, 
        P5RP,   8, 
        P6WG,   32, 
        P6RN,   8, 
        P6PG,   32, 
        P6EP,   8, 
        P6RG,   32, 
        P6RP,   8, 
        P7WG,   32, 
        P7RN,   8, 
        P7PG,   32, 
        P7EP,   8, 
        P7RG,   32, 
        P7RP,   8, 
        POME,   8, 
        WFCP,   32, 
        PFCP,   8, 
        WBRS,   32, 
        PBRS,   8, 
        WWKP,   32, 
        T0PE,   32, 
        T0PR,   32, 
        T0IP,   8, 
        T0EP,   8, 
        T0RP,   8, 
        T0GI,   32, 
        T1PE,   32, 
        T1PR,   32, 
        T1IP,   8, 
        T1EP,   8, 
        T1RP,   8, 
        T1GI,   32, 
        PPDI,   8, 
        WLWK,   32, 
        WLRP,   8, 
        SATP,   32, 
        STPP,   8, 
        S1PG,   32, 
        S1PP,   8, 
        S1RG,   32, 
        S1RP,   8, 
        S2PG,   32, 
        S2PP,   8, 
        S2RG,   32, 
        S2RP,   8, 
        S3PG,   32, 
        S3PP,   8, 
        S3RG,   32, 
        S3RP,   8, 
        S4PG,   32, 
        S4PP,   8, 
        S4RG,   32, 
        S4RP,   8, 
        S5PG,   32, 
        S5PP,   8, 
        S5RG,   32, 
        S5RP,   8, 
        SXI1,   8, 
        SXI2,   8, 
        SXP1,   8, 
        SXP2,   8, 
        TSD0,   8, 
        WCLK,   8, 
        CECV,   32, 
        WWRP,   8, 
        WAGM,   8, 
        AGA1,   8, 
        AGA2,   8, 
        AGA3,   8, 
        AGA4,   8, 
        AGA5,   8, 
        AGB1,   8, 
        AGB2,   8, 
        AGB3,   8, 
        AGB4,   8, 
        AGB5,   8, 
        ACSD,   8, 
        I5BS,   8, 
        DGVR,   32, 
        LPMR,   32, 
        GP1E,   8, 
        Offset (0xA88), 
        WPFA,   32, 
        WPFB,   32, 
        WPFC,   32, 
        WPFD,   32, 
        ST50,   8, 
        ST51,   8, 
        ST52,   8, 
        ST53,   8, 
        ST54,   8, 
        ST55,   8, 
        ST56,   8, 
        ST57,   8, 
        ST58,   8, 
        ST59,   8, 
        ST5A,   8, 
        ST5B,   8, 
        ST60,   8, 
        ST61,   8, 
        ST62,   8, 
        ST63,   8, 
        ST64,   8, 
        ST65,   8, 
        ST66,   8, 
        ST67,   8, 
        ST68,   8, 
        ST69,   8, 
        ST6A,   8, 
        ST6B,   8, 
        ST70,   8, 
        ST71,   8, 
        ST72,   8, 
        ST73,   8, 
        ST74,   8, 
        ST75,   8, 
        ST76,   8, 
        ST77,   8, 
        ST78,   8, 
        ST79,   8, 
        ST7A,   8, 
        ST7B,   8, 
        ST80,   8, 
        ST81,   8, 
        ST82,   8, 
        ST83,   8, 
        ST84,   8, 
        ST85,   8, 
        ST86,   8, 
        ST87,   8, 
        ST88,   8, 
        ST89,   8, 
        ST8A,   8, 
        ST8B,   8, 
        SD17,   8, 
        SD18,   8, 
        SD19,   8, 
        SD27,   8, 
        SD28,   8, 
        SD29,   8, 
        SD37,   8, 
        SD38,   8, 
        SD39,   8, 
        AGA6,   8, 
        AGA7,   8, 
        AGA8,   8, 
        AGA9,   8, 
        AGAA,   8, 
        AGAB,   8, 
        AGB6,   8, 
        AGB7,   8, 
        AGB8,   8, 
        AGB9,   8, 
        AGBA,   8, 
        AGBB,   8, 
        UHBS,   32, 
        AXSU,   8, 
        AXMU,   8, 
        AXSR,   8, 
        AXMR,   8, 
        CD10,   8, 
        CD11,   8, 
        CD12,   8, 
        CD13,   8, 
        CD14,   8, 
        CD15,   8, 
        CD16,   8, 
        CD17,   8, 
        CD18,   8, 
        CD19,   8, 
        CD1A,   8, 
        CD20,   8, 
        CD21,   8, 
        CD22,   8, 
        CD23,   8, 
        CD24,   8, 
        CD25,   8, 
        CD26,   8, 
        CD27,   8, 
        CD28,   8, 
        CD29,   8, 
        CD2A,   8, 
        CD30,   8, 
        CD31,   8, 
        CD32,   8, 
        CD33,   8, 
        CD34,   8, 
        CD35,   8, 
        CD36,   8, 
        CD37,   8, 
        CD38,   8, 
        CD39,   8, 
        CD3A,   8, 
        CD3B,   8, 
        CD3C,   8, 
        CD3D,   8, 
        CD3E,   8, 
        CD3F,   8, 
        CD40,   8, 
        CD41,   8, 
        CD42,   8, 
        CD43,   8, 
        CD44,   8, 
        CD45,   8, 
        CD46,   8, 
        CD47,   8, 
        CD48,   8, 
        CD49,   8, 
        CD4A,   8, 
        CD4B,   8, 
        CD4C,   8, 
        CD4D,   8, 
        CD4E,   8, 
        CD4F,   8, 
        CD50,   8, 
        CD51,   8, 
        CD52,   8, 
        CD53,   8, 
        CD54,   8, 
        CD55,   8, 
        CD56,   8, 
        CD57,   8, 
        CD58,   8, 
        CD59,   8, 
        CD5A,   8, 
        CD5B,   8, 
        CD5C,   8, 
        CD5D,   8, 
        CD5E,   8, 
        CD5F,   8, 
        CD60,   8, 
        CD61,   8, 
        CD62,   8, 
        CD63,   8, 
        CD64,   8, 
        CD65,   8, 
        CD66,   8, 
        CD67,   8, 
        CD68,   8, 
        CD69,   8, 
        CD6A,   8, 
        CD6B,   8, 
        CD6C,   8, 
        CD6D,   8, 
        CD6E,   8, 
        CD6F,   8, 
        CD70,   8, 
        CD71,   8, 
        WTSE,   32, 
        WTLE,   8, 
        BL01,   16, 
        BL02,   16, 
        BL03,   16, 
        BL04,   16, 
        BL05,   16, 
        BL06,   16, 
        BL07,   16, 
        BL08,   16, 
        BL09,   16, 
        BL10,   16, 
        BL11,   16, 
        BL12,   16, 
        BL13,   16, 
        BL14,   16, 
        BL15,   16, 
        BL16,   16, 
        TILE,   8, 
        TIS0,   8, 
        TS0X,   8, 
        TIS4,   8, 
        TIS5,   8, 
        BLEC,   8, 
        BLPD,   8, 
        BLPI,   8, 
        PXDC,   8, 
        PXAC,   8, 
        PXWC,   8, 
        PXUC,   8, 
        PXFD,   8, 
        PDOD,   16, 
        XSMI,   32, 
        WWEN,   8, 
        WFFD,   8, 
        TN2B,   16, 
        TB2R,   16, 
        TR2P,   16, 
        TR2B,   16, 
        TB2F,   16, 
        TFDI,   16, 
        TBTG,   16, 
        TBTP,   16, 
        EPTU,   8, 
        U4CM,   8, 
        CMSK,   8, 
        U4SE,   8, 
        U4CL,   8, 
        WSID,   16, 
        WSTO,   16, 
        DUWS,   8, 
        WFRC,   32, 
        WFUC,   32, 
        UNI4,   32, 
        WFIC,   32, 
        WFBS,   32, 
        UDRS,   8, 
        HGDT,   8, 
        WCEN,   8, 
        WLBI,   8, 
        WHBI,   8, 
        SDGN,   8, 
        SD41,   8, 
        SD42,   8, 
        SD43,   8, 
        SD44,   8, 
        SD45,   8, 
        SD46,   8, 
        SD47,   8, 
        SD48,   8, 
        SD49,   8, 
        SD51,   8, 
        SD52,   8, 
        SD53,   8, 
        SD54,   8, 
        SD55,   8, 
        SD56,   8, 
        SD57,   8, 
        SD58,   8, 
        SD59,   8, 
        SD61,   8, 
        SD62,   8, 
        SD63,   8, 
        SD64,   8, 
        SD65,   8, 
        SD66,   8, 
        SD67,   8, 
        SD68,   8, 
        SD69,   8, 
        SD71,   8, 
        SD72,   8, 
        SD73,   8, 
        SD74,   8, 
        SD75,   8, 
        SD76,   8, 
        SD77,   8, 
        SD78,   8, 
        SD79,   8, 
        SD81,   8, 
        SD82,   8, 
        SD83,   8, 
        SD84,   8, 
        SD85,   8, 
        SD86,   8, 
        SD87,   8, 
        SD88,   8, 
        SD89,   8, 
        SSH6,   16, 
        SSL6,   16, 
        SSD6,   16, 
        FMH6,   16, 
        FML6,   16, 
        FMD6,   16, 
        FPH6,   16, 
        FPL6,   16, 
        FPD6,   16, 
        HSH6,   16, 
        HSL6,   16, 
        HSD6,   16, 
        M0CC,   16, 
        M1CC,   16, 
        SSH7,   16, 
        SSL7,   16, 
        SSD7,   16, 
        FMH7,   16, 
        FML7,   16, 
        FMD7,   16, 
        FPH7,   16, 
        FPL7,   16, 
        FPD7,   16, 
        HSH7,   16, 
        HSL7,   16, 
        HSD7,   16, 
        M0CD,   16, 
        M1CD,   16, 
        L0FI,   8, 
        L1FI,   8, 
        L2FI,   8, 
        L3FI,   8, 
        L4FI,   8, 
        L5FI,   8, 
        C0C0,   16, 
        C0C1,   16, 
        C0C2,   16, 
        C0C3,   16, 
        C0C4,   16, 
        C0C5,   16, 
        C1C0,   16, 
        C1C1,   16, 
        C1C2,   16, 
        C1C3,   16, 
        C1C4,   16, 
        C1C5,   16, 
        C2C0,   16, 
        C2C1,   16, 
        C2C2,   16, 
        C2C3,   16, 
        C2C4,   16, 
        C2C5,   16, 
        C3C0,   16, 
        C3C1,   16, 
        C3C2,   16, 
        C3C3,   16, 
        C3C4,   16, 
        C3C5,   16, 
        C4C0,   16, 
        C4C1,   16, 
        C4C2,   16, 
        C4C3,   16, 
        C4C4,   16, 
        C4C5,   16, 
        C5C0,   16, 
        C5C1,   16, 
        C5C2,   16, 
        C5C3,   16, 
        C5C4,   16, 
        C5C5,   16, 
        F0CP,   16, 
        F1CP,   16, 
        F2CP,   16, 
        F3CP,   16, 
        F4CP,   16, 
        F5CP,   16, 
        TP7T,   8, 
        TP7P,   8, 
        TP7D,   8, 
        TP8T,   8, 
        TP8P,   8, 
        TP8D,   8, 
        TP9T,   8, 
        TP9P,   8, 
        TP9D,   8, 
        TPAT,   8, 
        TPAP,   8, 
        TPAD,   8, 
        TP1U,   8, 
        TP2U,   8, 
        TP3U,   8, 
        TP4U,   8, 
        TP5U,   8, 
        TP6U,   8, 
        TP7U,   8, 
        TP8U,   8, 
        TP9U,   8, 
        TPAU,   8, 
        DGBA,   64, 
        DGOP,   32, 
        DBRL,   8, 
        SVDC,   8, 
        IADG,   8, 
        SRLD,   8, 
        WEDT,   32, 
        WF7C,   32, 
        EDMX,   32, 
        DNID,   8, 
        DGD1,   32, 
        DGD2,   32, 
        DGD3,   32, 
        DGD4,   32, 
        DGD5,   32, 
        DGD6,   32, 
        DGD7,   32, 
        DGD8,   32, 
        DGD9,   32, 
        DGDA,   32, 
        DGDB,   32, 
        DGDC,   32, 
        DGDD,   32, 
        DGDE,   32, 
        DGDF,   32, 
        DGDX,   32, 
        DGDS,   8, 
        CIRM,   8, 
        LP5E,   8, 
        CLCN,   8, 
        CLSA,   8, 
        DWFK,   32, 
        WLRT,   32, 
        WVHO,   32, 
        WDCO,   32, 
        SBSB,   8, 
        SBSL,   8, 
        SIOB,   16, 
        SIOL,   16, 
        SMEB,   32, 
        SMEL,   32, 
        SPMB,   64, 
        SPML,   64, 
        PBSB,   8, 
        PBSL,   8, 
        PIOB,   16, 
        PIOL,   16, 
        PMEB,   32, 
        PMEL,   32, 
        PPMB,   64, 
        PPML,   64, 
        I2SE,   8, 
        ITCM,   8, 
        ITHW,   8, 
        ITSI,   8, 
        VTCM,   8, 
        ZPDA,   32, 
        ZDPR,   32, 
        ZDPW,   32, 
        ZDPP,   8, 
        ZPPB,   8, 
        ARLP,   8, 
        ARLS,   8, 
        FVWP,   32, 
        FVRE,   32, 
        FVRP,   8, 
        FVPE,   32, 
        FVPP,   8, 
        FVSP,   8, 
        RPFV,   8, 
        CBTA,   8, 
        ICS0,   32, 
        ICS1,   32, 
        ICS2,   32, 
        ICS3,   32, 
        ICS4,   32, 
        ICS5,   32, 
        L0PV,   8, 
        L0PU,   8, 
        L1PV,   8, 
        L1PU,   8, 
        L2PV,   8, 
        L2PU,   8, 
        L3PU,   8, 
        L3PV,   8, 
        L4PU,   8, 
        L4PV,   8, 
        L5PU,   8, 
        L5PV,   8, 
        A0H0,   8, 
        A0H1,   8, 
        A0H2,   8, 
        A0H3,   8, 
        A0H4,   8, 
        A0H5,   8, 
        A0H6,   8, 
        A0H7,   8, 
        A0H8,   8, 
        A1H0,   8, 
        A1H1,   8, 
        A1H2,   8, 
        A1H3,   8, 
        A1H4,   8, 
        A1H5,   8, 
        A1H6,   8, 
        A1H7,   8, 
        A1H8,   8, 
        CGLS,   8
    }

    Name (PNVB, 0x65844098)
    Name (PNVL, 0x04AB)
    OperationRegion (PNVA, SystemMemory, PNVB, PNVL)
    Field (PNVA, AnyAcc, Lock, Preserve)
    {
        PCHS,   16, 
        PCHG,   16, 
        PSTP,   16, 
        RPA1,   32, 
        RPA2,   32, 
        RPA3,   32, 
        RPA4,   32, 
        RPA5,   32, 
        RPA6,   32, 
        RPA7,   32, 
        RPA8,   32, 
        RPA9,   32, 
        RPAA,   32, 
        RPAB,   32, 
        RPAC,   32, 
        RPAD,   32, 
        RPAE,   32, 
        RPAF,   32, 
        RPAG,   32, 
        RPAH,   32, 
        RPAI,   32, 
        RPAJ,   32, 
        RPAK,   32, 
        RPAL,   32, 
        RPAM,   32, 
        RPAN,   32, 
        RPAO,   32, 
        RPAP,   32, 
        RPAQ,   32, 
        RPAR,   32, 
        RPAS,   32, 
        NHAA,   64, 
        NHLL,   32, 
        ADFM,   32, 
        SWQ0,   8, 
        SWQ1,   8, 
        SWQ2,   8, 
        SWQ3,   8, 
        ACS0,   8, 
        ACS1,   8, 
        ACS2,   8, 
        ACS3,   8, 
        DAI0,   8, 
        DAI1,   8, 
        DAI2,   8, 
        DAI3,   8, 
        DOD0,   8, 
        DOD1,   8, 
        DOD2,   8, 
        DOD3,   8, 
        HDBO,   16, 
        SWMC,   8, 
        XTAL,   32, 
        SBRG,   32, 
        GEI0,   8, 
        GEI1,   8, 
        GEI2,   8, 
        GED0,   8, 
        GED1,   8, 
        GED2,   8, 
        PML1,   16, 
        PML2,   16, 
        PML3,   16, 
        PML4,   16, 
        PML5,   16, 
        PML6,   16, 
        PML7,   16, 
        PML8,   16, 
        PML9,   16, 
        PMLA,   16, 
        PMLB,   16, 
        PMLC,   16, 
        PMLD,   16, 
        PMLE,   16, 
        PMLF,   16, 
        PMLG,   16, 
        PMLH,   16, 
        PMLI,   16, 
        PMLJ,   16, 
        PMLK,   16, 
        PMLL,   16, 
        PMLM,   16, 
        PMLN,   16, 
        PMLO,   16, 
        PMLP,   16, 
        PMLQ,   16, 
        PMLR,   16, 
        PMLS,   16, 
        PNL1,   16, 
        PNL2,   16, 
        PNL3,   16, 
        PNL4,   16, 
        PNL5,   16, 
        PNL6,   16, 
        PNL7,   16, 
        PNL8,   16, 
        PNL9,   16, 
        PNLA,   16, 
        PNLB,   16, 
        PNLC,   16, 
        PNLD,   16, 
        PNLE,   16, 
        PNLF,   16, 
        PNLG,   16, 
        PNLH,   16, 
        PNLI,   16, 
        PNLJ,   16, 
        PNLK,   16, 
        PNLL,   16, 
        PNLM,   16, 
        PNLN,   16, 
        PNLO,   16, 
        PNLP,   16, 
        PNLQ,   16, 
        PNLR,   16, 
        PNLS,   16, 
        XHPC,   8, 
        XRPC,   8, 
        XSPC,   8, 
        XSPA,   8, 
        HPTB,   32, 
        HPTE,   8, 
        SM00,   8, 
        SM01,   8, 
        SM02,   8, 
        SM03,   8, 
        SM04,   8, 
        SM05,   8, 
        SM06,   8, 
        SC00,   64, 
        SC01,   64, 
        SC02,   64, 
        SC03,   64, 
        SC04,   64, 
        SC05,   64, 
        SC06,   64, 
        IM00,   8, 
        IM01,   8, 
        IM02,   8, 
        IM03,   8, 
        IM04,   8, 
        IM05,   8, 
        IM06,   8, 
        IM07,   8, 
        IC00,   64, 
        IC01,   64, 
        IC02,   64, 
        IC03,   64, 
        IC04,   64, 
        IC05,   64, 
        IC06,   64, 
        IC07,   64, 
        UM00,   8, 
        UM01,   8, 
        UM02,   8, 
        UM03,   8, 
        UM04,   8, 
        UM05,   8, 
        UM06,   8, 
        UC00,   64, 
        UC01,   64, 
        UC02,   64, 
        UC03,   64, 
        UC04,   64, 
        UC05,   64, 
        UC06,   64, 
        UD00,   8, 
        UD01,   8, 
        UD02,   8, 
        UD03,   8, 
        UD04,   8, 
        UD05,   8, 
        UD06,   8, 
        UP00,   8, 
        UP01,   8, 
        UP02,   8, 
        UP03,   8, 
        UP04,   8, 
        UP05,   8, 
        UP06,   8, 
        UI00,   8, 
        UI01,   8, 
        UI02,   8, 
        UI03,   8, 
        UI04,   8, 
        UI05,   8, 
        UI06,   8, 
        SGIR,   8, 
        GPHD,   8, 
        NIT1,   8, 
        NIT2,   8, 
        NIT3,   8, 
        NPM1,   8, 
        NPM2,   8, 
        NPM3,   8, 
        NPC1,   8, 
        NPC2,   8, 
        NPC3,   8, 
        NL11,   16, 
        NL12,   16, 
        NL13,   16, 
        ND21,   8, 
        ND22,   8, 
        ND23,   8, 
        ND11,   32, 
        ND12,   32, 
        ND13,   32, 
        NLR1,   16, 
        NLR2,   16, 
        NLR3,   16, 
        NLD1,   32, 
        NLD2,   32, 
        NLD3,   32, 
        NEA1,   16, 
        NEA2,   16, 
        NEA3,   16, 
        NEB1,   16, 
        NEB2,   16, 
        NEB3,   16, 
        NEC1,   16, 
        NEC2,   16, 
        NEC3,   16, 
        NRA1,   16, 
        NRA2,   16, 
        NRA3,   16, 
        NMB1,   32, 
        NMB2,   32, 
        NMB3,   32, 
        NMV1,   32, 
        NMV2,   32, 
        NMV3,   32, 
        NPB1,   32, 
        NPB2,   32, 
        NPB3,   32, 
        NPV1,   32, 
        NPV2,   32, 
        NPV3,   32, 
        NRP1,   32, 
        NRP2,   32, 
        NRP3,   32, 
        EMH4,   8, 
        EMDS,   8, 
        CSKU,   8, 
        ITA0,   16, 
        ITA1,   16, 
        ITA2,   16, 
        ITA3,   16, 
        ITS0,   8, 
        ITS1,   8, 
        ITS2,   8, 
        ITS3,   8, 
        PMBS,   16, 
        PWRM,   32, 
        CRFP,   8, 
        PCNV,   16, 
        CWFC,   8, 
        CBTC,   8, 
        CBTI,   8, 
        GBTP,   32, 
        CVPR,   8, 
        CRFI,   8, 
        TVBS,   8, 
        TFWB,   32, 
        PSON,   8, 
        LTR1,   8, 
        LTR2,   8, 
        LTR3,   8, 
        LTR4,   8, 
        LTR5,   8, 
        LTR6,   8, 
        LTR7,   8, 
        LTR8,   8, 
        LTR9,   8, 
        LTRA,   8, 
        LTRB,   8, 
        LTRC,   8, 
        LTRD,   8, 
        LTRE,   8, 
        LTRF,   8, 
        LTRG,   8, 
        LTRH,   8, 
        LTRI,   8, 
        LTRJ,   8, 
        LTRK,   8, 
        LTRL,   8, 
        LTRM,   8, 
        LTRN,   8, 
        LTRO,   8, 
        LTRP,   8, 
        LTRQ,   8, 
        LTRR,   8, 
        LTRS,   8, 
        GBES,   8, 
        PPDS,   32, 
        EMCE,   8, 
        SDCE,   8, 
        TGEA,   8, 
        TGEB,   8, 
        CR00,   8, 
        CR01,   8, 
        CR02,   8, 
        CR03,   8, 
        CR04,   8, 
        CR05,   8, 
        CR06,   8, 
        CR07,   8, 
        CR08,   8, 
        CR09,   8, 
        CR10,   8, 
        CR11,   8, 
        CR12,   8, 
        CR13,   8, 
        CR14,   8, 
        CR15,   8, 
        CR16,   8, 
        CR17,   8, 
        TCOB,   16, 
        ICKP,   16, 
        PU2C,   8, 
        PU3C,   8, 
        SPPR,   8, 
        IPCC,   8, 
        CQ00,   8, 
        CQ01,   8, 
        CQ02,   8, 
        CQ03,   8, 
        CQ04,   8, 
        CQ05,   8, 
        CQ06,   8, 
        CQ07,   8, 
        CQ08,   8, 
        CQ09,   8, 
        CQ10,   8, 
        CQ11,   8, 
        CQ12,   8, 
        CQ13,   8, 
        CQ14,   8, 
        CQ15,   8, 
        CQ16,   8, 
        CQ17,   8, 
        TIN0,   32, 
        TIN1,   32, 
        TMD0,   16, 
        TMD1,   16, 
        UF0E,   8, 
        UF1E,   8, 
        UAOE,   8, 
        T010,   32, 
        T011,   32, 
        T020,   8, 
        T021,   8, 
        T030,   32, 
        T031,   32, 
        T040,   32, 
        T041,   32, 
        T050,   32, 
        T051,   32, 
        T060,   32, 
        T061,   32, 
        T070,   32, 
        T071,   32, 
        T080,   32, 
        T081,   32, 
        T090,   32, 
        T091,   32, 
        T0A0,   32, 
        T0A1,   32, 
        T0B0,   32, 
        T0B1,   32, 
        T0C0,   32, 
        T0C1,   32, 
        T0D0,   32, 
        T0D1,   32, 
        T0E0,   32, 
        T0E1,   32, 
        T0F0,   32, 
        T0F1,   32, 
        T0G0,   16, 
        T0G1,   16, 
        T0H0,   32, 
        T0H1,   32, 
        T0I0,   8, 
        T0I1,   8, 
        T0J0,   64, 
        T0J1,   64, 
        T0K0,   64, 
        T0K1,   64, 
        T0L0,   64, 
        T0L1,   64, 
        T0M0,   64, 
        T0M1,   64, 
        T0N0,   64, 
        T0N1,   64, 
        T0O0,   64, 
        T0O1,   64, 
        T0P0,   64, 
        T0P1,   64, 
        T0Q0,   64, 
        T0Q1,   64, 
        T0R0,   64, 
        T0R1,   64, 
        T0S0,   64, 
        T0S1,   64, 
        T0T0,   64, 
        T0T1,   64, 
        T0U0,   64, 
        T0U1,   64, 
        T0V0,   64, 
        T0V1,   64, 
        T0W0,   64, 
        T0W1,   64, 
        T0X0,   64, 
        T0X1,   64, 
        T0Y0,   64, 
        T0Y1,   64, 
        T0Z0,   64, 
        T0Z1,   64, 
        T000,   64, 
        T001,   64, 
        CPPE,   8, 
        PCHA,   8, 
        ARLM,   8
    }

    Scope (_SB)
    {
        If ((PCHA != Zero))
        {
            Device (PC02)
            {
                Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
                Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
                Name (_SEG, Zero)  // _SEG: PCI Segment
                Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
                {
                    Return (PBSB) /* \PBSB */
                }

                Name (_UID, 0x02)  // _UID: Unique ID
            }
        }
    }

    Name (TPNB, 0x65811000)
    Name (TPNL, 0x0059)
    OperationRegion (TPNV, SystemMemory, TPNB, TPNL)
    Field (TPNV, AnyAcc, Lock, Preserve)
    {
        MXD1,   32, 
        MXD2,   32, 
        MXD3,   32, 
        MXD4,   32, 
        MXD5,   32, 
        MXD6,   32, 
        MXD7,   32, 
        MXD8,   32, 
        EBAS,   32, 
        DGVS,   32, 
        DGVB,   32, 
        HYSS,   32, 
        NVAF,   8, 
        VEND,   16, 
        DEID,   16, 
        DPMF,   8, 
        SDMF,   8, 
        CHPV,   8, 
        EGBN,   8, 
        MCEN,   8, 
        P0DL,   16, 
        P1SN,   8, 
        NCPT,   16, 
        HGMD,   8, 
        TWGP,   32, 
        TPWG,   32, 
        TPWP,   8, 
        TRSG,   32, 
        TRSP,   8, 
        SGGP,   8, 
        HGFL,   8, 
        NVHA,   32, 
        NVGA,   32, 
        PABI,   8
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0xC400)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    Name (CNVB, 0x656C6000)
    Name (CNVL, 0x0020)
    OperationRegion (CPNV, SystemMemory, CNVB, CNVL)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        NTPB,   8
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PD05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD21, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR21, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD23, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR23, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD00, Package (0x32)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR00, Package (0x32)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                One, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x02, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                Zero, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                One, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
    }

    Scope (_SB)
    {
        Device (PC00)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.AR05 */
                    }

                    Return (PD05) /* \_SB_.PD05 */
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.AR06 */
                    }

                    Return (PD06) /* \_SB_.PD06 */
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07) /* \_SB_.AR07 */
                    }

                    Return (PD07) /* \_SB_.PD07 */
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08) /* \_SB_.AR08 */
                    }

                    Return (PD08) /* \_SB_.PD08 */
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR09) /* \_SB_.AR09 */
                    }

                    Return (PD09) /* \_SB_.PD09 */
                }
            }

            Device (RP06)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A) /* \_SB_.AR0A */
                    }

                    Return (PD0A) /* \_SB_.PD0A */
                }
            }

            Device (RP07)
            {
                Name (_ADR, 0x001C0006)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0B) /* \_SB_.AR0B */
                    }

                    Return (PD0B) /* \_SB_.PD0B */
                }
            }

            Device (RP08)
            {
                Name (_ADR, 0x001C0007)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C) /* \_SB_.AR0C */
                    }

                    Return (PD0C) /* \_SB_.PD0C */
                }
            }

            Device (RP09)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PD01) /* \_SB_.PD01 */
                }
            }

            Device (RP10)
            {
                Name (_ADR, 0x00060001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02) /* \_SB_.AR02 */
                    }

                    Return (PD02) /* \_SB_.PD02 */
                }
            }

            Device (RP11)
            {
                Name (_ADR, 0x00060002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR03) /* \_SB_.AR03 */
                    }

                    Return (PD03) /* \_SB_.PD03 */
                }
            }

            Device (RP12)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PD04) /* \_SB_.PD04 */
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Scope (\_SB.PC00.LPCB)
                {
                    OperationRegion (PKBS, SystemIO, 0x60, 0x05)
                    Field (PKBS, ByteAcc, Lock, Preserve)
                    {
                        PKBD,   8, 
                        Offset (0x02), 
                        Offset (0x03), 
                        Offset (0x04), 
                        PKBC,   8
                    }

                    Device (PS2K)
                    {
                        Name (_HID, "MSNB1001")  // _HID: Hardware ID
                        Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0B)
                        }

                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IRQ (Edge, ActiveHigh, Exclusive, )
                                {1}
                        })
                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFn (0x00, 0x00)
                            {
                                FixedIO (
                                    0x0060,             // Address
                                    0x01,               // Length
                                    )
                                FixedIO (
                                    0x0064,             // Address
                                    0x01,               // Length
                                    )
                                IRQNoFlags ()
                                    {1}
                            }
                            EndDependentFn ()
                        })
                    }
                }

                Method (LPTS, 1, NotSerialized)
                {
                    SLPX = One
                    SLPE = One
                    If (PWBT)
                    {
                        PBEN = One
                    }
                }

                Method (LWAK, 1, NotSerialized)
                {
                    SLPE = Zero
                    If (PBEN)
                    {
                        PWBT = One
                        PBEN = Zero
                    }

                    If (NTPB)
                    {
                        Notify (PWRB, 0x02) // Device Wake
                    }
                }

                Name (PBEN, Zero)
                OperationRegion (SMIE, SystemIO, PMBA, 0x04)
                Field (SMIE, ByteAcc, NoLock, Preserve)
                {
                        ,   10, 
                    RTCS,   1, 
                        ,   3, 
                    PEXS,   1, 
                    WAKS,   1, 
                    Offset (0x03), 
                    PWBT,   1, 
                    Offset (0x04)
                }

                OperationRegion (SLPR, SystemIO, SMCR, 0x08)
                Field (SLPR, ByteAcc, NoLock, Preserve)
                {
                        ,   4, 
                    SLPE,   1, 
                        ,   31, 
                    SLPX,   1, 
                    Offset (0x08)
                }
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x06, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.PC00.LPCB.LPTS (Arg0)
            \_SB.TPM.TPTS (Arg0)
            \_SB.PC00.MC.NPTS (Arg0)
            RPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        RWAK (Arg0)
        \_SB.PC00.MC.NWAK (Arg0)
        \_SB.PC00.LPCB.LWAK (Arg0)
        Return (AM00) /* \AM00 */
    }

    Scope (_SB.PC00)
    {
        Device (MC)
        {
            Name (_ADR, Zero)  // _ADR: Address
            OperationRegion (HBUS, PCI_Config, Zero, 0x0100)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                Offset (0x48), 
                MHEN,   1, 
                    ,   14, 
                MHBR,   17, 
                Offset (0x50), 
                GCLK,   1, 
                Offset (0x54), 
                D0EN,   1, 
                D1F2,   1, 
                D1F1,   1, 
                D1F0,   1, 
                Offset (0x56), 
                D6F0,   1, 
                Offset (0x60), 
                PXEN,   1, 
                PXSZ,   3, 
                    ,   22, 
                PXBR,   6, 
                Offset (0x68), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                Offset (0x70), 
                    ,   20, 
                MEBR,   12, 
                Offset (0x80), 
                    ,   4, 
                PM0H,   2, 
                Offset (0x81), 
                PM1L,   2, 
                    ,   2, 
                PM1H,   2, 
                Offset (0x82), 
                PM2L,   2, 
                    ,   2, 
                PM2H,   2, 
                Offset (0x83), 
                PM3L,   2, 
                    ,   2, 
                PM3H,   2, 
                Offset (0x84), 
                PM4L,   2, 
                    ,   2, 
                PM4H,   2, 
                Offset (0x85), 
                PM5L,   2, 
                    ,   2, 
                PM5H,   2, 
                Offset (0x86), 
                PM6L,   2, 
                    ,   2, 
                PM6H,   2, 
                Offset (0x87), 
                Offset (0xA8), 
                    ,   20, 
                TUUD,   19, 
                Offset (0xBC), 
                    ,   20, 
                TLUD,   12, 
                Offset (0xC8), 
                    ,   7, 
                HTSE,   1
            }
        }

        Name (BUF0, ResourceTemplate ()
        {
            WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                0x0000,             // Granularity
                0x0000,             // Range Minimum
                0x00FF,             // Range Maximum
                0x0000,             // Translation Offset
                0x0100,             // Length
                ,, _Y00)
            DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                0x00000000,         // Granularity
                0x00000000,         // Range Minimum
                0x00000CF7,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00000CF8,         // Length
                ,, , TypeStatic, DenseTranslation)
            IO (Decode16,
                0x0CF8,             // Range Minimum
                0x0CF8,             // Range Maximum
                0x01,               // Alignment
                0x08,               // Length
                )
            DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                0x00000000,         // Granularity
                0x00000D00,         // Range Minimum
                0x0000FFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x0000F300,         // Length
                ,, _Y0E, TypeStatic, DenseTranslation)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000A0000,         // Range Minimum
                0x000BFFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00020000,         // Length
                ,, , AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000C0000,         // Range Minimum
                0x000C3FFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y01, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000C4000,         // Range Minimum
                0x000C7FFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y02, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000C8000,         // Range Minimum
                0x000CBFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y03, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000CC000,         // Range Minimum
                0x000CFFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y04, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000D0000,         // Range Minimum
                0x000D3FFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y05, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000D4000,         // Range Minimum
                0x000D7FFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y06, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000D8000,         // Range Minimum
                0x000DBFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y07, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000DC000,         // Range Minimum
                0x000DFFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y08, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000E0000,         // Range Minimum
                0x000E3FFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y09, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000E4000,         // Range Minimum
                0x000E7FFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y0A, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000E8000,         // Range Minimum
                0x000EBFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y0B, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000EC000,         // Range Minimum
                0x000EFFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y0C, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000F0000,         // Range Minimum
                0x000FFFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00010000,         // Length
                ,, _Y0D, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                0x00000000,         // Granularity
                0x00000000,         // Range Minimum
                0xDFFFFFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0xE0000000,         // Length
                ,, _Y0F, AddressRangeMemory, TypeStatic)
            QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                0x0000000000000000, // Granularity
                0x0000000000010000, // Range Minimum
                0x000000000001FFFF, // Range Maximum
                0x0000000000000000, // Translation Offset
                0x0000000000010000, // Length
                ,, _Y10, AddressRangeMemory, TypeStatic)
        })
        Name (EP_B, Zero)
        Name (MH_B, Zero)
        Name (PC_B, Zero)
        Name (PC_L, Zero)
        Name (DM_B, Zero)
        Method (GEPB, 0, Serialized)
        {
            If ((EP_B == Zero))
            {
                EP_B = (^MC.EPBR << 0x0C)
            }

            Return (EP_B) /* \_SB_.PC00.EP_B */
        }

        Method (GMHB, 0, Serialized)
        {
            If ((MH_B == Zero))
            {
                MH_B = (^MC.MHBR << 0x0F)
            }

            Return (MH_B) /* \_SB_.PC00.MH_B */
        }

        Method (GPCB, 0, Serialized)
        {
            If ((PC_B == Zero))
            {
                PC_B = (^MC.PXBR << 0x1A)
            }

            Return (PC_B) /* \_SB_.PC00.PC_B */
        }

        Method (PC2M, 2, Serialized)
        {
            Local0 = GPCB ()
            Local0 += (Arg1 << 0x14)
            Local0 += ((Arg0 & 0x001F0000) >> One)
            Local0 += ((Arg0 & 0x07) << 0x0C)
            Return (Local0)
        }

        Method (GPCL, 0, Serialized)
        {
            If ((PC_L == Zero))
            {
                If ((^MC.PXSZ < 0x03))
                {
                    PC_L = (0x10000000 >> ^MC.PXSZ) /* \_SB_.PC00.MC__.PXSZ */
                }
                Else
                {
                    PC_L = 0x10000000
                }
            }

            Return (PC_L) /* \_SB_.PC00.PC_L */
        }

        Method (GDMB, 0, Serialized)
        {
            If ((DM_B == Zero))
            {
                DM_B = (^MC.DIBR << 0x0C)
            }

            Return (DM_B) /* \_SB_.PC00.DM_B */
        }

        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            CreateWordField (BUF0, \_SB.PC00._Y00._MAX, PBMX)  // _MAX: Maximum Base Address
            CreateWordField (BUF0, \_SB.PC00._Y00._LEN, PBLN)  // _LEN: Length
            CreateWordField (BUF0, \_SB.PC00._Y00._MIN, PBMN)  // _MIN: Minimum Base Address
            Local0 = GPCL ()
            PBMX = ((Local0 >> 0x14) - 0x02)
            PBLN = ((Local0 >> 0x14) - One)
            If (CondRefOf (\VMDE))
            {
                If (((VMDE == One) && (PBMX > 0xDF)))
                {
                    PBMX = 0xDF
                    PBLN = 0xE0
                    ADBG (Concatenate ("[ASL]VMD is enabled, restricting Bus numbers to -", ToHexString (PBMX)))
                }
            }

            If (^MC.PM1L)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y01._LEN, C0LN)  // _LEN: Length
                C0LN = Zero
            }

            If ((^MC.PM1L == One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y01._RW, C0RW)  // _RW_: Read-Write Status
                C0RW = Zero
            }

            If (^MC.PM1H)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y02._LEN, C4LN)  // _LEN: Length
                C4LN = Zero
            }

            If ((^MC.PM1H == One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y02._RW, C4RW)  // _RW_: Read-Write Status
                C4RW = Zero
            }

            If (^MC.PM2L)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y03._LEN, C8LN)  // _LEN: Length
                C8LN = Zero
            }

            If ((^MC.PM2L == One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y03._RW, C8RW)  // _RW_: Read-Write Status
                C8RW = Zero
            }

            If (^MC.PM2H)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y04._LEN, CCLN)  // _LEN: Length
                CCLN = Zero
            }

            If ((^MC.PM2H == One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y04._RW, CCRW)  // _RW_: Read-Write Status
                CCRW = Zero
            }

            If (^MC.PM3L)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y05._LEN, D0LN)  // _LEN: Length
                D0LN = Zero
            }

            If ((^MC.PM3L == One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y05._RW, D0RW)  // _RW_: Read-Write Status
                D0RW = Zero
            }

            If (^MC.PM3H)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y06._LEN, D4LN)  // _LEN: Length
                D4LN = Zero
            }

            If ((^MC.PM3H == One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y06._RW, D4RW)  // _RW_: Read-Write Status
                D4RW = Zero
            }

            If (^MC.PM4L)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y07._LEN, D8LN)  // _LEN: Length
                D8LN = Zero
            }

            If ((^MC.PM4L == One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y07._RW, D8RW)  // _RW_: Read-Write Status
                D8RW = Zero
            }

            If (^MC.PM4H)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y08._LEN, DCLN)  // _LEN: Length
                DCLN = Zero
            }

            If ((^MC.PM4H == One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y08._RW, DCRW)  // _RW_: Read-Write Status
                DCRW = Zero
            }

            If (^MC.PM5L)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y09._LEN, E0LN)  // _LEN: Length
                E0LN = Zero
            }

            If ((^MC.PM5L == One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y09._RW, E0RW)  // _RW_: Read-Write Status
                E0RW = Zero
            }

            If (^MC.PM5H)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y0A._LEN, E4LN)  // _LEN: Length
                E4LN = Zero
            }

            If ((^MC.PM5H == One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y0A._RW, E4RW)  // _RW_: Read-Write Status
                E4RW = Zero
            }

            If (^MC.PM6L)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y0B._LEN, E8LN)  // _LEN: Length
                E8LN = Zero
            }

            If ((^MC.PM6L == One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y0B._RW, E8RW)  // _RW_: Read-Write Status
                E8RW = Zero
            }

            If (^MC.PM6H)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y0C._LEN, ECLN)  // _LEN: Length
                ECLN = Zero
            }

            If ((^MC.PM6H == One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y0C._RW, ECRW)  // _RW_: Read-Write Status
                ECRW = Zero
            }

            If (^MC.PM0H)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y0D._LEN, F0LN)  // _LEN: Length
                F0LN = Zero
            }

            If ((^MC.PM0H == One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y0D._RW, F0RW)  // _RW_: Read-Write Status
                F0RW = Zero
            }

            CreateDWordField (BUF0, \_SB.PC00._Y0E._MIN, I1MN)  // _MIN: Minimum Base Address
            CreateDWordField (BUF0, \_SB.PC00._Y0E._MAX, I1MX)  // _MAX: Maximum Base Address
            CreateDWordField (BUF0, \_SB.PC00._Y0E._LEN, I1LN)  // _LEN: Length
            CreateDWordField (BUF0, \_SB.PC00._Y0F._MIN, M1MN)  // _MIN: Minimum Base Address
            CreateDWordField (BUF0, \_SB.PC00._Y0F._MAX, M1MX)  // _MAX: Maximum Base Address
            CreateDWordField (BUF0, \_SB.PC00._Y0F._LEN, M1LN)  // _LEN: Length
            M1LN = M32L /* External reference */
            M1MN = M32B /* External reference */
            M1MX = ((M1MN + M1LN) - One)
            If ((M64L == Zero))
            {
                CreateQWordField (BUF0, \_SB.PC00._Y10._LEN, MSLN)  // _LEN: Length
                MSLN = Zero
            }
            Else
            {
                CreateQWordField (BUF0, \_SB.PC00._Y10._LEN, M2LN)  // _LEN: Length
                CreateQWordField (BUF0, \_SB.PC00._Y10._MIN, M2MN)  // _MIN: Minimum Base Address
                CreateQWordField (BUF0, \_SB.PC00._Y10._MAX, M2MX)  // _MAX: Maximum Base Address
                M2LN = M64L /* External reference */
                M2MN = M64B /* External reference */
                M2MX = ((M2MN + M2LN) - One)
            }

            If ((PCHA != Zero))
            {
                PBMN = SBSB /* \SBSB */
                PBMX = SBSL /* \SBSL */
                PBLN = (SBSL - SBSB) /* \SBSB */
                PBLN += One
                I1MN = SIOB /* \SIOB */
                I1MX = SIOL /* \SIOL */
                I1LN = (I1MX - I1MN) /* \_SB_.PC00._CRS.I1MN */
                I1LN += One
                M1MN = SMEB /* \SMEB */
                M1MX = SMEL /* \SMEL */
                M1LN = (M1MX - M1MN) /* \_SB_.PC00._CRS.M1MN */
                M1LN += One
                M2MN = SPMB /* \SPMB */
                M2MX = SPML /* \SPML */
                M2LN = (M2MX - M2MN) /* \_SB_.PC00._CRS.M2MN */
                M2LN += One
            }

            Return (BUF0) /* \_SB_.PC00.BUF0 */
        }

        Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
        Name (SUPP, Zero)
        Name (CTRL, Zero)
        Name (XCNT, Zero)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            Local0 = Arg3
            CreateDWordField (Local0, Zero, CDW1)
            CreateDWordField (Local0, 0x04, CDW2)
            CreateDWordField (Local0, 0x08, CDW3)
            If ((Arg0 == GUID))
            {
                SUPP = CDW2 /* \_SB_.PC00._OSC.CDW2 */
                CTRL = CDW3 /* \_SB_.PC00._OSC.CDW3 */
                If (!NEXP)
                {
                    CTRL &= 0xFFFFFFF8
                }

                If (CondRefOf (ITSP))
                {
                    If (ITSP)
                    {
                        CTRL &= 0xFFFFFFF7
                    }
                }

                If (~(CDW1 & One))
                {
                    OSCC = CTRL /* \_SB_.PC00.CTRL */
                    If (CondRefOf (SWAK))
                    {
                        SWAK (0xFFFF, Zero)
                    }
                }

                If ((Arg1 != One))
                {
                    CDW1 |= 0x08
                }

                If ((CDW3 != CTRL))
                {
                    CDW1 |= 0x10
                }

                CDW3 = CTRL /* \_SB_.PC00.CTRL */
                OSCC = CTRL /* \_SB_.PC00.CTRL */
                Return (Local0)
            }
            Else
            {
                CDW1 |= 0x04
                Return (Local0)
            }
        }

        Scope (\_SB.PC00)
        {
            Device (GFX0)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
            }

            Device (TCPU)
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (IPU0)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
            }

            Device (GNA0)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
            }

            Device (VPU0)
            {
                Name (_ADR, 0x000B0000)  // _ADR: Address
            }
        }

        Scope (\)
        {
            Method (ADBG, 1, Serialized)
            {
                If (IADG)
                {
                    If (CondRefOf (ODBG))
                    {
                        ODBG (Arg0)
                    }

                    Debug = Arg0
                    If (CondRefOf (SRLD))
                    {
                        If ((SRLD == One))
                        {
                            SDBG (Arg0)
                        }
                    }

                    If (CondRefOf (MDBG))
                    {
                        THDH (Arg0)
                        Return (MDBG (Arg0))
                    }
                }

                Return (Zero)
            }
        }

        Scope (MC)
        {
            Name (PA0H, Zero)
            Name (PA1H, Zero)
            Name (PA1L, Zero)
            Name (PA2H, Zero)
            Name (PA2L, Zero)
            Name (PA3H, Zero)
            Name (PA3L, Zero)
            Name (PA4H, Zero)
            Name (PA4L, Zero)
            Name (PA5H, Zero)
            Name (PA5L, Zero)
            Name (PA6H, Zero)
            Name (PA6L, Zero)
            Name (PACP, Zero)
            Name (PAAC, Zero)
            OperationRegion (MCHR, SystemMemory, (GMHB () + 0x6100), 0x0100)
            Field (MCHR, ByteAcc, NoLock, Preserve)
            {
                Offset (0x28), 
                PGCP,   1, 
                Offset (0x30), 
                PWAC,   1
            }

            Method (NPTS, 1, NotSerialized)
            {
                PA0H = PM0H /* \_SB_.PC00.MC__.PM0H */
                PA1H = PM1H /* \_SB_.PC00.MC__.PM1H */
                PA1L = PM1L /* \_SB_.PC00.MC__.PM1L */
                PA2H = PM2H /* \_SB_.PC00.MC__.PM2H */
                PA2L = PM2L /* \_SB_.PC00.MC__.PM2L */
                PA3H = PM3H /* \_SB_.PC00.MC__.PM3H */
                PA3L = PM3L /* \_SB_.PC00.MC__.PM3L */
                PA4H = PM4H /* \_SB_.PC00.MC__.PM4H */
                PA4L = PM4L /* \_SB_.PC00.MC__.PM4L */
                PA5H = PM5H /* \_SB_.PC00.MC__.PM5H */
                PA5L = PM5L /* \_SB_.PC00.MC__.PM5L */
                PA6H = PM6H /* \_SB_.PC00.MC__.PM6H */
                PA6L = PM6L /* \_SB_.PC00.MC__.PM6L */
                PACP = PGCP /* \_SB_.PC00.MC__.PGCP */
                PAAC = PWAC /* \_SB_.PC00.MC__.PWAC */
            }

            Method (NWAK, 1, NotSerialized)
            {
                PM0H = PA0H /* \_SB_.PC00.MC__.PA0H */
                PM1H = PA1H /* \_SB_.PC00.MC__.PA1H */
                PM1L = PA1L /* \_SB_.PC00.MC__.PA1L */
                PM2H = PA2H /* \_SB_.PC00.MC__.PA2H */
                PM2L = PA2L /* \_SB_.PC00.MC__.PA2L */
                PM3H = PA3H /* \_SB_.PC00.MC__.PA3H */
                PM3L = PA3L /* \_SB_.PC00.MC__.PA3L */
                PM4H = PA4H /* \_SB_.PC00.MC__.PA4H */
                PM4L = PA4L /* \_SB_.PC00.MC__.PA4L */
                PM5H = PA5H /* \_SB_.PC00.MC__.PA5H */
                PM5L = PA5L /* \_SB_.PC00.MC__.PA5L */
                PM6H = PA6H /* \_SB_.PC00.MC__.PA6H */
                PM6L = PA6L /* \_SB_.PC00.MC__.PA6L */
                PGCP = PACP /* \_SB_.PC00.MC__.PACP */
                PWAC = PAAC /* \_SB_.PC00.MC__.PAAC */
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (AWAC)
        {
            Name (_HID, "ACPI000E" /* Time and Alarm Device */)  // _HID: Hardware ID
            Name (WAST, Zero)
            Name (WTTR, Zero)
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x72, 0x04))
            }

            Mutex (RTCL, 0x00)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((STAS == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_GCP, 0, NotSerialized)  // _GCP: Get Capabilities
            {
                Return (0xB7)
            }

            OperationRegion (RTCM, SystemCMOS, Zero, 0x3F)
            Field (RTCM, ByteAcc, Lock, Preserve)
            {
                SEC,    8, 
                Offset (0x02), 
                MIN,    8, 
                Offset (0x04), 
                HOR,    8, 
                Offset (0x07), 
                DAY,    8, 
                MON,    8, 
                YEAR,   8, 
                REGA,   8, 
                Offset (0x32), 
                CNTY,   8
            }

            Method (_GRT, 0, Serialized)  // _GRT: Get Real Time
            {
                Name (BUFF, Buffer (0x10){})
                CreateWordField (BUFF, Zero, Y)
                CreateByteField (BUFF, 0x02, M)
                CreateByteField (BUFF, 0x03, D)
                CreateByteField (BUFF, 0x04, H)
                CreateByteField (BUFF, 0x05, MIN1)
                CreateByteField (BUFF, 0x06, S)
                CreateByteField (BUFF, 0x07, V)
                CreateWordField (BUFF, 0x0A, TZ)
                CreateByteField (BUFF, 0x0C, DL)
                Acquire (RTCL, 0xFFFF)
                Local1 = Zero
                Name (TOUT, 0x000186A0)
                TOUT /= 0x0A
                While (((REGA & 0x80) && (Local1 < TOUT)))
                {
                    Stall (0x0A)
                    Local1 += 0x0A
                }

                If ((Local1 >= TOUT))
                {
                    ADBG ("_GRT timeout fail")
                }

                FromBCD (YEAR, Local5)
                FromBCD (CNTY, Local6)
                Y = ((Local6 * 0x64) + Local5)
                FromBCD (MON, M) /* \_SB_.PC00.AWAC._GRT.M___ */
                FromBCD (DAY, D) /* \_SB_.PC00.AWAC._GRT.D___ */
                FromBCD (HOR, H) /* \_SB_.PC00.AWAC._GRT.H___ */
                FromBCD (MIN, MIN1) /* \_SB_.PC00.AWAC._GRT.MIN1 */
                FromBCD (SEC, S) /* \_SB_.PC00.AWAC._GRT.S___ */
                Release (RTCL)
                TZ = 0x07FF
                DL = Zero
                V = One
                Return (BUFF) /* \_SB_.PC00.AWAC._GRT.BUFF */
            }

            Method (_SRT, 1, NotSerialized)  // _SRT: Set Real Time
            {
                CreateWordField (Arg0, Zero, Y)
                CreateByteField (Arg0, 0x02, M)
                CreateByteField (Arg0, 0x03, D)
                CreateByteField (Arg0, 0x04, H)
                CreateByteField (Arg0, 0x05, MIN1)
                CreateByteField (Arg0, 0x06, S)
                Acquire (RTCL, 0xFFFF)
                Local1 = Zero
                Name (TOUT, 0x000186A0)
                TOUT /= 0x0A
                While (((REGA & 0x80) && (Local1 < TOUT)))
                {
                    Stall (0x0A)
                    Local1 += 0x0A
                }

                If ((Local1 >= TOUT))
                {
                    ADBG ("_SRT timeout fail")
                    Release (RTCL)
                    Return (0xFFFFFFFF)
                }

                Divide (Y, 0x64, Local5, Local4)
                ToBCD (Local4, CNTY) /* \_SB_.PC00.AWAC.CNTY */
                ToBCD (Local5, YEAR) /* \_SB_.PC00.AWAC.YEAR */
                ToBCD (M, MON) /* \_SB_.PC00.AWAC.MON_ */
                ToBCD (D, DAY) /* \_SB_.PC00.AWAC.DAY_ */
                ToBCD (H, HOR) /* \_SB_.PC00.AWAC.HOR_ */
                ToBCD (MIN1, MIN) /* \_SB_.PC00.AWAC.MIN_ */
                ToBCD (S, SEC) /* \_SB_.PC00.AWAC.SEC_ */
                Release (RTCL)
                Return (Zero)
            }

            Method (_GWS, 1, Serialized)  // _GWS: Get Wake Status
            {
                Local0 = Zero
                If ((Arg0 == Zero))
                {
                    If (((ACWA == 0xFFFFFFFF) && (One & WTTR)))
                    {
                        Local0 |= One
                        WTTR ^= One /* \_SB_.PC00.AWAC.WTTR */
                    }
                }
                ElseIf (((DCWA == 0xFFFFFFFF) && (0x02 & WTTR)))
                {
                    Local0 |= One
                    WTTR ^= 0x02 /* \_SB_.PC00.AWAC.WTTR */
                }

                If (WAST)
                {
                    Local0 |= 0x02
                    WAST = Zero
                }

                Return (Local0)
            }

            Method (_CWS, 1, NotSerialized)  // _CWS: Clear Wake Alarm Status
            {
                Return (Zero)
            }

            Method (_STP, 2, NotSerialized)  // _STP: Set Expired Timer Wake Policy
            {
                If ((Arg0 == Zero))
                {
                    ACET = Arg1
                }
                Else
                {
                    DCET = Arg1
                }

                Return (Zero)
            }

            Method (_STV, 2, Serialized)  // _STV: Set Timer Value
            {
                If ((Arg0 == Zero))
                {
                    ACWA = Arg1
                    WTTR |= One /* \_SB_.PC00.AWAC.WTTR */
                }
                Else
                {
                    DCWA = Arg1
                    WTTR |= 0x02 /* \_SB_.PC00.AWAC.WTTR */
                }

                Return (Zero)
            }

            Method (_TIP, 1, NotSerialized)  // _TIP: Expired Timer Wake Policy
            {
                If ((Arg0 == Zero))
                {
                    Return (ACET) /* External reference */
                }
                Else
                {
                    Return (DCET) /* External reference */
                }
            }

            Method (_TIV, 1, NotSerialized)  // _TIV: Timer Values
            {
                If ((Arg0 == Zero))
                {
                    Return (ACWA) /* External reference */
                }
                Else
                {
                    Return (DCWA) /* External reference */
                }
            }
        }
    }

    Scope (_SB)
    {
        Method (ASRT, 2, NotSerialized)
        {
            Local1 = (Arg0 & 0xFF)
            While (One)
            {
                Local0 = 0x09
                P8XH (Zero, Local1)
                ADBG (ToHexString (Arg1))
                While ((Local0 > Zero))
                {
                    P8XH (One, Local0)
                    Local0--
                    Local2 = 0x2710
                    While ((Local2 > Zero))
                    {
                        Stall (0x64)
                        Local2--
                    }
                }

                P8XH (Zero, 0xB6)
                P8XH (One, 0xAD)
                Sleep (0xEA60)
            }
        }
    }

    If ((ECR1 == One))
    {
        Scope (_SB.PC00)
        {
            Name (PCIG, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */)
            Method (PCID, 4, Serialized)
            {
                If ((Arg0 == PCIG))
                {
                    If ((Arg1 >= 0x03))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0x01, 0x03                                       // ..
                            })
                        }

                        If ((Arg2 == 0x08))
                        {
                            Return (One)
                        }

                        If ((Arg2 == 0x09))
                        {
                            Return (Package (0x05)
                            {
                                0xC350, 
                                Ones, 
                                Ones, 
                                0xC350, 
                                Ones
                            })
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        If (CondRefOf (\_SB.PC02))
        {
            Scope (_SB.PC02)
            {
                Method (PCID, 4, Serialized)
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Method (PCIC, 1, Serialized)
        {
            If ((ECR1 == One))
            {
                If ((Arg0 == PCIG))
                {
                    Return (One)
                }
            }

            Return (Zero)
        }

        If ((PCHA == Zero))
        {
            Method (IICB, 2, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Name (IIC0, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C0",
                                0x00, ResourceConsumer, _Y11, Exclusive,
                                )
                        })
                        CreateWordField (IIC0, \_SB.PC00.IICB._Y11._ADR, DAD0)  // _ADR: Address
                        DAD0 = Arg0
                        Return (IIC0) /* \_SB_.PC00.IICB.IIC0 */
                    }
                    Case (One)
                    {
                        Name (IIC1, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C1",
                                0x00, ResourceConsumer, _Y12, Exclusive,
                                )
                        })
                        CreateWordField (IIC1, \_SB.PC00.IICB._Y12._ADR, DAD1)  // _ADR: Address
                        DAD1 = Arg0
                        Return (IIC1) /* \_SB_.PC00.IICB.IIC1 */
                    }
                    Case (0x02)
                    {
                        Name (IIC2, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C2",
                                0x00, ResourceConsumer, _Y13, Exclusive,
                                )
                        })
                        CreateWordField (IIC2, \_SB.PC00.IICB._Y13._ADR, DAD2)  // _ADR: Address
                        DAD2 = Arg0
                        Return (IIC2) /* \_SB_.PC00.IICB.IIC2 */
                    }
                    Case (0x03)
                    {
                        Name (IIC3, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C3",
                                0x00, ResourceConsumer, _Y14, Exclusive,
                                )
                        })
                        CreateWordField (IIC3, \_SB.PC00.IICB._Y14._ADR, DAD3)  // _ADR: Address
                        DAD3 = Arg0
                        Return (IIC3) /* \_SB_.PC00.IICB.IIC3 */
                    }
                    Case (0x04)
                    {
                        Name (IIC4, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C4",
                                0x00, ResourceConsumer, _Y15, Exclusive,
                                )
                        })
                        CreateWordField (IIC4, \_SB.PC00.IICB._Y15._ADR, DAD4)  // _ADR: Address
                        DAD4 = Arg0
                        Return (IIC4) /* \_SB_.PC00.IICB.IIC4 */
                    }
                    Case (0x05)
                    {
                        Name (IIC5, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C5",
                                0x00, ResourceConsumer, _Y16, Exclusive,
                                )
                        })
                        CreateWordField (IIC5, \_SB.PC00.IICB._Y16._ADR, DAD5)  // _ADR: Address
                        DAD5 = Arg0
                        Return (IIC5) /* \_SB_.PC00.IICB.IIC5 */
                    }
                    Case (0x06)
                    {
                        Name (IIC6, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C6",
                                0x00, ResourceConsumer, _Y17, Exclusive,
                                )
                        })
                        CreateWordField (IIC6, \_SB.PC00.IICB._Y17._ADR, DAD6)  // _ADR: Address
                        DAD6 = Arg0
                        Return (IIC6) /* \_SB_.PC00.IICB.IIC6 */
                    }
                    Case (0x07)
                    {
                        Name (IIC7, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C7",
                                0x00, ResourceConsumer, _Y18, Exclusive,
                                )
                        })
                        CreateWordField (IIC7, \_SB.PC00.IICB._Y18._ADR, DAD7)  // _ADR: Address
                        DAD7 = Arg0
                        Return (IIC7) /* \_SB_.PC00.IICB.IIC7 */
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
        }

        Method (VIIC, 2, Serialized)
        {
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Name (VI00, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.VIC0",
                            0x00, ResourceConsumer, _Y19, Exclusive,
                            )
                    })
                    CreateWordField (VI00, \_SB.PC00.VIIC._Y19._ADR, DAR0)  // _ADR: Address
                    DAR0 = Arg0
                    Return (VI00) /* \_SB_.PC00.VIIC.VI00 */
                }
                Case (One)
                {
                    Name (VI11, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.VIC1",
                            0x00, ResourceConsumer, _Y1A, Exclusive,
                            )
                    })
                    CreateWordField (VI11, \_SB.PC00.VIIC._Y1A._ADR, DAQ1)  // _ADR: Address
                    DAQ1 = Arg0
                    Return (VI11) /* \_SB_.PC00.VIIC.VI11 */
                }
                Default
                {
                    Return (ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.VICX",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                }

            }
        }

        Method (INTB, 3, Serialized)
        {
            Name (INTR, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y1B)
                {
                    0x00000000,
                }
            })
            CreateDWordField (INTR, \_SB.PC00.INTB._Y1B._INT, NUMI)  // _INT: Interrupts
            NUMI = INUM (Arg0)
            CreateBitField (INTR, \_SB.PC00.INTB._Y1B._HE, LEVI)  // _HE_: High-Edge
            LEVI = Arg1
            CreateBitField (INTR, \_SB.PC00.INTB._Y1B._LL, ACTI)  // _LL_: Low Level
            ACTI = Arg2
            Return (INTR) /* \_SB_.PC00.INTB.INTR */
        }
    }

    If (CondRefOf (\_SB.PC02))
    {
        Scope (_SB.PC02)
        {
            Method (PCIC, 1, Serialized)
            {
                Return (^^PC00.PCIC (Arg0))
            }

            Method (IICB, 2, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Name (IIC0, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C0",
                                0x00, ResourceConsumer, _Y1C, Exclusive,
                                )
                        })
                        CreateWordField (IIC0, \_SB.PC02.IICB._Y1C._ADR, DAD0)  // _ADR: Address
                        DAD0 = Arg0
                        Return (IIC0) /* \_SB_.PC02.IICB.IIC0 */
                    }
                    Case (One)
                    {
                        Name (IIC1, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C1",
                                0x00, ResourceConsumer, _Y1D, Exclusive,
                                )
                        })
                        CreateWordField (IIC1, \_SB.PC02.IICB._Y1D._ADR, DAD1)  // _ADR: Address
                        DAD1 = Arg0
                        Return (IIC1) /* \_SB_.PC02.IICB.IIC1 */
                    }
                    Case (0x02)
                    {
                        Name (IIC2, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C2",
                                0x00, ResourceConsumer, _Y1E, Exclusive,
                                )
                        })
                        CreateWordField (IIC2, \_SB.PC02.IICB._Y1E._ADR, DAD2)  // _ADR: Address
                        DAD2 = Arg0
                        Return (IIC2) /* \_SB_.PC02.IICB.IIC2 */
                    }
                    Case (0x03)
                    {
                        Name (IIC3, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C3",
                                0x00, ResourceConsumer, _Y1F, Exclusive,
                                )
                        })
                        CreateWordField (IIC3, \_SB.PC02.IICB._Y1F._ADR, DAD3)  // _ADR: Address
                        DAD3 = Arg0
                        Return (IIC3) /* \_SB_.PC02.IICB.IIC3 */
                    }
                    Case (0x04)
                    {
                        Name (IIC4, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C4",
                                0x00, ResourceConsumer, _Y20, Exclusive,
                                )
                        })
                        CreateWordField (IIC4, \_SB.PC02.IICB._Y20._ADR, DAD4)  // _ADR: Address
                        DAD4 = Arg0
                        Return (IIC4) /* \_SB_.PC02.IICB.IIC4 */
                    }
                    Case (0x05)
                    {
                        Name (IIC5, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C5",
                                0x00, ResourceConsumer, _Y21, Exclusive,
                                )
                        })
                        CreateWordField (IIC5, \_SB.PC02.IICB._Y21._ADR, DAD5)  // _ADR: Address
                        DAD5 = Arg0
                        Return (IIC5) /* \_SB_.PC02.IICB.IIC5 */
                    }
                    Case (0x06)
                    {
                        Name (IIC6, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C6",
                                0x00, ResourceConsumer, _Y22, Exclusive,
                                )
                        })
                        CreateWordField (IIC6, \_SB.PC02.IICB._Y22._ADR, DAD6)  // _ADR: Address
                        DAD6 = Arg0
                        Return (IIC6) /* \_SB_.PC02.IICB.IIC6 */
                    }
                    Case (0x07)
                    {
                        Name (IIC7, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C7",
                                0x00, ResourceConsumer, _Y23, Exclusive,
                                )
                        })
                        CreateWordField (IIC7, \_SB.PC02.IICB._Y23._ADR, DAD7)  // _ADR: Address
                        DAD7 = Arg0
                        Return (IIC7) /* \_SB_.PC02.IICB.IIC7 */
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Method (INTB, 3, Serialized)
            {
                Name (INTR, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y24)
                    {
                        0x00000000,
                    }
                })
                CreateDWordField (INTR, \_SB.PC02.INTB._Y24._INT, NUMI)  // _INT: Interrupts
                NUMI = INUM (Arg0)
                CreateBitField (INTR, \_SB.PC02.INTB._Y24._HE, LEVI)  // _HE_: High-Edge
                LEVI = Arg1
                CreateBitField (INTR, \_SB.PC02.INTB._Y24._LL, ACTI)  // _LL_: Low Level
                ACTI = Arg2
                Return (INTR) /* \_SB_.PC02.INTB.INTR */
            }
        }
    }

    Name (SNVB, 0x65812000)
    Name (SNVL, 0x0008)
    OperationRegion (SBNV, SystemMemory, SNVB, SNVL)
    Field (SBNV, AnyAcc, Lock, Preserve)
    {
        PIRA,   8, 
        PIRB,   8, 
        PIRC,   8, 
        PIRD,   8, 
        PIRE,   8, 
        PIRF,   8, 
        PIRG,   8, 
        PIRH,   8
    }

    Scope (_SB)
    {
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local0 = (PIRA & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLA, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLA, One, IRQ0)
                IRQ0 = PIRA /* \PIRA */
                Return (RTLA) /* \_SB_.LNKA._CRS.RTLA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRA |= 0x80
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRA = Local0
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local0 = (PIRB & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLB, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {10}
                })
                CreateWordField (RTLB, One, IRQ0)
                IRQ0 = PIRB /* \PIRB */
                Return (RTLB) /* \_SB_.LNKB._CRS.RTLB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRB |= 0x80
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRB = Local0
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local0 = (PIRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLC, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLC, One, IRQ0)
                IRQ0 = PIRC /* \PIRC */
                Return (RTLC) /* \_SB_.LNKC._CRS.RTLC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRC |= 0x80
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRC = Local0
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local0 = (PIRD & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLD, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLD, One, IRQ0)
                IRQ0 = PIRD /* \PIRD */
                Return (RTLD) /* \_SB_.LNKD._CRS.RTLD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRD |= 0x80
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRD = Local0
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local0 = (PIRE & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLE, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLE, One, IRQ0)
                IRQ0 = PIRE /* \PIRE */
                Return (RTLE) /* \_SB_.LNKE._CRS.RTLE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE |= 0x80
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRE = Local0
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local0 = (PIRF & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLF, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLF, One, IRQ0)
                IRQ0 = PIRF /* \PIRF */
                Return (RTLF) /* \_SB_.LNKF._CRS.RTLF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF |= 0x80
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local0 = (PIRG & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLG, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLG, One, IRQ0)
                IRQ0 = PIRG /* \PIRG */
                Return (RTLG) /* \_SB_.LNKG._CRS.RTLG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG |= 0x80
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local0 = (PIRH & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLH, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLH, One, IRQ0)
                IRQ0 = PIRH /* \PIRH */
                Return (RTLH) /* \_SB_.LNKH._CRS.RTLH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH |= 0x80
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }
        }
    }

    OperationRegion (_SB.PC00.LPCB.LPCR, PCI_Config, 0x80, 0x04)
    Field (\_SB.PC00.LPCB.LPCR, ByteAcc, NoLock, Preserve)
    {
        CARN,   3, 
            ,   1, 
        CBDR,   3, 
        Offset (0x01), 
        LTDR,   2, 
            ,   2, 
        FDDR,   1, 
        Offset (0x02), 
        CALE,   1, 
        CBLE,   1, 
        LTLE,   1, 
        FDLE,   1, 
        Offset (0x03), 
        GLLE,   1, 
        GHLE,   1, 
        KCLE,   1, 
        MCLE,   1, 
        C1LE,   1, 
        C2LE,   1, 
        Offset (0x04)
    }

    Method (UXDV, 1, Serialized)
    {
        Local0 = 0xFF
        Switch ((Arg0 + Zero))
        {
            Case (0x03F8)
            {
                Local0 = Zero
            }
            Case (0x02F8)
            {
                Local0 = One
            }
            Case (0x0220)
            {
                Local0 = 0x02
            }
            Case (0x0228)
            {
                Local0 = 0x03
            }
            Case (0x0238)
            {
                Local0 = 0x04
            }
            Case (0x02E8)
            {
                Local0 = 0x05
            }
            Case (0x0338)
            {
                Local0 = 0x06
            }
            Case (0x03E8)
            {
                Local0 = 0x07
            }

        }

        Return (Local0)
    }

    Method (RRIO, 4, Serialized)
    {
        Switch ((Arg0 + Zero))
        {
            Case (Zero)
            {
                CALE = Zero
                Local0 = UXDV (Arg2)
                If ((Local0 != 0xFF))
                {
                    CARN = Local0
                }

                If (Arg1)
                {
                    CALE = One
                }
            }
            Case (One)
            {
                CBLE = Zero
                Local0 = UXDV (Arg2)
                If ((Local0 != 0xFF))
                {
                    CBDR = Local0
                }

                If (Arg1)
                {
                    CBLE = One
                }
            }
            Case (0x02)
            {
                LTLE = Zero
                If ((Arg2 == 0x0378))
                {
                    LTDR = Zero
                }

                If ((Arg2 == 0x0278))
                {
                    LTDR = One
                }

                If ((Arg2 == 0x03BC))
                {
                    LTDR = 0x02
                }

                If (Arg1)
                {
                    LTLE = One
                }
            }
            Case (0x03)
            {
                FDLE = Zero
                If ((Arg2 == 0x03F0))
                {
                    FDDR = Zero
                }

                If ((Arg2 == 0x0370))
                {
                    FDDR = One
                }

                If (Arg1)
                {
                    FDLE = One
                }
            }
            Case (0x08)
            {
                If ((Arg2 == 0x0200))
                {
                    If (Arg1)
                    {
                        GLLE = One
                    }
                    Else
                    {
                        GLLE = Zero
                    }
                }

                If ((Arg2 == 0x0208))
                {
                    If (Arg1)
                    {
                        GHLE = One
                    }
                    Else
                    {
                        GHLE = Zero
                    }
                }
            }
            Case (0x09)
            {
                If ((Arg2 == 0x0200))
                {
                    If (Arg1)
                    {
                        GLLE = One
                    }
                    Else
                    {
                        GLLE = Zero
                    }
                }

                If ((Arg2 == 0x0208))
                {
                    If (Arg1)
                    {
                        GHLE = One
                    }
                    Else
                    {
                        GHLE = Zero
                    }
                }
            }
            Case (0x0A)
            {
                If (((Arg2 == 0x60) || (Arg2 == 0x64)))
                {
                    If (Arg1)
                    {
                        KCLE = One
                    }
                    Else
                    {
                        KCLE = Zero
                    }
                }
            }
            Case (0x0B)
            {
                If (((Arg2 == 0x62) || (Arg2 == 0x66)))
                {
                    If (Arg1)
                    {
                        MCLE = One
                    }
                    Else
                    {
                        MCLE = Zero
                    }
                }
            }
            Case (0x0C)
            {
                If ((Arg2 == 0x2E))
                {
                    If (Arg1)
                    {
                        C1LE = One
                    }
                    Else
                    {
                        C1LE = Zero
                    }
                }

                If ((Arg2 == 0x4E))
                {
                    If (Arg1)
                    {
                        C2LE = One
                    }
                    Else
                    {
                        C2LE = Zero
                    }
                }
            }
            Case (0x0D)
            {
                If ((Arg2 == 0x2E))
                {
                    If (Arg1)
                    {
                        C1LE = One
                    }
                    Else
                    {
                        C1LE = Zero
                    }
                }

                If ((Arg2 == 0x4E))
                {
                    If (Arg1)
                    {
                        C2LE = One
                    }
                    Else
                    {
                        C2LE = Zero
                    }
                }
            }

        }
    }

    Method (RDMA, 3, NotSerialized)
    {
    }

    Scope (_SB)
    {
        Method (PSD3, 1, Serialized)
        {
            Local0 = Zero
            If (((SIME == One) || !IMPS ()))
            {
                Return (Zero)
            }

            Switch ((Zero + Arg0--))
            {
                Case (Zero)
                {
                    RAA0 = One
                    While (((APA0 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (One)
                {
                    RAA1 = One
                    While (((APA1 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x02)
                {
                    RAA2 = One
                    While (((APA2 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x03)
                {
                    RAA3 = One
                    While (((APA3 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x04)
                {
                    RPB0 = One
                    While (((APB0 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x05)
                {
                    RPB1 = One
                    While (((APB1 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x06)
                {
                    RPB2 = One
                    While (((APB2 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x07)
                {
                    RPB3 = One
                    While (((APB3 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x08)
                {
                    RPC0 = One
                    While (((APC0 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x09)
                {
                    RPC1 = One
                    While (((APC1 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0A)
                {
                    RPC2 = One
                    While (((APC2 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0B)
                {
                    RPC3 = One
                    While (((APC3 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0C)
                {
                    RPD0 = One
                    While (((APD0 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0D)
                {
                    RPD1 = One
                    While (((APD1 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0E)
                {
                    RPD2 = One
                    While (((APD2 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0F)
                {
                    RPD3 = One
                    While (((APD3 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x10)
                {
                    RPE0 = One
                    While (((APE0 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x11)
                {
                    RPE1 = One
                    While (((APE1 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x12)
                {
                    RPE2 = One
                    While (((APE2 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x13)
                {
                    RPE3 = One
                    While (((APE3 == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }

            }

            If ((Local0 >= 0x2710))
            {
                ADBG ("Error: Timeout occurred")
            }
        }

        Method (PSD0, 1, Serialized)
        {
            Local0 = Zero
            If (((SIME == One) || !IMPS ()))
            {
                Return (Zero)
            }

            Switch ((Zero + Arg0--))
            {
                Case (Zero)
                {
                    RAA0 = Zero
                    While (((APA0 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (One)
                {
                    RAA1 = Zero
                    While (((APA1 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x02)
                {
                    RAA2 = Zero
                    While (((APA2 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x03)
                {
                    RAA3 = Zero
                    While (((APA3 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x04)
                {
                    RPB0 = Zero
                    While (((APB0 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x05)
                {
                    RPB1 = Zero
                    While (((APB1 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x06)
                {
                    RPB2 = Zero
                    While (((APB2 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x07)
                {
                    RPB3 = Zero
                    While (((APB3 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x08)
                {
                    RPC0 = Zero
                    While (((APC0 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x09)
                {
                    RPC1 = Zero
                    While (((APC1 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0A)
                {
                    RPC2 = Zero
                    While (((APC2 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0B)
                {
                    RPC3 = Zero
                    While (((APC3 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0C)
                {
                    RPD0 = Zero
                    While (((APD0 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0D)
                {
                    RPD1 = Zero
                    While (((APD1 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0E)
                {
                    RPD2 = Zero
                    While (((APD2 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x0F)
                {
                    RPD3 = Zero
                    While (((APD3 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x10)
                {
                    RPE0 = Zero
                    While (((APE0 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x11)
                {
                    RPE1 = Zero
                    While (((APE1 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x12)
                {
                    RPE2 = Zero
                    While (((APE2 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x13)
                {
                    RPE3 = Zero
                    While (((APE3 == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }

            }

            If ((Local0 >= 0x2710))
            {
                ADBG ("Error: Timeout occurred")
            }
        }

        Method (CSD3, 1, Serialized)
        {
            Local0 = Zero
            If (((SIME == One) || !IMPS ()))
            {
                Return (Zero)
            }

            Switch (ToInteger (Arg0))
            {
                Case (0x14)
                {
                    RSAT = One
                    While (((ASAT == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x15)
                {
                    RGBE = One
                    While (((AGBE == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x16)
                {
                    RXHC = One
                    While (((AXHC == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x17)
                {
                    RXDC = One
                    While (((AXDC == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x18)
                {
                    RUFS = One
                    While (((AUFS == Zero) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }

            }

            If ((Local0 >= 0x2710))
            {
                ADBG ("Error: Timeout occurred")
            }
        }

        Method (CSD0, 1, Serialized)
        {
            Local0 = Zero
            If (((SIME == One) || !IMPS ()))
            {
                Return (Zero)
            }

            Switch (ToInteger (Arg0))
            {
                Case (0x14)
                {
                    RSAT = Zero
                    While (((ASAT == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x15)
                {
                    RGBE = Zero
                    While (((AGBE == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x16)
                {
                    RXHC = Zero
                    While (((AXHC == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x17)
                {
                    RXDC = Zero
                    While (((AXDC == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }
                Case (0x18)
                {
                    RUFS = Zero
                    While (((AUFS == One) && (Local0 < 0x2710)))
                    {
                        Local0++
                        Sleep (One)
                    }
                }

            }

            If ((Local0 >= 0x2710))
            {
                ADBG ("Error: Timeout occurred")
            }
        }
    }

    Name (THMN, 0x48)
    Name (THCN, 0x0E)
    Name (CNPM, 0x80)
    Name (FMSN, 0x10)
    Scope (\)
    {
        Method (THDA, 2, Serialized)
        {
            Local0 = TFWB /* \TFWB */
            Local0 += (0x40 * (CNPM * (Arg0 - FMSN)))
            Local0 += (0x40 * Arg1)
            Return (Local0)
        }

        Method (STRD, 3, Serialized)
        {
            If (((Arg1 + Arg2) > SizeOf (Arg0)))
            {
                Return (Zero)
            }

            ToBuffer (Arg0, Local3)
            Local0 = Zero
            Local1 = Zero
            While ((Local1 < Arg2))
            {
                Local2 = DerefOf (Local3 [(Arg1 + Local1)])
                Local0 += (Local2 << (0x08 * Local1))
                Local1++
            }

            Return (Local0)
        }

        Method (THDS, 1, Serialized)
        {
            If (!(TVBS & One))
            {
                Return (Zero)
            }

            Concatenate (Arg0, "\n", Local2)
            Local0 = SizeOf (Local2)
            Local1 = THDA (THMN, THCN)
            OperationRegion (THBA, SystemMemory, Local1, 0x40)
            Field (THBA, QWordAcc, NoLock, WriteAsZeros)
            {
                QO00,   64
            }

            Field (THBA, DWordAcc, NoLock, WriteAsZeros)
            {
                DO00,   32, 
                Offset (0x10), 
                DO10,   32, 
                Offset (0x30), 
                DO30,   32
            }

            Field (THBA, WordAcc, NoLock, WriteAsZeros)
            {
                WO00,   16
            }

            Field (THBA, ByteAcc, NoLock, WriteAsZeros)
            {
                BO00,   8
            }

            DO10 = 0x01000242
            WO00 = Local0
            Local6 = Zero
            Local7 = Local0
            While ((Local7 >= 0x08))
            {
                QO00 = STRD (Local2, Local6, 0x08)
                Local6 += 0x08
                Local7 -= 0x08
            }

            If ((Local7 >= 0x04))
            {
                DO00 = STRD (Local2, Local6, 0x04)
                Local6 += 0x04
                Local7 -= 0x04
            }

            If ((Local7 >= 0x02))
            {
                WO00 = STRD (Local2, Local6, 0x02)
                Local6 += 0x02
                Local7 -= 0x02
            }

            If ((Local7 >= One))
            {
                BO00 = STRD (Local2, Local6, One)
                Local6 += One
                Local7 -= One
            }

            DO30 = Zero
        }

        Method (THDH, 1, Serialized)
        {
            THDS (ToHexString (Arg0))
        }

        Method (THDD, 1, Serialized)
        {
            THDS (ToDecimalString (Arg0))
        }
    }

    Name (PCHH, One)
    Name (PCHN, 0x03)
    Name (PCHL, 0x02)
    Name (PCHP, 0x05)
    Name (PCHM, 0x06)
    Name (PCHX, 0x04)
    Scope (_SB)
    {
        Method (PWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                S23W ()
            }
        }

        Name (HDAA, One)
        Name (DISA, One)
        Name (CIWF, One)
        Name (CIBT, One)
        Name (S23C, Zero)
        Method (S23W, 0, NotSerialized)
        {
            HDAA = One
            DISA = One
            CIWF = One
            CIBT = One
        }

        Method (DION, 0, NotSerialized)
        {
            S023 (One, One)
        }

        Method (DIOF, 0, NotSerialized)
        {
            S023 (One, Zero)
        }

        Method (S023, 2, Serialized)
        {
        }

        Device (PRRE)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "PCHRESV")  // _UID: Unique ID
            Name (_STA, 0x08)  // _STA: Status
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFE000000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE04C000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE050000,         // Address Base
                        0x00060000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE0D0000,         // Address Base
                        0x00030000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE200000,         // Address Base
                        0x00600000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFF000000,         // Address Base
                        0x01000000,         // Address Length
                        )
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y25)
                })
                CreateWordField (BUF0, \_SB.PRRE._CRS._Y25._MIN, AMIN)  // _MIN: Minimum Base Address
                CreateWordField (BUF0, \_SB.PRRE._CRS._Y25._MAX, AMAX)  // _MAX: Maximum Base Address
                AMIN = PMBS /* \PMBS */
                AMAX = PMBS /* \PMBS */
                Name (SBR0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00D10000,         // Address Length
                        _Y26)
                })
                CreateDWordField (SBR0, \_SB.PRRE._CRS._Y26._BAS, BAS0)  // _BAS: Base Address
                BAS0 = SBRG /* \SBRG */
                ConcatenateResTemplate (BUF0, SBR0, Local0)
                Name (SBRE, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y27)
                })
                CreateDWordField (SBRE, \_SB.PRRE._CRS._Y27._BAS, BAS3)  // _BAS: Base Address
                CreateDWordField (SBRE, \_SB.PRRE._CRS._Y27._LEN, LEN3)  // _LEN: Length
                BAS3 = (SBRG + 0x00D60000)
                LEN3 = ((SBRG + 0x10000000) - BAS3)
                ConcatenateResTemplate (Local0, SBRE, Local2)
                Return (Local2)
            }
        }

        Device (IOTR)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "IoTraps")  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y28)
                })
                Name (BUF1, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y29)
                })
                Name (BUF2, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y2A)
                })
                Name (BUF3, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y2B)
                })
                CreateWordField (BUF0, \_SB.IOTR._CRS._Y28._MIN, AMI0)  // _MIN: Minimum Base Address
                CreateWordField (BUF0, \_SB.IOTR._CRS._Y28._MAX, AMA0)  // _MAX: Maximum Base Address
                CreateWordField (BUF1, \_SB.IOTR._CRS._Y29._MIN, AMI1)  // _MIN: Minimum Base Address
                CreateWordField (BUF1, \_SB.IOTR._CRS._Y29._MAX, AMA1)  // _MAX: Maximum Base Address
                CreateWordField (BUF2, \_SB.IOTR._CRS._Y2A._MIN, AMI2)  // _MIN: Minimum Base Address
                CreateWordField (BUF2, \_SB.IOTR._CRS._Y2A._MAX, AMA2)  // _MAX: Maximum Base Address
                CreateWordField (BUF3, \_SB.IOTR._CRS._Y2B._MIN, AMI3)  // _MIN: Minimum Base Address
                CreateWordField (BUF3, \_SB.IOTR._CRS._Y2B._MAX, AMA3)  // _MAX: Maximum Base Address
                Local2 = Zero
                If ((ITS0 == One))
                {
                    AMI0 = ITA0 /* \ITA0 */
                    AMA0 = ITA0 /* \ITA0 */
                    Local0 = BUF0 /* \_SB_.IOTR._CRS.BUF0 */
                    Local2 = One
                }

                If ((ITS1 == One))
                {
                    AMI1 = ITA1 /* \ITA1 */
                    AMA1 = ITA1 /* \ITA1 */
                    If ((Local2 == One))
                    {
                        ConcatenateResTemplate (BUF1, Local0, Local1)
                        Local0 = Local1
                    }
                    Else
                    {
                        Local0 = BUF1 /* \_SB_.IOTR._CRS.BUF1 */
                        Local2 = One
                    }
                }

                If ((ITS2 == One))
                {
                    AMI2 = ITA2 /* \ITA2 */
                    AMA2 = ITA2 /* \ITA2 */
                    If ((Local2 == One))
                    {
                        ConcatenateResTemplate (BUF2, Local0, Local1)
                        Local0 = Local1
                    }
                    Else
                    {
                        Local0 = BUF2 /* \_SB_.IOTR._CRS.BUF2 */
                        Local2 = One
                    }
                }

                If ((ITS3 == One))
                {
                    AMI3 = ITA3 /* \ITA3 */
                    AMA3 = ITA3 /* \ITA3 */
                    If ((Local2 == One))
                    {
                        ConcatenateResTemplate (BUF3, Local0, Local1)
                        Local0 = Local1
                    }
                    Else
                    {
                        Local0 = BUF3 /* \_SB_.IOTR._CRS.BUF3 */
                        Local2 = One
                    }
                }

                If ((Local2 == One))
                {
                    Return (Local0)
                }
                Else
                {
                    Return (Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    })
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Name (TEMP, Zero)
        Scope (LPCB)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            OperationRegion (LPC, PCI_Config, Zero, 0x0100)
            Field (LPC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                CDID,   16, 
                Offset (0x08), 
                CRID,   8, 
                Offset (0x80), 
                IOD0,   8, 
                IOD1,   8, 
                Offset (0xA0), 
                    ,   9, 
                PRBL,   1, 
                Offset (0xDC), 
                    ,   2, 
                ESPI,   1
            }
        }

        Device (SBUS)
        {
            Name (_ADR, 0x001F0004)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (\)
    {
        OperationRegion (PMIO, SystemIO, PMBS, 0x80)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x01), 
            PBSS,   1, 
            Offset (0x40), 
                ,   17, 
            GPEC,   1, 
            Offset (0x6C), 
            Offset (0x7C), 
                ,   18, 
            WAEN,   1
        }

        Method (IMPS, 0, NotSerialized)
        {
            If ((PCHS == 0x04))
            {
                Return (Zero)
            }
            Else
            {
                Return (One)
            }
        }

        Method (IPCS, 7, Serialized)
        {
            Name (RPKG, Package (0x05)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            ADBG ("PMC IPC")
            ADBG (Concatenate ("Command: ", ToHexString (Arg0)))
            ADBG (Concatenate ("SubCmdId: ", ToHexString (Arg1)))
            ADBG (Concatenate ("Size: ", ToHexString (Arg2)))
            ADBG (Concatenate ("WBuff0: ", ToHexString (Arg3)))
            ADBG (Concatenate ("WBuff1: ", ToHexString (Arg4)))
            ADBG (Concatenate ("WBuff2: ", ToHexString (Arg5)))
            ADBG (Concatenate ("WBuff3: ", ToHexString (Arg6)))
            If ((Arg2 > 0x10))
            {
                ADBG ("CmdSize>16 Error")
                RPKG [Zero] = One
                Return (RPKG) /* \IPCS.RPKG */
            }

            IWB0 = Arg3
            IWB1 = Arg4
            IWB2 = Arg5
            IWB3 = Arg6
            Local0 = Zero
            Local0 += (Arg0 << Zero)
            Local0 += (Arg1 << 0x0C)
            Local0 += (Arg2 << 0x10)
            CMDR = Local0
            Local0 = Zero
            While (One)
            {
                If ((!IBSY || (IERR == One)))
                {
                    Break
                }

                If ((Local0 > 0x0A))
                {
                    ADBG ("IPC Busy TO")
                    RPKG [Zero] = 0x03
                    Return (RPKG) /* \IPCS.RPKG */
                }

                Sleep (One)
                Local0++
            }

            If ((IERR == One))
            {
                ADBG ("IPC Error:")
                ADBG (IERC)
                ADBG (Arg0)
                ADBG (Arg1)
                ADBG (Arg2)
                ADBG (Arg3)
                ADBG (Arg4)
                ADBG (Arg5)
                ADBG (Arg6)
                RPKG [Zero] = 0x02
                Return (RPKG) /* \IPCS.RPKG */
            }

            RPKG [One] = IRB0 /* \IRB0 */
            RPKG [0x02] = IRB1 /* \IRB1 */
            RPKG [0x03] = IRB2 /* \IRB2 */
            RPKG [0x04] = IRB3 /* \IRB3 */
            Return (RPKG) /* \IPCS.RPKG */
        }

        Method (ULTR, 1, Serialized)
        {
            LTRU = Arg0
        }

        OperationRegion (PWMR, SystemMemory, PWRM, 0x1E30)
        Field (PWMR, DWordAcc, NoLock, Preserve)
        {
            CMDR,   32, 
            IBSY,   1, 
            IERR,   1, 
                ,   1, 
                ,   1, 
            Offset (0x05), 
            Offset (0x06), 
            IERC,   8, 
            Offset (0x08), 
            Offset (0x80), 
            IWB0,   32, 
            IWB1,   32, 
            IWB2,   32, 
            IWB3,   32, 
            IRB0,   32, 
            IRB1,   32, 
            IRB2,   32, 
            IRB3,   32, 
            Offset (0x10D0), 
            RAA0,   1, 
            RAA1,   1, 
            RAA2,   1, 
            RAA3,   1, 
            RPB0,   1, 
            RPB1,   1, 
            RPB2,   1, 
            RPB3,   1, 
            RPC0,   1, 
            RPC1,   1, 
            RPC2,   1, 
            RPC3,   1, 
            RSAT,   1, 
            RGBE,   1, 
            RXHC,   1, 
            RXDC,   1, 
            RUFS,   1, 
            RPD0,   1, 
            RPD1,   1, 
            RPD2,   1, 
            RPD3,   1, 
            RPE0,   1, 
            RPE1,   1, 
            RPE2,   1, 
            RPE3,   1, 
            Offset (0x10D4), 
            APA0,   1, 
            APA1,   1, 
            APA2,   1, 
            APA3,   1, 
            APB0,   1, 
            APB1,   1, 
            APB2,   1, 
            APB3,   1, 
            APC0,   1, 
            APC1,   1, 
            APC2,   1, 
            APC3,   1, 
            ASAT,   1, 
            AGBE,   1, 
            AXHC,   1, 
            AXDC,   1, 
            AUFS,   1, 
            APD0,   1, 
            APD1,   1, 
            APD2,   1, 
            APD3,   1, 
            APE0,   1, 
            APE1,   1, 
            APE2,   1, 
            APE3,   1, 
            Offset (0x1800), 
            ACWA,   32, 
            DCWA,   32, 
            ACET,   32, 
            DCET,   32, 
            Offset (0x18E8), 
                ,   29, 
            APG3,   1, 
                ,   1, 
            CECE,   1, 
            Offset (0x1B0C), 
                ,   2, 
            ISAT,   1, 
                ,   18, 
            LTRU,   1, 
            Offset (0x1B1C), 
                ,   22, 
            XSQD,   1, 
            Offset (0x1BD0), 
                ,   31, 
            CPPM,   1, 
            Offset (0x1E20), 
            GBED,   1, 
            Offset (0x1E28), 
                ,   22, 
            SCFD,   1
        }

        Method (PG3C, 1, Serialized)
        {
            If (Arg0)
            {
                ADBG ("PG3 Enable")
                APG3 = One
            }
            Else
            {
                ADBG ("PG3 Disable")
                APG3 = Zero
            }
        }

        Method (PG3T, 0, NotSerialized)
        {
            If (APG3)
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (PSOC, 1, Serialized)
        {
            If (PSON)
            {
                If (Arg0)
                {
                    ADBG ("PS_ON Enable")
                    CECE = One
                }
                Else
                {
                    ADBG ("PS_ON Disable")
                    CECE = Zero
                }
            }
        }

        Method (PSOS, 0, NotSerialized)
        {
            If (CECE)
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (CFAE, 1, NotSerialized)
        {
            If (CondRefOf (CPPE))
            {
                If ((CPPE == One))
                {
                    If (DerefOf (Arg0 [Zero]))
                    {
                        ADBG ("CPPM Forced Alignment Disable")
                        CPPM = Zero
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                    Else
                    {
                        ADBG ("CPPM Forced Alignment Enable")
                        CPPM = One
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PC00)
    {
        Name (LTEN, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
    }

    If ((PCHS != 0x04))
    {
        Scope (_SB.PC00)
        {
            Device (XDCI)
            {
                Name (_ADR, 0x00140001)  // _ADR: Address
                OperationRegion (OTGD, PCI_Config, Zero, 0x0100)
                Field (OTGD, DWordAcc, NoLock, Preserve)
                {
                    DVID,   16, 
                    Offset (0x10), 
                    XDCB,   64
                }

                Field (OTGD, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    D0I3,   2
                }

                Method (XDBA, 0, NotSerialized)
                {
                    Return ((XDCB & 0xFFFFFFFFFFFFFF00))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    ADBG ("XDCI DSM")
                    If ((Arg0 == ToUUID ("732b85d5-b7a7-4a1b-9ba0-4bbd00ffd511") /* Unknown UUID */))
                    {
                        If ((Arg1 == One))
                        {
                            Method (SPPS, 2, Serialized)
                            {
                                OperationRegion (XDBW, SystemMemory, XDBA (), 0x00110000)
                                Field (XDBW, WordAcc, NoLock, Preserve)
                                {
                                    Offset (0x10F810), 
                                    Offset (0x10F811), 
                                    U2CP,   2, 
                                    U3CP,   2, 
                                    Offset (0x10F818), 
                                    PUPS,   2, 
                                        ,   1, 
                                    PURC,   1, 
                                    Offset (0x10F81A), 
                                    Offset (0x10F81C), 
                                        ,   3, 
                                    UXPE,   2, 
                                    Offset (0x10F81E)
                                }

                                Local1 = Arg0
                                Local2 = Arg1
                                If ((Local1 == Zero))
                                {
                                    ADBG ("PMU D0")
                                    UXPE = Zero
                                    Local0 = Zero
                                    While ((Local0 < 0x0A))
                                    {
                                        Stall (0x64)
                                        Local0++
                                    }

                                    PUPS = Zero
                                    Local0 = Zero
                                    While ((Local0 < 0x07D0))
                                    {
                                        Stall (0x64)
                                        If (((U2CP == Zero) && (U3CP == Zero)))
                                        {
                                            Break
                                        }

                                        Local0++
                                    }

                                    If ((U2CP != Zero))
                                    {
                                        ADBG ("U2 not in D0")
                                    }

                                    If ((U3CP != Zero))
                                    {
                                        ADBG ("U3 not in D0")
                                    }

                                    Return (Zero)
                                }

                                If ((Local1 == 0x03))
                                {
                                    ADBG ("PMU D3")
                                    If ((U2CP != Zero))
                                    {
                                        ADBG ("U2 not in D0")
                                    }

                                    If ((U3CP != Zero))
                                    {
                                        ADBG ("U3 not in D0")
                                    }

                                    PUPS = 0x03
                                    Local0 = Zero
                                    While ((Local0 < 0x07D0))
                                    {
                                        Stall (0x64)
                                        If (((U2CP == 0x03) && (U3CP == 0x03)))
                                        {
                                            Break
                                        }

                                        Local0++
                                    }

                                    If ((U2CP != 0x03))
                                    {
                                        ADBG ("U2 not in D3")
                                    }

                                    If ((U3CP != 0x03))
                                    {
                                        ADBG ("U3 not in D3")
                                    }

                                    UXPE = Local2
                                    Return (Zero)
                                }

                                Return (Zero)
                            }

                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    ADBG ("XDCI Fn0")
                                    Return (Buffer (0x02)
                                    {
                                         0xB3, 0x03                                       // ..
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("XDCI Fn1")
                                    Return (One)
                                }
                                Case (0x04)
                                {
                                    ADBG ("XDCI Fn4")
                                    Local1 = DerefOf (Arg3 [Zero])
                                    ADBG (Local1)
                                    SPPS (Local1, Zero)
                                }
                                Case (0x05)
                                {
                                    ADBG ("XDCI Fn5")
                                    If (CondRefOf (XDAT))
                                    {
                                        If ((XDAT () == One))
                                        {
                                            ADBG ("USB Attach")
                                            Notify (XDCI, 0x80) // Status Change
                                        }
                                        Else
                                        {
                                            ADBG ("USB Detach")
                                            Notify (XDCI, 0x81) // Information Change
                                        }
                                    }

                                    Return (Zero)
                                }
                                Case (0x07)
                                {
                                    ADBG ("XDCI Fn7")
                                    OperationRegion (XD22, SystemMemory, XDBA (), 0x00110000)
                                    Field (XD22, WordAcc, NoLock, Preserve)
                                    {
                                        Offset (0x10F818), 
                                        P2PS,   2, 
                                        Offset (0x10F81A)
                                    }

                                    Local0 = P2PS /* \_SB_.PC00.XDCI._DSM.P2PS */
                                    Return (Local0)
                                }
                                Case (0x08)
                                {
                                    ADBG ("XDCI Fn8")
                                    Return (One)
                                }
                                Case (0x09)
                                {
                                    ADBG ("XDCI Fn9")
                                    OperationRegion (XGCT, SystemMemory, XDBA (), 0x00110000)
                                    Field (XGCT, WordAcc, NoLock, Preserve)
                                    {
                                        Offset (0xC110), 
                                        GCTL,   32
                                    }

                                    Local1 = (PPDS & 0xFFF80000)
                                    Local1 >>= 0x13
                                    ADBG (Concatenate ("PCH XDCI: Func9 Return Val = ", ToHexString (Local1)))
                                    Return (Local1)
                                }

                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Name (_DDN, "PCH XDCI controller")  // _DDN: DOS Device Name
                Name (_STR, Unicode ("PCH XDCI controller"))  // _STR: Description String
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x03)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (GP1E))
                    {
                        If ((GP1E != Zero))
                        {
                            Return (GPRW (0x8C, 0x04))
                        }
                    }

                    Return (GPRW (0x6D, 0x04))
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                }
            }

            If ((GBES != Zero))
            {
                Device (GLAN)
                {
                    Name (_ADR, 0x001F0006)  // _ADR: Address
                    Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (CondRefOf (GP1E))
                        {
                            If ((GP1E != Zero))
                            {
                                Return (GPRW (0x86, 0x04))
                            }
                        }

                        Return (GPRW (0x6D, 0x04))
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                    {
                    }
                }
            }

            Device (XHCI)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                Name (DUWS, Zero)
                Name (PU2C, Zero)
                Name (PU3C, Zero)
                Name (AHWA, One)
                Name (PPID, 0x3A)
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (DUWS))
                    {
                        If (CondRefOf (GP1E))
                        {
                            If ((GP1E != Zero))
                            {
                                Return (GPRW (0x89, DUWS))
                            }
                        }

                        Return (GPRW (0x6D, DUWS))
                    }
                    Else
                    {
                        If (CondRefOf (GP1E))
                        {
                            If ((GP1E != Zero))
                            {
                                Return (GPRW (0x89, 0x04))
                            }
                        }

                        Return (GPRW (0x6D, 0x04))
                    }
                }

                DUWS = \DUWS
                PU2C = \PU2C
                PU3C = \PU3C
                OperationRegion (XPRT, PCI_Config, Zero, 0x0100)
                Field (XPRT, AnyAcc, NoLock, Preserve)
                {
                    DVID,   16, 
                    Offset (0x10), 
                    XADR,   64, 
                    Offset (0xA2), 
                        ,   2, 
                    D3HE,   1
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    ADBG ("XHCI _DSM")
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("203b203b-1f13-409a-9aae-1a0347525584") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                If (CondRefOf (AHWA))
                                {
                                    Return ((AHWA && One))
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x03)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
                {
                    Return (0x03)
                }

                Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
                {
                    Return (0x03)
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x03)
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If (CondRefOf (^RHUB.INIR))
                    {
                        ^RHUB.INIR ()
                    }
                }

                Method (USRA, 1, Serialized)
                {
                    Return ((PU2C + Arg0))
                }

                Method (SSPA, 1, Serialized)
                {
                    Return ((PU2C + (0x02 + Arg0)))
                }

                Method (UPRU, 3, NotSerialized)
                {
                    ^^SBSC.PCAO (PPID, Arg0, Arg1, Arg2)
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG ("XHCI D0")
                    UPRU (Zero, 0xFFFFFFF7, Zero)
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (PS0X))
                    {
                        PS0X ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG ("XHCI D3")
                    UPRU (Zero, 0xFFFFFFFF, 0x08)
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (PS3X))
                    {
                        PS3X ()
                    }
                }

                Method (CUID, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        ADBG ("XHCI RHUB PS0")
                        If ((DVID == 0xFFFF))
                        {
                            Return (Zero)
                        }

                        If (CondRefOf (PS0X))
                        {
                            ADBG ("XHCI CSD0")
                            CSD0 (0x16)
                            PS0X ()
                        }
                    }

                    Method (_PS2, 0, Serialized)  // _PS2: Power State 2
                    {
                        ADBG ("XHCI RHUB PS2")
                        If ((DVID == 0xFFFF))
                        {
                            Return (Zero)
                        }

                        If (CondRefOf (PS2X))
                        {
                            PS2X ()
                            ADBG ("XHCI CSD3")
                            CSD3 (0x16)
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        ADBG ("XHCI RHUB PS3")
                        If ((DVID == 0xFFFF))
                        {
                            Return (Zero)
                        }

                        If (CondRefOf (PS3X))
                        {
                            PS3X ()
                            ADBG ("XHCI CSD3")
                            CSD3 (0x16)
                        }
                    }

                    If (CondRefOf (PU2C))
                    {
                        If ((One <= PU2C))
                        {
                            Device (HS01)
                            {
                                Name (_ADR, One)  // _ADR: Address
                            }
                        }

                        If ((0x02 <= PU2C))
                        {
                            Device (HS02)
                            {
                                Name (_ADR, 0x02)  // _ADR: Address
                            }
                        }

                        If ((0x03 <= PU2C))
                        {
                            Device (HS03)
                            {
                                Name (_ADR, 0x03)  // _ADR: Address
                                If ((CondRefOf (VTCM) && (VTCM == One)))
                                {
                                    If (((SXP1 == 0x03) || (SXP2 == 0x03)))
                                    {
                                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                        {
                                            0xFF, 
                                            0xFF, 
                                            Zero, 
                                            Zero
                                        })
                                        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                        {
                                            ToPLD (
                                                PLD_Revision           = 0x2,
                                                PLD_IgnoreColor        = 0x1,
                                                PLD_Red                = 0x0,
                                                PLD_Green              = 0x0,
                                                PLD_Blue               = 0x0,
                                                PLD_Width              = 0x0,
                                                PLD_Height             = 0x0,
                                                PLD_UserVisible        = 0x0,
                                                PLD_Dock               = 0x0,
                                                PLD_Lid                = 0x0,
                                                PLD_Panel              = "TOP",
                                                PLD_VerticalPosition   = "UPPER",
                                                PLD_HorizontalPosition = "LEFT",
                                                PLD_Shape              = "ROUND",
                                                PLD_GroupOrientation   = 0x0,
                                                PLD_GroupToken         = 0x1,
                                                PLD_GroupPosition      = 0x1,
                                                PLD_Bay                = 0x0,
                                                PLD_Ejectable          = 0x0,
                                                PLD_EjectRequired      = 0x0,
                                                PLD_CabinetNumber      = 0x0,
                                                PLD_CardCageNumber     = 0x0,
                                                PLD_Reference          = 0x0,
                                                PLD_Rotation           = 0x0,
                                                PLD_Order              = 0x0,
                                                PLD_VerticalOffset     = 0xFFFF,
                                                PLD_HorizontalOffset   = 0xFFFF)

                                        })
                                        Device (CIR)
                                        {
                                            Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                            {
                                                Return ((0x03 + SXI1))
                                            }

                                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                            {
                                                ToPLD (
                                                    PLD_Revision           = 0x2,
                                                    PLD_IgnoreColor        = 0x1,
                                                    PLD_Red                = 0x0,
                                                    PLD_Green              = 0x0,
                                                    PLD_Blue               = 0x0,
                                                    PLD_Width              = 0x0,
                                                    PLD_Height             = 0x0,
                                                    PLD_UserVisible        = 0x0,
                                                    PLD_Dock               = 0x0,
                                                    PLD_Lid                = 0x1,
                                                    PLD_Panel              = "FRONT",
                                                    PLD_VerticalPosition   = "UPPER",
                                                    PLD_HorizontalPosition = "CENTER",
                                                    PLD_Shape              = "ROUND",
                                                    PLD_GroupOrientation   = 0x0,
                                                    PLD_GroupToken         = 0x0,
                                                    PLD_GroupPosition      = 0x0,
                                                    PLD_Bay                = 0x0,
                                                    PLD_Ejectable          = 0x0,
                                                    PLD_EjectRequired      = 0x0,
                                                    PLD_CabinetNumber      = 0x0,
                                                    PLD_CardCageNumber     = 0x0,
                                                    PLD_Reference          = 0x0,
                                                    PLD_Rotation           = 0x0,
                                                    PLD_Order              = 0x0,
                                                    PLD_VerticalOffset     = 0xC8,
                                                    PLD_HorizontalOffset   = 0xA0)

                                            })
                                        }
                                    }
                                }
                            }
                        }

                        If ((0x04 <= PU2C))
                        {
                            Device (HS04)
                            {
                                Name (_ADR, 0x04)  // _ADR: Address
                            }
                        }

                        If ((0x05 <= PU2C))
                        {
                            Device (HS05)
                            {
                                Name (_ADR, 0x05)  // _ADR: Address
                                If ((CondRefOf (VTCM) && (VTCM == One)))
                                {
                                    If (((SXP1 == 0x05) || (SXP2 == 0x05)))
                                    {
                                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                        {
                                            0xFF, 
                                            0xFF, 
                                            Zero, 
                                            Zero
                                        })
                                        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                        {
                                            ToPLD (
                                                PLD_Revision           = 0x2,
                                                PLD_IgnoreColor        = 0x1,
                                                PLD_Red                = 0x0,
                                                PLD_Green              = 0x0,
                                                PLD_Blue               = 0x0,
                                                PLD_Width              = 0x0,
                                                PLD_Height             = 0x0,
                                                PLD_UserVisible        = 0x0,
                                                PLD_Dock               = 0x0,
                                                PLD_Lid                = 0x0,
                                                PLD_Panel              = "TOP",
                                                PLD_VerticalPosition   = "UPPER",
                                                PLD_HorizontalPosition = "LEFT",
                                                PLD_Shape              = "ROUND",
                                                PLD_GroupOrientation   = 0x0,
                                                PLD_GroupToken         = 0x1,
                                                PLD_GroupPosition      = 0x1,
                                                PLD_Bay                = 0x0,
                                                PLD_Ejectable          = 0x0,
                                                PLD_EjectRequired      = 0x0,
                                                PLD_CabinetNumber      = 0x0,
                                                PLD_CardCageNumber     = 0x0,
                                                PLD_Reference          = 0x0,
                                                PLD_Rotation           = 0x0,
                                                PLD_Order              = 0x0,
                                                PLD_VerticalOffset     = 0xFFFF,
                                                PLD_HorizontalOffset   = 0xFFFF)

                                        })
                                        Device (CIR)
                                        {
                                            Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                            {
                                                Return ((0x05 + SXI1))
                                            }

                                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                            {
                                                ToPLD (
                                                    PLD_Revision           = 0x2,
                                                    PLD_IgnoreColor        = 0x1,
                                                    PLD_Red                = 0x0,
                                                    PLD_Green              = 0x0,
                                                    PLD_Blue               = 0x0,
                                                    PLD_Width              = 0x0,
                                                    PLD_Height             = 0x0,
                                                    PLD_UserVisible        = 0x0,
                                                    PLD_Dock               = 0x0,
                                                    PLD_Lid                = 0x1,
                                                    PLD_Panel              = "FRONT",
                                                    PLD_VerticalPosition   = "UPPER",
                                                    PLD_HorizontalPosition = "CENTER",
                                                    PLD_Shape              = "ROUND",
                                                    PLD_GroupOrientation   = 0x0,
                                                    PLD_GroupToken         = 0x0,
                                                    PLD_GroupPosition      = 0x0,
                                                    PLD_Bay                = 0x0,
                                                    PLD_Ejectable          = 0x0,
                                                    PLD_EjectRequired      = 0x0,
                                                    PLD_CabinetNumber      = 0x0,
                                                    PLD_CardCageNumber     = 0x0,
                                                    PLD_Reference          = 0x0,
                                                    PLD_Rotation           = 0x0,
                                                    PLD_Order              = 0x0,
                                                    PLD_VerticalOffset     = 0xC8,
                                                    PLD_HorizontalOffset   = 0xA0)

                                            })
                                        }
                                    }
                                }
                            }
                        }

                        If ((0x06 <= PU2C))
                        {
                            Device (HS06)
                            {
                                Name (_ADR, 0x06)  // _ADR: Address
                            }
                        }

                        If ((0x07 <= PU2C))
                        {
                            Device (HS07)
                            {
                                Name (_ADR, 0x07)  // _ADR: Address
                            }
                        }

                        If ((0x08 <= PU2C))
                        {
                            Device (HS08)
                            {
                                Name (_ADR, 0x08)  // _ADR: Address
                            }
                        }

                        If ((0x09 <= PU2C))
                        {
                            Device (HS09)
                            {
                                Name (_ADR, 0x09)  // _ADR: Address
                            }
                        }

                        If ((0x0A <= PU2C))
                        {
                            Device (HS10)
                            {
                                Name (_ADR, 0x0A)  // _ADR: Address
                            }
                        }

                        If ((0x0B <= PU2C))
                        {
                            Device (HS11)
                            {
                                Name (_ADR, 0x0B)  // _ADR: Address
                            }
                        }

                        If ((0x0C <= PU2C))
                        {
                            Device (HS12)
                            {
                                Name (_ADR, 0x0C)  // _ADR: Address
                            }
                        }

                        If ((0x0D <= PU2C))
                        {
                            Device (HS13)
                            {
                                Name (_ADR, 0x0D)  // _ADR: Address
                            }
                        }

                        If ((0x0E <= PU2C))
                        {
                            Device (HS14)
                            {
                                Name (_ADR, 0x0E)  // _ADR: Address
                            }
                        }

                        Device (USR1)
                        {
                            Method (_ADR, 0, NotSerialized)  // _ADR: Address
                            {
                                Return (USRA (One))
                            }
                        }

                        Device (USR2)
                        {
                            Method (_ADR, 0, NotSerialized)  // _ADR: Address
                            {
                                Return (USRA (0x02))
                            }
                        }
                    }

                    If (CondRefOf (PU3C))
                    {
                        If ((One <= PU3C))
                        {
                            Device (SS01)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (SSPA (One))
                                }
                            }
                        }

                        If ((0x02 <= PU3C))
                        {
                            Device (SS02)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (SSPA (0x02))
                                }
                            }
                        }

                        If ((0x03 <= PU3C))
                        {
                            Device (SS03)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (SSPA (0x03))
                                }
                            }
                        }

                        If ((0x04 <= PU3C))
                        {
                            Device (SS04)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (SSPA (0x04))
                                }
                            }
                        }

                        If ((0x05 <= PU3C))
                        {
                            Device (SS05)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (SSPA (0x05))
                                }
                            }
                        }

                        If ((0x06 <= PU3C))
                        {
                            Device (SS06)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (SSPA (0x06))
                                }
                            }
                        }

                        If ((0x07 <= PU3C))
                        {
                            Device (SS07)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (SSPA (0x07))
                                }
                            }
                        }

                        If ((0x08 <= PU3C))
                        {
                            Device (SS08)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (SSPA (0x08))
                                }
                            }
                        }

                        If ((0x09 <= PU3C))
                        {
                            Device (SS09)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (SSPA (0x09))
                                }
                            }
                        }

                        If ((0x0A <= PU3C))
                        {
                            Device (SS10)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (SSPA (0x0A))
                                }
                            }
                        }
                    }
                }
            }

            Device (HDAS)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG ("HD-A Ctrlr D0")
                    S023 (Zero, One)
                    If (CondRefOf (\_SB.PC00.HDAS.PS0X))
                    {
                        PS0X ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG ("HD-A Ctrlr D3")
                    S023 (Zero, Zero)
                    If (CondRefOf (\_SB.PC00.HDAS.PS3X))
                    {
                        PS3X ()
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (GP1E))
                    {
                        If ((GP1E != Zero))
                        {
                            Return (GPRW (0x8A, 0x04))
                        }
                    }

                    Return (GPRW (0x6D, 0x04))
                }

                OperationRegion (HDAR, PCI_Config, Zero, 0x0100)
                Field (HDAR, WordAcc, NoLock, Preserve)
                {
                    VDID,   32
                }

                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                }

                Name (NBU0, ResourceTemplate ()
                {
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadOnly,
                        0x0000000000000001, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y2C, AddressRangeACPI, TypeStatic)
                })
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    ADBG ("HDAS _INI")
                    CreateQWordField (NBU0, \_SB.PC00.HDAS._Y2C._MIN, NBA0)  // _MIN: Minimum Base Address
                    CreateQWordField (NBU0, \_SB.PC00.HDAS._Y2C._MAX, NMA0)  // _MAX: Maximum Base Address
                    CreateQWordField (NBU0, \_SB.PC00.HDAS._Y2C._LEN, NLE0)  // _LEN: Length
                    NBA0 = NHAA /* \NHAA */
                    NMA0 = (NHAA + (NHLL - One))
                    NLE0 = NHLL /* \NHLL */
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "nhlt-version", 
                            "1.8-0"
                        }
                    }
                })
                Device (IDA)
                {
                    Name (_ADR, 0x10000000)  // _ADR: Address
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        ADBG ("HDAS _DSM")
                        ADBG (Arg2)
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If ((Arg0 == ToUUID ("a69f886e-6ceb-4594-a41f-7b5dce24c553") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0xCF                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("_DSM Fun 1 NHLT")
                                    Switch (ToInteger (Arg3))
                                    {
                                        Case (Zero)
                                        {
                                            Return (NBU0) /* \_SB_.PC00.HDAS.NBU0 */
                                        }
                                        Default
                                        {
                                            Return (NBU0) /* \_SB_.PC00.HDAS.NBU0 */
                                        }

                                    }
                                }
                                Case (0x02)
                                {
                                    ADBG ("_DSM Fun 2 FMSK")
                                    Return (ADFM) /* \ADFM */
                                }
                                Case (0x03)
                                {
                                    ADBG ("_DSM Fun 3 PPMS")
                                    If (CondRefOf (\_SB.PC00.HDAS.PPMS))
                                    {
                                        Return (PPMS (Arg3))
                                    }
                                    Else
                                    {
                                        ADBG ("PPMS not found")
                                    }

                                    Return (Zero)
                                }
                                Case (0x06)
                                {
                                    ADBG ("_DSM Fun 6 XCFG")
                                    Return (XTAL) /* \XTAL */
                                }
                                Case (0x07)
                                {
                                    ADBG ("_DSM Fun 7 HDBO")
                                    ADBG (HDBO)
                                    Return (HDBO) /* \HDBO */
                                }
                                Default
                                {
                                    ADBG ("_DSM Fun NOK")
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }

                        If (CondRefOf (HIWC))
                        {
                            If (HIWC (Arg0))
                            {
                                If (CondRefOf (HIDW))
                                {
                                    Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                                }
                            }
                        }

                        ADBG ("_DSM UUID NOK")
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }
            }

            Scope (HDAS.IDA)
            {
                Device (SNDW)
                {
                    Name (_ADR, 0x40000000)  // _ADR: Address
                    Name (_CID, Package (0x02)  // _CID: Compatible ID
                    {
                        "PRP00001", 
                        "PNP0A05" /* Generic Container Device */
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (QCFG, 3, NotSerialized)
                    {
                        DerefOf (DerefOf (Arg0 [One]) [Zero]) [One]
                             = Arg1
                        DerefOf (DerefOf (Arg0 [One]) [0x04]) [One]
                             = Arg2
                    }

                    Method (XCFG, 2, NotSerialized)
                    {
                        If ((Arg1 == 0x016E3600))
                        {
                            ADBG ("XTAL 24MHz")
                            Local0 = 0x016E3600
                            Local1 = 0x005B8D80
                            Local2 = 0x7D
                            Local3 = 0x02
                        }
                        ElseIf ((Arg1 == 0x0249F000))
                        {
                            ADBG ("XTAL 38.4MHz")
                            Local0 = 0x0249F000
                            Local1 = 0x00493E00
                            Local2 = 0x32
                            Local3 = 0x04
                        }
                        ElseIf ((Arg1 == 0x0124F800))
                        {
                            ADBG ("XTAL 19.2MHz")
                            Local0 = 0x0124F800
                            Local1 = 0x00493E00
                            Local2 = 0x32
                            Local3 = 0x04
                        }
                        Else
                        {
                            ADBG ("XTAL UNSUPPORTED")
                            Local0 = Zero
                            Local1 = Zero
                            Local2 = Zero
                            Local3 = Zero
                        }

                        DerefOf (DerefOf (Arg0 [One]) [One]) [One]
                             = Local0
                        DerefOf (DerefOf (DerefOf (Arg0 [One]) [0x07]
                            ) [One]) [Zero] = Local1
                        DerefOf (DerefOf (Arg0 [One]) [0x09]) [One]
                             = Local2
                        DerefOf (DerefOf (Arg0 [One]) [0x0A]) [One]
                             = Local3
                    }

                    Method (DCFG, 3, NotSerialized)
                    {
                        DerefOf (DerefOf (Arg0 [One]) [0x02]) [One]
                             = Arg1
                        DerefOf (DerefOf (Arg0 [One]) [0x03]) [One]
                             = Arg2
                    }

                    Method (SDWU, 1, NotSerialized)
                    {
                        DerefOf (DerefOf (_DSD [One]) [One]) [One]
                             = Arg0
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        ADBG ("SNDW _INI")
                        SDWU (SWMC)
                        QCFG (LNK0, SWQ0, ACS0)
                        QCFG (LNK1, SWQ1, ACS1)
                        QCFG (LNK2, SWQ2, ACS2)
                        QCFG (LNK3, SWQ3, ACS3)
                        XCFG (LNK0, XTAL)
                        XCFG (LNK1, XTAL)
                        XCFG (LNK2, XTAL)
                        XCFG (LNK3, XTAL)
                        DCFG (LNK0, DAI0, DOD0)
                        DCFG (LNK1, DAI1, DOD0)
                        DCFG (LNK2, DAI2, DOD0)
                        DCFG (LNK3, DAI3, DOD0)
                    }

                    Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "mipi-sdw-sw-interface-revision", 
                                0x00010000
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-master-count", 
                                0x04
                            }
                        }, 

                        ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                        Package (0x04)
                        {
                            Package (0x02)
                            {
                                "mipi-sdw-link-0-subproperties", 
                                "LNK0"
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-link-1-subproperties", 
                                "LNK1"
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-link-2-subproperties", 
                                "LNK2"
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-link-3-subproperties", 
                                "LNK3"
                            }
                        }
                    })
                    Name (LNK0, Package (0x02)
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x0D)
                        {
                            Package (0x02)
                            {
                                "intel-quirk-mask", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-ip-clock", 
                                0x0249F000
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-doais", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-dods", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "intel-autonomous-clock-stop", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-stop-mode0-supported", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-stop-mode1-supported", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-frequencies-supported", 
                                Package (0x01)
                                {
                                    0x00493E00
                                }
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-rate", 
                                0xBB80
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-row-size", 
                                0x32
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-col-size", 
                                0x04
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-dynamic-frame-shape", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-command-error-threshold", 
                                0x10
                            }
                        }
                    })
                    Name (LNK1, Package (0x02)
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x0D)
                        {
                            Package (0x02)
                            {
                                "intel-quirk-mask", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-ip-clock", 
                                0x0249F000
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-doais", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-dods", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "intel-autonomous-clock-stop", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-stop-mode0-supported", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-stop-mode1-supported", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-frequencies-supported", 
                                Package (0x01)
                                {
                                    0x00493E00
                                }
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-rate", 
                                0xBB80
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-row-size", 
                                0x32
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-col-size", 
                                0x04
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-dynamic-frame-shape", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-command-error-threshold", 
                                0x10
                            }
                        }
                    })
                    Name (LNK2, Package (0x02)
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x0D)
                        {
                            Package (0x02)
                            {
                                "intel-quirk-mask", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-ip-clock", 
                                0x0249F000
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-doais", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-dods", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "intel-autonomous-clock-stop", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-stop-mode0-supported", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-stop-mode1-supported", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-frequencies-supported", 
                                Package (0x01)
                                {
                                    0x00493E00
                                }
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-rate", 
                                0xBB80
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-row-size", 
                                0x32
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-col-size", 
                                0x04
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-dynamic-frame-shape", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-command-error-threshold", 
                                0x10
                            }
                        }
                    })
                    Name (LNK3, Package (0x02)
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x0D)
                        {
                            Package (0x02)
                            {
                                "intel-quirk-mask", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-ip-clock", 
                                0x0249F000
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-doais", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-dods", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "intel-autonomous-clock-stop", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-stop-mode0-supported", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-stop-mode1-supported", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-frequencies-supported", 
                                Package (0x01)
                                {
                                    0x00493E00
                                }
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-rate", 
                                0xBB80
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-row-size", 
                                0x32
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-col-size", 
                                0x04
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-dynamic-frame-shape", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-command-error-threshold", 
                                0x10
                            }
                        }
                    })
                }

                If ((UAOE != Zero))
                {
                    Device (UAOL)
                    {
                        Name (_ADR, 0x50000000)  // _ADR: Address
                        Name (_CID, Package (0x02)  // _CID: Compatible ID
                        {
                            "PRP00001", 
                            "PNP0A05" /* Generic Container Device */
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0B)
                        }

                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            ADBG ("UAOL _DSM")
                            If ((Arg0 == ToUUID ("2e60aefc-1ba8-467a-b8cc-5727b98cecb7") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x03                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (CFAE (Arg3))
                                    }

                                }
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "uaol-ctrl-count", 
                                    0x02
                                }
                            }, 

                            ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "uaol-descriptor-0", 
                                    "UAO0"
                                }, 

                                Package (0x02)
                                {
                                    "uaol-descriptor-1", 
                                    "UAO1"
                                }
                            }
                        })
                        Name (UAO0, Package (0x02)
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x03)
                            {
                                Package (0x02)
                                {
                                    "uaol-instance-number", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "bdf-routing-enabled", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "peer-integrated-controller-identifier", 
                                    0x98ED
                                }
                            }
                        })
                        Name (UAO1, Package (0x02)
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x03)
                            {
                                Package (0x02)
                                {
                                    "uaol-instance-number", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "bdf-routing-enabled", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "peer-integrated-controller-identifier", 
                                    0xABCD
                                }
                            }
                        })
                    }
                }
            }

            Device (HECI)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    ADBG ("HECI _DSM")
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If (CondRefOf (HIWC))
                    {
                        If (HIWC (Arg0))
                        {
                            If (CondRefOf (HIDW))
                            {
                                Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Device (HEC3)
            {
                Name (_ADR, 0x00160004)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Scope (_SB.PC00)
        {
            Device (ISHD)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
            }
        }
    }

    If ((PCHS != 0x04))
    {
        Scope (_SB.PC00)
        {
            Method (SOD3, 3, Serialized)
            {
                OperationRegion (ICB1, SystemMemory, (GPCB () + Arg0), 0x88)
                If (Arg1)
                {
                    Field (ICB1, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x84), 
                        PMEC,   8
                    }

                    PMEC = 0x03
                    PMEC |= Zero
                }

                If ((Arg1 && Arg2))
                {
                    Field (ICB1, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x10), 
                        BAR0,   64
                    }

                    BAR0 = Zero
                }
            }

            Device (I2C0)
            {
                If ((IM00 == One))
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (IC00, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150000)
                }
            }

            Device (I2C1)
            {
                If ((IM01 == One))
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (IC01, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150001)
                }
            }

            Device (I2C2)
            {
                If ((IM02 == One))
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (IC02, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150002)
                }
            }

            Device (I2C3)
            {
                If ((IM03 == One))
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (IC03, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150003)
                }
            }

            Device (I2C4)
            {
                If ((IM04 == One))
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (IC04, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00190000)
                }
            }

            Device (I2C5)
            {
                If ((IM05 == One))
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (IC05, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00190001)
                }
            }

            Scope (\_SB.PC00)
            {
                Device (I3C0)
                {
                    Name (I3CR, Package (0x38)
                    {
                        0xD0, 
                        0x00200002, 
                        0xD4, 
                        0x01010404, 
                        0x0214, 
                        0x00FA00FA, 
                        0x0218, 
                        0x00080008, 
                        0x021C, 
                        0x00FA00FA, 
                        0x0220, 
                        0x00640064, 
                        0x0224, 
                        0x032003AC, 
                        0x0228, 
                        0x20202020, 
                        0x022C, 
                        0x00030000, 
                        0x0230, 
                        0x00010000, 
                        0x0234, 
                        0x08, 
                        0x02BC, 
                        0x0800, 
                        0x02C0, 
                        0x0800, 
                        0x02C8, 
                        Zero, 
                        0x02CC, 
                        0x08, 
                        0x02D0, 
                        0x52, 
                        0x02D4, 
                        0x20442044, 
                        0x04D0, 
                        0x00200002, 
                        0x04D4, 
                        0x01010404, 
                        0x0614, 
                        0x00FA00FA, 
                        0x0618, 
                        0x00080008, 
                        0x061C, 
                        0x00FA00FA, 
                        0x0620, 
                        0x00640064, 
                        0x0624, 
                        0x032003AC, 
                        0x0628, 
                        0x20202020, 
                        0x062C, 
                        0x00030000, 
                        0x0630, 
                        0x00010000, 
                        0x0634, 
                        0x08
                    })
                    Name (_ADR, 0x00150004)  // _ADR: Address
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If ((Arg0 == ToUUID ("e59152de-bd93-4164-8a5e-2828fbd8b959") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (0x08)
                                    {
                                         0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Case (One)
                                {
                                    Return (I3CR) /* \_SB_.PC00.I3C0.I3CR */
                                }

                            }

                            Return (Buffer (0x08)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                            })
                        }

                        Return (Buffer (0x08)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        })
                    }

                    Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                    {
                        Return (0x03)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (CondRefOf (GP1E))
                        {
                            If ((GP1E != Zero))
                            {
                                Return (GPRW (0x8E, 0x04))
                            }
                        }

                        Return (GPRW (0x6D, 0x04))
                    }
                }
            }

            Device (SPI0)
            {
                If ((SM00 == One))
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (SC00, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x001E0002)
                }
            }

            Device (SPI1)
            {
                If ((SM01 == One))
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (SC01, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x001E0003)
                }
            }

            Device (SPI2)
            {
                If ((SM02 == One))
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (SC02, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00120006)
                }
            }

            Method (UDSM, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("f7af8347-a966-49fe-9022-7a9deeebdb27") /* Unknown UUID */))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (UDMA, 2, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x08)
                        {
                             0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        })
                    }
                    Case (One)
                    {
                        Return (ToInteger (Arg1))
                    }

                }

                Return (Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
            }
        }

        Scope (_SB)
        {
            Device (URSC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_STA, 0x03)  // _STA: Status
                Name (_UID, 0x05)  // _UID: Unique ID
                Method (UARB, 2, Serialized)
                {
                    If (((Arg0 == 0x02) || (Arg0 == 0x03)))
                    {
                        OperationRegion (UACF, SystemMemory, Arg1, 0x20)
                        Field (UACF, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x10), 
                            BAR0,   64, 
                            BAR1,   64
                        }

                        Name (BUF1, ResourceTemplate ()
                        {
                            Memory32Fixed (ReadWrite,
                                0x00000000,         // Address Base
                                0x00000FF8,         // Address Length
                                _Y2D)
                        })
                        Name (BUF2, ResourceTemplate ()
                        {
                            Memory32Fixed (ReadWrite,
                                0x00000000,         // Address Base
                                0x00001000,         // Address Length
                                _Y2E)
                        })
                        CreateDWordField (BUF1, \_SB.URSC.UARB._Y2D._BAS, ADR1)  // _BAS: Base Address
                        CreateDWordField (BUF2, \_SB.URSC.UARB._Y2E._BAS, ADR2)  // _BAS: Base Address
                        Local1 = (BAR0 & 0xFFFFFFFFFFFFF000)
                        ADR1 = (Local1 + 0x08)
                        ADR2 = (BAR1 & 0xFFFFFFFFFFFFF000)
                        ConcatenateResTemplate (BUF1, BUF2, Local0)
                        Return (Local0)
                    }

                    Return (Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    })
                }

                Name (URDA, Package (0x0A)
                {
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x06)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Package (0x06)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Package (0x06)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Package (0x06)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Package (0x06)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Package (0x06)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Package (0x06)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Package (0x06)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Package (0x06)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Package (0x06)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
            }

            Method (URSA, 2, Serialized)
            {
                Local0 = Zero
                While ((Local0 < SizeOf (^URSC.URDA)))
                {
                    Local1 = DerefOf (DerefOf (^URSC.URDA [Local0]) [Zero])
                    If ((Local1 == Arg0))
                    {
                        DerefOf (^URSC.URDA [Local0]) [One] = Arg1
                        Return (Zero)
                    }

                    Local0 += One
                }

                Local0 = Zero
                While ((Local0 < SizeOf (^URSC.URDA)))
                {
                    Local1 = DerefOf (DerefOf (^URSC.URDA [Local0]) [Zero])
                    If ((Local1 == Zero))
                    {
                        DerefOf (^URSC.URDA [Local0]) [Zero] = Arg0
                        DerefOf (^URSC.URDA [Local0]) [One] = Arg1
                        Return (Zero)
                    }

                    Local0 += One
                }
            }

            Method (URRS, 1, Serialized)
            {
                Local0 = Zero
                While ((Local0 < SizeOf (^URSC.URDA)))
                {
                    Local1 = DerefOf (DerefOf (^URSC.URDA [Local0]) [Zero])
                    If ((Local1 == Arg0))
                    {
                        Return (DerefOf (DerefOf (^URSC.URDA [Local0]) [One]))
                    }

                    Local0 += One
                }

                Return (Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
            }

            Method (UARH, 2, Serialized)
            {
                OperationRegion (UACF, SystemMemory, Arg0, 0x18)
                Field (UACF, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    BAR0,   64
                }

                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000008,         // Address Length
                        _Y2F)
                })
                Name (IBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y30)
                    {
                        0x00000014,
                    }
                })
                CreateDWordField (BUF0, \_SB.UARH._Y2F._BAS, ADR0)  // _BAS: Base Address
                CreateDWordField (IBUF, \_SB.UARH._Y30._INT, IRQN)  // _INT: Interrupts
                Local0 = (BAR0 & 0xFFFFFFFFFFFFF000)
                ADR0 = Local0
                IRQN = Arg1
                ConcatenateResTemplate (BUF0, IBUF, Local1)
                Return (Local1)
            }

            Method (UAPG, 3, Serialized)
            {
                If ((Arg1 != 0x02))
                {
                    Return (Arg1)
                }

                OperationRegion (UACF, SystemMemory, Arg2, 0x18)
                Field (UACF, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    BAR0,   64
                }

                OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x10)
                Field (UAB0, ByteAcc, Lock, Preserve)
                {
                    DLL,    8, 
                    DLH,    8, 
                    FCR,    8, 
                    LCR,    8
                }

                Local0 = LCR /* \_SB_.UAPG.LCR_ */
                If ((Local0 && 0x7F))
                {
                    Return (Zero)
                }

                Return (One)
            }

            Method (UHID, 1, Serialized)
            {
                If ((Arg0 == 0x03))
                {
                    Return (0x0105D041)
                }

                Return (0x020CD041)
            }

            Method (UPS3, 2, Serialized)
            {
                Name (REGS, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                If ((Arg0 == One))
                {
                    OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                    Field (UACF, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x10), 
                        BAR0,   64
                    }

                    Field (UACF, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x84), 
                        PMEC,   8
                    }

                    OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x85)
                    Field (UAB0, ByteAcc, Lock, Preserve)
                    {
                        DLL,    8, 
                        DLH,    8, 
                        FCR,    8, 
                        LCR,    8, 
                        MCR,    8, 
                        Offset (0x81), 
                        PPRR,   8
                    }

                    Field (UAB0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x80), 
                        PCLK,   32
                    }

                    Local1 = LCR /* \_SB_.UPS3.LCR_ */
                    LCR |= 0x80
                    REGS [Zero] = DLL /* \_SB_.UPS3.DLL_ */
                    REGS [One] = DLH /* \_SB_.UPS3.DLH_ */
                    LCR = Local1
                    REGS [0x02] = FCR /* \_SB_.UPS3.FCR_ */
                    REGS [0x03] = Local1
                    REGS [0x04] = MCR /* \_SB_.UPS3.MCR_ */
                    REGS [0x05] = PCLK /* \_SB_.UPS3.PCLK */
                    If (((DerefOf (REGS [0x05]) != Zero) && (
                        DerefOf (REGS [0x05]) != 0xFFFFFFFF)))
                    {
                        URSA ((BAR0 & 0xFFFFFFFFFFFFF000), REGS)
                    }

                    PPRR = Zero
                    PPRR |= Zero
                    PMEC = 0x03
                    PMEC |= Zero
                }
            }

            Method (UPS0, 2, Serialized)
            {
                If ((Arg0 == One))
                {
                    OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                    Field (UACF, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x10), 
                        BAR0,   64
                    }

                    Field (UACF, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x84), 
                        PMEC,   8
                    }

                    OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x85)
                    Field (UAB0, ByteAcc, Lock, Preserve)
                    {
                        DLL,    8, 
                        DLH,    8, 
                        FCR,    8, 
                        LCR,    8, 
                        MCR,    8, 
                        Offset (0x81), 
                        PPRR,   8
                    }

                    Field (UAB0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x80), 
                        PCLK,   32
                    }

                    PMEC = Zero
                    PMEC |= Zero
                    PPRR = 0x07
                    Local0 = URRS ((BAR0 & 0xFFFFFFFFFFFFF000))
                    If (((DerefOf (Local0 [0x05]) != Zero) && (
                        DerefOf (Local0 [0x05]) != 0xFFFFFFFF)))
                    {
                        LCR |= 0x80
                        DLL = DerefOf (Local0 [Zero])
                        DLH = DerefOf (Local0 [One])
                        LCR = DerefOf (Local0 [0x03])
                        FCR = DerefOf (Local0 [0x02])
                        MCR = DerefOf (Local0 [0x04])
                        Local2 = (DerefOf (Local0 [0x05]) | 0x80000001)
                        PCLK = Local2
                        Local2 = (DerefOf (Local0 [0x05]) | One)
                        PCLK = Local2
                    }
                }
            }

            Method (UPSC, 1, Serialized)
            {
                OperationRegion (UACF, SystemMemory, (Arg0 + 0x84), 0x04)
                Field (UACF, ByteAcc, NoLock, Preserve)
                {
                    PMEC,   8
                }

                Return ((PMEC & 0x03))
            }
        }

        Scope (_SB.URSC)
        {
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Local0 = UARB (UM00, UC00)
                ConcatenateResTemplate (Local0, UARB (UM01, UC01), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, UARB (UM02, UC02), Local1)
                Local0 = Local1
                Return (Local0)
            }
        }

        Scope (_SB.PC00)
        {
            Device (UA00)
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If (UDSM (Arg0))
                    {
                        Return (UDMA (Arg2, UD00))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x001E0000)
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (UC00, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }
        }

        Scope (_SB)
        {
            If (((UM00 == 0x02) || (UM00 == 0x03)))
            {
                Device (UAH0)
                {
                    Name (_DDN, "SerialIoUart0")  // _DDN: DOS Device Name
                    Name (_UID, "SerialIoUart0")  // _UID: Unique ID
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return (UHID (UM00))
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (UARH (UC00, UI00))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((UM00 == 0x03))
                        {
                            If ((UP00 == 0x02))
                            {
                                UP00 = UAPG (UM00, UP00, UC00)
                            }

                            Return (0x0F)
                        }

                        Return (0x08)
                    }

                    If ((UM00 == 0x03))
                    {
                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (UPSC (UC00))
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            UPS3 (UP00, UC00)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            UPS0 (UP00, UC00)
                        }
                    }
                }
            }
        }

        Scope (_SB.PC00)
        {
            Device (UA01)
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If (UDSM (Arg0))
                    {
                        Return (UDMA (Arg2, UD01))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x001E0001)
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (UC01, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }
        }

        Scope (_SB)
        {
            If (((UM01 == 0x02) || (UM01 == 0x03)))
            {
                Device (UAH1)
                {
                    Name (_DDN, "SerialIoUart1")  // _DDN: DOS Device Name
                    Name (_UID, "SerialIoUart1")  // _UID: Unique ID
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return (UHID (UM01))
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (UARH (UC01, UI01))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((UM01 == 0x03))
                        {
                            If ((UP01 == 0x02))
                            {
                                UP01 = UAPG (UM01, UP01, UC01)
                            }

                            Return (0x0F)
                        }

                        Return (0x08)
                    }

                    If ((UM01 == 0x03))
                    {
                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (UPSC (UC01))
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            UPS3 (UP01, UC01)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            UPS0 (UP01, UC01)
                        }
                    }
                }
            }
        }

        Scope (_SB.PC00)
        {
            Device (UA02)
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If (UDSM (Arg0))
                    {
                        Return (UDMA (Arg2, UD02))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00190002)
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (UC02, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }
        }

        Scope (_SB)
        {
            If (((UM02 == 0x02) || (UM02 == 0x03)))
            {
                Device (UAH2)
                {
                    Name (_DDN, "SerialIoUart2")  // _DDN: DOS Device Name
                    Name (_UID, "SerialIoUart2")  // _UID: Unique ID
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return (UHID (UM02))
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (UARH (UC02, UI02))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((UM02 == 0x03))
                        {
                            If ((UP02 == 0x02))
                            {
                                UP02 = UAPG (UM02, UP02, UC02)
                            }

                            Return (0x0F)
                        }

                        Return (0x08)
                    }

                    If ((UM02 == 0x03))
                    {
                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (UPSC (UC02))
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            UPS3 (UP02, UC02)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            UPS0 (UP02, UC02)
                        }
                    }
                }
            }
        }

        Scope (_SB.PC00)
        {
            If ((CRFP == One))
            {
                If ((CWFC == One))
                {
                    Device (CNVW)
                    {
                        Name (_ADR, 0x00140003)  // _ADR: Address
                        Name (PU2C, Zero)
                        PU2C = \PU2C
                        Method (BASE, 0, NotSerialized)
                        {
                            Local0 = PC2M (_ADR, Zero)
                            Return (Local0)
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            ADBG ("CNVW Ctrlr D0")
                            S023 (0x02, One)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            ADBG ("CNVW Ctrlr D3")
                            Local0 = PCRR (PCNV, 0x8100)
                            If (((Local0 & 0x7F) == 0x4C))
                            {
                                S023 (0x02, Zero)
                            }
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            If (CondRefOf (GP1E))
                            {
                                If ((GP1E != Zero))
                                {
                                    Return (GPRW (0x85, 0x04))
                                }
                            }

                            Return (GPRW (0x6D, 0x04))
                        }

                        Name (RSTT, Zero)
                        Name (PRRS, Zero)
                        OperationRegion (CWAR, SystemMemory, BASE (), 0x0100)
                        Field (CWAR, WordAcc, NoLock, Preserve)
                        {
                            VDID,   32, 
                            Offset (0x44), 
                                ,   28, 
                            WFLR,   1, 
                            Offset (0x48), 
                                ,   15, 
                            WIFR,   1
                        }

                        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                        {
                            Return (0x03)
                        }

                        Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                        {
                        }

                        PowerResource (WRST, 0x05, 0x0000)
                        {
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (One)
                            }

                            Method (_ON, 0, NotSerialized)  // _ON_: Power On
                            {
                            }

                            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                            {
                            }

                            Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                            {
                                Local0 = Acquire (CNMT, 0x03E8)
                                If ((Local0 == Zero))
                                {
                                    CFLR ()
                                    PRRS = One
                                    If ((CondRefOf (RSTT) && (RSTT == One)))
                                    {
                                        ADBG ("WiFi Product Reset")
                                        ADBG (Concatenate ("PID of CNVi = ", ToHexString (PCNV)))
                                        Local5 = ^^^SBSC.PCRR (PCNV, 0x80)
                                        ADBG (Concatenate ("Register PLDB Value = ", ToHexString (Local5)))
                                        If (((^^^SBSC.PCRR (PCNV, 0x80) & 0x02) == Zero))
                                        {
                                            ADBG ("ABORT_REQUEST = 0, previous PLDR completed")
                                            If ((GBTR () == One))
                                            {
                                                BTRK (Zero)
                                                Sleep (0xA0)
                                                Local2 = One
                                            }

                                            ^^^SBSC.PCRO (PCNV, 0x80, 0x03)
                                            Sleep (0x0A)
                                            Local1 = ^^^SBSC.PCRR (PCNV, 0x80)
                                            ADBG (Concatenate ("CNVI_PLDR_ABORT = ", ToHexString (Local1)))
                                            If ((((Local1 & 0x02) == Zero) && (Local1 & 0x04)))
                                            {
                                                ADBG ("WiFi Product Reset Completed")
                                                PRRS = 0x02
                                                If ((Local2 == One))
                                                {
                                                    BTRK (One)
                                                    Sleep (0xA0)
                                                }
                                            }
                                            Else
                                            {
                                                PRRS = 0x04
                                                BTRK (One)
                                            }
                                        }
                                        Else
                                        {
                                            PRRS = 0x03
                                        }
                                    }

                                    ADBG (Concatenate ("WiFi PRRS = ", PRRS))
                                    Release (CNMT)
                                }
                            }
                        }

                        Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                        {
                            WRST
                        })
                        Method (CFLR, 0, NotSerialized)
                        {
                            ADBG (Concatenate ("WiFi Core Reset, WFLR = ", WFLR))
                            If ((WFLR == One))
                            {
                                WIFR = One
                            }
                        }
                    }
                }
            }
        }

        Scope (_SB.PC00)
        {
            Device (SAT0)
            {
                Name (_ADR, 0x00170000)  // _ADR: Address
                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG ("SATA0 Ctrlr D0")
                    If ((PCHS == PCHP))
                    {
                        If (!SCFD)
                        {
                            CSD0 (0x14)
                        }
                    }

                    ISAT = Zero
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG ("SATA0 Ctrlr D3")
                    ISAT = One
                    If ((PCHS == PCHP))
                    {
                        CSD3 (0x14)
                    }
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "StorageD3Enable", 
                                    One
                                }
                            }
                        })
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((CondRefOf (SATC) && CondRefOf (SATD)))
                    {
                        If (SATC (Arg0))
                        {
                            Return (SATD (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x03)
                }

                Device (PRT0)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((SPPR & One))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (PRT1)
                {
                    Name (_ADR, 0x0001FFFF)  // _ADR: Address
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((SPPR & 0x02))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (PRT2)
                {
                    Name (_ADR, 0x0002FFFF)  // _ADR: Address
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((SPPR & 0x04))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (PRT3)
                {
                    Name (_ADR, 0x0003FFFF)  // _ADR: Address
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((SPPR & 0x08))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (PRT4)
                {
                    Name (_ADR, 0x0004FFFF)  // _ADR: Address
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((SPPR & 0x10))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (PRT5)
                {
                    Name (_ADR, 0x0005FFFF)  // _ADR: Address
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((SPPR & 0x20))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (PRT6)
                {
                    Name (_ADR, 0x0006FFFF)  // _ADR: Address
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((SPPR & 0x40))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (PRT7)
                {
                    Name (_ADR, 0x0007FFFF)  // _ADR: Address
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((SPPR & 0x80))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }
            }
        }

        Scope (_SB.PC00)
        {
            Method (TINT, 1, Serialized)
            {
                Name (TINR, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                CreateWordField (TINR, 0x17, INT1)
                INT1 = GNUM (Arg0)
                Return (TINR) /* \_SB_.PC00.TINT.TINR */
            }

            Device (THC0)
            {
                Name (_ADR, 0x00100000)  // _ADR: Address
                Name (RSTL, Zero)
                OperationRegion (THCR, PCI_Config, Zero, 0x0100)
                Field (THCR, ByteAcc, NoLock, Preserve)
                {
                    VDID,   32
                }

                If ((VDID != 0xFFFFFFFF))
                {
                    Name (ICRS, Buffer (0x0C){})
                    CreateWordField (ICRS, Zero, DADR)
                    CreateQWordField (ICRS, 0x02, DSPD)
                    CreateByteField (ICRS, 0x0A, DADM)
                    Name (ISUB, Buffer (0x91){})
                    CreateQWordField (ISUB, Zero, SMHX)
                    CreateQWordField (ISUB, 0x08, SMLX)
                    CreateQWordField (ISUB, 0x10, SMTD)
                    CreateQWordField (ISUB, 0x18, SMRD)
                    CreateQWordField (ISUB, 0x20, FMHX)
                    CreateQWordField (ISUB, 0x28, FMLX)
                    CreateQWordField (ISUB, 0x30, FMTD)
                    CreateQWordField (ISUB, 0x38, FMRD)
                    CreateQWordField (ISUB, 0x40, FMSL)
                    CreateQWordField (ISUB, 0x48, FPHX)
                    CreateQWordField (ISUB, 0x50, FPLX)
                    CreateQWordField (ISUB, 0x58, FPTD)
                    CreateQWordField (ISUB, 0x60, FPRD)
                    CreateQWordField (ISUB, 0x68, HMHX)
                    CreateQWordField (ISUB, 0x70, HMLX)
                    CreateQWordField (ISUB, 0x78, HMTD)
                    CreateQWordField (ISUB, 0x80, HMRD)
                    CreateQWordField (ISUB, 0x88, HMSL)
                    DADR = Zero
                    DSPD = Zero
                    DADM = Zero
                    SMHX = Zero
                    SMLX = Zero
                    SMTD = Zero
                    SMRD = Zero
                    FMHX = Zero
                    FMLX = Zero
                    FMTD = Zero
                    FMRD = Zero
                    FMSL = Zero
                    FPHX = Zero
                    FPLX = Zero
                    FPTD = Zero
                    FPRD = Zero
                    HMHX = Zero
                    HMLX = Zero
                    HMTD = Zero
                    HMRD = Zero
                    HMSL = Zero
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If ((TMD0 == One))
                        {
                            If ((Arg0 == ToUUID ("6e2ac436-0fcf-41af-a265-b32a220dcfab") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Switch (ToInteger (Arg1))
                                        {
                                            Case (0x02)
                                            {
                                                Return (Buffer (One)
                                                {
                                                     0x7F                                             // .
                                                })
                                            }
                                            Default
                                            {
                                                Return (Buffer (One)
                                                {
                                                     0x00                                             // .
                                                })
                                            }

                                        }
                                    }
                                    Case (One)
                                    {
                                        ADBG ("THC THC_INPUT_REPORT_HEADER_ADDRESS")
                                        Return (ToInteger (T040))
                                    }
                                    Case (0x02)
                                    {
                                        ADBG ("THC THC_INPUT_REPORT_BODY_ADDRESS")
                                        Return (ToInteger (T050))
                                    }
                                    Case (0x03)
                                    {
                                        ADBG ("THC THC_OUTPUT_REPORT_ADDRESS")
                                        Return (ToInteger (T060))
                                    }
                                    Case (0x04)
                                    {
                                        ADBG ("THC THC_READ_OPCODE")
                                        Name (BUF4, Buffer (One){})
                                        Local0 = ToBuffer (T070)
                                        BUF4 [Zero] = DerefOf (Local0 [Zero])
                                        Return (BUF4) /* \_SB_.PC00.THC0._DSM.BUF4 */
                                    }
                                    Case (0x05)
                                    {
                                        ADBG ("THC THC_WRITE_OPCODE")
                                        Name (BUF5, Buffer (One){})
                                        Local1 = ToBuffer (T080)
                                        BUF5 [Zero] = DerefOf (Local1 [Zero])
                                        Return (BUF5) /* \_SB_.PC00.THC0._DSM.BUF5 */
                                    }
                                    Case (0x06)
                                    {
                                        ADBG ("THC THC_FLAGS")
                                        Return (ToInteger (T090))
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }

                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }

                            If ((Arg0 == ToUUID ("300d35b7-ac20-413e-8e9c-92e4dafd0afe") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x07                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        ADBG ("THC THC_CONNECTION_SPEED")
                                        Return (ToInteger (T030))
                                    }
                                    Case (0x02)
                                    {
                                        ADBG ("THC THC_LIMIT_PACKET_SIZE")
                                        Return (ToInteger (T0C0))
                                    }
                                    Case (0x03)
                                    {
                                        ADBG ("THC THC_PERFORMANCE_LIMITATION")
                                        Return (ToInteger (T0D0))
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }
                        }

                        If ((Arg0 == ToUUID ("84005682-5b71-41a4-8d66-8130f787a138") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("THC THC_ACTIVE_LTR")
                                    Return (ToInteger (T0A0))
                                }
                                Case (0x02)
                                {
                                    ADBG ("THC THC_IDLE_LTR")
                                    Return (ToInteger (T0B0))
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }

                        If ((Arg0 == ToUUID ("9b1e77c4-53db-43bd-a276-f7287604d1bd") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x01                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("THC THC_DISPLAY_FRAME_SYNC_PERIOD")
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }

                        If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x01                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("THC THC_HIDI2C_DEVICE_ADDRESS")
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }

                        Return (Buffer (Zero){})
                    }

                    If ((TIN0 != Zero))
                    {
                        Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Return (TINT (TIN0))
                        }
                    }

                    If ((TMD0 != Zero))
                    {
                        Method (_INI, 0, NotSerialized)  // _INI: Initialize
                        {
                            ADBG ("THC _INI")
                            SHPO (T010, One)
                            SPMV (T010, Zero)
                            SPC0 (T010, (0x42000200 | (~(T020 & One) & One
                                )))
                            If (CondRefOf (^CINI))
                            {
                                CINI (T010, T0F0)
                            }
                        }

                        Method (_RST, 0, Serialized)  // _RST: Device Reset
                        {
                            ADBG ("THC _RST")
                            While ((RSTL == One))
                            {
                                Sleep (0x0A)
                            }

                            RSTL = One
                            SGOV (T010, (T020 & One))
                            Sleep (T0F0)
                            SGOV (T010, (~(T020 & One) & One))
                            RSTL = Zero
                        }

                        Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            ICRS, 
                            ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                            ISUB
                        })
                    }
                }
            }

            Device (THC1)
            {
                Name (_ADR, 0x00100001)  // _ADR: Address
                Name (RSTL, Zero)
                OperationRegion (THCR, PCI_Config, Zero, 0x0100)
                Field (THCR, ByteAcc, NoLock, Preserve)
                {
                    VDID,   32
                }

                If ((VDID != 0xFFFFFFFF))
                {
                    Name (ICRS, Buffer (0x0C){})
                    CreateWordField (ICRS, Zero, DADR)
                    CreateQWordField (ICRS, 0x02, DSPD)
                    CreateByteField (ICRS, 0x0A, DADM)
                    Name (ISUB, Buffer (0x91){})
                    CreateQWordField (ISUB, Zero, SMHX)
                    CreateQWordField (ISUB, 0x08, SMLX)
                    CreateQWordField (ISUB, 0x10, SMTD)
                    CreateQWordField (ISUB, 0x18, SMRD)
                    CreateQWordField (ISUB, 0x20, FMHX)
                    CreateQWordField (ISUB, 0x28, FMLX)
                    CreateQWordField (ISUB, 0x30, FMTD)
                    CreateQWordField (ISUB, 0x38, FMRD)
                    CreateQWordField (ISUB, 0x40, FMSL)
                    CreateQWordField (ISUB, 0x48, FPHX)
                    CreateQWordField (ISUB, 0x50, FPLX)
                    CreateQWordField (ISUB, 0x58, FPTD)
                    CreateQWordField (ISUB, 0x60, FPRD)
                    CreateQWordField (ISUB, 0x68, HMHX)
                    CreateQWordField (ISUB, 0x70, HMLX)
                    CreateQWordField (ISUB, 0x78, HMTD)
                    CreateQWordField (ISUB, 0x80, HMRD)
                    CreateQWordField (ISUB, 0x88, HMSL)
                    DADR = Zero
                    DSPD = Zero
                    DADM = Zero
                    SMHX = Zero
                    SMLX = Zero
                    SMTD = Zero
                    SMRD = Zero
                    FMHX = Zero
                    FMLX = Zero
                    FMTD = Zero
                    FMRD = Zero
                    FMSL = Zero
                    FPHX = Zero
                    FPLX = Zero
                    FPTD = Zero
                    FPRD = Zero
                    HMHX = Zero
                    HMLX = Zero
                    HMTD = Zero
                    HMRD = Zero
                    HMSL = Zero
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If ((TMD1 == One))
                        {
                            If ((Arg0 == ToUUID ("6e2ac436-0fcf-41af-a265-b32a220dcfab") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Switch (ToInteger (Arg1))
                                        {
                                            Case (0x02)
                                            {
                                                Return (Buffer (One)
                                                {
                                                     0x7F                                             // .
                                                })
                                            }
                                            Default
                                            {
                                                Return (Buffer (One)
                                                {
                                                     0x00                                             // .
                                                })
                                            }

                                        }
                                    }
                                    Case (One)
                                    {
                                        ADBG ("THC THC_INPUT_REPORT_HEADER_ADDRESS")
                                        Return (ToInteger (T041))
                                    }
                                    Case (0x02)
                                    {
                                        ADBG ("THC THC_INPUT_REPORT_BODY_ADDRESS")
                                        Return (ToInteger (T051))
                                    }
                                    Case (0x03)
                                    {
                                        ADBG ("THC THC_OUTPUT_REPORT_ADDRESS")
                                        Return (ToInteger (T061))
                                    }
                                    Case (0x04)
                                    {
                                        ADBG ("THC THC_READ_OPCODE")
                                        Name (BUF4, Buffer (One){})
                                        Local0 = ToBuffer (T071)
                                        BUF4 [Zero] = DerefOf (Local0 [Zero])
                                        Return (BUF4) /* \_SB_.PC00.THC1._DSM.BUF4 */
                                    }
                                    Case (0x05)
                                    {
                                        ADBG ("THC THC_WRITE_OPCODE")
                                        Name (BUF5, Buffer (One){})
                                        Local1 = ToBuffer (T081)
                                        BUF5 [Zero] = DerefOf (Local1 [Zero])
                                        Return (BUF5) /* \_SB_.PC00.THC1._DSM.BUF5 */
                                    }
                                    Case (0x06)
                                    {
                                        ADBG ("THC THC_FLAGS")
                                        Return (ToInteger (T091))
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }

                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }

                            If ((Arg0 == ToUUID ("300d35b7-ac20-413e-8e9c-92e4dafd0afe") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x07                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        ADBG ("THC THC_CONNECTION_SPEED")
                                        Return (ToInteger (T031))
                                    }
                                    Case (0x02)
                                    {
                                        ADBG ("THC THC_LIMIT_PACKET_SIZE")
                                        Return (ToInteger (T0C1))
                                    }
                                    Case (0x03)
                                    {
                                        ADBG ("THC THC_PERFORMANCE_LIMITATION")
                                        Return (ToInteger (T0D1))
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }
                        }

                        If ((Arg0 == ToUUID ("84005682-5b71-41a4-8d66-8130f787a138") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("THC THC_ACTIVE_LTR")
                                    Return (ToInteger (T0A1))
                                }
                                Case (0x02)
                                {
                                    ADBG ("THC THC_IDLE_LTR")
                                    Return (ToInteger (T0B1))
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }

                        If ((Arg0 == ToUUID ("9b1e77c4-53db-43bd-a276-f7287604d1bd") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x01                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("THC THC_DISPLAY_FRAME_SYNC_PERIOD")
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }

                        If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x01                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("THC THC_HIDI2C_DEVICE_ADDRESS")
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }

                        Return (Buffer (Zero){})
                    }

                    If ((TIN1 != Zero))
                    {
                        Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Return (TINT (TIN1))
                        }
                    }

                    If ((TMD1 != Zero))
                    {
                        Method (_INI, 0, NotSerialized)  // _INI: Initialize
                        {
                            ADBG ("THC _INI")
                            SHPO (T011, One)
                            SPMV (T011, Zero)
                            SPC0 (T011, (0x42000200 | (~(T021 & One) & One
                                )))
                            If (CondRefOf (^CINI))
                            {
                                CINI (T011, T0F1)
                            }
                        }

                        Method (_RST, 0, Serialized)  // _RST: Device Reset
                        {
                            ADBG ("THC _RST")
                            While ((RSTL == One))
                            {
                                Sleep (0x0A)
                            }

                            RSTL = One
                            SGOV (T011, (T021 & One))
                            Sleep (T0F1)
                            SGOV (T011, (~(T021 & One) & One))
                            RSTL = Zero
                        }

                        Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            ICRS, 
                            ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                            ISUB
                        })
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Scope (\_SB.PC00)
        {
            If ((UF0E == One))
            {
                Device (PUF0)
                {
                    Name (_ADR, 0x00120007)  // _ADR: Address
                    Name (_DDN, "Intel(R) UFS Controller")  // _DDN: DOS Device Name
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (ICLK)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "SOCCLK")  // _UID: Unique ID
            OperationRegion (CKOR, SystemMemory, (SBRG + ((ICKP << 0x10) + 0x8000)), 0x40)
            Field (CKOR, AnyAcc, Lock, Preserve)
            {
                CLK0,   8, 
                Offset (0x0C), 
                CLK1,   8, 
                Offset (0x18), 
                CLK2,   8, 
                Offset (0x24), 
                CLK3,   8, 
                Offset (0x30), 
                CLK4,   8, 
                Offset (0x3C), 
                CLK5,   8
            }

            Method (NCLK, 0, NotSerialized)
            {
                Return (0x06)
            }

            Method (CLKC, 2, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Local0 = CLK0 /* \_SB_.ICLK.CLK0 */
                        CLK0 = ((Local0 & 0xFFFFFFFFFFFFFFFB) | (Arg1 << 0x02))
                    }
                    Case (One)
                    {
                        Local0 = CLK1 /* \_SB_.ICLK.CLK1 */
                        CLK1 = ((Local0 & 0xFFFFFFFFFFFFFFFB) | (Arg1 << 0x02))
                    }
                    Case (0x02)
                    {
                        Local0 = CLK2 /* \_SB_.ICLK.CLK2 */
                        CLK2 = ((Local0 & 0xFFFFFFFFFFFFFFFB) | (Arg1 << 0x02))
                    }
                    Case (0x03)
                    {
                        Local0 = CLK3 /* \_SB_.ICLK.CLK3 */
                        CLK3 = ((Local0 & 0xFFFFFFFFFFFFFFFB) | (Arg1 << 0x02))
                    }
                    Case (0x04)
                    {
                        Local0 = CLK4 /* \_SB_.ICLK.CLK4 */
                        CLK4 = ((Local0 & 0xFFFFFFFFFFFFFFFB) | (Arg1 << 0x02))
                    }
                    Case (0x05)
                    {
                        Local0 = CLK5 /* \_SB_.ICLK.CLK5 */
                        CLK5 = ((Local0 & 0xFFFFFFFFFFFFFFFB) | (Arg1 << 0x02))
                    }

                }
            }

            Method (CLKF, 2, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Local0 = CLK0 /* \_SB_.ICLK.CLK0 */
                        CLK0 = ((Local0 & 0xFFFFFFFFFFFFFFFC) | (Arg1 & 0x03))
                    }
                    Case (One)
                    {
                        Local0 = CLK1 /* \_SB_.ICLK.CLK1 */
                        CLK1 = ((Local0 & 0xFFFFFFFFFFFFFFFC) | (Arg1 & 0x03))
                    }
                    Case (0x02)
                    {
                        Local0 = CLK2 /* \_SB_.ICLK.CLK2 */
                        CLK2 = ((Local0 & 0xFFFFFFFFFFFFFFFC) | (Arg1 & 0x03))
                    }
                    Case (0x03)
                    {
                        Local0 = CLK3 /* \_SB_.ICLK.CLK3 */
                        CLK3 = ((Local0 & 0xFFFFFFFFFFFFFFFC) | (Arg1 & 0x03))
                    }
                    Case (0x04)
                    {
                        Local0 = CLK4 /* \_SB_.ICLK.CLK4 */
                        CLK4 = ((Local0 & 0xFFFFFFFFFFFFFFFC) | (Arg1 & 0x03))
                    }
                    Case (0x05)
                    {
                        Local0 = CLK5 /* \_SB_.ICLK.CLK5 */
                        CLK5 = ((Local0 & 0xFFFFFFFFFFFFFFFC) | (Arg1 & 0x03))
                    }

                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x03)
            }

            Name (PID, 0x64)
            Method (CLKD, 1, NotSerialized)
            {
                ^^PC00.SBSC.PCRA (PID, 0x8080, ~(One << Arg0))
            }

            Method (CLKE, 1, NotSerialized)
            {
                ^^PC00.SBSC.PCRO (PID, 0x8080, (One << Arg0))
            }
        }

        Device (ECLK)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "IOECLK")  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x03)
            }

            Name (PID, 0x64)
            Method (CLKD, 1, NotSerialized)
            {
                ^^PC00.SBIE.PCRA (PID, 0x8080, ~(One << Arg0))
            }

            Method (CLKE, 1, NotSerialized)
            {
                ^^PC00.SBIE.PCRO (PID, 0x8080, (One << Arg0))
            }
        }
    }

    Scope (\)
    {
        Method (SPCO, 2, Serialized)
        {
            ADBG ("Calling SPCO method to configure PCIe ClkReq Override")
            If ((PCHS == 0x04))
            {
                If ((Arg1 == One))
                {
                    If ((Arg0 > 0x03))
                    {
                        \_SB.ECLK.CLKE ((Arg0 - 0x04))
                    }
                    Else
                    {
                        \_SB.ICLK.CLKE (Arg0)
                    }
                }
                ElseIf ((Arg0 > 0x03))
                {
                    \_SB.ECLK.CLKD ((Arg0 - 0x04))
                }
                Else
                {
                    \_SB.ICLK.CLKD (Arg0)
                }
            }
            ElseIf ((Arg1 == One))
            {
                If ((Arg0 > 0x05))
                {
                    \_SB.ECLK.CLKE ((Arg0 - 0x06))
                }
                Else
                {
                    \_SB.ICLK.CLKE (Arg0)
                }
            }
            ElseIf ((Arg0 > 0x05))
            {
                \_SB.ECLK.CLKD ((Arg0 - 0x06))
            }
            Else
            {
                \_SB.ICLK.CLKD (Arg0)
            }
        }

        Method (HBCM, 2, Serialized)
        {
        }
    }

    Scope (_SB)
    {
        Device (GPI0)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((GPHD == One))
                {
                    Return ("PNP0C02")
                }

                If ((PCHS == 0x04))
                {
                    Return ("INTC1082")
                }
                ElseIf ((ARLM == One))
                {
                    Return ("INTC105E")
                }
                Else
                {
                    Return ("INTC1083")
                }
            }

            Name (LINK, "\\_SB.GPI0")
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBPS, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y31)
                    {
                        0x0000000E,
                    }
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y32)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y33)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y34)
                })
                CreateDWordField (RBPS, \_SB.GPI0._CRS._Y31._INT, INTH)  // _INT: Interrupts
                INTH = SGIR /* \SGIR */
                CreateDWordField (RBPS, \_SB.GPI0._CRS._Y32._BAS, CMH0)  // _BAS: Base Address
                CMH0 = (SBRG + 0x00D10000)
                CreateDWordField (RBPS, \_SB.GPI0._CRS._Y33._BAS, CMH1)  // _BAS: Base Address
                CMH1 = (SBRG + 0x00D20000)
                CreateDWordField (RBPS, \_SB.GPI0._CRS._Y34._BAS, CMH3)  // _BAS: Base Address
                CMH3 = (SBRG + 0x00D30000)
                If ((PCHS != 0x04))
                {
                    Name (RBFS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y35)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y36)
                    })
                    CreateDWordField (RBFS, \_SB.GPI0._CRS._Y35._BAS, CMH4)  // _BAS: Base Address
                    CMH4 = (SBRG + 0x00D40000)
                    CreateDWordField (RBFS, \_SB.GPI0._CRS._Y36._BAS, CMH5)  // _BAS: Base Address
                    CMH5 = (SBRG + 0x00D50000)
                    ConcatenateResTemplate (RBPS, RBFS, Local0)
                    Return (Local0)
                }

                Return (RBPS) /* \_SB_.GPI0._CRS.RBPS */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((GPHD == One))
                {
                    Return (0x08)
                }

                Return (0x0F)
            }
        }
    }

    Scope (_SB)
    {
        Name (GPCM, Package (0x05)
        {
            Package (0x02)
            {
                0x00D10000, 
                Package (0x03)
                {
                    Package (0x09)
                    {
                        0x05, 
                        0x0600, 
                        0x0140, 
                        0xB0, 
                        0x0230, 
                        0x0110, 
                        0x0114, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x09)
                    {
                        0x18, 
                        0x0650, 
                        0x0144, 
                        0xB4, 
                        0x0234, 
                        0x0118, 
                        0x011C, 
                        0x20, 
                        One
                    }, 

                    Package (0x09)
                    {
                        0x18, 
                        0x07D0, 
                        0x0148, 
                        0xC0, 
                        0x0238, 
                        0x0120, 
                        0x0124, 
                        0x40, 
                        0x02
                    }
                }
            }, 

            Package (0x02)
            {
                0x00D20000, 
                Package (0x02)
                {
                    Package (0x09)
                    {
                        0x19, 
                        0x0600, 
                        0x0140, 
                        0xB0, 
                        0x0230, 
                        0x0110, 
                        0x0114, 
                        0x60, 
                        0x03
                    }, 

                    Package (0x09)
                    {
                        0x19, 
                        0x0790, 
                        0x0144, 
                        0xC0, 
                        0x0234, 
                        0x0118, 
                        0x011C, 
                        0x80, 
                        0x04
                    }
                }
            }, 

            Package (0x02)
            {
                0x00D30000, 
                Package (0x04)
                {
                    Package (0x09)
                    {
                        0x1A, 
                        0x0600, 
                        0x0140, 
                        0xB0, 
                        0x0230, 
                        0x0110, 
                        0x0114, 
                        0xA0, 
                        0x05
                    }, 

                    Package (0x09)
                    {
                        0x1A, 
                        0x07A0, 
                        0x0144, 
                        0xC0, 
                        0x0234, 
                        0x0118, 
                        0x011C, 
                        0xC0, 
                        0x06
                    }, 

                    Package (0x09)
                    {
                        0x0F, 
                        0x0940, 
                        0x0148, 
                        0xD0, 
                        0x0238, 
                        0x0120, 
                        0x0124, 
                        0xE0, 
                        0x07
                    }, 

                    Package (0x09)
                    {
                        0x0E, 
                        0x0A30, 
                        0x014C, 
                        0xD8, 
                        0x023C, 
                        0x0128, 
                        0x012C, 
                        0x0100, 
                        0x08
                    }
                }
            }, 

            Package (0x02)
            {
                0x00D40000, 
                Package (0x02)
                {
                    Package (0x09)
                    {
                        0x08, 
                        0x0600, 
                        0x0140, 
                        0xB0, 
                        0x0230, 
                        0x0110, 
                        0x0114, 
                        0x0120, 
                        0x09
                    }, 

                    Package (0x09)
                    {
                        0x0C, 
                        0x0680, 
                        0x0144, 
                        0xB4, 
                        0x0234, 
                        0x0118, 
                        0x011C, 
                        0x0140, 
                        0x0A
                    }
                }
            }, 

            Package (0x02)
            {
                0x00D50000, 
                Package (0x03)
                {
                    Package (0x09)
                    {
                        0x19, 
                        0x0600, 
                        0x0140, 
                        0xB0, 
                        0x0230, 
                        0x0110, 
                        0x0114, 
                        0x0160, 
                        0x0B
                    }, 

                    Package (0x09)
                    {
                        0x19, 
                        0x0790, 
                        0x0144, 
                        0xC0, 
                        0x0234, 
                        0x0118, 
                        0x011C, 
                        0x0180, 
                        0x0C
                    }, 

                    Package (0x09)
                    {
                        0x23, 
                        0x0920, 
                        0x0148, 
                        0xD0, 
                        0x0238, 
                        0x0120, 
                        0x0124, 
                        0x01A0, 
                        0x0D
                    }
                }
            }
        })
        Name (GPCS, Package (0x03)
        {
            Package (0x02)
            {
                0x00D10000, 
                Package (0x03)
                {
                    Package (0x09)
                    {
                        0x1C, 
                        0x0600, 
                        0x0110, 
                        0xB0, 
                        0x0220, 
                        0xF0, 
                        0xF4, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x09)
                    {
                        0x06, 
                        0x07C0, 
                        0x0114, 
                        0xC0, 
                        0x0224, 
                        0xF8, 
                        0xFC, 
                        0x20, 
                        One
                    }, 

                    Package (0x09)
                    {
                        0x1B, 
                        0x08E0, 
                        0x0118, 
                        0xCC, 
                        0x0228, 
                        0x0100, 
                        0x0104, 
                        0x40, 
                        0x02
                    }
                }
            }, 

            Package (0x02)
            {
                0x00D20000, 
                Package (0x03)
                {
                    Package (0x09)
                    {
                        0x14, 
                        0x0600, 
                        0x0110, 
                        0xB0, 
                        0x0220, 
                        0xF0, 
                        0xF4, 
                        0x60, 
                        0x03
                    }, 

                    Package (0x09)
                    {
                        0x07, 
                        0x0740, 
                        0x0114, 
                        0xBC, 
                        0x0224, 
                        0xF8, 
                        0xFC, 
                        0x80, 
                        0x04
                    }, 

                    Package (0x09)
                    {
                        0x18, 
                        0x0760, 
                        0x0118, 
                        0xC0, 
                        0x0228, 
                        0x0100, 
                        0x0104, 
                        0xA0, 
                        0x05
                    }
                }
            }, 

            Package (0x02)
            {
                0x00D30000, 
                Package (0x02)
                {
                    Package (0x09)
                    {
                        0x10, 
                        0x0600, 
                        0x0110, 
                        0xB0, 
                        0x0220, 
                        0xF0, 
                        0xF4, 
                        0xC0, 
                        0x06
                    }, 

                    Package (0x09)
                    {
                        0x02, 
                        0x0700, 
                        0x0114, 
                        0xB8, 
                        0x0224, 
                        0xF8, 
                        0xFC, 
                        0xE0, 
                        0x07
                    }
                }
            }
        })
    }

    Scope (_SB)
    {
        Method (GDSC, 0, NotSerialized)
        {
            If ((PCHS == 0x04))
            {
                Return (GPCS) /* \_SB_.GPCS */
            }
            Else
            {
                Return (GPCM) /* \_SB_.GPCM */
            }
        }

        Method (GMXG, 0, NotSerialized)
        {
            If ((PCHS == 0x04))
            {
                Return (0x08)
            }
            Else
            {
                Return (0x0E)
            }
        }

        Method (GCMP, 1, NotSerialized)
        {
            Local0 = GDSC ()
            Return (DerefOf (DerefOf (Local0 [Arg0]) [Zero]))
        }

        Method (GINF, 3, NotSerialized)
        {
            Local0 = GDSC ()
            Return (DerefOf (DerefOf (DerefOf (DerefOf (Local0 [Arg0]) [
                One]) [Arg1]) [Arg2]))
        }

        Method (GCOM, 1, Serialized)
        {
            Local0 = ((Arg0 >> 0x0A) & 0x07)
            Return (Local0)
        }

        Method (GGRP, 1, Serialized)
        {
            Local0 = ((Arg0 >> 0x07) & 0x07)
            Return (Local0)
        }

        Method (GNMB, 1, Serialized)
        {
            Return ((Arg0 & 0x7F))
        }

        Method (GADR, 2, NotSerialized)
        {
            Local2 = GGRP (Arg0)
            Local3 = GCOM (Arg0)
            Local0 = (GCMP (Local3) + SBRG)
            Local1 = GINF (Local3, Local2, Arg1)
            Return ((Local0 + Local1))
        }

        Method (GNUM, 1, NotSerialized)
        {
            Local0 = GNMB (Arg0)
            Local1 = GGRP (Arg0)
            Local2 = GCOM (Arg0)
            Return ((GINF (Local2, Local1, 0x07) + Local0))
        }

        Method (GGGP, 1, NotSerialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GCOM (Arg0)
            Return (GINF (Local1, Local0, 0x08))
        }

        Method (INUM, 1, NotSerialized)
        {
            Return ((GPC1 (Arg0) & 0x7F))
        }

        Method (GGPE, 1, NotSerialized)
        {
            Local0 = GGGP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (Local1 >> 0x05)
            If (!((((GEI0 == Local0) && (GED0 == Local2)) | (
                (GEI1 == Local0) && (GED1 == Local2))) | ((GEI2 == Local0) && (GED2 == 
                Local2))))
            {
                Return (0x6F)
            }
            Else
            {
                If (((GEI0 == Local0) && (GED0 == Local2)))
                {
                    Local3 = Zero
                }
                ElseIf (((GEI1 == Local0) && (GED1 == Local2)))
                {
                    Local3 = One
                }
                ElseIf (((GEI2 == Local0) && (GED2 == Local2)))
                {
                    Local3 = 0x02
                }
                Else
                {
                    BreakPoint
                    Return (Zero)
                }

                Return ((((Local3 - Local2) * 0x20) + Local1))
            }
        }

        Method (GPC0, 1, Serialized)
        {
            Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP) /* \_SB_.GPC0.TEMP */
        }

        Method (SPC0, 2, Serialized)
        {
            Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            TEMP = Arg1
        }

        Method (GPC1, 1, Serialized)
        {
            Local2 = ((GADR (Arg0, One) + (GNMB (Arg0) * 0x10)
                ) + 0x04)
            OperationRegion (PDW1, SystemMemory, Local2, 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP) /* \_SB_.GPC1.TEMP */
        }

        Method (SPC1, 2, Serialized)
        {
            Local2 = ((GADR (Arg0, One) + (GNMB (Arg0) * 0x10)
                ) + 0x04)
            OperationRegion (PDW1, SystemMemory, Local2, 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            TEMP = Arg1
        }

        Method (SRXO, 2, Serialized)
        {
            Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   28, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GGIV, 1, Serialized)
        {
            Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   1, 
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGIV.TEMP */
        }

        Method (GGOV, 1, Serialized)
        {
            Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGOV.TEMP */
        }

        Method (SGOV, 2, Serialized)
        {
            Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GGII, 1, Serialized)
        {
            Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   23, 
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGII.TEMP */
        }

        Method (SGII, 2, Serialized)
        {
            Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   23, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GPMV, 1, Serialized)
        {
            Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   3, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GPMV.TEMP */
        }

        Method (SPMV, 2, Serialized)
        {
            Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   3, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GHPO, 1, Serialized)
        {
            Local1 = GNMB (Arg0)
            Local3 = (GADR (Arg0, 0x02) + ((Local1 >> 0x05) * 0x04))
            Local4 = (Local1 & 0x1F)
            OperationRegion (PREG, SystemMemory, Local3, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (((TEMP >> Local4) & One))
        }

        Method (SHPO, 2, Serialized)
        {
            Local1 = GNMB (Arg0)
            ADBG ("Pad number")
            ADBG (ToHexString (Local1))
            Local3 = (GADR (Arg0, 0x02) + ((Local1 >> 0x05) * 0x04))
            ADBG ("HOST owner offset")
            ADBG (ToHexString (Local3))
            Local4 = (Local1 & 0x1F)
            ADBG ("Pad position")
            ADBG (ToHexString (Local4))
            OperationRegion (PREG, SystemMemory, Local3, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            ADBG ("HOST own before")
            ADBG (ToHexString (TEMP))
            If (Arg1)
            {
                TEMP |= (One << Local4)
            }
            Else
            {
                TEMP &= ~(One << Local4)
            }

            ADBG ("HOST own after")
            ADBG (ToHexString (TEMP))
        }

        Method (GGPO, 1, Serialized)
        {
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Arg0, 0x03) + ((Local1 >> 0x03) * 0x04
                ))
            OperationRegion (PREG, SystemMemory, Local2, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (((TEMP >> ((Local1 & 0x07) * 0x04)) & 
                0x03))
        }

        Method (SGRA, 2, Serialized)
        {
            Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   20, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (SGWP, 2, Serialized)
        {
            Local2 = ((GADR (Arg0, One) + (GNMB (Arg0) * 0x10)
                ) + 0x04)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   4, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (CGPI, 1, Serialized)
        {
            Local1 = GNMB (Arg0)
            ADBG ("Pad number")
            ADBG (ToHexString (Local1))
            Local4 = (Local1 >> 0x05)
            ADBG ("Group DW")
            ADBG (ToHexString (Local4))
            Local3 = GADR (Arg0, 0x04)
            ADBG ("Reg offset")
            ADBG (ToHexString (Local3))
            If (((Local3 & 0xFFFF) != 0xFFFF))
            {
                ADBG ("Clearing GPI")
                OperationRegion (GPPX, SystemMemory, (Local3 + (Local4 * 0x04)), 0x04)
                Field (GPPX, AnyAcc, NoLock, Preserve)
                {
                    STSX,   32
                }

                Local2 = (One << (Local1 % 0x20))
                ADBG ("STSX before")
                ADBG (ToHexString (STSX))
                STSX = Local2
                ADBG ("STSX after")
                ADBG (ToHexString (STSX))
            }
        }

        Method (CAGS, 1, Serialized)
        {
            Local0 = GGGP (Arg0)
            Local1 = GNMB (Arg0)
            Local4 = (Local1 >> 0x05)
            If (!((((GEI0 == Local0) && (GED0 == Local4)) | (
                (GEI1 == Local0) && (GED1 == Local4))) | ((GEI2 == Local0) && (GED2 == 
                Local4))))
            {
                Local3 = GADR (Arg0, 0x04)
                If (((Local3 & 0xFFFF) != 0xFFFF))
                {
                    OperationRegion (GPPX, SystemMemory, (Local3 + (Local4 * 0x04)), 0x04)
                    Field (GPPX, AnyAcc, NoLock, Preserve)
                    {
                        STSX,   32
                    }

                    Local2 = (One << (Local1 % 0x20))
                    STSX = Local2
                }
            }
        }

        Method (IGPI, 1, Serialized)
        {
            Local1 = GNMB (Arg0)
            Local4 = (Local1 >> 0x05)
            If (((GADR (Arg0, 0x04) & 0xFFFF) == 0xFFFF))
            {
                Return (Zero)
            }

            Local2 = (GADR (Arg0, 0x04) + (Local4 * 0x04))
            Local3 = (Local1 & 0x1F)
            OperationRegion (GPPX, SystemMemory, Local2, 0x24)
            Field (GPPX, AnyAcc, NoLock, Preserve)
            {
                STSX,   32, 
                Offset (0x20), 
                GENX,   32
            }

            Return ((((STSX & GENX) >> Local3) & One))
        }

        Method (ISME, 1, Serialized)
        {
            Local0 = GGGP (Arg0)
            Local1 = GNMB (Arg0)
            Local4 = (Local1 >> 0x05)
            If (!!((((GEI0 == Local0) && (GED0 == Local4)) | 
                ((GEI1 == Local0) && (GED1 == Local4))) | ((GEI2 == Local0) && (
                GED2 == Local4))))
            {
                Return (Zero)
            }

            If (((GADR (Arg0, 0x04) & 0xFFFF) == 0xFFFF))
            {
                Return (Zero)
            }

            Local2 = (GADR (Arg0, 0x04) + (Local4 * 0x04))
            Local3 = (Local1 & 0x1F)
            OperationRegion (GPPX, SystemMemory, Local2, 0x24)
            Field (GPPX, AnyAcc, NoLock, Preserve)
            {
                STSX,   32, 
                Offset (0x20), 
                GENX,   32
            }

            Return ((((STSX & GENX) >> Local3) & One))
        }

        Method (GRXE, 2, Serialized)
        {
            Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   25, 
                RCFG,   2, 
                Offset (0x04)
            }

            RCFG = Arg1
        }

        Method (GLOC, 2, Serialized)
        {
            Local1 = GNMB (Arg0)
            Local2 = GADR (Arg0, 0x05)
            OperationRegion (PREG, SystemMemory, Local2, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (((TEMP >> Local1) & One))
        }

        Method (GLOT, 2, Serialized)
        {
            Local1 = GNMB (Arg0)
            Local2 = GADR (Arg0, 0x06)
            OperationRegion (PREG, SystemMemory, Local2, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (((TEMP >> Local1) & One))
        }
    }

    Scope (_SB.PC00)
    {
        Device (SBSC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "SOCP2SB")  // _UID: Unique ID
            Name (_STA, 0x08)  // _STA: Status
            Name (SBRG, Zero)
            SBRG = \SBRG
            Method (PCRR, 2, Serialized)
            {
                Local1 = (Arg1 & 0xFFFF)
                Local2 = ((Arg1 & 0x000F0000) << 0x08)
                Local0 = ((Arg0 << 0x10) + Local1)
                Local0 = ((Local2 + Local0) + SBRG) /* \_SB_.PC00.SBSC.SBRG */
                OperationRegion (PCR0, SystemMemory, Local0, 0x04)
                Field (PCR0, DWordAcc, Lock, Preserve)
                {
                    DAT0,   32
                }

                Return (DAT0) /* \_SB_.PC00.SBSC.PCRR.DAT0 */
            }

            Method (PCRW, 3, Serialized)
            {
                Local1 = (Arg1 & 0xFFFF)
                Local2 = ((Arg1 & 0x000F0000) << 0x08)
                Local0 = ((Arg0 << 0x10) + Local1)
                Local0 = ((Local2 + Local0) + SBRG) /* \_SB_.PC00.SBSC.SBRG */
                OperationRegion (PCR0, SystemMemory, Local0, 0x04)
                Field (PCR0, DWordAcc, Lock, Preserve)
                {
                    DAT0,   32
                }

                DAT0 = Arg2
            }

            Method (PCRO, 3, Serialized)
            {
                Local0 = PCRR (Arg0, Arg1)
                Local1 = (Local0 | Arg2)
                PCRW (Arg0, Arg1, Local1)
            }

            Method (PCRA, 3, Serialized)
            {
                Local0 = PCRR (Arg0, Arg1)
                Local1 = (Local0 & Arg2)
                PCRW (Arg0, Arg1, Local1)
            }

            Method (PCAO, 4, Serialized)
            {
                Local0 = PCRR (Arg0, Arg1)
                Local1 = ((Local0 & Arg2) | Arg3)
                PCRW (Arg0, Arg1, Local1)
            }
        }

        Device (SBIE)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "IOEP2SB")  // _UID: Unique ID
            Name (_STA, 0x08)  // _STA: Status
            Name (SBRG, 0x000003FFF0000000)
            Method (PCRR, 2, Serialized)
            {
                Local1 = (Arg1 & 0xFFFF)
                Local2 = ((Arg1 & 0x000F0000) << 0x08)
                Local0 = ((Arg0 << 0x10) + Local1)
                Local0 = ((Local2 + Local0) + SBRG) /* \_SB_.PC00.SBIE.SBRG */
                OperationRegion (PCR0, SystemMemory, Local0, 0x04)
                Field (PCR0, DWordAcc, Lock, Preserve)
                {
                    DAT0,   32
                }

                Return (DAT0) /* \_SB_.PC00.SBIE.PCRR.DAT0 */
            }

            Method (PCRW, 3, Serialized)
            {
                Local1 = (Arg1 & 0xFFFF)
                Local2 = ((Arg1 & 0x000F0000) << 0x08)
                Local0 = ((Arg0 << 0x10) + Local1)
                Local0 = ((Local2 + Local0) + SBRG) /* \_SB_.PC00.SBIE.SBRG */
                OperationRegion (PCR0, SystemMemory, Local0, 0x04)
                Field (PCR0, DWordAcc, Lock, Preserve)
                {
                    DAT0,   32
                }

                DAT0 = Arg2
            }

            Method (PCRO, 3, Serialized)
            {
                Local0 = PCRR (Arg0, Arg1)
                Local1 = (Local0 | Arg2)
                PCRW (Arg0, Arg1, Local1)
            }

            Method (PCRA, 3, Serialized)
            {
                Local0 = PCRR (Arg0, Arg1)
                Local1 = (Local0 & Arg2)
                PCRW (Arg0, Arg1, Local1)
            }

            Method (PCAO, 4, Serialized)
            {
                Local0 = PCRR (Arg0, Arg1)
                Local1 = ((Local0 & Arg2) | Arg3)
                PCRW (Arg0, Arg1, Local1)
            }
        }
    }

    Scope (\)
    {
        Method (PCRR, 2, Serialized)
        {
            Local1 = (Arg1 & 0xFFFF)
            Local2 = ((Arg1 & 0x000F0000) << 0x08)
            Local0 = ((Arg0 << 0x10) + Local1)
            Local0 = ((Local2 + Local0) + SBRG) /* \SBRG */
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            Return (DAT0) /* \PCRR.DAT0 */
        }

        Method (PCRW, 3, Serialized)
        {
            Local1 = (Arg1 & 0xFFFF)
            Local2 = ((Arg1 & 0x000F0000) << 0x08)
            Local0 = ((Arg0 << 0x10) + Local1)
            Local0 = ((Local2 + Local0) + SBRG) /* \SBRG */
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            DAT0 = Arg2
        }

        Method (PCRO, 3, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = (Local0 | Arg2)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCRA, 3, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = (Local0 & Arg2)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCAO, 4, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = ((Local0 & Arg2) | Arg3)
            PCRW (Arg0, Arg1, Local1)
        }
    }

    If ((PCHA != Zero))
    {
        Name (MNVB, 0xFFFF0000)
        Name (MNVL, 0xAA55)
        Scope (_SB.PC02)
        {
            OperationRegion (MTNV, SystemMemory, MNVB, MNVL)
            Field (MTNV, AnyAcc, Lock, Preserve)
            {
                PWRM,   32, 
                ABAS,   16, 
                SBRG,   64, 
                PU2C,   8, 
                PU3C,   8, 
                GBES,   8, 
                NHAA,   64, 
                NHLL,   32, 
                ADFM,   32, 
                SWQ0,   8, 
                SWQ1,   8, 
                SWQ2,   8, 
                SWQ3,   8, 
                ACS0,   8, 
                ACS1,   8, 
                ACS2,   8, 
                ACS3,   8, 
                DAI0,   8, 
                DAI1,   8, 
                DAI2,   8, 
                DAI3,   8, 
                DOD0,   8, 
                DOD1,   8, 
                DOD2,   8, 
                DOD3,   8, 
                HDBO,   16, 
                SWMC,   8, 
                XTAL,   32, 
                RPA1,   32, 
                RPA2,   32, 
                RPA3,   32, 
                RPA4,   32, 
                RPA5,   32, 
                RPA6,   32, 
                RPA7,   32, 
                RPA8,   32, 
                RPA9,   32, 
                RPAA,   32, 
                RPAB,   32, 
                RPAC,   32, 
                RPAD,   32, 
                RPAE,   32, 
                RPAF,   32, 
                RPAG,   32, 
                RPAH,   32, 
                RPAI,   32, 
                RPAJ,   32, 
                RPAK,   32, 
                RPAL,   32, 
                RPAM,   32, 
                RPAN,   32, 
                RPAO,   32, 
                PML1,   16, 
                PML2,   16, 
                PML3,   16, 
                PML4,   16, 
                PML5,   16, 
                PML6,   16, 
                PML7,   16, 
                PML8,   16, 
                PML9,   16, 
                PMLA,   16, 
                PMLB,   16, 
                PMLC,   16, 
                PMLD,   16, 
                PMLE,   16, 
                PMLF,   16, 
                PMLG,   16, 
                PMLH,   16, 
                PMLI,   16, 
                PMLJ,   16, 
                PMLK,   16, 
                PMLL,   16, 
                PMLM,   16, 
                PMLN,   16, 
                PMLO,   16, 
                PNL1,   16, 
                PNL2,   16, 
                PNL3,   16, 
                PNL4,   16, 
                PNL5,   16, 
                PNL6,   16, 
                PNL7,   16, 
                PNL8,   16, 
                PNL9,   16, 
                PNLA,   16, 
                PNLB,   16, 
                PNLC,   16, 
                PNLD,   16, 
                PNLE,   16, 
                PNLF,   16, 
                PNLG,   16, 
                PNLH,   16, 
                PNLI,   16, 
                PNLJ,   16, 
                PNLK,   16, 
                PNLL,   16, 
                PNLM,   16, 
                PNLN,   16, 
                PNLO,   16, 
                TIN0,   32, 
                TIN1,   32, 
                TMD0,   16, 
                TMD1,   16, 
                UF0E,   8, 
                UF1E,   8, 
                UAOE,   8, 
                T010,   32, 
                T011,   32, 
                T020,   8, 
                T021,   8, 
                T030,   32, 
                T031,   32, 
                T040,   32, 
                T041,   32, 
                T050,   32, 
                T051,   32, 
                T060,   32, 
                T061,   32, 
                T070,   32, 
                T071,   32, 
                T080,   32, 
                T081,   32, 
                T090,   32, 
                T091,   32, 
                T0A0,   32, 
                T0A1,   32, 
                T0B0,   32, 
                T0B1,   32, 
                T0C0,   32, 
                T0C1,   32, 
                T0D0,   32, 
                T0D1,   32, 
                T0E0,   32, 
                T0E1,   32, 
                T0F0,   32, 
                T0F1,   32, 
                SM00,   8, 
                SM01,   8, 
                SM02,   8, 
                SM03,   8, 
                SC00,   64, 
                SC01,   64, 
                SC02,   64, 
                SC03,   64, 
                IM00,   8, 
                IM01,   8, 
                IM02,   8, 
                IM03,   8, 
                IM04,   8, 
                IM05,   8, 
                IC00,   64, 
                IC01,   64, 
                IC02,   64, 
                IC03,   64, 
                IC04,   64, 
                IC05,   64, 
                UM00,   8, 
                UM01,   8, 
                UM02,   8, 
                UM03,   8, 
                UC00,   64, 
                UC01,   64, 
                UC02,   64, 
                UC03,   64, 
                UD00,   8, 
                UD01,   8, 
                UD02,   8, 
                UD03,   8, 
                UP00,   8, 
                UP01,   8, 
                UP02,   8, 
                UP03,   8, 
                UI00,   8, 
                UI01,   8, 
                UI02,   8, 
                UI03,   8, 
                PCNV,   16, 
                GEI0,   8, 
                GEI1,   8, 
                GEI2,   8, 
                GED0,   8, 
                GED1,   8, 
                GED2,   8
            }

            Device (SBPC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, "PCHP2SB")  // _UID: Unique ID
                Name (_STA, 0x08)  // _STA: Status
                Name (SBRG, Zero)
                SBRG = ^SBRG /* \_SB_.PC02.SBRG */
                Method (PCRR, 2, Serialized)
                {
                    Local1 = (Arg1 & 0xFFFF)
                    Local2 = ((Arg1 & 0x000F0000) << 0x08)
                    Local0 = ((Arg0 << 0x10) + Local1)
                    Local0 = ((Local2 + Local0) + SBRG) /* \_SB_.PC02.SBPC.SBRG */
                    OperationRegion (PCR0, SystemMemory, Local0, 0x04)
                    Field (PCR0, DWordAcc, Lock, Preserve)
                    {
                        DAT0,   32
                    }

                    Return (DAT0) /* \_SB_.PC02.SBPC.PCRR.DAT0 */
                }

                Method (PCRW, 3, Serialized)
                {
                    Local1 = (Arg1 & 0xFFFF)
                    Local2 = ((Arg1 & 0x000F0000) << 0x08)
                    Local0 = ((Arg0 << 0x10) + Local1)
                    Local0 = ((Local2 + Local0) + SBRG) /* \_SB_.PC02.SBPC.SBRG */
                    OperationRegion (PCR0, SystemMemory, Local0, 0x04)
                    Field (PCR0, DWordAcc, Lock, Preserve)
                    {
                        DAT0,   32
                    }

                    DAT0 = Arg2
                }

                Method (PCRO, 3, Serialized)
                {
                    Local0 = PCRR (Arg0, Arg1)
                    Local1 = (Local0 | Arg2)
                    PCRW (Arg0, Arg1, Local1)
                }

                Method (PCRA, 3, Serialized)
                {
                    Local0 = PCRR (Arg0, Arg1)
                    Local1 = (Local0 & Arg2)
                    PCRW (Arg0, Arg1, Local1)
                }

                Method (PCAO, 4, Serialized)
                {
                    Local0 = PCRR (Arg0, Arg1)
                    Local1 = ((Local0 & Arg2) | Arg3)
                    PCRW (Arg0, Arg1, Local1)
                }
            }

            Device (PPMC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, "MTPPMC")  // _UID: Unique ID
                Name (_STA, 0x08)  // _STA: Status
                Method (IPCS, 7, Serialized)
                {
                    Name (RPKG, Package (0x05)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    ADBG ("PMC IPC")
                    ADBG (Concatenate ("Command: ", ToHexString (Arg0)))
                    ADBG (Concatenate ("SubCmdId: ", ToHexString (Arg1)))
                    ADBG (Concatenate ("Size: ", ToHexString (Arg2)))
                    ADBG (Concatenate ("WBuff0: ", ToHexString (Arg3)))
                    ADBG (Concatenate ("WBuff1: ", ToHexString (Arg4)))
                    ADBG (Concatenate ("WBuff2: ", ToHexString (Arg5)))
                    ADBG (Concatenate ("WBuff3: ", ToHexString (Arg6)))
                    If ((Arg2 > 0x10))
                    {
                        ADBG ("CmdSize>16 Error")
                        RPKG [Zero] = One
                        Return (RPKG) /* \_SB_.PC02.PPMC.IPCS.RPKG */
                    }

                    IWB0 = Arg3
                    IWB1 = Arg4
                    IWB2 = Arg5
                    IWB3 = Arg6
                    Local0 = Zero
                    Local0 += (Arg0 << Zero)
                    Local0 += (Arg1 << 0x0C)
                    Local0 += (Arg2 << 0x10)
                    CMDR = Local0
                    Local0 = Zero
                    While (One)
                    {
                        If ((!IBSY || (IERR == One)))
                        {
                            Break
                        }

                        If ((Local0 > 0x0A))
                        {
                            ADBG ("IPC Busy TO")
                            RPKG [Zero] = 0x03
                            Return (RPKG) /* \_SB_.PC02.PPMC.IPCS.RPKG */
                        }

                        Sleep (One)
                        Local0++
                    }

                    If ((IERR == One))
                    {
                        ADBG ("IPC Error:")
                        ADBG (IERC)
                        ADBG (Arg0)
                        ADBG (Arg1)
                        ADBG (Arg2)
                        ADBG (Arg3)
                        ADBG (Arg4)
                        ADBG (Arg5)
                        ADBG (Arg6)
                        RPKG [Zero] = 0x02
                        Return (RPKG) /* \_SB_.PC02.PPMC.IPCS.RPKG */
                    }

                    RPKG [One] = IRB0 /* \_SB_.PC02.PPMC.IRB0 */
                    RPKG [0x02] = IRB1 /* \_SB_.PC02.PPMC.IRB1 */
                    RPKG [0x03] = IRB2 /* \_SB_.PC02.PPMC.IRB2 */
                    RPKG [0x04] = IRB3 /* \_SB_.PC02.PPMC.IRB3 */
                    Return (RPKG) /* \_SB_.PC02.PPMC.IPCS.RPKG */
                }

                Method (ULTR, 1, Serialized)
                {
                    LTRU = Arg0
                }

                OperationRegion (PWMR, SystemMemory, PWRM, 0x1E30)
                Field (PWMR, DWordAcc, NoLock, Preserve)
                {
                    CMDR,   32, 
                    IBSY,   1, 
                    IERR,   1, 
                        ,   1, 
                        ,   1, 
                    Offset (0x05), 
                    Offset (0x06), 
                    IERC,   8, 
                    Offset (0x08), 
                    Offset (0x80), 
                    IWB0,   32, 
                    IWB1,   32, 
                    IWB2,   32, 
                    IWB3,   32, 
                    IRB0,   32, 
                    IRB1,   32, 
                    IRB2,   32, 
                    IRB3,   32, 
                    Offset (0x10D0), 
                    RAA0,   1, 
                    RAA1,   1, 
                    RAA2,   1, 
                    RAA3,   1, 
                    RPB0,   1, 
                    RPB1,   1, 
                    RPB2,   1, 
                    RPB3,   1, 
                    RPC0,   1, 
                    RPC1,   1, 
                    RPC2,   1, 
                    RPC3,   1, 
                    RSAT,   1, 
                    RGBE,   1, 
                    RXHC,   1, 
                    RXDC,   1, 
                    RUFS,   1, 
                    RPD0,   1, 
                    RPD1,   1, 
                    RPD2,   1, 
                    RPD3,   1, 
                    RPE0,   1, 
                    RPE1,   1, 
                    RPE2,   1, 
                    RPE3,   1, 
                    Offset (0x10D4), 
                    APA0,   1, 
                    APA1,   1, 
                    APA2,   1, 
                    APA3,   1, 
                    APB0,   1, 
                    APB1,   1, 
                    APB2,   1, 
                    APB3,   1, 
                    APC0,   1, 
                    APC1,   1, 
                    APC2,   1, 
                    APC3,   1, 
                    ASAT,   1, 
                    AGBE,   1, 
                    AXHC,   1, 
                    AXDC,   1, 
                    AUFS,   1, 
                    APD0,   1, 
                    APD1,   1, 
                    APD2,   1, 
                    APD3,   1, 
                    APE0,   1, 
                    APE1,   1, 
                    APE2,   1, 
                    APE3,   1, 
                    Offset (0x1800), 
                    ACWA,   32, 
                    DCWA,   32, 
                    ACET,   32, 
                    DCET,   32, 
                    Offset (0x18E8), 
                        ,   29, 
                    APG3,   1, 
                        ,   1, 
                    CECE,   1, 
                    Offset (0x1B0C), 
                        ,   2, 
                    ISAT,   1, 
                        ,   18, 
                    LTRU,   1, 
                    Offset (0x1B1C), 
                        ,   22, 
                    XSQD,   1, 
                    Offset (0x1BD0), 
                        ,   31, 
                    CPPM,   1, 
                    Offset (0x1E20), 
                    GBED,   1, 
                    Offset (0x1E28), 
                        ,   22, 
                    SCFD,   1
                }

                Method (PG3C, 1, Serialized)
                {
                    If (Arg0)
                    {
                        ADBG ("PG3 Enable")
                        APG3 = One
                    }
                    Else
                    {
                        ADBG ("PG3 Disable")
                        APG3 = Zero
                    }
                }

                Method (PG3T, 0, NotSerialized)
                {
                    If (APG3)
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (PSOC, 1, Serialized)
                {
                    If (PSON)
                    {
                        If (Arg0)
                        {
                            ADBG ("PS_ON Enable")
                            CECE = One
                        }
                        Else
                        {
                            ADBG ("PS_ON Disable")
                            CECE = Zero
                        }
                    }
                }

                Method (PSOS, 0, NotSerialized)
                {
                    If (CECE)
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (CFAE, 1, NotSerialized)
                {
                    If (CondRefOf (CPPE))
                    {
                        If ((CPPE == One))
                        {
                            If (DerefOf (Arg0 [Zero]))
                            {
                                ADBG ("CPPM Forced Alignment Disable")
                                CPPM = Zero
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                            Else
                            {
                                ADBG ("CPPM Forced Alignment Enable")
                                CPPM = One
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Device (SAT0)
            {
                Name (_ADR, 0x00170000)  // _ADR: Address
                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ^^PPMC.ISAT = Zero
                    ADBG (Concatenate ("SATA PS0 LTR ignore bit status = ", ToHexString (^^PPMC.ISAT)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ^^PPMC.ISAT = One
                    ADBG (Concatenate ("SATA PS3 LTR ignore bit status = ", ToHexString (^^PPMC.ISAT)))
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "StorageD3Enable", 
                                    One
                                }
                            }
                        })
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((CondRefOf (SATC) && CondRefOf (SATD)))
                    {
                        If (SATC (Arg0))
                        {
                            Return (SATD (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x03)
                }

                Device (PRT0)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((SPPR & One))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (PRT1)
                {
                    Name (_ADR, 0x0001FFFF)  // _ADR: Address
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((SPPR & 0x02))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (PRT2)
                {
                    Name (_ADR, 0x0002FFFF)  // _ADR: Address
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((SPPR & 0x04))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (PRT3)
                {
                    Name (_ADR, 0x0003FFFF)  // _ADR: Address
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((SPPR & 0x08))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (PRT4)
                {
                    Name (_ADR, 0x0004FFFF)  // _ADR: Address
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((SPPR & 0x10))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (PRT5)
                {
                    Name (_ADR, 0x0005FFFF)  // _ADR: Address
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((SPPR & 0x20))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (PRT6)
                {
                    Name (_ADR, 0x0006FFFF)  // _ADR: Address
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((SPPR & 0x40))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (PRT7)
                {
                    Name (_ADR, 0x0007FFFF)  // _ADR: Address
                    Method (PRES, 0, NotSerialized)
                    {
                        If ((SPPR & 0x80))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }
            }

            Device (XHCI)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                Name (DUWS, Zero)
                Name (PU2C, Zero)
                Name (PU3C, Zero)
                Name (AHWA, One)
                Name (PPID, 0x4F)
                DUWS = \DUWS
                PU2C = ^PU2C /* \_SB_.PC02.PU2C */
                PU3C = ^PU3C /* \_SB_.PC02.PU3C */
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (DUWS))
                    {
                        Return (GPRW (0x6B, DUWS))
                    }
                    Else
                    {
                        Return (GPRW (0x6B, 0x04))
                    }
                }

                OperationRegion (XPRT, PCI_Config, Zero, 0x0100)
                Field (XPRT, AnyAcc, NoLock, Preserve)
                {
                    DVID,   16, 
                    Offset (0x10), 
                    XADR,   64, 
                    Offset (0xA2), 
                        ,   2, 
                    D3HE,   1
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    ADBG ("XHCI _DSM")
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("203b203b-1f13-409a-9aae-1a0347525584") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                If (CondRefOf (AHWA))
                                {
                                    Return ((AHWA && One))
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x03)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
                {
                    Return (0x03)
                }

                Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
                {
                    Return (0x03)
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x03)
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If (CondRefOf (^RHUB.INIR))
                    {
                        ^RHUB.INIR ()
                    }
                }

                Method (USRA, 1, Serialized)
                {
                    Return ((PU2C + Arg0))
                }

                Method (SSPA, 1, Serialized)
                {
                    Return ((PU2C + (0x02 + Arg0)))
                }

                Method (UPRU, 3, NotSerialized)
                {
                    ^^SBPC.PCAO (PPID, Arg0, Arg1, Arg2)
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG ("XHCI D0")
                    UPRU (Zero, 0xFFFFFFF7, Zero)
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (PS0X))
                    {
                        PS0X ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG ("XHCI D3")
                    UPRU (Zero, 0xFFFFFFFF, 0x08)
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (PS3X))
                    {
                        PS3X ()
                    }
                }

                Method (CUID, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Device (RHUB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        ADBG ("XHCI RHUB PS0")
                        If ((DVID == 0xFFFF))
                        {
                            Return (Zero)
                        }

                        If (CondRefOf (PS0X))
                        {
                            ADBG ("XHCI CSD0")
                            CSD0 (0x16)
                            PS0X ()
                        }
                    }

                    Method (_PS2, 0, Serialized)  // _PS2: Power State 2
                    {
                        ADBG ("XHCI RHUB PS2")
                        If ((DVID == 0xFFFF))
                        {
                            Return (Zero)
                        }

                        If (CondRefOf (PS2X))
                        {
                            PS2X ()
                            ADBG ("XHCI CSD3")
                            CSD3 (0x16)
                        }
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        ADBG ("XHCI RHUB PS3")
                        If ((DVID == 0xFFFF))
                        {
                            Return (Zero)
                        }

                        If (CondRefOf (PS3X))
                        {
                            PS3X ()
                            ADBG ("XHCI CSD3")
                            CSD3 (0x16)
                        }
                    }

                    If (CondRefOf (PU2C))
                    {
                        If ((One <= PU2C))
                        {
                            Device (HS01)
                            {
                                Name (_ADR, One)  // _ADR: Address
                            }
                        }

                        If ((0x02 <= PU2C))
                        {
                            Device (HS02)
                            {
                                Name (_ADR, 0x02)  // _ADR: Address
                            }
                        }

                        If ((0x03 <= PU2C))
                        {
                            Device (HS03)
                            {
                                Name (_ADR, 0x03)  // _ADR: Address
                                If ((CondRefOf (VTCM) && (VTCM == One)))
                                {
                                    If (((SXP1 == 0x03) || (SXP2 == 0x03)))
                                    {
                                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                        {
                                            0xFF, 
                                            0xFF, 
                                            Zero, 
                                            Zero
                                        })
                                        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                        {
                                            ToPLD (
                                                PLD_Revision           = 0x2,
                                                PLD_IgnoreColor        = 0x1,
                                                PLD_Red                = 0x0,
                                                PLD_Green              = 0x0,
                                                PLD_Blue               = 0x0,
                                                PLD_Width              = 0x0,
                                                PLD_Height             = 0x0,
                                                PLD_UserVisible        = 0x0,
                                                PLD_Dock               = 0x0,
                                                PLD_Lid                = 0x0,
                                                PLD_Panel              = "TOP",
                                                PLD_VerticalPosition   = "UPPER",
                                                PLD_HorizontalPosition = "LEFT",
                                                PLD_Shape              = "ROUND",
                                                PLD_GroupOrientation   = 0x0,
                                                PLD_GroupToken         = 0x1,
                                                PLD_GroupPosition      = 0x1,
                                                PLD_Bay                = 0x0,
                                                PLD_Ejectable          = 0x0,
                                                PLD_EjectRequired      = 0x0,
                                                PLD_CabinetNumber      = 0x0,
                                                PLD_CardCageNumber     = 0x0,
                                                PLD_Reference          = 0x0,
                                                PLD_Rotation           = 0x0,
                                                PLD_Order              = 0x0,
                                                PLD_VerticalOffset     = 0xFFFF,
                                                PLD_HorizontalOffset   = 0xFFFF)

                                        })
                                        Device (CIR)
                                        {
                                            Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                            {
                                                Return ((0x03 + SXI1))
                                            }

                                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                            {
                                                ToPLD (
                                                    PLD_Revision           = 0x2,
                                                    PLD_IgnoreColor        = 0x1,
                                                    PLD_Red                = 0x0,
                                                    PLD_Green              = 0x0,
                                                    PLD_Blue               = 0x0,
                                                    PLD_Width              = 0x0,
                                                    PLD_Height             = 0x0,
                                                    PLD_UserVisible        = 0x0,
                                                    PLD_Dock               = 0x0,
                                                    PLD_Lid                = 0x1,
                                                    PLD_Panel              = "FRONT",
                                                    PLD_VerticalPosition   = "UPPER",
                                                    PLD_HorizontalPosition = "CENTER",
                                                    PLD_Shape              = "ROUND",
                                                    PLD_GroupOrientation   = 0x0,
                                                    PLD_GroupToken         = 0x0,
                                                    PLD_GroupPosition      = 0x0,
                                                    PLD_Bay                = 0x0,
                                                    PLD_Ejectable          = 0x0,
                                                    PLD_EjectRequired      = 0x0,
                                                    PLD_CabinetNumber      = 0x0,
                                                    PLD_CardCageNumber     = 0x0,
                                                    PLD_Reference          = 0x0,
                                                    PLD_Rotation           = 0x0,
                                                    PLD_Order              = 0x0,
                                                    PLD_VerticalOffset     = 0xC8,
                                                    PLD_HorizontalOffset   = 0xA0)

                                            })
                                        }
                                    }
                                }
                            }
                        }

                        If ((0x04 <= PU2C))
                        {
                            Device (HS04)
                            {
                                Name (_ADR, 0x04)  // _ADR: Address
                            }
                        }

                        If ((0x05 <= PU2C))
                        {
                            Device (HS05)
                            {
                                Name (_ADR, 0x05)  // _ADR: Address
                                If ((CondRefOf (VTCM) && (VTCM == One)))
                                {
                                    If (((SXP1 == 0x05) || (SXP2 == 0x05)))
                                    {
                                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                        {
                                            0xFF, 
                                            0xFF, 
                                            Zero, 
                                            Zero
                                        })
                                        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                        {
                                            ToPLD (
                                                PLD_Revision           = 0x2,
                                                PLD_IgnoreColor        = 0x1,
                                                PLD_Red                = 0x0,
                                                PLD_Green              = 0x0,
                                                PLD_Blue               = 0x0,
                                                PLD_Width              = 0x0,
                                                PLD_Height             = 0x0,
                                                PLD_UserVisible        = 0x0,
                                                PLD_Dock               = 0x0,
                                                PLD_Lid                = 0x0,
                                                PLD_Panel              = "TOP",
                                                PLD_VerticalPosition   = "UPPER",
                                                PLD_HorizontalPosition = "LEFT",
                                                PLD_Shape              = "ROUND",
                                                PLD_GroupOrientation   = 0x0,
                                                PLD_GroupToken         = 0x1,
                                                PLD_GroupPosition      = 0x1,
                                                PLD_Bay                = 0x0,
                                                PLD_Ejectable          = 0x0,
                                                PLD_EjectRequired      = 0x0,
                                                PLD_CabinetNumber      = 0x0,
                                                PLD_CardCageNumber     = 0x0,
                                                PLD_Reference          = 0x0,
                                                PLD_Rotation           = 0x0,
                                                PLD_Order              = 0x0,
                                                PLD_VerticalOffset     = 0xFFFF,
                                                PLD_HorizontalOffset   = 0xFFFF)

                                        })
                                        Device (CIR)
                                        {
                                            Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                            {
                                                Return ((0x05 + SXI1))
                                            }

                                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                            {
                                                ToPLD (
                                                    PLD_Revision           = 0x2,
                                                    PLD_IgnoreColor        = 0x1,
                                                    PLD_Red                = 0x0,
                                                    PLD_Green              = 0x0,
                                                    PLD_Blue               = 0x0,
                                                    PLD_Width              = 0x0,
                                                    PLD_Height             = 0x0,
                                                    PLD_UserVisible        = 0x0,
                                                    PLD_Dock               = 0x0,
                                                    PLD_Lid                = 0x1,
                                                    PLD_Panel              = "FRONT",
                                                    PLD_VerticalPosition   = "UPPER",
                                                    PLD_HorizontalPosition = "CENTER",
                                                    PLD_Shape              = "ROUND",
                                                    PLD_GroupOrientation   = 0x0,
                                                    PLD_GroupToken         = 0x0,
                                                    PLD_GroupPosition      = 0x0,
                                                    PLD_Bay                = 0x0,
                                                    PLD_Ejectable          = 0x0,
                                                    PLD_EjectRequired      = 0x0,
                                                    PLD_CabinetNumber      = 0x0,
                                                    PLD_CardCageNumber     = 0x0,
                                                    PLD_Reference          = 0x0,
                                                    PLD_Rotation           = 0x0,
                                                    PLD_Order              = 0x0,
                                                    PLD_VerticalOffset     = 0xC8,
                                                    PLD_HorizontalOffset   = 0xA0)

                                            })
                                        }
                                    }
                                }
                            }
                        }

                        If ((0x06 <= PU2C))
                        {
                            Device (HS06)
                            {
                                Name (_ADR, 0x06)  // _ADR: Address
                            }
                        }

                        If ((0x07 <= PU2C))
                        {
                            Device (HS07)
                            {
                                Name (_ADR, 0x07)  // _ADR: Address
                            }
                        }

                        If ((0x08 <= PU2C))
                        {
                            Device (HS08)
                            {
                                Name (_ADR, 0x08)  // _ADR: Address
                            }
                        }

                        If ((0x09 <= PU2C))
                        {
                            Device (HS09)
                            {
                                Name (_ADR, 0x09)  // _ADR: Address
                            }
                        }

                        If ((0x0A <= PU2C))
                        {
                            Device (HS10)
                            {
                                Name (_ADR, 0x0A)  // _ADR: Address
                            }
                        }

                        If ((0x0B <= PU2C))
                        {
                            Device (HS11)
                            {
                                Name (_ADR, 0x0B)  // _ADR: Address
                            }
                        }

                        If ((0x0C <= PU2C))
                        {
                            Device (HS12)
                            {
                                Name (_ADR, 0x0C)  // _ADR: Address
                            }
                        }

                        If ((0x0D <= PU2C))
                        {
                            Device (HS13)
                            {
                                Name (_ADR, 0x0D)  // _ADR: Address
                            }
                        }

                        If ((0x0E <= PU2C))
                        {
                            Device (HS14)
                            {
                                Name (_ADR, 0x0E)  // _ADR: Address
                            }
                        }

                        Device (USR1)
                        {
                            Method (_ADR, 0, NotSerialized)  // _ADR: Address
                            {
                                Return (USRA (One))
                            }
                        }

                        Device (USR2)
                        {
                            Method (_ADR, 0, NotSerialized)  // _ADR: Address
                            {
                                Return (USRA (0x02))
                            }
                        }
                    }

                    If (CondRefOf (PU3C))
                    {
                        If ((One <= PU3C))
                        {
                            Device (SS01)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (SSPA (One))
                                }
                            }
                        }

                        If ((0x02 <= PU3C))
                        {
                            Device (SS02)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (SSPA (0x02))
                                }
                            }
                        }

                        If ((0x03 <= PU3C))
                        {
                            Device (SS03)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (SSPA (0x03))
                                }
                            }
                        }

                        If ((0x04 <= PU3C))
                        {
                            Device (SS04)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (SSPA (0x04))
                                }
                            }
                        }

                        If ((0x05 <= PU3C))
                        {
                            Device (SS05)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (SSPA (0x05))
                                }
                            }
                        }

                        If ((0x06 <= PU3C))
                        {
                            Device (SS06)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (SSPA (0x06))
                                }
                            }
                        }

                        If ((0x07 <= PU3C))
                        {
                            Device (SS07)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (SSPA (0x07))
                                }
                            }
                        }

                        If ((0x08 <= PU3C))
                        {
                            Device (SS08)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (SSPA (0x08))
                                }
                            }
                        }

                        If ((0x09 <= PU3C))
                        {
                            Device (SS09)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (SSPA (0x09))
                                }
                            }
                        }

                        If ((0x0A <= PU3C))
                        {
                            Device (SS10)
                            {
                                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                                {
                                    Return (SSPA (0x0A))
                                }
                            }
                        }
                    }
                }
            }

            Device (GLAN)
            {
                Name (_ADR, 0x001F0006)  // _ADR: Address
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x6B, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                }
            }

            Device (HDAS)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG ("HD-A Ctrlr D0")
                    S023 (Zero, One)
                    If (CondRefOf (\_SB.PC02.HDAS.PS0X))
                    {
                        PS0X ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG ("HD-A Ctrlr D3")
                    S023 (Zero, Zero)
                    If (CondRefOf (\_SB.PC02.HDAS.PS3X))
                    {
                        PS3X ()
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x6B, 0x04))
                }

                OperationRegion (HDAR, PCI_Config, Zero, 0x0100)
                Field (HDAR, WordAcc, NoLock, Preserve)
                {
                    VDID,   32
                }

                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                }

                Name (NBU0, ResourceTemplate ()
                {
                    QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadOnly,
                        0x0000000000000001, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y37, AddressRangeACPI, TypeStatic)
                })
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    ADBG ("HDAS _INI")
                    CreateQWordField (NBU0, \_SB.PC02.HDAS._Y37._MIN, NBA0)  // _MIN: Minimum Base Address
                    CreateQWordField (NBU0, \_SB.PC02.HDAS._Y37._MAX, NMA0)  // _MAX: Maximum Base Address
                    CreateQWordField (NBU0, \_SB.PC02.HDAS._Y37._LEN, NLE0)  // _LEN: Length
                    NBA0 = NHAA /* \_SB_.PC02.NHAA */
                    NMA0 = (NHAA + (NHLL - One))
                    NLE0 = NHLL /* \_SB_.PC02.NHLL */
                }

                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "nhlt-version", 
                            "1.8-0"
                        }
                    }
                })
                Device (IDA)
                {
                    Name (_ADR, 0x10000000)  // _ADR: Address
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        ADBG ("HDAS _DSM")
                        ADBG (Arg2)
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If ((Arg0 == ToUUID ("a69f886e-6ceb-4594-a41f-7b5dce24c553") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0xCF                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("_DSM Fun 1 NHLT")
                                    Switch (ToInteger (Arg3))
                                    {
                                        Case (Zero)
                                        {
                                            Return (NBU0) /* \_SB_.PC02.HDAS.NBU0 */
                                        }
                                        Default
                                        {
                                            Return (NBU0) /* \_SB_.PC02.HDAS.NBU0 */
                                        }

                                    }
                                }
                                Case (0x02)
                                {
                                    ADBG ("_DSM Fun 2 FMSK")
                                    Return (ADFM) /* \_SB_.PC02.ADFM */
                                }
                                Case (0x03)
                                {
                                    ADBG ("_DSM Fun 3 PPMS")
                                    If (CondRefOf (\_SB.PC02.HDAS.PPMS))
                                    {
                                        Return (PPMS (Arg3))
                                    }
                                    Else
                                    {
                                        ADBG ("PPMS not found")
                                    }

                                    Return (Zero)
                                }
                                Case (0x06)
                                {
                                    ADBG ("_DSM Fun 6 XCFG")
                                    Return (XTAL) /* \_SB_.PC02.XTAL */
                                }
                                Case (0x07)
                                {
                                    ADBG ("_DSM Fun 7 HDBO")
                                    ADBG (HDBO)
                                    Return (HDBO) /* \_SB_.PC02.HDBO */
                                }
                                Default
                                {
                                    ADBG ("_DSM Fun NOK")
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }

                        If (CondRefOf (HIWC))
                        {
                            If (HIWC (Arg0))
                            {
                                If (CondRefOf (HIDW))
                                {
                                    Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                                }
                            }
                        }

                        ADBG ("_DSM UUID NOK")
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }
            }

            Scope (HDAS.IDA)
            {
                Device (SNDW)
                {
                    Name (_ADR, 0x40000000)  // _ADR: Address
                    Name (_CID, Package (0x02)  // _CID: Compatible ID
                    {
                        "PRP00001", 
                        "PNP0A05" /* Generic Container Device */
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (QCFG, 3, NotSerialized)
                    {
                        DerefOf (DerefOf (Arg0 [One]) [Zero]) [One]
                             = Arg1
                        DerefOf (DerefOf (Arg0 [One]) [0x04]) [One]
                             = Arg2
                    }

                    Method (XCFG, 2, NotSerialized)
                    {
                        If ((Arg1 == 0x016E3600))
                        {
                            ADBG ("XTAL 24MHz")
                            Local0 = 0x016E3600
                            Local1 = 0x005B8D80
                            Local2 = 0x7D
                            Local3 = 0x02
                        }
                        ElseIf ((Arg1 == 0x0249F000))
                        {
                            ADBG ("XTAL 38.4MHz")
                            Local0 = 0x0249F000
                            Local1 = 0x00493E00
                            Local2 = 0x32
                            Local3 = 0x04
                        }
                        ElseIf ((Arg1 == 0x0124F800))
                        {
                            ADBG ("XTAL 19.2MHz")
                            Local0 = 0x0124F800
                            Local1 = 0x00493E00
                            Local2 = 0x32
                            Local3 = 0x04
                        }
                        Else
                        {
                            ADBG ("XTAL UNSUPPORTED")
                            Local0 = Zero
                            Local1 = Zero
                            Local2 = Zero
                            Local3 = Zero
                        }

                        DerefOf (DerefOf (Arg0 [One]) [One]) [One]
                             = Local0
                        DerefOf (DerefOf (DerefOf (Arg0 [One]) [0x07]
                            ) [One]) [Zero] = Local1
                        DerefOf (DerefOf (Arg0 [One]) [0x09]) [One]
                             = Local2
                        DerefOf (DerefOf (Arg0 [One]) [0x0A]) [One]
                             = Local3
                    }

                    Method (DCFG, 3, NotSerialized)
                    {
                        DerefOf (DerefOf (Arg0 [One]) [0x02]) [One]
                             = Arg1
                        DerefOf (DerefOf (Arg0 [One]) [0x03]) [One]
                             = Arg2
                    }

                    Method (SDWU, 1, NotSerialized)
                    {
                        DerefOf (DerefOf (_DSD [One]) [One]) [One]
                             = Arg0
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        ADBG ("SNDW _INI")
                        SDWU (SWMC)
                        QCFG (LNK0, SWQ0, ACS0)
                        QCFG (LNK1, SWQ1, ACS1)
                        QCFG (LNK2, SWQ2, ACS2)
                        QCFG (LNK3, SWQ3, ACS3)
                        XCFG (LNK0, XTAL)
                        XCFG (LNK1, XTAL)
                        XCFG (LNK2, XTAL)
                        XCFG (LNK3, XTAL)
                        DCFG (LNK0, DAI0, DOD0)
                        DCFG (LNK1, DAI1, DOD0)
                        DCFG (LNK2, DAI2, DOD0)
                        DCFG (LNK3, DAI3, DOD0)
                    }

                    Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "mipi-sdw-sw-interface-revision", 
                                0x00010000
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-master-count", 
                                0x04
                            }
                        }, 

                        ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                        Package (0x04)
                        {
                            Package (0x02)
                            {
                                "mipi-sdw-link-0-subproperties", 
                                "LNK0"
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-link-1-subproperties", 
                                "LNK1"
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-link-2-subproperties", 
                                "LNK2"
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-link-3-subproperties", 
                                "LNK3"
                            }
                        }
                    })
                    Name (LNK0, Package (0x02)
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x0D)
                        {
                            Package (0x02)
                            {
                                "intel-quirk-mask", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-ip-clock", 
                                0x0249F000
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-doais", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-dods", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "intel-autonomous-clock-stop", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-stop-mode0-supported", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-stop-mode1-supported", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-frequencies-supported", 
                                Package (0x01)
                                {
                                    0x00493E00
                                }
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-rate", 
                                0xBB80
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-row-size", 
                                0x32
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-col-size", 
                                0x04
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-dynamic-frame-shape", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-command-error-threshold", 
                                0x10
                            }
                        }
                    })
                    Name (LNK1, Package (0x02)
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x0D)
                        {
                            Package (0x02)
                            {
                                "intel-quirk-mask", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-ip-clock", 
                                0x0249F000
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-doais", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-dods", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "intel-autonomous-clock-stop", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-stop-mode0-supported", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-stop-mode1-supported", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-frequencies-supported", 
                                Package (0x01)
                                {
                                    0x00493E00
                                }
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-rate", 
                                0xBB80
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-row-size", 
                                0x32
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-col-size", 
                                0x04
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-dynamic-frame-shape", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-command-error-threshold", 
                                0x10
                            }
                        }
                    })
                    Name (LNK2, Package (0x02)
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x0D)
                        {
                            Package (0x02)
                            {
                                "intel-quirk-mask", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-ip-clock", 
                                0x0249F000
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-doais", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-dods", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "intel-autonomous-clock-stop", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-stop-mode0-supported", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-stop-mode1-supported", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-frequencies-supported", 
                                Package (0x01)
                                {
                                    0x00493E00
                                }
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-rate", 
                                0xBB80
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-row-size", 
                                0x32
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-col-size", 
                                0x04
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-dynamic-frame-shape", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-command-error-threshold", 
                                0x10
                            }
                        }
                    })
                    Name (LNK3, Package (0x02)
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x0D)
                        {
                            Package (0x02)
                            {
                                "intel-quirk-mask", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-ip-clock", 
                                0x0249F000
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-doais", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "intel-sdw-dods", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "intel-autonomous-clock-stop", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-stop-mode0-supported", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-stop-mode1-supported", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-clock-frequencies-supported", 
                                Package (0x01)
                                {
                                    0x00493E00
                                }
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-rate", 
                                0xBB80
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-row-size", 
                                0x32
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-default-frame-col-size", 
                                0x04
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-dynamic-frame-shape", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "mipi-sdw-command-error-threshold", 
                                0x10
                            }
                        }
                    })
                }

                If ((UAOE != Zero))
                {
                    Device (UAOL)
                    {
                        Name (_ADR, 0x50000000)  // _ADR: Address
                        Name (_CID, Package (0x02)  // _CID: Compatible ID
                        {
                            "PRP00001", 
                            "PNP0A05" /* Generic Container Device */
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0B)
                        }

                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            ADBG ("UAOL _DSM")
                            If ((Arg0 == ToUUID ("2e60aefc-1ba8-467a-b8cc-5727b98cecb7") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x03                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (CFAE (Arg3))
                                    }

                                }
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "uaol-ctrl-count", 
                                    0x02
                                }
                            }, 

                            ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "uaol-descriptor-0", 
                                    "UAO0"
                                }, 

                                Package (0x02)
                                {
                                    "uaol-descriptor-1", 
                                    "UAO1"
                                }
                            }
                        })
                        Name (UAO0, Package (0x02)
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x03)
                            {
                                Package (0x02)
                                {
                                    "uaol-instance-number", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "bdf-routing-enabled", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "peer-integrated-controller-identifier", 
                                    0x98ED
                                }
                            }
                        })
                        Name (UAO1, Package (0x02)
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            Package (0x03)
                            {
                                Package (0x02)
                                {
                                    "uaol-instance-number", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "bdf-routing-enabled", 
                                    Zero
                                }, 

                                Package (0x02)
                                {
                                    "peer-integrated-controller-identifier", 
                                    0xABCD
                                }
                            }
                        })
                    }
                }
            }

            Device (XDCI)
            {
                Name (_ADR, 0x00140001)  // _ADR: Address
                OperationRegion (OTGD, PCI_Config, Zero, 0x0100)
                Field (OTGD, DWordAcc, NoLock, Preserve)
                {
                    DVID,   16, 
                    Offset (0x10), 
                    XDCB,   64
                }

                Field (OTGD, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    D0I3,   2
                }

                Method (XDBA, 0, NotSerialized)
                {
                    Return ((XDCB & 0xFFFFFFFFFFFFFF00))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    ADBG ("XDCI DSM")
                    If ((Arg0 == ToUUID ("732b85d5-b7a7-4a1b-9ba0-4bbd00ffd511") /* Unknown UUID */))
                    {
                        If ((Arg1 == One))
                        {
                            Method (SPPS, 2, Serialized)
                            {
                                OperationRegion (XDBW, SystemMemory, XDBA (), 0x00110000)
                                Field (XDBW, WordAcc, NoLock, Preserve)
                                {
                                    Offset (0x10F810), 
                                    Offset (0x10F811), 
                                    U2CP,   2, 
                                    U3CP,   2, 
                                    Offset (0x10F818), 
                                    PUPS,   2, 
                                        ,   1, 
                                    PURC,   1, 
                                    Offset (0x10F81A), 
                                    Offset (0x10F81C), 
                                        ,   3, 
                                    UXPE,   2, 
                                    Offset (0x10F81E)
                                }

                                Local1 = Arg0
                                Local2 = Arg1
                                If ((Local1 == Zero))
                                {
                                    ADBG ("PMU D0")
                                    UXPE = Zero
                                    Local0 = Zero
                                    While ((Local0 < 0x0A))
                                    {
                                        Stall (0x64)
                                        Local0++
                                    }

                                    PUPS = Zero
                                    Local0 = Zero
                                    While ((Local0 < 0x07D0))
                                    {
                                        Stall (0x64)
                                        If (((U2CP == Zero) && (U3CP == Zero)))
                                        {
                                            Break
                                        }

                                        Local0++
                                    }

                                    If ((U2CP != Zero))
                                    {
                                        ADBG ("U2 not in D0")
                                    }

                                    If ((U3CP != Zero))
                                    {
                                        ADBG ("U3 not in D0")
                                    }

                                    Return (Zero)
                                }

                                If ((Local1 == 0x03))
                                {
                                    ADBG ("PMU D3")
                                    If ((U2CP != Zero))
                                    {
                                        ADBG ("U2 not in D0")
                                    }

                                    If ((U3CP != Zero))
                                    {
                                        ADBG ("U3 not in D0")
                                    }

                                    PUPS = 0x03
                                    Local0 = Zero
                                    While ((Local0 < 0x07D0))
                                    {
                                        Stall (0x64)
                                        If (((U2CP == 0x03) && (U3CP == 0x03)))
                                        {
                                            Break
                                        }

                                        Local0++
                                    }

                                    If ((U2CP != 0x03))
                                    {
                                        ADBG ("U2 not in D3")
                                    }

                                    If ((U3CP != 0x03))
                                    {
                                        ADBG ("U3 not in D3")
                                    }

                                    UXPE = Local2
                                    Return (Zero)
                                }

                                Return (Zero)
                            }

                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    ADBG ("XDCI Fn0")
                                    Return (Buffer (0x02)
                                    {
                                         0xB3, 0x03                                       // ..
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("XDCI Fn1")
                                    Return (One)
                                }
                                Case (0x04)
                                {
                                    ADBG ("XDCI Fn4")
                                    Local1 = DerefOf (Arg3 [Zero])
                                    ADBG (Local1)
                                    SPPS (Local1, Zero)
                                }
                                Case (0x05)
                                {
                                    ADBG ("XDCI Fn5")
                                    If (CondRefOf (XDAT))
                                    {
                                        If ((XDAT () == One))
                                        {
                                            ADBG ("USB Attach")
                                            Notify (^^^PC00.XDCI, 0x80) // Status Change
                                        }
                                        Else
                                        {
                                            ADBG ("USB Detach")
                                            Notify (^^^PC00.XDCI, 0x81) // Information Change
                                        }
                                    }

                                    Return (Zero)
                                }
                                Case (0x07)
                                {
                                    ADBG ("XDCI Fn7")
                                    OperationRegion (XD22, SystemMemory, XDBA (), 0x00110000)
                                    Field (XD22, WordAcc, NoLock, Preserve)
                                    {
                                        Offset (0x10F818), 
                                        P2PS,   2, 
                                        Offset (0x10F81A)
                                    }

                                    Local0 = P2PS /* \_SB_.PC02.XDCI._DSM.P2PS */
                                    Return (Local0)
                                }
                                Case (0x08)
                                {
                                    ADBG ("XDCI Fn8")
                                    Return (One)
                                }
                                Case (0x09)
                                {
                                    ADBG ("XDCI Fn9")
                                    OperationRegion (XGCT, SystemMemory, XDBA (), 0x00110000)
                                    Field (XGCT, WordAcc, NoLock, Preserve)
                                    {
                                        Offset (0xC110), 
                                        GCTL,   32
                                    }

                                    Local1 = (PPDS & 0xFFF80000)
                                    Local1 >>= 0x13
                                    ADBG (Concatenate ("PCH XDCI: Func9 Return Val = ", ToHexString (Local1)))
                                    Return (Local1)
                                }

                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Name (_DDN, "PCH XDCI controller")  // _DDN: DOS Device Name
                Name (_STR, Unicode ("PCH XDCI controller"))  // _STR: Description String
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x03)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (GP1E))
                    {
                        If ((GP1E != Zero))
                        {
                            Return (GPRW (0x8C, 0x04))
                        }
                    }

                    Return (GPRW (0x6D, 0x04))
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                }
            }

            Device (HECI)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    ADBG ("HECI _DSM")
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If (CondRefOf (HIWC))
                    {
                        If (HIWC (Arg0))
                        {
                            If (CondRefOf (HIDW))
                            {
                                Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Device (HEC3)
            {
                Name (_ADR, 0x00160004)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (SOD3, 3, Serialized)
            {
                OperationRegion (ICB1, SystemMemory, (^^PC00.GPCB () + Arg0), 0x88)
                If (Arg1)
                {
                    Field (ICB1, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x84), 
                        PMEC,   8
                    }

                    PMEC = 0x03
                    PMEC |= Zero
                }

                If ((Arg1 && Arg2))
                {
                    Field (ICB1, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x10), 
                        BAR0,   64
                    }

                    BAR0 = Zero
                }
            }

            Device (I2C0)
            {
                If ((IM00 == One))
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (IC00, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150000)
                }
            }

            Device (I2C1)
            {
                If ((IM01 == One))
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (IC01, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150001)
                }
            }

            Device (I2C2)
            {
                If ((IM02 == One))
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (IC02, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150002)
                }
            }

            Device (I2C3)
            {
                If ((IM03 == One))
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (IC03, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150003)
                }
            }

            Device (I2C4)
            {
                If ((IM04 == One))
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (IC04, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00190000)
                }
            }

            Device (I2C5)
            {
                If ((IM05 == One))
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (IC05, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00190001)
                }
            }

            Device (I3C0)
            {
                Name (_ADR, 0x00150004)  // _ADR: Address
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x03)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x6B, 0x04))
                }
            }

            Device (SPI0)
            {
                If ((SM00 == One))
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (SC00, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x001E0002)
                }
            }

            Device (SPI1)
            {
                If ((SM01 == One))
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (SC01, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x001E0003)
                }
            }

            Device (SPI2)
            {
                If ((SM02 == One))
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (SC02, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00120006)
                }
            }

            Device (SPI3)
            {
                If ((SM03 == One))
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (SC03, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }

                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00130000)
                }
            }

            Method (UDSM, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("f7af8347-a966-49fe-9022-7a9deeebdb27") /* Unknown UUID */))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (UDMA, 2, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x08)
                        {
                             0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        })
                    }
                    Case (One)
                    {
                        Return (ToInteger (Arg1))
                    }

                }

                Return (Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
            }

            Device (ISHD)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
            }
        }

        If ((\_SB.PC02.UM00 == One))
        {
            Scope (_SB.PC02)
            {
                Device (UA00)
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (UDSM (Arg0))
                        {
                            Return (UDMA (Arg2, UD00))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x001E0000)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (UC00, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }
            }
        }

        Scope (_SB)
        {
            If (((PC02.UM00 == 0x02) || (PC02.UM00 == 0x03)))
            {
                Device (PUA0)
                {
                    Name (_DDN, "MtlPchSerialIoUart0")  // _DDN: DOS Device Name
                    Name (_UID, "MtlPchSerialIoUart0")  // _UID: Unique ID
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return (UHID (^^PC02.UM00))
                    }

                    Method (UHID, 1, Serialized)
                    {
                        If ((Arg0 == 0x03))
                        {
                            Return (0x0105D041)
                        }

                        Return (0x020CD041)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (UARH (^^PC02.UC00, ^^PC02.UI00))
                    }

                    Method (UARH, 2, Serialized)
                    {
                        OperationRegion (UACF, SystemMemory, Arg0, 0x18)
                        Field (UACF, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x10), 
                            BAR0,   64
                        }

                        Name (BUF0, ResourceTemplate ()
                        {
                            Memory32Fixed (ReadWrite,
                                0x00000000,         // Address Base
                                0x00000008,         // Address Length
                                _Y38)
                        })
                        Name (IBUF, ResourceTemplate ()
                        {
                            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y39)
                            {
                                0x00000014,
                            }
                        })
                        CreateDWordField (BUF0, \_SB.PUA0.UARH._Y38._BAS, ADR0)  // _BAS: Base Address
                        CreateDWordField (IBUF, \_SB.PUA0.UARH._Y39._INT, IRQN)  // _INT: Interrupts
                        Local0 = (BAR0 & 0xFFFFFFFFFFFFF000)
                        ADR0 = Local0
                        IRQN = Arg1
                        ConcatenateResTemplate (BUF0, IBUF, Local1)
                        Return (Local1)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((^^PC02.UM00 == 0x03))
                        {
                            Return (0x0F)
                        }

                        Return (0x08)
                    }

                    Method (UPS3, 2, Serialized)
                    {
                        Name (REGS, Package (0x08)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        If ((Arg0 == One))
                        {
                            OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                            Field (UACF, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x10), 
                                BAR0,   64
                            }

                            Field (UACF, ByteAcc, NoLock, Preserve)
                            {
                                Offset (0x84), 
                                PMEC,   8
                            }

                            OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x85)
                            Field (UAB0, ByteAcc, Lock, Preserve)
                            {
                                DLL,    8, 
                                DLH,    8, 
                                FCR,    8, 
                                LCR,    8, 
                                MCR,    8, 
                                Offset (0x81), 
                                PPRR,   8
                            }

                            Field (UAB0, DWordAcc, NoLock, Preserve)
                            {
                                Offset (0x80), 
                                PCLK,   32
                            }

                            Local1 = LCR /* \_SB_.PUA0.UPS3.LCR_ */
                            LCR |= 0x80
                            REGS [Zero] = DLL /* \_SB_.PUA0.UPS3.DLL_ */
                            REGS [One] = DLH /* \_SB_.PUA0.UPS3.DLH_ */
                            LCR = Local1
                            REGS [0x02] = FCR /* \_SB_.PUA0.UPS3.FCR_ */
                            REGS [0x03] = Local1
                            REGS [0x04] = MCR /* \_SB_.PUA0.UPS3.MCR_ */
                            REGS [0x05] = PCLK /* \_SB_.PUA0.UPS3.PCLK */
                            If (((DerefOf (REGS [0x05]) != Zero) && (
                                DerefOf (REGS [0x05]) != 0xFFFFFFFF)))
                            {
                                URSA ((BAR0 & 0xFFFFFFFFFFFFF000), REGS)
                            }

                            PPRR = Zero
                            PPRR |= Zero
                            PMEC = 0x03
                            PMEC |= Zero
                        }
                    }

                    Method (UPS0, 2, Serialized)
                    {
                        If ((Arg0 == One))
                        {
                            OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                            Field (UACF, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x10), 
                                BAR0,   64
                            }

                            Field (UACF, ByteAcc, NoLock, Preserve)
                            {
                                Offset (0x84), 
                                PMEC,   8
                            }

                            OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x85)
                            Field (UAB0, ByteAcc, Lock, Preserve)
                            {
                                DLL,    8, 
                                DLH,    8, 
                                FCR,    8, 
                                LCR,    8, 
                                MCR,    8, 
                                Offset (0x81), 
                                PPRR,   8
                            }

                            Field (UAB0, DWordAcc, NoLock, Preserve)
                            {
                                Offset (0x80), 
                                PCLK,   32
                            }

                            PMEC = Zero
                            PMEC |= Zero
                            PPRR = 0x07
                            Local0 = URRS ((BAR0 & 0xFFFFFFFFFFFFF000))
                            If (((DerefOf (Local0 [0x05]) != Zero) && (
                                DerefOf (Local0 [0x05]) != 0xFFFFFFFF)))
                            {
                                LCR |= 0x80
                                DLL = DerefOf (Local0 [Zero])
                                DLH = DerefOf (Local0 [One])
                                LCR = DerefOf (Local0 [0x03])
                                FCR = DerefOf (Local0 [0x02])
                                MCR = DerefOf (Local0 [0x04])
                                Local2 = (DerefOf (Local0 [0x05]) | 0x80000001)
                                PCLK = Local2
                                Local2 = (DerefOf (Local0 [0x05]) | One)
                                PCLK = Local2
                            }
                        }
                    }

                    Method (UPSC, 1, Serialized)
                    {
                        OperationRegion (UACF, SystemMemory, (Arg0 + 0x84), 0x04)
                        Field (UACF, ByteAcc, NoLock, Preserve)
                        {
                            PMEC,   8
                        }

                        Return ((PMEC & 0x03))
                    }

                    If ((^PC02.UM00 == 0x03))
                    {
                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (UPSC (^^PC02.UC00))
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            UPS3 (^^PC02.UP00, ^^PC02.UC00)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            UPS0 (^^PC02.UP00, ^^PC02.UC00)
                        }
                    }
                }
            }
        }

        If ((\_SB.PC02.UM01 == One))
        {
            Scope (_SB.PC02)
            {
                Device (UA01)
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (UDSM (Arg0))
                        {
                            Return (UDMA (Arg2, UD01))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x001E0001)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (UC01, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }
            }
        }

        Scope (_SB)
        {
            If (((PC02.UM01 == 0x02) || (PC02.UM01 == 0x03)))
            {
                Device (PUA1)
                {
                    Name (_DDN, "MtlPchSerialIoUart1")  // _DDN: DOS Device Name
                    Name (_UID, "MtlPchSerialIoUart1")  // _UID: Unique ID
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return (UHID (^^PC02.UM01))
                    }

                    Method (UHID, 1, Serialized)
                    {
                        If ((Arg0 == 0x03))
                        {
                            Return (0x0105D041)
                        }

                        Return (0x020CD041)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (UARH (^^PC02.UC01, ^^PC02.UI01))
                    }

                    Method (UARH, 2, Serialized)
                    {
                        OperationRegion (UACF, SystemMemory, Arg0, 0x18)
                        Field (UACF, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x10), 
                            BAR0,   64
                        }

                        Name (BUF0, ResourceTemplate ()
                        {
                            Memory32Fixed (ReadWrite,
                                0x00000000,         // Address Base
                                0x00000008,         // Address Length
                                _Y3A)
                        })
                        Name (IBUF, ResourceTemplate ()
                        {
                            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y3B)
                            {
                                0x00000014,
                            }
                        })
                        CreateDWordField (BUF0, \_SB.PUA1.UARH._Y3A._BAS, ADR0)  // _BAS: Base Address
                        CreateDWordField (IBUF, \_SB.PUA1.UARH._Y3B._INT, IRQN)  // _INT: Interrupts
                        Local0 = (BAR0 & 0xFFFFFFFFFFFFF000)
                        ADR0 = Local0
                        IRQN = Arg1
                        ConcatenateResTemplate (BUF0, IBUF, Local1)
                        Return (Local1)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((^^PC02.UM01 == 0x03))
                        {
                            Return (0x0F)
                        }

                        Return (0x08)
                    }

                    Method (UPS3, 2, Serialized)
                    {
                        Name (REGS, Package (0x08)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        If ((Arg0 == One))
                        {
                            OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                            Field (UACF, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x10), 
                                BAR0,   64
                            }

                            Field (UACF, ByteAcc, NoLock, Preserve)
                            {
                                Offset (0x84), 
                                PMEC,   8
                            }

                            OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x85)
                            Field (UAB0, ByteAcc, Lock, Preserve)
                            {
                                DLL,    8, 
                                DLH,    8, 
                                FCR,    8, 
                                LCR,    8, 
                                MCR,    8, 
                                Offset (0x81), 
                                PPRR,   8
                            }

                            Field (UAB0, DWordAcc, NoLock, Preserve)
                            {
                                Offset (0x80), 
                                PCLK,   32
                            }

                            Local1 = LCR /* \_SB_.PUA1.UPS3.LCR_ */
                            LCR |= 0x80
                            REGS [Zero] = DLL /* \_SB_.PUA1.UPS3.DLL_ */
                            REGS [One] = DLH /* \_SB_.PUA1.UPS3.DLH_ */
                            LCR = Local1
                            REGS [0x02] = FCR /* \_SB_.PUA1.UPS3.FCR_ */
                            REGS [0x03] = Local1
                            REGS [0x04] = MCR /* \_SB_.PUA1.UPS3.MCR_ */
                            REGS [0x05] = PCLK /* \_SB_.PUA1.UPS3.PCLK */
                            If (((DerefOf (REGS [0x05]) != Zero) && (
                                DerefOf (REGS [0x05]) != 0xFFFFFFFF)))
                            {
                                URSA ((BAR0 & 0xFFFFFFFFFFFFF000), REGS)
                            }

                            PPRR = Zero
                            PPRR |= Zero
                            PMEC = 0x03
                            PMEC |= Zero
                        }
                    }

                    Method (UPS0, 2, Serialized)
                    {
                        If ((Arg0 == One))
                        {
                            OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                            Field (UACF, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x10), 
                                BAR0,   64
                            }

                            Field (UACF, ByteAcc, NoLock, Preserve)
                            {
                                Offset (0x84), 
                                PMEC,   8
                            }

                            OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x85)
                            Field (UAB0, ByteAcc, Lock, Preserve)
                            {
                                DLL,    8, 
                                DLH,    8, 
                                FCR,    8, 
                                LCR,    8, 
                                MCR,    8, 
                                Offset (0x81), 
                                PPRR,   8
                            }

                            Field (UAB0, DWordAcc, NoLock, Preserve)
                            {
                                Offset (0x80), 
                                PCLK,   32
                            }

                            PMEC = Zero
                            PMEC |= Zero
                            PPRR = 0x07
                            Local0 = URRS ((BAR0 & 0xFFFFFFFFFFFFF000))
                            If (((DerefOf (Local0 [0x05]) != Zero) && (
                                DerefOf (Local0 [0x05]) != 0xFFFFFFFF)))
                            {
                                LCR |= 0x80
                                DLL = DerefOf (Local0 [Zero])
                                DLH = DerefOf (Local0 [One])
                                LCR = DerefOf (Local0 [0x03])
                                FCR = DerefOf (Local0 [0x02])
                                MCR = DerefOf (Local0 [0x04])
                                Local2 = (DerefOf (Local0 [0x05]) | 0x80000001)
                                PCLK = Local2
                                Local2 = (DerefOf (Local0 [0x05]) | One)
                                PCLK = Local2
                            }
                        }
                    }

                    Method (UPSC, 1, Serialized)
                    {
                        OperationRegion (UACF, SystemMemory, (Arg0 + 0x84), 0x04)
                        Field (UACF, ByteAcc, NoLock, Preserve)
                        {
                            PMEC,   8
                        }

                        Return ((PMEC & 0x03))
                    }

                    If ((^PC02.UM01 == 0x03))
                    {
                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (UPSC (^^PC02.UC01))
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            UPS3 (^^PC02.UP01, ^^PC02.UC01)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            UPS0 (^^PC02.UP01, ^^PC02.UC01)
                        }
                    }
                }
            }
        }

        If ((\_SB.PC02.UM02 == One))
        {
            Scope (_SB.PC02)
            {
                Device (UA02)
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (UDSM (Arg0))
                        {
                            Return (UDMA (Arg2, UD02))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00190002)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (UC02, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }
            }
        }

        Scope (_SB)
        {
            If (((PC02.UM02 == 0x02) || (PC02.UM02 == 0x03)))
            {
                Device (PUA2)
                {
                    Name (_DDN, "MtlPchSerialIoUart2")  // _DDN: DOS Device Name
                    Name (_UID, "MtlPchSerialIoUart2")  // _UID: Unique ID
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return (UHID (^^PC02.UM02))
                    }

                    Method (UHID, 1, Serialized)
                    {
                        If ((Arg0 == 0x03))
                        {
                            Return (0x0105D041)
                        }

                        Return (0x020CD041)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (UARH (^^PC02.UC02, ^^PC02.UI02))
                    }

                    Method (UARH, 2, Serialized)
                    {
                        OperationRegion (UACF, SystemMemory, Arg0, 0x18)
                        Field (UACF, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x10), 
                            BAR0,   64
                        }

                        Name (BUF0, ResourceTemplate ()
                        {
                            Memory32Fixed (ReadWrite,
                                0x00000000,         // Address Base
                                0x00000008,         // Address Length
                                _Y3C)
                        })
                        Name (IBUF, ResourceTemplate ()
                        {
                            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y3D)
                            {
                                0x00000014,
                            }
                        })
                        CreateDWordField (BUF0, \_SB.PUA2.UARH._Y3C._BAS, ADR0)  // _BAS: Base Address
                        CreateDWordField (IBUF, \_SB.PUA2.UARH._Y3D._INT, IRQN)  // _INT: Interrupts
                        Local0 = (BAR0 & 0xFFFFFFFFFFFFF000)
                        ADR0 = Local0
                        IRQN = Arg1
                        ConcatenateResTemplate (BUF0, IBUF, Local1)
                        Return (Local1)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((^^PC02.UM02 == 0x03))
                        {
                            Return (0x0F)
                        }

                        Return (0x08)
                    }

                    Method (UPS3, 2, Serialized)
                    {
                        Name (REGS, Package (0x08)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        If ((Arg0 == One))
                        {
                            OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                            Field (UACF, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x10), 
                                BAR0,   64
                            }

                            Field (UACF, ByteAcc, NoLock, Preserve)
                            {
                                Offset (0x84), 
                                PMEC,   8
                            }

                            OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x85)
                            Field (UAB0, ByteAcc, Lock, Preserve)
                            {
                                DLL,    8, 
                                DLH,    8, 
                                FCR,    8, 
                                LCR,    8, 
                                MCR,    8, 
                                Offset (0x81), 
                                PPRR,   8
                            }

                            Field (UAB0, DWordAcc, NoLock, Preserve)
                            {
                                Offset (0x80), 
                                PCLK,   32
                            }

                            Local1 = LCR /* \_SB_.PUA2.UPS3.LCR_ */
                            LCR |= 0x80
                            REGS [Zero] = DLL /* \_SB_.PUA2.UPS3.DLL_ */
                            REGS [One] = DLH /* \_SB_.PUA2.UPS3.DLH_ */
                            LCR = Local1
                            REGS [0x02] = FCR /* \_SB_.PUA2.UPS3.FCR_ */
                            REGS [0x03] = Local1
                            REGS [0x04] = MCR /* \_SB_.PUA2.UPS3.MCR_ */
                            REGS [0x05] = PCLK /* \_SB_.PUA2.UPS3.PCLK */
                            If (((DerefOf (REGS [0x05]) != Zero) && (
                                DerefOf (REGS [0x05]) != 0xFFFFFFFF)))
                            {
                                URSA ((BAR0 & 0xFFFFFFFFFFFFF000), REGS)
                            }

                            PPRR = Zero
                            PPRR |= Zero
                            PMEC = 0x03
                            PMEC |= Zero
                        }
                    }

                    Method (UPS0, 2, Serialized)
                    {
                        If ((Arg0 == One))
                        {
                            OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                            Field (UACF, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x10), 
                                BAR0,   64
                            }

                            Field (UACF, ByteAcc, NoLock, Preserve)
                            {
                                Offset (0x84), 
                                PMEC,   8
                            }

                            OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x85)
                            Field (UAB0, ByteAcc, Lock, Preserve)
                            {
                                DLL,    8, 
                                DLH,    8, 
                                FCR,    8, 
                                LCR,    8, 
                                MCR,    8, 
                                Offset (0x81), 
                                PPRR,   8
                            }

                            Field (UAB0, DWordAcc, NoLock, Preserve)
                            {
                                Offset (0x80), 
                                PCLK,   32
                            }

                            PMEC = Zero
                            PMEC |= Zero
                            PPRR = 0x07
                            Local0 = URRS ((BAR0 & 0xFFFFFFFFFFFFF000))
                            If (((DerefOf (Local0 [0x05]) != Zero) && (
                                DerefOf (Local0 [0x05]) != 0xFFFFFFFF)))
                            {
                                LCR |= 0x80
                                DLL = DerefOf (Local0 [Zero])
                                DLH = DerefOf (Local0 [One])
                                LCR = DerefOf (Local0 [0x03])
                                FCR = DerefOf (Local0 [0x02])
                                MCR = DerefOf (Local0 [0x04])
                                Local2 = (DerefOf (Local0 [0x05]) | 0x80000001)
                                PCLK = Local2
                                Local2 = (DerefOf (Local0 [0x05]) | One)
                                PCLK = Local2
                            }
                        }
                    }

                    Method (UPSC, 1, Serialized)
                    {
                        OperationRegion (UACF, SystemMemory, (Arg0 + 0x84), 0x04)
                        Field (UACF, ByteAcc, NoLock, Preserve)
                        {
                            PMEC,   8
                        }

                        Return ((PMEC & 0x03))
                    }

                    If ((^PC02.UM02 == 0x03))
                    {
                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (UPSC (^^PC02.UC02))
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            UPS3 (^^PC02.UP02, ^^PC02.UC02)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            UPS0 (^^PC02.UP02, ^^PC02.UC02)
                        }
                    }
                }
            }
        }

        If ((\_SB.PC02.UM03 == One))
        {
            Scope (_SB.PC02)
            {
                Device (UA03)
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (UDSM (Arg0))
                        {
                            Return (UDMA (Arg2, UD03))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00130001)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        SOD3 (UC03, One, One)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }
                }
            }
        }

        Scope (_SB)
        {
            If (((PC02.UM03 == 0x02) || (PC02.UM03 == 0x03)))
            {
                Device (PUA3)
                {
                    Name (_DDN, "MtlPchSerialIoUart3")  // _DDN: DOS Device Name
                    Name (_UID, "MtlPchSerialIoUart3")  // _UID: Unique ID
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return (UHID (^^PC02.UM03))
                    }

                    Method (UHID, 1, Serialized)
                    {
                        If ((Arg0 == 0x03))
                        {
                            Return (0x0105D041)
                        }

                        Return (0x020CD041)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (UARH (^^PC02.UC03, ^^PC02.UI03))
                    }

                    Method (UARH, 2, Serialized)
                    {
                        OperationRegion (UACF, SystemMemory, Arg0, 0x18)
                        Field (UACF, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x10), 
                            BAR0,   64
                        }

                        Name (BUF0, ResourceTemplate ()
                        {
                            Memory32Fixed (ReadWrite,
                                0x00000000,         // Address Base
                                0x00000008,         // Address Length
                                _Y3E)
                        })
                        Name (IBUF, ResourceTemplate ()
                        {
                            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y3F)
                            {
                                0x00000014,
                            }
                        })
                        CreateDWordField (BUF0, \_SB.PUA3.UARH._Y3E._BAS, ADR0)  // _BAS: Base Address
                        CreateDWordField (IBUF, \_SB.PUA3.UARH._Y3F._INT, IRQN)  // _INT: Interrupts
                        Local0 = (BAR0 & 0xFFFFFFFFFFFFF000)
                        ADR0 = Local0
                        IRQN = Arg1
                        ConcatenateResTemplate (BUF0, IBUF, Local1)
                        Return (Local1)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((^^PC02.UM03 == 0x03))
                        {
                            Return (0x0F)
                        }

                        Return (0x08)
                    }

                    Method (UPS3, 2, Serialized)
                    {
                        Name (REGS, Package (0x08)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        If ((Arg0 == One))
                        {
                            OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                            Field (UACF, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x10), 
                                BAR0,   64
                            }

                            Field (UACF, ByteAcc, NoLock, Preserve)
                            {
                                Offset (0x84), 
                                PMEC,   8
                            }

                            OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x85)
                            Field (UAB0, ByteAcc, Lock, Preserve)
                            {
                                DLL,    8, 
                                DLH,    8, 
                                FCR,    8, 
                                LCR,    8, 
                                MCR,    8, 
                                Offset (0x81), 
                                PPRR,   8
                            }

                            Field (UAB0, DWordAcc, NoLock, Preserve)
                            {
                                Offset (0x80), 
                                PCLK,   32
                            }

                            Local1 = LCR /* \_SB_.PUA3.UPS3.LCR_ */
                            LCR |= 0x80
                            REGS [Zero] = DLL /* \_SB_.PUA3.UPS3.DLL_ */
                            REGS [One] = DLH /* \_SB_.PUA3.UPS3.DLH_ */
                            LCR = Local1
                            REGS [0x02] = FCR /* \_SB_.PUA3.UPS3.FCR_ */
                            REGS [0x03] = Local1
                            REGS [0x04] = MCR /* \_SB_.PUA3.UPS3.MCR_ */
                            REGS [0x05] = PCLK /* \_SB_.PUA3.UPS3.PCLK */
                            If (((DerefOf (REGS [0x05]) != Zero) && (
                                DerefOf (REGS [0x05]) != 0xFFFFFFFF)))
                            {
                                URSA ((BAR0 & 0xFFFFFFFFFFFFF000), REGS)
                            }

                            PPRR = Zero
                            PPRR |= Zero
                            PMEC = 0x03
                            PMEC |= Zero
                        }
                    }

                    Method (UPS0, 2, Serialized)
                    {
                        If ((Arg0 == One))
                        {
                            OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                            Field (UACF, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x10), 
                                BAR0,   64
                            }

                            Field (UACF, ByteAcc, NoLock, Preserve)
                            {
                                Offset (0x84), 
                                PMEC,   8
                            }

                            OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x85)
                            Field (UAB0, ByteAcc, Lock, Preserve)
                            {
                                DLL,    8, 
                                DLH,    8, 
                                FCR,    8, 
                                LCR,    8, 
                                MCR,    8, 
                                Offset (0x81), 
                                PPRR,   8
                            }

                            Field (UAB0, DWordAcc, NoLock, Preserve)
                            {
                                Offset (0x80), 
                                PCLK,   32
                            }

                            PMEC = Zero
                            PMEC |= Zero
                            PPRR = 0x07
                            Local0 = URRS ((BAR0 & 0xFFFFFFFFFFFFF000))
                            If (((DerefOf (Local0 [0x05]) != Zero) && (
                                DerefOf (Local0 [0x05]) != 0xFFFFFFFF)))
                            {
                                LCR |= 0x80
                                DLL = DerefOf (Local0 [Zero])
                                DLH = DerefOf (Local0 [One])
                                LCR = DerefOf (Local0 [0x03])
                                FCR = DerefOf (Local0 [0x02])
                                MCR = DerefOf (Local0 [0x04])
                                Local2 = (DerefOf (Local0 [0x05]) | 0x80000001)
                                PCLK = Local2
                                Local2 = (DerefOf (Local0 [0x05]) | One)
                                PCLK = Local2
                            }
                        }
                    }

                    Method (UPSC, 1, Serialized)
                    {
                        OperationRegion (UACF, SystemMemory, (Arg0 + 0x84), 0x04)
                        Field (UACF, ByteAcc, NoLock, Preserve)
                        {
                            PMEC,   8
                        }

                        Return ((PMEC & 0x03))
                    }

                    If ((^PC02.UM03 == 0x03))
                    {
                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (UPSC (^^PC02.UC03))
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            UPS3 (^^PC02.UP03, ^^PC02.UC03)
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            UPS0 (^^PC02.UP03, ^^PC02.UC03)
                        }
                    }
                }
            }
        }

        Scope (_SB.PC02)
        {
            If ((CRFP == One))
            {
                If ((CWFC == One))
                {
                    Device (CNVW)
                    {
                        Name (_ADR, 0x00140003)  // _ADR: Address
                        Name (PU2C, Zero)
                        PU2C = ^PU2C /* \_SB_.PC02.PU2C */
                        Method (BASE, 0, NotSerialized)
                        {
                            Local0 = ^^^PC00.PC2M (_ADR, PBSB)
                            Return (Local0)
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            ADBG ("CNVW Ctrlr D0")
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            ADBG ("CNVW Ctrlr D3")
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            Return (GPRW (0x6B, 0x04))
                        }

                        Name (RSTT, Zero)
                        Name (PRRS, Zero)
                        OperationRegion (CWAR, SystemMemory, BASE (), 0x0100)
                        Field (CWAR, WordAcc, NoLock, Preserve)
                        {
                            VDID,   32, 
                            Offset (0x44), 
                                ,   28, 
                            WFLR,   1, 
                            Offset (0x48), 
                                ,   15, 
                            WIFR,   1
                        }

                        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                        {
                            Return (0x03)
                        }

                        Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                        {
                        }

                        PowerResource (WRST, 0x05, 0x0000)
                        {
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (One)
                            }

                            Method (_ON, 0, NotSerialized)  // _ON_: Power On
                            {
                            }

                            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                            {
                            }

                            Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                            {
                                Local0 = Acquire (CNMT, 0x03E8)
                                If ((Local0 == Zero))
                                {
                                    CFLR ()
                                    PRRS = One
                                    If ((CondRefOf (RSTT) && (RSTT == One)))
                                    {
                                        ADBG ("WiFi Product Reset")
                                        ADBG (Concatenate ("PID of CNVi = ", ToHexString (PCNV)))
                                        Local5 = ^^^SBPC.PCRR (PCNV, 0x44)
                                        ADBG (Concatenate ("Register PLDB Value = ", ToHexString (Local5)))
                                        If (((^^^SBPC.PCRR (PCNV, 0x44) & 0x02) == Zero))
                                        {
                                            ADBG ("ABORT_REQUEST = 0, previous PLDR completed")
                                            If ((GBTR () == One))
                                            {
                                                BTRK (Zero)
                                                Sleep (0xA0)
                                                Local2 = One
                                            }

                                            ^^^SBPC.PCRO (PCNV, 0x44, 0x03)
                                            Sleep (0x0A)
                                            Local1 = ^^^SBPC.PCRR (PCNV, 0x44)
                                            ADBG (Concatenate ("CNVI_PLDR_ABORT = ", ToHexString (Local1)))
                                            If ((((Local1 & 0x02) == Zero) && (Local1 & 0x04)))
                                            {
                                                ADBG ("WiFi Product Reset Completed")
                                                PRRS = 0x02
                                                If ((Local2 == One))
                                                {
                                                    BTRK (One)
                                                    Sleep (0xA0)
                                                }
                                            }
                                            Else
                                            {
                                                PRRS = 0x04
                                                BTRK (One)
                                            }
                                        }
                                        Else
                                        {
                                            PRRS = 0x03
                                        }
                                    }

                                    ADBG (Concatenate ("WiFi PRRS = ", PRRS))
                                    Release (CNMT)
                                }
                            }
                        }

                        Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                        {
                            WRST
                        })
                        Method (CFLR, 0, NotSerialized)
                        {
                            ADBG (Concatenate ("WiFi Core Reset, WFLR = ", WFLR))
                            If ((WFLR == One))
                            {
                                WIFR = One
                            }
                        }
                    }
                }
            }
        }

        Scope (_SB.PC02)
        {
            Method (TINT, 1, Serialized)
            {
                Name (TINR, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                        "\\_SB.PGPI", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                CreateWordField (TINR, 0x17, INT1)
                INT1 = ^^PGPI.GNUM (Arg0)
                Return (TINR) /* \_SB_.PC02.TINT.TINR */
            }

            Device (THC0)
            {
                Name (_ADR, 0x00100000)  // _ADR: Address
                Name (RSTL, Zero)
                OperationRegion (THCR, PCI_Config, Zero, 0x0100)
                Field (THCR, ByteAcc, NoLock, Preserve)
                {
                    VDID,   32
                }

                If ((VDID != 0xFFFFFFFF))
                {
                    Name (ICRS, Buffer (0x0C){})
                    CreateWordField (ICRS, Zero, DADR)
                    CreateQWordField (ICRS, 0x02, DSPD)
                    CreateByteField (ICRS, 0x0A, DADM)
                    Name (ISUB, Buffer (0x91){})
                    CreateQWordField (ISUB, Zero, SMHX)
                    CreateQWordField (ISUB, 0x08, SMLX)
                    CreateQWordField (ISUB, 0x10, SMTD)
                    CreateQWordField (ISUB, 0x18, SMRD)
                    CreateQWordField (ISUB, 0x20, FMHX)
                    CreateQWordField (ISUB, 0x28, FMLX)
                    CreateQWordField (ISUB, 0x30, FMTD)
                    CreateQWordField (ISUB, 0x38, FMRD)
                    CreateQWordField (ISUB, 0x40, FMSL)
                    CreateQWordField (ISUB, 0x48, FPHX)
                    CreateQWordField (ISUB, 0x50, FPLX)
                    CreateQWordField (ISUB, 0x58, FPTD)
                    CreateQWordField (ISUB, 0x60, FPRD)
                    CreateQWordField (ISUB, 0x68, HMHX)
                    CreateQWordField (ISUB, 0x70, HMLX)
                    CreateQWordField (ISUB, 0x78, HMTD)
                    CreateQWordField (ISUB, 0x80, HMRD)
                    CreateQWordField (ISUB, 0x88, HMSL)
                    DADR = Zero
                    DSPD = Zero
                    DADM = Zero
                    SMHX = Zero
                    SMLX = Zero
                    SMTD = Zero
                    SMRD = Zero
                    FMHX = Zero
                    FMLX = Zero
                    FMTD = Zero
                    FMRD = Zero
                    FMSL = Zero
                    FPHX = Zero
                    FPLX = Zero
                    FPTD = Zero
                    FPRD = Zero
                    HMHX = Zero
                    HMLX = Zero
                    HMTD = Zero
                    HMRD = Zero
                    HMSL = Zero
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If ((TMD0 == One))
                        {
                            If ((Arg0 == ToUUID ("6e2ac436-0fcf-41af-a265-b32a220dcfab") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Switch (ToInteger (Arg1))
                                        {
                                            Case (0x02)
                                            {
                                                Return (Buffer (One)
                                                {
                                                     0x7F                                             // .
                                                })
                                            }
                                            Default
                                            {
                                                Return (Buffer (One)
                                                {
                                                     0x00                                             // .
                                                })
                                            }

                                        }
                                    }
                                    Case (One)
                                    {
                                        ADBG ("THC THC_INPUT_REPORT_HEADER_ADDRESS")
                                        Return (ToInteger (T040))
                                    }
                                    Case (0x02)
                                    {
                                        ADBG ("THC THC_INPUT_REPORT_BODY_ADDRESS")
                                        Return (ToInteger (T050))
                                    }
                                    Case (0x03)
                                    {
                                        ADBG ("THC THC_OUTPUT_REPORT_ADDRESS")
                                        Return (ToInteger (T060))
                                    }
                                    Case (0x04)
                                    {
                                        ADBG ("THC THC_READ_OPCODE")
                                        Name (BUF4, Buffer (One){})
                                        Local0 = ToBuffer (T070)
                                        BUF4 [Zero] = DerefOf (Local0 [Zero])
                                        Return (BUF4) /* \_SB_.PC02.THC0._DSM.BUF4 */
                                    }
                                    Case (0x05)
                                    {
                                        ADBG ("THC THC_WRITE_OPCODE")
                                        Name (BUF5, Buffer (One){})
                                        Local1 = ToBuffer (T080)
                                        BUF5 [Zero] = DerefOf (Local1 [Zero])
                                        Return (BUF5) /* \_SB_.PC02.THC0._DSM.BUF5 */
                                    }
                                    Case (0x06)
                                    {
                                        ADBG ("THC THC_FLAGS")
                                        Return (ToInteger (T090))
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }

                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }

                            If ((Arg0 == ToUUID ("300d35b7-ac20-413e-8e9c-92e4dafd0afe") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x07                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        ADBG ("THC THC_CONNECTION_SPEED")
                                        Return (ToInteger (T030))
                                    }
                                    Case (0x02)
                                    {
                                        ADBG ("THC THC_LIMIT_PACKET_SIZE")
                                        Return (ToInteger (T0C0))
                                    }
                                    Case (0x03)
                                    {
                                        ADBG ("THC THC_PERFORMANCE_LIMITATION")
                                        Return (ToInteger (T0D0))
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }
                        }

                        If ((Arg0 == ToUUID ("84005682-5b71-41a4-8d66-8130f787a138") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("THC THC_ACTIVE_LTR")
                                    Return (ToInteger (T0A0))
                                }
                                Case (0x02)
                                {
                                    ADBG ("THC THC_IDLE_LTR")
                                    Return (ToInteger (T0B0))
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }

                        If ((Arg0 == ToUUID ("9b1e77c4-53db-43bd-a276-f7287604d1bd") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x01                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("THC THC_DISPLAY_FRAME_SYNC_PERIOD")
                                    Return (ToInteger (T0E0))
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }

                        If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x01                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("THC THC_HIDI2C_DEVICE_ADDRESS")
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }

                        Return (Buffer (Zero){})
                    }

                    If ((TIN0 != Zero))
                    {
                        Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Return (TINT (TIN0))
                        }
                    }

                    If ((TMD0 != Zero))
                    {
                        Method (_INI, 0, NotSerialized)  // _INI: Initialize
                        {
                            ADBG ("THC _INI")
                            ^^^PGPI.SHPO (T010, One)
                            ^^^PGPI.SPMV (T010, Zero)
                            ^^^PGPI.SPC0 (T010, (0x42000200 | (~(T020 & One) & One
                                )))
                            If (CondRefOf (^CINI))
                            {
                                CINI (T010, T0F0)
                            }
                        }

                        Method (_RST, 0, Serialized)  // _RST: Device Reset
                        {
                            ADBG ("THC _RST")
                            While ((RSTL == One))
                            {
                                Sleep (0x0A)
                            }

                            RSTL = One
                            ^^^PGPI.SGOV (T010, (T020 & One))
                            Sleep (T0F0)
                            ^^^PGPI.SGOV (T010, (~(T020 & One) & One))
                            RSTL = Zero
                        }

                        Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            ICRS, 
                            ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                            ISUB
                        })
                    }
                }
            }

            Device (THC1)
            {
                Name (_ADR, 0x00100001)  // _ADR: Address
                Name (RSTL, Zero)
                OperationRegion (THCR, PCI_Config, Zero, 0x0100)
                Field (THCR, ByteAcc, NoLock, Preserve)
                {
                    VDID,   32
                }

                If ((VDID != 0xFFFFFFFF))
                {
                    Name (ICRS, Buffer (0x0C){})
                    CreateWordField (ICRS, Zero, DADR)
                    CreateQWordField (ICRS, 0x02, DSPD)
                    CreateByteField (ICRS, 0x0A, DADM)
                    Name (ISUB, Buffer (0x91){})
                    CreateQWordField (ISUB, Zero, SMHX)
                    CreateQWordField (ISUB, 0x08, SMLX)
                    CreateQWordField (ISUB, 0x10, SMTD)
                    CreateQWordField (ISUB, 0x18, SMRD)
                    CreateQWordField (ISUB, 0x20, FMHX)
                    CreateQWordField (ISUB, 0x28, FMLX)
                    CreateQWordField (ISUB, 0x30, FMTD)
                    CreateQWordField (ISUB, 0x38, FMRD)
                    CreateQWordField (ISUB, 0x40, FMSL)
                    CreateQWordField (ISUB, 0x48, FPHX)
                    CreateQWordField (ISUB, 0x50, FPLX)
                    CreateQWordField (ISUB, 0x58, FPTD)
                    CreateQWordField (ISUB, 0x60, FPRD)
                    CreateQWordField (ISUB, 0x68, HMHX)
                    CreateQWordField (ISUB, 0x70, HMLX)
                    CreateQWordField (ISUB, 0x78, HMTD)
                    CreateQWordField (ISUB, 0x80, HMRD)
                    CreateQWordField (ISUB, 0x88, HMSL)
                    DADR = Zero
                    DSPD = Zero
                    DADM = Zero
                    SMHX = Zero
                    SMLX = Zero
                    SMTD = Zero
                    SMRD = Zero
                    FMHX = Zero
                    FMLX = Zero
                    FMTD = Zero
                    FMRD = Zero
                    FMSL = Zero
                    FPHX = Zero
                    FPLX = Zero
                    FPTD = Zero
                    FPRD = Zero
                    HMHX = Zero
                    HMLX = Zero
                    HMTD = Zero
                    HMRD = Zero
                    HMSL = Zero
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        If ((TMD1 == One))
                        {
                            If ((Arg0 == ToUUID ("6e2ac436-0fcf-41af-a265-b32a220dcfab") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Switch (ToInteger (Arg1))
                                        {
                                            Case (0x02)
                                            {
                                                Return (Buffer (One)
                                                {
                                                     0x7F                                             // .
                                                })
                                            }
                                            Default
                                            {
                                                Return (Buffer (One)
                                                {
                                                     0x00                                             // .
                                                })
                                            }

                                        }
                                    }
                                    Case (One)
                                    {
                                        ADBG ("THC THC_INPUT_REPORT_HEADER_ADDRESS")
                                        Return (ToInteger (T041))
                                    }
                                    Case (0x02)
                                    {
                                        ADBG ("THC THC_INPUT_REPORT_BODY_ADDRESS")
                                        Return (ToInteger (T051))
                                    }
                                    Case (0x03)
                                    {
                                        ADBG ("THC THC_OUTPUT_REPORT_ADDRESS")
                                        Return (ToInteger (T061))
                                    }
                                    Case (0x04)
                                    {
                                        ADBG ("THC THC_READ_OPCODE")
                                        Name (BUF4, Buffer (One){})
                                        Local0 = ToBuffer (T071)
                                        BUF4 [Zero] = DerefOf (Local0 [Zero])
                                        Return (BUF4) /* \_SB_.PC02.THC1._DSM.BUF4 */
                                    }
                                    Case (0x05)
                                    {
                                        ADBG ("THC THC_WRITE_OPCODE")
                                        Name (BUF5, Buffer (One){})
                                        Local1 = ToBuffer (T081)
                                        BUF5 [Zero] = DerefOf (Local1 [Zero])
                                        Return (BUF5) /* \_SB_.PC02.THC1._DSM.BUF5 */
                                    }
                                    Case (0x06)
                                    {
                                        ADBG ("THC THC_FLAGS")
                                        Return (ToInteger (T091))
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }

                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }

                            If ((Arg0 == ToUUID ("300d35b7-ac20-413e-8e9c-92e4dafd0afe") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x07                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        ADBG ("THC THC_CONNECTION_SPEED")
                                        Return (ToInteger (T031))
                                    }
                                    Case (0x02)
                                    {
                                        ADBG ("THC THC_LIMIT_PACKET_SIZE")
                                        Return (ToInteger (T0C1))
                                    }
                                    Case (0x03)
                                    {
                                        ADBG ("THC THC_PERFORMANCE_LIMITATION")
                                        Return (ToInteger (T0D1))
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }
                        }

                        If ((Arg0 == ToUUID ("84005682-5b71-41a4-8d66-8130f787a138") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("THC THC_ACTIVE_LTR")
                                    Return (ToInteger (T0A1))
                                }
                                Case (0x02)
                                {
                                    ADBG ("THC THC_IDLE_LTR")
                                    Return (ToInteger (T0B1))
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }

                        If ((Arg0 == ToUUID ("9b1e77c4-53db-43bd-a276-f7287604d1bd") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x01                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("THC THC_DISPLAY_FRAME_SYNC_PERIOD")
                                    Return (ToInteger (T0E1))
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }

                        If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x01                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("THC THC_HIDI2C_DEVICE_ADDRESS")
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }

                        Return (Buffer (Zero){})
                    }

                    If ((TIN1 != Zero))
                    {
                        Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Return (TINT (TIN1))
                        }
                    }

                    If ((TMD1 != Zero))
                    {
                        Method (_INI, 0, NotSerialized)  // _INI: Initialize
                        {
                            ADBG ("THC _INI")
                            ^^^PGPI.SHPO (T011, One)
                            ^^^PGPI.SPMV (T011, Zero)
                            ^^^PGPI.SPC0 (T011, (0x42000200 | (~(T021 & One) & One
                                )))
                            If (CondRefOf (^CINI))
                            {
                                CINI (T011, T0F1)
                            }
                        }

                        Method (_RST, 0, Serialized)  // _RST: Device Reset
                        {
                            ADBG ("THC _RST")
                            While ((RSTL == One))
                            {
                                Sleep (0x0A)
                            }

                            RSTL = One
                            ^^^PGPI.SGOV (T011, (T021 & One))
                            Sleep (T0F1)
                            ^^^PGPI.SGOV (T011, (~(T021 & One) & One))
                            RSTL = Zero
                        }

                        Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                            ICRS, 
                            ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                            ISUB
                        })
                    }
                }
            }
        }

        Scope (_SB)
        {
            Device (PGPI)
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((GPHD == One))
                    {
                        Return ("PNP0C02")
                    }

                    Return ("INTC1084")
                }

                Name (SBRG, Zero)
                SBRG = ^PC02.SBRG /* \_SB_.PC02.SBRG */
                Name (GEI0, Zero)
                GEI0 = ^PC02.GEI0 /* \_SB_.PC02.GEI0 */
                Name (GEI1, Zero)
                GEI1 = ^PC02.GEI1 /* \_SB_.PC02.GEI1 */
                Name (GEI2, Zero)
                GEI2 = ^PC02.GEI2 /* \_SB_.PC02.GEI2 */
                Name (GED0, Zero)
                GED0 = ^PC02.GED0 /* \_SB_.PC02.GED0 */
                Name (GED1, Zero)
                GED1 = ^PC02.GED1 /* \_SB_.PC02.GED1 */
                Name (GED2, Zero)
                GED2 = ^PC02.GED2 /* \_SB_.PC02.GED2 */
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBFS, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y40)
                        {
                            0x0000000E,
                        }
                        QWordMemory (ResourceConsumer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                            0x0000000000000000, // Granularity
                            0x0000000000000000, // Range Minimum
                            0x000000000000FFFF, // Range Maximum
                            0x0000000000000000, // Translation Offset
                            0x0000000000010000, // Length
                            ,, _Y41, AddressRangeMemory, TypeStatic)
                        QWordMemory (ResourceConsumer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                            0x0000000000000000, // Granularity
                            0x0000000000000000, // Range Minimum
                            0x000000000000FFFF, // Range Maximum
                            0x0000000000000000, // Translation Offset
                            0x0000000000010000, // Length
                            ,, _Y42, AddressRangeMemory, TypeStatic)
                        QWordMemory (ResourceConsumer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                            0x0000000000000000, // Granularity
                            0x0000000000000000, // Range Minimum
                            0x000000000000FFFF, // Range Maximum
                            0x0000000000000000, // Translation Offset
                            0x0000000000010000, // Length
                            ,, _Y43, AddressRangeMemory, TypeStatic)
                        QWordMemory (ResourceConsumer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                            0x0000000000000000, // Granularity
                            0x0000000000000000, // Range Minimum
                            0x000000000000FFFF, // Range Maximum
                            0x0000000000000000, // Translation Offset
                            0x0000000000010000, // Length
                            ,, _Y44, AddressRangeMemory, TypeStatic)
                        QWordMemory (ResourceConsumer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                            0x0000000000000000, // Granularity
                            0x0000000000000000, // Range Minimum
                            0x000000000000FFFF, // Range Maximum
                            0x0000000000000000, // Translation Offset
                            0x0000000000010000, // Length
                            ,, _Y45, AddressRangeMemory, TypeStatic)
                    })
                    CreateDWordField (RBFS, \_SB.PGPI._CRS._Y40._INT, INTH)  // _INT: Interrupts
                    INTH = SGIR /* \SGIR */
                    CreateQWordField (RBFS, \_SB.PGPI._CRS._Y41._MIN, CMN0)  // _MIN: Minimum Base Address
                    CreateQWordField (RBFS, \_SB.PGPI._CRS._Y41._MAX, CMX0)  // _MAX: Maximum Base Address
                    CMN0 = (SBRG + 0x006E0000)
                    CMX0 = (CMN0 + 0xFFFF)
                    CreateQWordField (RBFS, \_SB.PGPI._CRS._Y42._MIN, CMN1)  // _MIN: Minimum Base Address
                    CreateQWordField (RBFS, \_SB.PGPI._CRS._Y42._MAX, CMX1)  // _MAX: Maximum Base Address
                    CMN1 = (SBRG + 0x006D0000)
                    CMX1 = (CMN1 + 0xFFFF)
                    CreateQWordField (RBFS, \_SB.PGPI._CRS._Y43._MIN, CMN3)  // _MIN: Minimum Base Address
                    CreateQWordField (RBFS, \_SB.PGPI._CRS._Y43._MAX, CMX3)  // _MAX: Maximum Base Address
                    CMN3 = (SBRG + 0x006B0000)
                    CMX3 = (CMN3 + 0xFFFF)
                    CreateQWordField (RBFS, \_SB.PGPI._CRS._Y44._MIN, CMN4)  // _MIN: Minimum Base Address
                    CreateQWordField (RBFS, \_SB.PGPI._CRS._Y44._MAX, CMX4)  // _MAX: Maximum Base Address
                    CMN4 = (SBRG + 0x006A0000)
                    CMX4 = (CMN4 + 0xFFFF)
                    CreateQWordField (RBFS, \_SB.PGPI._CRS._Y45._MIN, CMN5)  // _MIN: Minimum Base Address
                    CreateQWordField (RBFS, \_SB.PGPI._CRS._Y45._MAX, CMX5)  // _MAX: Maximum Base Address
                    CMN5 = (SBRG + 0x00690000)
                    CMX5 = (CMN5 + 0xFFFF)
                    Return (RBFS) /* \_SB_.PGPI._CRS.RBFS */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((GPHD == One))
                    {
                        Return (0x08)
                    }

                    Return (0x0F)
                }

                Name (GPCS, Package (0x06)
                {
                    Package (0x02)
                    {
                        0x006E0000, 
                        Package (0x04)
                        {
                            Package (0x09)
                            {
                                0x19, 
                                0x0600, 
                                0x0150, 
                                0xB0, 
                                0x0240, 
                                0x0110, 
                                0x0114, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x09)
                            {
                                0x0E, 
                                0x0790, 
                                0x0154, 
                                0xC0, 
                                0x0244, 
                                0x0118, 
                                0x011C, 
                                0x20, 
                                One
                            }, 

                            Package (0x09)
                            {
                                0x12, 
                                0x0870, 
                                0x0158, 
                                0xC8, 
                                0x0248, 
                                0x0120, 
                                0x0124, 
                                0x40, 
                                0x02
                            }, 

                            Package (0x09)
                            {
                                0x1F, 
                                0x0990, 
                                0x015C, 
                                0xD4, 
                                0x024C, 
                                0x0128, 
                                0x012C, 
                                0x60, 
                                0x03
                            }
                        }
                    }, 

                    Package (0x02)
                    {
                        0x006D0000, 
                        Package (0x03)
                        {
                            Package (0x09)
                            {
                                0x0F, 
                                0x0600, 
                                0x0150, 
                                0xB0, 
                                0x0240, 
                                0x0110, 
                                0x0114, 
                                0x80, 
                                0x04
                            }, 

                            Package (0x09)
                            {
                                0x0C, 
                                0x0720, 
                                0x0154, 
                                0xB8, 
                                0x0244, 
                                0x0118, 
                                0x011C, 
                                0xA0, 
                                0x05
                            }, 

                            Package (0x09)
                            {
                                0x16, 
                                0x07B0, 
                                0x0158, 
                                0xC0, 
                                0x0248, 
                                0x0120, 
                                0x0124, 
                                0xC0, 
                                0x06
                            }
                        }
                    }, 

                    Package (0x02)
                    {
                        0x006C0000, 
                        Package (0x01)
                        {
                            Package (0x09)
                            {
                                0x11, 
                                0x0600, 
                                0x0150, 
                                0xB0, 
                                0x0240, 
                                0x0110, 
                                0x0114, 
                                0xFFFF, 
                                0xFFFF
                            }
                        }
                    }, 

                    Package (0x02)
                    {
                        0x006B0000, 
                        Package (0x06)
                        {
                            Package (0x09)
                            {
                                0x09, 
                                0x0600, 
                                0x0150, 
                                0xB0, 
                                0x0240, 
                                0x0110, 
                                0x0114, 
                                0xE0, 
                                0x08
                            }, 

                            Package (0x09)
                            {
                                0x18, 
                                0x0690, 
                                0x0154, 
                                0xB8, 
                                0x0244, 
                                0x0118, 
                                0x011C, 
                                0x0100, 
                                0x09
                            }, 

                            Package (0x09)
                            {
                                0x14, 
                                0x0810, 
                                0x0158, 
                                0xC4, 
                                0x0248, 
                                0x0120, 
                                0x0124, 
                                0x0120, 
                                0x0A
                            }, 

                            Package (0x09)
                            {
                                0x04, 
                                0x0950, 
                                0x015C, 
                                0xD0, 
                                0x024C, 
                                0x0128, 
                                0x012C, 
                                0x0140, 
                                0x0B
                            }, 

                            Package (0x09)
                            {
                                0x08, 
                                0x0990, 
                                0x0160, 
                                0xD4, 
                                0x0250, 
                                0x0130, 
                                0x0134, 
                                0x0160, 
                                0x0C
                            }, 

                            Package (0x09)
                            {
                                0x1F, 
                                0x0A10, 
                                0x0164, 
                                0xD8, 
                                0x0254, 
                                0x0138, 
                                0x013C, 
                                0x0180, 
                                0x0D
                            }
                        }
                    }, 

                    Package (0x02)
                    {
                        0x006A0000, 
                        Package (0x04)
                        {
                            Package (0x09)
                            {
                                0x08, 
                                0x0600, 
                                0x0150, 
                                0xB0, 
                                0x0240, 
                                0x0110, 
                                0x0114, 
                                0x01A0, 
                                0x0E
                            }, 

                            Package (0x09)
                            {
                                0x17, 
                                0x0680, 
                                0x0154, 
                                0xB4, 
                                0x0244, 
                                0x0118, 
                                0x011C, 
                                0x01C0, 
                                0x0F
                            }, 

                            Package (0x09)
                            {
                                0x0E, 
                                0x07F0, 
                                0x0158, 
                                0xC0, 
                                0x0248, 
                                0x0120, 
                                0x0124, 
                                0x01E0, 
                                0x10
                            }, 

                            Package (0x09)
                            {
                                0x18, 
                                0x08D0, 
                                0x015C, 
                                0xC8, 
                                0x024C, 
                                0x0128, 
                                0x012C, 
                                0x0200, 
                                0x11
                            }
                        }
                    }, 

                    Package (0x02)
                    {
                        0x00690000, 
                        Package (0x02)
                        {
                            Package (0x09)
                            {
                                0x15, 
                                0x0600, 
                                0x0150, 
                                0xB0, 
                                0x0240, 
                                0x0110, 
                                0x0114, 
                                0x0220, 
                                0x12
                            }, 

                            Package (0x09)
                            {
                                0x10, 
                                0x0750, 
                                0x0154, 
                                0xBC, 
                                0x0244, 
                                0x0118, 
                                0x011C, 
                                0x0240, 
                                0x13
                            }
                        }
                    }
                })
                Method (GDSC, 0, NotSerialized)
                {
                    Return (GPCS) /* \_SB_.PGPI.GPCS */
                }

                Method (GMXG, 0, NotSerialized)
                {
                    Return (0x14)
                }

                Method (GCMP, 1, NotSerialized)
                {
                    Local0 = GDSC ()
                    Return (DerefOf (DerefOf (Local0 [Arg0]) [Zero]))
                }

                Method (GINF, 3, NotSerialized)
                {
                    Local0 = GDSC ()
                    Return (DerefOf (DerefOf (DerefOf (DerefOf (Local0 [Arg0]) [
                        One]) [Arg1]) [Arg2]))
                }

                Method (GCOM, 1, Serialized)
                {
                    Local0 = ((Arg0 >> 0x0A) & 0x07)
                    Return (Local0)
                }

                Method (GGRP, 1, Serialized)
                {
                    Local0 = ((Arg0 >> 0x07) & 0x07)
                    Return (Local0)
                }

                Method (GNMB, 1, Serialized)
                {
                    Return ((Arg0 & 0x7F))
                }

                Method (GADR, 2, NotSerialized)
                {
                    Local2 = GGRP (Arg0)
                    Local3 = GCOM (Arg0)
                    Local0 = (GCMP (Local3) + SBRG)
                    Local1 = GINF (Local3, Local2, Arg1)
                    Return ((Local0 + Local1))
                }

                Method (GNUM, 1, NotSerialized)
                {
                    Local0 = GNMB (Arg0)
                    Local1 = GGRP (Arg0)
                    Local2 = GCOM (Arg0)
                    Return ((GINF (Local2, Local1, 0x07) + Local0))
                }

                Method (GGGP, 1, NotSerialized)
                {
                    Local0 = GGRP (Arg0)
                    Local1 = GCOM (Arg0)
                    Return (GINF (Local1, Local0, 0x08))
                }

                Method (INUM, 1, NotSerialized)
                {
                    Return ((GPC1 (Arg0) & 0x7F))
                }

                Method (GGPE, 1, NotSerialized)
                {
                    Local0 = GGGP (Arg0)
                    Local1 = GNMB (Arg0)
                    Local2 = (Local1 >> 0x05)
                    If (!((((GEI0 == Local0) && (GED0 == Local2)) | (
                        (GEI1 == Local0) && (GED1 == Local2))) | ((GEI2 == Local0) && (GED2 == 
                        Local2))))
                    {
                        Return (0x6F)
                    }
                    Else
                    {
                        If (((GEI0 == Local0) && (GED0 == Local2)))
                        {
                            Local3 = Zero
                        }
                        ElseIf (((GEI1 == Local0) && (GED1 == Local2)))
                        {
                            Local3 = One
                        }
                        ElseIf (((GEI2 == Local0) && (GED2 == Local2)))
                        {
                            Local3 = 0x02
                        }
                        Else
                        {
                            BreakPoint
                            Return (Zero)
                        }

                        Return ((((Local3 - Local2) * 0x20) + Local1))
                    }
                }

                Method (GPC0, 1, Serialized)
                {
                    Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                    OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                    Field (PDW0, AnyAcc, NoLock, Preserve)
                    {
                        TEMP,   32
                    }

                    Return (TEMP) /* \_SB_.PGPI.GPC0.TEMP */
                }

                Method (SPC0, 2, Serialized)
                {
                    Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                    OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                    Field (PDW0, AnyAcc, NoLock, Preserve)
                    {
                        TEMP,   32
                    }

                    TEMP = Arg1
                }

                Method (GPC1, 1, Serialized)
                {
                    Local2 = ((GADR (Arg0, One) + (GNMB (Arg0) * 0x10)
                        ) + 0x04)
                    OperationRegion (PDW1, SystemMemory, Local2, 0x04)
                    Field (PDW1, AnyAcc, NoLock, Preserve)
                    {
                        TEMP,   32
                    }

                    Return (TEMP) /* \_SB_.PGPI.GPC1.TEMP */
                }

                Method (SPC1, 2, Serialized)
                {
                    Local2 = ((GADR (Arg0, One) + (GNMB (Arg0) * 0x10)
                        ) + 0x04)
                    OperationRegion (PDW1, SystemMemory, Local2, 0x04)
                    Field (PDW1, AnyAcc, NoLock, Preserve)
                    {
                        TEMP,   32
                    }

                    TEMP = Arg1
                }

                Method (SRXO, 2, Serialized)
                {
                    Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                    OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                    Field (PDW0, AnyAcc, NoLock, Preserve)
                    {
                            ,   28, 
                        TEMP,   1, 
                        Offset (0x04)
                    }

                    TEMP = Arg1
                }

                Method (GGIV, 1, Serialized)
                {
                    Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                    OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                    Field (PDW0, AnyAcc, NoLock, Preserve)
                    {
                            ,   1, 
                        TEMP,   1, 
                        Offset (0x04)
                    }

                    Return (TEMP) /* \_SB_.PGPI.GGIV.TEMP */
                }

                Method (GGOV, 1, Serialized)
                {
                    Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                    OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                    Field (PDW0, AnyAcc, NoLock, Preserve)
                    {
                        TEMP,   1, 
                        Offset (0x04)
                    }

                    Return (TEMP) /* \_SB_.PGPI.GGOV.TEMP */
                }

                Method (SGOV, 2, Serialized)
                {
                    Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                    OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                    Field (PDW0, AnyAcc, NoLock, Preserve)
                    {
                        TEMP,   1, 
                        Offset (0x04)
                    }

                    TEMP = Arg1
                }

                Method (GGII, 1, Serialized)
                {
                    Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                    OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                    Field (PDW0, AnyAcc, NoLock, Preserve)
                    {
                            ,   23, 
                        TEMP,   1, 
                        Offset (0x04)
                    }

                    Return (TEMP) /* \_SB_.PGPI.GGII.TEMP */
                }

                Method (SGII, 2, Serialized)
                {
                    Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                    OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                    Field (PDW0, AnyAcc, NoLock, Preserve)
                    {
                            ,   23, 
                        TEMP,   1, 
                        Offset (0x04)
                    }

                    TEMP = Arg1
                }

                Method (GPMV, 1, Serialized)
                {
                    Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                    OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                    Field (PDW0, AnyAcc, NoLock, Preserve)
                    {
                            ,   10, 
                        TEMP,   3, 
                        Offset (0x04)
                    }

                    Return (TEMP) /* \_SB_.PGPI.GPMV.TEMP */
                }

                Method (SPMV, 2, Serialized)
                {
                    Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                    OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                    Field (PDW0, AnyAcc, NoLock, Preserve)
                    {
                            ,   10, 
                        TEMP,   3, 
                        Offset (0x04)
                    }

                    TEMP = Arg1
                }

                Method (GHPO, 1, Serialized)
                {
                    Local1 = GNMB (Arg0)
                    Local3 = (GADR (Arg0, 0x02) + ((Local1 >> 0x05) * 0x04))
                    Local4 = (Local1 & 0x1F)
                    OperationRegion (PREG, SystemMemory, Local3, 0x04)
                    Field (PREG, AnyAcc, NoLock, Preserve)
                    {
                        TEMP,   32
                    }

                    Return (((TEMP >> Local4) & One))
                }

                Method (SHPO, 2, Serialized)
                {
                    Local1 = GNMB (Arg0)
                    ADBG ("Pad number")
                    ADBG (ToHexString (Local1))
                    Local3 = (GADR (Arg0, 0x02) + ((Local1 >> 0x05) * 0x04))
                    ADBG ("HOST owner offset")
                    ADBG (ToHexString (Local3))
                    Local4 = (Local1 & 0x1F)
                    ADBG ("Pad position")
                    ADBG (ToHexString (Local4))
                    OperationRegion (PREG, SystemMemory, Local3, 0x04)
                    Field (PREG, AnyAcc, NoLock, Preserve)
                    {
                        TEMP,   32
                    }

                    ADBG ("HOST own before")
                    ADBG (ToHexString (TEMP))
                    If (Arg1)
                    {
                        TEMP |= (One << Local4)
                    }
                    Else
                    {
                        TEMP &= ~(One << Local4)
                    }

                    ADBG ("HOST own after")
                    ADBG (ToHexString (TEMP))
                }

                Method (GGPO, 1, Serialized)
                {
                    Local1 = GNMB (Arg0)
                    Local2 = (GADR (Arg0, 0x03) + ((Local1 >> 0x03) * 0x04
                        ))
                    OperationRegion (PREG, SystemMemory, Local2, 0x04)
                    Field (PREG, AnyAcc, NoLock, Preserve)
                    {
                        TEMP,   32
                    }

                    Return (((TEMP >> ((Local1 & 0x07) * 0x04)) & 
                        0x03))
                }

                Method (SGRA, 2, Serialized)
                {
                    Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                    OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                    Field (PDW0, AnyAcc, NoLock, Preserve)
                    {
                            ,   20, 
                        TEMP,   1, 
                        Offset (0x04)
                    }

                    TEMP = Arg1
                }

                Method (SGWP, 2, Serialized)
                {
                    Local2 = ((GADR (Arg0, One) + (GNMB (Arg0) * 0x10)
                        ) + 0x04)
                    OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                    Field (PDW0, AnyAcc, NoLock, Preserve)
                    {
                            ,   10, 
                        TEMP,   4, 
                        Offset (0x04)
                    }

                    TEMP = Arg1
                }

                Method (CGPI, 1, Serialized)
                {
                    Local1 = GNMB (Arg0)
                    ADBG ("Pad number")
                    ADBG (ToHexString (Local1))
                    Local4 = (Local1 >> 0x05)
                    ADBG ("Group DW")
                    ADBG (ToHexString (Local4))
                    Local3 = GADR (Arg0, 0x04)
                    ADBG ("Reg offset")
                    ADBG (ToHexString (Local3))
                    If (((Local3 & 0xFFFF) != 0xFFFF))
                    {
                        ADBG ("Clearing GPI")
                        OperationRegion (GPPX, SystemMemory, (Local3 + (Local4 * 0x04)), 0x04)
                        Field (GPPX, AnyAcc, NoLock, Preserve)
                        {
                            STSX,   32
                        }

                        Local2 = (One << (Local1 % 0x20))
                        ADBG ("STSX before")
                        ADBG (ToHexString (STSX))
                        STSX = Local2
                        ADBG ("STSX after")
                        ADBG (ToHexString (STSX))
                    }
                }

                Method (CAGS, 1, Serialized)
                {
                    Local0 = GGGP (Arg0)
                    Local1 = GNMB (Arg0)
                    Local4 = (Local1 >> 0x05)
                    If (!((((GEI0 == Local0) && (GED0 == Local4)) | (
                        (GEI1 == Local0) && (GED1 == Local4))) | ((GEI2 == Local0) && (GED2 == 
                        Local4))))
                    {
                        Local3 = GADR (Arg0, 0x04)
                        If (((Local3 & 0xFFFF) != 0xFFFF))
                        {
                            OperationRegion (GPPX, SystemMemory, (Local3 + (Local4 * 0x04)), 0x04)
                            Field (GPPX, AnyAcc, NoLock, Preserve)
                            {
                                STSX,   32
                            }

                            Local2 = (One << (Local1 % 0x20))
                            STSX = Local2
                        }
                    }
                }

                Method (IGPI, 1, Serialized)
                {
                    Local1 = GNMB (Arg0)
                    Local4 = (Local1 >> 0x05)
                    If (((GADR (Arg0, 0x04) & 0xFFFF) == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    Local2 = (GADR (Arg0, 0x04) + (Local4 * 0x04))
                    Local3 = (Local1 & 0x1F)
                    OperationRegion (GPPX, SystemMemory, Local2, 0x24)
                    Field (GPPX, AnyAcc, NoLock, Preserve)
                    {
                        STSX,   32, 
                        Offset (0x20), 
                        GENX,   32
                    }

                    Return ((((STSX & GENX) >> Local3) & One))
                }

                Method (ISME, 1, Serialized)
                {
                    Local0 = GGGP (Arg0)
                    Local1 = GNMB (Arg0)
                    Local4 = (Local1 >> 0x05)
                    If (!!((((GEI0 == Local0) && (GED0 == Local4)) | 
                        ((GEI1 == Local0) && (GED1 == Local4))) | ((GEI2 == Local0) && (
                        GED2 == Local4))))
                    {
                        Return (Zero)
                    }

                    If (((GADR (Arg0, 0x04) & 0xFFFF) == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    Local2 = (GADR (Arg0, 0x04) + (Local4 * 0x04))
                    Local3 = (Local1 & 0x1F)
                    OperationRegion (GPPX, SystemMemory, Local2, 0x24)
                    Field (GPPX, AnyAcc, NoLock, Preserve)
                    {
                        STSX,   32, 
                        Offset (0x20), 
                        GENX,   32
                    }

                    Return ((((STSX & GENX) >> Local3) & One))
                }

                Method (GRXE, 2, Serialized)
                {
                    Local2 = (GADR (Arg0, One) + (GNMB (Arg0) * 0x10))
                    OperationRegion (PDW0, SystemMemory, Local2, 0x04)
                    Field (PDW0, AnyAcc, NoLock, Preserve)
                    {
                            ,   25, 
                        RCFG,   2, 
                        Offset (0x04)
                    }

                    RCFG = Arg1
                }

                Method (GLOC, 2, Serialized)
                {
                    Local1 = GNMB (Arg0)
                    Local2 = GADR (Arg0, 0x05)
                    OperationRegion (PREG, SystemMemory, Local2, 0x04)
                    Field (PREG, AnyAcc, NoLock, Preserve)
                    {
                        TEMP,   32
                    }

                    Return (((TEMP >> Local1) & One))
                }

                Method (GLOT, 2, Serialized)
                {
                    Local1 = GNMB (Arg0)
                    Local2 = GADR (Arg0, 0x06)
                    OperationRegion (PREG, SystemMemory, Local2, 0x04)
                    Field (PREG, AnyAcc, NoLock, Preserve)
                    {
                        TEMP,   32
                    }

                    Return (((TEMP >> Local1) & One))
                }
            }
        }

        Scope (_SB)
        {
            Device (PCLK)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, "PCHCLK")  // _UID: Unique ID
                Name (PID, 0xAD)
                Method (CLKD, 1, NotSerialized)
                {
                    If ((Arg0 > 0x06))
                    {
                        Local1 = (Arg0 + One)
                        Local1 -= 0x07
                        ^^PC02.SBPC.PCRA (PID, 0x8084, ~(One << Local1))
                    }
                    Else
                    {
                        Local1 = (Arg0 + 0x02)
                        ^^PC02.SBPC.PCRA (PID, 0x8080, ~(One << Local1))
                    }
                }

                Method (CLKE, 1, NotSerialized)
                {
                    If ((Arg0 > 0x06))
                    {
                        Local1 = (Arg0 + One)
                        Local1 -= 0x07
                        ^^PC02.SBPC.PCRO (PID, 0x8084, (One << Local1))
                    }
                    Else
                    {
                        Local1 = (Arg0 + 0x02)
                        ^^PC02.SBPC.PCRO (PID, 0x8080, (One << Local1))
                    }
                }

                Method (SPCO, 2, NotSerialized)
                {
                    ADBG ("Calling SPCO method to configure PCH PCIe ClkReq Override")
                    If ((Arg1 == One))
                    {
                        CLKE (Arg0)
                    }
                    Else
                    {
                        CLKD (Arg0)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Scope (RP01)
        {
            Name (PBNU, Zero)
            Name (SLOT, One)
            Name (PRTP, 0x02)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTR1 /* \LTR1 */
                LMSL = PML1 /* \PML1 */
                LNSL = PNL1 /* \PNL1 */
                If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMSP & 0x0100) != Zero)))
                    {
                        ADBG ("RP01 (0/28/0) is mapped under VMD")
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP01))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP01.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    ADBG (Concatenate ("VMD Storage Runtime D3 status:", ToHexString (RD3C)))
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                ADBG (Concatenate ("Storage Runtime D3 status:", ToHexString (RD3C)))
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR, PBNU), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0x68), 
                    ,   10, 
                LNRE,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                Offset (0x32B), 
                LTSM,   8, 
                Offset (0x404), 
                LSOE,   1, 
                LNSE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at L23D Start  -", ToHexString (LTSM)))
                If ((SCB0 != One))
                {
                    ADBG (Concatenate ("PON SCB ", ToHexString (SLOT)))
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("PCIE L23R TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                SCB0 = Zero
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        ADBG (Concatenate ("PCIE LASX TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("PCIe RP LTSSM at L23D End -", ToHexString (LTSM)))
            }

            Method (DL23, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 Start -", ToHexString (LTSM)))
                If (((LASX == One) && (LNRE == Zero)))
                {
                    If (((LSOE == One) || (LNSE == One)))
                    {
                        LNRE = One
                        Sleep (One)
                        LNRE = Zero
                        ADBG ("Toggle LNRE")
                    }
                }

                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("POF L23E TO", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("POF RP ", ToHexString (SLOT)))
                SCB0 = One
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 End -", ToHexString (LTSM)))
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            ADBG (Concatenate ("_DSM PCIe RP OPTS -", ToHexString (OPTS)))
                            Return (OPTS) /* \_SB_.PC00.RP01._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP01.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                ADBG ("PSSD AHCI")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                ADBG ("PSSD NVMe")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                ADBG ("NVMe D3 Support Enable for Child Device")
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    ADBG (Concatenate ("_PRW PCIe RP", ToHexString (SLOT)))
                    If (CondRefOf (GP1E))
                    {
                        If ((GP1E != Zero))
                        {
                            Return (GPRW (0xC0, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("_PS0 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS0))
                {
                    ADBG ("Calling Platform PCIE RP PS0 Hook")
                    PPS0 ()
                    ADBG ("Returned from Platform PCIE RP PS0 Hook")
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("_PS3 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS3))
                {
                    ADBG ("Calling Platform PCIE RP PS3 Hook")
                    PPS3 ()
                    ADBG ("Returned from Platform PCIE RP PS3 Hook")
                }
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG (Concatenate ("_DSD PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (ADSD))
                {
                    ADBG (Concatenate ("Alternate _DSD PCIe RP", ToHexString (SLOT)))
                    Return (ADSD ())
                }

                If (CondRefOf (PINI))
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }, 

                        ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                        Package (0x00){}
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }
        }

        Scope (RP02)
        {
            Name (PBNU, Zero)
            Name (SLOT, 0x02)
            Name (PRTP, 0x02)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTR2 /* \LTR2 */
                LMSL = PML2 /* \PML2 */
                LNSL = PNL2 /* \PNL2 */
                If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMSP & 0x0200) != Zero)))
                    {
                        ADBG ("RP02 (0/28/1) is mapped under VMD")
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP02))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP02.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    ADBG (Concatenate ("VMD Storage Runtime D3 status:", ToHexString (RD3C)))
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                ADBG (Concatenate ("Storage Runtime D3 status:", ToHexString (RD3C)))
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR, PBNU), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0x68), 
                    ,   10, 
                LNRE,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                Offset (0x32B), 
                LTSM,   8, 
                Offset (0x404), 
                LSOE,   1, 
                LNSE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at L23D Start  -", ToHexString (LTSM)))
                If ((SCB0 != One))
                {
                    ADBG (Concatenate ("PON SCB ", ToHexString (SLOT)))
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("PCIE L23R TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                SCB0 = Zero
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        ADBG (Concatenate ("PCIE LASX TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("PCIe RP LTSSM at L23D End -", ToHexString (LTSM)))
            }

            Method (DL23, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 Start -", ToHexString (LTSM)))
                If (((LASX == One) && (LNRE == Zero)))
                {
                    If (((LSOE == One) || (LNSE == One)))
                    {
                        LNRE = One
                        Sleep (One)
                        LNRE = Zero
                        ADBG ("Toggle LNRE")
                    }
                }

                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("POF L23E TO", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("POF RP ", ToHexString (SLOT)))
                SCB0 = One
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 End -", ToHexString (LTSM)))
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            ADBG (Concatenate ("_DSM PCIe RP OPTS -", ToHexString (OPTS)))
                            Return (OPTS) /* \_SB_.PC00.RP02._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP02.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                ADBG ("PSSD AHCI")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                ADBG ("PSSD NVMe")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                ADBG ("NVMe D3 Support Enable for Child Device")
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    ADBG (Concatenate ("_PRW PCIe RP", ToHexString (SLOT)))
                    If (CondRefOf (GP1E))
                    {
                        If ((GP1E != Zero))
                        {
                            Return (GPRW (0xC0, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("_PS0 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS0))
                {
                    ADBG ("Calling Platform PCIE RP PS0 Hook")
                    PPS0 ()
                    ADBG ("Returned from Platform PCIE RP PS0 Hook")
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("_PS3 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS3))
                {
                    ADBG ("Calling Platform PCIE RP PS3 Hook")
                    PPS3 ()
                    ADBG ("Returned from Platform PCIE RP PS3 Hook")
                }
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG (Concatenate ("_DSD PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (ADSD))
                {
                    ADBG (Concatenate ("Alternate _DSD PCIe RP", ToHexString (SLOT)))
                    Return (ADSD ())
                }

                If (CondRefOf (PINI))
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }, 

                        ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                        Package (0x00){}
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }
        }

        Scope (RP03)
        {
            Name (PBNU, Zero)
            Name (SLOT, 0x03)
            Name (PRTP, 0x02)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTR3 /* \LTR3 */
                LMSL = PML3 /* \PML3 */
                LNSL = PNL3 /* \PNL3 */
                If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMSP & 0x0400) != Zero)))
                    {
                        ADBG ("RP03 (0/28/2) is mapped under VMD")
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP03))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP03.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    ADBG (Concatenate ("VMD Storage Runtime D3 status:", ToHexString (RD3C)))
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                ADBG (Concatenate ("Storage Runtime D3 status:", ToHexString (RD3C)))
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR, PBNU), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0x68), 
                    ,   10, 
                LNRE,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                Offset (0x32B), 
                LTSM,   8, 
                Offset (0x404), 
                LSOE,   1, 
                LNSE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at L23D Start  -", ToHexString (LTSM)))
                If ((SCB0 != One))
                {
                    ADBG (Concatenate ("PON SCB ", ToHexString (SLOT)))
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("PCIE L23R TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                SCB0 = Zero
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        ADBG (Concatenate ("PCIE LASX TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("PCIe RP LTSSM at L23D End -", ToHexString (LTSM)))
            }

            Method (DL23, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 Start -", ToHexString (LTSM)))
                If (((LASX == One) && (LNRE == Zero)))
                {
                    If (((LSOE == One) || (LNSE == One)))
                    {
                        LNRE = One
                        Sleep (One)
                        LNRE = Zero
                        ADBG ("Toggle LNRE")
                    }
                }

                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("POF L23E TO", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("POF RP ", ToHexString (SLOT)))
                SCB0 = One
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 End -", ToHexString (LTSM)))
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            ADBG (Concatenate ("_DSM PCIe RP OPTS -", ToHexString (OPTS)))
                            Return (OPTS) /* \_SB_.PC00.RP03._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP03.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                ADBG ("PSSD AHCI")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                ADBG ("PSSD NVMe")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                ADBG ("NVMe D3 Support Enable for Child Device")
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    ADBG (Concatenate ("_PRW PCIe RP", ToHexString (SLOT)))
                    If (CondRefOf (GP1E))
                    {
                        If ((GP1E != Zero))
                        {
                            Return (GPRW (0xC0, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("_PS0 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS0))
                {
                    ADBG ("Calling Platform PCIE RP PS0 Hook")
                    PPS0 ()
                    ADBG ("Returned from Platform PCIE RP PS0 Hook")
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("_PS3 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS3))
                {
                    ADBG ("Calling Platform PCIE RP PS3 Hook")
                    PPS3 ()
                    ADBG ("Returned from Platform PCIE RP PS3 Hook")
                }
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG (Concatenate ("_DSD PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (ADSD))
                {
                    ADBG (Concatenate ("Alternate _DSD PCIe RP", ToHexString (SLOT)))
                    Return (ADSD ())
                }

                If (CondRefOf (PINI))
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }, 

                        ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                        Package (0x00){}
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }
        }

        Scope (RP04)
        {
            Name (PBNU, Zero)
            Name (SLOT, 0x04)
            Name (PRTP, 0x02)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTR4 /* \LTR4 */
                LMSL = PML4 /* \PML4 */
                LNSL = PNL4 /* \PNL4 */
                If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMSP & 0x0800) != Zero)))
                    {
                        ADBG ("RP04 (0/28/3) is mapped under VMD")
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP04))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP04.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    ADBG (Concatenate ("VMD Storage Runtime D3 status:", ToHexString (RD3C)))
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                ADBG (Concatenate ("Storage Runtime D3 status:", ToHexString (RD3C)))
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR, PBNU), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0x68), 
                    ,   10, 
                LNRE,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                Offset (0x32B), 
                LTSM,   8, 
                Offset (0x404), 
                LSOE,   1, 
                LNSE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at L23D Start  -", ToHexString (LTSM)))
                If ((SCB0 != One))
                {
                    ADBG (Concatenate ("PON SCB ", ToHexString (SLOT)))
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("PCIE L23R TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                SCB0 = Zero
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        ADBG (Concatenate ("PCIE LASX TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("PCIe RP LTSSM at L23D End -", ToHexString (LTSM)))
            }

            Method (DL23, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 Start -", ToHexString (LTSM)))
                If (((LASX == One) && (LNRE == Zero)))
                {
                    If (((LSOE == One) || (LNSE == One)))
                    {
                        LNRE = One
                        Sleep (One)
                        LNRE = Zero
                        ADBG ("Toggle LNRE")
                    }
                }

                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("POF L23E TO", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("POF RP ", ToHexString (SLOT)))
                SCB0 = One
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 End -", ToHexString (LTSM)))
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            ADBG (Concatenate ("_DSM PCIe RP OPTS -", ToHexString (OPTS)))
                            Return (OPTS) /* \_SB_.PC00.RP04._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP04.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                ADBG ("PSSD AHCI")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                ADBG ("PSSD NVMe")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                ADBG ("NVMe D3 Support Enable for Child Device")
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    ADBG (Concatenate ("_PRW PCIe RP", ToHexString (SLOT)))
                    If (CondRefOf (GP1E))
                    {
                        If ((GP1E != Zero))
                        {
                            Return (GPRW (0xC0, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("_PS0 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS0))
                {
                    ADBG ("Calling Platform PCIE RP PS0 Hook")
                    PPS0 ()
                    ADBG ("Returned from Platform PCIE RP PS0 Hook")
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("_PS3 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS3))
                {
                    ADBG ("Calling Platform PCIE RP PS3 Hook")
                    PPS3 ()
                    ADBG ("Returned from Platform PCIE RP PS3 Hook")
                }
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG (Concatenate ("_DSD PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (ADSD))
                {
                    ADBG (Concatenate ("Alternate _DSD PCIe RP", ToHexString (SLOT)))
                    Return (ADSD ())
                }

                If (CondRefOf (PINI))
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }, 

                        ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                        Package (0x00){}
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }
        }

        Scope (RP05)
        {
            Name (PBNU, Zero)
            Name (SLOT, 0x05)
            Name (PRTP, 0x02)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTR5 /* \LTR5 */
                LMSL = PML5 /* \PML5 */
                LNSL = PNL5 /* \PNL5 */
                If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMSP & 0x1000) != Zero)))
                    {
                        ADBG ("RP05 (0/28/4) is mapped under VMD")
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP05))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP05.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    ADBG (Concatenate ("VMD Storage Runtime D3 status:", ToHexString (RD3C)))
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                ADBG (Concatenate ("Storage Runtime D3 status:", ToHexString (RD3C)))
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR, PBNU), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0x68), 
                    ,   10, 
                LNRE,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                Offset (0x32B), 
                LTSM,   8, 
                Offset (0x404), 
                LSOE,   1, 
                LNSE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at L23D Start  -", ToHexString (LTSM)))
                If ((SCB0 != One))
                {
                    ADBG (Concatenate ("PON SCB ", ToHexString (SLOT)))
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("PCIE L23R TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                SCB0 = Zero
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        ADBG (Concatenate ("PCIE LASX TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("PCIe RP LTSSM at L23D End -", ToHexString (LTSM)))
            }

            Method (DL23, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 Start -", ToHexString (LTSM)))
                If (((LASX == One) && (LNRE == Zero)))
                {
                    If (((LSOE == One) || (LNSE == One)))
                    {
                        LNRE = One
                        Sleep (One)
                        LNRE = Zero
                        ADBG ("Toggle LNRE")
                    }
                }

                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("POF L23E TO", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("POF RP ", ToHexString (SLOT)))
                SCB0 = One
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 End -", ToHexString (LTSM)))
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            ADBG (Concatenate ("_DSM PCIe RP OPTS -", ToHexString (OPTS)))
                            Return (OPTS) /* \_SB_.PC00.RP05._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP05.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                ADBG ("PSSD AHCI")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                ADBG ("PSSD NVMe")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                ADBG ("NVMe D3 Support Enable for Child Device")
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    ADBG (Concatenate ("_PRW PCIe RP", ToHexString (SLOT)))
                    If (CondRefOf (GP1E))
                    {
                        If ((GP1E != Zero))
                        {
                            Return (GPRW (0xC1, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("_PS0 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS0))
                {
                    ADBG ("Calling Platform PCIE RP PS0 Hook")
                    PPS0 ()
                    ADBG ("Returned from Platform PCIE RP PS0 Hook")
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("_PS3 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS3))
                {
                    ADBG ("Calling Platform PCIE RP PS3 Hook")
                    PPS3 ()
                    ADBG ("Returned from Platform PCIE RP PS3 Hook")
                }
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG (Concatenate ("_DSD PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (ADSD))
                {
                    ADBG (Concatenate ("Alternate _DSD PCIe RP", ToHexString (SLOT)))
                    Return (ADSD ())
                }

                If (CondRefOf (PINI))
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }, 

                        ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                        Package (0x00){}
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }
        }

        Scope (RP06)
        {
            Name (PBNU, Zero)
            Name (SLOT, 0x06)
            Name (PRTP, 0x02)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTR6 /* \LTR6 */
                LMSL = PML6 /* \PML6 */
                LNSL = PNL6 /* \PNL6 */
                If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMSP & 0x2000) != Zero)))
                    {
                        ADBG ("RP06 (0/28/5) is mapped under VMD")
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP06))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP06.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    ADBG (Concatenate ("VMD Storage Runtime D3 status:", ToHexString (RD3C)))
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                ADBG (Concatenate ("Storage Runtime D3 status:", ToHexString (RD3C)))
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR, PBNU), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0x68), 
                    ,   10, 
                LNRE,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                Offset (0x32B), 
                LTSM,   8, 
                Offset (0x404), 
                LSOE,   1, 
                LNSE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at L23D Start  -", ToHexString (LTSM)))
                If ((SCB0 != One))
                {
                    ADBG (Concatenate ("PON SCB ", ToHexString (SLOT)))
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("PCIE L23R TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                SCB0 = Zero
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        ADBG (Concatenate ("PCIE LASX TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("PCIe RP LTSSM at L23D End -", ToHexString (LTSM)))
            }

            Method (DL23, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 Start -", ToHexString (LTSM)))
                If (((LASX == One) && (LNRE == Zero)))
                {
                    If (((LSOE == One) || (LNSE == One)))
                    {
                        LNRE = One
                        Sleep (One)
                        LNRE = Zero
                        ADBG ("Toggle LNRE")
                    }
                }

                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("POF L23E TO", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("POF RP ", ToHexString (SLOT)))
                SCB0 = One
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 End -", ToHexString (LTSM)))
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            ADBG (Concatenate ("_DSM PCIe RP OPTS -", ToHexString (OPTS)))
                            Return (OPTS) /* \_SB_.PC00.RP06._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP06.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                ADBG ("PSSD AHCI")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                ADBG ("PSSD NVMe")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                ADBG ("NVMe D3 Support Enable for Child Device")
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    ADBG (Concatenate ("_PRW PCIe RP", ToHexString (SLOT)))
                    If (CondRefOf (GP1E))
                    {
                        If ((GP1E != Zero))
                        {
                            Return (GPRW (0xC1, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("_PS0 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS0))
                {
                    ADBG ("Calling Platform PCIE RP PS0 Hook")
                    PPS0 ()
                    ADBG ("Returned from Platform PCIE RP PS0 Hook")
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("_PS3 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS3))
                {
                    ADBG ("Calling Platform PCIE RP PS3 Hook")
                    PPS3 ()
                    ADBG ("Returned from Platform PCIE RP PS3 Hook")
                }
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG (Concatenate ("_DSD PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (ADSD))
                {
                    ADBG (Concatenate ("Alternate _DSD PCIe RP", ToHexString (SLOT)))
                    Return (ADSD ())
                }

                If (CondRefOf (PINI))
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }, 

                        ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                        Package (0x00){}
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }
        }

        Scope (RP07)
        {
            Name (PBNU, Zero)
            Name (SLOT, 0x07)
            Name (PRTP, 0x02)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTR7 /* \LTR7 */
                LMSL = PML7 /* \PML7 */
                LNSL = PNL7 /* \PNL7 */
                If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMSP & 0x4000) != Zero)))
                    {
                        ADBG ("RP07 (0/28/6) is mapped under VMD")
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP07))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP07.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    ADBG (Concatenate ("VMD Storage Runtime D3 status:", ToHexString (RD3C)))
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                ADBG (Concatenate ("Storage Runtime D3 status:", ToHexString (RD3C)))
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR, PBNU), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0x68), 
                    ,   10, 
                LNRE,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                Offset (0x32B), 
                LTSM,   8, 
                Offset (0x404), 
                LSOE,   1, 
                LNSE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at L23D Start  -", ToHexString (LTSM)))
                If ((SCB0 != One))
                {
                    ADBG (Concatenate ("PON SCB ", ToHexString (SLOT)))
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("PCIE L23R TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                SCB0 = Zero
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        ADBG (Concatenate ("PCIE LASX TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("PCIe RP LTSSM at L23D End -", ToHexString (LTSM)))
            }

            Method (DL23, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 Start -", ToHexString (LTSM)))
                If (((LASX == One) && (LNRE == Zero)))
                {
                    If (((LSOE == One) || (LNSE == One)))
                    {
                        LNRE = One
                        Sleep (One)
                        LNRE = Zero
                        ADBG ("Toggle LNRE")
                    }
                }

                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("POF L23E TO", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("POF RP ", ToHexString (SLOT)))
                SCB0 = One
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 End -", ToHexString (LTSM)))
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            ADBG (Concatenate ("_DSM PCIe RP OPTS -", ToHexString (OPTS)))
                            Return (OPTS) /* \_SB_.PC00.RP07._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP07.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                ADBG ("PSSD AHCI")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                ADBG ("PSSD NVMe")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                ADBG ("NVMe D3 Support Enable for Child Device")
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    ADBG (Concatenate ("_PRW PCIe RP", ToHexString (SLOT)))
                    If (CondRefOf (GP1E))
                    {
                        If ((GP1E != Zero))
                        {
                            Return (GPRW (0xC1, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("_PS0 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS0))
                {
                    ADBG ("Calling Platform PCIE RP PS0 Hook")
                    PPS0 ()
                    ADBG ("Returned from Platform PCIE RP PS0 Hook")
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("_PS3 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS3))
                {
                    ADBG ("Calling Platform PCIE RP PS3 Hook")
                    PPS3 ()
                    ADBG ("Returned from Platform PCIE RP PS3 Hook")
                }
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG (Concatenate ("_DSD PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (ADSD))
                {
                    ADBG (Concatenate ("Alternate _DSD PCIe RP", ToHexString (SLOT)))
                    Return (ADSD ())
                }

                If (CondRefOf (PINI))
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }, 

                        ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                        Package (0x00){}
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }
        }

        Scope (RP08)
        {
            Name (PBNU, Zero)
            Name (SLOT, 0x08)
            Name (PRTP, 0x02)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTR8 /* \LTR8 */
                LMSL = PML8 /* \PML8 */
                LNSL = PNL8 /* \PNL8 */
                If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMSP & 0x8000) != Zero)))
                    {
                        ADBG ("RP08 (0/28/7) is mapped under VMD")
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP08))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP08.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    ADBG (Concatenate ("VMD Storage Runtime D3 status:", ToHexString (RD3C)))
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                ADBG (Concatenate ("Storage Runtime D3 status:", ToHexString (RD3C)))
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR, PBNU), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0x68), 
                    ,   10, 
                LNRE,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                Offset (0x32B), 
                LTSM,   8, 
                Offset (0x404), 
                LSOE,   1, 
                LNSE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at L23D Start  -", ToHexString (LTSM)))
                If ((SCB0 != One))
                {
                    ADBG (Concatenate ("PON SCB ", ToHexString (SLOT)))
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("PCIE L23R TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                SCB0 = Zero
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        ADBG (Concatenate ("PCIE LASX TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("PCIe RP LTSSM at L23D End -", ToHexString (LTSM)))
            }

            Method (DL23, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 Start -", ToHexString (LTSM)))
                If (((LASX == One) && (LNRE == Zero)))
                {
                    If (((LSOE == One) || (LNSE == One)))
                    {
                        LNRE = One
                        Sleep (One)
                        LNRE = Zero
                        ADBG ("Toggle LNRE")
                    }
                }

                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("POF L23E TO", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("POF RP ", ToHexString (SLOT)))
                SCB0 = One
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 End -", ToHexString (LTSM)))
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            ADBG (Concatenate ("_DSM PCIe RP OPTS -", ToHexString (OPTS)))
                            Return (OPTS) /* \_SB_.PC00.RP08._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP08.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                ADBG ("PSSD AHCI")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                ADBG ("PSSD NVMe")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                ADBG ("NVMe D3 Support Enable for Child Device")
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    ADBG (Concatenate ("_PRW PCIe RP", ToHexString (SLOT)))
                    If (CondRefOf (GP1E))
                    {
                        If ((GP1E != Zero))
                        {
                            Return (GPRW (0xC1, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("_PS0 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS0))
                {
                    ADBG ("Calling Platform PCIE RP PS0 Hook")
                    PPS0 ()
                    ADBG ("Returned from Platform PCIE RP PS0 Hook")
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("_PS3 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS3))
                {
                    ADBG ("Calling Platform PCIE RP PS3 Hook")
                    PPS3 ()
                    ADBG ("Returned from Platform PCIE RP PS3 Hook")
                }
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG (Concatenate ("_DSD PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (ADSD))
                {
                    ADBG (Concatenate ("Alternate _DSD PCIe RP", ToHexString (SLOT)))
                    Return (ADSD ())
                }

                If (CondRefOf (PINI))
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }, 

                        ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                        Package (0x00){}
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }
        }

        Scope (RP09)
        {
            Name (PBNU, Zero)
            Name (SLOT, 0x09)
            Name (PRTP, 0x04)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTR9 /* \LTR9 */
                LMSL = PML9 /* \PML9 */
                LNSL = PNL9 /* \PNL9 */
                If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMSP & One) != Zero)))
                    {
                        ADBG ("RP09 (0/6/0) is mapped under VMD")
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP09))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP09.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    ADBG (Concatenate ("VMD Storage Runtime D3 status:", ToHexString (RD3C)))
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                ADBG (Concatenate ("Storage Runtime D3 status:", ToHexString (RD3C)))
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR, PBNU), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0x68), 
                    ,   10, 
                LNRE,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                Offset (0x32B), 
                LTSM,   8, 
                Offset (0x404), 
                LSOE,   1, 
                LNSE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at L23D Start  -", ToHexString (LTSM)))
                If ((SCB0 != One))
                {
                    ADBG (Concatenate ("PON SCB ", ToHexString (SLOT)))
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("PCIE L23R TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                SCB0 = Zero
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        ADBG (Concatenate ("PCIE LASX TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("PCIe RP LTSSM at L23D End -", ToHexString (LTSM)))
            }

            Method (DL23, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 Start -", ToHexString (LTSM)))
                If (((LASX == One) && (LNRE == Zero)))
                {
                    If (((LSOE == One) || (LNSE == One)))
                    {
                        LNRE = One
                        Sleep (One)
                        LNRE = Zero
                        ADBG ("Toggle LNRE")
                    }
                }

                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("POF L23E TO", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("POF RP ", ToHexString (SLOT)))
                SCB0 = One
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 End -", ToHexString (LTSM)))
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            ADBG (Concatenate ("_DSM PCIe RP OPTS -", ToHexString (OPTS)))
                            Return (OPTS) /* \_SB_.PC00.RP09._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP09.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                ADBG ("PSSD AHCI")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                ADBG ("PSSD NVMe")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                ADBG ("NVMe D3 Support Enable for Child Device")
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    ADBG (Concatenate ("_PRW PCIe RP", ToHexString (SLOT)))
                    If (CondRefOf (GP1E))
                    {
                        If ((GP1E != Zero))
                        {
                            Return (GPRW (0xC2, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("_PS0 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS0))
                {
                    ADBG ("Calling Platform PCIE RP PS0 Hook")
                    PPS0 ()
                    ADBG ("Returned from Platform PCIE RP PS0 Hook")
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("_PS3 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS3))
                {
                    ADBG ("Calling Platform PCIE RP PS3 Hook")
                    PPS3 ()
                    ADBG ("Returned from Platform PCIE RP PS3 Hook")
                }
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG (Concatenate ("_DSD PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (ADSD))
                {
                    ADBG (Concatenate ("Alternate _DSD PCIe RP", ToHexString (SLOT)))
                    Return (ADSD ())
                }

                If (CondRefOf (PINI))
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }, 

                        ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                        Package (0x00){}
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }
        }

        Scope (RP10)
        {
            Name (PBNU, Zero)
            Name (SLOT, 0x0A)
            Name (PRTP, 0x04)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRA /* \LTRA */
                LMSL = PMLA /* \PMLA */
                LNSL = PNLA /* \PNLA */
                If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMSP & 0x02) != Zero)))
                    {
                        ADBG ("RP10 (0/6/1) is mapped under VMD")
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP10))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP10.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    ADBG (Concatenate ("VMD Storage Runtime D3 status:", ToHexString (RD3C)))
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                ADBG (Concatenate ("Storage Runtime D3 status:", ToHexString (RD3C)))
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR, PBNU), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0x68), 
                    ,   10, 
                LNRE,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                Offset (0x32B), 
                LTSM,   8, 
                Offset (0x404), 
                LSOE,   1, 
                LNSE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at L23D Start  -", ToHexString (LTSM)))
                If ((SCB0 != One))
                {
                    ADBG (Concatenate ("PON SCB ", ToHexString (SLOT)))
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("PCIE L23R TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                SCB0 = Zero
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        ADBG (Concatenate ("PCIE LASX TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("PCIe RP LTSSM at L23D End -", ToHexString (LTSM)))
            }

            Method (DL23, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 Start -", ToHexString (LTSM)))
                If (((LASX == One) && (LNRE == Zero)))
                {
                    If (((LSOE == One) || (LNSE == One)))
                    {
                        LNRE = One
                        Sleep (One)
                        LNRE = Zero
                        ADBG ("Toggle LNRE")
                    }
                }

                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("POF L23E TO", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("POF RP ", ToHexString (SLOT)))
                SCB0 = One
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 End -", ToHexString (LTSM)))
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            ADBG (Concatenate ("_DSM PCIe RP OPTS -", ToHexString (OPTS)))
                            Return (OPTS) /* \_SB_.PC00.RP10._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP10.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                ADBG ("PSSD AHCI")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                ADBG ("PSSD NVMe")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                ADBG ("NVMe D3 Support Enable for Child Device")
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    ADBG (Concatenate ("_PRW PCIe RP", ToHexString (SLOT)))
                    If (CondRefOf (GP1E))
                    {
                        If ((GP1E != Zero))
                        {
                            Return (GPRW (0xC7, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("_PS0 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS0))
                {
                    ADBG ("Calling Platform PCIE RP PS0 Hook")
                    PPS0 ()
                    ADBG ("Returned from Platform PCIE RP PS0 Hook")
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("_PS3 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS3))
                {
                    ADBG ("Calling Platform PCIE RP PS3 Hook")
                    PPS3 ()
                    ADBG ("Returned from Platform PCIE RP PS3 Hook")
                }
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG (Concatenate ("_DSD PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (ADSD))
                {
                    ADBG (Concatenate ("Alternate _DSD PCIe RP", ToHexString (SLOT)))
                    Return (ADSD ())
                }

                If (CondRefOf (PINI))
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }, 

                        ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                        Package (0x00){}
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }
        }

        Scope (RP11)
        {
            Name (PBNU, Zero)
            Name (SLOT, 0x0B)
            Name (PRTP, 0x04)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRB /* \LTRB */
                LMSL = PMLB /* \PMLB */
                LNSL = PNLB /* \PNLB */
                If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMSP & 0x04) != Zero)))
                    {
                        ADBG ("RP11 (0/6/2) is mapped under VMD")
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP11))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP11.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    ADBG (Concatenate ("VMD Storage Runtime D3 status:", ToHexString (RD3C)))
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                ADBG (Concatenate ("Storage Runtime D3 status:", ToHexString (RD3C)))
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR, PBNU), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0x68), 
                    ,   10, 
                LNRE,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                Offset (0x32B), 
                LTSM,   8, 
                Offset (0x404), 
                LSOE,   1, 
                LNSE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at L23D Start  -", ToHexString (LTSM)))
                If ((SCB0 != One))
                {
                    ADBG (Concatenate ("PON SCB ", ToHexString (SLOT)))
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("PCIE L23R TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                SCB0 = Zero
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        ADBG (Concatenate ("PCIE LASX TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("PCIe RP LTSSM at L23D End -", ToHexString (LTSM)))
            }

            Method (DL23, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 Start -", ToHexString (LTSM)))
                If (((LASX == One) && (LNRE == Zero)))
                {
                    If (((LSOE == One) || (LNSE == One)))
                    {
                        LNRE = One
                        Sleep (One)
                        LNRE = Zero
                        ADBG ("Toggle LNRE")
                    }
                }

                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("POF L23E TO", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("POF RP ", ToHexString (SLOT)))
                SCB0 = One
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 End -", ToHexString (LTSM)))
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            ADBG (Concatenate ("_DSM PCIe RP OPTS -", ToHexString (OPTS)))
                            Return (OPTS) /* \_SB_.PC00.RP11._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP11.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                ADBG ("PSSD AHCI")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                ADBG ("PSSD NVMe")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                ADBG ("NVMe D3 Support Enable for Child Device")
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    ADBG (Concatenate ("_PRW PCIe RP", ToHexString (SLOT)))
                    If (CondRefOf (GP1E))
                    {
                        If ((GP1E != Zero))
                        {
                            Return (GPRW (0xC7, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("_PS0 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS0))
                {
                    ADBG ("Calling Platform PCIE RP PS0 Hook")
                    PPS0 ()
                    ADBG ("Returned from Platform PCIE RP PS0 Hook")
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("_PS3 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS3))
                {
                    ADBG ("Calling Platform PCIE RP PS3 Hook")
                    PPS3 ()
                    ADBG ("Returned from Platform PCIE RP PS3 Hook")
                }
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG (Concatenate ("_DSD PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (ADSD))
                {
                    ADBG (Concatenate ("Alternate _DSD PCIe RP", ToHexString (SLOT)))
                    Return (ADSD ())
                }

                If (CondRefOf (PINI))
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }, 

                        ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                        Package (0x00){}
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }
        }

        Scope (RP12)
        {
            Name (PBNU, Zero)
            Name (SLOT, 0x0C)
            Name (PRTP, 0x04)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRC /* \LTRC */
                LMSL = PMLC /* \PMLC */
                LNSL = PNLC /* \PNLC */
                If ((CondRefOf (VMSP) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMSP & 0x20) != Zero)))
                    {
                        ADBG ("RP12 (0/1/0) is mapped under VMD")
                        PRMV = One
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP12))
                {
                    If ((VDID != 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP12.PRMV))
                            {
                                If ((PRMV == One))
                                {
                                    ADBG (Concatenate ("VMD Storage Runtime D3 status:", ToHexString (RD3C)))
                                    RD3C = STD3 /* \STD3 */
                                }
                            }

                            If ((^PXSX.PNVM () || ^PXSX.PAHC ()))
                            {
                                ADBG (Concatenate ("Storage Runtime D3 status:", ToHexString (RD3C)))
                                RD3C = STD3 /* \STD3 */
                            }
                        }
                    }
                }
            }

            OperationRegion (PXCS, SystemMemory, PC2M (_ADR, PBNU), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0x68), 
                    ,   10, 
                LNRE,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                Offset (0x32B), 
                LTSM,   8, 
                Offset (0x404), 
                LSOE,   1, 
                LNSE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at L23D Start  -", ToHexString (LTSM)))
                If ((SCB0 != One))
                {
                    ADBG (Concatenate ("PON SCB ", ToHexString (SLOT)))
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("PCIE L23R TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                SCB0 = Zero
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        ADBG (Concatenate ("PCIE LASX TO ", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("PCIe RP LTSSM at L23D End -", ToHexString (LTSM)))
            }

            Method (DL23, 0, Serialized)
            {
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 Start -", ToHexString (LTSM)))
                If (((LASX == One) && (LNRE == Zero)))
                {
                    If (((LSOE == One) || (LNSE == One)))
                    {
                        LNRE = One
                        Sleep (One)
                        LNRE = Zero
                        ADBG ("Toggle LNRE")
                    }
                }

                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        ADBG (Concatenate ("POF L23E TO", ToHexString (SLOT)))
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                ADBG (Concatenate ("POF RP ", ToHexString (SLOT)))
                SCB0 = One
                ADBG (Concatenate ("PCIe RP LTSSM at DL23 End -", ToHexString (LTSM)))
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If ((LTEN != Zero))
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            ADBG (Concatenate ("_DSM PCIe RP OPTS -", ToHexString (OPTS)))
                            Return (OPTS) /* \_SB_.PC00.RP12._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.RP12.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x06))
                        {
                            If ((PIXX == One))
                            {
                                ADBG ("PSSD AHCI")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If ((BCCX == One))
                    {
                        If ((SCCX == 0x08))
                        {
                            If ((PIXX == 0x02))
                            {
                                ADBG ("PSSD NVMe")
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If ((DVID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If ((BCCX == 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If ((STD3 != Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If ((PAHC () || PNVM ()))
                            {
                                ADBG ("NVMe D3 Support Enable for Child Device")
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    ADBG (Concatenate ("_PRW PCIe RP", ToHexString (SLOT)))
                    If (CondRefOf (GP1E))
                    {
                        If ((GP1E != Zero))
                        {
                            Return (GPRW (0xC7, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("_PS0 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS0))
                {
                    ADBG ("Calling Platform PCIE RP PS0 Hook")
                    PPS0 ()
                    ADBG ("Returned from Platform PCIE RP PS0 Hook")
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("_PS3 PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (PPS3))
                {
                    ADBG ("Calling Platform PCIE RP PS3 Hook")
                    PPS3 ()
                    ADBG ("Returned from Platform PCIE RP PS3 Hook")
                }
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG (Concatenate ("_DSD PCIe RP", ToHexString (SLOT)))
                If (CondRefOf (ADSD))
                {
                    ADBG (Concatenate ("Alternate _DSD PCIe RP", ToHexString (SLOT)))
                    Return (ADSD ())
                }

                If (CondRefOf (PINI))
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }, 

                        ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb") /* Unknown UUID */, 
                        Package (0x00){}
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "FundamentalDeviceResetTriggeredOnD3ToD0", 
                                One
                            }
                        }
                    })
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Scope (PXSX)
            {
                If ((DGBA != Zero))
                {
                    Device (PEGB)
                    {
                        Name (_ADR, 0x00010000)  // _ADR: Address
                        Device (PEGE)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If ((Arg0 == ToUUID ("edbf573d-e352-4ce7-bf23-37ce9f8402b8") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (Zero)
                                        {
                                            If ((Arg1 == One))
                                            {
                                                Debug = "DG Supported Functions Bitmap "
                                                ADBG ("DG _DSM Fun0")
                                                Local0 = One
                                                If ((EDMX != Zero))
                                                {
                                                    ADBG ("Display Mux Supported")
                                                    Local0 |= 0x00200000
                                                }

                                                Local0 |= 0x00400000
                                                ADBG (Concatenate ("IGFX DSM Function Support = ", ToHexString (Local0)))
                                                Return (Local0)
                                            }
                                        }
                                        Case (0x15)
                                        {
                                            Name (DGDB, Buffer (0x05)
                                            {
                                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                                            })
                                            CreateDWordField (DGDB, Zero, DGDF)
                                            CreateByteField (DGDB, 0x04, DGSF)
                                            Local0 = One
                                            ADBG ("DG eDP _DSM (21)")
                                            If (((DerefOf (Arg3 [Zero]) & One) == Zero))
                                            {
                                                ADBG ("Get Current Disp Mux Status")
                                                GGOV (EDMX)
                                                Local0 = Zero
                                            }
                                            Else
                                            {
                                                ADBG ("Set Disp Mux Status")
                                                If (((DerefOf (Arg3 [Zero]) & 0x02) == Zero))
                                                {
                                                    ADBG ("Set Disp Mux to iGfx")
                                                    SGOV (EDMX, Zero)
                                                    Local0 = Zero
                                                }
                                                Else
                                                {
                                                    ADBG ("Set Disp Mux to dGfx")
                                                    SGOV (EDMX, One)
                                                    Local0 = Zero
                                                }
                                            }

                                            DGDF = (GGOV (EDMX) << One)
                                            DGSF = Local0
                                            ADBG (Concatenate ("ExitResult :: ", ToHexString (DGSF)))
                                            ADBG (Concatenate ("Current Mux :: ", ToHexString (DGDF)))
                                            Return (DGDB) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DSM.DGDB */
                                        }
                                        Case (0x16)
                                        {
                                            Switch (ToInteger (Arg3))
                                            {
                                                Case (Zero)
                                                {
                                                    If (CondRefOf (\_SB.PC00.LPCB.H_EC.LSTE))
                                                    {
                                                        ^^^^^LPCB.H_EC.ECWT (Zero, RefOf (^^^^^LPCB.H_EC.LSTE))
                                                        LIDS = Zero
                                                        CLID = Zero
                                                        ADBG ("Notify LID0")
                                                        Notify (^^^^^LPCB.H_EC.LID0, 0x80) // Status Change
                                                        ADBG ("OS Notified")
                                                        Return (Zero)
                                                    }
                                                    Else
                                                    {
                                                        ADBG ("Lid close failed")
                                                    }
                                                }
                                                Case (One)
                                                {
                                                    If (CondRefOf (\_SB.PC00.LPCB.H_EC.LSTE))
                                                    {
                                                        ^^^^^LPCB.H_EC.ECWT (One, RefOf (^^^^^LPCB.H_EC.LSTE))
                                                        LIDS = One
                                                        CLID = 0x03
                                                        ADBG ("Notify LID0")
                                                        Notify (^^^^^LPCB.H_EC.LID0, 0x80) // Status Change
                                                        ADBG ("OS Notified")
                                                        Return (Zero)
                                                    }
                                                    Else
                                                    {
                                                        ADBG ("Lid open failed")
                                                    }
                                                }
                                                Default
                                                {
                                                    Return (One)
                                                }

                                            }
                                        }

                                    }
                                }

                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }

                            Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                            {
                                DGDS = (Arg0 & 0x07)
                            }

                            Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                            {
                                DNID = One
                                If ((DIDL != Zero))
                                {
                                    DGD1 = DGDL (DIDL)
                                }

                                If ((DDL2 != Zero))
                                {
                                    DGD2 = DGDL (DDL2)
                                }

                                If ((DDL3 != Zero))
                                {
                                    DGD3 = DGDL (DDL3)
                                }

                                If ((DDL4 != Zero))
                                {
                                    DGD4 = DGDL (DDL4)
                                }

                                If ((DDL5 != Zero))
                                {
                                    DGD5 = DGDL (DDL5)
                                }

                                If ((DDL6 != Zero))
                                {
                                    DGD6 = DGDL (DDL6)
                                }

                                If ((DDL7 != Zero))
                                {
                                    DGD7 = DGDL (DDL7)
                                }

                                If ((DDL8 != Zero))
                                {
                                    DGD8 = DGDL (DDL8)
                                }

                                If ((DDL9 != Zero))
                                {
                                    DGD9 = DGDL (DDL9)
                                }

                                If ((DD10 != Zero))
                                {
                                    DGDA = DGDL (DD10)
                                }

                                If ((DD11 != Zero))
                                {
                                    DGDB = DGDL (DD11)
                                }

                                If ((DD12 != Zero))
                                {
                                    DGDC = DGDL (DD12)
                                }

                                If ((DD13 != Zero))
                                {
                                    DGDD = DGDL (DD13)
                                }

                                If ((DD14 != Zero))
                                {
                                    DGDE = DGDL (DD14)
                                }

                                If ((DD15 != Zero))
                                {
                                    DGDF = DGDL (DD15)
                                }

                                If ((DNID == One))
                                {
                                    Name (TMP1, Package (0x01)
                                    {
                                        0xFFFFFFFF
                                    })
                                    TMP1 [Zero] = (0x00010000 | DGD1)
                                    Return (TMP1) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMP1 */
                                }

                                If ((DNID == 0x02))
                                {
                                    Name (TMP2, Package (0x02)
                                    {
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF
                                    })
                                    TMP2 [Zero] = (0x00010000 | DGD1)
                                    TMP2 [One] = (0x00010000 | DGD2)
                                    Return (TMP2) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMP2 */
                                }

                                If ((DNID == 0x03))
                                {
                                    Name (TMP3, Package (0x03)
                                    {
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF
                                    })
                                    TMP3 [Zero] = (0x00010000 | DGD1)
                                    TMP3 [One] = (0x00010000 | DGD2)
                                    TMP3 [0x02] = (0x00010000 | DGD3)
                                    Return (TMP3) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMP3 */
                                }

                                If ((DNID == 0x04))
                                {
                                    Name (TMP4, Package (0x04)
                                    {
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF
                                    })
                                    TMP4 [Zero] = (0x00010000 | DGD1)
                                    TMP4 [One] = (0x00010000 | DGD2)
                                    TMP4 [0x02] = (0x00010000 | DGD3)
                                    TMP4 [0x03] = (0x00010000 | DGD4)
                                    Return (TMP4) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMP4 */
                                }

                                If ((DNID == 0x05))
                                {
                                    Name (TMP5, Package (0x05)
                                    {
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF
                                    })
                                    TMP5 [Zero] = (0x00010000 | DGD1)
                                    TMP5 [One] = (0x00010000 | DGD2)
                                    TMP5 [0x02] = (0x00010000 | DGD3)
                                    TMP5 [0x03] = (0x00010000 | DGD4)
                                    TMP5 [0x04] = (0x00010000 | DGD5)
                                    Return (TMP5) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMP5 */
                                }

                                If ((DNID == 0x06))
                                {
                                    Name (TMP6, Package (0x06)
                                    {
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF
                                    })
                                    TMP6 [Zero] = (0x00010000 | DGD1)
                                    TMP6 [One] = (0x00010000 | DGD2)
                                    TMP6 [0x02] = (0x00010000 | DGD3)
                                    TMP6 [0x03] = (0x00010000 | DGD4)
                                    TMP6 [0x04] = (0x00010000 | DGD5)
                                    TMP6 [0x05] = (0x00010000 | DGD6)
                                    Return (TMP6) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMP6 */
                                }

                                If ((DNID == 0x07))
                                {
                                    Name (TMP7, Package (0x07)
                                    {
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF
                                    })
                                    TMP7 [Zero] = (0x00010000 | DGD1)
                                    TMP7 [One] = (0x00010000 | DGD2)
                                    TMP7 [0x02] = (0x00010000 | DGD3)
                                    TMP7 [0x03] = (0x00010000 | DGD4)
                                    TMP7 [0x04] = (0x00010000 | DGD5)
                                    TMP7 [0x05] = (0x00010000 | DGD6)
                                    TMP7 [0x06] = (0x00010000 | DGD7)
                                    Return (TMP7) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMP7 */
                                }

                                If ((DNID == 0x08))
                                {
                                    Name (TMP8, Package (0x08)
                                    {
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF
                                    })
                                    TMP8 [Zero] = (0x00010000 | DGD1)
                                    TMP8 [One] = (0x00010000 | DGD2)
                                    TMP8 [0x02] = (0x00010000 | DGD3)
                                    TMP8 [0x03] = (0x00010000 | DGD4)
                                    TMP8 [0x04] = (0x00010000 | DGD5)
                                    TMP8 [0x05] = (0x00010000 | DGD6)
                                    TMP8 [0x06] = (0x00010000 | DGD7)
                                    TMP8 [0x07] = (0x00010000 | DGD8)
                                    Return (TMP8) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMP8 */
                                }

                                If ((DNID == 0x09))
                                {
                                    Name (TMP9, Package (0x09)
                                    {
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF
                                    })
                                    TMP9 [Zero] = (0x00010000 | DGD1)
                                    TMP9 [One] = (0x00010000 | DGD2)
                                    TMP9 [0x02] = (0x00010000 | DGD3)
                                    TMP9 [0x03] = (0x00010000 | DGD4)
                                    TMP9 [0x04] = (0x00010000 | DGD5)
                                    TMP9 [0x05] = (0x00010000 | DGD6)
                                    TMP9 [0x06] = (0x00010000 | DGD7)
                                    TMP9 [0x07] = (0x00010000 | DGD8)
                                    TMP9 [0x08] = (0x00010000 | DGD9)
                                    Return (TMP9) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMP9 */
                                }

                                If ((DNID == 0x0A))
                                {
                                    Name (TMPA, Package (0x0A)
                                    {
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF
                                    })
                                    TMPA [Zero] = (0x00010000 | DGD1)
                                    TMPA [One] = (0x00010000 | DGD2)
                                    TMPA [0x02] = (0x00010000 | DGD3)
                                    TMPA [0x03] = (0x00010000 | DGD4)
                                    TMPA [0x04] = (0x00010000 | DGD5)
                                    TMPA [0x05] = (0x00010000 | DGD6)
                                    TMPA [0x06] = (0x00010000 | DGD7)
                                    TMPA [0x07] = (0x00010000 | DGD8)
                                    TMPA [0x08] = (0x00010000 | DGD9)
                                    TMPA [0x09] = (0x00010000 | DGDA)
                                    Return (TMPA) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMPA */
                                }

                                If ((DNID == 0x0B))
                                {
                                    Name (TMPB, Package (0x0B)
                                    {
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF
                                    })
                                    TMPB [Zero] = (0x00010000 | DGD1)
                                    TMPB [One] = (0x00010000 | DGD2)
                                    TMPB [0x02] = (0x00010000 | DGD3)
                                    TMPB [0x03] = (0x00010000 | DGD4)
                                    TMPB [0x04] = (0x00010000 | DGD5)
                                    TMPB [0x05] = (0x00010000 | DGD6)
                                    TMPB [0x06] = (0x00010000 | DGD7)
                                    TMPB [0x07] = (0x00010000 | DGD8)
                                    TMPB [0x08] = (0x00010000 | DGD9)
                                    TMPB [0x09] = (0x00010000 | DGDA)
                                    TMPB [0x0A] = (0x00010000 | DGDB)
                                    Return (TMPB) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMPB */
                                }

                                If ((DNID == 0x0C))
                                {
                                    Name (TMPC, Package (0x0C)
                                    {
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF
                                    })
                                    TMPC [Zero] = (0x00010000 | DGD1)
                                    TMPC [One] = (0x00010000 | DGD2)
                                    TMPC [0x02] = (0x00010000 | DGD3)
                                    TMPC [0x03] = (0x00010000 | DGD4)
                                    TMPC [0x04] = (0x00010000 | DGD5)
                                    TMPC [0x05] = (0x00010000 | DGD6)
                                    TMPC [0x06] = (0x00010000 | DGD7)
                                    TMPC [0x07] = (0x00010000 | DGD8)
                                    TMPC [0x08] = (0x00010000 | DGD9)
                                    TMPC [0x09] = (0x00010000 | DGDA)
                                    TMPC [0x0A] = (0x00010000 | DGDB)
                                    TMPC [0x0B] = (0x00010000 | DGDC)
                                    Return (TMPC) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMPC */
                                }

                                If ((DNID == 0x0D))
                                {
                                    Name (TMPD, Package (0x0D)
                                    {
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF
                                    })
                                    TMPD [Zero] = (0x00010000 | DGD1)
                                    TMPD [One] = (0x00010000 | DGD2)
                                    TMPD [0x02] = (0x00010000 | DGD3)
                                    TMPD [0x03] = (0x00010000 | DGD4)
                                    TMPD [0x04] = (0x00010000 | DGD5)
                                    TMPD [0x05] = (0x00010000 | DGD6)
                                    TMPD [0x06] = (0x00010000 | DGD7)
                                    TMPD [0x07] = (0x00010000 | DGD8)
                                    TMPD [0x08] = (0x00010000 | DGD9)
                                    TMPD [0x09] = (0x00010000 | DGDA)
                                    TMPD [0x0A] = (0x00010000 | DGDB)
                                    TMPD [0x0B] = (0x00010000 | DGDC)
                                    TMPD [0x0C] = (0x00010000 | DGDD)
                                    Return (TMPD) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMPD */
                                }

                                If ((DNID == 0x0E))
                                {
                                    Name (TMPE, Package (0x0E)
                                    {
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF
                                    })
                                    TMPE [Zero] = (0x00010000 | DGD1)
                                    TMPE [One] = (0x00010000 | DGD2)
                                    TMPE [0x02] = (0x00010000 | DGD3)
                                    TMPE [0x03] = (0x00010000 | DGD4)
                                    TMPE [0x04] = (0x00010000 | DGD5)
                                    TMPE [0x05] = (0x00010000 | DGD6)
                                    TMPE [0x06] = (0x00010000 | DGD7)
                                    TMPE [0x07] = (0x00010000 | DGD8)
                                    TMPE [0x08] = (0x00010000 | DGD9)
                                    TMPE [0x09] = (0x00010000 | DGDA)
                                    TMPE [0x0A] = (0x00010000 | DGDB)
                                    TMPE [0x0B] = (0x00010000 | DGDC)
                                    TMPE [0x0C] = (0x00010000 | DGDD)
                                    TMPE [0x0D] = (0x00010000 | DGDE)
                                    Return (TMPE) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMPE */
                                }

                                If ((DNID == 0x0F))
                                {
                                    Name (TMPF, Package (0x0F)
                                    {
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF
                                    })
                                    TMPF [Zero] = (0x00010000 | DGD1)
                                    TMPF [One] = (0x00010000 | DGD2)
                                    TMPF [0x02] = (0x00010000 | DGD3)
                                    TMPF [0x03] = (0x00010000 | DGD4)
                                    TMPF [0x04] = (0x00010000 | DGD5)
                                    TMPF [0x05] = (0x00010000 | DGD6)
                                    TMPF [0x06] = (0x00010000 | DGD7)
                                    TMPF [0x07] = (0x00010000 | DGD8)
                                    TMPF [0x08] = (0x00010000 | DGD9)
                                    TMPF [0x09] = (0x00010000 | DGDA)
                                    TMPF [0x0A] = (0x00010000 | DGDB)
                                    TMPF [0x0B] = (0x00010000 | DGDC)
                                    TMPF [0x0C] = (0x00010000 | DGDD)
                                    TMPF [0x0D] = (0x00010000 | DGDE)
                                    TMPF [0x0E] = (0x00010000 | DGDF)
                                    Return (TMPF) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMPF */
                                }

                                If ((DNID == 0x10))
                                {
                                    Name (TMPG, Package (0x10)
                                    {
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF, 
                                        0xFFFFFFFF
                                    })
                                    TMPG [Zero] = (0x00010000 | DGD1)
                                    TMPG [One] = (0x00010000 | DGD2)
                                    TMPG [0x02] = (0x00010000 | DGD3)
                                    TMPG [0x03] = (0x00010000 | DGD4)
                                    TMPG [0x04] = (0x00010000 | DGD5)
                                    TMPG [0x05] = (0x00010000 | DGD6)
                                    TMPG [0x06] = (0x00010000 | DGD7)
                                    TMPG [0x07] = (0x00010000 | DGD8)
                                    TMPG [0x08] = (0x00010000 | DGD9)
                                    TMPG [0x09] = (0x00010000 | DGDA)
                                    TMPG [0x0A] = (0x00010000 | DGDB)
                                    TMPG [0x0B] = (0x00010000 | DGDC)
                                    TMPG [0x0C] = (0x00010000 | DGDD)
                                    TMPG [0x0D] = (0x00010000 | DGDE)
                                    TMPG [0x0E] = (0x00010000 | DGDF)
                                    Return (TMPG) /* \_SB_.PC00.RP12.PXSX.PEGB.PEGE._DOD.TMPG */
                                }

                                Return (Package (0x01)
                                {
                                    0x0400
                                })
                            }

                            Device (DEDP)
                            {
                                Method (_ADR, 0, Serialized)  // _ADR: Address
                                {
                                    If (((0x0F00 & DGD1) == 0x0400))
                                    {
                                        DGDX = DGD1 /* External reference */
                                        Return ((0xFFFF & DGDX))
                                    }
                                    ElseIf (((0x0F00 & DGD2) == 0x0400))
                                    {
                                        DGDX = DGD2 /* External reference */
                                        Return ((0xFFFF & DGDX))
                                    }
                                    ElseIf (((0x0F00 & DGD3) == 0x0400))
                                    {
                                        DGDX = DGD3 /* External reference */
                                        Return ((0xFFFF & DGDX))
                                    }
                                    ElseIf (((0x0F00 & DGD4) == 0x0400))
                                    {
                                        DGDX = DGD4 /* External reference */
                                        Return ((0xFFFF & DGDX))
                                    }
                                    ElseIf (((0x0F00 & DGD5) == 0x0400))
                                    {
                                        DGDX = DGD5 /* External reference */
                                        Return ((0xFFFF & DGDX))
                                    }
                                    ElseIf (((0x0F00 & DGD6) == 0x0400))
                                    {
                                        DGDX = DGD6 /* External reference */
                                        Return ((0xFFFF & DGDX))
                                    }
                                    ElseIf (((0x0F00 & DGD7) == 0x0400))
                                    {
                                        DGDX = DGD7 /* External reference */
                                        Return ((0xFFFF & DGDX))
                                    }
                                    ElseIf (((0x0F00 & DGD8) == 0x0400))
                                    {
                                        DGDX = DGD8 /* External reference */
                                        Return ((0xFFFF & DGDX))
                                    }
                                    ElseIf (((0x0F00 & DGD9) == 0x0400))
                                    {
                                        DGDX = DGD9 /* External reference */
                                        Return ((0xFFFF & DGDX))
                                    }
                                    ElseIf (((0x0F00 & DGDA) == 0x0400))
                                    {
                                        DGDX = DGDA /* External reference */
                                        Return ((0xFFFF & DGDX))
                                    }
                                    ElseIf (((0x0F00 & DGDB) == 0x0400))
                                    {
                                        DGDX = DGDB /* External reference */
                                        Return ((0xFFFF & DGDX))
                                    }
                                    ElseIf (((0x0F00 & DGDC) == 0x0400))
                                    {
                                        DGDX = DGDC /* External reference */
                                        Return ((0xFFFF & DGDX))
                                    }
                                    ElseIf (((0x0F00 & DGDD) == 0x0400))
                                    {
                                        DGDX = DGDD /* External reference */
                                        Return ((0xFFFF & DGDX))
                                    }
                                    ElseIf (((0x0F00 & DGDE) == 0x0400))
                                    {
                                        DGDX = DGDE /* External reference */
                                        Return ((0xFFFF & DGDX))
                                    }
                                    ElseIf (((0x0F00 & DGDF) == 0x0400))
                                    {
                                        DGDX = DGDF /* External reference */
                                        Return ((0xFFFF & DGDX))
                                    }
                                    Else
                                    {
                                        ADBG ("DG: eDP is not present")
                                        Return (0x1F)
                                    }
                                }

                                Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                                {
                                    Return (Package (0x67)
                                    {
                                        0x50, 
                                        0x32, 
                                        Zero, 
                                        One, 
                                        0x02, 
                                        0x03, 
                                        0x04, 
                                        0x05, 
                                        0x06, 
                                        0x07, 
                                        0x08, 
                                        0x09, 
                                        0x0A, 
                                        0x0B, 
                                        0x0C, 
                                        0x0D, 
                                        0x0E, 
                                        0x0F, 
                                        0x10, 
                                        0x11, 
                                        0x12, 
                                        0x13, 
                                        0x14, 
                                        0x15, 
                                        0x16, 
                                        0x17, 
                                        0x18, 
                                        0x19, 
                                        0x1A, 
                                        0x1B, 
                                        0x1C, 
                                        0x1D, 
                                        0x1E, 
                                        0x1F, 
                                        0x20, 
                                        0x21, 
                                        0x22, 
                                        0x23, 
                                        0x24, 
                                        0x25, 
                                        0x26, 
                                        0x27, 
                                        0x28, 
                                        0x29, 
                                        0x2A, 
                                        0x2B, 
                                        0x2C, 
                                        0x2D, 
                                        0x2E, 
                                        0x2F, 
                                        0x30, 
                                        0x31, 
                                        0x32, 
                                        0x33, 
                                        0x34, 
                                        0x35, 
                                        0x36, 
                                        0x37, 
                                        0x38, 
                                        0x39, 
                                        0x3A, 
                                        0x3B, 
                                        0x3C, 
                                        0x3D, 
                                        0x3E, 
                                        0x3F, 
                                        0x40, 
                                        0x41, 
                                        0x42, 
                                        0x43, 
                                        0x44, 
                                        0x45, 
                                        0x46, 
                                        0x47, 
                                        0x48, 
                                        0x49, 
                                        0x4A, 
                                        0x4B, 
                                        0x4C, 
                                        0x4D, 
                                        0x4E, 
                                        0x4F, 
                                        0x50, 
                                        0x51, 
                                        0x52, 
                                        0x53, 
                                        0x54, 
                                        0x55, 
                                        0x56, 
                                        0x57, 
                                        0x58, 
                                        0x59, 
                                        0x5A, 
                                        0x5B, 
                                        0x5C, 
                                        0x5D, 
                                        0x5E, 
                                        0x5F, 
                                        0x60, 
                                        0x61, 
                                        0x62, 
                                        0x63, 
                                        0x64
                                    })
                                }

                                Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                                {
                                    If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                                    {
                                        BCLP = ((Arg0 * 0xFF) / 0x64)
                                        BCLP |= 0x80000000
                                        ASLC = 0x02
                                        DBRL = Arg0
                                    }
                                }

                                Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                                {
                                    Return (DBRL) /* External reference */
                                }
                            }

                            Method (DGDL, 1, NotSerialized)
                            {
                                DNID++
                                Local0 = (Arg0 & 0x0F0F)
                                Local1 = (0x80000000 | Local0)
                                If ((DIDL == Local0))
                                {
                                    Return (Local1)
                                }

                                If ((DDL2 == Local0))
                                {
                                    Return (Local1)
                                }

                                If ((DDL3 == Local0))
                                {
                                    Return (Local1)
                                }

                                If ((DDL4 == Local0))
                                {
                                    Return (Local1)
                                }

                                If ((DDL5 == Local0))
                                {
                                    Return (Local1)
                                }

                                If ((DDL6 == Local0))
                                {
                                    Return (Local1)
                                }

                                If ((DDL7 == Local0))
                                {
                                    Return (Local1)
                                }

                                If ((DDL8 == Local0))
                                {
                                    Return (Local1)
                                }

                                If ((DDL9 == Local0))
                                {
                                    Return (Local1)
                                }

                                If ((DD10 == Local0))
                                {
                                    Return (Local1)
                                }

                                If ((DD11 == Local0))
                                {
                                    Return (Local1)
                                }

                                If ((DD12 == Local0))
                                {
                                    Return (Local1)
                                }

                                If ((DD13 == Local0))
                                {
                                    Return (Local1)
                                }

                                If ((DD14 == Local0))
                                {
                                    Return (Local1)
                                }

                                If ((DD15 == Local0))
                                {
                                    Return (Local1)
                                }

                                Return (Zero)
                            }
                        }
                    }
                }
            }
        }
    }

    Scope (_SB.PC00.LPCB)
    {
    }

    Scope (_SB.PC00.LPCB)
    {
        Device (HPET)
        {
            Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    _Y46)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HPTE)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (HPTE)
                {
                    CreateDWordField (BUF0, \_SB.PC00.LPCB.HPET._Y46._BAS, HPT0)  // _BAS: Base Address
                    HPT0 = HPTB /* \HPTB */
                }

                Return (BUF0) /* \_SB_.PC00.LPCB.HPET.BUF0 */
            }
        }

        Device (IPIC)
        {
            Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0020,             // Range Minimum
                    0x0020,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0024,             // Range Minimum
                    0x0024,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0028,             // Range Minimum
                    0x0028,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x002C,             // Range Minimum
                    0x002C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0030,             // Range Minimum
                    0x0030,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0034,             // Range Minimum
                    0x0034,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0038,             // Range Minimum
                    0x0038,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x003C,             // Range Minimum
                    0x003C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A0,             // Range Minimum
                    0x00A0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A4,             // Range Minimum
                    0x00A4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A8,             // Range Minimum
                    0x00A8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00AC,             // Range Minimum
                    0x00AC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B0,             // Range Minimum
                    0x00B0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B4,             // Range Minimum
                    0x00B4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B8,             // Range Minimum
                    0x00B8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00BC,             // Range Minimum
                    0x00BC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x04D0,             // Range Minimum
                    0x04D0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IRQNoFlags ()
                    {2}
            })
        }

        Device (MATH)
        {
            Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x00F0,             // Range Minimum
                    0x00F0,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {13}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PCHS == PCHH))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (LDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x002E,             // Range Minimum
                    0x002E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x004E,             // Range Minimum
                    0x004E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0061,             // Range Minimum
                    0x0061,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0063,             // Range Minimum
                    0x0063,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0065,             // Range Minimum
                    0x0065,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0067,             // Range Minimum
                    0x0067,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0080,             // Range Minimum
                    0x0080,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0092,             // Range Minimum
                    0x0092,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x00B2,             // Range Minimum
                    0x00B2,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0680,             // Range Minimum
                    0x0680,             // Range Maximum
                    0x01,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0x164E,             // Range Minimum
                    0x164E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
            })
        }

        Device (RTC)
        {
            Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                IRQNoFlags ()
                    {8}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((STAS == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (TIMR)
        {
            Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0040,             // Range Minimum
                    0x0040,             // Range Maximum
                    0x01,               // Alignment
                    0x04,               // Length
                    )
                IO (Decode16,
                    0x0050,             // Range Minimum
                    0x0050,             // Range Maximum
                    0x10,               // Alignment
                    0x04,               // Length
                    )
                IRQNoFlags ()
                    {0}
            })
        }

        Device (CWDT)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((((CPID & 0x0FFF0FF0) == 0x000C0650) || ((CPID & 0x0FFF0FF0
                    ) == 0x000B0650)))
                {
                    Return ("INTC109F")
                }
                ElseIf (((CPID & 0x0FFF0FF0) == 0x000C0660))
                {
                    Return ("INTC109F")
                }
                Else
                {
                    Return ("INTC109D")
                }
            }

            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x04,               // Alignment
                        0x04,               // Length
                        _Y47)
                })
                CreateWordField (RBUF, \_SB.PC00.LPCB.CWDT._CRS._Y47._MIN, OMIN)  // _MIN: Minimum Base Address
                CreateWordField (RBUF, \_SB.PC00.LPCB.CWDT._CRS._Y47._MAX, OMAX)  // _MAX: Maximum Base Address
                OMIN = (PMBS + 0x54)
                OMAX = (PMBS + 0x54)
                Return (RBUF) /* \_SB_.PC00.LPCB.CWDT._CRS.RBUF */
            }
        }
    }

    Scope (_SB.PC00.LPCB)
    {
        Method (ACCF, 1, Serialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DUMY))
            {
                If ((Zero == Arg0))
                {
                    ^H_EC.DUMY.UPCF (Zero)
                }
            }
        }

        Method (NBIX, 0, Serialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DUMY))
            {
                Notify (^H_EC.DUMY.BAT0, 0x81) // Information Change
                Notify (^H_EC.DUMY.BAT1, 0x81) // Information Change
            }
        }

        Method (NBST, 0, Serialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DUMY))
            {
                Notify (^H_EC.DUMY.BAT0, 0x80) // Status Change
                Notify (^H_EC.DUMY.BAT1, 0x80) // Status Change
            }
        }

        Method (SWUB, 4, Serialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DUMY))
            {
                If (((Arg0 == 0x03) || (Arg0 == 0x04)))
                {
                    If ((Arg1 & 0x40))
                    {
                        If ((Arg2 & 0x08))
                        {
                            ^H_EC.DUMY.UPBT (0x06, One)
                        }
                        Else
                        {
                            ^H_EC.DUMY.UPBT (0x06, Zero)
                        }
                    }

                    If ((Arg1 & 0x80))
                    {
                        If ((Arg2 & 0x10))
                        {
                            ^H_EC.DUMY.UPBT (0x07, One)
                        }
                        Else
                        {
                            ^H_EC.DUMY.UPBT (0x07, Zero)
                        }
                    }

                    ^H_EC.DUMY.ONTM = One
                    LIDS = ^H_EC.DUMY.ERLD ()
                    If (Arg3)
                    {
                        If ((LIDS == Zero))
                        {
                            ^^GFX0.CLID = 0x80000000
                        }

                        If ((LIDS == One))
                        {
                            ^^GFX0.CLID = 0x80000003
                        }
                    }

                    Notify (^H_EC.DUMY.LID0, 0x80) // Status Change
                    Local0 = ^H_EC.DUMY.ERB1 ()
                    ^H_EC.DUMY.BNUM = ((Local0 & 0x08) >> 0x03)
                    ADBG (Concatenate ("BNUM resume from Sx: ", ToHexString (^H_EC.DUMY.BNUM)))
                    If ((^H_EC.DUMY.BNUM == Zero))
                    {
                        If ((^H_EC.DUMY.ERVP () != PWRS))
                        {
                            PWRS = ^H_EC.DUMY.ERVP ()
                            SPNT ()
                            BPNT ()
                        }
                    }
                    ElseIf ((^H_EC.DUMY.ERAP () != PWRS))
                    {
                        PWRS = ^H_EC.DUMY.ERAP ()
                        SPNT ()
                        BPNT ()
                    }

                    If ((^^^PWRB.PBST == One))
                    {
                        If (PBSS)
                        {
                            Notify (PWRB, 0x02) // Device Wake
                            PBSS = One
                        }
                    }
                }
            }
        }

        Method (PGWD, 4, Serialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DUMY))
            {
                ^H_EC.DUMY.UTEC (Zero, Arg0)
                ^H_EC.DUMY.UTEC (One, Arg1)
                ^H_EC.DUMY.UTEC (0x02, Arg2)
                ^H_EC.DUMY.UTEC (0x03, Arg3)
            }
        }

        Method (PGCL, 0, Serialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DUMY))
            {
                ^H_EC.DUMY.PGER ()
            }
        }

        Method (MXTP, 0, Serialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DUMY))
            {
                Local0 = ^H_EC.DUMY.ERMT ()
                Local0 = (0x0AAC + (Local0 * 0x0A))
                Return (Local0)
            }

            Return (0x0BC2)
        }

        Method (UPFS, 3, Serialized)
        {
            If ((CondRefOf (\_SB.PC00.LPCB.H_EC.DUMY) && Arg0))
            {
                If (((Arg1 != Zero) && (Arg2 != Zero)))
                {
                    ^H_EC.DUMY.UPFS (One, AC0F)
                }
                ElseIf (((Arg1 == Zero) && (Arg2 != Zero)))
                {
                    ^H_EC.DUMY.UPFS (One, AC1F)
                }
                Else
                {
                    ^H_EC.DUMY.UPFS (One, Zero)
                }
            }
        }

        Method (TSDD, 2, Serialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DUMY))
            {
                Local0 = ((^H_EC.DUMY.ERPH () * 0x0A) + 0x0AAC)
                Local1 = ^H_EC.DUMY.ERSP ()
                Local2 = ^H_EC.DUMY.ERPM ()
                Local3 = ^H_EC.DUMY.ERPD ()
                Local4 = ^H_EC.DUMY.ERPH ()
                If ((Arg0 == One))
                {
                    Arg1 [Zero] = Local0
                    Arg1 [One] = Local0
                    Arg1 [0x02] = Local0
                    Arg1 [0x03] = Local0
                    Arg1 [0x04] = Local0
                    Arg1 [0x06] = (DerefOf (Local1 [One]) + 0x0AAC
                        )
                    Arg1 [0x07] = (DerefOf (Local1 [0x02]) + 0x0AAC
                        )
                    Arg1 [0x08] = (DerefOf (Local1 [0x03]) + 0x0AAC
                        )
                    Arg1 [0x09] = (DerefOf (Local1 [0x04]) + 0x0AAC
                        )
                    Arg1 [0x09] = ((Local2 * 0x0A) + 0x0AAC)
                    Arg1 [0x0A] = ((Local3 * 0x0A) + 0x0AAC)
                    Arg1 [0x0B] = ((Local4 * 0x0A) + 0x0AAC)
                }
                Else
                {
                    Arg1 [Zero] = Local0
                    Arg1 [One] = Local0
                    Arg1 [0x02] = Local0
                    Arg1 [0x03] = Local0
                    Arg1 [0x04] = Local0
                    Arg1 [0x05] = (DerefOf (Local1 [Zero]) + 0x0AAC
                        )
                    Arg1 [0x06] = (DerefOf (Local1 [One]) + 0x0AAC
                        )
                    Arg1 [0x07] = (DerefOf (Local1 [0x02]) + 0x0AAC
                        )
                    Arg1 [0x08] = (DerefOf (Local1 [0x03]) + 0x0AAC
                        )
                    Arg1 [0x09] = (DerefOf (Local1 [0x04]) + 0x0AAC
                        )
                    Arg1 [0x0A] = ((Local2 * 0x0A) + 0x0AAC)
                    Arg1 [0x0B] = ((Local3 * 0x0A) + 0x0AAC)
                    Arg1 [0x0C] = ((Local4 * 0x0A) + 0x0AAC)
                }
            }

            If ((Arg0 == One))
            {
                Arg1 [0x0D] = \_TZ.TZ00._TMP ()
            }
            Else
            {
                Arg1 [0x0E] = \_TZ.TZ00._TMP ()
            }

            Return (Arg1)
        }

        Method (PSDD, 1, Serialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DUMY))
            {
                Arg0 [Zero] = Zero
                Arg0 [One] = Zero
                Arg0 [0x02] = Zero
                Local0 = ^H_EC.DUMY.ERBP ()
                Arg0 [0x06] = DerefOf (Local0 [Zero])
                Arg0 [0x07] = DerefOf (Local0 [One])
                Arg0 [0x08] = DerefOf (Local0 [0x02])
                Arg0 [0x09] = DerefOf (Local0 [0x03])
                Arg0 [0x0A] = DerefOf (Local0 [0x04])
                Arg0 [0x0B] = DerefOf (Local0 [0x05])
                Arg0 [0x0C] = DerefOf (Local0 [0x06])
                Arg0 [0x0D] = DerefOf (Local0 [0x07])
                Arg0 [0x0E] = DerefOf (Local0 [0x08])
                Arg0 [0x0F] = DerefOf (Local0 [0x09])
                Arg0 [0x10] = DerefOf (Local0 [0x0A])
                Local0 = ^H_EC.DUMY.ERBA ()
                If (Local0)
                {
                    Local0 = ~Local0 |= 0xFFFF0000
                    Local0 = (Local0 += One * 0x0A)
                }

                Arg0 [0x11] = Local0
                Arg0 [0x12] = Zero
            }

            Return (Arg0)
        }

        Method (OSDD, 2, Serialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DUMY))
            {
                If ((Arg0 == One))
                {
                    Arg1 [Zero] = ^H_EC.DUMY.ERPN ()
                    Arg1 [One] = ^H_EC.DUMY.ERCF ()
                    Arg1 [0x02] = DerefOf (^H_EC.DUMY.ERSP () [0x02])
                }
                Else
                {
                    Arg1 [Zero] = ^H_EC.DUMY.ERPN ()
                    Arg1 [One] = ^H_EC.DUMY.ERCF ()
                }

                Return (Arg1)
            }

            Return (Package (0x00){})
        }

        Method (RPMD, 0, Serialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DUMY))
            {
                Return (^H_EC.DUMY.ERPC ())
            }

            Return (Buffer (0x1A){})
        }

        Method (WPMD, 1, Serialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DUMY))
            {
                ^H_EC.DUMY.WPED (Arg0)
            }
        }

        Method (ISPC, 0, Serialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DUMY))
            {
                ^H_EC.DUMY.SPET ()
            }
        }

        Method (ENPC, 0, NotSerialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DUMY))
            {
                ^H_EC.DUMY.EPET ()
            }
        }

        Method (RPCS, 0, NotSerialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DUMY))
            {
                Return (^H_EC.DUMY.ERPS ())
            }

            Return (Zero)
        }

        Method (RPEC, 0, NotSerialized)
        {
            Local0 = Zero
            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DUMY))
            {
                Local1 = ^H_EC.DUMY.ERPE ()
                Local0 |= DerefOf (Local1 [Zero])
                Local0 |= (DerefOf (Local1 [One]) << 0x08)
                Local0 |= (DerefOf (Local1 [0x02]) << 0x10)
                Local0 |= (DerefOf (Local1 [0x03]) << 0x18)
            }

            Return (Local0)
        }

        Method (UPDK, 1, Serialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DUMY.UPBT))
            {
                ^H_EC.DUMY.UPBT (0x90, Arg0)
            }
        }

        Method (NTIR, 1, Serialized)
        {
        }

        Method (WKEC, 0, Serialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DUMY))
            {
                If ((LIDS != ^H_EC.DUMY.ERLD ()))
                {
                    LIDS = ^H_EC.DUMY.ERLD ()
                    If (IGDS)
                    {
                        If (^^GFX0.GLID (LIDS))
                        {
                            ^^GFX0.CLID |= 0x80000000 /* External reference */
                        }
                    }

                    If ((DGBA != Zero))
                    {
                        If (^^RP12.DLID (LIDS))
                        {
                            ^^RP12.CLID |= 0x80000000 /* External reference */
                        }
                    }

                    Notify (^H_EC.DUMY.LID0, 0x80) // Status Change
                }
                Else
                {
                    If ((^H_EC.DUMY.BNUM == Zero))
                    {
                        If ((PWRS != ^H_EC.DUMY.ERVP ()))
                        {
                            PWRS = ^H_EC.DUMY.ERVP ()
                            SPNT ()
                            BPNT ()
                        }
                    }

                    Notify (PWRB, 0x02) // Device Wake
                }
            }
        }

        Method (NRTS, 1, Serialized)
        {
            If (CondRefOf (RPSG))
            {
                If ((RPSG != Zero))
                {
                    ^^^PGPI.SGOV (RPSG, Arg0)
                }
            }
        }

        Method (XDAT, 0, Serialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DUMY.XDAT))
            {
                Return (^H_EC.DUMY.XDAT ())
            }

            Return (Zero)
        }
    }

    Mutex (MUTX, 0x00)
    Mutex (OSUM, 0x00)
    Mutex (WWMT, 0x00)
    Mutex (CNMT, 0x00)
    OperationRegion (PRT0, SystemIO, 0x80, 0x02)
    Field (PRT0, WordAcc, Lock, Preserve)
    {
        P80B,   16
    }

    Name (P80T, Zero)
    Method (D8XH, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            P80T = ((P80T & 0xFF00) | Arg1)
        }

        If ((Arg0 == One))
        {
            P80T = ((P80T & 0xFF) | (Arg1 << 0x08))
        }

        P80B = P80T /* \P80T */
    }

    Method (P8XH, 2, Serialized)
    {
        If (CondRefOf (MDBG))
        {
            D8XH (Arg0, Arg1)
        }
    }

    OperationRegion (U3F8, SystemIO, 0x03F8, 0x10)
    Field (U3F8, ByteAcc, Lock, Preserve)
    {
        TXBF,   8, 
        DLM,    8, 
        FCR,    8, 
        LCR,    8
    }

    Method (SDBG, 1, Serialized)
    {
        Name (TXBU, Zero)
        Name (DLBU, Zero)
        Name (FCBU, Zero)
        Name (LCBU, Zero)
        TXBU = TXBF /* \TXBF */
        DLBU = DLM /* \DLM_ */
        FCBU = FCR /* \FCR_ */
        LCBU = LCR /* \LCR_ */
        LCR = 0x83
        TXBF = One
        DLM = Zero
        FCR = 0xE1
        LCR = 0x03
        DLM = Zero
        ToHexString (Arg0, Local3)
        Local4 = SizeOf (Local3)
        Local5 = Zero
        While ((Local5 < Local4))
        {
            Mid (Local3, Local5, One, TXBF) /* \TXBF */
            Stall (0x64)
            Local5++
        }

        Stall (0x64)
        TXBF = 0x0D
        Stall (0x64)
        TXBF = 0x0A
        TXBF = TXBU /* \SDBG.TXBU */
        DLM = DLBU /* \SDBG.DLBU */
        FCR = FCBU /* \SDBG.FCBU */
        LCR = LCBU /* \SDBG.LCBU */
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Name (AM00, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    Method (RPTS, 1, NotSerialized)
    {
        D8XH (Zero, Arg0)
        D8XH (One, Zero)
        ADBG (Concatenate ("_PTS=", ToHexString (Arg0)))
        \_SB.PC00.LPCB.EC.E706 = Zero
        DRRD = Zero
        If (\_SB.PC00.LPCB.EC.MYEC)
        {
            If (((Arg0 == 0x04) && (\_SB.PC00.LPCB.EC.POWS == One)))
            {
                \_SB.PC00.LPCB.EC.RSUS = One
            }
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            If ((PG3S == One)){}
        }

        If (CondRefOf (\_SB.TPM.PTS))
        {
            \_SB.TPM.PTS (Arg0)
        }

        SPTS (Arg0)
        If ((PFLV == 0x02))
        {
            If (CondRefOf (\ECON))
            {
                If ((ECON == One))
                {
                    ADBG ("[TCSS] 3rd PD PS_ON Sx")
                }
            }
        }
    }

    Method (PBCL, 0, NotSerialized)
    {
        Return (Package (0x67)
        {
            0x50, 
            0x32, 
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x04, 
            0x05, 
            0x06, 
            0x07, 
            0x08, 
            0x09, 
            0x0A, 
            0x0B, 
            0x0C, 
            0x0D, 
            0x0E, 
            0x0F, 
            0x10, 
            0x11, 
            0x12, 
            0x13, 
            0x14, 
            0x15, 
            0x16, 
            0x17, 
            0x18, 
            0x19, 
            0x1A, 
            0x1B, 
            0x1C, 
            0x1D, 
            0x1E, 
            0x1F, 
            0x20, 
            0x21, 
            0x22, 
            0x23, 
            0x24, 
            0x25, 
            0x26, 
            0x27, 
            0x28, 
            0x29, 
            0x2A, 
            0x2B, 
            0x2C, 
            0x2D, 
            0x2E, 
            0x2F, 
            0x30, 
            0x31, 
            0x32, 
            0x33, 
            0x34, 
            0x35, 
            0x36, 
            0x37, 
            0x38, 
            0x39, 
            0x3A, 
            0x3B, 
            0x3C, 
            0x3D, 
            0x3E, 
            0x3F, 
            0x40, 
            0x41, 
            0x42, 
            0x43, 
            0x44, 
            0x45, 
            0x46, 
            0x47, 
            0x48, 
            0x49, 
            0x4A, 
            0x4B, 
            0x4C, 
            0x4D, 
            0x4E, 
            0x4F, 
            0x50, 
            0x51, 
            0x52, 
            0x53, 
            0x54, 
            0x55, 
            0x56, 
            0x57, 
            0x58, 
            0x59, 
            0x5A, 
            0x5B, 
            0x5C, 
            0x5D, 
            0x5E, 
            0x5F, 
            0x60, 
            0x61, 
            0x62, 
            0x63, 
            0x64
        })
    }

    Method (RWAK, 1, Serialized)
    {
        D8XH (One, 0xAB)
        ADBG ("_WAK")
        If (\_SB.PC00.LPCB.EC.MYEC)
        {
            If (_OSI ("Windows 2015"))
            {
                \_SB.PC00.LPCB.EC.OSVR = 0x05
            }
            ElseIf (_OSI ("Windows 2013"))
            {
                \_SB.PC00.LPCB.EC.OSVR = 0x05
            }
            ElseIf (_OSI ("Windows 2012"))
            {
                \_SB.PC00.LPCB.EC.OSVR = 0x04
            }
            ElseIf (_OSI ("Windows 2009"))
            {
                \_SB.PC00.LPCB.EC.OSVR = 0x03
            }
            ElseIf (_OSI ("Windows 2006"))
            {
                \_SB.PC00.LPCB.EC.OSVR = 0x02
            }
            ElseIf (_OSI ("Windows 2001"))
            {
                \_SB.PC00.LPCB.EC.OSVR = One
            }
            ElseIf (_OSI ("Windows 2001 SP1"))
            {
                \_SB.PC00.LPCB.EC.OSVR = One
            }
            ElseIf (_OSI ("Windows 2001 SP2"))
            {
                \_SB.PC00.LPCB.EC.OSVR = One
            }
            ElseIf (_OSI ("Windows 2001 SP3"))
            {
                \_SB.PC00.LPCB.EC.OSVR = One
            }
        }

        Name (RPWM, Zero)
        If ((DSTS == Zero))
        {
            RPWM = Zero
        }
        Else
        {
            RPWM = 0x0180
        }

        SWAK (Arg0, RPWM)
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((GBSX & 0x40))
            {
                \_SB.PC00.GFX0.IUEH (0x06)
                PB1E ^= 0x08
                If (\_SB.PC00.LPCB.EC.MYEC)
                {
                    \_SB.PC00.LPCB.EC.CONV = 0x03
                    If ((\_SB.PC00.LPCB.EC.CONV == 0x03))
                    {
                        \_SB.PC00.LPCB.EC.UPBT (0x06, Zero)
                        Notify (\_SB.HIDD, 0xCC) // Hardware-Specific
                    }
                    Else
                    {
                        \_SB.PC00.LPCB.EC.UPBT (0x06, One)
                        Notify (\_SB.HIDD, 0xCD) // Hardware-Specific
                    }

                    If (CondRefOf (\_SB.PC00.LPCB.EC.ONTM))
                    {
                        \_SB.PC00.LPCB.EC.ONTM = One
                    }
                }
                Else
                {
                    \_SB.PC00.LPCB.EC.UPBT (0x06, One)
                    Notify (\_SB.HIDD, 0xCD) // Hardware-Specific
                }
            }

            If ((GBSX & 0x80))
            {
                \_SB.PC00.GFX0.IUEH (0x07)
                PB1E ^= 0x10
            }

            If (\_SB.PC00.LPCB.EC.MYEC)
            {
                If (((Arg0 == 0x03) || (Arg0 == 0x04)))
                {
                    \_SB.PC00.LPCB.EC.DTDR = One
                    \_SB.PC00.LPCB.EC.DTOK = One
                    If (IGDS)
                    {
                        If ((\_SB.PC00.LPCB.EC.LIDS == Zero))
                        {
                            \_SB.PC00.GFX0.CLID = 0x80000000
                        }
                        Else
                        {
                            \_SB.PC00.GFX0.CLID = 0x80000003
                        }
                    }

                    Notify (\_SB.PC00.LPCB.EC.LID0, 0x80) // Status Change
                }
            }

            If (CondRefOf (\_SB.PC00.TXHC))
            {
                \_SB.TCWK (Arg0)
            }

            If (CondRefOf (\DTFS))
            {
                If ((DTFS == One))
                {
                    Acquire (OSUM, 0xFFFF)
                    If (CondRefOf (\_GPE.DTIN))
                    {
                        \_GPE.DTIN ()
                    }

                    Release (OSUM)
                }
            }

            If (CondRefOf (\DTFS))
            {
                If ((DTFS == One))
                {
                    If (CondRefOf (\_SB.PC00.RP01.NFRP))
                    {
                        \_SB.PC00.RP01.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP05.NFRP))
                    {
                        \_SB.PC00.RP05.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP09.NFRP))
                    {
                        \_SB.PC00.RP09.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP10.NFRP))
                    {
                        \_SB.PC00.RP10.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP11.NFRP))
                    {
                        \_SB.PC00.RP11.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP12.NFRP))
                    {
                        \_SB.PC00.RP12.NFRP ()
                    }
                }
            }
        }

        If ((PFLV == 0x02))
        {
            If (CondRefOf (\ECON))
            {
                If ((ECON == One))
                {
                    ADBG ("[TCSS] 3rd PD PS_ON Sx exit")
                }
            }
        }

        BPNT ()
        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3) /* \GETB.TBF3 */
    }

    Method (BPNT, 0, NotSerialized)
    {
        ADBG ("BPNT, Board Power Notification")
        If (\_SB.PC00.LPCB.EC.MYEC)
        {
            Notify (\_SB.PC00.LPCB.EC.BAT1, 0x80) // Status Change
            Notify (\_SB.PC00.LPCB.EC.BAT1, 0x81) // Information Change
        }

        If (CondRefOf (\_SB.DPTF))
        {
            If ((\_SB.DPTF == One))
            {
                If (CondRefOf (\_SB.IETM))
                {
                    Notify (\_SB.IETM, 0x86) // Device-Specific
                }
            }
        }
    }

    OperationRegion (CPWR, SystemMemory, (\_SB.PC00.GMHB () + 0x5000), 0x1000)
    Field (CPWR, ByteAcc, NoLock, Preserve)
    {
        Offset (0x938), 
        PWRU,   4, 
        Offset (0x9A0), 
        PPL1,   15, 
        PL1E,   1, 
        CLP1,   1
    }

    Name (CLMP, Zero)
    Name (PLEN, Zero)
    Name (PLSV, 0x8000)
    Name (CSEM, Zero)
    Method (SPL1, 0, Serialized)
    {
        Name (PPUU, Zero)
        If ((CSEM == One))
        {
            Return (Zero)
        }

        CSEM = One
        PLSV = PPL1 /* \PPL1 */
        PLEN = PL1E /* \PL1E */
        CLMP = CLP1 /* \CLP1 */
        If ((PWRU == Zero))
        {
            PPUU = One
        }
        Else
        {
            PPUU = (PWRU-- << 0x02)
        }

        Local0 = (PLVL * PPUU) /* \SPL1.PPUU */
        Local1 = (Local0 / 0x03E8)
        PPL1 = Local1
        PL1E = One
        CLP1 = One
    }

    Method (RPL1, 0, Serialized)
    {
        PPL1 = PLSV /* \PLSV */
        PL1E = PLEN /* \PLEN */
        CLP1 = CLMP /* \CLMP */
        CSEM = Zero
    }

    Name (UAMS, Zero)
    Name (GLCK, Zero)
    Method (GUAM, 1, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                If ((GLCK == One))
                {
                    GLCK = Zero
                    D8XH (Zero, 0xE1)
                    D8XH (One, 0xAB)
                    ADBG ("Exit Resiliency")
                    If (PSCP)
                    {
                        If (CondRefOf (\_SB.PR00._PPC))
                        {
                            \_SB.CPPC = Zero
                            SPNT ()
                        }
                    }

                    If (PLCS)
                    {
                        RPL1 ()
                    }

                    BPNT ()
                }
            }
            Case (One)
            {
                If ((GLCK == Zero))
                {
                    GLCK = One
                    D8XH (Zero, 0xE0)
                    D8XH (One, Zero)
                    ADBG ("Enter Resiliency")
                    If (PSCP)
                    {
                        If ((CondRefOf (\_SB.PR00._PSS) && CondRefOf (\_SB.PR00._PPC)))
                        {
                            SPNT ()
                            BPNT ()
                        }
                    }

                    If (PLCS)
                    {
                        SPL1 ()
                    }
                }
            }
            Default
            {
                Return (Zero)
            }

        }

        UAMS = (Arg0 && !PWRS)
        P_CS ()
    }

    Method (P_CS, 0, Serialized)
    {
        If (CondRefOf (\_SB.PC00.PAUD.PUAM))
        {
            \_SB.PC00.PAUD.PUAM ()
        }

        If ((OSYS == 0x07DC))
        {
            If (CondRefOf (\_SB.PC00.XHCI.DUAM))
            {
                \_SB.PC00.XHCI.DUAM ()
            }
        }
    }

    Scope (_SB.PC00)
    {
        Method (PTMA, 0, NotSerialized)
        {
            Return (BGMA) /* External reference */
        }

        Method (PTMS, 0, NotSerialized)
        {
            Return (BGMS) /* External reference */
        }

        Method (PTIA, 0, NotSerialized)
        {
            Return (BGIA) /* External reference */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            If (CondRefOf (\DTFS))
            {
                If ((DTFS == One))
                {
                    If (CondRefOf (\_SB.PC00.RP01.NFRP))
                    {
                        ^RP01.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP05.NFRP))
                    {
                        ^RP05.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP09.NFRP))
                    {
                        ^RP09.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP10.NFRP))
                    {
                        ^RP10.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP11.NFRP))
                    {
                        ^RP11.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP12.NFRP))
                    {
                        ^RP12.NFRP ()
                    }
                }
            }

            OSYS = 0x03E8
            If (CondRefOf (\_OSI))
            {
                If (_OSI ("Windows 2001"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07D2
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSYS = 0x07D3
                }

                If (_OSI ("Windows 2006"))
                {
                    OSYS = 0x07D6
                }

                If (_OSI ("Windows 2009"))
                {
                    OSYS = 0x07D9
                }

                If (_OSI ("Windows 2012"))
                {
                    OSYS = 0x07DC
                }

                If (_OSI ("Windows 2013"))
                {
                    OSYS = 0x07DD
                }

                If (_OSI ("Windows 2015"))
                {
                    OSYS = 0x07DF
                }
            }

            If (CondRefOf (\DTFS))
            {
                If ((DTFS == One))
                {
                    Acquire (OSUM, 0xFFFF)
                    If (CondRefOf (\_GPE.DTIN))
                    {
                        \_GPE.DTIN ()
                    }

                    Release (OSUM)
                }
            }
        }
    }

    Scope (\)
    {
        Name (PICM, Zero)
        Name (PRWP, Package (0x02)
        {
            Zero, 
            Zero
        })
        Method (GPRW, 2, NotSerialized)
        {
            PRWP [Zero] = Arg0
            Local0 = (SS1 << One)
            Local0 |= (SS2 << 0x02)
            Local0 |= (SS3 << 0x03)
            Local0 |= (SS4 << 0x04)
            If (((One << Arg1) & Local0))
            {
                PRWP [One] = Arg1
            }
            Else
            {
                Local0 >>= One
                FindSetLeftBit (Local0, PRWP [One])
            }

            Return (PRWP) /* \PRWP */
        }
    }

    Scope (_SB)
    {
        Name (OSU4, Zero)
        Name (OSCM, 0xFF)
        If ((U4SE == One))
        {
            OperationRegion (CSIO, SystemIO, 0x72, 0x02)
            Field (CSIO, ByteAcc, NoLock, Preserve)
            {
                IO72,   8, 
                IO73,   8
            }

            Method (WCMP, 1, Serialized)
            {
                ADBG (Concatenate ("WCMP - Saved CM mode = ", Arg0))
                IO72 = 0xF2
                IO73 = Arg0
            }
        }

        Method (DOCM, 0, Serialized)
        {
            If ((U4SE == Zero))
            {
                Return (0xFF)
            }

            ADBG (Concatenate ("DOCM: Switch host router to OS requested CM mode - ", OSU4))
            Local0 = 0xFF
            OSCM = Zero
            ADBG (Concatenate ("DOCM: Enabled host router mask on platform = ", ToHexString (CMSK)))
            If ((CondRefOf (\_SB.PC00.TDM0.STCM) && (CMSK & One)))
            {
                ADBG ("DOCM: Apply CM mode to iTBT0 ...")
                Local1 = ^PC00.TDM0.STCM (OSU4, U4CM)
                If ((Local1 != 0xFF))
                {
                    ADBG (Concatenate ("DOCM: Apply CM mode to iTBT0 successfully, CM mode = ", Local1))
                    OSCM = Local1
                    Local0 = Zero
                }
                Else
                {
                    ADBG (Concatenate ("DOCM: Fail to apply CM mode to iTBT0, CM mode = ", OSU4))
                    Return (0xFF)
                }
            }

            If ((CondRefOf (\_SB.PC00.TDM1.STCM) && (CMSK & 0x02)))
            {
                ADBG ("DOCM: Apply CM mode to iTBT1")
                Local1 = ^PC00.TDM1.STCM (OSU4, U4CM)
                If ((Local1 != 0xFF))
                {
                    ADBG (Concatenate ("DOCM: Apply CM mode to iTBT1 successfully, CM mode = ", Local1))
                    OSCM = Local1
                    Local0 = Zero
                }
                Else
                {
                    ADBG (Concatenate ("DOCM: Fail to apply CM mode to iTBT1, CM mode = ", OSU4))
                    Return (0xFF)
                }
            }

            If ((Local0 == 0xFF))
            {
                ADBG ("DOCM: CM mode is not applied to any host router, native USB4 capability is not supported")
            }

            If (((U4CM & 0x70) == 0x20))
            {
                ADBG (Concatenate ("DOCM: Save the applied CM mode to platform settings, CM mode = ", OSCM))
                WCMP (OSCM)
            }

            Return (Local0)
        }

        Method (U4FN, 2, Serialized)
        {
            ADBG (Concatenate ("U4FN: _OSC STS = ", ToHexString (Arg0)))
            ADBG (Concatenate ("U4FN: _OSC CAP = ", ToHexString (Arg1)))
            If ((U4SE == Zero))
            {
                If (((U4CM & 0x07) == One))
                {
                    ADBG ("U4FN: Platform only support SW CM")
                    OSCM = One
                    ^PC00.TDM0.SCME = One
                    ^PC00.TDM1.SCME = One
                    Return (Zero)
                }
                Else
                {
                    OSCM = Zero
                    ^PC00.TDM0.SCME = Zero
                    ^PC00.TDM1.SCME = Zero
                    If ((Arg1 & 0x00040000))
                    {
                        ADBG ("U4FN: USB4 capability bit should be cleared since platform doesn\'t support")
                        Return (0xFF)
                    }
                    Else
                    {
                        ADBG ("U4FN: OS and platform doesn\'t support native USB4")
                        Return (Zero)
                    }
                }
            }
            Else
            {
                Local0 = Zero
                If ((Arg1 & 0x00040000))
                {
                    ADBG ("U4FN: OS supports native USB4 capability")
                    OSU4 = One
                }
                Else
                {
                    ADBG ("U4FN: OS doesn\'t support native USB4 capability")
                    OSU4 = Zero
                }

                If (((U4CM & 0x70) == Zero))
                {
                    If ((OSU4 == One))
                    {
                        ADBG ("U4FN: Platform doesn\'t support SW CM, clear USB4 capability bit")
                        Local0 = 0xFF
                    }
                    Else
                    {
                        ADBG ("U4FN: OS and platform only support FW CM")
                        Local0 = Zero
                    }

                    Return (Local0)
                }

                If (((Arg0 & One) == Zero))
                {
                    ADBG ("U4FN: Platform-Wide _OSC query bit = 0")
                    Local1 = DOCM ()
                    If (((OSU4 == One) && (Local1 == 0xFF)))
                    {
                        Local0 = 0xFF
                    }
                }
                Else
                {
                    ADBG ("U4FN: Platform-Wide _OSC query bit = 1")
                    ADBG (Concatenate ("OSU4 = ", OSU4))
                    ADBG (Concatenate ("OSCM = ", OSCM))
                    If (((OSU4 == One) && (OSCM == Zero)))
                    {
                        ADBG ("U4FN: Native USB4 capability bit should be cleared since FW CM is applied for OS")
                        Local0 = 0xFF
                    }
                }

                Return (Local0)
            }
        }
    }

    Scope (_SB)
    {
        Name (OSCI, Zero)
        Name (OSCO, Zero)
        Name (OSCP, Zero)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            If ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If ((Arg1 == One))
                {
                    OSCP = CAP0 /* \_SB_._OSC.CAP0 */
                    If ((CAP0 & 0x04))
                    {
                        OSCO = 0x04
                        If (((HGDT & 0x0F) != 0x04))
                        {
                            If ((RTD3 == Zero))
                            {
                                CAP0 &= 0xFFFFFFFB
                                STS0 |= 0x10
                            }
                        }
                    }

                    If ((U4FN (STS0, CAP0) == 0xFF))
                    {
                        ADBG ("_OSC: Native USB4 capability bit is cleared")
                        CAP0 &= 0xFFFBFFFF
                        STS0 |= 0x10
                    }
                }
                Else
                {
                    STS0 &= 0xFFFFFF00
                    STS0 |= 0x0A
                }
            }
            ElseIf ((Arg0 == ToUUID ("23a0d13a-26ab-486c-9c5f-0ffa525a575a") /* USB4 Capabilities */))
            {
                If ((OSCM == One))
                {
                    CreateDWordField (Arg3, 0x08, CTRL)
                    If ((Arg1 == One))
                    {
                        ADBG (Concatenate ("_OSC: USB4 Control _OSC query bit = ", ToHexString ((STS0 & One))))
                        ADBG (Concatenate ("EPTU = ", ToHexString (EPTU)))
                        ADBG (Concatenate ("CTRL = ", ToHexString (CTRL)))
                        If ((CTRL & 0xFFFFFFF0))
                        {
                            ADBG ("_OSC: Clear unsupported bits of USB control")
                            CTRL &= 0x0F
                            STS0 |= 0x10
                        }

                        If ((EPTU == Zero))
                        {
                            CTRL &= 0x0B
                            ADBG (Concatenate ("_OSC: Clear PCIe bit, CTRL= ", ToHexString (CTRL)))
                            STS0 |= 0x10
                            ADBG ("_OSC: Set capabilities masked bit to indicate capabilities cleared by platform")
                        }
                    }
                    Else
                    {
                        STS0 &= 0xFFFFFF00
                        STS0 |= 0x0A
                    }
                }
                Else
                {
                    ADBG ("_OSC: USB4 control UUID is unrecognised since SW CM mode is not applied for OS!")
                    STS0 &= 0xFFFFFF00
                    STS0 |= 0x06
                }
            }
            Else
            {
                STS0 &= 0xFFFFFF00
                STS0 |= 0x06
            }

            Return (Arg3)
        }
    }

    Scope (_SB)
    {
        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Scope (_SB)
    {
        Device (COEX)
        {
            Name (_HID, EisaId ("INT3519"))  // _HID: Hardware ID
            Name (_STR, Unicode ("CoExistence Manager"))  // _STR: Description String
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((COEM == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.ISHD))
    {
        Scope (_SB.PC00.ISHD)
        {
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                ADBG ("ISHD _DSM")
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If ((Arg2 <= 0x02))
                        {
                            If (CondRefOf (HIDW))
                            {
                                Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                            }
                        }
                        ElseIf ((Arg2 == 0x03))
                        {
                            If (CondRefOf (ISAR))
                            {
                                Return (ISAR (Arg0, Arg1, Arg2, Arg3))
                            }
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB)
    {
        Device (PR00)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
        }

        Device (PR01)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
        }

        Device (PR02)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
        }

        Device (PR03)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
        }

        Device (PR04)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
        }

        Device (PR05)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
        }

        Device (PR06)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
        }

        Device (PR07)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
        }

        Device (PR08)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
        }

        Device (PR09)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x09)  // _UID: Unique ID
        }

        Device (PR10)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x0A)  // _UID: Unique ID
        }

        Device (PR11)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x0B)  // _UID: Unique ID
        }

        Device (PR12)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x0C)  // _UID: Unique ID
        }

        Device (PR13)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x0D)  // _UID: Unique ID
        }

        Device (PR14)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x0E)  // _UID: Unique ID
        }

        Device (PR15)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x0F)  // _UID: Unique ID
        }

        Device (PR16)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x10)  // _UID: Unique ID
        }

        Device (PR17)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x11)  // _UID: Unique ID
        }

        Device (PR18)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x12)  // _UID: Unique ID
        }

        Device (PR19)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x13)  // _UID: Unique ID
        }

        Device (PR20)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x14)  // _UID: Unique ID
        }

        Device (PR21)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x15)  // _UID: Unique ID
        }

        Device (PR22)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x16)  // _UID: Unique ID
        }

        Device (PR23)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x17)  // _UID: Unique ID
        }

        Device (PR24)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x18)  // _UID: Unique ID
        }

        Device (PR25)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x19)  // _UID: Unique ID
        }

        Device (PR26)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x1A)  // _UID: Unique ID
        }

        Device (PR27)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x1B)  // _UID: Unique ID
        }

        Device (PR28)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x1C)  // _UID: Unique ID
        }

        Device (PR29)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x1D)  // _UID: Unique ID
        }

        Device (PR30)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x1E)  // _UID: Unique ID
        }

        Device (PR31)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x1F)  // _UID: Unique ID
        }

        Device (PR32)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x20)  // _UID: Unique ID
        }

        Device (PR33)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x21)  // _UID: Unique ID
        }

        Device (PR34)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x22)  // _UID: Unique ID
        }

        Device (PR35)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x23)  // _UID: Unique ID
        }

        Device (PR36)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x24)  // _UID: Unique ID
        }

        Device (PR37)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x25)  // _UID: Unique ID
        }

        Device (PR38)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x26)  // _UID: Unique ID
        }

        Device (PR39)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x27)  // _UID: Unique ID
        }

        Device (PR40)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x28)  // _UID: Unique ID
        }

        Device (PR41)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x29)  // _UID: Unique ID
        }

        Device (PR42)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x2A)  // _UID: Unique ID
        }

        Device (PR43)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x2B)  // _UID: Unique ID
        }

        Device (PR44)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x2C)  // _UID: Unique ID
        }

        Device (PR45)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x2D)  // _UID: Unique ID
        }

        Device (PR46)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x2E)  // _UID: Unique ID
        }

        Device (PR47)
        {
            Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
            Name (_UID, 0x2F)  // _UID: Unique ID
        }
    }

    Scope (_SB)
    {
        Device (PAGD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (_OSI ("Processor Aggregator Device"))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_PUR, Package (0x02)  // _PUR: Processor Utilization Request
            {
                One, 
                Zero
            })
        }
    }

    Scope (_SB.PC00)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00008000,         // Address Length
                    _Y49)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y4A)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y4B)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y4C)
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00060000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFC800000,         // Address Base
                    0x00020000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED45000,         // Address Base
                    0x0004B000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y4D)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y48)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CondRefOf (DPTR))
                {
                    CreateDWordField (BUF0, \_SB.PC00.PDRC._Y48._BAS, ABR0)  // _BAS: Base Address
                    ABR0 = DPTR /* External reference */
                    CreateDWordField (BUF0, \_SB.PC00.PDRC._Y48._LEN, ABLN)  // _LEN: Length
                    ABLN = (EPTR - DPTR) /* External reference */
                }

                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y49._BAS, MBR0)  // _BAS: Base Address
                MBR0 = GMHB ()
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y4A._BAS, DBR0)  // _BAS: Base Address
                DBR0 = GDMB ()
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y4B._BAS, EBR0)  // _BAS: Base Address
                EBR0 = GEPB ()
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y4C._BAS, XBR0)  // _BAS: Base Address
                XBR0 = GPCB ()
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y4C._LEN, XSZ0)  // _LEN: Length
                XSZ0 = GPCL ()
                If (!HPTE)
                {
                    CreateDWordField (BUF0, \_SB.PC00.PDRC._Y4D._BAS, HBAS)  // _BAS: Base Address
                    CreateDWordField (BUF0, \_SB.PC00.PDRC._Y4D._LEN, HLEN)  // _LEN: Length
                    HBAS = HPTB /* \HPTB */
                    HLEN = 0x0400
                }

                Return (BUF0) /* \_SB_.PC00.PDRC.BUF0 */
            }
        }
    }

    Method (BRTN, 1, Serialized)
    {
        If (((DIDX & 0x0F0F) == 0x0400))
        {
            Notify (\_SB.PC00.GFX0.DD1F, Arg0)
        }

        If (((DIDY & 0x0F0F) == 0x0401))
        {
            Notify (\_SB.PC00.GFX0.DD2F, Arg0)
        }

        If (((DGDX & 0x0F0F) == 0x0400))
        {
            Notify (\_SB.PC00.RP12.PXSX.PEGB.PEGE.DEDP, Arg0)
        }
    }

    Scope (_GPE)
    {
        Method (_L73, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            ADBG ("L73 Event")
        }

        Method (_L69, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            ADBG ("L69 Event")
            SL69 ()
        }

        Method (_L61, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            ADBG ("L61 Event")
            L01C += One
            P8XH (Zero, One)
            P8XH (One, L01C)
            SL61 ()
        }

        Method (_L62, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            ADBG ("L62 Event")
            GPEC = Zero
        }

        Method (_L50, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            ADBG ("L50 Event")
            \_SB.PC00.LPCB.WKEC ()
            Return (Zero)
        }

        Method (_L6B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            ADBG ("_L6B Event")
            If (CondRefOf (\_GPE.AL6B))
            {
                AL6B ()
            }

            If (CondRefOf (\_GPE.PL6B))
            {
                PL6B ()
            }
        }

        Name (PRES, One)
        Method (_L6F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            ADBG ("L6F Event")
            If (CondRefOf (\_GPE.AL6F))
            {
                AL6F ()
            }

            SL6F ()
        }

        Method (_L72, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (CondRefOf (\_SB.PC00.AWAC))
            {
                \_SB.PC00.AWAC.WAST = One
                Notify (\_SB.PC00.AWAC, 0x02) // Device Wake
            }
        }

        Method (_L71, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (CondRefOf (\_GPE.SL71))
            {
                SL71 ()
            }
        }

        If (CondRefOf (GP1E))
        {
            If ((GP1E != Zero))
            {
                Method (_LC7, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                {
                    ADBG ("LC7 Event")
                    SLC7 ()
                }
            }
        }

        If (CondRefOf (GP1E))
        {
            If ((GP1E != Zero))
            {
                Method (_LA7, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                {
                    ADBG ("LA7 Event")
                    L01C += One
                    P8XH (Zero, 0xA7)
                    P8XH (One, L01C)
                    SLA7 ()
                }
            }
        }

        Method (_LA0, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            ADBG ("LA0 Event")
            SLA0 ()
        }

        Method (_LA1, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            ADBG ("LA1 Event")
            SLA1 ()
        }

        Method (_LA2, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            ADBG ("LA2 Event")
            SLA2 ()
        }

        Method (_LC0, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            ADBG ("LC0 Event")
            SLC0 ()
        }

        Method (_LC1, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            ADBG ("LC1 Event")
            SLC1 ()
        }

        Method (_LC2, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            ADBG ("LC2 Event")
            SLC2 ()
        }
    }

    Method (GMIO, 3, Serialized)
    {
        OperationRegion (PXCS, SystemMemory, \_SB.PC00.PC2M (Arg1, Arg0), 0x20)
        Field (PXCS, AnyAcc, NoLock, Preserve)
        {
            Offset (0x18), 
            PBUS,   8, 
            SBUS,   8
        }

        Local0 = \_SB.PC00.GPCB ()
        Local0 += ((Arg2 & 0x001F0000) >> One)
        Local0 += ((Arg2 & 0x07) << 0x0C)
        Local0 += (SBUS << 0x14)
        Return (Local0)
    }

    Scope (_SB.PC00.RP01.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (PBNU, ^_ADR, _ADR), 0x30)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32, 
            Offset (0x2C), 
            SVID,   16
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WDCO), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        OperationRegion (VSEC, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WVHO), 0x10)
        Field (VSEC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x0C), 
                ,   1, 
            BTIE,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
            Offset (0x0D), 
            PDRC,   1
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x272B8086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        If ((SVDC == One))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Case (0x080014C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            Name (RSTY, Zero)
            Name (FLRC, Zero)
            Name (BOFC, Zero)
            Name (DPRS, Zero)
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("Wifi PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("Wifi PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("Wifi PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((RSTY == One))
                    {
                        ADBG ("Wifi Product RST")
                        Local0 = Acquire (CNMT, 0x03E8)
                        If ((Local0 == Zero))
                        {
                            If ((FLRC == One))
                            {
                                Local0 = DCTR /* \_SB_.PC00.RP01.PXSX.DCTR */
                                Local0 |= 0x8000
                                DCTR = Local0
                                Sleep (FDEL)
                            }

                            DPRS = One
                            If ((BOFC == One))
                            {
                                If ((BRMT == Zero))
                                {
                                    BTRK (Zero)
                                }
                                ElseIf ((WVHO != Zero))
                                {
                                    BTIE = Zero
                                }

                                Sleep (RDLY)
                            }

                            PDRC = One
                            Sleep (VDEL)
                            SGOV (WLRT, Zero)
                            Sleep (PDEL)
                            SGOV (WLRT, One)
                            If ((BOFC == One))
                            {
                                If ((BRMT == Zero))
                                {
                                    BTRK (One)
                                }
                                ElseIf ((WVHO != Zero))
                                {
                                    BTIE = One
                                }

                                Sleep (RDLY)
                            }

                            DPRS = 0x02
                            Release (CNMT)
                        }
                    }
                    Else
                    {
                        ADBG ("Wifi Core RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR /* \_SB_.PC00.RP01.PXSX.DCTR */
                            Local0 |= 0x8000
                            DCTR = Local0
                        }

                        DPRS = One
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP01.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP01.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP01.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                0x02, 
                Package (0x2E)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                DerefOf (WRDY [One]) [0x18] = CD10 /* \CD10 */
                DerefOf (WRDY [One]) [0x19] = CD11 /* \CD11 */
                DerefOf (WRDY [One]) [0x1A] = CD12 /* \CD12 */
                DerefOf (WRDY [One]) [0x1B] = CD13 /* \CD13 */
                DerefOf (WRDY [One]) [0x1C] = CD14 /* \CD14 */
                DerefOf (WRDY [One]) [0x1D] = CD15 /* \CD15 */
                DerefOf (WRDY [One]) [0x1E] = CD16 /* \CD16 */
                DerefOf (WRDY [One]) [0x1F] = CD17 /* \CD17 */
                DerefOf (WRDY [One]) [0x20] = CD18 /* \CD18 */
                DerefOf (WRDY [One]) [0x21] = CD19 /* \CD19 */
                DerefOf (WRDY [One]) [0x22] = CD1A /* \CD1A */
                DerefOf (WRDY [One]) [0x23] = CD20 /* \CD20 */
                DerefOf (WRDY [One]) [0x24] = CD21 /* \CD21 */
                DerefOf (WRDY [One]) [0x25] = CD22 /* \CD22 */
                DerefOf (WRDY [One]) [0x26] = CD23 /* \CD23 */
                DerefOf (WRDY [One]) [0x27] = CD24 /* \CD24 */
                DerefOf (WRDY [One]) [0x28] = CD25 /* \CD25 */
                DerefOf (WRDY [One]) [0x29] = CD26 /* \CD26 */
                DerefOf (WRDY [One]) [0x2A] = CD27 /* \CD27 */
                DerefOf (WRDY [One]) [0x2B] = CD28 /* \CD28 */
                DerefOf (WRDY [One]) [0x2C] = CD29 /* \CD29 */
                DerefOf (WRDY [One]) [0x2D] = CD2A /* \CD2A */
                Return (WRDY) /* \_SB_.PC00.RP01.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                0x02, 
                Package (0x87)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                DerefOf (EWRY [One]) [0x45] = CD30 /* \CD30 */
                DerefOf (EWRY [One]) [0x46] = CD31 /* \CD31 */
                DerefOf (EWRY [One]) [0x47] = CD32 /* \CD32 */
                DerefOf (EWRY [One]) [0x48] = CD33 /* \CD33 */
                DerefOf (EWRY [One]) [0x49] = CD34 /* \CD34 */
                DerefOf (EWRY [One]) [0x4A] = CD35 /* \CD35 */
                DerefOf (EWRY [One]) [0x4B] = CD36 /* \CD36 */
                DerefOf (EWRY [One]) [0x4C] = CD37 /* \CD37 */
                DerefOf (EWRY [One]) [0x4D] = CD38 /* \CD38 */
                DerefOf (EWRY [One]) [0x4E] = CD39 /* \CD39 */
                DerefOf (EWRY [One]) [0x4F] = CD3A /* \CD3A */
                DerefOf (EWRY [One]) [0x50] = CD3B /* \CD3B */
                DerefOf (EWRY [One]) [0x51] = CD3C /* \CD3C */
                DerefOf (EWRY [One]) [0x52] = CD3D /* \CD3D */
                DerefOf (EWRY [One]) [0x53] = CD3E /* \CD3E */
                DerefOf (EWRY [One]) [0x54] = CD3F /* \CD3F */
                DerefOf (EWRY [One]) [0x55] = CD40 /* \CD40 */
                DerefOf (EWRY [One]) [0x56] = CD41 /* \CD41 */
                DerefOf (EWRY [One]) [0x57] = CD42 /* \CD42 */
                DerefOf (EWRY [One]) [0x58] = CD43 /* \CD43 */
                DerefOf (EWRY [One]) [0x59] = CD44 /* \CD44 */
                DerefOf (EWRY [One]) [0x5A] = CD45 /* \CD45 */
                DerefOf (EWRY [One]) [0x5B] = CD46 /* \CD46 */
                DerefOf (EWRY [One]) [0x5C] = CD47 /* \CD47 */
                DerefOf (EWRY [One]) [0x5D] = CD48 /* \CD48 */
                DerefOf (EWRY [One]) [0x5E] = CD49 /* \CD49 */
                DerefOf (EWRY [One]) [0x5F] = CD4A /* \CD4A */
                DerefOf (EWRY [One]) [0x60] = CD4B /* \CD4B */
                DerefOf (EWRY [One]) [0x61] = CD4C /* \CD4C */
                DerefOf (EWRY [One]) [0x62] = CD4D /* \CD4D */
                DerefOf (EWRY [One]) [0x63] = CD4E /* \CD4E */
                DerefOf (EWRY [One]) [0x64] = CD4F /* \CD4F */
                DerefOf (EWRY [One]) [0x65] = CD50 /* \CD50 */
                DerefOf (EWRY [One]) [0x66] = CD51 /* \CD51 */
                DerefOf (EWRY [One]) [0x67] = CD52 /* \CD52 */
                DerefOf (EWRY [One]) [0x68] = CD53 /* \CD53 */
                DerefOf (EWRY [One]) [0x69] = CD54 /* \CD54 */
                DerefOf (EWRY [One]) [0x6A] = CD55 /* \CD55 */
                DerefOf (EWRY [One]) [0x6B] = CD56 /* \CD56 */
                DerefOf (EWRY [One]) [0x6C] = CD57 /* \CD57 */
                DerefOf (EWRY [One]) [0x6D] = CD58 /* \CD58 */
                DerefOf (EWRY [One]) [0x6E] = CD59 /* \CD59 */
                DerefOf (EWRY [One]) [0x6F] = CD5A /* \CD5A */
                DerefOf (EWRY [One]) [0x70] = CD5B /* \CD5B */
                DerefOf (EWRY [One]) [0x71] = CD5C /* \CD5C */
                DerefOf (EWRY [One]) [0x72] = CD5D /* \CD5D */
                DerefOf (EWRY [One]) [0x73] = CD5E /* \CD5E */
                DerefOf (EWRY [One]) [0x74] = CD5F /* \CD5F */
                DerefOf (EWRY [One]) [0x75] = CD60 /* \CD60 */
                DerefOf (EWRY [One]) [0x76] = CD61 /* \CD61 */
                DerefOf (EWRY [One]) [0x77] = CD62 /* \CD62 */
                DerefOf (EWRY [One]) [0x78] = CD63 /* \CD63 */
                DerefOf (EWRY [One]) [0x79] = CD64 /* \CD64 */
                DerefOf (EWRY [One]) [0x7A] = CD65 /* \CD65 */
                DerefOf (EWRY [One]) [0x7B] = CD66 /* \CD66 */
                DerefOf (EWRY [One]) [0x7C] = CD67 /* \CD67 */
                DerefOf (EWRY [One]) [0x7D] = CD68 /* \CD68 */
                DerefOf (EWRY [One]) [0x7E] = CD69 /* \CD69 */
                DerefOf (EWRY [One]) [0x7F] = CD6A /* \CD6A */
                DerefOf (EWRY [One]) [0x80] = CD6B /* \CD6B */
                DerefOf (EWRY [One]) [0x81] = CD6C /* \CD6C */
                DerefOf (EWRY [One]) [0x82] = CD6D /* \CD6D */
                DerefOf (EWRY [One]) [0x83] = CD6E /* \CD6E */
                DerefOf (EWRY [One]) [0x84] = CD6F /* \CD6F */
                DerefOf (EWRY [One]) [0x85] = CD70 /* \CD70 */
                DerefOf (EWRY [One]) [0x86] = CD71 /* \CD71 */
                Return (EWRY) /* \_SB_.PC00.RP01.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x03, 
                Package (0x4A)
                {
                    0x07, 
                    0x03, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SDGN /* \SDGN */
                DerefOf (WGDY [One]) [0x02] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x03] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x04] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x05] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x06] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x07] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x08] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x09] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x0A] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0B] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0C] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0D] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0E] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0F] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x10] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x11] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x12] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x13] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x14] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x15] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x16] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x17] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x18] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x19] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x1A] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1B] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1C] = SD39 /* \SD39 */
                DerefOf (WGDY [One]) [0x1D] = SD41 /* \SD41 */
                DerefOf (WGDY [One]) [0x1E] = SD42 /* \SD42 */
                DerefOf (WGDY [One]) [0x1F] = SD43 /* \SD43 */
                DerefOf (WGDY [One]) [0x20] = SD44 /* \SD44 */
                DerefOf (WGDY [One]) [0x21] = SD45 /* \SD45 */
                DerefOf (WGDY [One]) [0x22] = SD46 /* \SD46 */
                DerefOf (WGDY [One]) [0x23] = SD47 /* \SD47 */
                DerefOf (WGDY [One]) [0x24] = SD48 /* \SD48 */
                DerefOf (WGDY [One]) [0x25] = SD49 /* \SD49 */
                DerefOf (WGDY [One]) [0x26] = SD51 /* \SD51 */
                DerefOf (WGDY [One]) [0x27] = SD52 /* \SD52 */
                DerefOf (WGDY [One]) [0x28] = SD53 /* \SD53 */
                DerefOf (WGDY [One]) [0x29] = SD54 /* \SD54 */
                DerefOf (WGDY [One]) [0x2A] = SD55 /* \SD55 */
                DerefOf (WGDY [One]) [0x2B] = SD56 /* \SD56 */
                DerefOf (WGDY [One]) [0x2C] = SD57 /* \SD57 */
                DerefOf (WGDY [One]) [0x2D] = SD58 /* \SD58 */
                DerefOf (WGDY [One]) [0x2E] = SD59 /* \SD59 */
                DerefOf (WGDY [One]) [0x2F] = SD61 /* \SD61 */
                DerefOf (WGDY [One]) [0x30] = SD62 /* \SD62 */
                DerefOf (WGDY [One]) [0x31] = SD63 /* \SD63 */
                DerefOf (WGDY [One]) [0x32] = SD64 /* \SD64 */
                DerefOf (WGDY [One]) [0x33] = SD65 /* \SD65 */
                DerefOf (WGDY [One]) [0x34] = SD66 /* \SD66 */
                DerefOf (WGDY [One]) [0x35] = SD67 /* \SD67 */
                DerefOf (WGDY [One]) [0x36] = SD68 /* \SD68 */
                DerefOf (WGDY [One]) [0x37] = SD69 /* \SD69 */
                DerefOf (WGDY [One]) [0x38] = SD71 /* \SD71 */
                DerefOf (WGDY [One]) [0x39] = SD72 /* \SD72 */
                DerefOf (WGDY [One]) [0x3A] = SD73 /* \SD73 */
                DerefOf (WGDY [One]) [0x3B] = SD74 /* \SD74 */
                DerefOf (WGDY [One]) [0x3C] = SD75 /* \SD75 */
                DerefOf (WGDY [One]) [0x3D] = SD76 /* \SD76 */
                DerefOf (WGDY [One]) [0x3E] = SD77 /* \SD77 */
                DerefOf (WGDY [One]) [0x3F] = SD78 /* \SD78 */
                DerefOf (WGDY [One]) [0x40] = SD79 /* \SD79 */
                DerefOf (WGDY [One]) [0x41] = SD81 /* \SD81 */
                DerefOf (WGDY [One]) [0x42] = SD82 /* \SD82 */
                DerefOf (WGDY [One]) [0x43] = SD83 /* \SD83 */
                DerefOf (WGDY [One]) [0x44] = SD84 /* \SD84 */
                DerefOf (WGDY [One]) [0x45] = SD85 /* \SD85 */
                DerefOf (WGDY [One]) [0x46] = SD86 /* \SD86 */
                DerefOf (WGDY [One]) [0x47] = SD87 /* \SD87 */
                DerefOf (WGDY [One]) [0x48] = SD88 /* \SD88 */
                DerefOf (WGDY [One]) [0x49] = SD89 /* \SD89 */
                Return (WGDY) /* \_SB_.PC00.RP01.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP01.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                0x02, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGM /* \WAGM */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP01.PXSX.PPAY */
            }

            Name (WPFY, Package (0x02)
            {
                Zero, 
                Package (0x05)
                {
                    0x07, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                }
            })
            Method (WPFC, 0, Serialized)
            {
                DerefOf (WPFY [One]) [One] = WPFA /* \WPFA */
                DerefOf (WPFY [One]) [0x02] = WPFB /* \WPFB */
                DerefOf (WPFY [One]) [0x03] = \WPFC
                DerefOf (WPFY [One]) [0x04] = WPFD /* \WPFD */
                Return (WPFY) /* \_SB_.PC00.RP01.PXSX.WPFY */
            }

            Name (WTSY, Package (0x02)
            {
                One, 
                Package (0x13)
                {
                    0x07, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                }
            })
            Method (WTAS, 0, Serialized)
            {
                DerefOf (WTSY [One]) [One] = WTSE /* \WTSE */
                DerefOf (WTSY [One]) [0x02] = WTLE /* \WTLE */
                DerefOf (WTSY [One]) [0x03] = BL01 /* \BL01 */
                DerefOf (WTSY [One]) [0x04] = BL02 /* \BL02 */
                DerefOf (WTSY [One]) [0x05] = BL03 /* \BL03 */
                DerefOf (WTSY [One]) [0x06] = BL04 /* \BL04 */
                DerefOf (WTSY [One]) [0x07] = BL05 /* \BL05 */
                DerefOf (WTSY [One]) [0x08] = BL06 /* \BL06 */
                DerefOf (WTSY [One]) [0x09] = BL07 /* \BL07 */
                DerefOf (WTSY [One]) [0x0A] = BL08 /* \BL08 */
                DerefOf (WTSY [One]) [0x0B] = BL09 /* \BL09 */
                DerefOf (WTSY [One]) [0x0C] = BL10 /* \BL10 */
                DerefOf (WTSY [One]) [0x0D] = BL11 /* \BL11 */
                DerefOf (WTSY [One]) [0x0E] = BL12 /* \BL12 */
                DerefOf (WTSY [One]) [0x0F] = BL13 /* \BL13 */
                DerefOf (WTSY [One]) [0x10] = BL14 /* \BL14 */
                DerefOf (WTSY [One]) [0x11] = BL15 /* \BL15 */
                DerefOf (WTSY [One]) [0x12] = BL16 /* \BL16 */
                Return (WTSY) /* \_SB_.PC00.RP01.PXSX.WTSY */
            }

            Name (WAIY, Package (0x02)
            {
                Zero, 
                Package (0x04)
                {
                    0x07, 
                    Zero, 
                    Zero, 
                    Zero
                }
            })
            Method (WAIS, 0, Serialized)
            {
                DerefOf (WAIY [One]) [One] = WLBI /* \WLBI */
                DerefOf (WAIY [One]) [0x02] = WHBI /* \WHBI */
                Return (WAIY) /* \_SB_.PC00.RP01.PXSX.WAIY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP01.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP01.PXSX.GPCX */
            }

            Name (GLAX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }, 

                Package (0x02)
                {
                    0x12, 
                    Zero
                }
            })
            Method (GLAI, 0, Serialized)
            {
                ADBG (Concatenate ("AR: GLAI method. CGLS = ", ToHexString (CGLS)))
                DerefOf (GLAX [One]) [One] = CGLS /* \CGLS */
                DerefOf (GLAX [0x02]) [One] = CGLS /* \CGLS */
                Return (GLAX) /* \_SB_.PC00.RP01.PXSX.GLAX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (FHRF, 1, NotSerialized)
            {
                If ((GGOV (PRST) != WPRP))
                {
                    DL23 ()
                    ADBG ("WWAN DL23() Done")
                    SGOV (PRST, WPRP)
                    ADBG ("WWAN PERST:0 Done")
                }
                Else
                {
                    ADBG ("Assume WWAN DL23() is already done")
                }

                Sleep (TR2B)
                SGOV (WBRS, PBRS)
                ADBG ("WWAN RST:0 Done")
                If ((Arg0 == Zero))
                {
                    Sleep (TBTG)
                    ADBG (Concatenate ("SLP TBTG ", ToDecimalString (TBTG)))
                }
                ElseIf ((Arg0 == One))
                {
                    SPCO (WCLK, Zero)
                    ADBG ("WWAN SCLK:0 Done")
                    Sleep (TB2F)
                    ADBG (Concatenate ("SLP TB2F ", ToDecimalString (TB2F)))
                    SGOV (WFCP, (~PFCP & One))
                    ADBG ("WWAN PWR:0 Done")
                    Sleep (TFDI)
                    ADBG (Concatenate ("SLP TFDI ", ToDecimalString (TFDI)))
                }
                Else
                {
                    ADBG ("Unsupported Arg0 is detected.")
                }
            }

            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                ADBG ("WWAN MPHYPG:0 Done")
                SPCO (WCLK, One)
                ADBG ("WWAN SCLK:1 Done")
                SGOV (WFCP, PFCP)
                ADBG ("WWAN PWR:1 Done")
                Sleep (TN2B)
                ADBG (Concatenate ("SLP TN2B ", ToDecimalString (TN2B)))
                SGOV (WBRS, (~PBRS & One))
                ADBG ("WWAN RST:1 Done")
                Sleep (TB2R)
                ADBG (Concatenate ("SLP TB2R ", ToDecimalString (TB2R)))
                SGOV (PRST, (~WPRP & One))
                ADBG ("WWAN PERST:0 Done")
                L23D ()
                ADBG ("WWAN L23D() Done")
            }

            Method (DOSV, 0, NotSerialized)
            {
                Local0 = Zero
                While (((SVID != WSID) && (Local0 < WSTO)))
                {
                    Local0++
                    Sleep (One)
                }

                ADBG (Concatenate ("DET Time ", ToDecimalString (Local0)))
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                ADBG ("_RST WWAN")
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    ADBG ("WWAN FLDR Mutex: Acquired Try Done")
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        FHRF (Zero)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                        ADBG ("WWAN FLDR Mutex:Release Done")
                        DOSV ()
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            ADBG ("FLDR TO")
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    ADBG (Concatenate ("RVP Delay Time ", ToDecimalString (Local0)))
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    ADBG ("WWAN PR _STA")
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                    ADBG ("WWAN PR _ON")
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                    ADBG ("WWAN PR _OFF")
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    ADBG ("WWAN PLDR Mutex: Acquired Try Done")
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PLDR")
                        FHRF (One)
                        SHRF ()
                        ADBG ("End WWAN PR _RST")
                        Release (WWMT)
                        ADBG ("WWAN PLDR Mutex: Release Done")
                        DOSV ()
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    WRST
                })
            }

            Name (FDEL, Zero)
            Name (PDEL, Zero)
            Name (VDEL, Zero)
            Method (IFUN, 4, Serialized)
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x1F                                             // .
                        })
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    ADBG (Concatenate ("vPro: ", CVPR))
                    Local0 = (CVPR << Zero)
                    Return (Local0)
                }

                If ((Arg2 == 0x02))
                {
                    CreateWordField (Arg3, Zero, CMDT)
                    CreateWordField (Arg3, 0x02, CMDP)
                    ADBG (Concatenate ("CmdType = ", ToHexString (CMDT)))
                    ADBG (Concatenate ("CmdPayload = ", ToHexString (CMDP)))
                    If ((CMDT == One))
                    {
                        If (WIST ())
                        {
                            Return (RSTY) /* \_SB_.PC00.RP01.PXSX.RSTY */
                        }
                        ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                        {
                            ADBG (Concatenate ("Get _PRR Mode = ", ^^^CNVW.RSTT))
                            Return (^^^CNVW.RSTT) /* \_SB_.PC00.CNVW.RSTT */
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((CMDT == 0x02))
                    {
                        If (WIST ())
                        {
                            Local0 = (CMDP & One)
                            RSTY = Local0
                            Local1 = (CMDP & 0x02)
                            Local1 >>= One
                            FLRC = Local1
                            Local2 = (CMDP & 0x04)
                            Local2 >>= 0x02
                            BOFC = Local2
                        }
                        ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                        {
                            ADBG (Concatenate ("Set _PRR Mode = ", ToHexString (CMDP)))
                            ^^^CNVW.RSTT = CMDP /* \_SB_.PC00.RP01.PXSX.IFUN.CMDP */
                        }

                        Return (Zero)
                    }

                    If ((CMDT == 0x03))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                        {
                            ADBG (Concatenate ("Get Last_PRR status PRRS = ", ToHexString (^^^CNVW.PRRS)))
                            Return (^^^CNVW.PRRS) /* \_SB_.PC00.CNVW.PRRS */
                        }
                        ElseIf (WIST ())
                        {
                            ADBG (Concatenate ("Get Last_PRR status DPRS = ", ToHexString (DPRS)))
                            Return (DPRS) /* \_SB_.PC00.RP01.PXSX.DPRS */
                        }
                    }

                    Return (Zero)
                }

                If ((Arg2 == 0x03))
                {
                    If ((CRFI == One))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                If ((Arg2 == 0x04))
                {
                    CreateWordField (Arg3, Zero, PRTT)
                    CreateWordField (Arg3, 0x02, PRTD)
                    ADBG (Concatenate ("TimerType = ", ToHexString (PRTT)))
                    ADBG (Concatenate ("TimerDuration (ms) = ", ToDecimalString (PRTD)))
                    If ((PRTT == One))
                    {
                        FDEL = PRTD /* \_SB_.PC00.RP01.PXSX.IFUN.PRTD */
                    }
                    ElseIf ((PRTT == 0x02))
                    {
                        PDEL = PRTD /* \_SB_.PC00.RP01.PXSX.IFUN.PRTD */
                    }
                    ElseIf ((PRTT == 0x03))
                    {
                        VDEL = PRTD /* \_SB_.PC00.RP01.PXSX.IFUN.PRTD */
                    }
                    Else
                    {
                        ADBG ("TimerDuration not set")
                    }
                }

                Return (Zero)
            }

            Method (IDSM, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd") /* Unknown UUID */))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (EFUN, 4, Serialized)
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                       // ..
                        })
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Local0 = ACSD /* \ACSD */
                    Return (Local0)
                }

                If ((Arg2 == 0x02))
                {
                    Local0 = I5BS /* \I5BS */
                    Return (Local0)
                }

                If ((Arg2 == 0x03))
                {
                    Local0 = UHBS /* \UHBS */
                    Return (Local0)
                }

                If ((Arg2 == 0x06))
                {
                    Local0 = AXMU /* \AXMU */
                    Local0 <<= One
                    Local0 |= AXSU /* \AXSU */
                    Local1 = AXMR /* \AXMR */
                    Local1 <<= One
                    Local1 |= AXSR /* \AXSR */
                    Local1 <<= 0x02
                    Local0 |= Local1
                    Return (Local0)
                }

                If ((Arg2 == 0x04))
                {
                    Return (WFRC) /* \WFRC */
                }

                If ((Arg2 == 0x05))
                {
                    Return (WFUC) /* \WFUC */
                }

                If ((Arg2 == 0x07))
                {
                    Return (UNI4) /* \UNI4 */
                }

                If ((Arg2 == 0x08))
                {
                    Return (WFIC) /* \WFIC */
                }

                If ((Arg2 == 0x09))
                {
                    Return (WFBS) /* \WFBS */
                }

                If ((Arg2 == 0x0A))
                {
                    Return (WEDT) /* \WEDT */
                }

                If ((Arg2 == 0x0B))
                {
                    If ((CIRM == One))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                If ((Arg2 == 0x0C))
                {
                    Return (WF7C) /* \WF7C */
                }

                Return (Zero)
            }

            Method (EDSM, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If (EDSM (Arg0))
                    {
                        Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                    }

                    If (IDSM (Arg0))
                    {
                        Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)){}
                        If ((Arg2 == 0x02)){}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One))
                            {
                                ADBG ("WWAN Power _DSM D0/L1.2")
                            }
                            ElseIf ((WRTO == 0x02))
                            {
                                ADBG ("WWAN Power _DSM D3/L1.2")
                            }
                            ElseIf ((WRTO == 0x03))
                            {
                                ADBG ("WWAN Power _DSM D3/L2")
                            }
                            Else
                            {
                                ADBG ("WWAN Power _DSM Disabled")
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP02.PXSX))
    {
        Scope (_SB.PC00.RP02.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (PBNU, ^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WDCO), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            OperationRegion (VSEC, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WVHO), 0x10)
            Field (VSEC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x0C), 
                    ,   1, 
                BTIE,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                Offset (0x0D), 
                PDRC,   1
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Case (0x272B8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            If ((SVDC == One))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Case (0x080014C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                Name (RSTY, Zero)
                Name (FLRC, Zero)
                Name (BOFC, Zero)
                Name (DPRS, Zero)
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("Wifi PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("Wifi PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("Wifi PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If ((RSTY == One))
                        {
                            ADBG ("Wifi Product RST")
                            Local0 = Acquire (CNMT, 0x03E8)
                            If ((Local0 == Zero))
                            {
                                If ((FLRC == One))
                                {
                                    Local0 = DCTR /* \_SB_.PC00.RP02.PXSX.DCTR */
                                    Local0 |= 0x8000
                                    DCTR = Local0
                                    Sleep (FDEL)
                                }

                                DPRS = One
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (Zero)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = Zero
                                    }

                                    Sleep (RDLY)
                                }

                                PDRC = One
                                Sleep (VDEL)
                                SGOV (WLRT, Zero)
                                Sleep (PDEL)
                                SGOV (WLRT, One)
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (One)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = One
                                    }

                                    Sleep (RDLY)
                                }

                                DPRS = 0x02
                                Release (CNMT)
                            }
                        }
                        Else
                        {
                            ADBG ("Wifi Core RST")
                            If ((DCAP & 0x10000000))
                            {
                                Local0 = DCTR /* \_SB_.PC00.RP02.PXSX.DCTR */
                                Local0 |= 0x8000
                                DCTR = Local0
                            }

                            DPRS = One
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                    DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                    DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                    Return (SPLX) /* \_SB_.PC00.RP02.PXSX.SPLX */
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                    DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                    DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                    Return (WANX) /* \_SB_.PC00.RP02.PXSX.WANX */
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                    DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                    Return (WRDX) /* \_SB_.PC00.RP02.PXSX.WRDX */
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                    DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                    DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                    DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                    DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                    DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                    DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                    DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                    DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                    DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                    DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                    DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                    DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                    DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                    DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                    DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                    DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                    DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                    DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                    DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                    DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                    DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                    DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                    DerefOf (WRDY [One]) [0x18] = CD10 /* \CD10 */
                    DerefOf (WRDY [One]) [0x19] = CD11 /* \CD11 */
                    DerefOf (WRDY [One]) [0x1A] = CD12 /* \CD12 */
                    DerefOf (WRDY [One]) [0x1B] = CD13 /* \CD13 */
                    DerefOf (WRDY [One]) [0x1C] = CD14 /* \CD14 */
                    DerefOf (WRDY [One]) [0x1D] = CD15 /* \CD15 */
                    DerefOf (WRDY [One]) [0x1E] = CD16 /* \CD16 */
                    DerefOf (WRDY [One]) [0x1F] = CD17 /* \CD17 */
                    DerefOf (WRDY [One]) [0x20] = CD18 /* \CD18 */
                    DerefOf (WRDY [One]) [0x21] = CD19 /* \CD19 */
                    DerefOf (WRDY [One]) [0x22] = CD1A /* \CD1A */
                    DerefOf (WRDY [One]) [0x23] = CD20 /* \CD20 */
                    DerefOf (WRDY [One]) [0x24] = CD21 /* \CD21 */
                    DerefOf (WRDY [One]) [0x25] = CD22 /* \CD22 */
                    DerefOf (WRDY [One]) [0x26] = CD23 /* \CD23 */
                    DerefOf (WRDY [One]) [0x27] = CD24 /* \CD24 */
                    DerefOf (WRDY [One]) [0x28] = CD25 /* \CD25 */
                    DerefOf (WRDY [One]) [0x29] = CD26 /* \CD26 */
                    DerefOf (WRDY [One]) [0x2A] = CD27 /* \CD27 */
                    DerefOf (WRDY [One]) [0x2B] = CD28 /* \CD28 */
                    DerefOf (WRDY [One]) [0x2C] = CD29 /* \CD29 */
                    DerefOf (WRDY [One]) [0x2D] = CD2A /* \CD2A */
                    Return (WRDY) /* \_SB_.PC00.RP02.PXSX.WRDY */
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                    DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                    DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                    DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                    DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                    DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                    DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                    DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                    DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                    DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                    DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                    DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                    DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                    DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                    DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                    DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                    DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                    DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                    DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                    DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                    DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                    DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                    DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                    DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                    DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                    DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                    DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                    DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                    DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                    DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                    DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                    DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                    DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                    DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                    DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                    DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                    DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                    DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                    DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                    DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                    DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                    DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                    DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                    DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                    DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                    DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                    DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                    DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                    DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                    DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                    DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                    DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                    DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                    DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                    DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                    DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                    DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                    DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                    DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                    DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                    DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                    DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                    DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                    DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                    DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                    DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                    DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                    DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                    DerefOf (EWRY [One]) [0x45] = CD30 /* \CD30 */
                    DerefOf (EWRY [One]) [0x46] = CD31 /* \CD31 */
                    DerefOf (EWRY [One]) [0x47] = CD32 /* \CD32 */
                    DerefOf (EWRY [One]) [0x48] = CD33 /* \CD33 */
                    DerefOf (EWRY [One]) [0x49] = CD34 /* \CD34 */
                    DerefOf (EWRY [One]) [0x4A] = CD35 /* \CD35 */
                    DerefOf (EWRY [One]) [0x4B] = CD36 /* \CD36 */
                    DerefOf (EWRY [One]) [0x4C] = CD37 /* \CD37 */
                    DerefOf (EWRY [One]) [0x4D] = CD38 /* \CD38 */
                    DerefOf (EWRY [One]) [0x4E] = CD39 /* \CD39 */
                    DerefOf (EWRY [One]) [0x4F] = CD3A /* \CD3A */
                    DerefOf (EWRY [One]) [0x50] = CD3B /* \CD3B */
                    DerefOf (EWRY [One]) [0x51] = CD3C /* \CD3C */
                    DerefOf (EWRY [One]) [0x52] = CD3D /* \CD3D */
                    DerefOf (EWRY [One]) [0x53] = CD3E /* \CD3E */
                    DerefOf (EWRY [One]) [0x54] = CD3F /* \CD3F */
                    DerefOf (EWRY [One]) [0x55] = CD40 /* \CD40 */
                    DerefOf (EWRY [One]) [0x56] = CD41 /* \CD41 */
                    DerefOf (EWRY [One]) [0x57] = CD42 /* \CD42 */
                    DerefOf (EWRY [One]) [0x58] = CD43 /* \CD43 */
                    DerefOf (EWRY [One]) [0x59] = CD44 /* \CD44 */
                    DerefOf (EWRY [One]) [0x5A] = CD45 /* \CD45 */
                    DerefOf (EWRY [One]) [0x5B] = CD46 /* \CD46 */
                    DerefOf (EWRY [One]) [0x5C] = CD47 /* \CD47 */
                    DerefOf (EWRY [One]) [0x5D] = CD48 /* \CD48 */
                    DerefOf (EWRY [One]) [0x5E] = CD49 /* \CD49 */
                    DerefOf (EWRY [One]) [0x5F] = CD4A /* \CD4A */
                    DerefOf (EWRY [One]) [0x60] = CD4B /* \CD4B */
                    DerefOf (EWRY [One]) [0x61] = CD4C /* \CD4C */
                    DerefOf (EWRY [One]) [0x62] = CD4D /* \CD4D */
                    DerefOf (EWRY [One]) [0x63] = CD4E /* \CD4E */
                    DerefOf (EWRY [One]) [0x64] = CD4F /* \CD4F */
                    DerefOf (EWRY [One]) [0x65] = CD50 /* \CD50 */
                    DerefOf (EWRY [One]) [0x66] = CD51 /* \CD51 */
                    DerefOf (EWRY [One]) [0x67] = CD52 /* \CD52 */
                    DerefOf (EWRY [One]) [0x68] = CD53 /* \CD53 */
                    DerefOf (EWRY [One]) [0x69] = CD54 /* \CD54 */
                    DerefOf (EWRY [One]) [0x6A] = CD55 /* \CD55 */
                    DerefOf (EWRY [One]) [0x6B] = CD56 /* \CD56 */
                    DerefOf (EWRY [One]) [0x6C] = CD57 /* \CD57 */
                    DerefOf (EWRY [One]) [0x6D] = CD58 /* \CD58 */
                    DerefOf (EWRY [One]) [0x6E] = CD59 /* \CD59 */
                    DerefOf (EWRY [One]) [0x6F] = CD5A /* \CD5A */
                    DerefOf (EWRY [One]) [0x70] = CD5B /* \CD5B */
                    DerefOf (EWRY [One]) [0x71] = CD5C /* \CD5C */
                    DerefOf (EWRY [One]) [0x72] = CD5D /* \CD5D */
                    DerefOf (EWRY [One]) [0x73] = CD5E /* \CD5E */
                    DerefOf (EWRY [One]) [0x74] = CD5F /* \CD5F */
                    DerefOf (EWRY [One]) [0x75] = CD60 /* \CD60 */
                    DerefOf (EWRY [One]) [0x76] = CD61 /* \CD61 */
                    DerefOf (EWRY [One]) [0x77] = CD62 /* \CD62 */
                    DerefOf (EWRY [One]) [0x78] = CD63 /* \CD63 */
                    DerefOf (EWRY [One]) [0x79] = CD64 /* \CD64 */
                    DerefOf (EWRY [One]) [0x7A] = CD65 /* \CD65 */
                    DerefOf (EWRY [One]) [0x7B] = CD66 /* \CD66 */
                    DerefOf (EWRY [One]) [0x7C] = CD67 /* \CD67 */
                    DerefOf (EWRY [One]) [0x7D] = CD68 /* \CD68 */
                    DerefOf (EWRY [One]) [0x7E] = CD69 /* \CD69 */
                    DerefOf (EWRY [One]) [0x7F] = CD6A /* \CD6A */
                    DerefOf (EWRY [One]) [0x80] = CD6B /* \CD6B */
                    DerefOf (EWRY [One]) [0x81] = CD6C /* \CD6C */
                    DerefOf (EWRY [One]) [0x82] = CD6D /* \CD6D */
                    DerefOf (EWRY [One]) [0x83] = CD6E /* \CD6E */
                    DerefOf (EWRY [One]) [0x84] = CD6F /* \CD6F */
                    DerefOf (EWRY [One]) [0x85] = CD70 /* \CD70 */
                    DerefOf (EWRY [One]) [0x86] = CD71 /* \CD71 */
                    Return (EWRY) /* \_SB_.PC00.RP02.PXSX.EWRY */
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    DerefOf (WGDY [One]) [One] = SDGN /* \SDGN */
                    DerefOf (WGDY [One]) [0x02] = SD11 /* \SD11 */
                    DerefOf (WGDY [One]) [0x03] = SD12 /* \SD12 */
                    DerefOf (WGDY [One]) [0x04] = SD13 /* \SD13 */
                    DerefOf (WGDY [One]) [0x05] = SD14 /* \SD14 */
                    DerefOf (WGDY [One]) [0x06] = SD15 /* \SD15 */
                    DerefOf (WGDY [One]) [0x07] = SD16 /* \SD16 */
                    DerefOf (WGDY [One]) [0x08] = SD17 /* \SD17 */
                    DerefOf (WGDY [One]) [0x09] = SD18 /* \SD18 */
                    DerefOf (WGDY [One]) [0x0A] = SD19 /* \SD19 */
                    DerefOf (WGDY [One]) [0x0B] = SD21 /* \SD21 */
                    DerefOf (WGDY [One]) [0x0C] = SD22 /* \SD22 */
                    DerefOf (WGDY [One]) [0x0D] = SD23 /* \SD23 */
                    DerefOf (WGDY [One]) [0x0E] = SD24 /* \SD24 */
                    DerefOf (WGDY [One]) [0x0F] = SD25 /* \SD25 */
                    DerefOf (WGDY [One]) [0x10] = SD26 /* \SD26 */
                    DerefOf (WGDY [One]) [0x11] = SD27 /* \SD27 */
                    DerefOf (WGDY [One]) [0x12] = SD28 /* \SD28 */
                    DerefOf (WGDY [One]) [0x13] = SD29 /* \SD29 */
                    DerefOf (WGDY [One]) [0x14] = SD31 /* \SD31 */
                    DerefOf (WGDY [One]) [0x15] = SD32 /* \SD32 */
                    DerefOf (WGDY [One]) [0x16] = SD33 /* \SD33 */
                    DerefOf (WGDY [One]) [0x17] = SD34 /* \SD34 */
                    DerefOf (WGDY [One]) [0x18] = SD35 /* \SD35 */
                    DerefOf (WGDY [One]) [0x19] = SD36 /* \SD36 */
                    DerefOf (WGDY [One]) [0x1A] = SD37 /* \SD37 */
                    DerefOf (WGDY [One]) [0x1B] = SD38 /* \SD38 */
                    DerefOf (WGDY [One]) [0x1C] = SD39 /* \SD39 */
                    DerefOf (WGDY [One]) [0x1D] = SD41 /* \SD41 */
                    DerefOf (WGDY [One]) [0x1E] = SD42 /* \SD42 */
                    DerefOf (WGDY [One]) [0x1F] = SD43 /* \SD43 */
                    DerefOf (WGDY [One]) [0x20] = SD44 /* \SD44 */
                    DerefOf (WGDY [One]) [0x21] = SD45 /* \SD45 */
                    DerefOf (WGDY [One]) [0x22] = SD46 /* \SD46 */
                    DerefOf (WGDY [One]) [0x23] = SD47 /* \SD47 */
                    DerefOf (WGDY [One]) [0x24] = SD48 /* \SD48 */
                    DerefOf (WGDY [One]) [0x25] = SD49 /* \SD49 */
                    DerefOf (WGDY [One]) [0x26] = SD51 /* \SD51 */
                    DerefOf (WGDY [One]) [0x27] = SD52 /* \SD52 */
                    DerefOf (WGDY [One]) [0x28] = SD53 /* \SD53 */
                    DerefOf (WGDY [One]) [0x29] = SD54 /* \SD54 */
                    DerefOf (WGDY [One]) [0x2A] = SD55 /* \SD55 */
                    DerefOf (WGDY [One]) [0x2B] = SD56 /* \SD56 */
                    DerefOf (WGDY [One]) [0x2C] = SD57 /* \SD57 */
                    DerefOf (WGDY [One]) [0x2D] = SD58 /* \SD58 */
                    DerefOf (WGDY [One]) [0x2E] = SD59 /* \SD59 */
                    DerefOf (WGDY [One]) [0x2F] = SD61 /* \SD61 */
                    DerefOf (WGDY [One]) [0x30] = SD62 /* \SD62 */
                    DerefOf (WGDY [One]) [0x31] = SD63 /* \SD63 */
                    DerefOf (WGDY [One]) [0x32] = SD64 /* \SD64 */
                    DerefOf (WGDY [One]) [0x33] = SD65 /* \SD65 */
                    DerefOf (WGDY [One]) [0x34] = SD66 /* \SD66 */
                    DerefOf (WGDY [One]) [0x35] = SD67 /* \SD67 */
                    DerefOf (WGDY [One]) [0x36] = SD68 /* \SD68 */
                    DerefOf (WGDY [One]) [0x37] = SD69 /* \SD69 */
                    DerefOf (WGDY [One]) [0x38] = SD71 /* \SD71 */
                    DerefOf (WGDY [One]) [0x39] = SD72 /* \SD72 */
                    DerefOf (WGDY [One]) [0x3A] = SD73 /* \SD73 */
                    DerefOf (WGDY [One]) [0x3B] = SD74 /* \SD74 */
                    DerefOf (WGDY [One]) [0x3C] = SD75 /* \SD75 */
                    DerefOf (WGDY [One]) [0x3D] = SD76 /* \SD76 */
                    DerefOf (WGDY [One]) [0x3E] = SD77 /* \SD77 */
                    DerefOf (WGDY [One]) [0x3F] = SD78 /* \SD78 */
                    DerefOf (WGDY [One]) [0x40] = SD79 /* \SD79 */
                    DerefOf (WGDY [One]) [0x41] = SD81 /* \SD81 */
                    DerefOf (WGDY [One]) [0x42] = SD82 /* \SD82 */
                    DerefOf (WGDY [One]) [0x43] = SD83 /* \SD83 */
                    DerefOf (WGDY [One]) [0x44] = SD84 /* \SD84 */
                    DerefOf (WGDY [One]) [0x45] = SD85 /* \SD85 */
                    DerefOf (WGDY [One]) [0x46] = SD86 /* \SD86 */
                    DerefOf (WGDY [One]) [0x47] = SD87 /* \SD87 */
                    DerefOf (WGDY [One]) [0x48] = SD88 /* \SD88 */
                    DerefOf (WGDY [One]) [0x49] = SD89 /* \SD89 */
                    Return (WGDY) /* \_SB_.PC00.RP02.PXSX.WGDY */
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                    Return (ECKY) /* \_SB_.PC00.RP02.PXSX.ECKY */
                }

                Name (PPAY, Package (0x02)
                {
                    0x02, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    DerefOf (PPAY [One]) [One] = WAGM /* \WAGM */
                    DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                    DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                    DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                    DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                    DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                    DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                    DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                    DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                    DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                    DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                    DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                    DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                    DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                    DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                    DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                    DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                    DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                    DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                    DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                    DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                    DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                    DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                    Return (PPAY) /* \_SB_.PC00.RP02.PXSX.PPAY */
                }

                Name (WPFY, Package (0x02)
                {
                    Zero, 
                    Package (0x05)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WPFC, 0, Serialized)
                {
                    DerefOf (WPFY [One]) [One] = WPFA /* \WPFA */
                    DerefOf (WPFY [One]) [0x02] = WPFB /* \WPFB */
                    DerefOf (WPFY [One]) [0x03] = \WPFC
                    DerefOf (WPFY [One]) [0x04] = WPFD /* \WPFD */
                    Return (WPFY) /* \_SB_.PC00.RP02.PXSX.WPFY */
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    DerefOf (WTSY [One]) [One] = WTSE /* \WTSE */
                    DerefOf (WTSY [One]) [0x02] = WTLE /* \WTLE */
                    DerefOf (WTSY [One]) [0x03] = BL01 /* \BL01 */
                    DerefOf (WTSY [One]) [0x04] = BL02 /* \BL02 */
                    DerefOf (WTSY [One]) [0x05] = BL03 /* \BL03 */
                    DerefOf (WTSY [One]) [0x06] = BL04 /* \BL04 */
                    DerefOf (WTSY [One]) [0x07] = BL05 /* \BL05 */
                    DerefOf (WTSY [One]) [0x08] = BL06 /* \BL06 */
                    DerefOf (WTSY [One]) [0x09] = BL07 /* \BL07 */
                    DerefOf (WTSY [One]) [0x0A] = BL08 /* \BL08 */
                    DerefOf (WTSY [One]) [0x0B] = BL09 /* \BL09 */
                    DerefOf (WTSY [One]) [0x0C] = BL10 /* \BL10 */
                    DerefOf (WTSY [One]) [0x0D] = BL11 /* \BL11 */
                    DerefOf (WTSY [One]) [0x0E] = BL12 /* \BL12 */
                    DerefOf (WTSY [One]) [0x0F] = BL13 /* \BL13 */
                    DerefOf (WTSY [One]) [0x10] = BL14 /* \BL14 */
                    DerefOf (WTSY [One]) [0x11] = BL15 /* \BL15 */
                    DerefOf (WTSY [One]) [0x12] = BL16 /* \BL16 */
                    Return (WTSY) /* \_SB_.PC00.RP02.PXSX.WTSY */
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    DerefOf (WAIY [One]) [One] = WLBI /* \WLBI */
                    DerefOf (WAIY [One]) [0x02] = WHBI /* \WHBI */
                    Return (WAIY) /* \_SB_.PC00.RP02.PXSX.WAIY */
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PC00.RP02.PXSX.SADX */
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PC00.RP02.PXSX.GPCX */
                }

                Name (GLAX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Zero
                    }
                })
                Method (GLAI, 0, Serialized)
                {
                    ADBG (Concatenate ("AR: GLAI method. CGLS = ", ToHexString (CGLS)))
                    DerefOf (GLAX [One]) [One] = CGLS /* \CGLS */
                    DerefOf (GLAX [0x02]) [One] = CGLS /* \CGLS */
                    Return (GLAX) /* \_SB_.PC00.RP02.PXSX.GLAX */
                }
            }

            If (((WWEN != Zero) && (WWRP == SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If ((GGOV (PRST) != WPRP))
                    {
                        DL23 ()
                        ADBG ("WWAN DL23() Done")
                        SGOV (PRST, WPRP)
                        ADBG ("WWAN PERST:0 Done")
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    ADBG ("WWAN RST:0 Done")
                    If ((Arg0 == Zero))
                    {
                        Sleep (TBTG)
                        ADBG (Concatenate ("SLP TBTG ", ToDecimalString (TBTG)))
                    }
                    ElseIf ((Arg0 == One))
                    {
                        SPCO (WCLK, Zero)
                        ADBG ("WWAN SCLK:0 Done")
                        Sleep (TB2F)
                        ADBG (Concatenate ("SLP TB2F ", ToDecimalString (TB2F)))
                        SGOV (WFCP, (~PFCP & One))
                        ADBG ("WWAN PWR:0 Done")
                        Sleep (TFDI)
                        ADBG (Concatenate ("SLP TFDI ", ToDecimalString (TFDI)))
                    }
                    Else
                    {
                        ADBG ("Unsupported Arg0 is detected.")
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    ADBG ("WWAN MPHYPG:0 Done")
                    SPCO (WCLK, One)
                    ADBG ("WWAN SCLK:1 Done")
                    SGOV (WFCP, PFCP)
                    ADBG ("WWAN PWR:1 Done")
                    Sleep (TN2B)
                    ADBG (Concatenate ("SLP TN2B ", ToDecimalString (TN2B)))
                    SGOV (WBRS, (~PBRS & One))
                    ADBG ("WWAN RST:1 Done")
                    Sleep (TB2R)
                    ADBG (Concatenate ("SLP TB2R ", ToDecimalString (TB2R)))
                    SGOV (PRST, (~WPRP & One))
                    ADBG ("WWAN PERST:0 Done")
                    L23D ()
                    ADBG ("WWAN L23D() Done")
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Local0 = Zero
                    While (((SVID != WSID) && (Local0 < WSTO)))
                    {
                        Local0++
                        Sleep (One)
                    }

                    ADBG (Concatenate ("DET Time ", ToDecimalString (Local0)))
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    ADBG ("_RST WWAN")
                    If ((WWEN == 0x02))
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN FLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN FLDR")
                            FHRF (Zero)
                            SHRF ()
                            ADBG ("End WWAN FLDR")
                            Release (WWMT)
                            ADBG ("WWAN FLDR Mutex:Release Done")
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One) // Device Check
                        SGOV (PRST, (~WPRP & One))
                        SGOV (WBRS, (~PBRS & One))
                        Sleep (0xC8)
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x14))
                            {
                                ADBG ("FLDR TO")
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        Sleep (0x0A)
                        ADBG (Concatenate ("RVP Delay Time ", ToDecimalString (Local0)))
                        Notify (PXSX, One) // Device Check
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        ADBG ("WWAN PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        ADBG ("WWAN PR _ON")
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        ADBG ("WWAN PR _OFF")
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN PLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN PLDR")
                            FHRF (One)
                            SHRF ()
                            ADBG ("End WWAN PR _RST")
                            Release (WWMT)
                            ADBG ("WWAN PLDR Mutex: Release Done")
                            DOSV ()
                        }
                    }
                }
            }

            If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
            {
                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        WRST
                    })
                }

                Name (FDEL, Zero)
                Name (PDEL, Zero)
                Name (VDEL, Zero)
                Method (IFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x1F                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        ADBG (Concatenate ("vPro: ", CVPR))
                        Local0 = (CVPR << Zero)
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        ADBG (Concatenate ("CmdType = ", ToHexString (CMDT)))
                        ADBG (Concatenate ("CmdPayload = ", ToHexString (CMDP)))
                        If ((CMDT == One))
                        {
                            If (WIST ())
                            {
                                Return (RSTY) /* \_SB_.PC00.RP02.PXSX.RSTY */
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Get _PRR Mode = ", ^^^CNVW.RSTT))
                                Return (^^^CNVW.RSTT) /* \_SB_.PC00.CNVW.RSTT */
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((CMDT == 0x02))
                        {
                            If (WIST ())
                            {
                                Local0 = (CMDP & One)
                                RSTY = Local0
                                Local1 = (CMDP & 0x02)
                                Local1 >>= One
                                FLRC = Local1
                                Local2 = (CMDP & 0x04)
                                Local2 >>= 0x02
                                BOFC = Local2
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Set _PRR Mode = ", ToHexString (CMDP)))
                                ^^^CNVW.RSTT = CMDP /* \_SB_.PC00.RP02.PXSX.IFUN.CMDP */
                            }

                            Return (Zero)
                        }

                        If ((CMDT == 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                ADBG (Concatenate ("Get Last_PRR status PRRS = ", ToHexString (^^^CNVW.PRRS)))
                                Return (^^^CNVW.PRRS) /* \_SB_.PC00.CNVW.PRRS */
                            }
                            ElseIf (WIST ())
                            {
                                ADBG (Concatenate ("Get Last_PRR status DPRS = ", ToHexString (DPRS)))
                                Return (DPRS) /* \_SB_.PC00.RP02.PXSX.DPRS */
                            }
                        }

                        Return (Zero)
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((CRFI == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        CreateWordField (Arg3, Zero, PRTT)
                        CreateWordField (Arg3, 0x02, PRTD)
                        ADBG (Concatenate ("TimerType = ", ToHexString (PRTT)))
                        ADBG (Concatenate ("TimerDuration (ms) = ", ToDecimalString (PRTD)))
                        If ((PRTT == One))
                        {
                            FDEL = PRTD /* \_SB_.PC00.RP02.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x02))
                        {
                            PDEL = PRTD /* \_SB_.PC00.RP02.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x03))
                        {
                            VDEL = PRTD /* \_SB_.PC00.RP02.PXSX.IFUN.PRTD */
                        }
                        Else
                        {
                            ADBG ("TimerDuration not set")
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x1F                                       // ..
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Local0 = ACSD /* \ACSD */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Local0 = I5BS /* \I5BS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 = UHBS /* \UHBS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x06))
                    {
                        Local0 = AXMU /* \AXMU */
                        Local0 <<= One
                        Local0 |= AXSU /* \AXSU */
                        Local1 = AXMR /* \AXMR */
                        Local1 <<= One
                        Local1 |= AXSR /* \AXSR */
                        Local1 <<= 0x02
                        Local0 |= Local1
                        Return (Local0)
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (WFRC) /* \WFRC */
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (WFUC) /* \WFUC */
                    }

                    If ((Arg2 == 0x07))
                    {
                        Return (UNI4) /* \UNI4 */
                    }

                    If ((Arg2 == 0x08))
                    {
                        Return (WFIC) /* \WFIC */
                    }

                    If ((Arg2 == 0x09))
                    {
                        Return (WFBS) /* \WFBS */
                    }

                    If ((Arg2 == 0x0A))
                    {
                        Return (WEDT) /* \WEDT */
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((CIRM == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        Return (WF7C) /* \WF7C */
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                        {
                            If ((Arg2 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                             // .
                                })
                            }

                            If ((Arg2 == One)){}
                            If ((Arg2 == 0x02)){}
                            If ((Arg2 == 0x03))
                            {
                                If ((WRTO == One))
                                {
                                    ADBG ("WWAN Power _DSM D0/L1.2")
                                }
                                ElseIf ((WRTO == 0x02))
                                {
                                    ADBG ("WWAN Power _DSM D3/L1.2")
                                }
                                ElseIf ((WRTO == 0x03))
                                {
                                    ADBG ("WWAN Power _DSM D3/L2")
                                }
                                Else
                                {
                                    ADBG ("WWAN Power _DSM Disabled")
                                }

                                Return (WRTO) /* \WRTO */
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP03.PXSX))
    {
        Scope (_SB.PC00.RP03.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (PBNU, ^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WDCO), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            OperationRegion (VSEC, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WVHO), 0x10)
            Field (VSEC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x0C), 
                    ,   1, 
                BTIE,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                Offset (0x0D), 
                PDRC,   1
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Case (0x272B8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            If ((SVDC == One))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Case (0x080014C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                Name (RSTY, Zero)
                Name (FLRC, Zero)
                Name (BOFC, Zero)
                Name (DPRS, Zero)
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("Wifi PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("Wifi PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("Wifi PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If ((RSTY == One))
                        {
                            ADBG ("Wifi Product RST")
                            Local0 = Acquire (CNMT, 0x03E8)
                            If ((Local0 == Zero))
                            {
                                If ((FLRC == One))
                                {
                                    Local0 = DCTR /* \_SB_.PC00.RP03.PXSX.DCTR */
                                    Local0 |= 0x8000
                                    DCTR = Local0
                                    Sleep (FDEL)
                                }

                                DPRS = One
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (Zero)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = Zero
                                    }

                                    Sleep (RDLY)
                                }

                                PDRC = One
                                Sleep (VDEL)
                                SGOV (WLRT, Zero)
                                Sleep (PDEL)
                                SGOV (WLRT, One)
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (One)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = One
                                    }

                                    Sleep (RDLY)
                                }

                                DPRS = 0x02
                                Release (CNMT)
                            }
                        }
                        Else
                        {
                            ADBG ("Wifi Core RST")
                            If ((DCAP & 0x10000000))
                            {
                                Local0 = DCTR /* \_SB_.PC00.RP03.PXSX.DCTR */
                                Local0 |= 0x8000
                                DCTR = Local0
                            }

                            DPRS = One
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                    DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                    DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                    Return (SPLX) /* \_SB_.PC00.RP03.PXSX.SPLX */
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                    DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                    DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                    Return (WANX) /* \_SB_.PC00.RP03.PXSX.WANX */
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                    DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                    Return (WRDX) /* \_SB_.PC00.RP03.PXSX.WRDX */
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                    DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                    DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                    DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                    DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                    DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                    DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                    DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                    DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                    DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                    DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                    DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                    DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                    DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                    DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                    DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                    DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                    DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                    DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                    DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                    DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                    DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                    DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                    DerefOf (WRDY [One]) [0x18] = CD10 /* \CD10 */
                    DerefOf (WRDY [One]) [0x19] = CD11 /* \CD11 */
                    DerefOf (WRDY [One]) [0x1A] = CD12 /* \CD12 */
                    DerefOf (WRDY [One]) [0x1B] = CD13 /* \CD13 */
                    DerefOf (WRDY [One]) [0x1C] = CD14 /* \CD14 */
                    DerefOf (WRDY [One]) [0x1D] = CD15 /* \CD15 */
                    DerefOf (WRDY [One]) [0x1E] = CD16 /* \CD16 */
                    DerefOf (WRDY [One]) [0x1F] = CD17 /* \CD17 */
                    DerefOf (WRDY [One]) [0x20] = CD18 /* \CD18 */
                    DerefOf (WRDY [One]) [0x21] = CD19 /* \CD19 */
                    DerefOf (WRDY [One]) [0x22] = CD1A /* \CD1A */
                    DerefOf (WRDY [One]) [0x23] = CD20 /* \CD20 */
                    DerefOf (WRDY [One]) [0x24] = CD21 /* \CD21 */
                    DerefOf (WRDY [One]) [0x25] = CD22 /* \CD22 */
                    DerefOf (WRDY [One]) [0x26] = CD23 /* \CD23 */
                    DerefOf (WRDY [One]) [0x27] = CD24 /* \CD24 */
                    DerefOf (WRDY [One]) [0x28] = CD25 /* \CD25 */
                    DerefOf (WRDY [One]) [0x29] = CD26 /* \CD26 */
                    DerefOf (WRDY [One]) [0x2A] = CD27 /* \CD27 */
                    DerefOf (WRDY [One]) [0x2B] = CD28 /* \CD28 */
                    DerefOf (WRDY [One]) [0x2C] = CD29 /* \CD29 */
                    DerefOf (WRDY [One]) [0x2D] = CD2A /* \CD2A */
                    Return (WRDY) /* \_SB_.PC00.RP03.PXSX.WRDY */
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                    DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                    DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                    DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                    DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                    DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                    DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                    DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                    DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                    DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                    DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                    DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                    DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                    DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                    DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                    DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                    DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                    DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                    DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                    DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                    DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                    DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                    DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                    DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                    DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                    DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                    DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                    DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                    DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                    DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                    DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                    DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                    DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                    DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                    DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                    DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                    DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                    DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                    DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                    DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                    DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                    DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                    DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                    DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                    DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                    DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                    DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                    DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                    DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                    DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                    DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                    DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                    DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                    DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                    DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                    DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                    DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                    DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                    DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                    DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                    DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                    DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                    DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                    DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                    DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                    DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                    DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                    DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                    DerefOf (EWRY [One]) [0x45] = CD30 /* \CD30 */
                    DerefOf (EWRY [One]) [0x46] = CD31 /* \CD31 */
                    DerefOf (EWRY [One]) [0x47] = CD32 /* \CD32 */
                    DerefOf (EWRY [One]) [0x48] = CD33 /* \CD33 */
                    DerefOf (EWRY [One]) [0x49] = CD34 /* \CD34 */
                    DerefOf (EWRY [One]) [0x4A] = CD35 /* \CD35 */
                    DerefOf (EWRY [One]) [0x4B] = CD36 /* \CD36 */
                    DerefOf (EWRY [One]) [0x4C] = CD37 /* \CD37 */
                    DerefOf (EWRY [One]) [0x4D] = CD38 /* \CD38 */
                    DerefOf (EWRY [One]) [0x4E] = CD39 /* \CD39 */
                    DerefOf (EWRY [One]) [0x4F] = CD3A /* \CD3A */
                    DerefOf (EWRY [One]) [0x50] = CD3B /* \CD3B */
                    DerefOf (EWRY [One]) [0x51] = CD3C /* \CD3C */
                    DerefOf (EWRY [One]) [0x52] = CD3D /* \CD3D */
                    DerefOf (EWRY [One]) [0x53] = CD3E /* \CD3E */
                    DerefOf (EWRY [One]) [0x54] = CD3F /* \CD3F */
                    DerefOf (EWRY [One]) [0x55] = CD40 /* \CD40 */
                    DerefOf (EWRY [One]) [0x56] = CD41 /* \CD41 */
                    DerefOf (EWRY [One]) [0x57] = CD42 /* \CD42 */
                    DerefOf (EWRY [One]) [0x58] = CD43 /* \CD43 */
                    DerefOf (EWRY [One]) [0x59] = CD44 /* \CD44 */
                    DerefOf (EWRY [One]) [0x5A] = CD45 /* \CD45 */
                    DerefOf (EWRY [One]) [0x5B] = CD46 /* \CD46 */
                    DerefOf (EWRY [One]) [0x5C] = CD47 /* \CD47 */
                    DerefOf (EWRY [One]) [0x5D] = CD48 /* \CD48 */
                    DerefOf (EWRY [One]) [0x5E] = CD49 /* \CD49 */
                    DerefOf (EWRY [One]) [0x5F] = CD4A /* \CD4A */
                    DerefOf (EWRY [One]) [0x60] = CD4B /* \CD4B */
                    DerefOf (EWRY [One]) [0x61] = CD4C /* \CD4C */
                    DerefOf (EWRY [One]) [0x62] = CD4D /* \CD4D */
                    DerefOf (EWRY [One]) [0x63] = CD4E /* \CD4E */
                    DerefOf (EWRY [One]) [0x64] = CD4F /* \CD4F */
                    DerefOf (EWRY [One]) [0x65] = CD50 /* \CD50 */
                    DerefOf (EWRY [One]) [0x66] = CD51 /* \CD51 */
                    DerefOf (EWRY [One]) [0x67] = CD52 /* \CD52 */
                    DerefOf (EWRY [One]) [0x68] = CD53 /* \CD53 */
                    DerefOf (EWRY [One]) [0x69] = CD54 /* \CD54 */
                    DerefOf (EWRY [One]) [0x6A] = CD55 /* \CD55 */
                    DerefOf (EWRY [One]) [0x6B] = CD56 /* \CD56 */
                    DerefOf (EWRY [One]) [0x6C] = CD57 /* \CD57 */
                    DerefOf (EWRY [One]) [0x6D] = CD58 /* \CD58 */
                    DerefOf (EWRY [One]) [0x6E] = CD59 /* \CD59 */
                    DerefOf (EWRY [One]) [0x6F] = CD5A /* \CD5A */
                    DerefOf (EWRY [One]) [0x70] = CD5B /* \CD5B */
                    DerefOf (EWRY [One]) [0x71] = CD5C /* \CD5C */
                    DerefOf (EWRY [One]) [0x72] = CD5D /* \CD5D */
                    DerefOf (EWRY [One]) [0x73] = CD5E /* \CD5E */
                    DerefOf (EWRY [One]) [0x74] = CD5F /* \CD5F */
                    DerefOf (EWRY [One]) [0x75] = CD60 /* \CD60 */
                    DerefOf (EWRY [One]) [0x76] = CD61 /* \CD61 */
                    DerefOf (EWRY [One]) [0x77] = CD62 /* \CD62 */
                    DerefOf (EWRY [One]) [0x78] = CD63 /* \CD63 */
                    DerefOf (EWRY [One]) [0x79] = CD64 /* \CD64 */
                    DerefOf (EWRY [One]) [0x7A] = CD65 /* \CD65 */
                    DerefOf (EWRY [One]) [0x7B] = CD66 /* \CD66 */
                    DerefOf (EWRY [One]) [0x7C] = CD67 /* \CD67 */
                    DerefOf (EWRY [One]) [0x7D] = CD68 /* \CD68 */
                    DerefOf (EWRY [One]) [0x7E] = CD69 /* \CD69 */
                    DerefOf (EWRY [One]) [0x7F] = CD6A /* \CD6A */
                    DerefOf (EWRY [One]) [0x80] = CD6B /* \CD6B */
                    DerefOf (EWRY [One]) [0x81] = CD6C /* \CD6C */
                    DerefOf (EWRY [One]) [0x82] = CD6D /* \CD6D */
                    DerefOf (EWRY [One]) [0x83] = CD6E /* \CD6E */
                    DerefOf (EWRY [One]) [0x84] = CD6F /* \CD6F */
                    DerefOf (EWRY [One]) [0x85] = CD70 /* \CD70 */
                    DerefOf (EWRY [One]) [0x86] = CD71 /* \CD71 */
                    Return (EWRY) /* \_SB_.PC00.RP03.PXSX.EWRY */
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    DerefOf (WGDY [One]) [One] = SDGN /* \SDGN */
                    DerefOf (WGDY [One]) [0x02] = SD11 /* \SD11 */
                    DerefOf (WGDY [One]) [0x03] = SD12 /* \SD12 */
                    DerefOf (WGDY [One]) [0x04] = SD13 /* \SD13 */
                    DerefOf (WGDY [One]) [0x05] = SD14 /* \SD14 */
                    DerefOf (WGDY [One]) [0x06] = SD15 /* \SD15 */
                    DerefOf (WGDY [One]) [0x07] = SD16 /* \SD16 */
                    DerefOf (WGDY [One]) [0x08] = SD17 /* \SD17 */
                    DerefOf (WGDY [One]) [0x09] = SD18 /* \SD18 */
                    DerefOf (WGDY [One]) [0x0A] = SD19 /* \SD19 */
                    DerefOf (WGDY [One]) [0x0B] = SD21 /* \SD21 */
                    DerefOf (WGDY [One]) [0x0C] = SD22 /* \SD22 */
                    DerefOf (WGDY [One]) [0x0D] = SD23 /* \SD23 */
                    DerefOf (WGDY [One]) [0x0E] = SD24 /* \SD24 */
                    DerefOf (WGDY [One]) [0x0F] = SD25 /* \SD25 */
                    DerefOf (WGDY [One]) [0x10] = SD26 /* \SD26 */
                    DerefOf (WGDY [One]) [0x11] = SD27 /* \SD27 */
                    DerefOf (WGDY [One]) [0x12] = SD28 /* \SD28 */
                    DerefOf (WGDY [One]) [0x13] = SD29 /* \SD29 */
                    DerefOf (WGDY [One]) [0x14] = SD31 /* \SD31 */
                    DerefOf (WGDY [One]) [0x15] = SD32 /* \SD32 */
                    DerefOf (WGDY [One]) [0x16] = SD33 /* \SD33 */
                    DerefOf (WGDY [One]) [0x17] = SD34 /* \SD34 */
                    DerefOf (WGDY [One]) [0x18] = SD35 /* \SD35 */
                    DerefOf (WGDY [One]) [0x19] = SD36 /* \SD36 */
                    DerefOf (WGDY [One]) [0x1A] = SD37 /* \SD37 */
                    DerefOf (WGDY [One]) [0x1B] = SD38 /* \SD38 */
                    DerefOf (WGDY [One]) [0x1C] = SD39 /* \SD39 */
                    DerefOf (WGDY [One]) [0x1D] = SD41 /* \SD41 */
                    DerefOf (WGDY [One]) [0x1E] = SD42 /* \SD42 */
                    DerefOf (WGDY [One]) [0x1F] = SD43 /* \SD43 */
                    DerefOf (WGDY [One]) [0x20] = SD44 /* \SD44 */
                    DerefOf (WGDY [One]) [0x21] = SD45 /* \SD45 */
                    DerefOf (WGDY [One]) [0x22] = SD46 /* \SD46 */
                    DerefOf (WGDY [One]) [0x23] = SD47 /* \SD47 */
                    DerefOf (WGDY [One]) [0x24] = SD48 /* \SD48 */
                    DerefOf (WGDY [One]) [0x25] = SD49 /* \SD49 */
                    DerefOf (WGDY [One]) [0x26] = SD51 /* \SD51 */
                    DerefOf (WGDY [One]) [0x27] = SD52 /* \SD52 */
                    DerefOf (WGDY [One]) [0x28] = SD53 /* \SD53 */
                    DerefOf (WGDY [One]) [0x29] = SD54 /* \SD54 */
                    DerefOf (WGDY [One]) [0x2A] = SD55 /* \SD55 */
                    DerefOf (WGDY [One]) [0x2B] = SD56 /* \SD56 */
                    DerefOf (WGDY [One]) [0x2C] = SD57 /* \SD57 */
                    DerefOf (WGDY [One]) [0x2D] = SD58 /* \SD58 */
                    DerefOf (WGDY [One]) [0x2E] = SD59 /* \SD59 */
                    DerefOf (WGDY [One]) [0x2F] = SD61 /* \SD61 */
                    DerefOf (WGDY [One]) [0x30] = SD62 /* \SD62 */
                    DerefOf (WGDY [One]) [0x31] = SD63 /* \SD63 */
                    DerefOf (WGDY [One]) [0x32] = SD64 /* \SD64 */
                    DerefOf (WGDY [One]) [0x33] = SD65 /* \SD65 */
                    DerefOf (WGDY [One]) [0x34] = SD66 /* \SD66 */
                    DerefOf (WGDY [One]) [0x35] = SD67 /* \SD67 */
                    DerefOf (WGDY [One]) [0x36] = SD68 /* \SD68 */
                    DerefOf (WGDY [One]) [0x37] = SD69 /* \SD69 */
                    DerefOf (WGDY [One]) [0x38] = SD71 /* \SD71 */
                    DerefOf (WGDY [One]) [0x39] = SD72 /* \SD72 */
                    DerefOf (WGDY [One]) [0x3A] = SD73 /* \SD73 */
                    DerefOf (WGDY [One]) [0x3B] = SD74 /* \SD74 */
                    DerefOf (WGDY [One]) [0x3C] = SD75 /* \SD75 */
                    DerefOf (WGDY [One]) [0x3D] = SD76 /* \SD76 */
                    DerefOf (WGDY [One]) [0x3E] = SD77 /* \SD77 */
                    DerefOf (WGDY [One]) [0x3F] = SD78 /* \SD78 */
                    DerefOf (WGDY [One]) [0x40] = SD79 /* \SD79 */
                    DerefOf (WGDY [One]) [0x41] = SD81 /* \SD81 */
                    DerefOf (WGDY [One]) [0x42] = SD82 /* \SD82 */
                    DerefOf (WGDY [One]) [0x43] = SD83 /* \SD83 */
                    DerefOf (WGDY [One]) [0x44] = SD84 /* \SD84 */
                    DerefOf (WGDY [One]) [0x45] = SD85 /* \SD85 */
                    DerefOf (WGDY [One]) [0x46] = SD86 /* \SD86 */
                    DerefOf (WGDY [One]) [0x47] = SD87 /* \SD87 */
                    DerefOf (WGDY [One]) [0x48] = SD88 /* \SD88 */
                    DerefOf (WGDY [One]) [0x49] = SD89 /* \SD89 */
                    Return (WGDY) /* \_SB_.PC00.RP03.PXSX.WGDY */
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                    Return (ECKY) /* \_SB_.PC00.RP03.PXSX.ECKY */
                }

                Name (PPAY, Package (0x02)
                {
                    0x02, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    DerefOf (PPAY [One]) [One] = WAGM /* \WAGM */
                    DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                    DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                    DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                    DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                    DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                    DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                    DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                    DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                    DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                    DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                    DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                    DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                    DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                    DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                    DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                    DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                    DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                    DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                    DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                    DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                    DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                    DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                    Return (PPAY) /* \_SB_.PC00.RP03.PXSX.PPAY */
                }

                Name (WPFY, Package (0x02)
                {
                    Zero, 
                    Package (0x05)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WPFC, 0, Serialized)
                {
                    DerefOf (WPFY [One]) [One] = WPFA /* \WPFA */
                    DerefOf (WPFY [One]) [0x02] = WPFB /* \WPFB */
                    DerefOf (WPFY [One]) [0x03] = \WPFC
                    DerefOf (WPFY [One]) [0x04] = WPFD /* \WPFD */
                    Return (WPFY) /* \_SB_.PC00.RP03.PXSX.WPFY */
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    DerefOf (WTSY [One]) [One] = WTSE /* \WTSE */
                    DerefOf (WTSY [One]) [0x02] = WTLE /* \WTLE */
                    DerefOf (WTSY [One]) [0x03] = BL01 /* \BL01 */
                    DerefOf (WTSY [One]) [0x04] = BL02 /* \BL02 */
                    DerefOf (WTSY [One]) [0x05] = BL03 /* \BL03 */
                    DerefOf (WTSY [One]) [0x06] = BL04 /* \BL04 */
                    DerefOf (WTSY [One]) [0x07] = BL05 /* \BL05 */
                    DerefOf (WTSY [One]) [0x08] = BL06 /* \BL06 */
                    DerefOf (WTSY [One]) [0x09] = BL07 /* \BL07 */
                    DerefOf (WTSY [One]) [0x0A] = BL08 /* \BL08 */
                    DerefOf (WTSY [One]) [0x0B] = BL09 /* \BL09 */
                    DerefOf (WTSY [One]) [0x0C] = BL10 /* \BL10 */
                    DerefOf (WTSY [One]) [0x0D] = BL11 /* \BL11 */
                    DerefOf (WTSY [One]) [0x0E] = BL12 /* \BL12 */
                    DerefOf (WTSY [One]) [0x0F] = BL13 /* \BL13 */
                    DerefOf (WTSY [One]) [0x10] = BL14 /* \BL14 */
                    DerefOf (WTSY [One]) [0x11] = BL15 /* \BL15 */
                    DerefOf (WTSY [One]) [0x12] = BL16 /* \BL16 */
                    Return (WTSY) /* \_SB_.PC00.RP03.PXSX.WTSY */
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    DerefOf (WAIY [One]) [One] = WLBI /* \WLBI */
                    DerefOf (WAIY [One]) [0x02] = WHBI /* \WHBI */
                    Return (WAIY) /* \_SB_.PC00.RP03.PXSX.WAIY */
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PC00.RP03.PXSX.SADX */
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PC00.RP03.PXSX.GPCX */
                }

                Name (GLAX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Zero
                    }
                })
                Method (GLAI, 0, Serialized)
                {
                    ADBG (Concatenate ("AR: GLAI method. CGLS = ", ToHexString (CGLS)))
                    DerefOf (GLAX [One]) [One] = CGLS /* \CGLS */
                    DerefOf (GLAX [0x02]) [One] = CGLS /* \CGLS */
                    Return (GLAX) /* \_SB_.PC00.RP03.PXSX.GLAX */
                }
            }

            If (((WWEN != Zero) && (WWRP == SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If ((GGOV (PRST) != WPRP))
                    {
                        DL23 ()
                        ADBG ("WWAN DL23() Done")
                        SGOV (PRST, WPRP)
                        ADBG ("WWAN PERST:0 Done")
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    ADBG ("WWAN RST:0 Done")
                    If ((Arg0 == Zero))
                    {
                        Sleep (TBTG)
                        ADBG (Concatenate ("SLP TBTG ", ToDecimalString (TBTG)))
                    }
                    ElseIf ((Arg0 == One))
                    {
                        SPCO (WCLK, Zero)
                        ADBG ("WWAN SCLK:0 Done")
                        Sleep (TB2F)
                        ADBG (Concatenate ("SLP TB2F ", ToDecimalString (TB2F)))
                        SGOV (WFCP, (~PFCP & One))
                        ADBG ("WWAN PWR:0 Done")
                        Sleep (TFDI)
                        ADBG (Concatenate ("SLP TFDI ", ToDecimalString (TFDI)))
                    }
                    Else
                    {
                        ADBG ("Unsupported Arg0 is detected.")
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    ADBG ("WWAN MPHYPG:0 Done")
                    SPCO (WCLK, One)
                    ADBG ("WWAN SCLK:1 Done")
                    SGOV (WFCP, PFCP)
                    ADBG ("WWAN PWR:1 Done")
                    Sleep (TN2B)
                    ADBG (Concatenate ("SLP TN2B ", ToDecimalString (TN2B)))
                    SGOV (WBRS, (~PBRS & One))
                    ADBG ("WWAN RST:1 Done")
                    Sleep (TB2R)
                    ADBG (Concatenate ("SLP TB2R ", ToDecimalString (TB2R)))
                    SGOV (PRST, (~WPRP & One))
                    ADBG ("WWAN PERST:0 Done")
                    L23D ()
                    ADBG ("WWAN L23D() Done")
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Local0 = Zero
                    While (((SVID != WSID) && (Local0 < WSTO)))
                    {
                        Local0++
                        Sleep (One)
                    }

                    ADBG (Concatenate ("DET Time ", ToDecimalString (Local0)))
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    ADBG ("_RST WWAN")
                    If ((WWEN == 0x02))
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN FLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN FLDR")
                            FHRF (Zero)
                            SHRF ()
                            ADBG ("End WWAN FLDR")
                            Release (WWMT)
                            ADBG ("WWAN FLDR Mutex:Release Done")
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One) // Device Check
                        SGOV (PRST, (~WPRP & One))
                        SGOV (WBRS, (~PBRS & One))
                        Sleep (0xC8)
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x14))
                            {
                                ADBG ("FLDR TO")
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        Sleep (0x0A)
                        ADBG (Concatenate ("RVP Delay Time ", ToDecimalString (Local0)))
                        Notify (PXSX, One) // Device Check
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        ADBG ("WWAN PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        ADBG ("WWAN PR _ON")
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        ADBG ("WWAN PR _OFF")
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN PLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN PLDR")
                            FHRF (One)
                            SHRF ()
                            ADBG ("End WWAN PR _RST")
                            Release (WWMT)
                            ADBG ("WWAN PLDR Mutex: Release Done")
                            DOSV ()
                        }
                    }
                }
            }

            If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
            {
                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        WRST
                    })
                }

                Name (FDEL, Zero)
                Name (PDEL, Zero)
                Name (VDEL, Zero)
                Method (IFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x1F                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        ADBG (Concatenate ("vPro: ", CVPR))
                        Local0 = (CVPR << Zero)
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        ADBG (Concatenate ("CmdType = ", ToHexString (CMDT)))
                        ADBG (Concatenate ("CmdPayload = ", ToHexString (CMDP)))
                        If ((CMDT == One))
                        {
                            If (WIST ())
                            {
                                Return (RSTY) /* \_SB_.PC00.RP03.PXSX.RSTY */
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Get _PRR Mode = ", ^^^CNVW.RSTT))
                                Return (^^^CNVW.RSTT) /* \_SB_.PC00.CNVW.RSTT */
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((CMDT == 0x02))
                        {
                            If (WIST ())
                            {
                                Local0 = (CMDP & One)
                                RSTY = Local0
                                Local1 = (CMDP & 0x02)
                                Local1 >>= One
                                FLRC = Local1
                                Local2 = (CMDP & 0x04)
                                Local2 >>= 0x02
                                BOFC = Local2
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Set _PRR Mode = ", ToHexString (CMDP)))
                                ^^^CNVW.RSTT = CMDP /* \_SB_.PC00.RP03.PXSX.IFUN.CMDP */
                            }

                            Return (Zero)
                        }

                        If ((CMDT == 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                ADBG (Concatenate ("Get Last_PRR status PRRS = ", ToHexString (^^^CNVW.PRRS)))
                                Return (^^^CNVW.PRRS) /* \_SB_.PC00.CNVW.PRRS */
                            }
                            ElseIf (WIST ())
                            {
                                ADBG (Concatenate ("Get Last_PRR status DPRS = ", ToHexString (DPRS)))
                                Return (DPRS) /* \_SB_.PC00.RP03.PXSX.DPRS */
                            }
                        }

                        Return (Zero)
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((CRFI == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        CreateWordField (Arg3, Zero, PRTT)
                        CreateWordField (Arg3, 0x02, PRTD)
                        ADBG (Concatenate ("TimerType = ", ToHexString (PRTT)))
                        ADBG (Concatenate ("TimerDuration (ms) = ", ToDecimalString (PRTD)))
                        If ((PRTT == One))
                        {
                            FDEL = PRTD /* \_SB_.PC00.RP03.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x02))
                        {
                            PDEL = PRTD /* \_SB_.PC00.RP03.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x03))
                        {
                            VDEL = PRTD /* \_SB_.PC00.RP03.PXSX.IFUN.PRTD */
                        }
                        Else
                        {
                            ADBG ("TimerDuration not set")
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x1F                                       // ..
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Local0 = ACSD /* \ACSD */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Local0 = I5BS /* \I5BS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 = UHBS /* \UHBS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x06))
                    {
                        Local0 = AXMU /* \AXMU */
                        Local0 <<= One
                        Local0 |= AXSU /* \AXSU */
                        Local1 = AXMR /* \AXMR */
                        Local1 <<= One
                        Local1 |= AXSR /* \AXSR */
                        Local1 <<= 0x02
                        Local0 |= Local1
                        Return (Local0)
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (WFRC) /* \WFRC */
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (WFUC) /* \WFUC */
                    }

                    If ((Arg2 == 0x07))
                    {
                        Return (UNI4) /* \UNI4 */
                    }

                    If ((Arg2 == 0x08))
                    {
                        Return (WFIC) /* \WFIC */
                    }

                    If ((Arg2 == 0x09))
                    {
                        Return (WFBS) /* \WFBS */
                    }

                    If ((Arg2 == 0x0A))
                    {
                        Return (WEDT) /* \WEDT */
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((CIRM == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        Return (WF7C) /* \WF7C */
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                        {
                            If ((Arg2 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                             // .
                                })
                            }

                            If ((Arg2 == One)){}
                            If ((Arg2 == 0x02)){}
                            If ((Arg2 == 0x03))
                            {
                                If ((WRTO == One))
                                {
                                    ADBG ("WWAN Power _DSM D0/L1.2")
                                }
                                ElseIf ((WRTO == 0x02))
                                {
                                    ADBG ("WWAN Power _DSM D3/L1.2")
                                }
                                ElseIf ((WRTO == 0x03))
                                {
                                    ADBG ("WWAN Power _DSM D3/L2")
                                }
                                Else
                                {
                                    ADBG ("WWAN Power _DSM Disabled")
                                }

                                Return (WRTO) /* \WRTO */
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP04.PXSX))
    {
        Scope (_SB.PC00.RP04.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (PBNU, ^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WDCO), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            OperationRegion (VSEC, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WVHO), 0x10)
            Field (VSEC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x0C), 
                    ,   1, 
                BTIE,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                Offset (0x0D), 
                PDRC,   1
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Case (0x272B8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            If ((SVDC == One))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Case (0x080014C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                Name (RSTY, Zero)
                Name (FLRC, Zero)
                Name (BOFC, Zero)
                Name (DPRS, Zero)
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("Wifi PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("Wifi PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("Wifi PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If ((RSTY == One))
                        {
                            ADBG ("Wifi Product RST")
                            Local0 = Acquire (CNMT, 0x03E8)
                            If ((Local0 == Zero))
                            {
                                If ((FLRC == One))
                                {
                                    Local0 = DCTR /* \_SB_.PC00.RP04.PXSX.DCTR */
                                    Local0 |= 0x8000
                                    DCTR = Local0
                                    Sleep (FDEL)
                                }

                                DPRS = One
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (Zero)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = Zero
                                    }

                                    Sleep (RDLY)
                                }

                                PDRC = One
                                Sleep (VDEL)
                                SGOV (WLRT, Zero)
                                Sleep (PDEL)
                                SGOV (WLRT, One)
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (One)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = One
                                    }

                                    Sleep (RDLY)
                                }

                                DPRS = 0x02
                                Release (CNMT)
                            }
                        }
                        Else
                        {
                            ADBG ("Wifi Core RST")
                            If ((DCAP & 0x10000000))
                            {
                                Local0 = DCTR /* \_SB_.PC00.RP04.PXSX.DCTR */
                                Local0 |= 0x8000
                                DCTR = Local0
                            }

                            DPRS = One
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                    DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                    DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                    Return (SPLX) /* \_SB_.PC00.RP04.PXSX.SPLX */
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                    DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                    DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                    Return (WANX) /* \_SB_.PC00.RP04.PXSX.WANX */
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                    DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                    Return (WRDX) /* \_SB_.PC00.RP04.PXSX.WRDX */
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                    DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                    DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                    DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                    DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                    DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                    DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                    DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                    DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                    DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                    DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                    DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                    DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                    DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                    DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                    DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                    DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                    DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                    DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                    DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                    DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                    DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                    DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                    DerefOf (WRDY [One]) [0x18] = CD10 /* \CD10 */
                    DerefOf (WRDY [One]) [0x19] = CD11 /* \CD11 */
                    DerefOf (WRDY [One]) [0x1A] = CD12 /* \CD12 */
                    DerefOf (WRDY [One]) [0x1B] = CD13 /* \CD13 */
                    DerefOf (WRDY [One]) [0x1C] = CD14 /* \CD14 */
                    DerefOf (WRDY [One]) [0x1D] = CD15 /* \CD15 */
                    DerefOf (WRDY [One]) [0x1E] = CD16 /* \CD16 */
                    DerefOf (WRDY [One]) [0x1F] = CD17 /* \CD17 */
                    DerefOf (WRDY [One]) [0x20] = CD18 /* \CD18 */
                    DerefOf (WRDY [One]) [0x21] = CD19 /* \CD19 */
                    DerefOf (WRDY [One]) [0x22] = CD1A /* \CD1A */
                    DerefOf (WRDY [One]) [0x23] = CD20 /* \CD20 */
                    DerefOf (WRDY [One]) [0x24] = CD21 /* \CD21 */
                    DerefOf (WRDY [One]) [0x25] = CD22 /* \CD22 */
                    DerefOf (WRDY [One]) [0x26] = CD23 /* \CD23 */
                    DerefOf (WRDY [One]) [0x27] = CD24 /* \CD24 */
                    DerefOf (WRDY [One]) [0x28] = CD25 /* \CD25 */
                    DerefOf (WRDY [One]) [0x29] = CD26 /* \CD26 */
                    DerefOf (WRDY [One]) [0x2A] = CD27 /* \CD27 */
                    DerefOf (WRDY [One]) [0x2B] = CD28 /* \CD28 */
                    DerefOf (WRDY [One]) [0x2C] = CD29 /* \CD29 */
                    DerefOf (WRDY [One]) [0x2D] = CD2A /* \CD2A */
                    Return (WRDY) /* \_SB_.PC00.RP04.PXSX.WRDY */
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                    DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                    DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                    DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                    DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                    DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                    DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                    DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                    DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                    DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                    DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                    DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                    DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                    DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                    DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                    DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                    DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                    DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                    DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                    DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                    DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                    DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                    DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                    DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                    DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                    DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                    DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                    DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                    DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                    DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                    DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                    DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                    DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                    DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                    DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                    DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                    DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                    DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                    DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                    DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                    DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                    DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                    DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                    DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                    DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                    DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                    DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                    DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                    DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                    DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                    DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                    DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                    DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                    DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                    DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                    DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                    DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                    DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                    DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                    DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                    DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                    DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                    DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                    DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                    DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                    DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                    DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                    DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                    DerefOf (EWRY [One]) [0x45] = CD30 /* \CD30 */
                    DerefOf (EWRY [One]) [0x46] = CD31 /* \CD31 */
                    DerefOf (EWRY [One]) [0x47] = CD32 /* \CD32 */
                    DerefOf (EWRY [One]) [0x48] = CD33 /* \CD33 */
                    DerefOf (EWRY [One]) [0x49] = CD34 /* \CD34 */
                    DerefOf (EWRY [One]) [0x4A] = CD35 /* \CD35 */
                    DerefOf (EWRY [One]) [0x4B] = CD36 /* \CD36 */
                    DerefOf (EWRY [One]) [0x4C] = CD37 /* \CD37 */
                    DerefOf (EWRY [One]) [0x4D] = CD38 /* \CD38 */
                    DerefOf (EWRY [One]) [0x4E] = CD39 /* \CD39 */
                    DerefOf (EWRY [One]) [0x4F] = CD3A /* \CD3A */
                    DerefOf (EWRY [One]) [0x50] = CD3B /* \CD3B */
                    DerefOf (EWRY [One]) [0x51] = CD3C /* \CD3C */
                    DerefOf (EWRY [One]) [0x52] = CD3D /* \CD3D */
                    DerefOf (EWRY [One]) [0x53] = CD3E /* \CD3E */
                    DerefOf (EWRY [One]) [0x54] = CD3F /* \CD3F */
                    DerefOf (EWRY [One]) [0x55] = CD40 /* \CD40 */
                    DerefOf (EWRY [One]) [0x56] = CD41 /* \CD41 */
                    DerefOf (EWRY [One]) [0x57] = CD42 /* \CD42 */
                    DerefOf (EWRY [One]) [0x58] = CD43 /* \CD43 */
                    DerefOf (EWRY [One]) [0x59] = CD44 /* \CD44 */
                    DerefOf (EWRY [One]) [0x5A] = CD45 /* \CD45 */
                    DerefOf (EWRY [One]) [0x5B] = CD46 /* \CD46 */
                    DerefOf (EWRY [One]) [0x5C] = CD47 /* \CD47 */
                    DerefOf (EWRY [One]) [0x5D] = CD48 /* \CD48 */
                    DerefOf (EWRY [One]) [0x5E] = CD49 /* \CD49 */
                    DerefOf (EWRY [One]) [0x5F] = CD4A /* \CD4A */
                    DerefOf (EWRY [One]) [0x60] = CD4B /* \CD4B */
                    DerefOf (EWRY [One]) [0x61] = CD4C /* \CD4C */
                    DerefOf (EWRY [One]) [0x62] = CD4D /* \CD4D */
                    DerefOf (EWRY [One]) [0x63] = CD4E /* \CD4E */
                    DerefOf (EWRY [One]) [0x64] = CD4F /* \CD4F */
                    DerefOf (EWRY [One]) [0x65] = CD50 /* \CD50 */
                    DerefOf (EWRY [One]) [0x66] = CD51 /* \CD51 */
                    DerefOf (EWRY [One]) [0x67] = CD52 /* \CD52 */
                    DerefOf (EWRY [One]) [0x68] = CD53 /* \CD53 */
                    DerefOf (EWRY [One]) [0x69] = CD54 /* \CD54 */
                    DerefOf (EWRY [One]) [0x6A] = CD55 /* \CD55 */
                    DerefOf (EWRY [One]) [0x6B] = CD56 /* \CD56 */
                    DerefOf (EWRY [One]) [0x6C] = CD57 /* \CD57 */
                    DerefOf (EWRY [One]) [0x6D] = CD58 /* \CD58 */
                    DerefOf (EWRY [One]) [0x6E] = CD59 /* \CD59 */
                    DerefOf (EWRY [One]) [0x6F] = CD5A /* \CD5A */
                    DerefOf (EWRY [One]) [0x70] = CD5B /* \CD5B */
                    DerefOf (EWRY [One]) [0x71] = CD5C /* \CD5C */
                    DerefOf (EWRY [One]) [0x72] = CD5D /* \CD5D */
                    DerefOf (EWRY [One]) [0x73] = CD5E /* \CD5E */
                    DerefOf (EWRY [One]) [0x74] = CD5F /* \CD5F */
                    DerefOf (EWRY [One]) [0x75] = CD60 /* \CD60 */
                    DerefOf (EWRY [One]) [0x76] = CD61 /* \CD61 */
                    DerefOf (EWRY [One]) [0x77] = CD62 /* \CD62 */
                    DerefOf (EWRY [One]) [0x78] = CD63 /* \CD63 */
                    DerefOf (EWRY [One]) [0x79] = CD64 /* \CD64 */
                    DerefOf (EWRY [One]) [0x7A] = CD65 /* \CD65 */
                    DerefOf (EWRY [One]) [0x7B] = CD66 /* \CD66 */
                    DerefOf (EWRY [One]) [0x7C] = CD67 /* \CD67 */
                    DerefOf (EWRY [One]) [0x7D] = CD68 /* \CD68 */
                    DerefOf (EWRY [One]) [0x7E] = CD69 /* \CD69 */
                    DerefOf (EWRY [One]) [0x7F] = CD6A /* \CD6A */
                    DerefOf (EWRY [One]) [0x80] = CD6B /* \CD6B */
                    DerefOf (EWRY [One]) [0x81] = CD6C /* \CD6C */
                    DerefOf (EWRY [One]) [0x82] = CD6D /* \CD6D */
                    DerefOf (EWRY [One]) [0x83] = CD6E /* \CD6E */
                    DerefOf (EWRY [One]) [0x84] = CD6F /* \CD6F */
                    DerefOf (EWRY [One]) [0x85] = CD70 /* \CD70 */
                    DerefOf (EWRY [One]) [0x86] = CD71 /* \CD71 */
                    Return (EWRY) /* \_SB_.PC00.RP04.PXSX.EWRY */
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    DerefOf (WGDY [One]) [One] = SDGN /* \SDGN */
                    DerefOf (WGDY [One]) [0x02] = SD11 /* \SD11 */
                    DerefOf (WGDY [One]) [0x03] = SD12 /* \SD12 */
                    DerefOf (WGDY [One]) [0x04] = SD13 /* \SD13 */
                    DerefOf (WGDY [One]) [0x05] = SD14 /* \SD14 */
                    DerefOf (WGDY [One]) [0x06] = SD15 /* \SD15 */
                    DerefOf (WGDY [One]) [0x07] = SD16 /* \SD16 */
                    DerefOf (WGDY [One]) [0x08] = SD17 /* \SD17 */
                    DerefOf (WGDY [One]) [0x09] = SD18 /* \SD18 */
                    DerefOf (WGDY [One]) [0x0A] = SD19 /* \SD19 */
                    DerefOf (WGDY [One]) [0x0B] = SD21 /* \SD21 */
                    DerefOf (WGDY [One]) [0x0C] = SD22 /* \SD22 */
                    DerefOf (WGDY [One]) [0x0D] = SD23 /* \SD23 */
                    DerefOf (WGDY [One]) [0x0E] = SD24 /* \SD24 */
                    DerefOf (WGDY [One]) [0x0F] = SD25 /* \SD25 */
                    DerefOf (WGDY [One]) [0x10] = SD26 /* \SD26 */
                    DerefOf (WGDY [One]) [0x11] = SD27 /* \SD27 */
                    DerefOf (WGDY [One]) [0x12] = SD28 /* \SD28 */
                    DerefOf (WGDY [One]) [0x13] = SD29 /* \SD29 */
                    DerefOf (WGDY [One]) [0x14] = SD31 /* \SD31 */
                    DerefOf (WGDY [One]) [0x15] = SD32 /* \SD32 */
                    DerefOf (WGDY [One]) [0x16] = SD33 /* \SD33 */
                    DerefOf (WGDY [One]) [0x17] = SD34 /* \SD34 */
                    DerefOf (WGDY [One]) [0x18] = SD35 /* \SD35 */
                    DerefOf (WGDY [One]) [0x19] = SD36 /* \SD36 */
                    DerefOf (WGDY [One]) [0x1A] = SD37 /* \SD37 */
                    DerefOf (WGDY [One]) [0x1B] = SD38 /* \SD38 */
                    DerefOf (WGDY [One]) [0x1C] = SD39 /* \SD39 */
                    DerefOf (WGDY [One]) [0x1D] = SD41 /* \SD41 */
                    DerefOf (WGDY [One]) [0x1E] = SD42 /* \SD42 */
                    DerefOf (WGDY [One]) [0x1F] = SD43 /* \SD43 */
                    DerefOf (WGDY [One]) [0x20] = SD44 /* \SD44 */
                    DerefOf (WGDY [One]) [0x21] = SD45 /* \SD45 */
                    DerefOf (WGDY [One]) [0x22] = SD46 /* \SD46 */
                    DerefOf (WGDY [One]) [0x23] = SD47 /* \SD47 */
                    DerefOf (WGDY [One]) [0x24] = SD48 /* \SD48 */
                    DerefOf (WGDY [One]) [0x25] = SD49 /* \SD49 */
                    DerefOf (WGDY [One]) [0x26] = SD51 /* \SD51 */
                    DerefOf (WGDY [One]) [0x27] = SD52 /* \SD52 */
                    DerefOf (WGDY [One]) [0x28] = SD53 /* \SD53 */
                    DerefOf (WGDY [One]) [0x29] = SD54 /* \SD54 */
                    DerefOf (WGDY [One]) [0x2A] = SD55 /* \SD55 */
                    DerefOf (WGDY [One]) [0x2B] = SD56 /* \SD56 */
                    DerefOf (WGDY [One]) [0x2C] = SD57 /* \SD57 */
                    DerefOf (WGDY [One]) [0x2D] = SD58 /* \SD58 */
                    DerefOf (WGDY [One]) [0x2E] = SD59 /* \SD59 */
                    DerefOf (WGDY [One]) [0x2F] = SD61 /* \SD61 */
                    DerefOf (WGDY [One]) [0x30] = SD62 /* \SD62 */
                    DerefOf (WGDY [One]) [0x31] = SD63 /* \SD63 */
                    DerefOf (WGDY [One]) [0x32] = SD64 /* \SD64 */
                    DerefOf (WGDY [One]) [0x33] = SD65 /* \SD65 */
                    DerefOf (WGDY [One]) [0x34] = SD66 /* \SD66 */
                    DerefOf (WGDY [One]) [0x35] = SD67 /* \SD67 */
                    DerefOf (WGDY [One]) [0x36] = SD68 /* \SD68 */
                    DerefOf (WGDY [One]) [0x37] = SD69 /* \SD69 */
                    DerefOf (WGDY [One]) [0x38] = SD71 /* \SD71 */
                    DerefOf (WGDY [One]) [0x39] = SD72 /* \SD72 */
                    DerefOf (WGDY [One]) [0x3A] = SD73 /* \SD73 */
                    DerefOf (WGDY [One]) [0x3B] = SD74 /* \SD74 */
                    DerefOf (WGDY [One]) [0x3C] = SD75 /* \SD75 */
                    DerefOf (WGDY [One]) [0x3D] = SD76 /* \SD76 */
                    DerefOf (WGDY [One]) [0x3E] = SD77 /* \SD77 */
                    DerefOf (WGDY [One]) [0x3F] = SD78 /* \SD78 */
                    DerefOf (WGDY [One]) [0x40] = SD79 /* \SD79 */
                    DerefOf (WGDY [One]) [0x41] = SD81 /* \SD81 */
                    DerefOf (WGDY [One]) [0x42] = SD82 /* \SD82 */
                    DerefOf (WGDY [One]) [0x43] = SD83 /* \SD83 */
                    DerefOf (WGDY [One]) [0x44] = SD84 /* \SD84 */
                    DerefOf (WGDY [One]) [0x45] = SD85 /* \SD85 */
                    DerefOf (WGDY [One]) [0x46] = SD86 /* \SD86 */
                    DerefOf (WGDY [One]) [0x47] = SD87 /* \SD87 */
                    DerefOf (WGDY [One]) [0x48] = SD88 /* \SD88 */
                    DerefOf (WGDY [One]) [0x49] = SD89 /* \SD89 */
                    Return (WGDY) /* \_SB_.PC00.RP04.PXSX.WGDY */
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                    Return (ECKY) /* \_SB_.PC00.RP04.PXSX.ECKY */
                }

                Name (PPAY, Package (0x02)
                {
                    0x02, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    DerefOf (PPAY [One]) [One] = WAGM /* \WAGM */
                    DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                    DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                    DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                    DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                    DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                    DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                    DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                    DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                    DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                    DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                    DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                    DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                    DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                    DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                    DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                    DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                    DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                    DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                    DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                    DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                    DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                    DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                    Return (PPAY) /* \_SB_.PC00.RP04.PXSX.PPAY */
                }

                Name (WPFY, Package (0x02)
                {
                    Zero, 
                    Package (0x05)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WPFC, 0, Serialized)
                {
                    DerefOf (WPFY [One]) [One] = WPFA /* \WPFA */
                    DerefOf (WPFY [One]) [0x02] = WPFB /* \WPFB */
                    DerefOf (WPFY [One]) [0x03] = \WPFC
                    DerefOf (WPFY [One]) [0x04] = WPFD /* \WPFD */
                    Return (WPFY) /* \_SB_.PC00.RP04.PXSX.WPFY */
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    DerefOf (WTSY [One]) [One] = WTSE /* \WTSE */
                    DerefOf (WTSY [One]) [0x02] = WTLE /* \WTLE */
                    DerefOf (WTSY [One]) [0x03] = BL01 /* \BL01 */
                    DerefOf (WTSY [One]) [0x04] = BL02 /* \BL02 */
                    DerefOf (WTSY [One]) [0x05] = BL03 /* \BL03 */
                    DerefOf (WTSY [One]) [0x06] = BL04 /* \BL04 */
                    DerefOf (WTSY [One]) [0x07] = BL05 /* \BL05 */
                    DerefOf (WTSY [One]) [0x08] = BL06 /* \BL06 */
                    DerefOf (WTSY [One]) [0x09] = BL07 /* \BL07 */
                    DerefOf (WTSY [One]) [0x0A] = BL08 /* \BL08 */
                    DerefOf (WTSY [One]) [0x0B] = BL09 /* \BL09 */
                    DerefOf (WTSY [One]) [0x0C] = BL10 /* \BL10 */
                    DerefOf (WTSY [One]) [0x0D] = BL11 /* \BL11 */
                    DerefOf (WTSY [One]) [0x0E] = BL12 /* \BL12 */
                    DerefOf (WTSY [One]) [0x0F] = BL13 /* \BL13 */
                    DerefOf (WTSY [One]) [0x10] = BL14 /* \BL14 */
                    DerefOf (WTSY [One]) [0x11] = BL15 /* \BL15 */
                    DerefOf (WTSY [One]) [0x12] = BL16 /* \BL16 */
                    Return (WTSY) /* \_SB_.PC00.RP04.PXSX.WTSY */
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    DerefOf (WAIY [One]) [One] = WLBI /* \WLBI */
                    DerefOf (WAIY [One]) [0x02] = WHBI /* \WHBI */
                    Return (WAIY) /* \_SB_.PC00.RP04.PXSX.WAIY */
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PC00.RP04.PXSX.SADX */
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PC00.RP04.PXSX.GPCX */
                }

                Name (GLAX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Zero
                    }
                })
                Method (GLAI, 0, Serialized)
                {
                    ADBG (Concatenate ("AR: GLAI method. CGLS = ", ToHexString (CGLS)))
                    DerefOf (GLAX [One]) [One] = CGLS /* \CGLS */
                    DerefOf (GLAX [0x02]) [One] = CGLS /* \CGLS */
                    Return (GLAX) /* \_SB_.PC00.RP04.PXSX.GLAX */
                }
            }

            If (((WWEN != Zero) && (WWRP == SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If ((GGOV (PRST) != WPRP))
                    {
                        DL23 ()
                        ADBG ("WWAN DL23() Done")
                        SGOV (PRST, WPRP)
                        ADBG ("WWAN PERST:0 Done")
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    ADBG ("WWAN RST:0 Done")
                    If ((Arg0 == Zero))
                    {
                        Sleep (TBTG)
                        ADBG (Concatenate ("SLP TBTG ", ToDecimalString (TBTG)))
                    }
                    ElseIf ((Arg0 == One))
                    {
                        SPCO (WCLK, Zero)
                        ADBG ("WWAN SCLK:0 Done")
                        Sleep (TB2F)
                        ADBG (Concatenate ("SLP TB2F ", ToDecimalString (TB2F)))
                        SGOV (WFCP, (~PFCP & One))
                        ADBG ("WWAN PWR:0 Done")
                        Sleep (TFDI)
                        ADBG (Concatenate ("SLP TFDI ", ToDecimalString (TFDI)))
                    }
                    Else
                    {
                        ADBG ("Unsupported Arg0 is detected.")
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    ADBG ("WWAN MPHYPG:0 Done")
                    SPCO (WCLK, One)
                    ADBG ("WWAN SCLK:1 Done")
                    SGOV (WFCP, PFCP)
                    ADBG ("WWAN PWR:1 Done")
                    Sleep (TN2B)
                    ADBG (Concatenate ("SLP TN2B ", ToDecimalString (TN2B)))
                    SGOV (WBRS, (~PBRS & One))
                    ADBG ("WWAN RST:1 Done")
                    Sleep (TB2R)
                    ADBG (Concatenate ("SLP TB2R ", ToDecimalString (TB2R)))
                    SGOV (PRST, (~WPRP & One))
                    ADBG ("WWAN PERST:0 Done")
                    L23D ()
                    ADBG ("WWAN L23D() Done")
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Local0 = Zero
                    While (((SVID != WSID) && (Local0 < WSTO)))
                    {
                        Local0++
                        Sleep (One)
                    }

                    ADBG (Concatenate ("DET Time ", ToDecimalString (Local0)))
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    ADBG ("_RST WWAN")
                    If ((WWEN == 0x02))
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN FLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN FLDR")
                            FHRF (Zero)
                            SHRF ()
                            ADBG ("End WWAN FLDR")
                            Release (WWMT)
                            ADBG ("WWAN FLDR Mutex:Release Done")
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One) // Device Check
                        SGOV (PRST, (~WPRP & One))
                        SGOV (WBRS, (~PBRS & One))
                        Sleep (0xC8)
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x14))
                            {
                                ADBG ("FLDR TO")
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        Sleep (0x0A)
                        ADBG (Concatenate ("RVP Delay Time ", ToDecimalString (Local0)))
                        Notify (PXSX, One) // Device Check
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        ADBG ("WWAN PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        ADBG ("WWAN PR _ON")
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        ADBG ("WWAN PR _OFF")
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN PLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN PLDR")
                            FHRF (One)
                            SHRF ()
                            ADBG ("End WWAN PR _RST")
                            Release (WWMT)
                            ADBG ("WWAN PLDR Mutex: Release Done")
                            DOSV ()
                        }
                    }
                }
            }

            If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
            {
                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        WRST
                    })
                }

                Name (FDEL, Zero)
                Name (PDEL, Zero)
                Name (VDEL, Zero)
                Method (IFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x1F                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        ADBG (Concatenate ("vPro: ", CVPR))
                        Local0 = (CVPR << Zero)
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        ADBG (Concatenate ("CmdType = ", ToHexString (CMDT)))
                        ADBG (Concatenate ("CmdPayload = ", ToHexString (CMDP)))
                        If ((CMDT == One))
                        {
                            If (WIST ())
                            {
                                Return (RSTY) /* \_SB_.PC00.RP04.PXSX.RSTY */
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Get _PRR Mode = ", ^^^CNVW.RSTT))
                                Return (^^^CNVW.RSTT) /* \_SB_.PC00.CNVW.RSTT */
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((CMDT == 0x02))
                        {
                            If (WIST ())
                            {
                                Local0 = (CMDP & One)
                                RSTY = Local0
                                Local1 = (CMDP & 0x02)
                                Local1 >>= One
                                FLRC = Local1
                                Local2 = (CMDP & 0x04)
                                Local2 >>= 0x02
                                BOFC = Local2
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Set _PRR Mode = ", ToHexString (CMDP)))
                                ^^^CNVW.RSTT = CMDP /* \_SB_.PC00.RP04.PXSX.IFUN.CMDP */
                            }

                            Return (Zero)
                        }

                        If ((CMDT == 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                ADBG (Concatenate ("Get Last_PRR status PRRS = ", ToHexString (^^^CNVW.PRRS)))
                                Return (^^^CNVW.PRRS) /* \_SB_.PC00.CNVW.PRRS */
                            }
                            ElseIf (WIST ())
                            {
                                ADBG (Concatenate ("Get Last_PRR status DPRS = ", ToHexString (DPRS)))
                                Return (DPRS) /* \_SB_.PC00.RP04.PXSX.DPRS */
                            }
                        }

                        Return (Zero)
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((CRFI == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        CreateWordField (Arg3, Zero, PRTT)
                        CreateWordField (Arg3, 0x02, PRTD)
                        ADBG (Concatenate ("TimerType = ", ToHexString (PRTT)))
                        ADBG (Concatenate ("TimerDuration (ms) = ", ToDecimalString (PRTD)))
                        If ((PRTT == One))
                        {
                            FDEL = PRTD /* \_SB_.PC00.RP04.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x02))
                        {
                            PDEL = PRTD /* \_SB_.PC00.RP04.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x03))
                        {
                            VDEL = PRTD /* \_SB_.PC00.RP04.PXSX.IFUN.PRTD */
                        }
                        Else
                        {
                            ADBG ("TimerDuration not set")
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x1F                                       // ..
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Local0 = ACSD /* \ACSD */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Local0 = I5BS /* \I5BS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 = UHBS /* \UHBS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x06))
                    {
                        Local0 = AXMU /* \AXMU */
                        Local0 <<= One
                        Local0 |= AXSU /* \AXSU */
                        Local1 = AXMR /* \AXMR */
                        Local1 <<= One
                        Local1 |= AXSR /* \AXSR */
                        Local1 <<= 0x02
                        Local0 |= Local1
                        Return (Local0)
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (WFRC) /* \WFRC */
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (WFUC) /* \WFUC */
                    }

                    If ((Arg2 == 0x07))
                    {
                        Return (UNI4) /* \UNI4 */
                    }

                    If ((Arg2 == 0x08))
                    {
                        Return (WFIC) /* \WFIC */
                    }

                    If ((Arg2 == 0x09))
                    {
                        Return (WFBS) /* \WFBS */
                    }

                    If ((Arg2 == 0x0A))
                    {
                        Return (WEDT) /* \WEDT */
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((CIRM == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        Return (WF7C) /* \WF7C */
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                        {
                            If ((Arg2 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                             // .
                                })
                            }

                            If ((Arg2 == One)){}
                            If ((Arg2 == 0x02)){}
                            If ((Arg2 == 0x03))
                            {
                                If ((WRTO == One))
                                {
                                    ADBG ("WWAN Power _DSM D0/L1.2")
                                }
                                ElseIf ((WRTO == 0x02))
                                {
                                    ADBG ("WWAN Power _DSM D3/L1.2")
                                }
                                ElseIf ((WRTO == 0x03))
                                {
                                    ADBG ("WWAN Power _DSM D3/L2")
                                }
                                Else
                                {
                                    ADBG ("WWAN Power _DSM Disabled")
                                }

                                Return (WRTO) /* \WRTO */
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP05.PXSX))
    {
        Scope (_SB.PC00.RP05.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (PBNU, ^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WDCO), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            OperationRegion (VSEC, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WVHO), 0x10)
            Field (VSEC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x0C), 
                    ,   1, 
                BTIE,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                Offset (0x0D), 
                PDRC,   1
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Case (0x272B8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            If ((SVDC == One))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Case (0x080014C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                Name (RSTY, Zero)
                Name (FLRC, Zero)
                Name (BOFC, Zero)
                Name (DPRS, Zero)
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("Wifi PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("Wifi PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("Wifi PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If ((RSTY == One))
                        {
                            ADBG ("Wifi Product RST")
                            Local0 = Acquire (CNMT, 0x03E8)
                            If ((Local0 == Zero))
                            {
                                If ((FLRC == One))
                                {
                                    Local0 = DCTR /* \_SB_.PC00.RP05.PXSX.DCTR */
                                    Local0 |= 0x8000
                                    DCTR = Local0
                                    Sleep (FDEL)
                                }

                                DPRS = One
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (Zero)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = Zero
                                    }

                                    Sleep (RDLY)
                                }

                                PDRC = One
                                Sleep (VDEL)
                                SGOV (WLRT, Zero)
                                Sleep (PDEL)
                                SGOV (WLRT, One)
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (One)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = One
                                    }

                                    Sleep (RDLY)
                                }

                                DPRS = 0x02
                                Release (CNMT)
                            }
                        }
                        Else
                        {
                            ADBG ("Wifi Core RST")
                            If ((DCAP & 0x10000000))
                            {
                                Local0 = DCTR /* \_SB_.PC00.RP05.PXSX.DCTR */
                                Local0 |= 0x8000
                                DCTR = Local0
                            }

                            DPRS = One
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                    DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                    DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                    Return (SPLX) /* \_SB_.PC00.RP05.PXSX.SPLX */
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                    DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                    DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                    Return (WANX) /* \_SB_.PC00.RP05.PXSX.WANX */
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                    DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                    Return (WRDX) /* \_SB_.PC00.RP05.PXSX.WRDX */
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                    DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                    DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                    DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                    DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                    DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                    DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                    DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                    DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                    DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                    DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                    DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                    DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                    DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                    DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                    DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                    DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                    DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                    DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                    DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                    DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                    DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                    DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                    DerefOf (WRDY [One]) [0x18] = CD10 /* \CD10 */
                    DerefOf (WRDY [One]) [0x19] = CD11 /* \CD11 */
                    DerefOf (WRDY [One]) [0x1A] = CD12 /* \CD12 */
                    DerefOf (WRDY [One]) [0x1B] = CD13 /* \CD13 */
                    DerefOf (WRDY [One]) [0x1C] = CD14 /* \CD14 */
                    DerefOf (WRDY [One]) [0x1D] = CD15 /* \CD15 */
                    DerefOf (WRDY [One]) [0x1E] = CD16 /* \CD16 */
                    DerefOf (WRDY [One]) [0x1F] = CD17 /* \CD17 */
                    DerefOf (WRDY [One]) [0x20] = CD18 /* \CD18 */
                    DerefOf (WRDY [One]) [0x21] = CD19 /* \CD19 */
                    DerefOf (WRDY [One]) [0x22] = CD1A /* \CD1A */
                    DerefOf (WRDY [One]) [0x23] = CD20 /* \CD20 */
                    DerefOf (WRDY [One]) [0x24] = CD21 /* \CD21 */
                    DerefOf (WRDY [One]) [0x25] = CD22 /* \CD22 */
                    DerefOf (WRDY [One]) [0x26] = CD23 /* \CD23 */
                    DerefOf (WRDY [One]) [0x27] = CD24 /* \CD24 */
                    DerefOf (WRDY [One]) [0x28] = CD25 /* \CD25 */
                    DerefOf (WRDY [One]) [0x29] = CD26 /* \CD26 */
                    DerefOf (WRDY [One]) [0x2A] = CD27 /* \CD27 */
                    DerefOf (WRDY [One]) [0x2B] = CD28 /* \CD28 */
                    DerefOf (WRDY [One]) [0x2C] = CD29 /* \CD29 */
                    DerefOf (WRDY [One]) [0x2D] = CD2A /* \CD2A */
                    Return (WRDY) /* \_SB_.PC00.RP05.PXSX.WRDY */
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                    DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                    DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                    DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                    DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                    DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                    DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                    DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                    DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                    DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                    DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                    DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                    DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                    DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                    DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                    DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                    DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                    DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                    DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                    DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                    DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                    DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                    DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                    DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                    DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                    DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                    DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                    DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                    DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                    DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                    DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                    DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                    DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                    DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                    DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                    DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                    DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                    DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                    DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                    DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                    DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                    DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                    DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                    DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                    DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                    DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                    DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                    DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                    DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                    DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                    DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                    DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                    DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                    DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                    DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                    DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                    DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                    DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                    DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                    DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                    DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                    DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                    DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                    DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                    DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                    DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                    DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                    DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                    DerefOf (EWRY [One]) [0x45] = CD30 /* \CD30 */
                    DerefOf (EWRY [One]) [0x46] = CD31 /* \CD31 */
                    DerefOf (EWRY [One]) [0x47] = CD32 /* \CD32 */
                    DerefOf (EWRY [One]) [0x48] = CD33 /* \CD33 */
                    DerefOf (EWRY [One]) [0x49] = CD34 /* \CD34 */
                    DerefOf (EWRY [One]) [0x4A] = CD35 /* \CD35 */
                    DerefOf (EWRY [One]) [0x4B] = CD36 /* \CD36 */
                    DerefOf (EWRY [One]) [0x4C] = CD37 /* \CD37 */
                    DerefOf (EWRY [One]) [0x4D] = CD38 /* \CD38 */
                    DerefOf (EWRY [One]) [0x4E] = CD39 /* \CD39 */
                    DerefOf (EWRY [One]) [0x4F] = CD3A /* \CD3A */
                    DerefOf (EWRY [One]) [0x50] = CD3B /* \CD3B */
                    DerefOf (EWRY [One]) [0x51] = CD3C /* \CD3C */
                    DerefOf (EWRY [One]) [0x52] = CD3D /* \CD3D */
                    DerefOf (EWRY [One]) [0x53] = CD3E /* \CD3E */
                    DerefOf (EWRY [One]) [0x54] = CD3F /* \CD3F */
                    DerefOf (EWRY [One]) [0x55] = CD40 /* \CD40 */
                    DerefOf (EWRY [One]) [0x56] = CD41 /* \CD41 */
                    DerefOf (EWRY [One]) [0x57] = CD42 /* \CD42 */
                    DerefOf (EWRY [One]) [0x58] = CD43 /* \CD43 */
                    DerefOf (EWRY [One]) [0x59] = CD44 /* \CD44 */
                    DerefOf (EWRY [One]) [0x5A] = CD45 /* \CD45 */
                    DerefOf (EWRY [One]) [0x5B] = CD46 /* \CD46 */
                    DerefOf (EWRY [One]) [0x5C] = CD47 /* \CD47 */
                    DerefOf (EWRY [One]) [0x5D] = CD48 /* \CD48 */
                    DerefOf (EWRY [One]) [0x5E] = CD49 /* \CD49 */
                    DerefOf (EWRY [One]) [0x5F] = CD4A /* \CD4A */
                    DerefOf (EWRY [One]) [0x60] = CD4B /* \CD4B */
                    DerefOf (EWRY [One]) [0x61] = CD4C /* \CD4C */
                    DerefOf (EWRY [One]) [0x62] = CD4D /* \CD4D */
                    DerefOf (EWRY [One]) [0x63] = CD4E /* \CD4E */
                    DerefOf (EWRY [One]) [0x64] = CD4F /* \CD4F */
                    DerefOf (EWRY [One]) [0x65] = CD50 /* \CD50 */
                    DerefOf (EWRY [One]) [0x66] = CD51 /* \CD51 */
                    DerefOf (EWRY [One]) [0x67] = CD52 /* \CD52 */
                    DerefOf (EWRY [One]) [0x68] = CD53 /* \CD53 */
                    DerefOf (EWRY [One]) [0x69] = CD54 /* \CD54 */
                    DerefOf (EWRY [One]) [0x6A] = CD55 /* \CD55 */
                    DerefOf (EWRY [One]) [0x6B] = CD56 /* \CD56 */
                    DerefOf (EWRY [One]) [0x6C] = CD57 /* \CD57 */
                    DerefOf (EWRY [One]) [0x6D] = CD58 /* \CD58 */
                    DerefOf (EWRY [One]) [0x6E] = CD59 /* \CD59 */
                    DerefOf (EWRY [One]) [0x6F] = CD5A /* \CD5A */
                    DerefOf (EWRY [One]) [0x70] = CD5B /* \CD5B */
                    DerefOf (EWRY [One]) [0x71] = CD5C /* \CD5C */
                    DerefOf (EWRY [One]) [0x72] = CD5D /* \CD5D */
                    DerefOf (EWRY [One]) [0x73] = CD5E /* \CD5E */
                    DerefOf (EWRY [One]) [0x74] = CD5F /* \CD5F */
                    DerefOf (EWRY [One]) [0x75] = CD60 /* \CD60 */
                    DerefOf (EWRY [One]) [0x76] = CD61 /* \CD61 */
                    DerefOf (EWRY [One]) [0x77] = CD62 /* \CD62 */
                    DerefOf (EWRY [One]) [0x78] = CD63 /* \CD63 */
                    DerefOf (EWRY [One]) [0x79] = CD64 /* \CD64 */
                    DerefOf (EWRY [One]) [0x7A] = CD65 /* \CD65 */
                    DerefOf (EWRY [One]) [0x7B] = CD66 /* \CD66 */
                    DerefOf (EWRY [One]) [0x7C] = CD67 /* \CD67 */
                    DerefOf (EWRY [One]) [0x7D] = CD68 /* \CD68 */
                    DerefOf (EWRY [One]) [0x7E] = CD69 /* \CD69 */
                    DerefOf (EWRY [One]) [0x7F] = CD6A /* \CD6A */
                    DerefOf (EWRY [One]) [0x80] = CD6B /* \CD6B */
                    DerefOf (EWRY [One]) [0x81] = CD6C /* \CD6C */
                    DerefOf (EWRY [One]) [0x82] = CD6D /* \CD6D */
                    DerefOf (EWRY [One]) [0x83] = CD6E /* \CD6E */
                    DerefOf (EWRY [One]) [0x84] = CD6F /* \CD6F */
                    DerefOf (EWRY [One]) [0x85] = CD70 /* \CD70 */
                    DerefOf (EWRY [One]) [0x86] = CD71 /* \CD71 */
                    Return (EWRY) /* \_SB_.PC00.RP05.PXSX.EWRY */
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    DerefOf (WGDY [One]) [One] = SDGN /* \SDGN */
                    DerefOf (WGDY [One]) [0x02] = SD11 /* \SD11 */
                    DerefOf (WGDY [One]) [0x03] = SD12 /* \SD12 */
                    DerefOf (WGDY [One]) [0x04] = SD13 /* \SD13 */
                    DerefOf (WGDY [One]) [0x05] = SD14 /* \SD14 */
                    DerefOf (WGDY [One]) [0x06] = SD15 /* \SD15 */
                    DerefOf (WGDY [One]) [0x07] = SD16 /* \SD16 */
                    DerefOf (WGDY [One]) [0x08] = SD17 /* \SD17 */
                    DerefOf (WGDY [One]) [0x09] = SD18 /* \SD18 */
                    DerefOf (WGDY [One]) [0x0A] = SD19 /* \SD19 */
                    DerefOf (WGDY [One]) [0x0B] = SD21 /* \SD21 */
                    DerefOf (WGDY [One]) [0x0C] = SD22 /* \SD22 */
                    DerefOf (WGDY [One]) [0x0D] = SD23 /* \SD23 */
                    DerefOf (WGDY [One]) [0x0E] = SD24 /* \SD24 */
                    DerefOf (WGDY [One]) [0x0F] = SD25 /* \SD25 */
                    DerefOf (WGDY [One]) [0x10] = SD26 /* \SD26 */
                    DerefOf (WGDY [One]) [0x11] = SD27 /* \SD27 */
                    DerefOf (WGDY [One]) [0x12] = SD28 /* \SD28 */
                    DerefOf (WGDY [One]) [0x13] = SD29 /* \SD29 */
                    DerefOf (WGDY [One]) [0x14] = SD31 /* \SD31 */
                    DerefOf (WGDY [One]) [0x15] = SD32 /* \SD32 */
                    DerefOf (WGDY [One]) [0x16] = SD33 /* \SD33 */
                    DerefOf (WGDY [One]) [0x17] = SD34 /* \SD34 */
                    DerefOf (WGDY [One]) [0x18] = SD35 /* \SD35 */
                    DerefOf (WGDY [One]) [0x19] = SD36 /* \SD36 */
                    DerefOf (WGDY [One]) [0x1A] = SD37 /* \SD37 */
                    DerefOf (WGDY [One]) [0x1B] = SD38 /* \SD38 */
                    DerefOf (WGDY [One]) [0x1C] = SD39 /* \SD39 */
                    DerefOf (WGDY [One]) [0x1D] = SD41 /* \SD41 */
                    DerefOf (WGDY [One]) [0x1E] = SD42 /* \SD42 */
                    DerefOf (WGDY [One]) [0x1F] = SD43 /* \SD43 */
                    DerefOf (WGDY [One]) [0x20] = SD44 /* \SD44 */
                    DerefOf (WGDY [One]) [0x21] = SD45 /* \SD45 */
                    DerefOf (WGDY [One]) [0x22] = SD46 /* \SD46 */
                    DerefOf (WGDY [One]) [0x23] = SD47 /* \SD47 */
                    DerefOf (WGDY [One]) [0x24] = SD48 /* \SD48 */
                    DerefOf (WGDY [One]) [0x25] = SD49 /* \SD49 */
                    DerefOf (WGDY [One]) [0x26] = SD51 /* \SD51 */
                    DerefOf (WGDY [One]) [0x27] = SD52 /* \SD52 */
                    DerefOf (WGDY [One]) [0x28] = SD53 /* \SD53 */
                    DerefOf (WGDY [One]) [0x29] = SD54 /* \SD54 */
                    DerefOf (WGDY [One]) [0x2A] = SD55 /* \SD55 */
                    DerefOf (WGDY [One]) [0x2B] = SD56 /* \SD56 */
                    DerefOf (WGDY [One]) [0x2C] = SD57 /* \SD57 */
                    DerefOf (WGDY [One]) [0x2D] = SD58 /* \SD58 */
                    DerefOf (WGDY [One]) [0x2E] = SD59 /* \SD59 */
                    DerefOf (WGDY [One]) [0x2F] = SD61 /* \SD61 */
                    DerefOf (WGDY [One]) [0x30] = SD62 /* \SD62 */
                    DerefOf (WGDY [One]) [0x31] = SD63 /* \SD63 */
                    DerefOf (WGDY [One]) [0x32] = SD64 /* \SD64 */
                    DerefOf (WGDY [One]) [0x33] = SD65 /* \SD65 */
                    DerefOf (WGDY [One]) [0x34] = SD66 /* \SD66 */
                    DerefOf (WGDY [One]) [0x35] = SD67 /* \SD67 */
                    DerefOf (WGDY [One]) [0x36] = SD68 /* \SD68 */
                    DerefOf (WGDY [One]) [0x37] = SD69 /* \SD69 */
                    DerefOf (WGDY [One]) [0x38] = SD71 /* \SD71 */
                    DerefOf (WGDY [One]) [0x39] = SD72 /* \SD72 */
                    DerefOf (WGDY [One]) [0x3A] = SD73 /* \SD73 */
                    DerefOf (WGDY [One]) [0x3B] = SD74 /* \SD74 */
                    DerefOf (WGDY [One]) [0x3C] = SD75 /* \SD75 */
                    DerefOf (WGDY [One]) [0x3D] = SD76 /* \SD76 */
                    DerefOf (WGDY [One]) [0x3E] = SD77 /* \SD77 */
                    DerefOf (WGDY [One]) [0x3F] = SD78 /* \SD78 */
                    DerefOf (WGDY [One]) [0x40] = SD79 /* \SD79 */
                    DerefOf (WGDY [One]) [0x41] = SD81 /* \SD81 */
                    DerefOf (WGDY [One]) [0x42] = SD82 /* \SD82 */
                    DerefOf (WGDY [One]) [0x43] = SD83 /* \SD83 */
                    DerefOf (WGDY [One]) [0x44] = SD84 /* \SD84 */
                    DerefOf (WGDY [One]) [0x45] = SD85 /* \SD85 */
                    DerefOf (WGDY [One]) [0x46] = SD86 /* \SD86 */
                    DerefOf (WGDY [One]) [0x47] = SD87 /* \SD87 */
                    DerefOf (WGDY [One]) [0x48] = SD88 /* \SD88 */
                    DerefOf (WGDY [One]) [0x49] = SD89 /* \SD89 */
                    Return (WGDY) /* \_SB_.PC00.RP05.PXSX.WGDY */
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                    Return (ECKY) /* \_SB_.PC00.RP05.PXSX.ECKY */
                }

                Name (PPAY, Package (0x02)
                {
                    0x02, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    DerefOf (PPAY [One]) [One] = WAGM /* \WAGM */
                    DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                    DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                    DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                    DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                    DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                    DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                    DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                    DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                    DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                    DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                    DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                    DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                    DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                    DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                    DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                    DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                    DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                    DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                    DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                    DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                    DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                    DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                    Return (PPAY) /* \_SB_.PC00.RP05.PXSX.PPAY */
                }

                Name (WPFY, Package (0x02)
                {
                    Zero, 
                    Package (0x05)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WPFC, 0, Serialized)
                {
                    DerefOf (WPFY [One]) [One] = WPFA /* \WPFA */
                    DerefOf (WPFY [One]) [0x02] = WPFB /* \WPFB */
                    DerefOf (WPFY [One]) [0x03] = \WPFC
                    DerefOf (WPFY [One]) [0x04] = WPFD /* \WPFD */
                    Return (WPFY) /* \_SB_.PC00.RP05.PXSX.WPFY */
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    DerefOf (WTSY [One]) [One] = WTSE /* \WTSE */
                    DerefOf (WTSY [One]) [0x02] = WTLE /* \WTLE */
                    DerefOf (WTSY [One]) [0x03] = BL01 /* \BL01 */
                    DerefOf (WTSY [One]) [0x04] = BL02 /* \BL02 */
                    DerefOf (WTSY [One]) [0x05] = BL03 /* \BL03 */
                    DerefOf (WTSY [One]) [0x06] = BL04 /* \BL04 */
                    DerefOf (WTSY [One]) [0x07] = BL05 /* \BL05 */
                    DerefOf (WTSY [One]) [0x08] = BL06 /* \BL06 */
                    DerefOf (WTSY [One]) [0x09] = BL07 /* \BL07 */
                    DerefOf (WTSY [One]) [0x0A] = BL08 /* \BL08 */
                    DerefOf (WTSY [One]) [0x0B] = BL09 /* \BL09 */
                    DerefOf (WTSY [One]) [0x0C] = BL10 /* \BL10 */
                    DerefOf (WTSY [One]) [0x0D] = BL11 /* \BL11 */
                    DerefOf (WTSY [One]) [0x0E] = BL12 /* \BL12 */
                    DerefOf (WTSY [One]) [0x0F] = BL13 /* \BL13 */
                    DerefOf (WTSY [One]) [0x10] = BL14 /* \BL14 */
                    DerefOf (WTSY [One]) [0x11] = BL15 /* \BL15 */
                    DerefOf (WTSY [One]) [0x12] = BL16 /* \BL16 */
                    Return (WTSY) /* \_SB_.PC00.RP05.PXSX.WTSY */
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    DerefOf (WAIY [One]) [One] = WLBI /* \WLBI */
                    DerefOf (WAIY [One]) [0x02] = WHBI /* \WHBI */
                    Return (WAIY) /* \_SB_.PC00.RP05.PXSX.WAIY */
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PC00.RP05.PXSX.SADX */
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PC00.RP05.PXSX.GPCX */
                }

                Name (GLAX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Zero
                    }
                })
                Method (GLAI, 0, Serialized)
                {
                    ADBG (Concatenate ("AR: GLAI method. CGLS = ", ToHexString (CGLS)))
                    DerefOf (GLAX [One]) [One] = CGLS /* \CGLS */
                    DerefOf (GLAX [0x02]) [One] = CGLS /* \CGLS */
                    Return (GLAX) /* \_SB_.PC00.RP05.PXSX.GLAX */
                }
            }

            If (((WWEN != Zero) && (WWRP == SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If ((GGOV (PRST) != WPRP))
                    {
                        DL23 ()
                        ADBG ("WWAN DL23() Done")
                        SGOV (PRST, WPRP)
                        ADBG ("WWAN PERST:0 Done")
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    ADBG ("WWAN RST:0 Done")
                    If ((Arg0 == Zero))
                    {
                        Sleep (TBTG)
                        ADBG (Concatenate ("SLP TBTG ", ToDecimalString (TBTG)))
                    }
                    ElseIf ((Arg0 == One))
                    {
                        SPCO (WCLK, Zero)
                        ADBG ("WWAN SCLK:0 Done")
                        Sleep (TB2F)
                        ADBG (Concatenate ("SLP TB2F ", ToDecimalString (TB2F)))
                        SGOV (WFCP, (~PFCP & One))
                        ADBG ("WWAN PWR:0 Done")
                        Sleep (TFDI)
                        ADBG (Concatenate ("SLP TFDI ", ToDecimalString (TFDI)))
                    }
                    Else
                    {
                        ADBG ("Unsupported Arg0 is detected.")
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    ADBG ("WWAN MPHYPG:0 Done")
                    SPCO (WCLK, One)
                    ADBG ("WWAN SCLK:1 Done")
                    SGOV (WFCP, PFCP)
                    ADBG ("WWAN PWR:1 Done")
                    Sleep (TN2B)
                    ADBG (Concatenate ("SLP TN2B ", ToDecimalString (TN2B)))
                    SGOV (WBRS, (~PBRS & One))
                    ADBG ("WWAN RST:1 Done")
                    Sleep (TB2R)
                    ADBG (Concatenate ("SLP TB2R ", ToDecimalString (TB2R)))
                    SGOV (PRST, (~WPRP & One))
                    ADBG ("WWAN PERST:0 Done")
                    L23D ()
                    ADBG ("WWAN L23D() Done")
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Local0 = Zero
                    While (((SVID != WSID) && (Local0 < WSTO)))
                    {
                        Local0++
                        Sleep (One)
                    }

                    ADBG (Concatenate ("DET Time ", ToDecimalString (Local0)))
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    ADBG ("_RST WWAN")
                    If ((WWEN == 0x02))
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN FLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN FLDR")
                            FHRF (Zero)
                            SHRF ()
                            ADBG ("End WWAN FLDR")
                            Release (WWMT)
                            ADBG ("WWAN FLDR Mutex:Release Done")
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One) // Device Check
                        SGOV (PRST, (~WPRP & One))
                        SGOV (WBRS, (~PBRS & One))
                        Sleep (0xC8)
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x14))
                            {
                                ADBG ("FLDR TO")
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        Sleep (0x0A)
                        ADBG (Concatenate ("RVP Delay Time ", ToDecimalString (Local0)))
                        Notify (PXSX, One) // Device Check
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        ADBG ("WWAN PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        ADBG ("WWAN PR _ON")
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        ADBG ("WWAN PR _OFF")
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN PLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN PLDR")
                            FHRF (One)
                            SHRF ()
                            ADBG ("End WWAN PR _RST")
                            Release (WWMT)
                            ADBG ("WWAN PLDR Mutex: Release Done")
                            DOSV ()
                        }
                    }
                }
            }

            If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
            {
                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        WRST
                    })
                }

                Name (FDEL, Zero)
                Name (PDEL, Zero)
                Name (VDEL, Zero)
                Method (IFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x1F                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        ADBG (Concatenate ("vPro: ", CVPR))
                        Local0 = (CVPR << Zero)
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        ADBG (Concatenate ("CmdType = ", ToHexString (CMDT)))
                        ADBG (Concatenate ("CmdPayload = ", ToHexString (CMDP)))
                        If ((CMDT == One))
                        {
                            If (WIST ())
                            {
                                Return (RSTY) /* \_SB_.PC00.RP05.PXSX.RSTY */
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Get _PRR Mode = ", ^^^CNVW.RSTT))
                                Return (^^^CNVW.RSTT) /* \_SB_.PC00.CNVW.RSTT */
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((CMDT == 0x02))
                        {
                            If (WIST ())
                            {
                                Local0 = (CMDP & One)
                                RSTY = Local0
                                Local1 = (CMDP & 0x02)
                                Local1 >>= One
                                FLRC = Local1
                                Local2 = (CMDP & 0x04)
                                Local2 >>= 0x02
                                BOFC = Local2
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Set _PRR Mode = ", ToHexString (CMDP)))
                                ^^^CNVW.RSTT = CMDP /* \_SB_.PC00.RP05.PXSX.IFUN.CMDP */
                            }

                            Return (Zero)
                        }

                        If ((CMDT == 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                ADBG (Concatenate ("Get Last_PRR status PRRS = ", ToHexString (^^^CNVW.PRRS)))
                                Return (^^^CNVW.PRRS) /* \_SB_.PC00.CNVW.PRRS */
                            }
                            ElseIf (WIST ())
                            {
                                ADBG (Concatenate ("Get Last_PRR status DPRS = ", ToHexString (DPRS)))
                                Return (DPRS) /* \_SB_.PC00.RP05.PXSX.DPRS */
                            }
                        }

                        Return (Zero)
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((CRFI == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        CreateWordField (Arg3, Zero, PRTT)
                        CreateWordField (Arg3, 0x02, PRTD)
                        ADBG (Concatenate ("TimerType = ", ToHexString (PRTT)))
                        ADBG (Concatenate ("TimerDuration (ms) = ", ToDecimalString (PRTD)))
                        If ((PRTT == One))
                        {
                            FDEL = PRTD /* \_SB_.PC00.RP05.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x02))
                        {
                            PDEL = PRTD /* \_SB_.PC00.RP05.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x03))
                        {
                            VDEL = PRTD /* \_SB_.PC00.RP05.PXSX.IFUN.PRTD */
                        }
                        Else
                        {
                            ADBG ("TimerDuration not set")
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x1F                                       // ..
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Local0 = ACSD /* \ACSD */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Local0 = I5BS /* \I5BS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 = UHBS /* \UHBS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x06))
                    {
                        Local0 = AXMU /* \AXMU */
                        Local0 <<= One
                        Local0 |= AXSU /* \AXSU */
                        Local1 = AXMR /* \AXMR */
                        Local1 <<= One
                        Local1 |= AXSR /* \AXSR */
                        Local1 <<= 0x02
                        Local0 |= Local1
                        Return (Local0)
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (WFRC) /* \WFRC */
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (WFUC) /* \WFUC */
                    }

                    If ((Arg2 == 0x07))
                    {
                        Return (UNI4) /* \UNI4 */
                    }

                    If ((Arg2 == 0x08))
                    {
                        Return (WFIC) /* \WFIC */
                    }

                    If ((Arg2 == 0x09))
                    {
                        Return (WFBS) /* \WFBS */
                    }

                    If ((Arg2 == 0x0A))
                    {
                        Return (WEDT) /* \WEDT */
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((CIRM == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        Return (WF7C) /* \WF7C */
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                        {
                            If ((Arg2 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                             // .
                                })
                            }

                            If ((Arg2 == One)){}
                            If ((Arg2 == 0x02)){}
                            If ((Arg2 == 0x03))
                            {
                                If ((WRTO == One))
                                {
                                    ADBG ("WWAN Power _DSM D0/L1.2")
                                }
                                ElseIf ((WRTO == 0x02))
                                {
                                    ADBG ("WWAN Power _DSM D3/L1.2")
                                }
                                ElseIf ((WRTO == 0x03))
                                {
                                    ADBG ("WWAN Power _DSM D3/L2")
                                }
                                Else
                                {
                                    ADBG ("WWAN Power _DSM Disabled")
                                }

                                Return (WRTO) /* \WRTO */
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP06.PXSX))
    {
        Scope (_SB.PC00.RP06.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (PBNU, ^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WDCO), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            OperationRegion (VSEC, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WVHO), 0x10)
            Field (VSEC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x0C), 
                    ,   1, 
                BTIE,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                Offset (0x0D), 
                PDRC,   1
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Case (0x272B8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            If ((SVDC == One))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Case (0x080014C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                Name (RSTY, Zero)
                Name (FLRC, Zero)
                Name (BOFC, Zero)
                Name (DPRS, Zero)
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("Wifi PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("Wifi PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("Wifi PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If ((RSTY == One))
                        {
                            ADBG ("Wifi Product RST")
                            Local0 = Acquire (CNMT, 0x03E8)
                            If ((Local0 == Zero))
                            {
                                If ((FLRC == One))
                                {
                                    Local0 = DCTR /* \_SB_.PC00.RP06.PXSX.DCTR */
                                    Local0 |= 0x8000
                                    DCTR = Local0
                                    Sleep (FDEL)
                                }

                                DPRS = One
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (Zero)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = Zero
                                    }

                                    Sleep (RDLY)
                                }

                                PDRC = One
                                Sleep (VDEL)
                                SGOV (WLRT, Zero)
                                Sleep (PDEL)
                                SGOV (WLRT, One)
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (One)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = One
                                    }

                                    Sleep (RDLY)
                                }

                                DPRS = 0x02
                                Release (CNMT)
                            }
                        }
                        Else
                        {
                            ADBG ("Wifi Core RST")
                            If ((DCAP & 0x10000000))
                            {
                                Local0 = DCTR /* \_SB_.PC00.RP06.PXSX.DCTR */
                                Local0 |= 0x8000
                                DCTR = Local0
                            }

                            DPRS = One
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                    DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                    DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                    Return (SPLX) /* \_SB_.PC00.RP06.PXSX.SPLX */
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                    DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                    DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                    Return (WANX) /* \_SB_.PC00.RP06.PXSX.WANX */
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                    DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                    Return (WRDX) /* \_SB_.PC00.RP06.PXSX.WRDX */
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                    DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                    DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                    DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                    DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                    DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                    DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                    DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                    DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                    DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                    DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                    DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                    DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                    DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                    DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                    DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                    DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                    DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                    DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                    DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                    DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                    DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                    DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                    DerefOf (WRDY [One]) [0x18] = CD10 /* \CD10 */
                    DerefOf (WRDY [One]) [0x19] = CD11 /* \CD11 */
                    DerefOf (WRDY [One]) [0x1A] = CD12 /* \CD12 */
                    DerefOf (WRDY [One]) [0x1B] = CD13 /* \CD13 */
                    DerefOf (WRDY [One]) [0x1C] = CD14 /* \CD14 */
                    DerefOf (WRDY [One]) [0x1D] = CD15 /* \CD15 */
                    DerefOf (WRDY [One]) [0x1E] = CD16 /* \CD16 */
                    DerefOf (WRDY [One]) [0x1F] = CD17 /* \CD17 */
                    DerefOf (WRDY [One]) [0x20] = CD18 /* \CD18 */
                    DerefOf (WRDY [One]) [0x21] = CD19 /* \CD19 */
                    DerefOf (WRDY [One]) [0x22] = CD1A /* \CD1A */
                    DerefOf (WRDY [One]) [0x23] = CD20 /* \CD20 */
                    DerefOf (WRDY [One]) [0x24] = CD21 /* \CD21 */
                    DerefOf (WRDY [One]) [0x25] = CD22 /* \CD22 */
                    DerefOf (WRDY [One]) [0x26] = CD23 /* \CD23 */
                    DerefOf (WRDY [One]) [0x27] = CD24 /* \CD24 */
                    DerefOf (WRDY [One]) [0x28] = CD25 /* \CD25 */
                    DerefOf (WRDY [One]) [0x29] = CD26 /* \CD26 */
                    DerefOf (WRDY [One]) [0x2A] = CD27 /* \CD27 */
                    DerefOf (WRDY [One]) [0x2B] = CD28 /* \CD28 */
                    DerefOf (WRDY [One]) [0x2C] = CD29 /* \CD29 */
                    DerefOf (WRDY [One]) [0x2D] = CD2A /* \CD2A */
                    Return (WRDY) /* \_SB_.PC00.RP06.PXSX.WRDY */
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                    DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                    DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                    DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                    DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                    DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                    DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                    DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                    DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                    DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                    DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                    DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                    DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                    DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                    DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                    DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                    DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                    DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                    DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                    DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                    DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                    DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                    DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                    DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                    DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                    DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                    DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                    DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                    DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                    DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                    DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                    DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                    DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                    DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                    DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                    DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                    DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                    DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                    DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                    DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                    DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                    DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                    DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                    DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                    DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                    DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                    DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                    DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                    DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                    DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                    DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                    DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                    DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                    DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                    DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                    DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                    DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                    DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                    DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                    DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                    DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                    DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                    DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                    DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                    DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                    DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                    DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                    DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                    DerefOf (EWRY [One]) [0x45] = CD30 /* \CD30 */
                    DerefOf (EWRY [One]) [0x46] = CD31 /* \CD31 */
                    DerefOf (EWRY [One]) [0x47] = CD32 /* \CD32 */
                    DerefOf (EWRY [One]) [0x48] = CD33 /* \CD33 */
                    DerefOf (EWRY [One]) [0x49] = CD34 /* \CD34 */
                    DerefOf (EWRY [One]) [0x4A] = CD35 /* \CD35 */
                    DerefOf (EWRY [One]) [0x4B] = CD36 /* \CD36 */
                    DerefOf (EWRY [One]) [0x4C] = CD37 /* \CD37 */
                    DerefOf (EWRY [One]) [0x4D] = CD38 /* \CD38 */
                    DerefOf (EWRY [One]) [0x4E] = CD39 /* \CD39 */
                    DerefOf (EWRY [One]) [0x4F] = CD3A /* \CD3A */
                    DerefOf (EWRY [One]) [0x50] = CD3B /* \CD3B */
                    DerefOf (EWRY [One]) [0x51] = CD3C /* \CD3C */
                    DerefOf (EWRY [One]) [0x52] = CD3D /* \CD3D */
                    DerefOf (EWRY [One]) [0x53] = CD3E /* \CD3E */
                    DerefOf (EWRY [One]) [0x54] = CD3F /* \CD3F */
                    DerefOf (EWRY [One]) [0x55] = CD40 /* \CD40 */
                    DerefOf (EWRY [One]) [0x56] = CD41 /* \CD41 */
                    DerefOf (EWRY [One]) [0x57] = CD42 /* \CD42 */
                    DerefOf (EWRY [One]) [0x58] = CD43 /* \CD43 */
                    DerefOf (EWRY [One]) [0x59] = CD44 /* \CD44 */
                    DerefOf (EWRY [One]) [0x5A] = CD45 /* \CD45 */
                    DerefOf (EWRY [One]) [0x5B] = CD46 /* \CD46 */
                    DerefOf (EWRY [One]) [0x5C] = CD47 /* \CD47 */
                    DerefOf (EWRY [One]) [0x5D] = CD48 /* \CD48 */
                    DerefOf (EWRY [One]) [0x5E] = CD49 /* \CD49 */
                    DerefOf (EWRY [One]) [0x5F] = CD4A /* \CD4A */
                    DerefOf (EWRY [One]) [0x60] = CD4B /* \CD4B */
                    DerefOf (EWRY [One]) [0x61] = CD4C /* \CD4C */
                    DerefOf (EWRY [One]) [0x62] = CD4D /* \CD4D */
                    DerefOf (EWRY [One]) [0x63] = CD4E /* \CD4E */
                    DerefOf (EWRY [One]) [0x64] = CD4F /* \CD4F */
                    DerefOf (EWRY [One]) [0x65] = CD50 /* \CD50 */
                    DerefOf (EWRY [One]) [0x66] = CD51 /* \CD51 */
                    DerefOf (EWRY [One]) [0x67] = CD52 /* \CD52 */
                    DerefOf (EWRY [One]) [0x68] = CD53 /* \CD53 */
                    DerefOf (EWRY [One]) [0x69] = CD54 /* \CD54 */
                    DerefOf (EWRY [One]) [0x6A] = CD55 /* \CD55 */
                    DerefOf (EWRY [One]) [0x6B] = CD56 /* \CD56 */
                    DerefOf (EWRY [One]) [0x6C] = CD57 /* \CD57 */
                    DerefOf (EWRY [One]) [0x6D] = CD58 /* \CD58 */
                    DerefOf (EWRY [One]) [0x6E] = CD59 /* \CD59 */
                    DerefOf (EWRY [One]) [0x6F] = CD5A /* \CD5A */
                    DerefOf (EWRY [One]) [0x70] = CD5B /* \CD5B */
                    DerefOf (EWRY [One]) [0x71] = CD5C /* \CD5C */
                    DerefOf (EWRY [One]) [0x72] = CD5D /* \CD5D */
                    DerefOf (EWRY [One]) [0x73] = CD5E /* \CD5E */
                    DerefOf (EWRY [One]) [0x74] = CD5F /* \CD5F */
                    DerefOf (EWRY [One]) [0x75] = CD60 /* \CD60 */
                    DerefOf (EWRY [One]) [0x76] = CD61 /* \CD61 */
                    DerefOf (EWRY [One]) [0x77] = CD62 /* \CD62 */
                    DerefOf (EWRY [One]) [0x78] = CD63 /* \CD63 */
                    DerefOf (EWRY [One]) [0x79] = CD64 /* \CD64 */
                    DerefOf (EWRY [One]) [0x7A] = CD65 /* \CD65 */
                    DerefOf (EWRY [One]) [0x7B] = CD66 /* \CD66 */
                    DerefOf (EWRY [One]) [0x7C] = CD67 /* \CD67 */
                    DerefOf (EWRY [One]) [0x7D] = CD68 /* \CD68 */
                    DerefOf (EWRY [One]) [0x7E] = CD69 /* \CD69 */
                    DerefOf (EWRY [One]) [0x7F] = CD6A /* \CD6A */
                    DerefOf (EWRY [One]) [0x80] = CD6B /* \CD6B */
                    DerefOf (EWRY [One]) [0x81] = CD6C /* \CD6C */
                    DerefOf (EWRY [One]) [0x82] = CD6D /* \CD6D */
                    DerefOf (EWRY [One]) [0x83] = CD6E /* \CD6E */
                    DerefOf (EWRY [One]) [0x84] = CD6F /* \CD6F */
                    DerefOf (EWRY [One]) [0x85] = CD70 /* \CD70 */
                    DerefOf (EWRY [One]) [0x86] = CD71 /* \CD71 */
                    Return (EWRY) /* \_SB_.PC00.RP06.PXSX.EWRY */
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    DerefOf (WGDY [One]) [One] = SDGN /* \SDGN */
                    DerefOf (WGDY [One]) [0x02] = SD11 /* \SD11 */
                    DerefOf (WGDY [One]) [0x03] = SD12 /* \SD12 */
                    DerefOf (WGDY [One]) [0x04] = SD13 /* \SD13 */
                    DerefOf (WGDY [One]) [0x05] = SD14 /* \SD14 */
                    DerefOf (WGDY [One]) [0x06] = SD15 /* \SD15 */
                    DerefOf (WGDY [One]) [0x07] = SD16 /* \SD16 */
                    DerefOf (WGDY [One]) [0x08] = SD17 /* \SD17 */
                    DerefOf (WGDY [One]) [0x09] = SD18 /* \SD18 */
                    DerefOf (WGDY [One]) [0x0A] = SD19 /* \SD19 */
                    DerefOf (WGDY [One]) [0x0B] = SD21 /* \SD21 */
                    DerefOf (WGDY [One]) [0x0C] = SD22 /* \SD22 */
                    DerefOf (WGDY [One]) [0x0D] = SD23 /* \SD23 */
                    DerefOf (WGDY [One]) [0x0E] = SD24 /* \SD24 */
                    DerefOf (WGDY [One]) [0x0F] = SD25 /* \SD25 */
                    DerefOf (WGDY [One]) [0x10] = SD26 /* \SD26 */
                    DerefOf (WGDY [One]) [0x11] = SD27 /* \SD27 */
                    DerefOf (WGDY [One]) [0x12] = SD28 /* \SD28 */
                    DerefOf (WGDY [One]) [0x13] = SD29 /* \SD29 */
                    DerefOf (WGDY [One]) [0x14] = SD31 /* \SD31 */
                    DerefOf (WGDY [One]) [0x15] = SD32 /* \SD32 */
                    DerefOf (WGDY [One]) [0x16] = SD33 /* \SD33 */
                    DerefOf (WGDY [One]) [0x17] = SD34 /* \SD34 */
                    DerefOf (WGDY [One]) [0x18] = SD35 /* \SD35 */
                    DerefOf (WGDY [One]) [0x19] = SD36 /* \SD36 */
                    DerefOf (WGDY [One]) [0x1A] = SD37 /* \SD37 */
                    DerefOf (WGDY [One]) [0x1B] = SD38 /* \SD38 */
                    DerefOf (WGDY [One]) [0x1C] = SD39 /* \SD39 */
                    DerefOf (WGDY [One]) [0x1D] = SD41 /* \SD41 */
                    DerefOf (WGDY [One]) [0x1E] = SD42 /* \SD42 */
                    DerefOf (WGDY [One]) [0x1F] = SD43 /* \SD43 */
                    DerefOf (WGDY [One]) [0x20] = SD44 /* \SD44 */
                    DerefOf (WGDY [One]) [0x21] = SD45 /* \SD45 */
                    DerefOf (WGDY [One]) [0x22] = SD46 /* \SD46 */
                    DerefOf (WGDY [One]) [0x23] = SD47 /* \SD47 */
                    DerefOf (WGDY [One]) [0x24] = SD48 /* \SD48 */
                    DerefOf (WGDY [One]) [0x25] = SD49 /* \SD49 */
                    DerefOf (WGDY [One]) [0x26] = SD51 /* \SD51 */
                    DerefOf (WGDY [One]) [0x27] = SD52 /* \SD52 */
                    DerefOf (WGDY [One]) [0x28] = SD53 /* \SD53 */
                    DerefOf (WGDY [One]) [0x29] = SD54 /* \SD54 */
                    DerefOf (WGDY [One]) [0x2A] = SD55 /* \SD55 */
                    DerefOf (WGDY [One]) [0x2B] = SD56 /* \SD56 */
                    DerefOf (WGDY [One]) [0x2C] = SD57 /* \SD57 */
                    DerefOf (WGDY [One]) [0x2D] = SD58 /* \SD58 */
                    DerefOf (WGDY [One]) [0x2E] = SD59 /* \SD59 */
                    DerefOf (WGDY [One]) [0x2F] = SD61 /* \SD61 */
                    DerefOf (WGDY [One]) [0x30] = SD62 /* \SD62 */
                    DerefOf (WGDY [One]) [0x31] = SD63 /* \SD63 */
                    DerefOf (WGDY [One]) [0x32] = SD64 /* \SD64 */
                    DerefOf (WGDY [One]) [0x33] = SD65 /* \SD65 */
                    DerefOf (WGDY [One]) [0x34] = SD66 /* \SD66 */
                    DerefOf (WGDY [One]) [0x35] = SD67 /* \SD67 */
                    DerefOf (WGDY [One]) [0x36] = SD68 /* \SD68 */
                    DerefOf (WGDY [One]) [0x37] = SD69 /* \SD69 */
                    DerefOf (WGDY [One]) [0x38] = SD71 /* \SD71 */
                    DerefOf (WGDY [One]) [0x39] = SD72 /* \SD72 */
                    DerefOf (WGDY [One]) [0x3A] = SD73 /* \SD73 */
                    DerefOf (WGDY [One]) [0x3B] = SD74 /* \SD74 */
                    DerefOf (WGDY [One]) [0x3C] = SD75 /* \SD75 */
                    DerefOf (WGDY [One]) [0x3D] = SD76 /* \SD76 */
                    DerefOf (WGDY [One]) [0x3E] = SD77 /* \SD77 */
                    DerefOf (WGDY [One]) [0x3F] = SD78 /* \SD78 */
                    DerefOf (WGDY [One]) [0x40] = SD79 /* \SD79 */
                    DerefOf (WGDY [One]) [0x41] = SD81 /* \SD81 */
                    DerefOf (WGDY [One]) [0x42] = SD82 /* \SD82 */
                    DerefOf (WGDY [One]) [0x43] = SD83 /* \SD83 */
                    DerefOf (WGDY [One]) [0x44] = SD84 /* \SD84 */
                    DerefOf (WGDY [One]) [0x45] = SD85 /* \SD85 */
                    DerefOf (WGDY [One]) [0x46] = SD86 /* \SD86 */
                    DerefOf (WGDY [One]) [0x47] = SD87 /* \SD87 */
                    DerefOf (WGDY [One]) [0x48] = SD88 /* \SD88 */
                    DerefOf (WGDY [One]) [0x49] = SD89 /* \SD89 */
                    Return (WGDY) /* \_SB_.PC00.RP06.PXSX.WGDY */
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                    Return (ECKY) /* \_SB_.PC00.RP06.PXSX.ECKY */
                }

                Name (PPAY, Package (0x02)
                {
                    0x02, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    DerefOf (PPAY [One]) [One] = WAGM /* \WAGM */
                    DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                    DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                    DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                    DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                    DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                    DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                    DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                    DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                    DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                    DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                    DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                    DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                    DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                    DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                    DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                    DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                    DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                    DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                    DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                    DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                    DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                    DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                    Return (PPAY) /* \_SB_.PC00.RP06.PXSX.PPAY */
                }

                Name (WPFY, Package (0x02)
                {
                    Zero, 
                    Package (0x05)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WPFC, 0, Serialized)
                {
                    DerefOf (WPFY [One]) [One] = WPFA /* \WPFA */
                    DerefOf (WPFY [One]) [0x02] = WPFB /* \WPFB */
                    DerefOf (WPFY [One]) [0x03] = \WPFC
                    DerefOf (WPFY [One]) [0x04] = WPFD /* \WPFD */
                    Return (WPFY) /* \_SB_.PC00.RP06.PXSX.WPFY */
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    DerefOf (WTSY [One]) [One] = WTSE /* \WTSE */
                    DerefOf (WTSY [One]) [0x02] = WTLE /* \WTLE */
                    DerefOf (WTSY [One]) [0x03] = BL01 /* \BL01 */
                    DerefOf (WTSY [One]) [0x04] = BL02 /* \BL02 */
                    DerefOf (WTSY [One]) [0x05] = BL03 /* \BL03 */
                    DerefOf (WTSY [One]) [0x06] = BL04 /* \BL04 */
                    DerefOf (WTSY [One]) [0x07] = BL05 /* \BL05 */
                    DerefOf (WTSY [One]) [0x08] = BL06 /* \BL06 */
                    DerefOf (WTSY [One]) [0x09] = BL07 /* \BL07 */
                    DerefOf (WTSY [One]) [0x0A] = BL08 /* \BL08 */
                    DerefOf (WTSY [One]) [0x0B] = BL09 /* \BL09 */
                    DerefOf (WTSY [One]) [0x0C] = BL10 /* \BL10 */
                    DerefOf (WTSY [One]) [0x0D] = BL11 /* \BL11 */
                    DerefOf (WTSY [One]) [0x0E] = BL12 /* \BL12 */
                    DerefOf (WTSY [One]) [0x0F] = BL13 /* \BL13 */
                    DerefOf (WTSY [One]) [0x10] = BL14 /* \BL14 */
                    DerefOf (WTSY [One]) [0x11] = BL15 /* \BL15 */
                    DerefOf (WTSY [One]) [0x12] = BL16 /* \BL16 */
                    Return (WTSY) /* \_SB_.PC00.RP06.PXSX.WTSY */
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    DerefOf (WAIY [One]) [One] = WLBI /* \WLBI */
                    DerefOf (WAIY [One]) [0x02] = WHBI /* \WHBI */
                    Return (WAIY) /* \_SB_.PC00.RP06.PXSX.WAIY */
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PC00.RP06.PXSX.SADX */
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PC00.RP06.PXSX.GPCX */
                }

                Name (GLAX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Zero
                    }
                })
                Method (GLAI, 0, Serialized)
                {
                    ADBG (Concatenate ("AR: GLAI method. CGLS = ", ToHexString (CGLS)))
                    DerefOf (GLAX [One]) [One] = CGLS /* \CGLS */
                    DerefOf (GLAX [0x02]) [One] = CGLS /* \CGLS */
                    Return (GLAX) /* \_SB_.PC00.RP06.PXSX.GLAX */
                }
            }

            If (((WWEN != Zero) && (WWRP == SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If ((GGOV (PRST) != WPRP))
                    {
                        DL23 ()
                        ADBG ("WWAN DL23() Done")
                        SGOV (PRST, WPRP)
                        ADBG ("WWAN PERST:0 Done")
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    ADBG ("WWAN RST:0 Done")
                    If ((Arg0 == Zero))
                    {
                        Sleep (TBTG)
                        ADBG (Concatenate ("SLP TBTG ", ToDecimalString (TBTG)))
                    }
                    ElseIf ((Arg0 == One))
                    {
                        SPCO (WCLK, Zero)
                        ADBG ("WWAN SCLK:0 Done")
                        Sleep (TB2F)
                        ADBG (Concatenate ("SLP TB2F ", ToDecimalString (TB2F)))
                        SGOV (WFCP, (~PFCP & One))
                        ADBG ("WWAN PWR:0 Done")
                        Sleep (TFDI)
                        ADBG (Concatenate ("SLP TFDI ", ToDecimalString (TFDI)))
                    }
                    Else
                    {
                        ADBG ("Unsupported Arg0 is detected.")
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    ADBG ("WWAN MPHYPG:0 Done")
                    SPCO (WCLK, One)
                    ADBG ("WWAN SCLK:1 Done")
                    SGOV (WFCP, PFCP)
                    ADBG ("WWAN PWR:1 Done")
                    Sleep (TN2B)
                    ADBG (Concatenate ("SLP TN2B ", ToDecimalString (TN2B)))
                    SGOV (WBRS, (~PBRS & One))
                    ADBG ("WWAN RST:1 Done")
                    Sleep (TB2R)
                    ADBG (Concatenate ("SLP TB2R ", ToDecimalString (TB2R)))
                    SGOV (PRST, (~WPRP & One))
                    ADBG ("WWAN PERST:0 Done")
                    L23D ()
                    ADBG ("WWAN L23D() Done")
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Local0 = Zero
                    While (((SVID != WSID) && (Local0 < WSTO)))
                    {
                        Local0++
                        Sleep (One)
                    }

                    ADBG (Concatenate ("DET Time ", ToDecimalString (Local0)))
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    ADBG ("_RST WWAN")
                    If ((WWEN == 0x02))
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN FLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN FLDR")
                            FHRF (Zero)
                            SHRF ()
                            ADBG ("End WWAN FLDR")
                            Release (WWMT)
                            ADBG ("WWAN FLDR Mutex:Release Done")
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One) // Device Check
                        SGOV (PRST, (~WPRP & One))
                        SGOV (WBRS, (~PBRS & One))
                        Sleep (0xC8)
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x14))
                            {
                                ADBG ("FLDR TO")
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        Sleep (0x0A)
                        ADBG (Concatenate ("RVP Delay Time ", ToDecimalString (Local0)))
                        Notify (PXSX, One) // Device Check
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        ADBG ("WWAN PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        ADBG ("WWAN PR _ON")
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        ADBG ("WWAN PR _OFF")
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN PLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN PLDR")
                            FHRF (One)
                            SHRF ()
                            ADBG ("End WWAN PR _RST")
                            Release (WWMT)
                            ADBG ("WWAN PLDR Mutex: Release Done")
                            DOSV ()
                        }
                    }
                }
            }

            If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
            {
                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        WRST
                    })
                }

                Name (FDEL, Zero)
                Name (PDEL, Zero)
                Name (VDEL, Zero)
                Method (IFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x1F                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        ADBG (Concatenate ("vPro: ", CVPR))
                        Local0 = (CVPR << Zero)
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        ADBG (Concatenate ("CmdType = ", ToHexString (CMDT)))
                        ADBG (Concatenate ("CmdPayload = ", ToHexString (CMDP)))
                        If ((CMDT == One))
                        {
                            If (WIST ())
                            {
                                Return (RSTY) /* \_SB_.PC00.RP06.PXSX.RSTY */
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Get _PRR Mode = ", ^^^CNVW.RSTT))
                                Return (^^^CNVW.RSTT) /* \_SB_.PC00.CNVW.RSTT */
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((CMDT == 0x02))
                        {
                            If (WIST ())
                            {
                                Local0 = (CMDP & One)
                                RSTY = Local0
                                Local1 = (CMDP & 0x02)
                                Local1 >>= One
                                FLRC = Local1
                                Local2 = (CMDP & 0x04)
                                Local2 >>= 0x02
                                BOFC = Local2
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Set _PRR Mode = ", ToHexString (CMDP)))
                                ^^^CNVW.RSTT = CMDP /* \_SB_.PC00.RP06.PXSX.IFUN.CMDP */
                            }

                            Return (Zero)
                        }

                        If ((CMDT == 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                ADBG (Concatenate ("Get Last_PRR status PRRS = ", ToHexString (^^^CNVW.PRRS)))
                                Return (^^^CNVW.PRRS) /* \_SB_.PC00.CNVW.PRRS */
                            }
                            ElseIf (WIST ())
                            {
                                ADBG (Concatenate ("Get Last_PRR status DPRS = ", ToHexString (DPRS)))
                                Return (DPRS) /* \_SB_.PC00.RP06.PXSX.DPRS */
                            }
                        }

                        Return (Zero)
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((CRFI == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        CreateWordField (Arg3, Zero, PRTT)
                        CreateWordField (Arg3, 0x02, PRTD)
                        ADBG (Concatenate ("TimerType = ", ToHexString (PRTT)))
                        ADBG (Concatenate ("TimerDuration (ms) = ", ToDecimalString (PRTD)))
                        If ((PRTT == One))
                        {
                            FDEL = PRTD /* \_SB_.PC00.RP06.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x02))
                        {
                            PDEL = PRTD /* \_SB_.PC00.RP06.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x03))
                        {
                            VDEL = PRTD /* \_SB_.PC00.RP06.PXSX.IFUN.PRTD */
                        }
                        Else
                        {
                            ADBG ("TimerDuration not set")
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x1F                                       // ..
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Local0 = ACSD /* \ACSD */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Local0 = I5BS /* \I5BS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 = UHBS /* \UHBS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x06))
                    {
                        Local0 = AXMU /* \AXMU */
                        Local0 <<= One
                        Local0 |= AXSU /* \AXSU */
                        Local1 = AXMR /* \AXMR */
                        Local1 <<= One
                        Local1 |= AXSR /* \AXSR */
                        Local1 <<= 0x02
                        Local0 |= Local1
                        Return (Local0)
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (WFRC) /* \WFRC */
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (WFUC) /* \WFUC */
                    }

                    If ((Arg2 == 0x07))
                    {
                        Return (UNI4) /* \UNI4 */
                    }

                    If ((Arg2 == 0x08))
                    {
                        Return (WFIC) /* \WFIC */
                    }

                    If ((Arg2 == 0x09))
                    {
                        Return (WFBS) /* \WFBS */
                    }

                    If ((Arg2 == 0x0A))
                    {
                        Return (WEDT) /* \WEDT */
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((CIRM == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        Return (WF7C) /* \WF7C */
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                        {
                            If ((Arg2 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                             // .
                                })
                            }

                            If ((Arg2 == One)){}
                            If ((Arg2 == 0x02)){}
                            If ((Arg2 == 0x03))
                            {
                                If ((WRTO == One))
                                {
                                    ADBG ("WWAN Power _DSM D0/L1.2")
                                }
                                ElseIf ((WRTO == 0x02))
                                {
                                    ADBG ("WWAN Power _DSM D3/L1.2")
                                }
                                ElseIf ((WRTO == 0x03))
                                {
                                    ADBG ("WWAN Power _DSM D3/L2")
                                }
                                Else
                                {
                                    ADBG ("WWAN Power _DSM Disabled")
                                }

                                Return (WRTO) /* \WRTO */
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP07.PXSX))
    {
        Scope (_SB.PC00.RP07.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (PBNU, ^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WDCO), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            OperationRegion (VSEC, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WVHO), 0x10)
            Field (VSEC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x0C), 
                    ,   1, 
                BTIE,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                Offset (0x0D), 
                PDRC,   1
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Case (0x272B8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            If ((SVDC == One))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Case (0x080014C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                Name (RSTY, Zero)
                Name (FLRC, Zero)
                Name (BOFC, Zero)
                Name (DPRS, Zero)
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("Wifi PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("Wifi PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("Wifi PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If ((RSTY == One))
                        {
                            ADBG ("Wifi Product RST")
                            Local0 = Acquire (CNMT, 0x03E8)
                            If ((Local0 == Zero))
                            {
                                If ((FLRC == One))
                                {
                                    Local0 = DCTR /* \_SB_.PC00.RP07.PXSX.DCTR */
                                    Local0 |= 0x8000
                                    DCTR = Local0
                                    Sleep (FDEL)
                                }

                                DPRS = One
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (Zero)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = Zero
                                    }

                                    Sleep (RDLY)
                                }

                                PDRC = One
                                Sleep (VDEL)
                                SGOV (WLRT, Zero)
                                Sleep (PDEL)
                                SGOV (WLRT, One)
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (One)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = One
                                    }

                                    Sleep (RDLY)
                                }

                                DPRS = 0x02
                                Release (CNMT)
                            }
                        }
                        Else
                        {
                            ADBG ("Wifi Core RST")
                            If ((DCAP & 0x10000000))
                            {
                                Local0 = DCTR /* \_SB_.PC00.RP07.PXSX.DCTR */
                                Local0 |= 0x8000
                                DCTR = Local0
                            }

                            DPRS = One
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                    DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                    DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                    Return (SPLX) /* \_SB_.PC00.RP07.PXSX.SPLX */
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                    DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                    DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                    Return (WANX) /* \_SB_.PC00.RP07.PXSX.WANX */
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                    DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                    Return (WRDX) /* \_SB_.PC00.RP07.PXSX.WRDX */
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                    DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                    DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                    DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                    DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                    DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                    DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                    DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                    DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                    DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                    DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                    DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                    DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                    DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                    DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                    DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                    DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                    DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                    DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                    DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                    DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                    DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                    DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                    DerefOf (WRDY [One]) [0x18] = CD10 /* \CD10 */
                    DerefOf (WRDY [One]) [0x19] = CD11 /* \CD11 */
                    DerefOf (WRDY [One]) [0x1A] = CD12 /* \CD12 */
                    DerefOf (WRDY [One]) [0x1B] = CD13 /* \CD13 */
                    DerefOf (WRDY [One]) [0x1C] = CD14 /* \CD14 */
                    DerefOf (WRDY [One]) [0x1D] = CD15 /* \CD15 */
                    DerefOf (WRDY [One]) [0x1E] = CD16 /* \CD16 */
                    DerefOf (WRDY [One]) [0x1F] = CD17 /* \CD17 */
                    DerefOf (WRDY [One]) [0x20] = CD18 /* \CD18 */
                    DerefOf (WRDY [One]) [0x21] = CD19 /* \CD19 */
                    DerefOf (WRDY [One]) [0x22] = CD1A /* \CD1A */
                    DerefOf (WRDY [One]) [0x23] = CD20 /* \CD20 */
                    DerefOf (WRDY [One]) [0x24] = CD21 /* \CD21 */
                    DerefOf (WRDY [One]) [0x25] = CD22 /* \CD22 */
                    DerefOf (WRDY [One]) [0x26] = CD23 /* \CD23 */
                    DerefOf (WRDY [One]) [0x27] = CD24 /* \CD24 */
                    DerefOf (WRDY [One]) [0x28] = CD25 /* \CD25 */
                    DerefOf (WRDY [One]) [0x29] = CD26 /* \CD26 */
                    DerefOf (WRDY [One]) [0x2A] = CD27 /* \CD27 */
                    DerefOf (WRDY [One]) [0x2B] = CD28 /* \CD28 */
                    DerefOf (WRDY [One]) [0x2C] = CD29 /* \CD29 */
                    DerefOf (WRDY [One]) [0x2D] = CD2A /* \CD2A */
                    Return (WRDY) /* \_SB_.PC00.RP07.PXSX.WRDY */
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                    DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                    DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                    DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                    DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                    DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                    DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                    DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                    DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                    DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                    DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                    DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                    DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                    DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                    DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                    DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                    DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                    DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                    DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                    DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                    DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                    DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                    DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                    DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                    DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                    DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                    DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                    DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                    DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                    DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                    DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                    DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                    DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                    DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                    DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                    DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                    DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                    DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                    DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                    DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                    DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                    DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                    DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                    DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                    DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                    DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                    DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                    DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                    DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                    DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                    DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                    DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                    DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                    DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                    DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                    DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                    DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                    DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                    DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                    DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                    DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                    DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                    DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                    DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                    DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                    DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                    DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                    DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                    DerefOf (EWRY [One]) [0x45] = CD30 /* \CD30 */
                    DerefOf (EWRY [One]) [0x46] = CD31 /* \CD31 */
                    DerefOf (EWRY [One]) [0x47] = CD32 /* \CD32 */
                    DerefOf (EWRY [One]) [0x48] = CD33 /* \CD33 */
                    DerefOf (EWRY [One]) [0x49] = CD34 /* \CD34 */
                    DerefOf (EWRY [One]) [0x4A] = CD35 /* \CD35 */
                    DerefOf (EWRY [One]) [0x4B] = CD36 /* \CD36 */
                    DerefOf (EWRY [One]) [0x4C] = CD37 /* \CD37 */
                    DerefOf (EWRY [One]) [0x4D] = CD38 /* \CD38 */
                    DerefOf (EWRY [One]) [0x4E] = CD39 /* \CD39 */
                    DerefOf (EWRY [One]) [0x4F] = CD3A /* \CD3A */
                    DerefOf (EWRY [One]) [0x50] = CD3B /* \CD3B */
                    DerefOf (EWRY [One]) [0x51] = CD3C /* \CD3C */
                    DerefOf (EWRY [One]) [0x52] = CD3D /* \CD3D */
                    DerefOf (EWRY [One]) [0x53] = CD3E /* \CD3E */
                    DerefOf (EWRY [One]) [0x54] = CD3F /* \CD3F */
                    DerefOf (EWRY [One]) [0x55] = CD40 /* \CD40 */
                    DerefOf (EWRY [One]) [0x56] = CD41 /* \CD41 */
                    DerefOf (EWRY [One]) [0x57] = CD42 /* \CD42 */
                    DerefOf (EWRY [One]) [0x58] = CD43 /* \CD43 */
                    DerefOf (EWRY [One]) [0x59] = CD44 /* \CD44 */
                    DerefOf (EWRY [One]) [0x5A] = CD45 /* \CD45 */
                    DerefOf (EWRY [One]) [0x5B] = CD46 /* \CD46 */
                    DerefOf (EWRY [One]) [0x5C] = CD47 /* \CD47 */
                    DerefOf (EWRY [One]) [0x5D] = CD48 /* \CD48 */
                    DerefOf (EWRY [One]) [0x5E] = CD49 /* \CD49 */
                    DerefOf (EWRY [One]) [0x5F] = CD4A /* \CD4A */
                    DerefOf (EWRY [One]) [0x60] = CD4B /* \CD4B */
                    DerefOf (EWRY [One]) [0x61] = CD4C /* \CD4C */
                    DerefOf (EWRY [One]) [0x62] = CD4D /* \CD4D */
                    DerefOf (EWRY [One]) [0x63] = CD4E /* \CD4E */
                    DerefOf (EWRY [One]) [0x64] = CD4F /* \CD4F */
                    DerefOf (EWRY [One]) [0x65] = CD50 /* \CD50 */
                    DerefOf (EWRY [One]) [0x66] = CD51 /* \CD51 */
                    DerefOf (EWRY [One]) [0x67] = CD52 /* \CD52 */
                    DerefOf (EWRY [One]) [0x68] = CD53 /* \CD53 */
                    DerefOf (EWRY [One]) [0x69] = CD54 /* \CD54 */
                    DerefOf (EWRY [One]) [0x6A] = CD55 /* \CD55 */
                    DerefOf (EWRY [One]) [0x6B] = CD56 /* \CD56 */
                    DerefOf (EWRY [One]) [0x6C] = CD57 /* \CD57 */
                    DerefOf (EWRY [One]) [0x6D] = CD58 /* \CD58 */
                    DerefOf (EWRY [One]) [0x6E] = CD59 /* \CD59 */
                    DerefOf (EWRY [One]) [0x6F] = CD5A /* \CD5A */
                    DerefOf (EWRY [One]) [0x70] = CD5B /* \CD5B */
                    DerefOf (EWRY [One]) [0x71] = CD5C /* \CD5C */
                    DerefOf (EWRY [One]) [0x72] = CD5D /* \CD5D */
                    DerefOf (EWRY [One]) [0x73] = CD5E /* \CD5E */
                    DerefOf (EWRY [One]) [0x74] = CD5F /* \CD5F */
                    DerefOf (EWRY [One]) [0x75] = CD60 /* \CD60 */
                    DerefOf (EWRY [One]) [0x76] = CD61 /* \CD61 */
                    DerefOf (EWRY [One]) [0x77] = CD62 /* \CD62 */
                    DerefOf (EWRY [One]) [0x78] = CD63 /* \CD63 */
                    DerefOf (EWRY [One]) [0x79] = CD64 /* \CD64 */
                    DerefOf (EWRY [One]) [0x7A] = CD65 /* \CD65 */
                    DerefOf (EWRY [One]) [0x7B] = CD66 /* \CD66 */
                    DerefOf (EWRY [One]) [0x7C] = CD67 /* \CD67 */
                    DerefOf (EWRY [One]) [0x7D] = CD68 /* \CD68 */
                    DerefOf (EWRY [One]) [0x7E] = CD69 /* \CD69 */
                    DerefOf (EWRY [One]) [0x7F] = CD6A /* \CD6A */
                    DerefOf (EWRY [One]) [0x80] = CD6B /* \CD6B */
                    DerefOf (EWRY [One]) [0x81] = CD6C /* \CD6C */
                    DerefOf (EWRY [One]) [0x82] = CD6D /* \CD6D */
                    DerefOf (EWRY [One]) [0x83] = CD6E /* \CD6E */
                    DerefOf (EWRY [One]) [0x84] = CD6F /* \CD6F */
                    DerefOf (EWRY [One]) [0x85] = CD70 /* \CD70 */
                    DerefOf (EWRY [One]) [0x86] = CD71 /* \CD71 */
                    Return (EWRY) /* \_SB_.PC00.RP07.PXSX.EWRY */
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    DerefOf (WGDY [One]) [One] = SDGN /* \SDGN */
                    DerefOf (WGDY [One]) [0x02] = SD11 /* \SD11 */
                    DerefOf (WGDY [One]) [0x03] = SD12 /* \SD12 */
                    DerefOf (WGDY [One]) [0x04] = SD13 /* \SD13 */
                    DerefOf (WGDY [One]) [0x05] = SD14 /* \SD14 */
                    DerefOf (WGDY [One]) [0x06] = SD15 /* \SD15 */
                    DerefOf (WGDY [One]) [0x07] = SD16 /* \SD16 */
                    DerefOf (WGDY [One]) [0x08] = SD17 /* \SD17 */
                    DerefOf (WGDY [One]) [0x09] = SD18 /* \SD18 */
                    DerefOf (WGDY [One]) [0x0A] = SD19 /* \SD19 */
                    DerefOf (WGDY [One]) [0x0B] = SD21 /* \SD21 */
                    DerefOf (WGDY [One]) [0x0C] = SD22 /* \SD22 */
                    DerefOf (WGDY [One]) [0x0D] = SD23 /* \SD23 */
                    DerefOf (WGDY [One]) [0x0E] = SD24 /* \SD24 */
                    DerefOf (WGDY [One]) [0x0F] = SD25 /* \SD25 */
                    DerefOf (WGDY [One]) [0x10] = SD26 /* \SD26 */
                    DerefOf (WGDY [One]) [0x11] = SD27 /* \SD27 */
                    DerefOf (WGDY [One]) [0x12] = SD28 /* \SD28 */
                    DerefOf (WGDY [One]) [0x13] = SD29 /* \SD29 */
                    DerefOf (WGDY [One]) [0x14] = SD31 /* \SD31 */
                    DerefOf (WGDY [One]) [0x15] = SD32 /* \SD32 */
                    DerefOf (WGDY [One]) [0x16] = SD33 /* \SD33 */
                    DerefOf (WGDY [One]) [0x17] = SD34 /* \SD34 */
                    DerefOf (WGDY [One]) [0x18] = SD35 /* \SD35 */
                    DerefOf (WGDY [One]) [0x19] = SD36 /* \SD36 */
                    DerefOf (WGDY [One]) [0x1A] = SD37 /* \SD37 */
                    DerefOf (WGDY [One]) [0x1B] = SD38 /* \SD38 */
                    DerefOf (WGDY [One]) [0x1C] = SD39 /* \SD39 */
                    DerefOf (WGDY [One]) [0x1D] = SD41 /* \SD41 */
                    DerefOf (WGDY [One]) [0x1E] = SD42 /* \SD42 */
                    DerefOf (WGDY [One]) [0x1F] = SD43 /* \SD43 */
                    DerefOf (WGDY [One]) [0x20] = SD44 /* \SD44 */
                    DerefOf (WGDY [One]) [0x21] = SD45 /* \SD45 */
                    DerefOf (WGDY [One]) [0x22] = SD46 /* \SD46 */
                    DerefOf (WGDY [One]) [0x23] = SD47 /* \SD47 */
                    DerefOf (WGDY [One]) [0x24] = SD48 /* \SD48 */
                    DerefOf (WGDY [One]) [0x25] = SD49 /* \SD49 */
                    DerefOf (WGDY [One]) [0x26] = SD51 /* \SD51 */
                    DerefOf (WGDY [One]) [0x27] = SD52 /* \SD52 */
                    DerefOf (WGDY [One]) [0x28] = SD53 /* \SD53 */
                    DerefOf (WGDY [One]) [0x29] = SD54 /* \SD54 */
                    DerefOf (WGDY [One]) [0x2A] = SD55 /* \SD55 */
                    DerefOf (WGDY [One]) [0x2B] = SD56 /* \SD56 */
                    DerefOf (WGDY [One]) [0x2C] = SD57 /* \SD57 */
                    DerefOf (WGDY [One]) [0x2D] = SD58 /* \SD58 */
                    DerefOf (WGDY [One]) [0x2E] = SD59 /* \SD59 */
                    DerefOf (WGDY [One]) [0x2F] = SD61 /* \SD61 */
                    DerefOf (WGDY [One]) [0x30] = SD62 /* \SD62 */
                    DerefOf (WGDY [One]) [0x31] = SD63 /* \SD63 */
                    DerefOf (WGDY [One]) [0x32] = SD64 /* \SD64 */
                    DerefOf (WGDY [One]) [0x33] = SD65 /* \SD65 */
                    DerefOf (WGDY [One]) [0x34] = SD66 /* \SD66 */
                    DerefOf (WGDY [One]) [0x35] = SD67 /* \SD67 */
                    DerefOf (WGDY [One]) [0x36] = SD68 /* \SD68 */
                    DerefOf (WGDY [One]) [0x37] = SD69 /* \SD69 */
                    DerefOf (WGDY [One]) [0x38] = SD71 /* \SD71 */
                    DerefOf (WGDY [One]) [0x39] = SD72 /* \SD72 */
                    DerefOf (WGDY [One]) [0x3A] = SD73 /* \SD73 */
                    DerefOf (WGDY [One]) [0x3B] = SD74 /* \SD74 */
                    DerefOf (WGDY [One]) [0x3C] = SD75 /* \SD75 */
                    DerefOf (WGDY [One]) [0x3D] = SD76 /* \SD76 */
                    DerefOf (WGDY [One]) [0x3E] = SD77 /* \SD77 */
                    DerefOf (WGDY [One]) [0x3F] = SD78 /* \SD78 */
                    DerefOf (WGDY [One]) [0x40] = SD79 /* \SD79 */
                    DerefOf (WGDY [One]) [0x41] = SD81 /* \SD81 */
                    DerefOf (WGDY [One]) [0x42] = SD82 /* \SD82 */
                    DerefOf (WGDY [One]) [0x43] = SD83 /* \SD83 */
                    DerefOf (WGDY [One]) [0x44] = SD84 /* \SD84 */
                    DerefOf (WGDY [One]) [0x45] = SD85 /* \SD85 */
                    DerefOf (WGDY [One]) [0x46] = SD86 /* \SD86 */
                    DerefOf (WGDY [One]) [0x47] = SD87 /* \SD87 */
                    DerefOf (WGDY [One]) [0x48] = SD88 /* \SD88 */
                    DerefOf (WGDY [One]) [0x49] = SD89 /* \SD89 */
                    Return (WGDY) /* \_SB_.PC00.RP07.PXSX.WGDY */
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                    Return (ECKY) /* \_SB_.PC00.RP07.PXSX.ECKY */
                }

                Name (PPAY, Package (0x02)
                {
                    0x02, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    DerefOf (PPAY [One]) [One] = WAGM /* \WAGM */
                    DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                    DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                    DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                    DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                    DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                    DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                    DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                    DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                    DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                    DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                    DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                    DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                    DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                    DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                    DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                    DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                    DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                    DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                    DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                    DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                    DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                    DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                    Return (PPAY) /* \_SB_.PC00.RP07.PXSX.PPAY */
                }

                Name (WPFY, Package (0x02)
                {
                    Zero, 
                    Package (0x05)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WPFC, 0, Serialized)
                {
                    DerefOf (WPFY [One]) [One] = WPFA /* \WPFA */
                    DerefOf (WPFY [One]) [0x02] = WPFB /* \WPFB */
                    DerefOf (WPFY [One]) [0x03] = \WPFC
                    DerefOf (WPFY [One]) [0x04] = WPFD /* \WPFD */
                    Return (WPFY) /* \_SB_.PC00.RP07.PXSX.WPFY */
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    DerefOf (WTSY [One]) [One] = WTSE /* \WTSE */
                    DerefOf (WTSY [One]) [0x02] = WTLE /* \WTLE */
                    DerefOf (WTSY [One]) [0x03] = BL01 /* \BL01 */
                    DerefOf (WTSY [One]) [0x04] = BL02 /* \BL02 */
                    DerefOf (WTSY [One]) [0x05] = BL03 /* \BL03 */
                    DerefOf (WTSY [One]) [0x06] = BL04 /* \BL04 */
                    DerefOf (WTSY [One]) [0x07] = BL05 /* \BL05 */
                    DerefOf (WTSY [One]) [0x08] = BL06 /* \BL06 */
                    DerefOf (WTSY [One]) [0x09] = BL07 /* \BL07 */
                    DerefOf (WTSY [One]) [0x0A] = BL08 /* \BL08 */
                    DerefOf (WTSY [One]) [0x0B] = BL09 /* \BL09 */
                    DerefOf (WTSY [One]) [0x0C] = BL10 /* \BL10 */
                    DerefOf (WTSY [One]) [0x0D] = BL11 /* \BL11 */
                    DerefOf (WTSY [One]) [0x0E] = BL12 /* \BL12 */
                    DerefOf (WTSY [One]) [0x0F] = BL13 /* \BL13 */
                    DerefOf (WTSY [One]) [0x10] = BL14 /* \BL14 */
                    DerefOf (WTSY [One]) [0x11] = BL15 /* \BL15 */
                    DerefOf (WTSY [One]) [0x12] = BL16 /* \BL16 */
                    Return (WTSY) /* \_SB_.PC00.RP07.PXSX.WTSY */
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    DerefOf (WAIY [One]) [One] = WLBI /* \WLBI */
                    DerefOf (WAIY [One]) [0x02] = WHBI /* \WHBI */
                    Return (WAIY) /* \_SB_.PC00.RP07.PXSX.WAIY */
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PC00.RP07.PXSX.SADX */
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PC00.RP07.PXSX.GPCX */
                }

                Name (GLAX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Zero
                    }
                })
                Method (GLAI, 0, Serialized)
                {
                    ADBG (Concatenate ("AR: GLAI method. CGLS = ", ToHexString (CGLS)))
                    DerefOf (GLAX [One]) [One] = CGLS /* \CGLS */
                    DerefOf (GLAX [0x02]) [One] = CGLS /* \CGLS */
                    Return (GLAX) /* \_SB_.PC00.RP07.PXSX.GLAX */
                }
            }

            If (((WWEN != Zero) && (WWRP == SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If ((GGOV (PRST) != WPRP))
                    {
                        DL23 ()
                        ADBG ("WWAN DL23() Done")
                        SGOV (PRST, WPRP)
                        ADBG ("WWAN PERST:0 Done")
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    ADBG ("WWAN RST:0 Done")
                    If ((Arg0 == Zero))
                    {
                        Sleep (TBTG)
                        ADBG (Concatenate ("SLP TBTG ", ToDecimalString (TBTG)))
                    }
                    ElseIf ((Arg0 == One))
                    {
                        SPCO (WCLK, Zero)
                        ADBG ("WWAN SCLK:0 Done")
                        Sleep (TB2F)
                        ADBG (Concatenate ("SLP TB2F ", ToDecimalString (TB2F)))
                        SGOV (WFCP, (~PFCP & One))
                        ADBG ("WWAN PWR:0 Done")
                        Sleep (TFDI)
                        ADBG (Concatenate ("SLP TFDI ", ToDecimalString (TFDI)))
                    }
                    Else
                    {
                        ADBG ("Unsupported Arg0 is detected.")
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    ADBG ("WWAN MPHYPG:0 Done")
                    SPCO (WCLK, One)
                    ADBG ("WWAN SCLK:1 Done")
                    SGOV (WFCP, PFCP)
                    ADBG ("WWAN PWR:1 Done")
                    Sleep (TN2B)
                    ADBG (Concatenate ("SLP TN2B ", ToDecimalString (TN2B)))
                    SGOV (WBRS, (~PBRS & One))
                    ADBG ("WWAN RST:1 Done")
                    Sleep (TB2R)
                    ADBG (Concatenate ("SLP TB2R ", ToDecimalString (TB2R)))
                    SGOV (PRST, (~WPRP & One))
                    ADBG ("WWAN PERST:0 Done")
                    L23D ()
                    ADBG ("WWAN L23D() Done")
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Local0 = Zero
                    While (((SVID != WSID) && (Local0 < WSTO)))
                    {
                        Local0++
                        Sleep (One)
                    }

                    ADBG (Concatenate ("DET Time ", ToDecimalString (Local0)))
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    ADBG ("_RST WWAN")
                    If ((WWEN == 0x02))
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN FLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN FLDR")
                            FHRF (Zero)
                            SHRF ()
                            ADBG ("End WWAN FLDR")
                            Release (WWMT)
                            ADBG ("WWAN FLDR Mutex:Release Done")
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One) // Device Check
                        SGOV (PRST, (~WPRP & One))
                        SGOV (WBRS, (~PBRS & One))
                        Sleep (0xC8)
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x14))
                            {
                                ADBG ("FLDR TO")
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        Sleep (0x0A)
                        ADBG (Concatenate ("RVP Delay Time ", ToDecimalString (Local0)))
                        Notify (PXSX, One) // Device Check
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        ADBG ("WWAN PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        ADBG ("WWAN PR _ON")
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        ADBG ("WWAN PR _OFF")
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN PLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN PLDR")
                            FHRF (One)
                            SHRF ()
                            ADBG ("End WWAN PR _RST")
                            Release (WWMT)
                            ADBG ("WWAN PLDR Mutex: Release Done")
                            DOSV ()
                        }
                    }
                }
            }

            If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
            {
                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        WRST
                    })
                }

                Name (FDEL, Zero)
                Name (PDEL, Zero)
                Name (VDEL, Zero)
                Method (IFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x1F                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        ADBG (Concatenate ("vPro: ", CVPR))
                        Local0 = (CVPR << Zero)
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        ADBG (Concatenate ("CmdType = ", ToHexString (CMDT)))
                        ADBG (Concatenate ("CmdPayload = ", ToHexString (CMDP)))
                        If ((CMDT == One))
                        {
                            If (WIST ())
                            {
                                Return (RSTY) /* \_SB_.PC00.RP07.PXSX.RSTY */
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Get _PRR Mode = ", ^^^CNVW.RSTT))
                                Return (^^^CNVW.RSTT) /* \_SB_.PC00.CNVW.RSTT */
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((CMDT == 0x02))
                        {
                            If (WIST ())
                            {
                                Local0 = (CMDP & One)
                                RSTY = Local0
                                Local1 = (CMDP & 0x02)
                                Local1 >>= One
                                FLRC = Local1
                                Local2 = (CMDP & 0x04)
                                Local2 >>= 0x02
                                BOFC = Local2
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Set _PRR Mode = ", ToHexString (CMDP)))
                                ^^^CNVW.RSTT = CMDP /* \_SB_.PC00.RP07.PXSX.IFUN.CMDP */
                            }

                            Return (Zero)
                        }

                        If ((CMDT == 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                ADBG (Concatenate ("Get Last_PRR status PRRS = ", ToHexString (^^^CNVW.PRRS)))
                                Return (^^^CNVW.PRRS) /* \_SB_.PC00.CNVW.PRRS */
                            }
                            ElseIf (WIST ())
                            {
                                ADBG (Concatenate ("Get Last_PRR status DPRS = ", ToHexString (DPRS)))
                                Return (DPRS) /* \_SB_.PC00.RP07.PXSX.DPRS */
                            }
                        }

                        Return (Zero)
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((CRFI == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        CreateWordField (Arg3, Zero, PRTT)
                        CreateWordField (Arg3, 0x02, PRTD)
                        ADBG (Concatenate ("TimerType = ", ToHexString (PRTT)))
                        ADBG (Concatenate ("TimerDuration (ms) = ", ToDecimalString (PRTD)))
                        If ((PRTT == One))
                        {
                            FDEL = PRTD /* \_SB_.PC00.RP07.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x02))
                        {
                            PDEL = PRTD /* \_SB_.PC00.RP07.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x03))
                        {
                            VDEL = PRTD /* \_SB_.PC00.RP07.PXSX.IFUN.PRTD */
                        }
                        Else
                        {
                            ADBG ("TimerDuration not set")
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x1F                                       // ..
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Local0 = ACSD /* \ACSD */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Local0 = I5BS /* \I5BS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 = UHBS /* \UHBS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x06))
                    {
                        Local0 = AXMU /* \AXMU */
                        Local0 <<= One
                        Local0 |= AXSU /* \AXSU */
                        Local1 = AXMR /* \AXMR */
                        Local1 <<= One
                        Local1 |= AXSR /* \AXSR */
                        Local1 <<= 0x02
                        Local0 |= Local1
                        Return (Local0)
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (WFRC) /* \WFRC */
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (WFUC) /* \WFUC */
                    }

                    If ((Arg2 == 0x07))
                    {
                        Return (UNI4) /* \UNI4 */
                    }

                    If ((Arg2 == 0x08))
                    {
                        Return (WFIC) /* \WFIC */
                    }

                    If ((Arg2 == 0x09))
                    {
                        Return (WFBS) /* \WFBS */
                    }

                    If ((Arg2 == 0x0A))
                    {
                        Return (WEDT) /* \WEDT */
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((CIRM == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        Return (WF7C) /* \WF7C */
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                        {
                            If ((Arg2 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                             // .
                                })
                            }

                            If ((Arg2 == One)){}
                            If ((Arg2 == 0x02)){}
                            If ((Arg2 == 0x03))
                            {
                                If ((WRTO == One))
                                {
                                    ADBG ("WWAN Power _DSM D0/L1.2")
                                }
                                ElseIf ((WRTO == 0x02))
                                {
                                    ADBG ("WWAN Power _DSM D3/L1.2")
                                }
                                ElseIf ((WRTO == 0x03))
                                {
                                    ADBG ("WWAN Power _DSM D3/L2")
                                }
                                Else
                                {
                                    ADBG ("WWAN Power _DSM Disabled")
                                }

                                Return (WRTO) /* \WRTO */
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP08.PXSX))
    {
        Scope (_SB.PC00.RP08.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (PBNU, ^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WDCO), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            OperationRegion (VSEC, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WVHO), 0x10)
            Field (VSEC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x0C), 
                    ,   1, 
                BTIE,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                Offset (0x0D), 
                PDRC,   1
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Case (0x272B8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            If ((SVDC == One))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Case (0x080014C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                Name (RSTY, Zero)
                Name (FLRC, Zero)
                Name (BOFC, Zero)
                Name (DPRS, Zero)
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("Wifi PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("Wifi PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("Wifi PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If ((RSTY == One))
                        {
                            ADBG ("Wifi Product RST")
                            Local0 = Acquire (CNMT, 0x03E8)
                            If ((Local0 == Zero))
                            {
                                If ((FLRC == One))
                                {
                                    Local0 = DCTR /* \_SB_.PC00.RP08.PXSX.DCTR */
                                    Local0 |= 0x8000
                                    DCTR = Local0
                                    Sleep (FDEL)
                                }

                                DPRS = One
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (Zero)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = Zero
                                    }

                                    Sleep (RDLY)
                                }

                                PDRC = One
                                Sleep (VDEL)
                                SGOV (WLRT, Zero)
                                Sleep (PDEL)
                                SGOV (WLRT, One)
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (One)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = One
                                    }

                                    Sleep (RDLY)
                                }

                                DPRS = 0x02
                                Release (CNMT)
                            }
                        }
                        Else
                        {
                            ADBG ("Wifi Core RST")
                            If ((DCAP & 0x10000000))
                            {
                                Local0 = DCTR /* \_SB_.PC00.RP08.PXSX.DCTR */
                                Local0 |= 0x8000
                                DCTR = Local0
                            }

                            DPRS = One
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                    DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                    DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                    Return (SPLX) /* \_SB_.PC00.RP08.PXSX.SPLX */
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                    DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                    DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                    Return (WANX) /* \_SB_.PC00.RP08.PXSX.WANX */
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                    DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                    Return (WRDX) /* \_SB_.PC00.RP08.PXSX.WRDX */
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                    DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                    DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                    DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                    DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                    DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                    DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                    DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                    DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                    DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                    DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                    DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                    DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                    DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                    DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                    DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                    DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                    DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                    DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                    DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                    DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                    DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                    DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                    DerefOf (WRDY [One]) [0x18] = CD10 /* \CD10 */
                    DerefOf (WRDY [One]) [0x19] = CD11 /* \CD11 */
                    DerefOf (WRDY [One]) [0x1A] = CD12 /* \CD12 */
                    DerefOf (WRDY [One]) [0x1B] = CD13 /* \CD13 */
                    DerefOf (WRDY [One]) [0x1C] = CD14 /* \CD14 */
                    DerefOf (WRDY [One]) [0x1D] = CD15 /* \CD15 */
                    DerefOf (WRDY [One]) [0x1E] = CD16 /* \CD16 */
                    DerefOf (WRDY [One]) [0x1F] = CD17 /* \CD17 */
                    DerefOf (WRDY [One]) [0x20] = CD18 /* \CD18 */
                    DerefOf (WRDY [One]) [0x21] = CD19 /* \CD19 */
                    DerefOf (WRDY [One]) [0x22] = CD1A /* \CD1A */
                    DerefOf (WRDY [One]) [0x23] = CD20 /* \CD20 */
                    DerefOf (WRDY [One]) [0x24] = CD21 /* \CD21 */
                    DerefOf (WRDY [One]) [0x25] = CD22 /* \CD22 */
                    DerefOf (WRDY [One]) [0x26] = CD23 /* \CD23 */
                    DerefOf (WRDY [One]) [0x27] = CD24 /* \CD24 */
                    DerefOf (WRDY [One]) [0x28] = CD25 /* \CD25 */
                    DerefOf (WRDY [One]) [0x29] = CD26 /* \CD26 */
                    DerefOf (WRDY [One]) [0x2A] = CD27 /* \CD27 */
                    DerefOf (WRDY [One]) [0x2B] = CD28 /* \CD28 */
                    DerefOf (WRDY [One]) [0x2C] = CD29 /* \CD29 */
                    DerefOf (WRDY [One]) [0x2D] = CD2A /* \CD2A */
                    Return (WRDY) /* \_SB_.PC00.RP08.PXSX.WRDY */
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                    DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                    DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                    DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                    DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                    DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                    DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                    DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                    DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                    DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                    DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                    DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                    DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                    DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                    DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                    DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                    DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                    DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                    DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                    DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                    DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                    DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                    DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                    DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                    DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                    DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                    DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                    DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                    DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                    DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                    DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                    DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                    DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                    DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                    DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                    DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                    DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                    DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                    DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                    DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                    DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                    DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                    DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                    DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                    DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                    DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                    DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                    DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                    DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                    DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                    DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                    DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                    DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                    DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                    DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                    DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                    DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                    DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                    DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                    DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                    DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                    DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                    DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                    DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                    DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                    DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                    DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                    DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                    DerefOf (EWRY [One]) [0x45] = CD30 /* \CD30 */
                    DerefOf (EWRY [One]) [0x46] = CD31 /* \CD31 */
                    DerefOf (EWRY [One]) [0x47] = CD32 /* \CD32 */
                    DerefOf (EWRY [One]) [0x48] = CD33 /* \CD33 */
                    DerefOf (EWRY [One]) [0x49] = CD34 /* \CD34 */
                    DerefOf (EWRY [One]) [0x4A] = CD35 /* \CD35 */
                    DerefOf (EWRY [One]) [0x4B] = CD36 /* \CD36 */
                    DerefOf (EWRY [One]) [0x4C] = CD37 /* \CD37 */
                    DerefOf (EWRY [One]) [0x4D] = CD38 /* \CD38 */
                    DerefOf (EWRY [One]) [0x4E] = CD39 /* \CD39 */
                    DerefOf (EWRY [One]) [0x4F] = CD3A /* \CD3A */
                    DerefOf (EWRY [One]) [0x50] = CD3B /* \CD3B */
                    DerefOf (EWRY [One]) [0x51] = CD3C /* \CD3C */
                    DerefOf (EWRY [One]) [0x52] = CD3D /* \CD3D */
                    DerefOf (EWRY [One]) [0x53] = CD3E /* \CD3E */
                    DerefOf (EWRY [One]) [0x54] = CD3F /* \CD3F */
                    DerefOf (EWRY [One]) [0x55] = CD40 /* \CD40 */
                    DerefOf (EWRY [One]) [0x56] = CD41 /* \CD41 */
                    DerefOf (EWRY [One]) [0x57] = CD42 /* \CD42 */
                    DerefOf (EWRY [One]) [0x58] = CD43 /* \CD43 */
                    DerefOf (EWRY [One]) [0x59] = CD44 /* \CD44 */
                    DerefOf (EWRY [One]) [0x5A] = CD45 /* \CD45 */
                    DerefOf (EWRY [One]) [0x5B] = CD46 /* \CD46 */
                    DerefOf (EWRY [One]) [0x5C] = CD47 /* \CD47 */
                    DerefOf (EWRY [One]) [0x5D] = CD48 /* \CD48 */
                    DerefOf (EWRY [One]) [0x5E] = CD49 /* \CD49 */
                    DerefOf (EWRY [One]) [0x5F] = CD4A /* \CD4A */
                    DerefOf (EWRY [One]) [0x60] = CD4B /* \CD4B */
                    DerefOf (EWRY [One]) [0x61] = CD4C /* \CD4C */
                    DerefOf (EWRY [One]) [0x62] = CD4D /* \CD4D */
                    DerefOf (EWRY [One]) [0x63] = CD4E /* \CD4E */
                    DerefOf (EWRY [One]) [0x64] = CD4F /* \CD4F */
                    DerefOf (EWRY [One]) [0x65] = CD50 /* \CD50 */
                    DerefOf (EWRY [One]) [0x66] = CD51 /* \CD51 */
                    DerefOf (EWRY [One]) [0x67] = CD52 /* \CD52 */
                    DerefOf (EWRY [One]) [0x68] = CD53 /* \CD53 */
                    DerefOf (EWRY [One]) [0x69] = CD54 /* \CD54 */
                    DerefOf (EWRY [One]) [0x6A] = CD55 /* \CD55 */
                    DerefOf (EWRY [One]) [0x6B] = CD56 /* \CD56 */
                    DerefOf (EWRY [One]) [0x6C] = CD57 /* \CD57 */
                    DerefOf (EWRY [One]) [0x6D] = CD58 /* \CD58 */
                    DerefOf (EWRY [One]) [0x6E] = CD59 /* \CD59 */
                    DerefOf (EWRY [One]) [0x6F] = CD5A /* \CD5A */
                    DerefOf (EWRY [One]) [0x70] = CD5B /* \CD5B */
                    DerefOf (EWRY [One]) [0x71] = CD5C /* \CD5C */
                    DerefOf (EWRY [One]) [0x72] = CD5D /* \CD5D */
                    DerefOf (EWRY [One]) [0x73] = CD5E /* \CD5E */
                    DerefOf (EWRY [One]) [0x74] = CD5F /* \CD5F */
                    DerefOf (EWRY [One]) [0x75] = CD60 /* \CD60 */
                    DerefOf (EWRY [One]) [0x76] = CD61 /* \CD61 */
                    DerefOf (EWRY [One]) [0x77] = CD62 /* \CD62 */
                    DerefOf (EWRY [One]) [0x78] = CD63 /* \CD63 */
                    DerefOf (EWRY [One]) [0x79] = CD64 /* \CD64 */
                    DerefOf (EWRY [One]) [0x7A] = CD65 /* \CD65 */
                    DerefOf (EWRY [One]) [0x7B] = CD66 /* \CD66 */
                    DerefOf (EWRY [One]) [0x7C] = CD67 /* \CD67 */
                    DerefOf (EWRY [One]) [0x7D] = CD68 /* \CD68 */
                    DerefOf (EWRY [One]) [0x7E] = CD69 /* \CD69 */
                    DerefOf (EWRY [One]) [0x7F] = CD6A /* \CD6A */
                    DerefOf (EWRY [One]) [0x80] = CD6B /* \CD6B */
                    DerefOf (EWRY [One]) [0x81] = CD6C /* \CD6C */
                    DerefOf (EWRY [One]) [0x82] = CD6D /* \CD6D */
                    DerefOf (EWRY [One]) [0x83] = CD6E /* \CD6E */
                    DerefOf (EWRY [One]) [0x84] = CD6F /* \CD6F */
                    DerefOf (EWRY [One]) [0x85] = CD70 /* \CD70 */
                    DerefOf (EWRY [One]) [0x86] = CD71 /* \CD71 */
                    Return (EWRY) /* \_SB_.PC00.RP08.PXSX.EWRY */
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    DerefOf (WGDY [One]) [One] = SDGN /* \SDGN */
                    DerefOf (WGDY [One]) [0x02] = SD11 /* \SD11 */
                    DerefOf (WGDY [One]) [0x03] = SD12 /* \SD12 */
                    DerefOf (WGDY [One]) [0x04] = SD13 /* \SD13 */
                    DerefOf (WGDY [One]) [0x05] = SD14 /* \SD14 */
                    DerefOf (WGDY [One]) [0x06] = SD15 /* \SD15 */
                    DerefOf (WGDY [One]) [0x07] = SD16 /* \SD16 */
                    DerefOf (WGDY [One]) [0x08] = SD17 /* \SD17 */
                    DerefOf (WGDY [One]) [0x09] = SD18 /* \SD18 */
                    DerefOf (WGDY [One]) [0x0A] = SD19 /* \SD19 */
                    DerefOf (WGDY [One]) [0x0B] = SD21 /* \SD21 */
                    DerefOf (WGDY [One]) [0x0C] = SD22 /* \SD22 */
                    DerefOf (WGDY [One]) [0x0D] = SD23 /* \SD23 */
                    DerefOf (WGDY [One]) [0x0E] = SD24 /* \SD24 */
                    DerefOf (WGDY [One]) [0x0F] = SD25 /* \SD25 */
                    DerefOf (WGDY [One]) [0x10] = SD26 /* \SD26 */
                    DerefOf (WGDY [One]) [0x11] = SD27 /* \SD27 */
                    DerefOf (WGDY [One]) [0x12] = SD28 /* \SD28 */
                    DerefOf (WGDY [One]) [0x13] = SD29 /* \SD29 */
                    DerefOf (WGDY [One]) [0x14] = SD31 /* \SD31 */
                    DerefOf (WGDY [One]) [0x15] = SD32 /* \SD32 */
                    DerefOf (WGDY [One]) [0x16] = SD33 /* \SD33 */
                    DerefOf (WGDY [One]) [0x17] = SD34 /* \SD34 */
                    DerefOf (WGDY [One]) [0x18] = SD35 /* \SD35 */
                    DerefOf (WGDY [One]) [0x19] = SD36 /* \SD36 */
                    DerefOf (WGDY [One]) [0x1A] = SD37 /* \SD37 */
                    DerefOf (WGDY [One]) [0x1B] = SD38 /* \SD38 */
                    DerefOf (WGDY [One]) [0x1C] = SD39 /* \SD39 */
                    DerefOf (WGDY [One]) [0x1D] = SD41 /* \SD41 */
                    DerefOf (WGDY [One]) [0x1E] = SD42 /* \SD42 */
                    DerefOf (WGDY [One]) [0x1F] = SD43 /* \SD43 */
                    DerefOf (WGDY [One]) [0x20] = SD44 /* \SD44 */
                    DerefOf (WGDY [One]) [0x21] = SD45 /* \SD45 */
                    DerefOf (WGDY [One]) [0x22] = SD46 /* \SD46 */
                    DerefOf (WGDY [One]) [0x23] = SD47 /* \SD47 */
                    DerefOf (WGDY [One]) [0x24] = SD48 /* \SD48 */
                    DerefOf (WGDY [One]) [0x25] = SD49 /* \SD49 */
                    DerefOf (WGDY [One]) [0x26] = SD51 /* \SD51 */
                    DerefOf (WGDY [One]) [0x27] = SD52 /* \SD52 */
                    DerefOf (WGDY [One]) [0x28] = SD53 /* \SD53 */
                    DerefOf (WGDY [One]) [0x29] = SD54 /* \SD54 */
                    DerefOf (WGDY [One]) [0x2A] = SD55 /* \SD55 */
                    DerefOf (WGDY [One]) [0x2B] = SD56 /* \SD56 */
                    DerefOf (WGDY [One]) [0x2C] = SD57 /* \SD57 */
                    DerefOf (WGDY [One]) [0x2D] = SD58 /* \SD58 */
                    DerefOf (WGDY [One]) [0x2E] = SD59 /* \SD59 */
                    DerefOf (WGDY [One]) [0x2F] = SD61 /* \SD61 */
                    DerefOf (WGDY [One]) [0x30] = SD62 /* \SD62 */
                    DerefOf (WGDY [One]) [0x31] = SD63 /* \SD63 */
                    DerefOf (WGDY [One]) [0x32] = SD64 /* \SD64 */
                    DerefOf (WGDY [One]) [0x33] = SD65 /* \SD65 */
                    DerefOf (WGDY [One]) [0x34] = SD66 /* \SD66 */
                    DerefOf (WGDY [One]) [0x35] = SD67 /* \SD67 */
                    DerefOf (WGDY [One]) [0x36] = SD68 /* \SD68 */
                    DerefOf (WGDY [One]) [0x37] = SD69 /* \SD69 */
                    DerefOf (WGDY [One]) [0x38] = SD71 /* \SD71 */
                    DerefOf (WGDY [One]) [0x39] = SD72 /* \SD72 */
                    DerefOf (WGDY [One]) [0x3A] = SD73 /* \SD73 */
                    DerefOf (WGDY [One]) [0x3B] = SD74 /* \SD74 */
                    DerefOf (WGDY [One]) [0x3C] = SD75 /* \SD75 */
                    DerefOf (WGDY [One]) [0x3D] = SD76 /* \SD76 */
                    DerefOf (WGDY [One]) [0x3E] = SD77 /* \SD77 */
                    DerefOf (WGDY [One]) [0x3F] = SD78 /* \SD78 */
                    DerefOf (WGDY [One]) [0x40] = SD79 /* \SD79 */
                    DerefOf (WGDY [One]) [0x41] = SD81 /* \SD81 */
                    DerefOf (WGDY [One]) [0x42] = SD82 /* \SD82 */
                    DerefOf (WGDY [One]) [0x43] = SD83 /* \SD83 */
                    DerefOf (WGDY [One]) [0x44] = SD84 /* \SD84 */
                    DerefOf (WGDY [One]) [0x45] = SD85 /* \SD85 */
                    DerefOf (WGDY [One]) [0x46] = SD86 /* \SD86 */
                    DerefOf (WGDY [One]) [0x47] = SD87 /* \SD87 */
                    DerefOf (WGDY [One]) [0x48] = SD88 /* \SD88 */
                    DerefOf (WGDY [One]) [0x49] = SD89 /* \SD89 */
                    Return (WGDY) /* \_SB_.PC00.RP08.PXSX.WGDY */
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                    Return (ECKY) /* \_SB_.PC00.RP08.PXSX.ECKY */
                }

                Name (PPAY, Package (0x02)
                {
                    0x02, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    DerefOf (PPAY [One]) [One] = WAGM /* \WAGM */
                    DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                    DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                    DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                    DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                    DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                    DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                    DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                    DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                    DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                    DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                    DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                    DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                    DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                    DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                    DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                    DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                    DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                    DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                    DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                    DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                    DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                    DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                    Return (PPAY) /* \_SB_.PC00.RP08.PXSX.PPAY */
                }

                Name (WPFY, Package (0x02)
                {
                    Zero, 
                    Package (0x05)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WPFC, 0, Serialized)
                {
                    DerefOf (WPFY [One]) [One] = WPFA /* \WPFA */
                    DerefOf (WPFY [One]) [0x02] = WPFB /* \WPFB */
                    DerefOf (WPFY [One]) [0x03] = \WPFC
                    DerefOf (WPFY [One]) [0x04] = WPFD /* \WPFD */
                    Return (WPFY) /* \_SB_.PC00.RP08.PXSX.WPFY */
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    DerefOf (WTSY [One]) [One] = WTSE /* \WTSE */
                    DerefOf (WTSY [One]) [0x02] = WTLE /* \WTLE */
                    DerefOf (WTSY [One]) [0x03] = BL01 /* \BL01 */
                    DerefOf (WTSY [One]) [0x04] = BL02 /* \BL02 */
                    DerefOf (WTSY [One]) [0x05] = BL03 /* \BL03 */
                    DerefOf (WTSY [One]) [0x06] = BL04 /* \BL04 */
                    DerefOf (WTSY [One]) [0x07] = BL05 /* \BL05 */
                    DerefOf (WTSY [One]) [0x08] = BL06 /* \BL06 */
                    DerefOf (WTSY [One]) [0x09] = BL07 /* \BL07 */
                    DerefOf (WTSY [One]) [0x0A] = BL08 /* \BL08 */
                    DerefOf (WTSY [One]) [0x0B] = BL09 /* \BL09 */
                    DerefOf (WTSY [One]) [0x0C] = BL10 /* \BL10 */
                    DerefOf (WTSY [One]) [0x0D] = BL11 /* \BL11 */
                    DerefOf (WTSY [One]) [0x0E] = BL12 /* \BL12 */
                    DerefOf (WTSY [One]) [0x0F] = BL13 /* \BL13 */
                    DerefOf (WTSY [One]) [0x10] = BL14 /* \BL14 */
                    DerefOf (WTSY [One]) [0x11] = BL15 /* \BL15 */
                    DerefOf (WTSY [One]) [0x12] = BL16 /* \BL16 */
                    Return (WTSY) /* \_SB_.PC00.RP08.PXSX.WTSY */
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    DerefOf (WAIY [One]) [One] = WLBI /* \WLBI */
                    DerefOf (WAIY [One]) [0x02] = WHBI /* \WHBI */
                    Return (WAIY) /* \_SB_.PC00.RP08.PXSX.WAIY */
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PC00.RP08.PXSX.SADX */
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PC00.RP08.PXSX.GPCX */
                }

                Name (GLAX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Zero
                    }
                })
                Method (GLAI, 0, Serialized)
                {
                    ADBG (Concatenate ("AR: GLAI method. CGLS = ", ToHexString (CGLS)))
                    DerefOf (GLAX [One]) [One] = CGLS /* \CGLS */
                    DerefOf (GLAX [0x02]) [One] = CGLS /* \CGLS */
                    Return (GLAX) /* \_SB_.PC00.RP08.PXSX.GLAX */
                }
            }

            If (((WWEN != Zero) && (WWRP == SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If ((GGOV (PRST) != WPRP))
                    {
                        DL23 ()
                        ADBG ("WWAN DL23() Done")
                        SGOV (PRST, WPRP)
                        ADBG ("WWAN PERST:0 Done")
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    ADBG ("WWAN RST:0 Done")
                    If ((Arg0 == Zero))
                    {
                        Sleep (TBTG)
                        ADBG (Concatenate ("SLP TBTG ", ToDecimalString (TBTG)))
                    }
                    ElseIf ((Arg0 == One))
                    {
                        SPCO (WCLK, Zero)
                        ADBG ("WWAN SCLK:0 Done")
                        Sleep (TB2F)
                        ADBG (Concatenate ("SLP TB2F ", ToDecimalString (TB2F)))
                        SGOV (WFCP, (~PFCP & One))
                        ADBG ("WWAN PWR:0 Done")
                        Sleep (TFDI)
                        ADBG (Concatenate ("SLP TFDI ", ToDecimalString (TFDI)))
                    }
                    Else
                    {
                        ADBG ("Unsupported Arg0 is detected.")
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    ADBG ("WWAN MPHYPG:0 Done")
                    SPCO (WCLK, One)
                    ADBG ("WWAN SCLK:1 Done")
                    SGOV (WFCP, PFCP)
                    ADBG ("WWAN PWR:1 Done")
                    Sleep (TN2B)
                    ADBG (Concatenate ("SLP TN2B ", ToDecimalString (TN2B)))
                    SGOV (WBRS, (~PBRS & One))
                    ADBG ("WWAN RST:1 Done")
                    Sleep (TB2R)
                    ADBG (Concatenate ("SLP TB2R ", ToDecimalString (TB2R)))
                    SGOV (PRST, (~WPRP & One))
                    ADBG ("WWAN PERST:0 Done")
                    L23D ()
                    ADBG ("WWAN L23D() Done")
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Local0 = Zero
                    While (((SVID != WSID) && (Local0 < WSTO)))
                    {
                        Local0++
                        Sleep (One)
                    }

                    ADBG (Concatenate ("DET Time ", ToDecimalString (Local0)))
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    ADBG ("_RST WWAN")
                    If ((WWEN == 0x02))
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN FLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN FLDR")
                            FHRF (Zero)
                            SHRF ()
                            ADBG ("End WWAN FLDR")
                            Release (WWMT)
                            ADBG ("WWAN FLDR Mutex:Release Done")
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One) // Device Check
                        SGOV (PRST, (~WPRP & One))
                        SGOV (WBRS, (~PBRS & One))
                        Sleep (0xC8)
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x14))
                            {
                                ADBG ("FLDR TO")
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        Sleep (0x0A)
                        ADBG (Concatenate ("RVP Delay Time ", ToDecimalString (Local0)))
                        Notify (PXSX, One) // Device Check
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        ADBG ("WWAN PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        ADBG ("WWAN PR _ON")
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        ADBG ("WWAN PR _OFF")
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN PLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN PLDR")
                            FHRF (One)
                            SHRF ()
                            ADBG ("End WWAN PR _RST")
                            Release (WWMT)
                            ADBG ("WWAN PLDR Mutex: Release Done")
                            DOSV ()
                        }
                    }
                }
            }

            If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
            {
                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        WRST
                    })
                }

                Name (FDEL, Zero)
                Name (PDEL, Zero)
                Name (VDEL, Zero)
                Method (IFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x1F                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        ADBG (Concatenate ("vPro: ", CVPR))
                        Local0 = (CVPR << Zero)
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        ADBG (Concatenate ("CmdType = ", ToHexString (CMDT)))
                        ADBG (Concatenate ("CmdPayload = ", ToHexString (CMDP)))
                        If ((CMDT == One))
                        {
                            If (WIST ())
                            {
                                Return (RSTY) /* \_SB_.PC00.RP08.PXSX.RSTY */
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Get _PRR Mode = ", ^^^CNVW.RSTT))
                                Return (^^^CNVW.RSTT) /* \_SB_.PC00.CNVW.RSTT */
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((CMDT == 0x02))
                        {
                            If (WIST ())
                            {
                                Local0 = (CMDP & One)
                                RSTY = Local0
                                Local1 = (CMDP & 0x02)
                                Local1 >>= One
                                FLRC = Local1
                                Local2 = (CMDP & 0x04)
                                Local2 >>= 0x02
                                BOFC = Local2
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Set _PRR Mode = ", ToHexString (CMDP)))
                                ^^^CNVW.RSTT = CMDP /* \_SB_.PC00.RP08.PXSX.IFUN.CMDP */
                            }

                            Return (Zero)
                        }

                        If ((CMDT == 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                ADBG (Concatenate ("Get Last_PRR status PRRS = ", ToHexString (^^^CNVW.PRRS)))
                                Return (^^^CNVW.PRRS) /* \_SB_.PC00.CNVW.PRRS */
                            }
                            ElseIf (WIST ())
                            {
                                ADBG (Concatenate ("Get Last_PRR status DPRS = ", ToHexString (DPRS)))
                                Return (DPRS) /* \_SB_.PC00.RP08.PXSX.DPRS */
                            }
                        }

                        Return (Zero)
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((CRFI == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        CreateWordField (Arg3, Zero, PRTT)
                        CreateWordField (Arg3, 0x02, PRTD)
                        ADBG (Concatenate ("TimerType = ", ToHexString (PRTT)))
                        ADBG (Concatenate ("TimerDuration (ms) = ", ToDecimalString (PRTD)))
                        If ((PRTT == One))
                        {
                            FDEL = PRTD /* \_SB_.PC00.RP08.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x02))
                        {
                            PDEL = PRTD /* \_SB_.PC00.RP08.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x03))
                        {
                            VDEL = PRTD /* \_SB_.PC00.RP08.PXSX.IFUN.PRTD */
                        }
                        Else
                        {
                            ADBG ("TimerDuration not set")
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x1F                                       // ..
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Local0 = ACSD /* \ACSD */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Local0 = I5BS /* \I5BS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 = UHBS /* \UHBS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x06))
                    {
                        Local0 = AXMU /* \AXMU */
                        Local0 <<= One
                        Local0 |= AXSU /* \AXSU */
                        Local1 = AXMR /* \AXMR */
                        Local1 <<= One
                        Local1 |= AXSR /* \AXSR */
                        Local1 <<= 0x02
                        Local0 |= Local1
                        Return (Local0)
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (WFRC) /* \WFRC */
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (WFUC) /* \WFUC */
                    }

                    If ((Arg2 == 0x07))
                    {
                        Return (UNI4) /* \UNI4 */
                    }

                    If ((Arg2 == 0x08))
                    {
                        Return (WFIC) /* \WFIC */
                    }

                    If ((Arg2 == 0x09))
                    {
                        Return (WFBS) /* \WFBS */
                    }

                    If ((Arg2 == 0x0A))
                    {
                        Return (WEDT) /* \WEDT */
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((CIRM == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        Return (WF7C) /* \WF7C */
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                        {
                            If ((Arg2 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                             // .
                                })
                            }

                            If ((Arg2 == One)){}
                            If ((Arg2 == 0x02)){}
                            If ((Arg2 == 0x03))
                            {
                                If ((WRTO == One))
                                {
                                    ADBG ("WWAN Power _DSM D0/L1.2")
                                }
                                ElseIf ((WRTO == 0x02))
                                {
                                    ADBG ("WWAN Power _DSM D3/L1.2")
                                }
                                ElseIf ((WRTO == 0x03))
                                {
                                    ADBG ("WWAN Power _DSM D3/L2")
                                }
                                Else
                                {
                                    ADBG ("WWAN Power _DSM Disabled")
                                }

                                Return (WRTO) /* \WRTO */
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP09.PXSX))
    {
        Scope (_SB.PC00.RP09.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (PBNU, ^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WDCO), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            OperationRegion (VSEC, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WVHO), 0x10)
            Field (VSEC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x0C), 
                    ,   1, 
                BTIE,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                Offset (0x0D), 
                PDRC,   1
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Case (0x272B8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            If ((SVDC == One))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Case (0x080014C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                Name (RSTY, Zero)
                Name (FLRC, Zero)
                Name (BOFC, Zero)
                Name (DPRS, Zero)
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("Wifi PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("Wifi PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("Wifi PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If ((RSTY == One))
                        {
                            ADBG ("Wifi Product RST")
                            Local0 = Acquire (CNMT, 0x03E8)
                            If ((Local0 == Zero))
                            {
                                If ((FLRC == One))
                                {
                                    Local0 = DCTR /* \_SB_.PC00.RP09.PXSX.DCTR */
                                    Local0 |= 0x8000
                                    DCTR = Local0
                                    Sleep (FDEL)
                                }

                                DPRS = One
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (Zero)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = Zero
                                    }

                                    Sleep (RDLY)
                                }

                                PDRC = One
                                Sleep (VDEL)
                                SGOV (WLRT, Zero)
                                Sleep (PDEL)
                                SGOV (WLRT, One)
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (One)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = One
                                    }

                                    Sleep (RDLY)
                                }

                                DPRS = 0x02
                                Release (CNMT)
                            }
                        }
                        Else
                        {
                            ADBG ("Wifi Core RST")
                            If ((DCAP & 0x10000000))
                            {
                                Local0 = DCTR /* \_SB_.PC00.RP09.PXSX.DCTR */
                                Local0 |= 0x8000
                                DCTR = Local0
                            }

                            DPRS = One
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                    DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                    DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                    Return (SPLX) /* \_SB_.PC00.RP09.PXSX.SPLX */
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                    DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                    DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                    Return (WANX) /* \_SB_.PC00.RP09.PXSX.WANX */
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                    DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                    Return (WRDX) /* \_SB_.PC00.RP09.PXSX.WRDX */
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                    DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                    DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                    DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                    DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                    DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                    DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                    DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                    DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                    DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                    DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                    DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                    DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                    DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                    DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                    DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                    DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                    DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                    DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                    DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                    DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                    DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                    DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                    DerefOf (WRDY [One]) [0x18] = CD10 /* \CD10 */
                    DerefOf (WRDY [One]) [0x19] = CD11 /* \CD11 */
                    DerefOf (WRDY [One]) [0x1A] = CD12 /* \CD12 */
                    DerefOf (WRDY [One]) [0x1B] = CD13 /* \CD13 */
                    DerefOf (WRDY [One]) [0x1C] = CD14 /* \CD14 */
                    DerefOf (WRDY [One]) [0x1D] = CD15 /* \CD15 */
                    DerefOf (WRDY [One]) [0x1E] = CD16 /* \CD16 */
                    DerefOf (WRDY [One]) [0x1F] = CD17 /* \CD17 */
                    DerefOf (WRDY [One]) [0x20] = CD18 /* \CD18 */
                    DerefOf (WRDY [One]) [0x21] = CD19 /* \CD19 */
                    DerefOf (WRDY [One]) [0x22] = CD1A /* \CD1A */
                    DerefOf (WRDY [One]) [0x23] = CD20 /* \CD20 */
                    DerefOf (WRDY [One]) [0x24] = CD21 /* \CD21 */
                    DerefOf (WRDY [One]) [0x25] = CD22 /* \CD22 */
                    DerefOf (WRDY [One]) [0x26] = CD23 /* \CD23 */
                    DerefOf (WRDY [One]) [0x27] = CD24 /* \CD24 */
                    DerefOf (WRDY [One]) [0x28] = CD25 /* \CD25 */
                    DerefOf (WRDY [One]) [0x29] = CD26 /* \CD26 */
                    DerefOf (WRDY [One]) [0x2A] = CD27 /* \CD27 */
                    DerefOf (WRDY [One]) [0x2B] = CD28 /* \CD28 */
                    DerefOf (WRDY [One]) [0x2C] = CD29 /* \CD29 */
                    DerefOf (WRDY [One]) [0x2D] = CD2A /* \CD2A */
                    Return (WRDY) /* \_SB_.PC00.RP09.PXSX.WRDY */
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                    DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                    DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                    DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                    DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                    DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                    DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                    DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                    DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                    DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                    DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                    DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                    DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                    DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                    DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                    DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                    DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                    DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                    DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                    DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                    DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                    DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                    DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                    DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                    DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                    DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                    DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                    DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                    DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                    DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                    DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                    DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                    DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                    DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                    DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                    DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                    DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                    DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                    DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                    DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                    DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                    DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                    DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                    DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                    DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                    DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                    DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                    DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                    DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                    DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                    DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                    DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                    DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                    DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                    DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                    DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                    DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                    DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                    DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                    DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                    DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                    DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                    DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                    DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                    DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                    DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                    DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                    DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                    DerefOf (EWRY [One]) [0x45] = CD30 /* \CD30 */
                    DerefOf (EWRY [One]) [0x46] = CD31 /* \CD31 */
                    DerefOf (EWRY [One]) [0x47] = CD32 /* \CD32 */
                    DerefOf (EWRY [One]) [0x48] = CD33 /* \CD33 */
                    DerefOf (EWRY [One]) [0x49] = CD34 /* \CD34 */
                    DerefOf (EWRY [One]) [0x4A] = CD35 /* \CD35 */
                    DerefOf (EWRY [One]) [0x4B] = CD36 /* \CD36 */
                    DerefOf (EWRY [One]) [0x4C] = CD37 /* \CD37 */
                    DerefOf (EWRY [One]) [0x4D] = CD38 /* \CD38 */
                    DerefOf (EWRY [One]) [0x4E] = CD39 /* \CD39 */
                    DerefOf (EWRY [One]) [0x4F] = CD3A /* \CD3A */
                    DerefOf (EWRY [One]) [0x50] = CD3B /* \CD3B */
                    DerefOf (EWRY [One]) [0x51] = CD3C /* \CD3C */
                    DerefOf (EWRY [One]) [0x52] = CD3D /* \CD3D */
                    DerefOf (EWRY [One]) [0x53] = CD3E /* \CD3E */
                    DerefOf (EWRY [One]) [0x54] = CD3F /* \CD3F */
                    DerefOf (EWRY [One]) [0x55] = CD40 /* \CD40 */
                    DerefOf (EWRY [One]) [0x56] = CD41 /* \CD41 */
                    DerefOf (EWRY [One]) [0x57] = CD42 /* \CD42 */
                    DerefOf (EWRY [One]) [0x58] = CD43 /* \CD43 */
                    DerefOf (EWRY [One]) [0x59] = CD44 /* \CD44 */
                    DerefOf (EWRY [One]) [0x5A] = CD45 /* \CD45 */
                    DerefOf (EWRY [One]) [0x5B] = CD46 /* \CD46 */
                    DerefOf (EWRY [One]) [0x5C] = CD47 /* \CD47 */
                    DerefOf (EWRY [One]) [0x5D] = CD48 /* \CD48 */
                    DerefOf (EWRY [One]) [0x5E] = CD49 /* \CD49 */
                    DerefOf (EWRY [One]) [0x5F] = CD4A /* \CD4A */
                    DerefOf (EWRY [One]) [0x60] = CD4B /* \CD4B */
                    DerefOf (EWRY [One]) [0x61] = CD4C /* \CD4C */
                    DerefOf (EWRY [One]) [0x62] = CD4D /* \CD4D */
                    DerefOf (EWRY [One]) [0x63] = CD4E /* \CD4E */
                    DerefOf (EWRY [One]) [0x64] = CD4F /* \CD4F */
                    DerefOf (EWRY [One]) [0x65] = CD50 /* \CD50 */
                    DerefOf (EWRY [One]) [0x66] = CD51 /* \CD51 */
                    DerefOf (EWRY [One]) [0x67] = CD52 /* \CD52 */
                    DerefOf (EWRY [One]) [0x68] = CD53 /* \CD53 */
                    DerefOf (EWRY [One]) [0x69] = CD54 /* \CD54 */
                    DerefOf (EWRY [One]) [0x6A] = CD55 /* \CD55 */
                    DerefOf (EWRY [One]) [0x6B] = CD56 /* \CD56 */
                    DerefOf (EWRY [One]) [0x6C] = CD57 /* \CD57 */
                    DerefOf (EWRY [One]) [0x6D] = CD58 /* \CD58 */
                    DerefOf (EWRY [One]) [0x6E] = CD59 /* \CD59 */
                    DerefOf (EWRY [One]) [0x6F] = CD5A /* \CD5A */
                    DerefOf (EWRY [One]) [0x70] = CD5B /* \CD5B */
                    DerefOf (EWRY [One]) [0x71] = CD5C /* \CD5C */
                    DerefOf (EWRY [One]) [0x72] = CD5D /* \CD5D */
                    DerefOf (EWRY [One]) [0x73] = CD5E /* \CD5E */
                    DerefOf (EWRY [One]) [0x74] = CD5F /* \CD5F */
                    DerefOf (EWRY [One]) [0x75] = CD60 /* \CD60 */
                    DerefOf (EWRY [One]) [0x76] = CD61 /* \CD61 */
                    DerefOf (EWRY [One]) [0x77] = CD62 /* \CD62 */
                    DerefOf (EWRY [One]) [0x78] = CD63 /* \CD63 */
                    DerefOf (EWRY [One]) [0x79] = CD64 /* \CD64 */
                    DerefOf (EWRY [One]) [0x7A] = CD65 /* \CD65 */
                    DerefOf (EWRY [One]) [0x7B] = CD66 /* \CD66 */
                    DerefOf (EWRY [One]) [0x7C] = CD67 /* \CD67 */
                    DerefOf (EWRY [One]) [0x7D] = CD68 /* \CD68 */
                    DerefOf (EWRY [One]) [0x7E] = CD69 /* \CD69 */
                    DerefOf (EWRY [One]) [0x7F] = CD6A /* \CD6A */
                    DerefOf (EWRY [One]) [0x80] = CD6B /* \CD6B */
                    DerefOf (EWRY [One]) [0x81] = CD6C /* \CD6C */
                    DerefOf (EWRY [One]) [0x82] = CD6D /* \CD6D */
                    DerefOf (EWRY [One]) [0x83] = CD6E /* \CD6E */
                    DerefOf (EWRY [One]) [0x84] = CD6F /* \CD6F */
                    DerefOf (EWRY [One]) [0x85] = CD70 /* \CD70 */
                    DerefOf (EWRY [One]) [0x86] = CD71 /* \CD71 */
                    Return (EWRY) /* \_SB_.PC00.RP09.PXSX.EWRY */
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    DerefOf (WGDY [One]) [One] = SDGN /* \SDGN */
                    DerefOf (WGDY [One]) [0x02] = SD11 /* \SD11 */
                    DerefOf (WGDY [One]) [0x03] = SD12 /* \SD12 */
                    DerefOf (WGDY [One]) [0x04] = SD13 /* \SD13 */
                    DerefOf (WGDY [One]) [0x05] = SD14 /* \SD14 */
                    DerefOf (WGDY [One]) [0x06] = SD15 /* \SD15 */
                    DerefOf (WGDY [One]) [0x07] = SD16 /* \SD16 */
                    DerefOf (WGDY [One]) [0x08] = SD17 /* \SD17 */
                    DerefOf (WGDY [One]) [0x09] = SD18 /* \SD18 */
                    DerefOf (WGDY [One]) [0x0A] = SD19 /* \SD19 */
                    DerefOf (WGDY [One]) [0x0B] = SD21 /* \SD21 */
                    DerefOf (WGDY [One]) [0x0C] = SD22 /* \SD22 */
                    DerefOf (WGDY [One]) [0x0D] = SD23 /* \SD23 */
                    DerefOf (WGDY [One]) [0x0E] = SD24 /* \SD24 */
                    DerefOf (WGDY [One]) [0x0F] = SD25 /* \SD25 */
                    DerefOf (WGDY [One]) [0x10] = SD26 /* \SD26 */
                    DerefOf (WGDY [One]) [0x11] = SD27 /* \SD27 */
                    DerefOf (WGDY [One]) [0x12] = SD28 /* \SD28 */
                    DerefOf (WGDY [One]) [0x13] = SD29 /* \SD29 */
                    DerefOf (WGDY [One]) [0x14] = SD31 /* \SD31 */
                    DerefOf (WGDY [One]) [0x15] = SD32 /* \SD32 */
                    DerefOf (WGDY [One]) [0x16] = SD33 /* \SD33 */
                    DerefOf (WGDY [One]) [0x17] = SD34 /* \SD34 */
                    DerefOf (WGDY [One]) [0x18] = SD35 /* \SD35 */
                    DerefOf (WGDY [One]) [0x19] = SD36 /* \SD36 */
                    DerefOf (WGDY [One]) [0x1A] = SD37 /* \SD37 */
                    DerefOf (WGDY [One]) [0x1B] = SD38 /* \SD38 */
                    DerefOf (WGDY [One]) [0x1C] = SD39 /* \SD39 */
                    DerefOf (WGDY [One]) [0x1D] = SD41 /* \SD41 */
                    DerefOf (WGDY [One]) [0x1E] = SD42 /* \SD42 */
                    DerefOf (WGDY [One]) [0x1F] = SD43 /* \SD43 */
                    DerefOf (WGDY [One]) [0x20] = SD44 /* \SD44 */
                    DerefOf (WGDY [One]) [0x21] = SD45 /* \SD45 */
                    DerefOf (WGDY [One]) [0x22] = SD46 /* \SD46 */
                    DerefOf (WGDY [One]) [0x23] = SD47 /* \SD47 */
                    DerefOf (WGDY [One]) [0x24] = SD48 /* \SD48 */
                    DerefOf (WGDY [One]) [0x25] = SD49 /* \SD49 */
                    DerefOf (WGDY [One]) [0x26] = SD51 /* \SD51 */
                    DerefOf (WGDY [One]) [0x27] = SD52 /* \SD52 */
                    DerefOf (WGDY [One]) [0x28] = SD53 /* \SD53 */
                    DerefOf (WGDY [One]) [0x29] = SD54 /* \SD54 */
                    DerefOf (WGDY [One]) [0x2A] = SD55 /* \SD55 */
                    DerefOf (WGDY [One]) [0x2B] = SD56 /* \SD56 */
                    DerefOf (WGDY [One]) [0x2C] = SD57 /* \SD57 */
                    DerefOf (WGDY [One]) [0x2D] = SD58 /* \SD58 */
                    DerefOf (WGDY [One]) [0x2E] = SD59 /* \SD59 */
                    DerefOf (WGDY [One]) [0x2F] = SD61 /* \SD61 */
                    DerefOf (WGDY [One]) [0x30] = SD62 /* \SD62 */
                    DerefOf (WGDY [One]) [0x31] = SD63 /* \SD63 */
                    DerefOf (WGDY [One]) [0x32] = SD64 /* \SD64 */
                    DerefOf (WGDY [One]) [0x33] = SD65 /* \SD65 */
                    DerefOf (WGDY [One]) [0x34] = SD66 /* \SD66 */
                    DerefOf (WGDY [One]) [0x35] = SD67 /* \SD67 */
                    DerefOf (WGDY [One]) [0x36] = SD68 /* \SD68 */
                    DerefOf (WGDY [One]) [0x37] = SD69 /* \SD69 */
                    DerefOf (WGDY [One]) [0x38] = SD71 /* \SD71 */
                    DerefOf (WGDY [One]) [0x39] = SD72 /* \SD72 */
                    DerefOf (WGDY [One]) [0x3A] = SD73 /* \SD73 */
                    DerefOf (WGDY [One]) [0x3B] = SD74 /* \SD74 */
                    DerefOf (WGDY [One]) [0x3C] = SD75 /* \SD75 */
                    DerefOf (WGDY [One]) [0x3D] = SD76 /* \SD76 */
                    DerefOf (WGDY [One]) [0x3E] = SD77 /* \SD77 */
                    DerefOf (WGDY [One]) [0x3F] = SD78 /* \SD78 */
                    DerefOf (WGDY [One]) [0x40] = SD79 /* \SD79 */
                    DerefOf (WGDY [One]) [0x41] = SD81 /* \SD81 */
                    DerefOf (WGDY [One]) [0x42] = SD82 /* \SD82 */
                    DerefOf (WGDY [One]) [0x43] = SD83 /* \SD83 */
                    DerefOf (WGDY [One]) [0x44] = SD84 /* \SD84 */
                    DerefOf (WGDY [One]) [0x45] = SD85 /* \SD85 */
                    DerefOf (WGDY [One]) [0x46] = SD86 /* \SD86 */
                    DerefOf (WGDY [One]) [0x47] = SD87 /* \SD87 */
                    DerefOf (WGDY [One]) [0x48] = SD88 /* \SD88 */
                    DerefOf (WGDY [One]) [0x49] = SD89 /* \SD89 */
                    Return (WGDY) /* \_SB_.PC00.RP09.PXSX.WGDY */
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                    Return (ECKY) /* \_SB_.PC00.RP09.PXSX.ECKY */
                }

                Name (PPAY, Package (0x02)
                {
                    0x02, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    DerefOf (PPAY [One]) [One] = WAGM /* \WAGM */
                    DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                    DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                    DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                    DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                    DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                    DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                    DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                    DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                    DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                    DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                    DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                    DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                    DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                    DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                    DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                    DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                    DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                    DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                    DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                    DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                    DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                    DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                    Return (PPAY) /* \_SB_.PC00.RP09.PXSX.PPAY */
                }

                Name (WPFY, Package (0x02)
                {
                    Zero, 
                    Package (0x05)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WPFC, 0, Serialized)
                {
                    DerefOf (WPFY [One]) [One] = WPFA /* \WPFA */
                    DerefOf (WPFY [One]) [0x02] = WPFB /* \WPFB */
                    DerefOf (WPFY [One]) [0x03] = \WPFC
                    DerefOf (WPFY [One]) [0x04] = WPFD /* \WPFD */
                    Return (WPFY) /* \_SB_.PC00.RP09.PXSX.WPFY */
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    DerefOf (WTSY [One]) [One] = WTSE /* \WTSE */
                    DerefOf (WTSY [One]) [0x02] = WTLE /* \WTLE */
                    DerefOf (WTSY [One]) [0x03] = BL01 /* \BL01 */
                    DerefOf (WTSY [One]) [0x04] = BL02 /* \BL02 */
                    DerefOf (WTSY [One]) [0x05] = BL03 /* \BL03 */
                    DerefOf (WTSY [One]) [0x06] = BL04 /* \BL04 */
                    DerefOf (WTSY [One]) [0x07] = BL05 /* \BL05 */
                    DerefOf (WTSY [One]) [0x08] = BL06 /* \BL06 */
                    DerefOf (WTSY [One]) [0x09] = BL07 /* \BL07 */
                    DerefOf (WTSY [One]) [0x0A] = BL08 /* \BL08 */
                    DerefOf (WTSY [One]) [0x0B] = BL09 /* \BL09 */
                    DerefOf (WTSY [One]) [0x0C] = BL10 /* \BL10 */
                    DerefOf (WTSY [One]) [0x0D] = BL11 /* \BL11 */
                    DerefOf (WTSY [One]) [0x0E] = BL12 /* \BL12 */
                    DerefOf (WTSY [One]) [0x0F] = BL13 /* \BL13 */
                    DerefOf (WTSY [One]) [0x10] = BL14 /* \BL14 */
                    DerefOf (WTSY [One]) [0x11] = BL15 /* \BL15 */
                    DerefOf (WTSY [One]) [0x12] = BL16 /* \BL16 */
                    Return (WTSY) /* \_SB_.PC00.RP09.PXSX.WTSY */
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    DerefOf (WAIY [One]) [One] = WLBI /* \WLBI */
                    DerefOf (WAIY [One]) [0x02] = WHBI /* \WHBI */
                    Return (WAIY) /* \_SB_.PC00.RP09.PXSX.WAIY */
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PC00.RP09.PXSX.SADX */
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PC00.RP09.PXSX.GPCX */
                }

                Name (GLAX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Zero
                    }
                })
                Method (GLAI, 0, Serialized)
                {
                    ADBG (Concatenate ("AR: GLAI method. CGLS = ", ToHexString (CGLS)))
                    DerefOf (GLAX [One]) [One] = CGLS /* \CGLS */
                    DerefOf (GLAX [0x02]) [One] = CGLS /* \CGLS */
                    Return (GLAX) /* \_SB_.PC00.RP09.PXSX.GLAX */
                }
            }

            If (((WWEN != Zero) && (WWRP == SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If ((GGOV (PRST) != WPRP))
                    {
                        DL23 ()
                        ADBG ("WWAN DL23() Done")
                        SGOV (PRST, WPRP)
                        ADBG ("WWAN PERST:0 Done")
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    ADBG ("WWAN RST:0 Done")
                    If ((Arg0 == Zero))
                    {
                        Sleep (TBTG)
                        ADBG (Concatenate ("SLP TBTG ", ToDecimalString (TBTG)))
                    }
                    ElseIf ((Arg0 == One))
                    {
                        SPCO (WCLK, Zero)
                        ADBG ("WWAN SCLK:0 Done")
                        Sleep (TB2F)
                        ADBG (Concatenate ("SLP TB2F ", ToDecimalString (TB2F)))
                        SGOV (WFCP, (~PFCP & One))
                        ADBG ("WWAN PWR:0 Done")
                        Sleep (TFDI)
                        ADBG (Concatenate ("SLP TFDI ", ToDecimalString (TFDI)))
                    }
                    Else
                    {
                        ADBG ("Unsupported Arg0 is detected.")
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    ADBG ("WWAN MPHYPG:0 Done")
                    SPCO (WCLK, One)
                    ADBG ("WWAN SCLK:1 Done")
                    SGOV (WFCP, PFCP)
                    ADBG ("WWAN PWR:1 Done")
                    Sleep (TN2B)
                    ADBG (Concatenate ("SLP TN2B ", ToDecimalString (TN2B)))
                    SGOV (WBRS, (~PBRS & One))
                    ADBG ("WWAN RST:1 Done")
                    Sleep (TB2R)
                    ADBG (Concatenate ("SLP TB2R ", ToDecimalString (TB2R)))
                    SGOV (PRST, (~WPRP & One))
                    ADBG ("WWAN PERST:0 Done")
                    L23D ()
                    ADBG ("WWAN L23D() Done")
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Local0 = Zero
                    While (((SVID != WSID) && (Local0 < WSTO)))
                    {
                        Local0++
                        Sleep (One)
                    }

                    ADBG (Concatenate ("DET Time ", ToDecimalString (Local0)))
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    ADBG ("_RST WWAN")
                    If ((WWEN == 0x02))
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN FLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN FLDR")
                            FHRF (Zero)
                            SHRF ()
                            ADBG ("End WWAN FLDR")
                            Release (WWMT)
                            ADBG ("WWAN FLDR Mutex:Release Done")
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One) // Device Check
                        SGOV (PRST, (~WPRP & One))
                        SGOV (WBRS, (~PBRS & One))
                        Sleep (0xC8)
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x14))
                            {
                                ADBG ("FLDR TO")
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        Sleep (0x0A)
                        ADBG (Concatenate ("RVP Delay Time ", ToDecimalString (Local0)))
                        Notify (PXSX, One) // Device Check
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        ADBG ("WWAN PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        ADBG ("WWAN PR _ON")
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        ADBG ("WWAN PR _OFF")
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN PLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN PLDR")
                            FHRF (One)
                            SHRF ()
                            ADBG ("End WWAN PR _RST")
                            Release (WWMT)
                            ADBG ("WWAN PLDR Mutex: Release Done")
                            DOSV ()
                        }
                    }
                }
            }

            If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
            {
                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        WRST
                    })
                }

                Name (FDEL, Zero)
                Name (PDEL, Zero)
                Name (VDEL, Zero)
                Method (IFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x1F                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        ADBG (Concatenate ("vPro: ", CVPR))
                        Local0 = (CVPR << Zero)
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        ADBG (Concatenate ("CmdType = ", ToHexString (CMDT)))
                        ADBG (Concatenate ("CmdPayload = ", ToHexString (CMDP)))
                        If ((CMDT == One))
                        {
                            If (WIST ())
                            {
                                Return (RSTY) /* \_SB_.PC00.RP09.PXSX.RSTY */
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Get _PRR Mode = ", ^^^CNVW.RSTT))
                                Return (^^^CNVW.RSTT) /* \_SB_.PC00.CNVW.RSTT */
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((CMDT == 0x02))
                        {
                            If (WIST ())
                            {
                                Local0 = (CMDP & One)
                                RSTY = Local0
                                Local1 = (CMDP & 0x02)
                                Local1 >>= One
                                FLRC = Local1
                                Local2 = (CMDP & 0x04)
                                Local2 >>= 0x02
                                BOFC = Local2
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Set _PRR Mode = ", ToHexString (CMDP)))
                                ^^^CNVW.RSTT = CMDP /* \_SB_.PC00.RP09.PXSX.IFUN.CMDP */
                            }

                            Return (Zero)
                        }

                        If ((CMDT == 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                ADBG (Concatenate ("Get Last_PRR status PRRS = ", ToHexString (^^^CNVW.PRRS)))
                                Return (^^^CNVW.PRRS) /* \_SB_.PC00.CNVW.PRRS */
                            }
                            ElseIf (WIST ())
                            {
                                ADBG (Concatenate ("Get Last_PRR status DPRS = ", ToHexString (DPRS)))
                                Return (DPRS) /* \_SB_.PC00.RP09.PXSX.DPRS */
                            }
                        }

                        Return (Zero)
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((CRFI == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        CreateWordField (Arg3, Zero, PRTT)
                        CreateWordField (Arg3, 0x02, PRTD)
                        ADBG (Concatenate ("TimerType = ", ToHexString (PRTT)))
                        ADBG (Concatenate ("TimerDuration (ms) = ", ToDecimalString (PRTD)))
                        If ((PRTT == One))
                        {
                            FDEL = PRTD /* \_SB_.PC00.RP09.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x02))
                        {
                            PDEL = PRTD /* \_SB_.PC00.RP09.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x03))
                        {
                            VDEL = PRTD /* \_SB_.PC00.RP09.PXSX.IFUN.PRTD */
                        }
                        Else
                        {
                            ADBG ("TimerDuration not set")
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x1F                                       // ..
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Local0 = ACSD /* \ACSD */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Local0 = I5BS /* \I5BS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 = UHBS /* \UHBS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x06))
                    {
                        Local0 = AXMU /* \AXMU */
                        Local0 <<= One
                        Local0 |= AXSU /* \AXSU */
                        Local1 = AXMR /* \AXMR */
                        Local1 <<= One
                        Local1 |= AXSR /* \AXSR */
                        Local1 <<= 0x02
                        Local0 |= Local1
                        Return (Local0)
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (WFRC) /* \WFRC */
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (WFUC) /* \WFUC */
                    }

                    If ((Arg2 == 0x07))
                    {
                        Return (UNI4) /* \UNI4 */
                    }

                    If ((Arg2 == 0x08))
                    {
                        Return (WFIC) /* \WFIC */
                    }

                    If ((Arg2 == 0x09))
                    {
                        Return (WFBS) /* \WFBS */
                    }

                    If ((Arg2 == 0x0A))
                    {
                        Return (WEDT) /* \WEDT */
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((CIRM == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        Return (WF7C) /* \WF7C */
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                        {
                            If ((Arg2 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                             // .
                                })
                            }

                            If ((Arg2 == One)){}
                            If ((Arg2 == 0x02)){}
                            If ((Arg2 == 0x03))
                            {
                                If ((WRTO == One))
                                {
                                    ADBG ("WWAN Power _DSM D0/L1.2")
                                }
                                ElseIf ((WRTO == 0x02))
                                {
                                    ADBG ("WWAN Power _DSM D3/L1.2")
                                }
                                ElseIf ((WRTO == 0x03))
                                {
                                    ADBG ("WWAN Power _DSM D3/L2")
                                }
                                Else
                                {
                                    ADBG ("WWAN Power _DSM Disabled")
                                }

                                Return (WRTO) /* \WRTO */
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP10.PXSX))
    {
        Scope (_SB.PC00.RP10.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (PBNU, ^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WDCO), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            OperationRegion (VSEC, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WVHO), 0x10)
            Field (VSEC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x0C), 
                    ,   1, 
                BTIE,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                Offset (0x0D), 
                PDRC,   1
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Case (0x272B8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            If ((SVDC == One))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Case (0x080014C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                Name (RSTY, Zero)
                Name (FLRC, Zero)
                Name (BOFC, Zero)
                Name (DPRS, Zero)
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("Wifi PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("Wifi PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("Wifi PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If ((RSTY == One))
                        {
                            ADBG ("Wifi Product RST")
                            Local0 = Acquire (CNMT, 0x03E8)
                            If ((Local0 == Zero))
                            {
                                If ((FLRC == One))
                                {
                                    Local0 = DCTR /* \_SB_.PC00.RP10.PXSX.DCTR */
                                    Local0 |= 0x8000
                                    DCTR = Local0
                                    Sleep (FDEL)
                                }

                                DPRS = One
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (Zero)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = Zero
                                    }

                                    Sleep (RDLY)
                                }

                                PDRC = One
                                Sleep (VDEL)
                                SGOV (WLRT, Zero)
                                Sleep (PDEL)
                                SGOV (WLRT, One)
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (One)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = One
                                    }

                                    Sleep (RDLY)
                                }

                                DPRS = 0x02
                                Release (CNMT)
                            }
                        }
                        Else
                        {
                            ADBG ("Wifi Core RST")
                            If ((DCAP & 0x10000000))
                            {
                                Local0 = DCTR /* \_SB_.PC00.RP10.PXSX.DCTR */
                                Local0 |= 0x8000
                                DCTR = Local0
                            }

                            DPRS = One
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                    DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                    DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                    Return (SPLX) /* \_SB_.PC00.RP10.PXSX.SPLX */
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                    DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                    DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                    Return (WANX) /* \_SB_.PC00.RP10.PXSX.WANX */
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                    DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                    Return (WRDX) /* \_SB_.PC00.RP10.PXSX.WRDX */
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                    DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                    DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                    DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                    DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                    DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                    DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                    DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                    DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                    DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                    DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                    DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                    DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                    DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                    DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                    DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                    DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                    DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                    DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                    DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                    DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                    DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                    DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                    DerefOf (WRDY [One]) [0x18] = CD10 /* \CD10 */
                    DerefOf (WRDY [One]) [0x19] = CD11 /* \CD11 */
                    DerefOf (WRDY [One]) [0x1A] = CD12 /* \CD12 */
                    DerefOf (WRDY [One]) [0x1B] = CD13 /* \CD13 */
                    DerefOf (WRDY [One]) [0x1C] = CD14 /* \CD14 */
                    DerefOf (WRDY [One]) [0x1D] = CD15 /* \CD15 */
                    DerefOf (WRDY [One]) [0x1E] = CD16 /* \CD16 */
                    DerefOf (WRDY [One]) [0x1F] = CD17 /* \CD17 */
                    DerefOf (WRDY [One]) [0x20] = CD18 /* \CD18 */
                    DerefOf (WRDY [One]) [0x21] = CD19 /* \CD19 */
                    DerefOf (WRDY [One]) [0x22] = CD1A /* \CD1A */
                    DerefOf (WRDY [One]) [0x23] = CD20 /* \CD20 */
                    DerefOf (WRDY [One]) [0x24] = CD21 /* \CD21 */
                    DerefOf (WRDY [One]) [0x25] = CD22 /* \CD22 */
                    DerefOf (WRDY [One]) [0x26] = CD23 /* \CD23 */
                    DerefOf (WRDY [One]) [0x27] = CD24 /* \CD24 */
                    DerefOf (WRDY [One]) [0x28] = CD25 /* \CD25 */
                    DerefOf (WRDY [One]) [0x29] = CD26 /* \CD26 */
                    DerefOf (WRDY [One]) [0x2A] = CD27 /* \CD27 */
                    DerefOf (WRDY [One]) [0x2B] = CD28 /* \CD28 */
                    DerefOf (WRDY [One]) [0x2C] = CD29 /* \CD29 */
                    DerefOf (WRDY [One]) [0x2D] = CD2A /* \CD2A */
                    Return (WRDY) /* \_SB_.PC00.RP10.PXSX.WRDY */
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                    DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                    DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                    DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                    DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                    DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                    DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                    DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                    DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                    DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                    DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                    DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                    DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                    DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                    DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                    DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                    DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                    DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                    DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                    DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                    DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                    DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                    DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                    DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                    DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                    DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                    DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                    DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                    DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                    DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                    DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                    DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                    DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                    DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                    DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                    DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                    DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                    DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                    DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                    DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                    DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                    DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                    DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                    DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                    DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                    DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                    DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                    DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                    DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                    DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                    DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                    DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                    DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                    DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                    DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                    DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                    DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                    DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                    DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                    DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                    DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                    DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                    DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                    DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                    DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                    DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                    DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                    DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                    DerefOf (EWRY [One]) [0x45] = CD30 /* \CD30 */
                    DerefOf (EWRY [One]) [0x46] = CD31 /* \CD31 */
                    DerefOf (EWRY [One]) [0x47] = CD32 /* \CD32 */
                    DerefOf (EWRY [One]) [0x48] = CD33 /* \CD33 */
                    DerefOf (EWRY [One]) [0x49] = CD34 /* \CD34 */
                    DerefOf (EWRY [One]) [0x4A] = CD35 /* \CD35 */
                    DerefOf (EWRY [One]) [0x4B] = CD36 /* \CD36 */
                    DerefOf (EWRY [One]) [0x4C] = CD37 /* \CD37 */
                    DerefOf (EWRY [One]) [0x4D] = CD38 /* \CD38 */
                    DerefOf (EWRY [One]) [0x4E] = CD39 /* \CD39 */
                    DerefOf (EWRY [One]) [0x4F] = CD3A /* \CD3A */
                    DerefOf (EWRY [One]) [0x50] = CD3B /* \CD3B */
                    DerefOf (EWRY [One]) [0x51] = CD3C /* \CD3C */
                    DerefOf (EWRY [One]) [0x52] = CD3D /* \CD3D */
                    DerefOf (EWRY [One]) [0x53] = CD3E /* \CD3E */
                    DerefOf (EWRY [One]) [0x54] = CD3F /* \CD3F */
                    DerefOf (EWRY [One]) [0x55] = CD40 /* \CD40 */
                    DerefOf (EWRY [One]) [0x56] = CD41 /* \CD41 */
                    DerefOf (EWRY [One]) [0x57] = CD42 /* \CD42 */
                    DerefOf (EWRY [One]) [0x58] = CD43 /* \CD43 */
                    DerefOf (EWRY [One]) [0x59] = CD44 /* \CD44 */
                    DerefOf (EWRY [One]) [0x5A] = CD45 /* \CD45 */
                    DerefOf (EWRY [One]) [0x5B] = CD46 /* \CD46 */
                    DerefOf (EWRY [One]) [0x5C] = CD47 /* \CD47 */
                    DerefOf (EWRY [One]) [0x5D] = CD48 /* \CD48 */
                    DerefOf (EWRY [One]) [0x5E] = CD49 /* \CD49 */
                    DerefOf (EWRY [One]) [0x5F] = CD4A /* \CD4A */
                    DerefOf (EWRY [One]) [0x60] = CD4B /* \CD4B */
                    DerefOf (EWRY [One]) [0x61] = CD4C /* \CD4C */
                    DerefOf (EWRY [One]) [0x62] = CD4D /* \CD4D */
                    DerefOf (EWRY [One]) [0x63] = CD4E /* \CD4E */
                    DerefOf (EWRY [One]) [0x64] = CD4F /* \CD4F */
                    DerefOf (EWRY [One]) [0x65] = CD50 /* \CD50 */
                    DerefOf (EWRY [One]) [0x66] = CD51 /* \CD51 */
                    DerefOf (EWRY [One]) [0x67] = CD52 /* \CD52 */
                    DerefOf (EWRY [One]) [0x68] = CD53 /* \CD53 */
                    DerefOf (EWRY [One]) [0x69] = CD54 /* \CD54 */
                    DerefOf (EWRY [One]) [0x6A] = CD55 /* \CD55 */
                    DerefOf (EWRY [One]) [0x6B] = CD56 /* \CD56 */
                    DerefOf (EWRY [One]) [0x6C] = CD57 /* \CD57 */
                    DerefOf (EWRY [One]) [0x6D] = CD58 /* \CD58 */
                    DerefOf (EWRY [One]) [0x6E] = CD59 /* \CD59 */
                    DerefOf (EWRY [One]) [0x6F] = CD5A /* \CD5A */
                    DerefOf (EWRY [One]) [0x70] = CD5B /* \CD5B */
                    DerefOf (EWRY [One]) [0x71] = CD5C /* \CD5C */
                    DerefOf (EWRY [One]) [0x72] = CD5D /* \CD5D */
                    DerefOf (EWRY [One]) [0x73] = CD5E /* \CD5E */
                    DerefOf (EWRY [One]) [0x74] = CD5F /* \CD5F */
                    DerefOf (EWRY [One]) [0x75] = CD60 /* \CD60 */
                    DerefOf (EWRY [One]) [0x76] = CD61 /* \CD61 */
                    DerefOf (EWRY [One]) [0x77] = CD62 /* \CD62 */
                    DerefOf (EWRY [One]) [0x78] = CD63 /* \CD63 */
                    DerefOf (EWRY [One]) [0x79] = CD64 /* \CD64 */
                    DerefOf (EWRY [One]) [0x7A] = CD65 /* \CD65 */
                    DerefOf (EWRY [One]) [0x7B] = CD66 /* \CD66 */
                    DerefOf (EWRY [One]) [0x7C] = CD67 /* \CD67 */
                    DerefOf (EWRY [One]) [0x7D] = CD68 /* \CD68 */
                    DerefOf (EWRY [One]) [0x7E] = CD69 /* \CD69 */
                    DerefOf (EWRY [One]) [0x7F] = CD6A /* \CD6A */
                    DerefOf (EWRY [One]) [0x80] = CD6B /* \CD6B */
                    DerefOf (EWRY [One]) [0x81] = CD6C /* \CD6C */
                    DerefOf (EWRY [One]) [0x82] = CD6D /* \CD6D */
                    DerefOf (EWRY [One]) [0x83] = CD6E /* \CD6E */
                    DerefOf (EWRY [One]) [0x84] = CD6F /* \CD6F */
                    DerefOf (EWRY [One]) [0x85] = CD70 /* \CD70 */
                    DerefOf (EWRY [One]) [0x86] = CD71 /* \CD71 */
                    Return (EWRY) /* \_SB_.PC00.RP10.PXSX.EWRY */
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    DerefOf (WGDY [One]) [One] = SDGN /* \SDGN */
                    DerefOf (WGDY [One]) [0x02] = SD11 /* \SD11 */
                    DerefOf (WGDY [One]) [0x03] = SD12 /* \SD12 */
                    DerefOf (WGDY [One]) [0x04] = SD13 /* \SD13 */
                    DerefOf (WGDY [One]) [0x05] = SD14 /* \SD14 */
                    DerefOf (WGDY [One]) [0x06] = SD15 /* \SD15 */
                    DerefOf (WGDY [One]) [0x07] = SD16 /* \SD16 */
                    DerefOf (WGDY [One]) [0x08] = SD17 /* \SD17 */
                    DerefOf (WGDY [One]) [0x09] = SD18 /* \SD18 */
                    DerefOf (WGDY [One]) [0x0A] = SD19 /* \SD19 */
                    DerefOf (WGDY [One]) [0x0B] = SD21 /* \SD21 */
                    DerefOf (WGDY [One]) [0x0C] = SD22 /* \SD22 */
                    DerefOf (WGDY [One]) [0x0D] = SD23 /* \SD23 */
                    DerefOf (WGDY [One]) [0x0E] = SD24 /* \SD24 */
                    DerefOf (WGDY [One]) [0x0F] = SD25 /* \SD25 */
                    DerefOf (WGDY [One]) [0x10] = SD26 /* \SD26 */
                    DerefOf (WGDY [One]) [0x11] = SD27 /* \SD27 */
                    DerefOf (WGDY [One]) [0x12] = SD28 /* \SD28 */
                    DerefOf (WGDY [One]) [0x13] = SD29 /* \SD29 */
                    DerefOf (WGDY [One]) [0x14] = SD31 /* \SD31 */
                    DerefOf (WGDY [One]) [0x15] = SD32 /* \SD32 */
                    DerefOf (WGDY [One]) [0x16] = SD33 /* \SD33 */
                    DerefOf (WGDY [One]) [0x17] = SD34 /* \SD34 */
                    DerefOf (WGDY [One]) [0x18] = SD35 /* \SD35 */
                    DerefOf (WGDY [One]) [0x19] = SD36 /* \SD36 */
                    DerefOf (WGDY [One]) [0x1A] = SD37 /* \SD37 */
                    DerefOf (WGDY [One]) [0x1B] = SD38 /* \SD38 */
                    DerefOf (WGDY [One]) [0x1C] = SD39 /* \SD39 */
                    DerefOf (WGDY [One]) [0x1D] = SD41 /* \SD41 */
                    DerefOf (WGDY [One]) [0x1E] = SD42 /* \SD42 */
                    DerefOf (WGDY [One]) [0x1F] = SD43 /* \SD43 */
                    DerefOf (WGDY [One]) [0x20] = SD44 /* \SD44 */
                    DerefOf (WGDY [One]) [0x21] = SD45 /* \SD45 */
                    DerefOf (WGDY [One]) [0x22] = SD46 /* \SD46 */
                    DerefOf (WGDY [One]) [0x23] = SD47 /* \SD47 */
                    DerefOf (WGDY [One]) [0x24] = SD48 /* \SD48 */
                    DerefOf (WGDY [One]) [0x25] = SD49 /* \SD49 */
                    DerefOf (WGDY [One]) [0x26] = SD51 /* \SD51 */
                    DerefOf (WGDY [One]) [0x27] = SD52 /* \SD52 */
                    DerefOf (WGDY [One]) [0x28] = SD53 /* \SD53 */
                    DerefOf (WGDY [One]) [0x29] = SD54 /* \SD54 */
                    DerefOf (WGDY [One]) [0x2A] = SD55 /* \SD55 */
                    DerefOf (WGDY [One]) [0x2B] = SD56 /* \SD56 */
                    DerefOf (WGDY [One]) [0x2C] = SD57 /* \SD57 */
                    DerefOf (WGDY [One]) [0x2D] = SD58 /* \SD58 */
                    DerefOf (WGDY [One]) [0x2E] = SD59 /* \SD59 */
                    DerefOf (WGDY [One]) [0x2F] = SD61 /* \SD61 */
                    DerefOf (WGDY [One]) [0x30] = SD62 /* \SD62 */
                    DerefOf (WGDY [One]) [0x31] = SD63 /* \SD63 */
                    DerefOf (WGDY [One]) [0x32] = SD64 /* \SD64 */
                    DerefOf (WGDY [One]) [0x33] = SD65 /* \SD65 */
                    DerefOf (WGDY [One]) [0x34] = SD66 /* \SD66 */
                    DerefOf (WGDY [One]) [0x35] = SD67 /* \SD67 */
                    DerefOf (WGDY [One]) [0x36] = SD68 /* \SD68 */
                    DerefOf (WGDY [One]) [0x37] = SD69 /* \SD69 */
                    DerefOf (WGDY [One]) [0x38] = SD71 /* \SD71 */
                    DerefOf (WGDY [One]) [0x39] = SD72 /* \SD72 */
                    DerefOf (WGDY [One]) [0x3A] = SD73 /* \SD73 */
                    DerefOf (WGDY [One]) [0x3B] = SD74 /* \SD74 */
                    DerefOf (WGDY [One]) [0x3C] = SD75 /* \SD75 */
                    DerefOf (WGDY [One]) [0x3D] = SD76 /* \SD76 */
                    DerefOf (WGDY [One]) [0x3E] = SD77 /* \SD77 */
                    DerefOf (WGDY [One]) [0x3F] = SD78 /* \SD78 */
                    DerefOf (WGDY [One]) [0x40] = SD79 /* \SD79 */
                    DerefOf (WGDY [One]) [0x41] = SD81 /* \SD81 */
                    DerefOf (WGDY [One]) [0x42] = SD82 /* \SD82 */
                    DerefOf (WGDY [One]) [0x43] = SD83 /* \SD83 */
                    DerefOf (WGDY [One]) [0x44] = SD84 /* \SD84 */
                    DerefOf (WGDY [One]) [0x45] = SD85 /* \SD85 */
                    DerefOf (WGDY [One]) [0x46] = SD86 /* \SD86 */
                    DerefOf (WGDY [One]) [0x47] = SD87 /* \SD87 */
                    DerefOf (WGDY [One]) [0x48] = SD88 /* \SD88 */
                    DerefOf (WGDY [One]) [0x49] = SD89 /* \SD89 */
                    Return (WGDY) /* \_SB_.PC00.RP10.PXSX.WGDY */
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                    Return (ECKY) /* \_SB_.PC00.RP10.PXSX.ECKY */
                }

                Name (PPAY, Package (0x02)
                {
                    0x02, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    DerefOf (PPAY [One]) [One] = WAGM /* \WAGM */
                    DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                    DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                    DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                    DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                    DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                    DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                    DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                    DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                    DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                    DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                    DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                    DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                    DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                    DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                    DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                    DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                    DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                    DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                    DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                    DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                    DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                    DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                    Return (PPAY) /* \_SB_.PC00.RP10.PXSX.PPAY */
                }

                Name (WPFY, Package (0x02)
                {
                    Zero, 
                    Package (0x05)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WPFC, 0, Serialized)
                {
                    DerefOf (WPFY [One]) [One] = WPFA /* \WPFA */
                    DerefOf (WPFY [One]) [0x02] = WPFB /* \WPFB */
                    DerefOf (WPFY [One]) [0x03] = \WPFC
                    DerefOf (WPFY [One]) [0x04] = WPFD /* \WPFD */
                    Return (WPFY) /* \_SB_.PC00.RP10.PXSX.WPFY */
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    DerefOf (WTSY [One]) [One] = WTSE /* \WTSE */
                    DerefOf (WTSY [One]) [0x02] = WTLE /* \WTLE */
                    DerefOf (WTSY [One]) [0x03] = BL01 /* \BL01 */
                    DerefOf (WTSY [One]) [0x04] = BL02 /* \BL02 */
                    DerefOf (WTSY [One]) [0x05] = BL03 /* \BL03 */
                    DerefOf (WTSY [One]) [0x06] = BL04 /* \BL04 */
                    DerefOf (WTSY [One]) [0x07] = BL05 /* \BL05 */
                    DerefOf (WTSY [One]) [0x08] = BL06 /* \BL06 */
                    DerefOf (WTSY [One]) [0x09] = BL07 /* \BL07 */
                    DerefOf (WTSY [One]) [0x0A] = BL08 /* \BL08 */
                    DerefOf (WTSY [One]) [0x0B] = BL09 /* \BL09 */
                    DerefOf (WTSY [One]) [0x0C] = BL10 /* \BL10 */
                    DerefOf (WTSY [One]) [0x0D] = BL11 /* \BL11 */
                    DerefOf (WTSY [One]) [0x0E] = BL12 /* \BL12 */
                    DerefOf (WTSY [One]) [0x0F] = BL13 /* \BL13 */
                    DerefOf (WTSY [One]) [0x10] = BL14 /* \BL14 */
                    DerefOf (WTSY [One]) [0x11] = BL15 /* \BL15 */
                    DerefOf (WTSY [One]) [0x12] = BL16 /* \BL16 */
                    Return (WTSY) /* \_SB_.PC00.RP10.PXSX.WTSY */
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    DerefOf (WAIY [One]) [One] = WLBI /* \WLBI */
                    DerefOf (WAIY [One]) [0x02] = WHBI /* \WHBI */
                    Return (WAIY) /* \_SB_.PC00.RP10.PXSX.WAIY */
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PC00.RP10.PXSX.SADX */
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PC00.RP10.PXSX.GPCX */
                }

                Name (GLAX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Zero
                    }
                })
                Method (GLAI, 0, Serialized)
                {
                    ADBG (Concatenate ("AR: GLAI method. CGLS = ", ToHexString (CGLS)))
                    DerefOf (GLAX [One]) [One] = CGLS /* \CGLS */
                    DerefOf (GLAX [0x02]) [One] = CGLS /* \CGLS */
                    Return (GLAX) /* \_SB_.PC00.RP10.PXSX.GLAX */
                }
            }

            If (((WWEN != Zero) && (WWRP == SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If ((GGOV (PRST) != WPRP))
                    {
                        DL23 ()
                        ADBG ("WWAN DL23() Done")
                        SGOV (PRST, WPRP)
                        ADBG ("WWAN PERST:0 Done")
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    ADBG ("WWAN RST:0 Done")
                    If ((Arg0 == Zero))
                    {
                        Sleep (TBTG)
                        ADBG (Concatenate ("SLP TBTG ", ToDecimalString (TBTG)))
                    }
                    ElseIf ((Arg0 == One))
                    {
                        SPCO (WCLK, Zero)
                        ADBG ("WWAN SCLK:0 Done")
                        Sleep (TB2F)
                        ADBG (Concatenate ("SLP TB2F ", ToDecimalString (TB2F)))
                        SGOV (WFCP, (~PFCP & One))
                        ADBG ("WWAN PWR:0 Done")
                        Sleep (TFDI)
                        ADBG (Concatenate ("SLP TFDI ", ToDecimalString (TFDI)))
                    }
                    Else
                    {
                        ADBG ("Unsupported Arg0 is detected.")
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    ADBG ("WWAN MPHYPG:0 Done")
                    SPCO (WCLK, One)
                    ADBG ("WWAN SCLK:1 Done")
                    SGOV (WFCP, PFCP)
                    ADBG ("WWAN PWR:1 Done")
                    Sleep (TN2B)
                    ADBG (Concatenate ("SLP TN2B ", ToDecimalString (TN2B)))
                    SGOV (WBRS, (~PBRS & One))
                    ADBG ("WWAN RST:1 Done")
                    Sleep (TB2R)
                    ADBG (Concatenate ("SLP TB2R ", ToDecimalString (TB2R)))
                    SGOV (PRST, (~WPRP & One))
                    ADBG ("WWAN PERST:0 Done")
                    L23D ()
                    ADBG ("WWAN L23D() Done")
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Local0 = Zero
                    While (((SVID != WSID) && (Local0 < WSTO)))
                    {
                        Local0++
                        Sleep (One)
                    }

                    ADBG (Concatenate ("DET Time ", ToDecimalString (Local0)))
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    ADBG ("_RST WWAN")
                    If ((WWEN == 0x02))
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN FLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN FLDR")
                            FHRF (Zero)
                            SHRF ()
                            ADBG ("End WWAN FLDR")
                            Release (WWMT)
                            ADBG ("WWAN FLDR Mutex:Release Done")
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One) // Device Check
                        SGOV (PRST, (~WPRP & One))
                        SGOV (WBRS, (~PBRS & One))
                        Sleep (0xC8)
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x14))
                            {
                                ADBG ("FLDR TO")
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        Sleep (0x0A)
                        ADBG (Concatenate ("RVP Delay Time ", ToDecimalString (Local0)))
                        Notify (PXSX, One) // Device Check
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        ADBG ("WWAN PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        ADBG ("WWAN PR _ON")
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        ADBG ("WWAN PR _OFF")
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN PLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN PLDR")
                            FHRF (One)
                            SHRF ()
                            ADBG ("End WWAN PR _RST")
                            Release (WWMT)
                            ADBG ("WWAN PLDR Mutex: Release Done")
                            DOSV ()
                        }
                    }
                }
            }

            If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
            {
                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        WRST
                    })
                }

                Name (FDEL, Zero)
                Name (PDEL, Zero)
                Name (VDEL, Zero)
                Method (IFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x1F                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        ADBG (Concatenate ("vPro: ", CVPR))
                        Local0 = (CVPR << Zero)
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        ADBG (Concatenate ("CmdType = ", ToHexString (CMDT)))
                        ADBG (Concatenate ("CmdPayload = ", ToHexString (CMDP)))
                        If ((CMDT == One))
                        {
                            If (WIST ())
                            {
                                Return (RSTY) /* \_SB_.PC00.RP10.PXSX.RSTY */
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Get _PRR Mode = ", ^^^CNVW.RSTT))
                                Return (^^^CNVW.RSTT) /* \_SB_.PC00.CNVW.RSTT */
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((CMDT == 0x02))
                        {
                            If (WIST ())
                            {
                                Local0 = (CMDP & One)
                                RSTY = Local0
                                Local1 = (CMDP & 0x02)
                                Local1 >>= One
                                FLRC = Local1
                                Local2 = (CMDP & 0x04)
                                Local2 >>= 0x02
                                BOFC = Local2
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Set _PRR Mode = ", ToHexString (CMDP)))
                                ^^^CNVW.RSTT = CMDP /* \_SB_.PC00.RP10.PXSX.IFUN.CMDP */
                            }

                            Return (Zero)
                        }

                        If ((CMDT == 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                ADBG (Concatenate ("Get Last_PRR status PRRS = ", ToHexString (^^^CNVW.PRRS)))
                                Return (^^^CNVW.PRRS) /* \_SB_.PC00.CNVW.PRRS */
                            }
                            ElseIf (WIST ())
                            {
                                ADBG (Concatenate ("Get Last_PRR status DPRS = ", ToHexString (DPRS)))
                                Return (DPRS) /* \_SB_.PC00.RP10.PXSX.DPRS */
                            }
                        }

                        Return (Zero)
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((CRFI == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        CreateWordField (Arg3, Zero, PRTT)
                        CreateWordField (Arg3, 0x02, PRTD)
                        ADBG (Concatenate ("TimerType = ", ToHexString (PRTT)))
                        ADBG (Concatenate ("TimerDuration (ms) = ", ToDecimalString (PRTD)))
                        If ((PRTT == One))
                        {
                            FDEL = PRTD /* \_SB_.PC00.RP10.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x02))
                        {
                            PDEL = PRTD /* \_SB_.PC00.RP10.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x03))
                        {
                            VDEL = PRTD /* \_SB_.PC00.RP10.PXSX.IFUN.PRTD */
                        }
                        Else
                        {
                            ADBG ("TimerDuration not set")
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x1F                                       // ..
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Local0 = ACSD /* \ACSD */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Local0 = I5BS /* \I5BS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 = UHBS /* \UHBS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x06))
                    {
                        Local0 = AXMU /* \AXMU */
                        Local0 <<= One
                        Local0 |= AXSU /* \AXSU */
                        Local1 = AXMR /* \AXMR */
                        Local1 <<= One
                        Local1 |= AXSR /* \AXSR */
                        Local1 <<= 0x02
                        Local0 |= Local1
                        Return (Local0)
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (WFRC) /* \WFRC */
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (WFUC) /* \WFUC */
                    }

                    If ((Arg2 == 0x07))
                    {
                        Return (UNI4) /* \UNI4 */
                    }

                    If ((Arg2 == 0x08))
                    {
                        Return (WFIC) /* \WFIC */
                    }

                    If ((Arg2 == 0x09))
                    {
                        Return (WFBS) /* \WFBS */
                    }

                    If ((Arg2 == 0x0A))
                    {
                        Return (WEDT) /* \WEDT */
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((CIRM == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        Return (WF7C) /* \WF7C */
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                        {
                            If ((Arg2 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                             // .
                                })
                            }

                            If ((Arg2 == One)){}
                            If ((Arg2 == 0x02)){}
                            If ((Arg2 == 0x03))
                            {
                                If ((WRTO == One))
                                {
                                    ADBG ("WWAN Power _DSM D0/L1.2")
                                }
                                ElseIf ((WRTO == 0x02))
                                {
                                    ADBG ("WWAN Power _DSM D3/L1.2")
                                }
                                ElseIf ((WRTO == 0x03))
                                {
                                    ADBG ("WWAN Power _DSM D3/L2")
                                }
                                Else
                                {
                                    ADBG ("WWAN Power _DSM Disabled")
                                }

                                Return (WRTO) /* \WRTO */
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP11.PXSX))
    {
        Scope (_SB.PC00.RP11.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (PBNU, ^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WDCO), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            OperationRegion (VSEC, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WVHO), 0x10)
            Field (VSEC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x0C), 
                    ,   1, 
                BTIE,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                Offset (0x0D), 
                PDRC,   1
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Case (0x272B8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            If ((SVDC == One))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Case (0x080014C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                Name (RSTY, Zero)
                Name (FLRC, Zero)
                Name (BOFC, Zero)
                Name (DPRS, Zero)
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("Wifi PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("Wifi PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("Wifi PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If ((RSTY == One))
                        {
                            ADBG ("Wifi Product RST")
                            Local0 = Acquire (CNMT, 0x03E8)
                            If ((Local0 == Zero))
                            {
                                If ((FLRC == One))
                                {
                                    Local0 = DCTR /* \_SB_.PC00.RP11.PXSX.DCTR */
                                    Local0 |= 0x8000
                                    DCTR = Local0
                                    Sleep (FDEL)
                                }

                                DPRS = One
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (Zero)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = Zero
                                    }

                                    Sleep (RDLY)
                                }

                                PDRC = One
                                Sleep (VDEL)
                                SGOV (WLRT, Zero)
                                Sleep (PDEL)
                                SGOV (WLRT, One)
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (One)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = One
                                    }

                                    Sleep (RDLY)
                                }

                                DPRS = 0x02
                                Release (CNMT)
                            }
                        }
                        Else
                        {
                            ADBG ("Wifi Core RST")
                            If ((DCAP & 0x10000000))
                            {
                                Local0 = DCTR /* \_SB_.PC00.RP11.PXSX.DCTR */
                                Local0 |= 0x8000
                                DCTR = Local0
                            }

                            DPRS = One
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                    DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                    DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                    Return (SPLX) /* \_SB_.PC00.RP11.PXSX.SPLX */
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                    DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                    DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                    Return (WANX) /* \_SB_.PC00.RP11.PXSX.WANX */
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                    DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                    Return (WRDX) /* \_SB_.PC00.RP11.PXSX.WRDX */
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                    DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                    DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                    DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                    DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                    DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                    DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                    DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                    DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                    DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                    DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                    DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                    DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                    DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                    DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                    DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                    DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                    DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                    DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                    DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                    DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                    DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                    DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                    DerefOf (WRDY [One]) [0x18] = CD10 /* \CD10 */
                    DerefOf (WRDY [One]) [0x19] = CD11 /* \CD11 */
                    DerefOf (WRDY [One]) [0x1A] = CD12 /* \CD12 */
                    DerefOf (WRDY [One]) [0x1B] = CD13 /* \CD13 */
                    DerefOf (WRDY [One]) [0x1C] = CD14 /* \CD14 */
                    DerefOf (WRDY [One]) [0x1D] = CD15 /* \CD15 */
                    DerefOf (WRDY [One]) [0x1E] = CD16 /* \CD16 */
                    DerefOf (WRDY [One]) [0x1F] = CD17 /* \CD17 */
                    DerefOf (WRDY [One]) [0x20] = CD18 /* \CD18 */
                    DerefOf (WRDY [One]) [0x21] = CD19 /* \CD19 */
                    DerefOf (WRDY [One]) [0x22] = CD1A /* \CD1A */
                    DerefOf (WRDY [One]) [0x23] = CD20 /* \CD20 */
                    DerefOf (WRDY [One]) [0x24] = CD21 /* \CD21 */
                    DerefOf (WRDY [One]) [0x25] = CD22 /* \CD22 */
                    DerefOf (WRDY [One]) [0x26] = CD23 /* \CD23 */
                    DerefOf (WRDY [One]) [0x27] = CD24 /* \CD24 */
                    DerefOf (WRDY [One]) [0x28] = CD25 /* \CD25 */
                    DerefOf (WRDY [One]) [0x29] = CD26 /* \CD26 */
                    DerefOf (WRDY [One]) [0x2A] = CD27 /* \CD27 */
                    DerefOf (WRDY [One]) [0x2B] = CD28 /* \CD28 */
                    DerefOf (WRDY [One]) [0x2C] = CD29 /* \CD29 */
                    DerefOf (WRDY [One]) [0x2D] = CD2A /* \CD2A */
                    Return (WRDY) /* \_SB_.PC00.RP11.PXSX.WRDY */
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                    DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                    DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                    DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                    DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                    DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                    DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                    DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                    DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                    DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                    DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                    DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                    DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                    DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                    DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                    DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                    DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                    DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                    DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                    DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                    DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                    DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                    DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                    DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                    DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                    DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                    DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                    DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                    DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                    DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                    DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                    DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                    DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                    DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                    DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                    DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                    DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                    DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                    DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                    DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                    DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                    DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                    DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                    DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                    DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                    DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                    DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                    DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                    DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                    DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                    DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                    DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                    DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                    DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                    DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                    DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                    DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                    DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                    DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                    DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                    DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                    DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                    DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                    DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                    DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                    DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                    DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                    DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                    DerefOf (EWRY [One]) [0x45] = CD30 /* \CD30 */
                    DerefOf (EWRY [One]) [0x46] = CD31 /* \CD31 */
                    DerefOf (EWRY [One]) [0x47] = CD32 /* \CD32 */
                    DerefOf (EWRY [One]) [0x48] = CD33 /* \CD33 */
                    DerefOf (EWRY [One]) [0x49] = CD34 /* \CD34 */
                    DerefOf (EWRY [One]) [0x4A] = CD35 /* \CD35 */
                    DerefOf (EWRY [One]) [0x4B] = CD36 /* \CD36 */
                    DerefOf (EWRY [One]) [0x4C] = CD37 /* \CD37 */
                    DerefOf (EWRY [One]) [0x4D] = CD38 /* \CD38 */
                    DerefOf (EWRY [One]) [0x4E] = CD39 /* \CD39 */
                    DerefOf (EWRY [One]) [0x4F] = CD3A /* \CD3A */
                    DerefOf (EWRY [One]) [0x50] = CD3B /* \CD3B */
                    DerefOf (EWRY [One]) [0x51] = CD3C /* \CD3C */
                    DerefOf (EWRY [One]) [0x52] = CD3D /* \CD3D */
                    DerefOf (EWRY [One]) [0x53] = CD3E /* \CD3E */
                    DerefOf (EWRY [One]) [0x54] = CD3F /* \CD3F */
                    DerefOf (EWRY [One]) [0x55] = CD40 /* \CD40 */
                    DerefOf (EWRY [One]) [0x56] = CD41 /* \CD41 */
                    DerefOf (EWRY [One]) [0x57] = CD42 /* \CD42 */
                    DerefOf (EWRY [One]) [0x58] = CD43 /* \CD43 */
                    DerefOf (EWRY [One]) [0x59] = CD44 /* \CD44 */
                    DerefOf (EWRY [One]) [0x5A] = CD45 /* \CD45 */
                    DerefOf (EWRY [One]) [0x5B] = CD46 /* \CD46 */
                    DerefOf (EWRY [One]) [0x5C] = CD47 /* \CD47 */
                    DerefOf (EWRY [One]) [0x5D] = CD48 /* \CD48 */
                    DerefOf (EWRY [One]) [0x5E] = CD49 /* \CD49 */
                    DerefOf (EWRY [One]) [0x5F] = CD4A /* \CD4A */
                    DerefOf (EWRY [One]) [0x60] = CD4B /* \CD4B */
                    DerefOf (EWRY [One]) [0x61] = CD4C /* \CD4C */
                    DerefOf (EWRY [One]) [0x62] = CD4D /* \CD4D */
                    DerefOf (EWRY [One]) [0x63] = CD4E /* \CD4E */
                    DerefOf (EWRY [One]) [0x64] = CD4F /* \CD4F */
                    DerefOf (EWRY [One]) [0x65] = CD50 /* \CD50 */
                    DerefOf (EWRY [One]) [0x66] = CD51 /* \CD51 */
                    DerefOf (EWRY [One]) [0x67] = CD52 /* \CD52 */
                    DerefOf (EWRY [One]) [0x68] = CD53 /* \CD53 */
                    DerefOf (EWRY [One]) [0x69] = CD54 /* \CD54 */
                    DerefOf (EWRY [One]) [0x6A] = CD55 /* \CD55 */
                    DerefOf (EWRY [One]) [0x6B] = CD56 /* \CD56 */
                    DerefOf (EWRY [One]) [0x6C] = CD57 /* \CD57 */
                    DerefOf (EWRY [One]) [0x6D] = CD58 /* \CD58 */
                    DerefOf (EWRY [One]) [0x6E] = CD59 /* \CD59 */
                    DerefOf (EWRY [One]) [0x6F] = CD5A /* \CD5A */
                    DerefOf (EWRY [One]) [0x70] = CD5B /* \CD5B */
                    DerefOf (EWRY [One]) [0x71] = CD5C /* \CD5C */
                    DerefOf (EWRY [One]) [0x72] = CD5D /* \CD5D */
                    DerefOf (EWRY [One]) [0x73] = CD5E /* \CD5E */
                    DerefOf (EWRY [One]) [0x74] = CD5F /* \CD5F */
                    DerefOf (EWRY [One]) [0x75] = CD60 /* \CD60 */
                    DerefOf (EWRY [One]) [0x76] = CD61 /* \CD61 */
                    DerefOf (EWRY [One]) [0x77] = CD62 /* \CD62 */
                    DerefOf (EWRY [One]) [0x78] = CD63 /* \CD63 */
                    DerefOf (EWRY [One]) [0x79] = CD64 /* \CD64 */
                    DerefOf (EWRY [One]) [0x7A] = CD65 /* \CD65 */
                    DerefOf (EWRY [One]) [0x7B] = CD66 /* \CD66 */
                    DerefOf (EWRY [One]) [0x7C] = CD67 /* \CD67 */
                    DerefOf (EWRY [One]) [0x7D] = CD68 /* \CD68 */
                    DerefOf (EWRY [One]) [0x7E] = CD69 /* \CD69 */
                    DerefOf (EWRY [One]) [0x7F] = CD6A /* \CD6A */
                    DerefOf (EWRY [One]) [0x80] = CD6B /* \CD6B */
                    DerefOf (EWRY [One]) [0x81] = CD6C /* \CD6C */
                    DerefOf (EWRY [One]) [0x82] = CD6D /* \CD6D */
                    DerefOf (EWRY [One]) [0x83] = CD6E /* \CD6E */
                    DerefOf (EWRY [One]) [0x84] = CD6F /* \CD6F */
                    DerefOf (EWRY [One]) [0x85] = CD70 /* \CD70 */
                    DerefOf (EWRY [One]) [0x86] = CD71 /* \CD71 */
                    Return (EWRY) /* \_SB_.PC00.RP11.PXSX.EWRY */
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    DerefOf (WGDY [One]) [One] = SDGN /* \SDGN */
                    DerefOf (WGDY [One]) [0x02] = SD11 /* \SD11 */
                    DerefOf (WGDY [One]) [0x03] = SD12 /* \SD12 */
                    DerefOf (WGDY [One]) [0x04] = SD13 /* \SD13 */
                    DerefOf (WGDY [One]) [0x05] = SD14 /* \SD14 */
                    DerefOf (WGDY [One]) [0x06] = SD15 /* \SD15 */
                    DerefOf (WGDY [One]) [0x07] = SD16 /* \SD16 */
                    DerefOf (WGDY [One]) [0x08] = SD17 /* \SD17 */
                    DerefOf (WGDY [One]) [0x09] = SD18 /* \SD18 */
                    DerefOf (WGDY [One]) [0x0A] = SD19 /* \SD19 */
                    DerefOf (WGDY [One]) [0x0B] = SD21 /* \SD21 */
                    DerefOf (WGDY [One]) [0x0C] = SD22 /* \SD22 */
                    DerefOf (WGDY [One]) [0x0D] = SD23 /* \SD23 */
                    DerefOf (WGDY [One]) [0x0E] = SD24 /* \SD24 */
                    DerefOf (WGDY [One]) [0x0F] = SD25 /* \SD25 */
                    DerefOf (WGDY [One]) [0x10] = SD26 /* \SD26 */
                    DerefOf (WGDY [One]) [0x11] = SD27 /* \SD27 */
                    DerefOf (WGDY [One]) [0x12] = SD28 /* \SD28 */
                    DerefOf (WGDY [One]) [0x13] = SD29 /* \SD29 */
                    DerefOf (WGDY [One]) [0x14] = SD31 /* \SD31 */
                    DerefOf (WGDY [One]) [0x15] = SD32 /* \SD32 */
                    DerefOf (WGDY [One]) [0x16] = SD33 /* \SD33 */
                    DerefOf (WGDY [One]) [0x17] = SD34 /* \SD34 */
                    DerefOf (WGDY [One]) [0x18] = SD35 /* \SD35 */
                    DerefOf (WGDY [One]) [0x19] = SD36 /* \SD36 */
                    DerefOf (WGDY [One]) [0x1A] = SD37 /* \SD37 */
                    DerefOf (WGDY [One]) [0x1B] = SD38 /* \SD38 */
                    DerefOf (WGDY [One]) [0x1C] = SD39 /* \SD39 */
                    DerefOf (WGDY [One]) [0x1D] = SD41 /* \SD41 */
                    DerefOf (WGDY [One]) [0x1E] = SD42 /* \SD42 */
                    DerefOf (WGDY [One]) [0x1F] = SD43 /* \SD43 */
                    DerefOf (WGDY [One]) [0x20] = SD44 /* \SD44 */
                    DerefOf (WGDY [One]) [0x21] = SD45 /* \SD45 */
                    DerefOf (WGDY [One]) [0x22] = SD46 /* \SD46 */
                    DerefOf (WGDY [One]) [0x23] = SD47 /* \SD47 */
                    DerefOf (WGDY [One]) [0x24] = SD48 /* \SD48 */
                    DerefOf (WGDY [One]) [0x25] = SD49 /* \SD49 */
                    DerefOf (WGDY [One]) [0x26] = SD51 /* \SD51 */
                    DerefOf (WGDY [One]) [0x27] = SD52 /* \SD52 */
                    DerefOf (WGDY [One]) [0x28] = SD53 /* \SD53 */
                    DerefOf (WGDY [One]) [0x29] = SD54 /* \SD54 */
                    DerefOf (WGDY [One]) [0x2A] = SD55 /* \SD55 */
                    DerefOf (WGDY [One]) [0x2B] = SD56 /* \SD56 */
                    DerefOf (WGDY [One]) [0x2C] = SD57 /* \SD57 */
                    DerefOf (WGDY [One]) [0x2D] = SD58 /* \SD58 */
                    DerefOf (WGDY [One]) [0x2E] = SD59 /* \SD59 */
                    DerefOf (WGDY [One]) [0x2F] = SD61 /* \SD61 */
                    DerefOf (WGDY [One]) [0x30] = SD62 /* \SD62 */
                    DerefOf (WGDY [One]) [0x31] = SD63 /* \SD63 */
                    DerefOf (WGDY [One]) [0x32] = SD64 /* \SD64 */
                    DerefOf (WGDY [One]) [0x33] = SD65 /* \SD65 */
                    DerefOf (WGDY [One]) [0x34] = SD66 /* \SD66 */
                    DerefOf (WGDY [One]) [0x35] = SD67 /* \SD67 */
                    DerefOf (WGDY [One]) [0x36] = SD68 /* \SD68 */
                    DerefOf (WGDY [One]) [0x37] = SD69 /* \SD69 */
                    DerefOf (WGDY [One]) [0x38] = SD71 /* \SD71 */
                    DerefOf (WGDY [One]) [0x39] = SD72 /* \SD72 */
                    DerefOf (WGDY [One]) [0x3A] = SD73 /* \SD73 */
                    DerefOf (WGDY [One]) [0x3B] = SD74 /* \SD74 */
                    DerefOf (WGDY [One]) [0x3C] = SD75 /* \SD75 */
                    DerefOf (WGDY [One]) [0x3D] = SD76 /* \SD76 */
                    DerefOf (WGDY [One]) [0x3E] = SD77 /* \SD77 */
                    DerefOf (WGDY [One]) [0x3F] = SD78 /* \SD78 */
                    DerefOf (WGDY [One]) [0x40] = SD79 /* \SD79 */
                    DerefOf (WGDY [One]) [0x41] = SD81 /* \SD81 */
                    DerefOf (WGDY [One]) [0x42] = SD82 /* \SD82 */
                    DerefOf (WGDY [One]) [0x43] = SD83 /* \SD83 */
                    DerefOf (WGDY [One]) [0x44] = SD84 /* \SD84 */
                    DerefOf (WGDY [One]) [0x45] = SD85 /* \SD85 */
                    DerefOf (WGDY [One]) [0x46] = SD86 /* \SD86 */
                    DerefOf (WGDY [One]) [0x47] = SD87 /* \SD87 */
                    DerefOf (WGDY [One]) [0x48] = SD88 /* \SD88 */
                    DerefOf (WGDY [One]) [0x49] = SD89 /* \SD89 */
                    Return (WGDY) /* \_SB_.PC00.RP11.PXSX.WGDY */
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                    Return (ECKY) /* \_SB_.PC00.RP11.PXSX.ECKY */
                }

                Name (PPAY, Package (0x02)
                {
                    0x02, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    DerefOf (PPAY [One]) [One] = WAGM /* \WAGM */
                    DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                    DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                    DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                    DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                    DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                    DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                    DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                    DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                    DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                    DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                    DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                    DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                    DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                    DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                    DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                    DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                    DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                    DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                    DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                    DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                    DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                    DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                    Return (PPAY) /* \_SB_.PC00.RP11.PXSX.PPAY */
                }

                Name (WPFY, Package (0x02)
                {
                    Zero, 
                    Package (0x05)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WPFC, 0, Serialized)
                {
                    DerefOf (WPFY [One]) [One] = WPFA /* \WPFA */
                    DerefOf (WPFY [One]) [0x02] = WPFB /* \WPFB */
                    DerefOf (WPFY [One]) [0x03] = \WPFC
                    DerefOf (WPFY [One]) [0x04] = WPFD /* \WPFD */
                    Return (WPFY) /* \_SB_.PC00.RP11.PXSX.WPFY */
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    DerefOf (WTSY [One]) [One] = WTSE /* \WTSE */
                    DerefOf (WTSY [One]) [0x02] = WTLE /* \WTLE */
                    DerefOf (WTSY [One]) [0x03] = BL01 /* \BL01 */
                    DerefOf (WTSY [One]) [0x04] = BL02 /* \BL02 */
                    DerefOf (WTSY [One]) [0x05] = BL03 /* \BL03 */
                    DerefOf (WTSY [One]) [0x06] = BL04 /* \BL04 */
                    DerefOf (WTSY [One]) [0x07] = BL05 /* \BL05 */
                    DerefOf (WTSY [One]) [0x08] = BL06 /* \BL06 */
                    DerefOf (WTSY [One]) [0x09] = BL07 /* \BL07 */
                    DerefOf (WTSY [One]) [0x0A] = BL08 /* \BL08 */
                    DerefOf (WTSY [One]) [0x0B] = BL09 /* \BL09 */
                    DerefOf (WTSY [One]) [0x0C] = BL10 /* \BL10 */
                    DerefOf (WTSY [One]) [0x0D] = BL11 /* \BL11 */
                    DerefOf (WTSY [One]) [0x0E] = BL12 /* \BL12 */
                    DerefOf (WTSY [One]) [0x0F] = BL13 /* \BL13 */
                    DerefOf (WTSY [One]) [0x10] = BL14 /* \BL14 */
                    DerefOf (WTSY [One]) [0x11] = BL15 /* \BL15 */
                    DerefOf (WTSY [One]) [0x12] = BL16 /* \BL16 */
                    Return (WTSY) /* \_SB_.PC00.RP11.PXSX.WTSY */
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    DerefOf (WAIY [One]) [One] = WLBI /* \WLBI */
                    DerefOf (WAIY [One]) [0x02] = WHBI /* \WHBI */
                    Return (WAIY) /* \_SB_.PC00.RP11.PXSX.WAIY */
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PC00.RP11.PXSX.SADX */
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PC00.RP11.PXSX.GPCX */
                }

                Name (GLAX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Zero
                    }
                })
                Method (GLAI, 0, Serialized)
                {
                    ADBG (Concatenate ("AR: GLAI method. CGLS = ", ToHexString (CGLS)))
                    DerefOf (GLAX [One]) [One] = CGLS /* \CGLS */
                    DerefOf (GLAX [0x02]) [One] = CGLS /* \CGLS */
                    Return (GLAX) /* \_SB_.PC00.RP11.PXSX.GLAX */
                }
            }

            If (((WWEN != Zero) && (WWRP == SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If ((GGOV (PRST) != WPRP))
                    {
                        DL23 ()
                        ADBG ("WWAN DL23() Done")
                        SGOV (PRST, WPRP)
                        ADBG ("WWAN PERST:0 Done")
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    ADBG ("WWAN RST:0 Done")
                    If ((Arg0 == Zero))
                    {
                        Sleep (TBTG)
                        ADBG (Concatenate ("SLP TBTG ", ToDecimalString (TBTG)))
                    }
                    ElseIf ((Arg0 == One))
                    {
                        SPCO (WCLK, Zero)
                        ADBG ("WWAN SCLK:0 Done")
                        Sleep (TB2F)
                        ADBG (Concatenate ("SLP TB2F ", ToDecimalString (TB2F)))
                        SGOV (WFCP, (~PFCP & One))
                        ADBG ("WWAN PWR:0 Done")
                        Sleep (TFDI)
                        ADBG (Concatenate ("SLP TFDI ", ToDecimalString (TFDI)))
                    }
                    Else
                    {
                        ADBG ("Unsupported Arg0 is detected.")
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    ADBG ("WWAN MPHYPG:0 Done")
                    SPCO (WCLK, One)
                    ADBG ("WWAN SCLK:1 Done")
                    SGOV (WFCP, PFCP)
                    ADBG ("WWAN PWR:1 Done")
                    Sleep (TN2B)
                    ADBG (Concatenate ("SLP TN2B ", ToDecimalString (TN2B)))
                    SGOV (WBRS, (~PBRS & One))
                    ADBG ("WWAN RST:1 Done")
                    Sleep (TB2R)
                    ADBG (Concatenate ("SLP TB2R ", ToDecimalString (TB2R)))
                    SGOV (PRST, (~WPRP & One))
                    ADBG ("WWAN PERST:0 Done")
                    L23D ()
                    ADBG ("WWAN L23D() Done")
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Local0 = Zero
                    While (((SVID != WSID) && (Local0 < WSTO)))
                    {
                        Local0++
                        Sleep (One)
                    }

                    ADBG (Concatenate ("DET Time ", ToDecimalString (Local0)))
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    ADBG ("_RST WWAN")
                    If ((WWEN == 0x02))
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN FLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN FLDR")
                            FHRF (Zero)
                            SHRF ()
                            ADBG ("End WWAN FLDR")
                            Release (WWMT)
                            ADBG ("WWAN FLDR Mutex:Release Done")
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One) // Device Check
                        SGOV (PRST, (~WPRP & One))
                        SGOV (WBRS, (~PBRS & One))
                        Sleep (0xC8)
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x14))
                            {
                                ADBG ("FLDR TO")
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        Sleep (0x0A)
                        ADBG (Concatenate ("RVP Delay Time ", ToDecimalString (Local0)))
                        Notify (PXSX, One) // Device Check
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        ADBG ("WWAN PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        ADBG ("WWAN PR _ON")
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        ADBG ("WWAN PR _OFF")
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN PLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN PLDR")
                            FHRF (One)
                            SHRF ()
                            ADBG ("End WWAN PR _RST")
                            Release (WWMT)
                            ADBG ("WWAN PLDR Mutex: Release Done")
                            DOSV ()
                        }
                    }
                }
            }

            If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
            {
                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        WRST
                    })
                }

                Name (FDEL, Zero)
                Name (PDEL, Zero)
                Name (VDEL, Zero)
                Method (IFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x1F                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        ADBG (Concatenate ("vPro: ", CVPR))
                        Local0 = (CVPR << Zero)
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        ADBG (Concatenate ("CmdType = ", ToHexString (CMDT)))
                        ADBG (Concatenate ("CmdPayload = ", ToHexString (CMDP)))
                        If ((CMDT == One))
                        {
                            If (WIST ())
                            {
                                Return (RSTY) /* \_SB_.PC00.RP11.PXSX.RSTY */
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Get _PRR Mode = ", ^^^CNVW.RSTT))
                                Return (^^^CNVW.RSTT) /* \_SB_.PC00.CNVW.RSTT */
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((CMDT == 0x02))
                        {
                            If (WIST ())
                            {
                                Local0 = (CMDP & One)
                                RSTY = Local0
                                Local1 = (CMDP & 0x02)
                                Local1 >>= One
                                FLRC = Local1
                                Local2 = (CMDP & 0x04)
                                Local2 >>= 0x02
                                BOFC = Local2
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Set _PRR Mode = ", ToHexString (CMDP)))
                                ^^^CNVW.RSTT = CMDP /* \_SB_.PC00.RP11.PXSX.IFUN.CMDP */
                            }

                            Return (Zero)
                        }

                        If ((CMDT == 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                ADBG (Concatenate ("Get Last_PRR status PRRS = ", ToHexString (^^^CNVW.PRRS)))
                                Return (^^^CNVW.PRRS) /* \_SB_.PC00.CNVW.PRRS */
                            }
                            ElseIf (WIST ())
                            {
                                ADBG (Concatenate ("Get Last_PRR status DPRS = ", ToHexString (DPRS)))
                                Return (DPRS) /* \_SB_.PC00.RP11.PXSX.DPRS */
                            }
                        }

                        Return (Zero)
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((CRFI == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        CreateWordField (Arg3, Zero, PRTT)
                        CreateWordField (Arg3, 0x02, PRTD)
                        ADBG (Concatenate ("TimerType = ", ToHexString (PRTT)))
                        ADBG (Concatenate ("TimerDuration (ms) = ", ToDecimalString (PRTD)))
                        If ((PRTT == One))
                        {
                            FDEL = PRTD /* \_SB_.PC00.RP11.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x02))
                        {
                            PDEL = PRTD /* \_SB_.PC00.RP11.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x03))
                        {
                            VDEL = PRTD /* \_SB_.PC00.RP11.PXSX.IFUN.PRTD */
                        }
                        Else
                        {
                            ADBG ("TimerDuration not set")
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x1F                                       // ..
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Local0 = ACSD /* \ACSD */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Local0 = I5BS /* \I5BS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 = UHBS /* \UHBS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x06))
                    {
                        Local0 = AXMU /* \AXMU */
                        Local0 <<= One
                        Local0 |= AXSU /* \AXSU */
                        Local1 = AXMR /* \AXMR */
                        Local1 <<= One
                        Local1 |= AXSR /* \AXSR */
                        Local1 <<= 0x02
                        Local0 |= Local1
                        Return (Local0)
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (WFRC) /* \WFRC */
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (WFUC) /* \WFUC */
                    }

                    If ((Arg2 == 0x07))
                    {
                        Return (UNI4) /* \UNI4 */
                    }

                    If ((Arg2 == 0x08))
                    {
                        Return (WFIC) /* \WFIC */
                    }

                    If ((Arg2 == 0x09))
                    {
                        Return (WFBS) /* \WFBS */
                    }

                    If ((Arg2 == 0x0A))
                    {
                        Return (WEDT) /* \WEDT */
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((CIRM == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        Return (WF7C) /* \WF7C */
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                        {
                            If ((Arg2 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                             // .
                                })
                            }

                            If ((Arg2 == One)){}
                            If ((Arg2 == 0x02)){}
                            If ((Arg2 == 0x03))
                            {
                                If ((WRTO == One))
                                {
                                    ADBG ("WWAN Power _DSM D0/L1.2")
                                }
                                ElseIf ((WRTO == 0x02))
                                {
                                    ADBG ("WWAN Power _DSM D3/L1.2")
                                }
                                ElseIf ((WRTO == 0x03))
                                {
                                    ADBG ("WWAN Power _DSM D3/L2")
                                }
                                Else
                                {
                                    ADBG ("WWAN Power _DSM Disabled")
                                }

                                Return (WRTO) /* \WRTO */
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP12.PXSX))
    {
        Scope (_SB.PC00.RP12.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (PBNU, ^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WDCO), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            OperationRegion (VSEC, SystemMemory, (GMIO (PBNU, ^_ADR, _ADR) + WVHO), 0x10)
            Field (VSEC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x0C), 
                    ,   1, 
                BTIE,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                Offset (0x0D), 
                PDRC,   1
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Case (0x272B8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            If ((SVDC == One))
                            {
                                Return (One)
                            }

                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Case (0x080014C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                Name (RSTY, Zero)
                Name (FLRC, Zero)
                Name (BOFC, Zero)
                Name (DPRS, Zero)
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("Wifi PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("Wifi PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("Wifi PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If ((RSTY == One))
                        {
                            ADBG ("Wifi Product RST")
                            Local0 = Acquire (CNMT, 0x03E8)
                            If ((Local0 == Zero))
                            {
                                If ((FLRC == One))
                                {
                                    Local0 = DCTR /* \_SB_.PC00.RP12.PXSX.DCTR */
                                    Local0 |= 0x8000
                                    DCTR = Local0
                                    Sleep (FDEL)
                                }

                                DPRS = One
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (Zero)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = Zero
                                    }

                                    Sleep (RDLY)
                                }

                                PDRC = One
                                Sleep (VDEL)
                                SGOV (WLRT, Zero)
                                Sleep (PDEL)
                                SGOV (WLRT, One)
                                If ((BOFC == One))
                                {
                                    If ((BRMT == Zero))
                                    {
                                        BTRK (One)
                                    }
                                    ElseIf ((WVHO != Zero))
                                    {
                                        BTIE = One
                                    }

                                    Sleep (RDLY)
                                }

                                DPRS = 0x02
                                Release (CNMT)
                            }
                        }
                        Else
                        {
                            ADBG ("Wifi Core RST")
                            If ((DCAP & 0x10000000))
                            {
                                Local0 = DCTR /* \_SB_.PC00.RP12.PXSX.DCTR */
                                Local0 |= 0x8000
                                DCTR = Local0
                            }

                            DPRS = One
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                    DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                    DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                    Return (SPLX) /* \_SB_.PC00.RP12.PXSX.SPLX */
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                    DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                    DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                    Return (WANX) /* \_SB_.PC00.RP12.PXSX.WANX */
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                    DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                    Return (WRDX) /* \_SB_.PC00.RP12.PXSX.WRDX */
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                    DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                    DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                    DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                    DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                    DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                    DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                    DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                    DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                    DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                    DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                    DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                    DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                    DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                    DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                    DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                    DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                    DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                    DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                    DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                    DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                    DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                    DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                    DerefOf (WRDY [One]) [0x18] = CD10 /* \CD10 */
                    DerefOf (WRDY [One]) [0x19] = CD11 /* \CD11 */
                    DerefOf (WRDY [One]) [0x1A] = CD12 /* \CD12 */
                    DerefOf (WRDY [One]) [0x1B] = CD13 /* \CD13 */
                    DerefOf (WRDY [One]) [0x1C] = CD14 /* \CD14 */
                    DerefOf (WRDY [One]) [0x1D] = CD15 /* \CD15 */
                    DerefOf (WRDY [One]) [0x1E] = CD16 /* \CD16 */
                    DerefOf (WRDY [One]) [0x1F] = CD17 /* \CD17 */
                    DerefOf (WRDY [One]) [0x20] = CD18 /* \CD18 */
                    DerefOf (WRDY [One]) [0x21] = CD19 /* \CD19 */
                    DerefOf (WRDY [One]) [0x22] = CD1A /* \CD1A */
                    DerefOf (WRDY [One]) [0x23] = CD20 /* \CD20 */
                    DerefOf (WRDY [One]) [0x24] = CD21 /* \CD21 */
                    DerefOf (WRDY [One]) [0x25] = CD22 /* \CD22 */
                    DerefOf (WRDY [One]) [0x26] = CD23 /* \CD23 */
                    DerefOf (WRDY [One]) [0x27] = CD24 /* \CD24 */
                    DerefOf (WRDY [One]) [0x28] = CD25 /* \CD25 */
                    DerefOf (WRDY [One]) [0x29] = CD26 /* \CD26 */
                    DerefOf (WRDY [One]) [0x2A] = CD27 /* \CD27 */
                    DerefOf (WRDY [One]) [0x2B] = CD28 /* \CD28 */
                    DerefOf (WRDY [One]) [0x2C] = CD29 /* \CD29 */
                    DerefOf (WRDY [One]) [0x2D] = CD2A /* \CD2A */
                    Return (WRDY) /* \_SB_.PC00.RP12.PXSX.WRDY */
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                    DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                    DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                    DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                    DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                    DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                    DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                    DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                    DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                    DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                    DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                    DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                    DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                    DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                    DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                    DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                    DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                    DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                    DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                    DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                    DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                    DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                    DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                    DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                    DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                    DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                    DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                    DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                    DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                    DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                    DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                    DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                    DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                    DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                    DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                    DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                    DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                    DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                    DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                    DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                    DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                    DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                    DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                    DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                    DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                    DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                    DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                    DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                    DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                    DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                    DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                    DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                    DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                    DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                    DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                    DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                    DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                    DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                    DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                    DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                    DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                    DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                    DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                    DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                    DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                    DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                    DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                    DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                    DerefOf (EWRY [One]) [0x45] = CD30 /* \CD30 */
                    DerefOf (EWRY [One]) [0x46] = CD31 /* \CD31 */
                    DerefOf (EWRY [One]) [0x47] = CD32 /* \CD32 */
                    DerefOf (EWRY [One]) [0x48] = CD33 /* \CD33 */
                    DerefOf (EWRY [One]) [0x49] = CD34 /* \CD34 */
                    DerefOf (EWRY [One]) [0x4A] = CD35 /* \CD35 */
                    DerefOf (EWRY [One]) [0x4B] = CD36 /* \CD36 */
                    DerefOf (EWRY [One]) [0x4C] = CD37 /* \CD37 */
                    DerefOf (EWRY [One]) [0x4D] = CD38 /* \CD38 */
                    DerefOf (EWRY [One]) [0x4E] = CD39 /* \CD39 */
                    DerefOf (EWRY [One]) [0x4F] = CD3A /* \CD3A */
                    DerefOf (EWRY [One]) [0x50] = CD3B /* \CD3B */
                    DerefOf (EWRY [One]) [0x51] = CD3C /* \CD3C */
                    DerefOf (EWRY [One]) [0x52] = CD3D /* \CD3D */
                    DerefOf (EWRY [One]) [0x53] = CD3E /* \CD3E */
                    DerefOf (EWRY [One]) [0x54] = CD3F /* \CD3F */
                    DerefOf (EWRY [One]) [0x55] = CD40 /* \CD40 */
                    DerefOf (EWRY [One]) [0x56] = CD41 /* \CD41 */
                    DerefOf (EWRY [One]) [0x57] = CD42 /* \CD42 */
                    DerefOf (EWRY [One]) [0x58] = CD43 /* \CD43 */
                    DerefOf (EWRY [One]) [0x59] = CD44 /* \CD44 */
                    DerefOf (EWRY [One]) [0x5A] = CD45 /* \CD45 */
                    DerefOf (EWRY [One]) [0x5B] = CD46 /* \CD46 */
                    DerefOf (EWRY [One]) [0x5C] = CD47 /* \CD47 */
                    DerefOf (EWRY [One]) [0x5D] = CD48 /* \CD48 */
                    DerefOf (EWRY [One]) [0x5E] = CD49 /* \CD49 */
                    DerefOf (EWRY [One]) [0x5F] = CD4A /* \CD4A */
                    DerefOf (EWRY [One]) [0x60] = CD4B /* \CD4B */
                    DerefOf (EWRY [One]) [0x61] = CD4C /* \CD4C */
                    DerefOf (EWRY [One]) [0x62] = CD4D /* \CD4D */
                    DerefOf (EWRY [One]) [0x63] = CD4E /* \CD4E */
                    DerefOf (EWRY [One]) [0x64] = CD4F /* \CD4F */
                    DerefOf (EWRY [One]) [0x65] = CD50 /* \CD50 */
                    DerefOf (EWRY [One]) [0x66] = CD51 /* \CD51 */
                    DerefOf (EWRY [One]) [0x67] = CD52 /* \CD52 */
                    DerefOf (EWRY [One]) [0x68] = CD53 /* \CD53 */
                    DerefOf (EWRY [One]) [0x69] = CD54 /* \CD54 */
                    DerefOf (EWRY [One]) [0x6A] = CD55 /* \CD55 */
                    DerefOf (EWRY [One]) [0x6B] = CD56 /* \CD56 */
                    DerefOf (EWRY [One]) [0x6C] = CD57 /* \CD57 */
                    DerefOf (EWRY [One]) [0x6D] = CD58 /* \CD58 */
                    DerefOf (EWRY [One]) [0x6E] = CD59 /* \CD59 */
                    DerefOf (EWRY [One]) [0x6F] = CD5A /* \CD5A */
                    DerefOf (EWRY [One]) [0x70] = CD5B /* \CD5B */
                    DerefOf (EWRY [One]) [0x71] = CD5C /* \CD5C */
                    DerefOf (EWRY [One]) [0x72] = CD5D /* \CD5D */
                    DerefOf (EWRY [One]) [0x73] = CD5E /* \CD5E */
                    DerefOf (EWRY [One]) [0x74] = CD5F /* \CD5F */
                    DerefOf (EWRY [One]) [0x75] = CD60 /* \CD60 */
                    DerefOf (EWRY [One]) [0x76] = CD61 /* \CD61 */
                    DerefOf (EWRY [One]) [0x77] = CD62 /* \CD62 */
                    DerefOf (EWRY [One]) [0x78] = CD63 /* \CD63 */
                    DerefOf (EWRY [One]) [0x79] = CD64 /* \CD64 */
                    DerefOf (EWRY [One]) [0x7A] = CD65 /* \CD65 */
                    DerefOf (EWRY [One]) [0x7B] = CD66 /* \CD66 */
                    DerefOf (EWRY [One]) [0x7C] = CD67 /* \CD67 */
                    DerefOf (EWRY [One]) [0x7D] = CD68 /* \CD68 */
                    DerefOf (EWRY [One]) [0x7E] = CD69 /* \CD69 */
                    DerefOf (EWRY [One]) [0x7F] = CD6A /* \CD6A */
                    DerefOf (EWRY [One]) [0x80] = CD6B /* \CD6B */
                    DerefOf (EWRY [One]) [0x81] = CD6C /* \CD6C */
                    DerefOf (EWRY [One]) [0x82] = CD6D /* \CD6D */
                    DerefOf (EWRY [One]) [0x83] = CD6E /* \CD6E */
                    DerefOf (EWRY [One]) [0x84] = CD6F /* \CD6F */
                    DerefOf (EWRY [One]) [0x85] = CD70 /* \CD70 */
                    DerefOf (EWRY [One]) [0x86] = CD71 /* \CD71 */
                    Return (EWRY) /* \_SB_.PC00.RP12.PXSX.EWRY */
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    DerefOf (WGDY [One]) [One] = SDGN /* \SDGN */
                    DerefOf (WGDY [One]) [0x02] = SD11 /* \SD11 */
                    DerefOf (WGDY [One]) [0x03] = SD12 /* \SD12 */
                    DerefOf (WGDY [One]) [0x04] = SD13 /* \SD13 */
                    DerefOf (WGDY [One]) [0x05] = SD14 /* \SD14 */
                    DerefOf (WGDY [One]) [0x06] = SD15 /* \SD15 */
                    DerefOf (WGDY [One]) [0x07] = SD16 /* \SD16 */
                    DerefOf (WGDY [One]) [0x08] = SD17 /* \SD17 */
                    DerefOf (WGDY [One]) [0x09] = SD18 /* \SD18 */
                    DerefOf (WGDY [One]) [0x0A] = SD19 /* \SD19 */
                    DerefOf (WGDY [One]) [0x0B] = SD21 /* \SD21 */
                    DerefOf (WGDY [One]) [0x0C] = SD22 /* \SD22 */
                    DerefOf (WGDY [One]) [0x0D] = SD23 /* \SD23 */
                    DerefOf (WGDY [One]) [0x0E] = SD24 /* \SD24 */
                    DerefOf (WGDY [One]) [0x0F] = SD25 /* \SD25 */
                    DerefOf (WGDY [One]) [0x10] = SD26 /* \SD26 */
                    DerefOf (WGDY [One]) [0x11] = SD27 /* \SD27 */
                    DerefOf (WGDY [One]) [0x12] = SD28 /* \SD28 */
                    DerefOf (WGDY [One]) [0x13] = SD29 /* \SD29 */
                    DerefOf (WGDY [One]) [0x14] = SD31 /* \SD31 */
                    DerefOf (WGDY [One]) [0x15] = SD32 /* \SD32 */
                    DerefOf (WGDY [One]) [0x16] = SD33 /* \SD33 */
                    DerefOf (WGDY [One]) [0x17] = SD34 /* \SD34 */
                    DerefOf (WGDY [One]) [0x18] = SD35 /* \SD35 */
                    DerefOf (WGDY [One]) [0x19] = SD36 /* \SD36 */
                    DerefOf (WGDY [One]) [0x1A] = SD37 /* \SD37 */
                    DerefOf (WGDY [One]) [0x1B] = SD38 /* \SD38 */
                    DerefOf (WGDY [One]) [0x1C] = SD39 /* \SD39 */
                    DerefOf (WGDY [One]) [0x1D] = SD41 /* \SD41 */
                    DerefOf (WGDY [One]) [0x1E] = SD42 /* \SD42 */
                    DerefOf (WGDY [One]) [0x1F] = SD43 /* \SD43 */
                    DerefOf (WGDY [One]) [0x20] = SD44 /* \SD44 */
                    DerefOf (WGDY [One]) [0x21] = SD45 /* \SD45 */
                    DerefOf (WGDY [One]) [0x22] = SD46 /* \SD46 */
                    DerefOf (WGDY [One]) [0x23] = SD47 /* \SD47 */
                    DerefOf (WGDY [One]) [0x24] = SD48 /* \SD48 */
                    DerefOf (WGDY [One]) [0x25] = SD49 /* \SD49 */
                    DerefOf (WGDY [One]) [0x26] = SD51 /* \SD51 */
                    DerefOf (WGDY [One]) [0x27] = SD52 /* \SD52 */
                    DerefOf (WGDY [One]) [0x28] = SD53 /* \SD53 */
                    DerefOf (WGDY [One]) [0x29] = SD54 /* \SD54 */
                    DerefOf (WGDY [One]) [0x2A] = SD55 /* \SD55 */
                    DerefOf (WGDY [One]) [0x2B] = SD56 /* \SD56 */
                    DerefOf (WGDY [One]) [0x2C] = SD57 /* \SD57 */
                    DerefOf (WGDY [One]) [0x2D] = SD58 /* \SD58 */
                    DerefOf (WGDY [One]) [0x2E] = SD59 /* \SD59 */
                    DerefOf (WGDY [One]) [0x2F] = SD61 /* \SD61 */
                    DerefOf (WGDY [One]) [0x30] = SD62 /* \SD62 */
                    DerefOf (WGDY [One]) [0x31] = SD63 /* \SD63 */
                    DerefOf (WGDY [One]) [0x32] = SD64 /* \SD64 */
                    DerefOf (WGDY [One]) [0x33] = SD65 /* \SD65 */
                    DerefOf (WGDY [One]) [0x34] = SD66 /* \SD66 */
                    DerefOf (WGDY [One]) [0x35] = SD67 /* \SD67 */
                    DerefOf (WGDY [One]) [0x36] = SD68 /* \SD68 */
                    DerefOf (WGDY [One]) [0x37] = SD69 /* \SD69 */
                    DerefOf (WGDY [One]) [0x38] = SD71 /* \SD71 */
                    DerefOf (WGDY [One]) [0x39] = SD72 /* \SD72 */
                    DerefOf (WGDY [One]) [0x3A] = SD73 /* \SD73 */
                    DerefOf (WGDY [One]) [0x3B] = SD74 /* \SD74 */
                    DerefOf (WGDY [One]) [0x3C] = SD75 /* \SD75 */
                    DerefOf (WGDY [One]) [0x3D] = SD76 /* \SD76 */
                    DerefOf (WGDY [One]) [0x3E] = SD77 /* \SD77 */
                    DerefOf (WGDY [One]) [0x3F] = SD78 /* \SD78 */
                    DerefOf (WGDY [One]) [0x40] = SD79 /* \SD79 */
                    DerefOf (WGDY [One]) [0x41] = SD81 /* \SD81 */
                    DerefOf (WGDY [One]) [0x42] = SD82 /* \SD82 */
                    DerefOf (WGDY [One]) [0x43] = SD83 /* \SD83 */
                    DerefOf (WGDY [One]) [0x44] = SD84 /* \SD84 */
                    DerefOf (WGDY [One]) [0x45] = SD85 /* \SD85 */
                    DerefOf (WGDY [One]) [0x46] = SD86 /* \SD86 */
                    DerefOf (WGDY [One]) [0x47] = SD87 /* \SD87 */
                    DerefOf (WGDY [One]) [0x48] = SD88 /* \SD88 */
                    DerefOf (WGDY [One]) [0x49] = SD89 /* \SD89 */
                    Return (WGDY) /* \_SB_.PC00.RP12.PXSX.WGDY */
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                    Return (ECKY) /* \_SB_.PC00.RP12.PXSX.ECKY */
                }

                Name (PPAY, Package (0x02)
                {
                    0x02, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    DerefOf (PPAY [One]) [One] = WAGM /* \WAGM */
                    DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                    DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                    DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                    DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                    DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                    DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                    DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                    DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                    DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                    DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                    DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                    DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                    DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                    DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                    DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                    DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                    DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                    DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                    DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                    DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                    DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                    DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                    Return (PPAY) /* \_SB_.PC00.RP12.PXSX.PPAY */
                }

                Name (WPFY, Package (0x02)
                {
                    Zero, 
                    Package (0x05)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WPFC, 0, Serialized)
                {
                    DerefOf (WPFY [One]) [One] = WPFA /* \WPFA */
                    DerefOf (WPFY [One]) [0x02] = WPFB /* \WPFB */
                    DerefOf (WPFY [One]) [0x03] = \WPFC
                    DerefOf (WPFY [One]) [0x04] = WPFD /* \WPFD */
                    Return (WPFY) /* \_SB_.PC00.RP12.PXSX.WPFY */
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    DerefOf (WTSY [One]) [One] = WTSE /* \WTSE */
                    DerefOf (WTSY [One]) [0x02] = WTLE /* \WTLE */
                    DerefOf (WTSY [One]) [0x03] = BL01 /* \BL01 */
                    DerefOf (WTSY [One]) [0x04] = BL02 /* \BL02 */
                    DerefOf (WTSY [One]) [0x05] = BL03 /* \BL03 */
                    DerefOf (WTSY [One]) [0x06] = BL04 /* \BL04 */
                    DerefOf (WTSY [One]) [0x07] = BL05 /* \BL05 */
                    DerefOf (WTSY [One]) [0x08] = BL06 /* \BL06 */
                    DerefOf (WTSY [One]) [0x09] = BL07 /* \BL07 */
                    DerefOf (WTSY [One]) [0x0A] = BL08 /* \BL08 */
                    DerefOf (WTSY [One]) [0x0B] = BL09 /* \BL09 */
                    DerefOf (WTSY [One]) [0x0C] = BL10 /* \BL10 */
                    DerefOf (WTSY [One]) [0x0D] = BL11 /* \BL11 */
                    DerefOf (WTSY [One]) [0x0E] = BL12 /* \BL12 */
                    DerefOf (WTSY [One]) [0x0F] = BL13 /* \BL13 */
                    DerefOf (WTSY [One]) [0x10] = BL14 /* \BL14 */
                    DerefOf (WTSY [One]) [0x11] = BL15 /* \BL15 */
                    DerefOf (WTSY [One]) [0x12] = BL16 /* \BL16 */
                    Return (WTSY) /* \_SB_.PC00.RP12.PXSX.WTSY */
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    DerefOf (WAIY [One]) [One] = WLBI /* \WLBI */
                    DerefOf (WAIY [One]) [0x02] = WHBI /* \WHBI */
                    Return (WAIY) /* \_SB_.PC00.RP12.PXSX.WAIY */
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PC00.RP12.PXSX.SADX */
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PC00.RP12.PXSX.GPCX */
                }

                Name (GLAX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Zero
                    }
                })
                Method (GLAI, 0, Serialized)
                {
                    ADBG (Concatenate ("AR: GLAI method. CGLS = ", ToHexString (CGLS)))
                    DerefOf (GLAX [One]) [One] = CGLS /* \CGLS */
                    DerefOf (GLAX [0x02]) [One] = CGLS /* \CGLS */
                    Return (GLAX) /* \_SB_.PC00.RP12.PXSX.GLAX */
                }
            }

            If (((WWEN != Zero) && (WWRP == SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If ((GGOV (PRST) != WPRP))
                    {
                        DL23 ()
                        ADBG ("WWAN DL23() Done")
                        SGOV (PRST, WPRP)
                        ADBG ("WWAN PERST:0 Done")
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    ADBG ("WWAN RST:0 Done")
                    If ((Arg0 == Zero))
                    {
                        Sleep (TBTG)
                        ADBG (Concatenate ("SLP TBTG ", ToDecimalString (TBTG)))
                    }
                    ElseIf ((Arg0 == One))
                    {
                        SPCO (WCLK, Zero)
                        ADBG ("WWAN SCLK:0 Done")
                        Sleep (TB2F)
                        ADBG (Concatenate ("SLP TB2F ", ToDecimalString (TB2F)))
                        SGOV (WFCP, (~PFCP & One))
                        ADBG ("WWAN PWR:0 Done")
                        Sleep (TFDI)
                        ADBG (Concatenate ("SLP TFDI ", ToDecimalString (TFDI)))
                    }
                    Else
                    {
                        ADBG ("Unsupported Arg0 is detected.")
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    ADBG ("WWAN MPHYPG:0 Done")
                    SPCO (WCLK, One)
                    ADBG ("WWAN SCLK:1 Done")
                    SGOV (WFCP, PFCP)
                    ADBG ("WWAN PWR:1 Done")
                    Sleep (TN2B)
                    ADBG (Concatenate ("SLP TN2B ", ToDecimalString (TN2B)))
                    SGOV (WBRS, (~PBRS & One))
                    ADBG ("WWAN RST:1 Done")
                    Sleep (TB2R)
                    ADBG (Concatenate ("SLP TB2R ", ToDecimalString (TB2R)))
                    SGOV (PRST, (~WPRP & One))
                    ADBG ("WWAN PERST:0 Done")
                    L23D ()
                    ADBG ("WWAN L23D() Done")
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Local0 = Zero
                    While (((SVID != WSID) && (Local0 < WSTO)))
                    {
                        Local0++
                        Sleep (One)
                    }

                    ADBG (Concatenate ("DET Time ", ToDecimalString (Local0)))
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    ADBG ("_RST WWAN")
                    If ((WWEN == 0x02))
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN FLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN FLDR")
                            FHRF (Zero)
                            SHRF ()
                            ADBG ("End WWAN FLDR")
                            Release (WWMT)
                            ADBG ("WWAN FLDR Mutex:Release Done")
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One) // Device Check
                        SGOV (PRST, (~WPRP & One))
                        SGOV (WBRS, (~PBRS & One))
                        Sleep (0xC8)
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x14))
                            {
                                ADBG ("FLDR TO")
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        Sleep (0x0A)
                        ADBG (Concatenate ("RVP Delay Time ", ToDecimalString (Local0)))
                        Notify (PXSX, One) // Device Check
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        ADBG ("WWAN PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        ADBG ("WWAN PR _ON")
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        ADBG ("WWAN PR _OFF")
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Local0 = Acquire (WWMT, 0x03E8)
                        ADBG ("WWAN PLDR Mutex: Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            ADBG ("Start WWAN PLDR")
                            FHRF (One)
                            SHRF ()
                            ADBG ("End WWAN PR _RST")
                            Release (WWMT)
                            ADBG ("WWAN PLDR Mutex: Release Done")
                            DOSV ()
                        }
                    }
                }
            }

            If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
            {
                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        WRST
                    })
                }

                Name (FDEL, Zero)
                Name (PDEL, Zero)
                Name (VDEL, Zero)
                Method (IFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x1F                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        ADBG (Concatenate ("vPro: ", CVPR))
                        Local0 = (CVPR << Zero)
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        ADBG (Concatenate ("CmdType = ", ToHexString (CMDT)))
                        ADBG (Concatenate ("CmdPayload = ", ToHexString (CMDP)))
                        If ((CMDT == One))
                        {
                            If (WIST ())
                            {
                                Return (RSTY) /* \_SB_.PC00.RP12.PXSX.RSTY */
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Get _PRR Mode = ", ^^^CNVW.RSTT))
                                Return (^^^CNVW.RSTT) /* \_SB_.PC00.CNVW.RSTT */
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((CMDT == 0x02))
                        {
                            If (WIST ())
                            {
                                Local0 = (CMDP & One)
                                RSTY = Local0
                                Local1 = (CMDP & 0x02)
                                Local1 >>= One
                                FLRC = Local1
                                Local2 = (CMDP & 0x04)
                                Local2 >>= 0x02
                                BOFC = Local2
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Set _PRR Mode = ", ToHexString (CMDP)))
                                ^^^CNVW.RSTT = CMDP /* \_SB_.PC00.RP12.PXSX.IFUN.CMDP */
                            }

                            Return (Zero)
                        }

                        If ((CMDT == 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                ADBG (Concatenate ("Get Last_PRR status PRRS = ", ToHexString (^^^CNVW.PRRS)))
                                Return (^^^CNVW.PRRS) /* \_SB_.PC00.CNVW.PRRS */
                            }
                            ElseIf (WIST ())
                            {
                                ADBG (Concatenate ("Get Last_PRR status DPRS = ", ToHexString (DPRS)))
                                Return (DPRS) /* \_SB_.PC00.RP12.PXSX.DPRS */
                            }
                        }

                        Return (Zero)
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((CRFI == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        CreateWordField (Arg3, Zero, PRTT)
                        CreateWordField (Arg3, 0x02, PRTD)
                        ADBG (Concatenate ("TimerType = ", ToHexString (PRTT)))
                        ADBG (Concatenate ("TimerDuration (ms) = ", ToDecimalString (PRTD)))
                        If ((PRTT == One))
                        {
                            FDEL = PRTD /* \_SB_.PC00.RP12.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x02))
                        {
                            PDEL = PRTD /* \_SB_.PC00.RP12.PXSX.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x03))
                        {
                            VDEL = PRTD /* \_SB_.PC00.RP12.PXSX.IFUN.PRTD */
                        }
                        Else
                        {
                            ADBG ("TimerDuration not set")
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x1F                                       // ..
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Local0 = ACSD /* \ACSD */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Local0 = I5BS /* \I5BS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 = UHBS /* \UHBS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x06))
                    {
                        Local0 = AXMU /* \AXMU */
                        Local0 <<= One
                        Local0 |= AXSU /* \AXSU */
                        Local1 = AXMR /* \AXMR */
                        Local1 <<= One
                        Local1 |= AXSR /* \AXSR */
                        Local1 <<= 0x02
                        Local0 |= Local1
                        Return (Local0)
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (WFRC) /* \WFRC */
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (WFUC) /* \WFUC */
                    }

                    If ((Arg2 == 0x07))
                    {
                        Return (UNI4) /* \UNI4 */
                    }

                    If ((Arg2 == 0x08))
                    {
                        Return (WFIC) /* \WFIC */
                    }

                    If ((Arg2 == 0x09))
                    {
                        Return (WFBS) /* \WFBS */
                    }

                    If ((Arg2 == 0x0A))
                    {
                        Return (WEDT) /* \WEDT */
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((CIRM == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        Return (WF7C) /* \WF7C */
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (((WWEN != Zero) && (WWRP == SLOT)))
                    {
                        If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                        {
                            If ((Arg2 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                             // .
                                })
                            }

                            If ((Arg2 == One)){}
                            If ((Arg2 == 0x02)){}
                            If ((Arg2 == 0x03))
                            {
                                If ((WRTO == One))
                                {
                                    ADBG ("WWAN Power _DSM D0/L1.2")
                                }
                                ElseIf ((WRTO == 0x02))
                                {
                                    ADBG ("WWAN Power _DSM D3/L1.2")
                                }
                                ElseIf ((WRTO == 0x03))
                                {
                                    ADBG ("WWAN Power _DSM D3/L2")
                                }
                                Else
                                {
                                    ADBG ("WWAN Power _DSM Disabled")
                                }

                                Return (WRTO) /* \WRTO */
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB)
    {
        Name (PDAT, Zero)
        Name (DSSI, Zero)
        Device (WFDE)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "DSarDev")  // _UID: Unique ID
            Name (_WDG, Buffer (0x3C)
            {
                /* 0000 */  0xEF, 0x9D, 0xC4, 0x2B, 0x15, 0x7B, 0x05, 0x4F,  // ...+.{.O
                /* 0008 */  0x8B, 0xB7, 0xEE, 0x37, 0xB9, 0x54, 0x7C, 0x0B,  // ...7.T|.
                /* 0010 */  0x44, 0x45, 0x01, 0x02, 0x3E, 0xA3, 0xFE, 0xA6,  // DE..>...
                /* 0018 */  0xBF, 0xDA, 0xF5, 0x46, 0xBF, 0xC8, 0x46, 0x0D,  // ...F..F.
                /* 0020 */  0x96, 0x1B, 0xEC, 0x9F, 0xD0, 0x00, 0x01, 0x08,  // ........
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0038 */  0x43, 0x43, 0x01, 0x00                           // CC..
            })
            Method (WMDE, 3, NotSerialized)
            {
                If ((Arg1 == One))
                {
                    Return (One)
                }

                If ((Arg1 == 0x02))
                {
                    If ((DSSI == Zero))
                    {
                        PDAT = 0x00010001
                        DSSI = One
                    }

                    Return (One)
                }

                If ((Arg1 == 0x03))
                {
                    Return (PDAT) /* \_SB_.PDAT */
                }

                Return (Zero)
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xD0))
                {
                    Return (PDAT) /* \_SB_.PDAT */
                }

                Return (Zero)
            }

            Name (WQCC, Buffer (0x0482)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x72, 0x04, 0x00, 0x00, 0xF4, 0x0F, 0x00, 0x00,  // r.......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xC2, 0x87, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0xA4, 0x82, 0x42, 0x04,  // ......B.
                /* 0028 */  0x8A, 0x43, 0x24, 0xC1, 0x0E, 0x60, 0x30, 0x1A,  // .C$..`0.
                /* 0030 */  0x40, 0x24, 0x07, 0x42, 0x2E, 0x98, 0x98, 0x00,  // @$.B....
                /* 0038 */  0x11, 0x10, 0xF2, 0x2A, 0xC0, 0xA6, 0x00, 0x93,  // ...*....
                /* 0040 */  0x20, 0xEA, 0xDF, 0x1F, 0xA2, 0x24, 0x38, 0x94,  //  ....$8.
                /* 0048 */  0x10, 0x08, 0x49, 0x14, 0x60, 0x5E, 0x80, 0x6E,  // ..I.`^.n
                /* 0050 */  0x01, 0x86, 0x05, 0xD8, 0x16, 0x60, 0x5A, 0x80,  // .....`Z.
                /* 0058 */  0x63, 0x48, 0x2A, 0x0D, 0x9C, 0x12, 0x58, 0x0A,  // cH*...X.
                /* 0060 */  0x84, 0x84, 0x0A, 0x50, 0x2E, 0xC0, 0xB7, 0x00,  // ...P....
                /* 0068 */  0xED, 0x88, 0x92, 0x2C, 0xC0, 0x32, 0x8C, 0x08,  // ...,.2..
                /* 0070 */  0x3C, 0x0A, 0x86, 0xC6, 0xA1, 0xB1, 0xC3, 0xB0,  // <.......
                /* 0078 */  0x4C, 0x30, 0x0D, 0xE2, 0x30, 0xCA, 0x46, 0x16,  // L0..0.F.
                /* 0080 */  0x81, 0x71, 0x3B, 0x15, 0x20, 0x57, 0x80, 0x30,  // .q;. W.0
                /* 0088 */  0x01, 0xE2, 0x51, 0x85, 0xD1, 0x1C, 0x14, 0x09,  // ..Q.....
                /* 0090 */  0x00, 0x8D, 0x12, 0x33, 0x26, 0x02, 0xDB, 0x39,  // ...3&..9
                /* 0098 */  0xB6, 0x46, 0x71, 0x2A, 0x85, 0x0B, 0x90, 0x8E,  // .Fq*....
                /* 00A0 */  0xA1, 0x11, 0x1C, 0x57, 0x82, 0xE8, 0xC1, 0x82,  // ...W....
                /* 00A8 */  0x44, 0x8B, 0x13, 0xAD, 0x20, 0x4C, 0xCD, 0x22,  // D... L."
                /* 00B0 */  0x5C, 0x88, 0x28, 0x31, 0x8A, 0x86, 0x21, 0x28,  // \.(1..!(
                /* 00B8 */  0x15, 0x8E, 0x49, 0x3E, 0x41, 0x85, 0x12, 0xD6,  // ..I>A...
                /* 00C0 */  0x48, 0x06, 0x8B, 0x7C, 0x6E, 0x71, 0x3D, 0x07,  // H..|nq=.
                /* 00C8 */  0x4F, 0xEC, 0xF0, 0x8C, 0x53, 0x29, 0x88, 0xD0,  // O...S)..
                /* 00D0 */  0x82, 0x99, 0xC0, 0xE3, 0x3A, 0x20, 0x8C, 0x0C,  // ....: ..
                /* 00D8 */  0x08, 0x79, 0x16, 0x60, 0x7D, 0xA4, 0x84, 0xC0,  // .y.`}...
                /* 00E0 */  0xEE, 0x05, 0x28, 0x9B, 0x85, 0x1C, 0xCE, 0x4D,  // ..(....M
                /* 00E8 */  0x63, 0x3B, 0x82, 0x16, 0x05, 0x68, 0x14, 0x60,  // c;...h.`
                /* 00F0 */  0x4B, 0x80, 0x37, 0x24, 0x19, 0x13, 0x60, 0x0D,  // K.7$..`.
                /* 00F8 */  0x45, 0x58, 0x81, 0xCE, 0x30, 0x8A, 0xC5, 0x41,  // EX..0..A
                /* 0100 */  0x09, 0x21, 0x5A, 0x94, 0x90, 0x11, 0x3A, 0x83,  // .!Z...:.
                /* 0108 */  0x24, 0xC8, 0xD1, 0x22, 0x46, 0x89, 0x1F, 0x32,  // $.."F..2
                /* 0110 */  0x4E, 0xFB, 0x83, 0x20, 0x11, 0xCF, 0x05, 0x92,  // N.. ....
                /* 0118 */  0x70, 0x3C, 0xF0, 0x68, 0x50, 0x67, 0x81, 0x04,  // p<.hPg..
                /* 0120 */  0xCF, 0x06, 0x1E, 0xDF, 0x79, 0x7A, 0x94, 0x06,  // ....yz..
                /* 0128 */  0x39, 0xDF, 0x13, 0xAB, 0xF3, 0x50, 0x40, 0x86,  // 9....P@.
                /* 0130 */  0xCF, 0xB0, 0x12, 0xFC, 0xFF, 0xFF, 0x13, 0x7C,  // .......|
                /* 0138 */  0x4A, 0xC0, 0xBB, 0x06, 0xD4, 0xF5, 0xE0, 0xE1,  // J.......
                /* 0140 */  0x80, 0xCD, 0xD1, 0x70, 0x7C, 0x88, 0x9E, 0xEA,  // ...p|...
                /* 0148 */  0x99, 0xB2, 0x91, 0x30, 0x88, 0x33, 0x7A, 0x2E,  // ...0.3z.
                /* 0150 */  0xC0, 0x0E, 0xEB, 0x64, 0x1E, 0x0A, 0x4A, 0x15,  // ...d..J.
                /* 0158 */  0x60, 0xF6, 0x80, 0xA0, 0xD1, 0x25, 0x38, 0x1E,  // `....%8.
                /* 0160 */  0xCF, 0xDC, 0xF3, 0x39, 0xE1, 0x04, 0x96, 0x3F,  // ...9...?
                /* 0168 */  0x08, 0xD4, 0xC8, 0x0C, 0x6D, 0x83, 0xD3, 0xD2,  // ....m...
                /* 0170 */  0xA5, 0xC0, 0x57, 0x00, 0x13, 0x58, 0xEC, 0x91,  // ..W..X..
                /* 0178 */  0x82, 0x8E, 0x07, 0xFC, 0x8A, 0x6F, 0x09, 0x42,  // .....o.B
                /* 0180 */  0x78, 0x73, 0xF0, 0x7C, 0x4D, 0x10, 0x2D, 0x30,  // xs.|M.-0
                /* 0188 */  0x76, 0x40, 0xF6, 0x2B, 0x00, 0x21, 0xF8, 0x4B,  // v@.+.!.K
                /* 0190 */  0xC4, 0x11, 0xBD, 0x27, 0x44, 0x78, 0x9E, 0xF0,  // ...'Dx..
                /* 0198 */  0x90, 0x1E, 0x08, 0x42, 0xC4, 0xEA, 0xF1, 0xDA,  // ...B....
                /* 01A0 */  0x40, 0xCE, 0x09, 0xBE, 0x5F, 0xF8, 0xE8, 0x80,  // @..._...
                /* 01A8 */  0xBB, 0x39, 0x70, 0x02, 0x8B, 0x3C, 0x4A, 0xA0,  // .9p..<J.
                /* 01B0 */  0x47, 0xC1, 0x8F, 0x02, 0x27, 0x71, 0x4C, 0x67,  // G...'qLg
                /* 01B8 */  0x14, 0xFC, 0x98, 0xA2, 0x9C, 0xC8, 0x41, 0xF9,  // ......A.
                /* 01C0 */  0x90, 0x61, 0x84, 0xE8, 0xCF, 0x16, 0xCF, 0x1A,  // .a......
                /* 01C8 */  0xD6, 0x3C, 0x01, 0x9D, 0x1A, 0xCE, 0xEB, 0x8D,  // .<......
                /* 01D0 */  0xC0, 0x63, 0x94, 0x87, 0x33, 0x01, 0x13, 0xBE,  // .c..3...
                /* 01D8 */  0x5C, 0xD9, 0xF8, 0x40, 0xB0, 0x81, 0x92, 0x28,  // \..@...(
                /* 01E0 */  0xE7, 0x04, 0x8D, 0x2A, 0xE6, 0x09, 0x7A, 0x52,  // ...*..zR
                /* 01E8 */  0xC6, 0x3D, 0x25, 0x1C, 0x12, 0xD3, 0x3A, 0x33,  // .=%...:3
                /* 01F0 */  0x82, 0xF4, 0x94, 0xC1, 0x25, 0x43, 0xEB, 0x90,  // ....%C..
                /* 01F8 */  0xC2, 0xC5, 0x52, 0x48, 0x2A, 0x84, 0x86, 0xE5,  // ..RH*...
                /* 0200 */  0x51, 0x58, 0x1C, 0x1C, 0x05, 0xF1, 0x49, 0xC0,  // QX....I.
                /* 0208 */  0xFF, 0xFF, 0xE0, 0x10, 0x72, 0x72, 0x7A, 0x40,  // ....rrz@
                /* 0210 */  0x4F, 0x04, 0x37, 0x0E, 0x7C, 0x40, 0x08, 0x9D,  // O.7.|@..
                /* 0218 */  0x25, 0x7C, 0x7A, 0xC0, 0xE3, 0x1D, 0xE3, 0x29,  // %|z....)
                /* 0220 */  0x7A, 0x26, 0x9E, 0xEC, 0xF3, 0x08, 0x58, 0xE6,  // z&....X.
                /* 0228 */  0xC7, 0x8E, 0x21, 0xEC, 0x44, 0x82, 0x99, 0x0C,  // ..!.D...
                /* 0230 */  0x7E, 0x2C, 0xEC, 0x47, 0x43, 0x87, 0x41, 0x6E,  // ~,.GC.An
                /* 0238 */  0x0A, 0x27, 0x91, 0x80, 0x9F, 0x18, 0xE0, 0xDF,  // .'......
                /* 0240 */  0x46, 0x3C, 0x83, 0x33, 0x79, 0xFF, 0x78, 0x1A,  // F<.3y.x.
                /* 0248 */  0x49, 0x60, 0x81, 0x27, 0x06, 0x50, 0x00, 0xF9,  // I`.'.P..
                /* 0250 */  0x76, 0xE0, 0x4B, 0xCA, 0x13, 0x02, 0x9B, 0x43,  // v.K....C
                /* 0258 */  0x88, 0x30, 0xD1, 0x0C, 0x8F, 0x09, 0x39, 0x2A,  // .0....9*
                /* 0260 */  0x2A, 0x6B, 0x5C, 0xA8, 0xB1, 0xFA, 0x6C, 0xF0,  // *k\...l.
                /* 0268 */  0xAE, 0x63, 0xEC, 0xD3, 0xF4, 0x05, 0xE6, 0x04,  // .c......
                /* 0270 */  0x5F, 0x15, 0x0E, 0xEA, 0xE5, 0xC2, 0xA7, 0x01,  // _.......
                /* 0278 */  0xC3, 0x7A, 0xF4, 0x1C, 0xD6, 0x68, 0x61, 0x0F,  // .z...ha.
                /* 0280 */  0xFA, 0xC1, 0xC2, 0x97, 0x12, 0xCF, 0xCC, 0x18,  // ........
                /* 0288 */  0x61, 0x7D, 0x02, 0x30, 0xFC, 0x13, 0x00, 0x58,  // a}.0...X
                /* 0290 */  0x0E, 0x17, 0x7C, 0xF8, 0x0F, 0x22, 0x0F, 0x17,  // ..|.."..
                /* 0298 */  0xFC, 0xDA, 0x63, 0xA0, 0xB8, 0x6F, 0x01, 0x38,  // ..c..o.8
                /* 02A0 */  0x3C, 0x9F, 0x05, 0x7C, 0xB7, 0x61, 0xF7, 0x00,  // <..|.a..
                /* 02A8 */  0xCC, 0xFF, 0x5F, 0xF6, 0x61, 0x02, 0x64, 0x83,  // .._.a.d.
                /* 02B0 */  0x3E, 0x80, 0x68, 0xE1, 0x03, 0xFA, 0x1E, 0xF2,  // >.h.....
                /* 02B8 */  0x40, 0xC4, 0x0F, 0x13, 0xE0, 0xDE, 0x8E, 0x27,  // @......'
                /* 02C0 */  0x82, 0x1F, 0x08, 0x3E, 0xDE, 0x69, 0x02, 0x14,  // ...>.i..
                /* 02C8 */  0xF7, 0x83, 0x87, 0x25, 0x70, 0x0E, 0x12, 0xD6,  // ...%p...
                /* 02D0 */  0x61, 0x02, 0x70, 0x12, 0xF1, 0x30, 0x01, 0xBA,  // a.p..0..
                /* 02D8 */  0xB3, 0x80, 0x0F, 0x13, 0xE0, 0xF8, 0xFF, 0x1F,  // ........
                /* 02E0 */  0x26, 0x38, 0x88, 0x0F, 0x13, 0x60, 0x3B, 0xF8,  // &8...`;.
                /* 02E8 */  0x60, 0x0E, 0x13, 0xEC, 0x1A, 0x00, 0x06, 0x99,  // `.......
                /* 02F0 */  0x67, 0x09, 0xD4, 0xD9, 0xCD, 0xD2, 0xCF, 0x12,  // g.......
                /* 02F8 */  0x90, 0x6F, 0x42, 0x18, 0xA1, 0x07, 0x09, 0x94,  // .oB.....
                /* 0300 */  0x44, 0x0A, 0x09, 0x3C, 0x48, 0xA0, 0x24, 0xC1,  // D..<H.$.
                /* 0308 */  0x51, 0x10, 0x8F, 0xD6, 0x71, 0x0F, 0x12, 0xE8,  // Q...q...
                /* 0310 */  0x31, 0xFA, 0x7C, 0x04, 0x2F, 0xD8, 0x31, 0x02,  // 1.|./.1.
                /* 0318 */  0x14, 0x07, 0x04, 0xDC, 0x11, 0x0E, 0x8C, 0x67,  // .......g
                /* 0320 */  0x08, 0xC0, 0xD0, 0xFF, 0xFF, 0x0C, 0x01, 0x0E,  // ........
                /* 0328 */  0x58, 0x7E, 0x86, 0x00, 0xA6, 0xD7, 0x26, 0x58,  // X~....&X
                /* 0330 */  0xE7, 0x03, 0x5C, 0xD0, 0xE7, 0x81, 0x09, 0x24,  // ..\....$
                /* 0338 */  0xF7, 0xB8, 0xA0, 0x68, 0x30, 0x28, 0x0B, 0x27,  // ...h0(.'
                /* 0340 */  0x4B, 0x20, 0x8A, 0xEC, 0x93, 0x25, 0xE6, 0xF0,  // K ...%..
                /* 0348 */  0xE0, 0xD1, 0x82, 0xE3, 0x4E, 0xF0, 0x42, 0xE4,  // ....N.B.
                /* 0350 */  0xC1, 0x7B, 0x90, 0x8F, 0x89, 0x21, 0xA2, 0xBC,  // .{...!..
                /* 0358 */  0xB4, 0x19, 0xEF, 0x9D, 0xED, 0x90, 0xE2, 0x1C,  // ........
                /* 0360 */  0xC8, 0x4B, 0x24, 0x0E, 0x2D, 0xD6, 0x11, 0xFB,  // .K$.-...
                /* 0368 */  0x8E, 0xE0, 0xDB, 0xA4, 0x6F, 0x7E, 0x1C, 0x22,  // ....o~."
                /* 0370 */  0xC8, 0x83, 0xA1, 0x4F, 0x92, 0xB0, 0xB1, 0x6B,  // ...O...k
                /* 0378 */  0xBB, 0x07, 0x68, 0x30, 0x41, 0x1E, 0x20, 0x22,  // ..h0A. "
                /* 0380 */  0x04, 0x39, 0x97, 0xA3, 0x0A, 0xF3, 0xF4, 0xF8,  // .9......
                /* 0388 */  0x2E, 0xE9, 0x89, 0x86, 0xF3, 0x49, 0xD2, 0xFF,  // .....I..
                /* 0390 */  0x7F, 0x20, 0x1F, 0x20, 0x5E, 0x25, 0x43, 0xB1,  // . . ^%C.
                /* 0398 */  0x4B, 0x45, 0xC8, 0x17, 0xC9, 0x20, 0xAF, 0x94,  // KE... ..
                /* 03A0 */  0xC1, 0x22, 0x07, 0x0B, 0x13, 0xEF, 0x49, 0x92,  // ."....I.
                /* 03A8 */  0x89, 0x7D, 0x31, 0xE8, 0xC0, 0xEA, 0x93, 0x24,  // .}1....$
                /* 03B0 */  0xC0, 0x0F, 0x91, 0x27, 0x0A, 0x1D, 0x68, 0x70,  // ...'..hp
                /* 03B8 */  0xA3, 0xF0, 0x81, 0xE1, 0xF5, 0x02, 0x23, 0xEA,  // ......#.
                /* 03C0 */  0x64, 0x41, 0x45, 0x9D, 0x47, 0x50, 0x27, 0x09,  // dAE.GP'.
                /* 03C8 */  0x1F, 0x22, 0x18, 0x28, 0x3F, 0xBD, 0x61, 0x06,  // .".(?.a.
                /* 03D0 */  0x06, 0x1F, 0x10, 0xEF, 0x7D, 0xCA, 0xE4, 0x4E,  // ....}..N
                /* 03D8 */  0x62, 0x40, 0x16, 0xE2, 0x58, 0x01, 0xFD, 0xFF,  // b@..X...
                /* 03E0 */  0x7F, 0xAC, 0xE0, 0xD7, 0x87, 0x38, 0x67, 0x71,  // .....8gq
                /* 03E8 */  0x3E, 0x06, 0x3C, 0x8A, 0xD7, 0x12, 0xCC, 0x20,  // >.<.... 
                /* 03F0 */  0xCE, 0xC1, 0x77, 0x96, 0x28, 0xC6, 0x78, 0xF2,  // ..w.(.x.
                /* 03F8 */  0x30, 0x8C, 0x91, 0x0C, 0xEA, 0x93, 0x1C, 0x76,  // 0......v
                /* 0400 */  0x00, 0xEC, 0xFE, 0x6B, 0x88, 0x40, 0xAF, 0x18,  // ...k.@..
                /* 0408 */  0x7C, 0x6C, 0xEC, 0xAC, 0x03, 0xBE, 0x93, 0xE7,  // |l......
                /* 0410 */  0xB3, 0x29, 0x98, 0x6E, 0x2E, 0xB8, 0xF3, 0xC4,  // .).n....
                /* 0418 */  0x43, 0x08, 0x1F, 0x9B, 0x07, 0xE5, 0x89, 0xB2,  // C.......
                /* 0420 */  0xE3, 0x08, 0xE6, 0x74, 0x0A, 0x4C, 0xAE, 0x48,  // ...t.L.H
                /* 0428 */  0x1E, 0x02, 0x3F, 0x68, 0x78, 0x08, 0x7C, 0x00,  // ..?hx.|.
                /* 0430 */  0xAD, 0xCE, 0x92, 0xDC, 0x4E, 0xCE, 0x0D, 0x77,  // ....N..w
                /* 0438 */  0x52, 0xE0, 0x53, 0xC2, 0x0D, 0x00, 0xA3, 0xD0,  // R.S.....
                /* 0440 */  0xA6, 0x4F, 0x8D, 0x46, 0xAD, 0x1A, 0x94, 0xA9,  // .O.F....
                /* 0448 */  0x51, 0xA6, 0x41, 0xAD, 0x3E, 0x95, 0x1A, 0x33,  // Q.A.>..3
                /* 0450 */  0x76, 0x4A, 0xB0, 0xC0, 0x87, 0x85, 0x4E, 0x0E,  // vJ....N.
                /* 0458 */  0x8E, 0x07, 0x42, 0x23, 0x1D, 0x75, 0x64, 0xE4,  // ..B#.ud.
                /* 0460 */  0x44, 0x6A, 0x10, 0x01, 0x59, 0xCA, 0xE9, 0x55,  // Dj..Y..U
                /* 0468 */  0x40, 0x3E, 0xBF, 0x72, 0xC1, 0x26, 0x80, 0x98,  // @>.r.&..
                /* 0470 */  0x7C, 0x10, 0x01, 0x93, 0x47, 0x83, 0x40, 0x2C,  // |...G.@,
                /* 0478 */  0xC8, 0x06, 0x08, 0x13, 0xAD, 0x03, 0x84, 0xFD,  // ........
                /* 0480 */  0xFF, 0x01                                       // ..
            })
        }

        Device (WFTE)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "TestDev")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x7F, 0xAB, 0x13, 0x1F, 0x20, 0x62, 0x10, 0x42,  // .... b.B
                /* 0008 */  0x8F, 0x8E, 0x8B, 0xB5, 0xE7, 0x1E, 0xE9, 0x69,  // .......i
                /* 0010 */  0x44, 0x45, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // DE..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x43, 0x43, 0x01, 0x00   // ..).CC..
            })
            Method (WMDE, 3, NotSerialized)
            {
                If ((Arg1 == One))
                {
                    PDAT = Arg2
                    Notify (WFDE, 0xD0) // Hardware-Specific
                    Return (PDAT) /* \_SB_.PDAT */
                }

                Return (Zero)
            }

            Name (WQCC, Buffer (0x02F1)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xE1, 0x02, 0x00, 0x00, 0xC2, 0x06, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0xA8, 0x5D, 0x83, 0x00, 0x01, 0x06, 0x18, 0x42,  // .].....B
                /* 0020 */  0x20, 0x14, 0x03, 0x89, 0xC0, 0xA2, 0x69, 0x24,  //  .....i$
                /* 0028 */  0xC7, 0x01, 0x0C, 0x86, 0xCB, 0x72, 0x20, 0xE4,  // .....r .
                /* 0030 */  0x82, 0x89, 0x09, 0x10, 0x01, 0x21, 0xAF, 0x02,  // .....!..
                /* 0038 */  0x6C, 0x0A, 0x30, 0x09, 0xA2, 0xFE, 0xFD, 0x21,  // l.0....!
                /* 0040 */  0x4A, 0x82, 0x43, 0x09, 0x81, 0x90, 0x64, 0x01,  // J.C...d.
                /* 0048 */  0xE6, 0x05, 0xE8, 0x16, 0x60, 0x58, 0x80, 0x6D,  // ....`X.m
                /* 0050 */  0x01, 0xA6, 0x05, 0x38, 0x86, 0xA4, 0xD2, 0xC0,  // ...8....
                /* 0058 */  0x29, 0x81, 0xA5, 0x40, 0x48, 0xB8, 0x00, 0xE5,  // )..@H...
                /* 0060 */  0x02, 0x7C, 0x0B, 0xD0, 0x8E, 0x28, 0xDC, 0x96,  // .|...(..
                /* 0068 */  0x61, 0x44, 0xE0, 0x51, 0x44, 0xB6, 0x50, 0x34,  // aD.QD.P4
                /* 0070 */  0x0A, 0x8D, 0x1D, 0x86, 0x65, 0x82, 0x69, 0x10,  // ....e.i.
                /* 0078 */  0x87, 0x51, 0x36, 0xB2, 0x08, 0x3C, 0xA1, 0x4E,  // .Q6..<.N
                /* 0080 */  0x05, 0xC8, 0x15, 0x20, 0x4C, 0x80, 0x78, 0x54,  // ... L.xT
                /* 0088 */  0x61, 0x34, 0x07, 0x45, 0x20, 0x43, 0x63, 0xC4,  // a4.E Cc.
                /* 0090 */  0x40, 0x48, 0x22, 0xAC, 0x9C, 0x63, 0x6B, 0x14,  // @H"..ck.
                /* 0098 */  0xA7, 0x71, 0x34, 0xA5, 0x63, 0x68, 0x04, 0xC7,  // .q4.ch..
                /* 00A0 */  0x75, 0x40, 0x06, 0xE9, 0x7D, 0x3A, 0x44, 0xD0,  // u@..}:D.
                /* 00A8 */  0x84, 0x34, 0x8A, 0x68, 0x21, 0xA2, 0x04, 0x3D,  // .4.h!..=
                /* 00B0 */  0x8E, 0x20, 0x81, 0x23, 0x24, 0x30, 0xCC, 0x31,  // . .#$0.1
                /* 00B8 */  0x60, 0x64, 0x40, 0xC8, 0xB3, 0x00, 0xEB, 0x83,  // `d@.....
                /* 00C0 */  0x23, 0x04, 0x76, 0x2F, 0xC0, 0x98, 0x00, 0x8D,  // #.v/....
                /* 00C8 */  0x10, 0x72, 0x26, 0xC0, 0xA0, 0x00, 0x85, 0x02,  // .r&.....
                /* 00D0 */  0xBC, 0xC1, 0xC8, 0x96, 0x00, 0x6D, 0x02, 0x94,  // .....m..
                /* 00D8 */  0x21, 0x68, 0x4A, 0x51, 0x0E, 0x2A, 0x48, 0xB8,  // !hJQ.*H.
                /* 00E0 */  0x28, 0x16, 0x87, 0x26, 0x88, 0x16, 0x51, 0x08,  // (..&..Q.
                /* 00E8 */  0x68, 0x84, 0xD6, 0x60, 0x84, 0x1B, 0x2E, 0x46,  // h..`...F
                /* 00F0 */  0x84, 0x93, 0x8B, 0x1C, 0xA2, 0xFD, 0x41, 0x90,  // ......A.
                /* 00F8 */  0x68, 0x47, 0x01, 0x49, 0x00, 0x51, 0xA4, 0xD1,  // hG.I.Q..
                /* 0100 */  0xA0, 0x86, 0x9F, 0xE0, 0x71, 0xC0, 0x47, 0x81,  // ....q.G.
                /* 0108 */  0x93, 0x3B, 0xA9, 0x13, 0x33, 0xC8, 0x89, 0x1D,  // .;..3...
                /* 0110 */  0x5D, 0x9D, 0xE7, 0x00, 0x32, 0x62, 0x86, 0x95,  // ]...2b..
                /* 0118 */  0xE0, 0xD7, 0xC0, 0x07, 0x03, 0xBC, 0x6B, 0x40,  // ......k@
                /* 0120 */  0xDD, 0x08, 0x9E, 0x07, 0xD8, 0x30, 0xC3, 0x61,  // .....0.a
                /* 0128 */  0x86, 0xE8, 0xD1, 0x86, 0xFB, 0xFF, 0x9F, 0xC0,  // ........
                /* 0130 */  0x21, 0x32, 0x40, 0x0F, 0xED, 0x51, 0x00, 0xEB,  // !2@..Q..
                /* 0138 */  0x70, 0x32, 0x3A, 0x07, 0x94, 0x2A, 0xC0, 0xEC,  // p2:..*..
                /* 0140 */  0x99, 0x40, 0x33, 0x4B, 0x70, 0x3C, 0x3E, 0x00,  // .@3Kp<>.
                /* 0148 */  0x78, 0x3E, 0x27, 0x9C, 0xC0, 0xF2, 0x07, 0x81,  // x>'.....
                /* 0150 */  0x1A, 0x99, 0xA1, 0x3D, 0xE3, 0xD3, 0x7A, 0x0F,  // ...=..z.
                /* 0158 */  0xF0, 0xF1, 0xE0, 0xB0, 0x98, 0x58, 0x08, 0x29,  // .....X.)
                /* 0160 */  0x80, 0xD0, 0x78, 0xC0, 0xAF, 0xF8, 0x68, 0x20,  // ..x...h 
                /* 0168 */  0x84, 0x97, 0x05, 0xCF, 0xD7, 0x87, 0x04, 0x03,  // ........
                /* 0170 */  0x63, 0x07, 0x64, 0xBF, 0x02, 0x10, 0x82, 0xBF,  // c.d.....
                /* 0178 */  0x2E, 0x1C, 0xD1, 0x43, 0x43, 0x84, 0x04, 0x2F,  // ...CC../
                /* 0180 */  0x03, 0x47, 0x50, 0x29, 0xBE, 0xB0, 0x0E, 0x21,  // .GP)...!
                /* 0188 */  0x46, 0xA4, 0x18, 0x51, 0x82, 0xD4, 0x0A, 0xA1,  // F..Q....
                /* 0190 */  0xE9, 0x87, 0x49, 0x50, 0xE4, 0xC9, 0x01, 0x3D,  // ..IP...=
                /* 0198 */  0x02, 0x8E, 0x77, 0x02, 0xC7, 0x13, 0xD9, 0xE3,  // ..w.....
                /* 01A0 */  0x89, 0x72, 0x12, 0x07, 0xE4, 0x33, 0x85, 0x11,  // .r...3..
                /* 01A8 */  0x4E, 0xF3, 0x51, 0xE2, 0xD1, 0xC2, 0x9A, 0x67,  // N.Q....g
                /* 01B0 */  0xA4, 0x13, 0xC3, 0x39, 0xBD, 0x0D, 0x98, 0xA0,  // ...9....
                /* 01B8 */  0xB2, 0xE7, 0x80, 0x8E, 0x1F, 0x56, 0x05, 0x22,  // .....V."
                /* 01C0 */  0x1B, 0x4B, 0xF5, 0x39, 0x83, 0x6A, 0x5E, 0xAE,  // .K.9.j^.
                /* 01C8 */  0x46, 0x74, 0xCC, 0xC7, 0xEA, 0x11, 0x9C, 0xB4,  // Ft......
                /* 01D0 */  0xA7, 0x17, 0xD9, 0x4A, 0xC1, 0x04, 0xEC, 0x61,  // ...J...a
                /* 01D8 */  0x5B, 0x23, 0x85, 0xD4, 0xD0, 0x68, 0x3C, 0x06,  // [#...h<.
                /* 01E0 */  0x77, 0xFE, 0x13, 0x09, 0x05, 0x31, 0xA0, 0xC3,  // w....1..
                /* 01E8 */  0x41, 0xC8, 0xC9, 0x49, 0x00, 0xA5, 0x62, 0xBC,  // A..I..b.
                /* 01F0 */  0xE4, 0x68, 0xC1, 0x08, 0xA6, 0x81, 0xD0, 0xDD,  // .h......
                /* 01F8 */  0xC1, 0xF3, 0xF3, 0x3D, 0x80, 0xDF, 0x4C, 0x7C,  // ...=..L|
                /* 0200 */  0x32, 0x30, 0xB0, 0xEF, 0x13, 0x6F, 0x1C, 0xF0,  // 20...o..
                /* 0208 */  0xFF, 0xFF, 0x37, 0x0E, 0x36, 0x09, 0x8C, 0x9A,  // ..7.6...
                /* 0210 */  0x23, 0x04, 0x9D, 0x02, 0xBF, 0x00, 0xBC, 0x0A,  // #.......
                /* 0218 */  0x98, 0xC0, 0xBA, 0x2E, 0x06, 0xD0, 0x4F, 0x1D,  // ......O.
                /* 0220 */  0x1E, 0xA8, 0xAF, 0x1C, 0x67, 0x63, 0x7D, 0x07,  // ....gc}.
                /* 0228 */  0x03, 0x50, 0x00, 0xF9, 0x22, 0xE0, 0x93, 0xC1,  // .P.."...
                /* 0230 */  0xC3, 0x00, 0xBB, 0x19, 0x18, 0x26, 0x9A, 0xD1,  // .....&..
                /* 0238 */  0xB9, 0xA8, 0x69, 0xA3, 0x64, 0xC0, 0x68, 0xDA,  // ..i.d.h.
                /* 0240 */  0x06, 0xF1, 0xB4, 0x1D, 0x71, 0xDA, 0x68, 0x68,  // ....q.hh
                /* 0248 */  0x5F, 0x05, 0x7C, 0x11, 0x70, 0xA8, 0x61, 0xD3,  // _.|.p.a.
                /* 0250 */  0x3B, 0x07, 0x7E, 0xAE, 0x67, 0x16, 0xD0, 0x93,  // ;.~.g...
                /* 0258 */  0xF0, 0x91, 0xE4, 0xB8, 0xC1, 0x32, 0x0A, 0x06,  // .....2..
                /* 0260 */  0x1E, 0x24, 0x8E, 0x47, 0xC1, 0x26, 0xCE, 0x07,  // .$.G.&..
                /* 0268 */  0xE0, 0x89, 0xF3, 0x71, 0xF9, 0x86, 0x01, 0x7F,  // ...q....
                /* 0270 */  0xE4, 0x58, 0x82, 0x02, 0x67, 0x0E, 0x72, 0x78,  // .X..g.rx
                /* 0278 */  0x4C, 0xB0, 0x51, 0x51, 0x59, 0xE3, 0x42, 0x8D,  // L.QQY.B.
                /* 0280 */  0xD2, 0x57, 0x20, 0x86, 0x7D, 0x82, 0x16, 0x3D,  // .W .}..=
                /* 0288 */  0x48, 0x9D, 0x2F, 0x0E, 0xEA, 0x69, 0xC4, 0x63,  // H./..i.c
                /* 0290 */  0x33, 0xAC, 0xC7, 0xFD, 0xFF, 0x0F, 0x8B, 0x41,  // 3......A
                /* 0298 */  0x0B, 0x7B, 0xB8, 0x2F, 0x22, 0x3E, 0xC5, 0x78,  // .{./">.x
                /* 02A0 */  0x66, 0xC6, 0x08, 0xEB, 0xB1, 0x7B, 0x40, 0x8F,  // f....{@.
                /* 02A8 */  0x10, 0xE0, 0x01, 0x7B, 0x35, 0x39, 0xD3, 0x07,  // ...{59..
                /* 02B0 */  0x97, 0x3F, 0x8E, 0xEA, 0x20, 0x74, 0xDF, 0xE0,  // .?.. t..
                /* 02B8 */  0x28, 0x21, 0x1E, 0x38, 0x30, 0x04, 0x15, 0xDA,  // (!.80...
                /* 02C0 */  0xF4, 0xA9, 0xD1, 0xA8, 0x55, 0x83, 0x32, 0x35,  // ....U.25
                /* 02C8 */  0xCA, 0x34, 0xA8, 0xD5, 0xA7, 0x52, 0x63, 0xC6,  // .4...Rc.
                /* 02D0 */  0x3C, 0x5C, 0x8E, 0xE8, 0x41, 0x81, 0xBC, 0x13,  // <\..A...
                /* 02D8 */  0x34, 0x42, 0x87, 0x00, 0xA1, 0x42, 0x9E, 0x08,  // 4B...B..
                /* 02E0 */  0x32, 0x72, 0x0F, 0x31, 0x88, 0x80, 0xAC, 0xCC,  // 2r.1....
                /* 02E8 */  0x02, 0x10, 0xD3, 0x09, 0x22, 0x20, 0xFF, 0xFF,  // ...." ..
                /* 02F0 */  0x01                                             // .
            })
        }

        Method (USSV, 1, Serialized)
        {
            PDAT = Arg0
        }

        Method (GSSV, 0, Serialized)
        {
            Return (PDAT) /* \_SB_.PDAT */
        }
    }

    Scope (_SB.PC00.RP01.PXSX)
    {
        Name (PERN, "RP01")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        ADBG ("PCIe LAN")
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            ADBG (Concatenate ("Root Port : ", PERN))
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    ADBG (Concatenate (PERN, " mapped under VMD"))
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP02.PXSX)
    {
        Name (PERN, "RP02")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        ADBG ("PCIe LAN")
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            ADBG (Concatenate ("Root Port : ", PERN))
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    ADBG (Concatenate (PERN, " mapped under VMD"))
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP03.PXSX)
    {
        Name (PERN, "RP03")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        ADBG ("PCIe LAN")
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            ADBG (Concatenate ("Root Port : ", PERN))
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    ADBG (Concatenate (PERN, " mapped under VMD"))
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP04.PXSX)
    {
        Name (PERN, "RP04")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        ADBG ("PCIe LAN")
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            ADBG (Concatenate ("Root Port : ", PERN))
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    ADBG (Concatenate (PERN, " mapped under VMD"))
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP05.PXSX)
    {
        Name (PERN, "RP05")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        ADBG ("PCIe LAN")
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            ADBG (Concatenate ("Root Port : ", PERN))
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    ADBG (Concatenate (PERN, " mapped under VMD"))
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP06.PXSX)
    {
        Name (PERN, "RP06")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        ADBG ("PCIe LAN")
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            ADBG (Concatenate ("Root Port : ", PERN))
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    ADBG (Concatenate (PERN, " mapped under VMD"))
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP07.PXSX)
    {
        Name (PERN, "RP07")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        ADBG ("PCIe LAN")
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            ADBG (Concatenate ("Root Port : ", PERN))
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    ADBG (Concatenate (PERN, " mapped under VMD"))
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP08.PXSX)
    {
        Name (PERN, "RP08")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        ADBG ("PCIe LAN")
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            ADBG (Concatenate ("Root Port : ", PERN))
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    ADBG (Concatenate (PERN, " mapped under VMD"))
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP09.PXSX)
    {
        Name (PERN, "RP09")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        ADBG ("PCIe LAN")
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            ADBG (Concatenate ("Root Port : ", PERN))
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    ADBG (Concatenate (PERN, " mapped under VMD"))
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP10.PXSX)
    {
        Name (PERN, "RP10")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        ADBG ("PCIe LAN")
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            ADBG (Concatenate ("Root Port : ", PERN))
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    ADBG (Concatenate (PERN, " mapped under VMD"))
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP11.PXSX)
    {
        Name (PERN, "RP11")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        ADBG ("PCIe LAN")
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            ADBG (Concatenate ("Root Port : ", PERN))
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    ADBG (Concatenate (PERN, " mapped under VMD"))
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP12.PXSX)
    {
        Name (PERN, "RP12")
        Method (ISLN, 0, Serialized)
        {
            If ((BCCX == 0x02))
            {
                If ((SCCX == Zero))
                {
                    If ((PIXX == Zero))
                    {
                        ADBG ("PCIe LAN")
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (((DTFS == One) && (((RPS0 == SLOT) && RPN0) || (
                    (RPS1 == SLOT) && RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            ADBG (Concatenate ("Root Port : ", PERN))
            If (CondRefOf (^^PRMV))
            {
                If ((PRMV == One))
                {
                    ADBG (Concatenate (PERN, " mapped under VMD"))
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If ((PAHC () || PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If ((PRTP == 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (^WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB)
    {
        Device (PEPD)
        {
            Name (DEVC, Zero)
            Name (DEVS, Zero)
            Name (IPDI, Zero)
            Name (_HID, "INT33A1" /* Intel Power Engine */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0D80") /* Windows-compatible System Power Management Controller */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (PCP0, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0xFF, 
                    Zero
                }
            })
            Name (PCP1, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0xFF, 
                    Zero, 
                    0x81
                }
            })
            Name (PCP2, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0xFF, 
                    0x02
                }
            })
            Name (PCP3, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0xFF, 
                    0x03
                }
            })
            Name (DEVY, Package (0x78)
            {
                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved.Reserved.Reserved.Reserved", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }
            })
            Method (UPDE, 4, NotSerialized)
            {
                If ((DEVC < DEVS))
                {
                    If ((SizeOf (Arg1) != Zero))
                    {
                        Local0 = Concatenate (Concatenate (Arg0, "."), Arg1)
                    }
                    Else
                    {
                        Local0 = Arg0
                    }

                    DerefOf (DEVY [DEVC]) [Zero] = Local0
                    If ((Arg0 == "Reserved"))
                    {
                        DEVC++
                        Return (Zero)
                    }

                    DerefOf (DEVY [DEVC]) [One] = Arg2
                    If ((Arg3 == Zero))
                    {
                        DerefOf (DEVY [DEVC]) [0x02] = PCP0 /* \_SB_.PEPD.PCP0 */
                    }
                    ElseIf ((Arg3 == One))
                    {
                        DerefOf (DEVY [DEVC]) [0x02] = PCP1 /* \_SB_.PEPD.PCP1 */
                    }
                    ElseIf ((Arg3 == 0x02))
                    {
                        DerefOf (DEVY [DEVC]) [0x02] = PCP2 /* \_SB_.PEPD.PCP2 */
                    }
                    ElseIf ((Arg3 == 0x03))
                    {
                        DerefOf (DEVY [DEVC]) [0x02] = PCP3 /* \_SB_.PEPD.PCP3 */
                    }
                    Else
                    {
                        ADBG ("PEP Error !!! Unknown D- state constraint is passed..")
                    }

                    ADBG (Concatenate ("DEVY entry index :", ToDecimalString (DEVC)))
                    ADBG (Concatenate ("Device Descriptor                  :", DerefOf (DerefOf (DEVY [DEVC]) [Zero])
                        ))
                    ADBG (Concatenate ("Constraint (Enable/Disable)        :", DerefOf (DerefOf (DEVY [DEVC]) [One])
                        ))
                    ADBG (Concatenate ("Constraint applied (D0/D0F1/D2/D3) :", Arg3))
                    ADBG ("------------ ")
                    ADBG ("")
                    DEVC++
                }
                Else
                {
                    ADBG (Concatenate ("PEP UPDE Error!!!! DEVY size is excedded, DEVY size = ", ToDecimalString (DEVS)))
                }
            }

            Method (UPPR, 4, Serialized)
            {
                If (CondRefOf (Arg0))
                {
                    Local0 = GRPC (Arg1)
                    If ((Local0 != Zero))
                    {
                        UPDE (Arg2, Arg3, One, Local0)
                    }
                    Else
                    {
                        UPDE (Arg2, Arg3, Zero, Local0)
                    }
                }
            }

            Method (GUCP, 2, Serialized)
            {
                If (((PEPC & Arg0) == Arg0))
                {
                    If (((PEPC & (Arg1 | Arg0)) == (Arg1 | Arg0
                        )))
                    {
                        ADBG ("D3 F0 constraint")
                        Return (0x03)
                    }
                    Else
                    {
                        ADBG ("D0 F1 constraint")
                        Return (One)
                    }
                }
                Else
                {
                    ADBG ("No constraint")
                    Return (Zero)
                }
            }

            Method (GRPC, 1, Serialized)
            {
                If ((Arg0 == One))
                {
                    ADBG ("PCIE Storage PEP")
                    Return (GUCP (0x40000000, 0x80000000))
                }

                If ((Arg0 == 0x02))
                {
                    ADBG ("PCIE LAN PEP")
                    Return (GUCP (0x0000000100000000, 0x0000000200000000))
                }

                If ((Arg0 == 0x03))
                {
                    ADBG ("PCIE WLAN PEP")
                    Return (GUCP (0x0000000400000000, 0x0000000800000000))
                }

                If ((Arg0 == 0x04))
                {
                    ADBG ("PCIE Graphics PEP")
                    Return (GUCP (0x0000001000000000, 0x0000002000000000))
                }

                If ((Arg0 == 0x05))
                {
                    ADBG ("PCH PCIE DTBT PEP")
                    Return (GUCP (0x00400000, 0x00400000))
                }

                If ((Arg0 == 0x06))
                {
                    ADBG ("PCIE WWAN PEP")
                    If ((WRTO == 0x03))
                    {
                        ADBG ("PEP Constraint = D3")
                        Return (0x03)
                    }
                    ElseIf ((WRTO == 0x02))
                    {
                        ADBG ("PEP Constraint = D0")
                        Return (One)
                    }
                    Else
                    {
                        ADBG ("PEP Constraint = no constraint")
                        Return (Zero)
                    }
                }

                If ((Arg0 == Zero))
                {
                    ADBG ("PCIE Others")
                    Return (GUCP (0x0000004000000000, 0x0000008000000000))
                }

                ADBG ("PCIE EP NOT present")
                Return (Zero)
            }

            Method (SPDE, 0, Serialized)
            {
                If (!ESPC)
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PC00.SAT0))
                {
                    UPDE ("\\_SB.PC00", "SAT0.PRT0", ^^PC00.SAT0.PRT0.PRES (), 0x03)
                    UPDE ("\\_SB.PC00", "SAT0.PRT1", ^^PC00.SAT0.PRT1.PRES (), 0x03)
                    UPDE ("\\_SB.PC00", "SAT0.PRT2", ^^PC00.SAT0.PRT2.PRES (), 0x03)
                    UPDE ("\\_SB.PC00", "SAT0.PRT3", ^^PC00.SAT0.PRT3.PRES (), 0x03)
                    UPDE ("\\_SB.PC00", "SAT0.PRT4", ^^PC00.SAT0.PRT4.PRES (), 0x03)
                    UPDE ("\\_SB.PC00", "SAT0.PRT5", ^^PC00.SAT0.PRT5.PRES (), 0x03)
                    UPDE ("\\_SB.PC00", "SAT0.PRT6", ^^PC00.SAT0.PRT6.PRES (), 0x03)
                    UPDE ("\\_SB.PC00", "SAT0.PRT7", ^^PC00.SAT0.PRT7.PRES (), 0x03)
                }
            }

            Method (UPDV, 0, Serialized)
            {
                DEVS = SizeOf (DEVY)
                ADBG (Concatenate ("PEP DEVY size = ", ToDecimalString (DEVS)))
                SPDE ()
                If ((((PEPC & 0x10000000) >> 0x1C) == One))
                {
                    If ((((PEPC & 0x30000000) >> 0x1C) == One))
                    {
                        UPDE ("\\_SB.PC00", "SAT0", ((PEPC & 0x10000000) >> 0x1C), One)
                    }
                    ElseIf ((((PEPC & 0x30000000) >> 0x1C) == 0x03))
                    {
                        UPDE ("\\_SB.PC00", "SAT0", ((PEPC & 0x10000000) >> 0x1C), 0x03)
                    }
                }
                ElseIf ((((PEPC & 0x30000000) >> 0x1C) == 0x02))
                {
                    UPDE ("\\_SB.PC00", "SAT0.VOL0", One, One)
                }

                ADBG (Concatenate ("Pep TCNT : ", ToHexString (TCNT)))
                Local0 = Zero
                While ((Local0 < TCNT))
                {
                    If ((Local0 < 0x0A))
                    {
                        Concatenate ("PR0", Local0, Local1)
                    }
                    Else
                    {
                        Concatenate ("PR", ToDecimalString (Local0), Local1)
                    }

                    If (((PEPC & 0x00010000) == Zero))
                    {
                        UPDE ("\\_SB", Local1, Zero, Zero)
                    }
                    Else
                    {
                        UPDE ("\\_SB", Local1, One, Zero)
                    }

                    Local0 += One
                }

                UPDE ("\\_SB.PC00", "GFX0", ((PEPC & 0x8000) >> 0x0F), 0x03)
                UPDE ("\\_SB.PC00", "HDAS", One, GUCP (0x04000000, 0x08000000))
                UPDE ("\\_SB.PC00", "UA00", ((PEPC & One) >> Zero), 0x03)
                UPDE ("\\_SB.PC00", "UA01", ((PEPC & 0x02) >> One), 0x03)
                UPDE ("\\_SB.PC00", "UA02", ((PEPC & 0x04) >> 0x02), 0x03)
                UPDE ("\\_SB.PC00", "I2C0", ((PEPC & 0x08) >> 0x03), 0x03)
                UPDE ("\\_SB.PC00", "I2C1", ((PEPC & 0x10) >> 0x04), 0x03)
                UPDE ("\\_SB.PC00", "I2C2", ((PEPC & 0x20) >> 0x05), 0x03)
                UPDE ("\\_SB.PC00", "I2C3", ((PEPC & 0x40) >> 0x06), 0x03)
                UPDE ("\\_SB.PC00", "I2C4", ((PEPC & 0x80) >> 0x07), 0x03)
                UPDE ("\\_SB.PC00", "I2C5", ((PEPC & 0x0100) >> 0x08), 0x03)
                UPDE ("\\_SB.PC00", "I2C6", ((PEPC & 0x0200) >> 0x09), 0x03)
                UPDE ("\\_SB.PC00", "I2C7", ((PEPC & 0x0400) >> 0x0A), 0x03)
                UPDE ("\\_SB.PC00", "SPI0", ((PEPC & 0x0800) >> 0x0B), 0x03)
                UPDE ("\\_SB.PC00", "SPI1", ((PEPC & 0x1000) >> 0x0C), 0x03)
                UPDE ("\\_SB.PC00", "SPI2", ((PEPC & 0x2000) >> 0x0D), 0x03)
                UPDE ("\\_SB.PC00", "XHCI", ((PEPC & 0x4000) >> 0x0E), 0x03)
                UPDE ("\\_SB.PC00", "PEMC", ((PEPC & 0x0000010000000000) >> 0x28), 0x03)
                UPDE ("\\_SB.PC00", "PSDC", ((PEPC & 0x0000020000000000) >> 0x29), 0x03)
                UPDE ("\\_SB.PC00", "IPU0", ((PEPC & 0x00020000) >> 0x11), 0x03)
                UPDE ("\\_SB.PC00", "HECI", ((PEPC & 0x00040000) >> 0x12), One)
                If (((((PEPC & 0x00080000) >> 0x13) == Zero) || (
                    GBES == Zero)))
                {
                    UPDE ("\\_SB.PC00", "GLAN", Zero, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "GLAN", One, 0x03)
                }

                UPDE ("\\_SB.PC00", "THC0", ((PEPC & 0x00100000) >> 0x14), 0x03)
                UPDE ("\\_SB.PC00", "THC1", ((PEPC & 0x00200000) >> 0x15), 0x03)
                If ((WRTO == One))
                {
                    UPDE ("USB\\VID_8087&PID_0AC9&MI*", "", One, WRTO)
                    ADBG ("PEP Constraint for CDC MBIM = D0F1")
                }
                Else
                {
                    UPDE ("USB\\VID_8087&PID_0AC9&MI*", "", Zero, 0x02)
                }

                UPDE ("\\_SB.PC00", "GNA0", ((PEPC & 0x00800000) >> 0x17), 0x03)
                UPDE ("\\_SB.PC00", "VMD0", ((PEPC & 0x01000000) >> 0x18), 0x03)
                If (CondRefOf (\_SB.PC00.HEC3))
                {
                    ADBG ("HECI3 PEP")
                    UPDE ("\\_SB.PC00", "HEC3", ((PEPC & 0x02000000) >> 0x19), One)
                }

                UPDE ("\\_SB.PC00", "PUF0", ((PEPC & 0x0000080000000000) >> 0x2B), 0x03)
                UPDE ("\\_SB.PC00", "PUF1", ((PEPC & 0x0000100000000000) >> 0x2C), 0x03)
                UPDE ("\\_SB.PC00", "VPU0", ((PEPC & 0x0000040000000000) >> 0x2A), 0x03)
                If (((PEPC & 0x00400000) != Zero))
                {
                    If ((THCE == One))
                    {
                        UPDE ("\\_SB.PC00", "TXHC", One, 0x03)
                    }
                    Else
                    {
                        UPDE ("\\_SB.PC00", "TXHC", Zero, 0x03)
                    }

                    If ((TDCE == One))
                    {
                        UPDE ("\\_SB.PC00", "TXDC", One, 0x03)
                    }
                    Else
                    {
                        UPDE ("\\_SB.PC00", "TXDC", Zero, 0x03)
                    }

                    UPDE ("\\_SB.PC00", "TRP0", TRE0, 0x03)
                    UPDE ("\\_SB.PC00", "TRP1", TRE1, 0x03)
                    UPDE ("\\_SB.PC00", "TRP2", TRE2, 0x03)
                    UPDE ("\\_SB.PC00", "TRP3", TRE3, 0x03)
                    UPDE ("\\_SB.PC00", "TDM0", DME0, 0x03)
                    UPDE ("\\_SB.PC00", "TDM1", DME1, 0x03)
                }
                Else
                {
                    UPDE ("\\_SB.PC00", "TXHC", Zero, 0x03)
                    UPDE ("\\_SB.PC00", "TXDC", Zero, 0x03)
                    UPDE ("\\_SB.PC00", "TRP0", Zero, 0x03)
                    UPDE ("\\_SB.PC00", "TRP1", Zero, 0x03)
                    UPDE ("\\_SB.PC00", "TRP2", Zero, 0x03)
                    UPDE ("\\_SB.PC00", "TRP3", Zero, 0x03)
                    UPDE ("\\_SB.PC00", "TDM0", Zero, 0x03)
                    UPDE ("\\_SB.PC00", "TDM1", Zero, 0x03)
                }

                UPDE ("\\_SB.PC01", "TRP0", Zero, Zero)
                UPDE ("\\_SB.PC01", "TRP1", Zero, Zero)
                UPDE ("\\_SB.PC01", "TRP2", Zero, Zero)
                UPDE ("\\_SB.PC01", "TRP3", Zero, Zero)
                UPPR (^^PC00.RP01, ^^PC00.RP01.PXSX.GRPT (), "\\_SB.PC00", "RP01")
                UPPR (^^PC00.RP02, ^^PC00.RP02.PXSX.GRPT (), "\\_SB.PC00", "RP02")
                UPPR (^^PC00.RP03, ^^PC00.RP03.PXSX.GRPT (), "\\_SB.PC00", "RP03")
                UPPR (^^PC00.RP04, ^^PC00.RP04.PXSX.GRPT (), "\\_SB.PC00", "RP04")
                UPPR (^^PC00.RP05, ^^PC00.RP05.PXSX.GRPT (), "\\_SB.PC00", "RP05")
                UPPR (^^PC00.RP06, ^^PC00.RP06.PXSX.GRPT (), "\\_SB.PC00", "RP06")
                UPPR (^^PC00.RP07, ^^PC00.RP07.PXSX.GRPT (), "\\_SB.PC00", "RP07")
                UPPR (^^PC00.RP08, ^^PC00.RP08.PXSX.GRPT (), "\\_SB.PC00", "RP08")
                UPPR (^^PC00.RP09, ^^PC00.RP09.PXSX.GRPT (), "\\_SB.PC00", "RP09")
                UPPR (^^PC00.RP10, ^^PC00.RP10.PXSX.GRPT (), "\\_SB.PC00", "RP10")
                UPPR (^^PC00.RP11, ^^PC00.RP11.PXSX.GRPT (), "\\_SB.PC00", "RP11")
                UPPR (^^PC00.RP12, ^^PC00.RP12.PXSX.GRPT (), "\\_SB.PC00", "RP12")
                If (CondRefOf (\_SB.PC00.CNVW.VDID))
                {
                    If ((^^PC00.CNVW.VDID != 0xFFFFFFFF))
                    {
                        ADBG ("CNVi- WiFI PEP")
                        UPDE ("\\_SB.PC00", "CNVW", One, 0x03)
                    }
                }

                Local0 = DEVC /* \_SB_.PEPD.DEVC */
                While ((Local0 < DEVS))
                {
                    UPDE ("Reserved", ToDecimalString (Local0), Zero, Zero)
                    Local0 += One
                }

                DEVC = Zero
                ADBG ("[PEP] All Pep Constraints are updated ")
            }

            Name (BCCD, Package (0x00){})
            Name (DSDV, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "intel-cec-pson-switching-enabled-in-s0", 
                        Zero
                    }
                }
            })
            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                Local0 = Zero
                While ((Local0 < SizeOf (DSDV)))
                {
                    If ((DerefOf (DSDV [Local0]) != ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */))
                    {
                        Continue
                    }

                    Local1 = DerefOf (DSDV [(Local0 + One)])
                    Local2 = Zero
                    While ((Local2 < SizeOf (Local1)))
                    {
                        Local3 = DerefOf (Local1 [Local2])
                        If ((("intel-cec-pson-switching-enabled-in-s0" == DerefOf (Local3 [Zero])) && PSON))
                        {
                            ADBG ("PEPD: Storing 1 in DSDV Object")
                            DerefOf (DerefOf (DSDV [(Local0 + One)]) [
                                Local2]) [One] = One
                        }

                        Local2++
                    }

                    Local0 += 0x02
                }

                Return (DSDV) /* \_SB_.PEPD.DSDV */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((S0ID == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG (Concatenate ("PEPC = ", ToHexString (PEPC)))
                If ((Arg0 == ToUUID ("11e00d56-ce64-47ce-837b-1f898f9aa461") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0x81, 0x01                                       // ..
                        })
                    }

                    If ((Arg2 == 0x07))
                    {
                        If ((PFLV == 0x02))
                        {
                            If (CondRefOf (ECON))
                            {
                                If ((ECON == One))
                                {
                                    If ((PPOE == One))
                                    {
                                        If (CondRefOf (\_SB.PC00.LPCB.NRTS))
                                        {
                                            ^^PC00.LPCB.NRTS (Zero)
                                        }
                                    }
                                }
                            }
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((PFLV == 0x02))
                        {
                            If (CondRefOf (ECON))
                            {
                                If ((ECON == One))
                                {
                                    If ((PPOE == One))
                                    {
                                        If (CondRefOf (\_SB.PC00.LPCB.NRTS))
                                        {
                                            ^^PC00.LPCB.NRTS (One)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                If ((Arg0 == ToUUID ("c4eb40a0-6cd2-11e2-bcfd-0800200c9a66") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x7F                                             // .
                        })
                    }

                    If ((Arg2 == One))
                    {
                        If ((S0ID == Zero))
                        {
                            Return (Package (0x00){})
                        }

                        If ((IPDI == Zero))
                        {
                            UPDV ()
                            IPDI = One
                        }
                        Else
                        {
                            ADBG ("PEP DEVY is already initialized !!! ")
                        }

                        Return (DEVY) /* \_SB_.PEPD.DEVY */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (BCCD) /* \_SB_.PEPD.BCCD */
                    }

                    If ((Arg2 == 0x03))
                    {
                        If (CondRefOf (\_SB.PC00.IMNG))
                        {
                            ^^PC00.IMNG (Arg2)
                        }

                        If ((S0ID == One))
                        {
                            D8XH (Zero, 0xC5)
                            D8XH (One, Zero)
                            ^^PC00.LPCB.EC.KBBL = One
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        If (CondRefOf (\_SB.PC00.IMNG))
                        {
                            ^^PC00.IMNG (Arg2)
                        }

                        If ((S0ID == One))
                        {
                            D8XH (Zero, 0xC5)
                            D8XH (One, 0xAB)
                            ^^PC00.LPCB.EC.MODS = Zero
                            ^^PC00.LPCB.EC.KBBL = Zero
                        }
                    }

                    Local0 = Zero
                    If ((Arg2 == 0x05))
                    {
                        ADBG ("[PEP] deep standby entry")
                        If ((S0ID == One))
                        {
                            GUAM (One)
                        }

                        If ((ECON == Zero))
                        {
                            If ((ITSI == One)){}
                        }

                        ^^PC00.LPCB.NTIR (One)
                        ^^PC00.LPCB.EC.MODS = One
                        If (CondRefOf (\_SB.PC00.TXHC))
                        {
                            If (CondRefOf (\_SB.PC00.TDM0))
                            {
                                If ((^^PC00.TDM0._STA == 0x0F))
                                {
                                    If ((^^PC00.TDM0.SCME == Zero))
                                    {
                                        Local0 = One
                                        ADBG (Concatenate ("TDM0 set DPOF to ", ToHexString (Local0)))
                                    }
                                }
                            }

                            If (CondRefOf (\_SB.PC00.TDM1))
                            {
                                If ((^^PC00.TDM1._STA == 0x0F))
                                {
                                    If ((^^PC00.TDM1.SCME == Zero))
                                    {
                                        Local0 = One
                                        ADBG (Concatenate ("TDM1 set DPOF to ", ToHexString (Local0)))
                                    }
                                }
                            }

                            If ((Local0 == One))
                            {
                                ^^PC00.DPOF = One
                            }

                            ADBG (Concatenate ("All Monitor off flag: ", ToHexString (^^PC00.DPOF)))
                            If (CondRefOf (\GPRV))
                            {
                                ADBG ("[PEP] allow PS_ON")
                                GPRV (0x03, Zero)
                            }
                        }
                    }

                    If ((Arg2 == 0x06))
                    {
                        ADBG ("[PEP] deep standby exit")
                        If ((S0ID == One))
                        {
                            GUAM (Zero)
                        }

                        If ((ECON == Zero))
                        {
                            If ((ITSI == One)){}
                        }

                        ^^PC00.LPCB.NTIR (Zero)
                        If (CondRefOf (\_SB.PC00.TXHC))
                        {
                            ^^PC00.DPOF = Zero
                        }

                        If (CondRefOf (\GPRV))
                        {
                            ADBG ("[PEP] veto PS_ON")
                            GPRV (0x03, One)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Device (PSM)
    {
        Name (_HID, EisaId ("INT3420") /* Intel Bluetooth RF Kill */)  // _HID: Hardware ID
        Name (_UID, Zero)  // _UID: Unique ID
        Name (_STR, Unicode ("Power Sharing Manager"))  // _STR: Description String
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PSME == One))
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }

        Name (SPLX, Package (0x02)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            DerefOf (SPLX [One]) [Zero] = PDT1 /* \PDT1 */
            DerefOf (SPLX [One]) [One] = PLM1 /* \PLM1 */
            DerefOf (SPLX [One]) [0x02] = PTW1 /* \PTW1 */
            Return (SPLX) /* \PSM_.SPLX */
        }

        Name (DPLX, Package (0x02)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                Package (0x06)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            }
        })
        Method (DPLC, 0, Serialized)
        {
            DerefOf (DPLX [One]) [Zero] = DDT1 /* \DDT1 */
            DerefOf (DPLX [One]) [One] = DDP1 /* \DDP1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [Zero]
                 = DLI1 /* \DLI1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [One]
                 = DPL1 /* \DPL1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x02]
                 = DTW1 /* \DTW1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x03]
                 = DMI1 /* \DMI1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x04]
                 = DMA1 /* \DMA1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x05]
                 = DMT1 /* \DMT1 */
            Return (DPLX) /* \PSM_.DPLX */
        }
    }

    Scope (_SB)
    {
        Method (WFRK, 1, Serialized)
        {
            If ((DWFK != Zero))
            {
                SGOV (DWFK, Arg0)
            }
        }

        Method (BTRK, 1, Serialized)
        {
            If ((GBTK != Zero))
            {
                SGOV (GBTK, Arg0)
            }
        }

        Method (GBTR, 0, NotSerialized)
        {
            Return (GGOV (GBTK))
        }
    }

    If ((CRFP == One))
    {
        If ((CWFC == One))
        {
            Scope (_SB.PC00.CNVW)
            {
                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                    DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                    DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                    Return (SPLX) /* \_SB_.PC00.CNVW.SPLX */
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                    DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                    DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                    Return (WANX) /* \_SB_.PC00.CNVW.WANX */
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                    DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                    Return (WRDX) /* \_SB_.PC00.CNVW.WRDX */
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                    DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                    DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                    DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                    DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                    DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                    DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                    DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                    DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                    DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                    DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                    DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                    DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                    DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                    DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                    DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                    DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                    DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                    DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                    DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                    DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                    DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                    DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                    DerefOf (WRDY [One]) [0x18] = CD10 /* \CD10 */
                    DerefOf (WRDY [One]) [0x19] = CD11 /* \CD11 */
                    DerefOf (WRDY [One]) [0x1A] = CD12 /* \CD12 */
                    DerefOf (WRDY [One]) [0x1B] = CD13 /* \CD13 */
                    DerefOf (WRDY [One]) [0x1C] = CD14 /* \CD14 */
                    DerefOf (WRDY [One]) [0x1D] = CD15 /* \CD15 */
                    DerefOf (WRDY [One]) [0x1E] = CD16 /* \CD16 */
                    DerefOf (WRDY [One]) [0x1F] = CD17 /* \CD17 */
                    DerefOf (WRDY [One]) [0x20] = CD18 /* \CD18 */
                    DerefOf (WRDY [One]) [0x21] = CD19 /* \CD19 */
                    DerefOf (WRDY [One]) [0x22] = CD1A /* \CD1A */
                    DerefOf (WRDY [One]) [0x23] = CD20 /* \CD20 */
                    DerefOf (WRDY [One]) [0x24] = CD21 /* \CD21 */
                    DerefOf (WRDY [One]) [0x25] = CD22 /* \CD22 */
                    DerefOf (WRDY [One]) [0x26] = CD23 /* \CD23 */
                    DerefOf (WRDY [One]) [0x27] = CD24 /* \CD24 */
                    DerefOf (WRDY [One]) [0x28] = CD25 /* \CD25 */
                    DerefOf (WRDY [One]) [0x29] = CD26 /* \CD26 */
                    DerefOf (WRDY [One]) [0x2A] = CD27 /* \CD27 */
                    DerefOf (WRDY [One]) [0x2B] = CD28 /* \CD28 */
                    DerefOf (WRDY [One]) [0x2C] = CD29 /* \CD29 */
                    DerefOf (WRDY [One]) [0x2D] = CD2A /* \CD2A */
                    Return (WRDY) /* \_SB_.PC00.CNVW.WRDY */
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                    DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                    DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                    DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                    DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                    DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                    DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                    DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                    DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                    DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                    DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                    DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                    DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                    DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                    DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                    DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                    DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                    DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                    DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                    DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                    DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                    DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                    DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                    DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                    DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                    DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                    DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                    DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                    DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                    DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                    DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                    DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                    DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                    DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                    DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                    DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                    DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                    DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                    DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                    DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                    DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                    DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                    DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                    DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                    DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                    DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                    DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                    DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                    DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                    DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                    DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                    DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                    DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                    DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                    DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                    DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                    DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                    DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                    DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                    DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                    DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                    DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                    DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                    DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                    DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                    DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                    DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                    DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                    DerefOf (EWRY [One]) [0x45] = CD30 /* \CD30 */
                    DerefOf (EWRY [One]) [0x46] = CD31 /* \CD31 */
                    DerefOf (EWRY [One]) [0x47] = CD32 /* \CD32 */
                    DerefOf (EWRY [One]) [0x48] = CD33 /* \CD33 */
                    DerefOf (EWRY [One]) [0x49] = CD34 /* \CD34 */
                    DerefOf (EWRY [One]) [0x4A] = CD35 /* \CD35 */
                    DerefOf (EWRY [One]) [0x4B] = CD36 /* \CD36 */
                    DerefOf (EWRY [One]) [0x4C] = CD37 /* \CD37 */
                    DerefOf (EWRY [One]) [0x4D] = CD38 /* \CD38 */
                    DerefOf (EWRY [One]) [0x4E] = CD39 /* \CD39 */
                    DerefOf (EWRY [One]) [0x4F] = CD3A /* \CD3A */
                    DerefOf (EWRY [One]) [0x50] = CD3B /* \CD3B */
                    DerefOf (EWRY [One]) [0x51] = CD3C /* \CD3C */
                    DerefOf (EWRY [One]) [0x52] = CD3D /* \CD3D */
                    DerefOf (EWRY [One]) [0x53] = CD3E /* \CD3E */
                    DerefOf (EWRY [One]) [0x54] = CD3F /* \CD3F */
                    DerefOf (EWRY [One]) [0x55] = CD40 /* \CD40 */
                    DerefOf (EWRY [One]) [0x56] = CD41 /* \CD41 */
                    DerefOf (EWRY [One]) [0x57] = CD42 /* \CD42 */
                    DerefOf (EWRY [One]) [0x58] = CD43 /* \CD43 */
                    DerefOf (EWRY [One]) [0x59] = CD44 /* \CD44 */
                    DerefOf (EWRY [One]) [0x5A] = CD45 /* \CD45 */
                    DerefOf (EWRY [One]) [0x5B] = CD46 /* \CD46 */
                    DerefOf (EWRY [One]) [0x5C] = CD47 /* \CD47 */
                    DerefOf (EWRY [One]) [0x5D] = CD48 /* \CD48 */
                    DerefOf (EWRY [One]) [0x5E] = CD49 /* \CD49 */
                    DerefOf (EWRY [One]) [0x5F] = CD4A /* \CD4A */
                    DerefOf (EWRY [One]) [0x60] = CD4B /* \CD4B */
                    DerefOf (EWRY [One]) [0x61] = CD4C /* \CD4C */
                    DerefOf (EWRY [One]) [0x62] = CD4D /* \CD4D */
                    DerefOf (EWRY [One]) [0x63] = CD4E /* \CD4E */
                    DerefOf (EWRY [One]) [0x64] = CD4F /* \CD4F */
                    DerefOf (EWRY [One]) [0x65] = CD50 /* \CD50 */
                    DerefOf (EWRY [One]) [0x66] = CD51 /* \CD51 */
                    DerefOf (EWRY [One]) [0x67] = CD52 /* \CD52 */
                    DerefOf (EWRY [One]) [0x68] = CD53 /* \CD53 */
                    DerefOf (EWRY [One]) [0x69] = CD54 /* \CD54 */
                    DerefOf (EWRY [One]) [0x6A] = CD55 /* \CD55 */
                    DerefOf (EWRY [One]) [0x6B] = CD56 /* \CD56 */
                    DerefOf (EWRY [One]) [0x6C] = CD57 /* \CD57 */
                    DerefOf (EWRY [One]) [0x6D] = CD58 /* \CD58 */
                    DerefOf (EWRY [One]) [0x6E] = CD59 /* \CD59 */
                    DerefOf (EWRY [One]) [0x6F] = CD5A /* \CD5A */
                    DerefOf (EWRY [One]) [0x70] = CD5B /* \CD5B */
                    DerefOf (EWRY [One]) [0x71] = CD5C /* \CD5C */
                    DerefOf (EWRY [One]) [0x72] = CD5D /* \CD5D */
                    DerefOf (EWRY [One]) [0x73] = CD5E /* \CD5E */
                    DerefOf (EWRY [One]) [0x74] = CD5F /* \CD5F */
                    DerefOf (EWRY [One]) [0x75] = CD60 /* \CD60 */
                    DerefOf (EWRY [One]) [0x76] = CD61 /* \CD61 */
                    DerefOf (EWRY [One]) [0x77] = CD62 /* \CD62 */
                    DerefOf (EWRY [One]) [0x78] = CD63 /* \CD63 */
                    DerefOf (EWRY [One]) [0x79] = CD64 /* \CD64 */
                    DerefOf (EWRY [One]) [0x7A] = CD65 /* \CD65 */
                    DerefOf (EWRY [One]) [0x7B] = CD66 /* \CD66 */
                    DerefOf (EWRY [One]) [0x7C] = CD67 /* \CD67 */
                    DerefOf (EWRY [One]) [0x7D] = CD68 /* \CD68 */
                    DerefOf (EWRY [One]) [0x7E] = CD69 /* \CD69 */
                    DerefOf (EWRY [One]) [0x7F] = CD6A /* \CD6A */
                    DerefOf (EWRY [One]) [0x80] = CD6B /* \CD6B */
                    DerefOf (EWRY [One]) [0x81] = CD6C /* \CD6C */
                    DerefOf (EWRY [One]) [0x82] = CD6D /* \CD6D */
                    DerefOf (EWRY [One]) [0x83] = CD6E /* \CD6E */
                    DerefOf (EWRY [One]) [0x84] = CD6F /* \CD6F */
                    DerefOf (EWRY [One]) [0x85] = CD70 /* \CD70 */
                    DerefOf (EWRY [One]) [0x86] = CD71 /* \CD71 */
                    Return (EWRY) /* \_SB_.PC00.CNVW.EWRY */
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    DerefOf (WGDY [One]) [One] = SDGN /* \SDGN */
                    DerefOf (WGDY [One]) [0x02] = SD11 /* \SD11 */
                    DerefOf (WGDY [One]) [0x03] = SD12 /* \SD12 */
                    DerefOf (WGDY [One]) [0x04] = SD13 /* \SD13 */
                    DerefOf (WGDY [One]) [0x05] = SD14 /* \SD14 */
                    DerefOf (WGDY [One]) [0x06] = SD15 /* \SD15 */
                    DerefOf (WGDY [One]) [0x07] = SD16 /* \SD16 */
                    DerefOf (WGDY [One]) [0x08] = SD17 /* \SD17 */
                    DerefOf (WGDY [One]) [0x09] = SD18 /* \SD18 */
                    DerefOf (WGDY [One]) [0x0A] = SD19 /* \SD19 */
                    DerefOf (WGDY [One]) [0x0B] = SD21 /* \SD21 */
                    DerefOf (WGDY [One]) [0x0C] = SD22 /* \SD22 */
                    DerefOf (WGDY [One]) [0x0D] = SD23 /* \SD23 */
                    DerefOf (WGDY [One]) [0x0E] = SD24 /* \SD24 */
                    DerefOf (WGDY [One]) [0x0F] = SD25 /* \SD25 */
                    DerefOf (WGDY [One]) [0x10] = SD26 /* \SD26 */
                    DerefOf (WGDY [One]) [0x11] = SD27 /* \SD27 */
                    DerefOf (WGDY [One]) [0x12] = SD28 /* \SD28 */
                    DerefOf (WGDY [One]) [0x13] = SD29 /* \SD29 */
                    DerefOf (WGDY [One]) [0x14] = SD31 /* \SD31 */
                    DerefOf (WGDY [One]) [0x15] = SD32 /* \SD32 */
                    DerefOf (WGDY [One]) [0x16] = SD33 /* \SD33 */
                    DerefOf (WGDY [One]) [0x17] = SD34 /* \SD34 */
                    DerefOf (WGDY [One]) [0x18] = SD35 /* \SD35 */
                    DerefOf (WGDY [One]) [0x19] = SD36 /* \SD36 */
                    DerefOf (WGDY [One]) [0x1A] = SD37 /* \SD37 */
                    DerefOf (WGDY [One]) [0x1B] = SD38 /* \SD38 */
                    DerefOf (WGDY [One]) [0x1C] = SD39 /* \SD39 */
                    DerefOf (WGDY [One]) [0x1D] = SD41 /* \SD41 */
                    DerefOf (WGDY [One]) [0x1E] = SD42 /* \SD42 */
                    DerefOf (WGDY [One]) [0x1F] = SD43 /* \SD43 */
                    DerefOf (WGDY [One]) [0x20] = SD44 /* \SD44 */
                    DerefOf (WGDY [One]) [0x21] = SD45 /* \SD45 */
                    DerefOf (WGDY [One]) [0x22] = SD46 /* \SD46 */
                    DerefOf (WGDY [One]) [0x23] = SD47 /* \SD47 */
                    DerefOf (WGDY [One]) [0x24] = SD48 /* \SD48 */
                    DerefOf (WGDY [One]) [0x25] = SD49 /* \SD49 */
                    DerefOf (WGDY [One]) [0x26] = SD51 /* \SD51 */
                    DerefOf (WGDY [One]) [0x27] = SD52 /* \SD52 */
                    DerefOf (WGDY [One]) [0x28] = SD53 /* \SD53 */
                    DerefOf (WGDY [One]) [0x29] = SD54 /* \SD54 */
                    DerefOf (WGDY [One]) [0x2A] = SD55 /* \SD55 */
                    DerefOf (WGDY [One]) [0x2B] = SD56 /* \SD56 */
                    DerefOf (WGDY [One]) [0x2C] = SD57 /* \SD57 */
                    DerefOf (WGDY [One]) [0x2D] = SD58 /* \SD58 */
                    DerefOf (WGDY [One]) [0x2E] = SD59 /* \SD59 */
                    DerefOf (WGDY [One]) [0x2F] = SD61 /* \SD61 */
                    DerefOf (WGDY [One]) [0x30] = SD62 /* \SD62 */
                    DerefOf (WGDY [One]) [0x31] = SD63 /* \SD63 */
                    DerefOf (WGDY [One]) [0x32] = SD64 /* \SD64 */
                    DerefOf (WGDY [One]) [0x33] = SD65 /* \SD65 */
                    DerefOf (WGDY [One]) [0x34] = SD66 /* \SD66 */
                    DerefOf (WGDY [One]) [0x35] = SD67 /* \SD67 */
                    DerefOf (WGDY [One]) [0x36] = SD68 /* \SD68 */
                    DerefOf (WGDY [One]) [0x37] = SD69 /* \SD69 */
                    DerefOf (WGDY [One]) [0x38] = SD71 /* \SD71 */
                    DerefOf (WGDY [One]) [0x39] = SD72 /* \SD72 */
                    DerefOf (WGDY [One]) [0x3A] = SD73 /* \SD73 */
                    DerefOf (WGDY [One]) [0x3B] = SD74 /* \SD74 */
                    DerefOf (WGDY [One]) [0x3C] = SD75 /* \SD75 */
                    DerefOf (WGDY [One]) [0x3D] = SD76 /* \SD76 */
                    DerefOf (WGDY [One]) [0x3E] = SD77 /* \SD77 */
                    DerefOf (WGDY [One]) [0x3F] = SD78 /* \SD78 */
                    DerefOf (WGDY [One]) [0x40] = SD79 /* \SD79 */
                    DerefOf (WGDY [One]) [0x41] = SD81 /* \SD81 */
                    DerefOf (WGDY [One]) [0x42] = SD82 /* \SD82 */
                    DerefOf (WGDY [One]) [0x43] = SD83 /* \SD83 */
                    DerefOf (WGDY [One]) [0x44] = SD84 /* \SD84 */
                    DerefOf (WGDY [One]) [0x45] = SD85 /* \SD85 */
                    DerefOf (WGDY [One]) [0x46] = SD86 /* \SD86 */
                    DerefOf (WGDY [One]) [0x47] = SD87 /* \SD87 */
                    DerefOf (WGDY [One]) [0x48] = SD88 /* \SD88 */
                    DerefOf (WGDY [One]) [0x49] = SD89 /* \SD89 */
                    Return (WGDY) /* \_SB_.PC00.CNVW.WGDY */
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                    Return (ECKY) /* \_SB_.PC00.CNVW.ECKY */
                }

                Name (PPAY, Package (0x02)
                {
                    0x02, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    DerefOf (PPAY [One]) [One] = WAGM /* \WAGM */
                    DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                    DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                    DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                    DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                    DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                    DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                    DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                    DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                    DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                    DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                    DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                    DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                    DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                    DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                    DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                    DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                    DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                    DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                    DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                    DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                    DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                    DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                    Return (PPAY) /* \_SB_.PC00.CNVW.PPAY */
                }

                Name (WPFY, Package (0x02)
                {
                    Zero, 
                    Package (0x05)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WPFC, 0, Serialized)
                {
                    DerefOf (WPFY [One]) [One] = WPFA /* \WPFA */
                    DerefOf (WPFY [One]) [0x02] = WPFB /* \WPFB */
                    DerefOf (WPFY [One]) [0x03] = \WPFC
                    DerefOf (WPFY [One]) [0x04] = WPFD /* \WPFD */
                    Return (WPFY) /* \_SB_.PC00.CNVW.WPFY */
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    DerefOf (WTSY [One]) [One] = WTSE /* \WTSE */
                    DerefOf (WTSY [One]) [0x02] = WTLE /* \WTLE */
                    DerefOf (WTSY [One]) [0x03] = BL01 /* \BL01 */
                    DerefOf (WTSY [One]) [0x04] = BL02 /* \BL02 */
                    DerefOf (WTSY [One]) [0x05] = BL03 /* \BL03 */
                    DerefOf (WTSY [One]) [0x06] = BL04 /* \BL04 */
                    DerefOf (WTSY [One]) [0x07] = BL05 /* \BL05 */
                    DerefOf (WTSY [One]) [0x08] = BL06 /* \BL06 */
                    DerefOf (WTSY [One]) [0x09] = BL07 /* \BL07 */
                    DerefOf (WTSY [One]) [0x0A] = BL08 /* \BL08 */
                    DerefOf (WTSY [One]) [0x0B] = BL09 /* \BL09 */
                    DerefOf (WTSY [One]) [0x0C] = BL10 /* \BL10 */
                    DerefOf (WTSY [One]) [0x0D] = BL11 /* \BL11 */
                    DerefOf (WTSY [One]) [0x0E] = BL12 /* \BL12 */
                    DerefOf (WTSY [One]) [0x0F] = BL13 /* \BL13 */
                    DerefOf (WTSY [One]) [0x10] = BL14 /* \BL14 */
                    DerefOf (WTSY [One]) [0x11] = BL15 /* \BL15 */
                    DerefOf (WTSY [One]) [0x12] = BL16 /* \BL16 */
                    Return (WTSY) /* \_SB_.PC00.CNVW.WTSY */
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    DerefOf (WAIY [One]) [One] = WLBI /* \WLBI */
                    DerefOf (WAIY [One]) [0x02] = WHBI /* \WHBI */
                    Return (WAIY) /* \_SB_.PC00.CNVW.WAIY */
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PC00.CNVW.SADX */
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PC00.CNVW.GPCX */
                }

                Name (GLAX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Zero
                    }
                })
                Method (GLAI, 0, Serialized)
                {
                    ADBG (Concatenate ("AR: GLAI method. CGLS = ", ToHexString (CGLS)))
                    DerefOf (GLAX [One]) [One] = CGLS /* \CGLS */
                    DerefOf (GLAX [0x02]) [One] = CGLS /* \CGLS */
                    Return (GLAX) /* \_SB_.PC00.CNVW.GLAX */
                }

                Name (FDEL, Zero)
                Name (PDEL, Zero)
                Name (VDEL, Zero)
                Method (IFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x1F                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        ADBG (Concatenate ("vPro: ", CVPR))
                        Local0 = (CVPR << Zero)
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        ADBG (Concatenate ("CmdType = ", ToHexString (CMDT)))
                        ADBG (Concatenate ("CmdPayload = ", ToHexString (CMDP)))
                        If ((CMDT == One))
                        {
                            If (^^RP12.PXSX.WIST ())
                            {
                                Return (RSTY) /* External reference */
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Get _PRR Mode = ", RSTT))
                                Return (RSTT) /* \_SB_.PC00.CNVW.RSTT */
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((CMDT == 0x02))
                        {
                            If (^^RP12.PXSX.WIST ())
                            {
                                Local0 = (CMDP & One)
                                RSTY = Local0
                                Local1 = (CMDP & 0x02)
                                Local1 >>= One
                                FLRC = Local1
                                Local2 = (CMDP & 0x04)
                                Local2 >>= 0x02
                                BOFC = Local2
                            }
                            ElseIf (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                ADBG (Concatenate ("Set _PRR Mode = ", ToHexString (CMDP)))
                                RSTT = CMDP /* \_SB_.PC00.CNVW.IFUN.CMDP */
                            }

                            Return (Zero)
                        }

                        If ((CMDT == 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                ADBG (Concatenate ("Get Last_PRR status PRRS = ", ToHexString (PRRS)))
                                Return (PRRS) /* \_SB_.PC00.CNVW.PRRS */
                            }
                            ElseIf (^^RP12.PXSX.WIST ())
                            {
                                ADBG (Concatenate ("Get Last_PRR status DPRS = ", ToHexString (DPRS)))
                                Return (DPRS) /* External reference */
                            }
                        }

                        Return (Zero)
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((CRFI == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        CreateWordField (Arg3, Zero, PRTT)
                        CreateWordField (Arg3, 0x02, PRTD)
                        ADBG (Concatenate ("TimerType = ", ToHexString (PRTT)))
                        ADBG (Concatenate ("TimerDuration (ms) = ", ToDecimalString (PRTD)))
                        If ((PRTT == One))
                        {
                            FDEL = PRTD /* \_SB_.PC00.CNVW.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x02))
                        {
                            PDEL = PRTD /* \_SB_.PC00.CNVW.IFUN.PRTD */
                        }
                        ElseIf ((PRTT == 0x03))
                        {
                            VDEL = PRTD /* \_SB_.PC00.CNVW.IFUN.PRTD */
                        }
                        Else
                        {
                            ADBG ("TimerDuration not set")
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x1F                                       // ..
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Local0 = ACSD /* \ACSD */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Local0 = I5BS /* \I5BS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 = UHBS /* \UHBS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x06))
                    {
                        Local0 = AXMU /* \AXMU */
                        Local0 <<= One
                        Local0 |= AXSU /* \AXSU */
                        Local1 = AXMR /* \AXMR */
                        Local1 <<= One
                        Local1 |= AXSR /* \AXSR */
                        Local1 <<= 0x02
                        Local0 |= Local1
                        Return (Local0)
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (WFRC) /* \WFRC */
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (WFUC) /* \WFUC */
                    }

                    If ((Arg2 == 0x07))
                    {
                        Return (UNI4) /* \UNI4 */
                    }

                    If ((Arg2 == 0x08))
                    {
                        Return (WFIC) /* \WFIC */
                    }

                    If ((Arg2 == 0x09))
                    {
                        Return (WFBS) /* \WFBS */
                    }

                    If ((Arg2 == 0x0A))
                    {
                        Return (WEDT) /* \WEDT */
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((CIRM == One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        Return (WF7C) /* \WF7C */
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (EDSM (Arg0))
                    {
                        Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                    }

                    If (IDSM (Arg0))
                    {
                        Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        If (((CBTC == One) && (CBTI == One)))
        {
            If ((PU2C == 0x0A))
            {
                Scope (_SB.PC00.XHCI.RHUB.HS10)
                {
                    Name (SADX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            0x80000000
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            0x80000000
                        }
                    })
                    Method (SADS, 0, Serialized)
                    {
                        DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                        DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                        Return (SADX) /* \_SB_.PC00.XHCI.RHUB.HS10.SADX */
                    }

                    Name (BRDY, Package (0x02)
                    {
                        One, 
                        Package (0x0A)
                        {
                            0x12, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (BRDS, 0, Serialized)
                    {
                        DerefOf (BRDY [One]) [One] = BTSE /* \BTSE */
                        DerefOf (BRDY [One]) [0x02] = BIPM /* \BIPM */
                        DerefOf (BRDY [One]) [0x03] = BSPL /* \BSPL */
                        DerefOf (BRDY [One]) [0x04] = BTBR /* \BTBR */
                        DerefOf (BRDY [One]) [0x05] = BED2 /* \BED2 */
                        DerefOf (BRDY [One]) [0x06] = BED3 /* \BED3 */
                        DerefOf (BRDY [One]) [0x07] = BTLE /* \BTLE */
                        DerefOf (BRDY [One]) [0x08] = BTL2 /* \BTL2 */
                        DerefOf (BRDY [One]) [0x09] = BTLL /* \BTLL */
                        Return (BRDY) /* \_SB_.PC00.XHCI.RHUB.HS10.BRDY */
                    }

                    Name (ECKY, Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x12, 
                            Zero
                        }
                    })
                    Method (ECKV, 0, Serialized)
                    {
                        DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                        Return (ECKY) /* \_SB_.PC00.XHCI.RHUB.HS10.ECKY */
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("aa10f4e0-81ac-4233-abf6-3b2ac50e28d9") /* Unknown UUID */))
                        {
                            If ((Arg2 == Zero))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x1B                                             // .
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }

                            If ((Arg2 == One))
                            {
                                ADBG (Concatenate ("Set RDLY ", ToDecimalString (Arg3)))
                                RDLY = Arg3
                            }

                            If ((Arg2 == 0x03))
                            {
                                CreateWordField (Arg3, Zero, CMDT)
                                CreateWordField (Arg3, 0x02, CMDP)
                                If ((CMDT == One))
                                {
                                    BRMT = CMDP /* \_SB_.PC00.XHCI.RHUB.HS10._DSM.CMDP */
                                }
                            }

                            If ((Arg2 == 0x04))
                            {
                                Return (BRMT) /* External reference */
                            }

                            Return (Zero)
                        }
                        ElseIf ((Arg0 == ToUUID ("2d19d3e1-5708-4696-bd5b-2c3dbae2d6a9") /* Unknown UUID */))
                        {
                            If ((Arg2 == Zero))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }

                            If ((Arg2 == One))
                            {
                                ADBG (Concatenate ("Tile Activation ", ToDecimalString (Arg3)))
                            }

                            Return (Zero)
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    PowerResource (BTRT, 0x05, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            ADBG ("BT PR _STA")
                            Return (One)
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                            ADBG ("BT PR _ON")
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                            ADBG ("BT PR _OFF")
                        }

                        Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                        {
                            ADBG ("BT PR _RST")
                            Local0 = Acquire (CNMT, 0x03E8)
                            ADBG ("BT CNMT Mutex:Acquired Try Done")
                            If ((Local0 == Zero))
                            {
                                BTRK (Zero)
                                Sleep (RDLY)
                                BTRK (One)
                                Sleep (RDLY)
                            }

                            Release (CNMT)
                        }
                    }

                    PowerResource (DBTR, 0x05, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            ADBG ("BT PR _STA")
                            Return (One)
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                            ADBG ("BT PR _ON")
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                            ADBG ("BT PR _OFF")
                        }

                        Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                        {
                            ADBG ("CNVd BT _RST")
                            ADBG (Concatenate (" WVHO -  ", ToHexString (WVHO)))
                            Local0 = Acquire (CNMT, 0x03E8)
                            ADBG ("BT CNMT Mutex:Acquired Try Done")
                            If ((Local0 == Zero))
                            {
                                If ((BRMT == Zero))
                                {
                                    ADBG ("BT RF Kill ON")
                                    BTRK (Zero)
                                }
                                ElseIf ((WVHO != Zero))
                                {
                                    ^^^^^RP12.PXSX.BTIE = Zero
                                    ADBG ("Set BTIE Disable")
                                }

                                Sleep (RDLY)
                                If ((BRMT == Zero))
                                {
                                    ADBG ("BT RF Kill OFF")
                                    BTRK (One)
                                }
                                ElseIf ((WVHO != Zero))
                                {
                                    ^^^^^RP12.PXSX.BTIE = One
                                    ADBG ("Set BTIE Enable")
                                }

                                Sleep (RDLY)
                            }

                            Release (CNMT)
                        }
                    }

                    Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                    {
                        If (((CBTC == One) && (CBTI == One)))
                        {
                            Return (Package (0x01)
                            {
                                BTRT
                            })
                        }
                        Else
                        {
                            Return (Package (0x01)
                            {
                                DBTR
                            })
                        }
                    }

                    Name (GPCX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                    Method (GPC, 0, Serialized)
                    {
                        Return (GPCX) /* \_SB_.PC00.XHCI.RHUB.HS10.GPCX */
                    }

                    Name (GLAX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Zero
                        }
                    })
                    Method (GLAI, 0, Serialized)
                    {
                        ADBG (Concatenate ("AR: GLAI method. CGLS = ", ToHexString (CGLS)))
                        DerefOf (GLAX [One]) [One] = CGLS /* \CGLS */
                        DerefOf (GLAX [0x02]) [One] = CGLS /* \CGLS */
                        Return (GLAX) /* \_SB_.PC00.XHCI.RHUB.HS10.GLAX */
                    }

                    Name (BTLY, Package (0x02)
                    {
                        One, 
                        Package (0x0B)
                        {
                            0x12, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    })
                    Method (BTLC, 0, Serialized)
                    {
                        DerefOf (BTLY [One]) [One] = TILE /* \TILE */
                        DerefOf (BTLY [One]) [0x02] = TIS0 /* \TIS0 */
                        DerefOf (BTLY [One]) [0x03] = TS0X /* \TS0X */
                        DerefOf (BTLY [One]) [0x04] = TIS4 /* \TIS4 */
                        DerefOf (BTLY [One]) [0x05] = TIS5 /* \TIS5 */
                        DerefOf (BTLY [One]) [0x06] = BLEC /* \BLEC */
                        DerefOf (BTLY [One]) [0x07] = BLPD /* \BLPD */
                        DerefOf (BTLY [One]) [0x08] = BLPI /* \BLPI */
                        Return (BTLY) /* \_SB_.PC00.XHCI.RHUB.HS10.BTLY */
                    }

                    Method (AOLX, 0, NotSerialized)
                    {
                        Name (AODS, Package (0x03)
                        {
                            Zero, 
                            0x12, 
                            Zero
                        })
                        If ((CBTA == One))
                        {
                            If ((CRFP == Zero))
                            {
                                If ((HDBO & One))
                                {
                                    AODS [0x02] = One
                                }
                            }
                            Else
                            {
                                AODS [0x02] = One
                            }
                        }

                        Return (AODS) /* \_SB_.PC00.XHCI.RHUB.HS10.AOLX.AODS */
                    }

                    Method (AOLD, 0, NotSerialized)
                    {
                        Return (AOLX ())
                    }
                }
            }
        }
    }

    Scope (_SB.PC00.UA00)
    {
        Device (BTH0)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return ("INT33E1")
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                SHPO (GBTI, One)
                SHPO (GBTK, One)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFG, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                        0x0020, 0x0020, "\\_SB.PC00.UA00",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                    GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                CreateWordField (SBFG, 0x5F, INT3)
                CreateWordField (SBFG, 0x3C, KIL3)
                INT3 = GNUM (GBTI)
                KIL3 = GNUM (GBTK)
                Name (SBFI, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                        0x0020, 0x0020, "\\_SB.PC00.UA00",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                    Interrupt (ResourceConsumer, Edge, ActiveLow, ExclusiveAndWake, ,, _Y4E)
                    {
                        0x00000000,
                    }
                })
                CreateDWordField (SBFI, \_SB.PC00.UA00.BTH0._CRS._Y4E._INT, INT4)  // _INT: Interrupts
                CreateWordField (SBFI, 0x3C, KIL4)
                INT4 = INUM (GBTI)
                KIL4 = GNUM (GBTK)
                If ((SDM9 == Zero))
                {
                    Return (SBFG) /* \_SB_.PC00.UA00.BTH0._CRS.SBFG */
                }
                Else
                {
                    Return (SBFI) /* \_SB_.PC00.UA00.BTH0._CRS.SBFI */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SDS9 != 0x02))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Name (_S0W, 0x02)  // _S0W: S0 Device Wake State
        }

        Name (BRDY, Package (0x02)
        {
            One, 
            Package (0x0A)
            {
                0x12, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80
            }
        })
        Method (BRDS, 0, Serialized)
        {
            DerefOf (BRDY [One]) [One] = BTSE /* \BTSE */
            DerefOf (BRDY [One]) [0x02] = BIPM /* \BIPM */
            DerefOf (BRDY [One]) [0x03] = BSPL /* \BSPL */
            DerefOf (BRDY [One]) [0x04] = BTBR /* \BTBR */
            DerefOf (BRDY [One]) [0x05] = BED2 /* \BED2 */
            DerefOf (BRDY [One]) [0x06] = BED3 /* \BED3 */
            DerefOf (BRDY [One]) [0x07] = BTLE /* \BTLE */
            DerefOf (BRDY [One]) [0x08] = BTL2 /* \BTL2 */
            DerefOf (BRDY [One]) [0x09] = BTLL /* \BTLL */
            Return (BRDY) /* \_SB_.PC00.UA00.BRDY */
        }

        Name (ECKY, Package (0x02)
        {
            Zero, 
            Package (0x02)
            {
                0x12, 
                Zero
            }
        })
        Method (ECKV, 0, Serialized)
        {
            DerefOf (ECKY [One]) [One] = CECV /* \CECV */
            Return (ECKY) /* \_SB_.PC00.UA00.ECKY */
        }

        Name (GPCX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x07, 
                Package (0x03)
                {
                    Zero, 
                    Zero, 
                    Zero
                }
            }, 

            Package (0x02)
            {
                0x12, 
                Package (0x03)
                {
                    Zero, 
                    Zero, 
                    Zero
                }
            }
        })
        Method (GPC, 0, Serialized)
        {
            Return (GPCX) /* \_SB_.PC00.UA00.GPCX */
        }

        Name (GLAX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x07, 
                Zero
            }, 

            Package (0x02)
            {
                0x12, 
                Zero
            }
        })
        Method (GLAI, 0, Serialized)
        {
            ADBG (Concatenate ("AR: GLAI method. CGLS = ", ToHexString (CGLS)))
            DerefOf (GLAX [One]) [One] = CGLS /* \CGLS */
            DerefOf (GLAX [0x02]) [One] = CGLS /* \CGLS */
            Return (GLAX) /* \_SB_.PC00.UA00.GLAX */
        }
    }

    Scope (_SB.PC00.HDAS)
    {
        Method (PPMS, 1, Serialized)
        {
            ADBG ("PPMS called")
            ADBG (Arg0)
            If ((Arg0 == ToUUID ("7c708106-3aff-40fe-88be-8c999b3f7445") /* Unknown UUID */))
            {
                Return ((ADPM & 0x04))
            }

            If ((Arg0 == ToUUID ("ec774fa9-28d3-424a-90e4-69f984f1eeb7") /* Unknown UUID */))
            {
                Return ((ADPM & 0x0100))
            }

            If ((Arg0 == ACCG (AG1L, AG1H)))
            {
                ADBG ("Alpha passed")
                Return ((ADPM & 0x20000000))
            }

            If ((Arg0 == ACCG (AG2L, AG2H)))
            {
                ADBG ("Beta passed")
                Return ((ADPM & 0x40000000))
            }

            If ((Arg0 == ACCG (AG3L, AG3H)))
            {
                ADBG ("Gamma passed")
                Return ((ADPM & 0x80000000))
            }

            Return (Zero)
        }

        Method (ACCG, 2, NotSerialized)
        {
            Name (GBUF, Buffer (0x10){})
            Concatenate (Arg0, Arg1, GBUF) /* \_SB_.PC00.HDAS.ACCG.GBUF */
            Return (GBUF) /* \_SB_.PC00.HDAS.ACCG.GBUF */
        }
    }

    If ((I2SB == Zero))
    {
        Scope (_SB.PC00.I2C0)
        {
            If (((I2SC != 0x04) && ((I2SC != 0x03) && 
                (I2SC != 0x05))))
            {
                Device (HDC1)
                {
                    Name (_HID, "10EC1308")  // _HID: Hardware ID
                    Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CDIS, Zero)
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (ConcatenateResTemplate (IICB (0x10, I2SB), INTB (I2SI, Zero, Zero)))
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (_CRS ())
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((I2SC == 0x02) && (CDIS != One)))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CDIS = Zero
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        CDIS = One
                    }
                }

                Device (HDC2)
                {
                    Name (_HID, "INT34C2")  // _HID: Hardware ID
                    Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CDIS, Zero)
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (ConcatenateResTemplate (IICB (0x1C, I2SB), INTB (I2SI, Zero, Zero)))
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (_CRS ())
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((I2SC == One) && (CDIS != One)))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CDIS = Zero
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        CDIS = One
                    }
                }
            }
            Else
            {
                Device (ESSX)
                {
                    Name (_HID, "ESSX8316")  // _HID: Hardware ID
                    Name (_CID, "ESSX8316")  // _CID: Compatible ID
                    Name (_DDN, "ESSX Codec Controller 8316 ")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        If ((I2SC == 0x03))
                        {
                            _HID = "ESSX8316"
                            _CID = "ESSX8316"
                            _DDN = "ESSX Codec Controller 8316"
                        }
                        ElseIf ((I2SC == 0x04))
                        {
                            _HID = "ESSX8326"
                            _CID = "ESSX8326"
                            _DDN = "ESSX Codec Controller 8326"
                        }
                        ElseIf ((I2SC == 0x05))
                        {
                            _HID = "ESSX8336"
                            _CID = "ESSX8336"
                            _DDN = "ESSX Codec Controller 8336"
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((I2SC == 0x03) || (I2SC == 0x05)))
                        {
                            Name (SBFB, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0011, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C0",
                                    0x00, ResourceConsumer, , Exclusive,
                                    )
                            })
                        }
                        ElseIf ((I2SC == 0x04))
                        {
                            Name (SBF2, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0018, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C0",
                                    0x00, ResourceConsumer, , Exclusive,
                                    )
                            })
                        }

                        Name (PBUF, ResourceTemplate ()
                        {
                            GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                                "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                                )
                                {   // Pin list
                                    0x0166
                                }
                        })
                        Name (GBUF, ResourceTemplate ()
                        {
                            GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullUp, 0x0000,
                                "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                                )
                                {   // Pin list
                                    0x0162
                                }
                        })
                        If (((I2SC == 0x03) || (I2SC == 0x05)))
                        {
                            Return (ConcatenateResTemplate (SBFB, ConcatenateResTemplate (PBUF, GBUF)))
                        }
                        Else
                        {
                            Return (ConcatenateResTemplate (SBF2, ConcatenateResTemplate (PBUF, GBUF)))
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (_CRS ())
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == Buffer (0x10)
                                {
                                    /* 0000 */  0x04, 0x0C, 0x80, 0xA9, 0x16, 0xE0, 0x3E, 0x34,  // ......>4
                                    /* 0008 */  0x41, 0xF4, 0x6B, 0xCC, 0xE7, 0x0F, 0x43, 0x32   // A.k...C2
                                }))
                        {
                            If ((Arg2 == Zero))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBB)
                                }
                                Else
                                {
                                    Return (0x55)
                                }
                            }

                            If ((Arg2 == One))
                            {
                                Return (0xCC)
                            }

                            If ((Arg2 == 0x02))
                            {
                                Return (0x02)
                            }

                            If ((Arg2 == 0x03))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x06))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x0E))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x1A)
                                }
                                Else
                                {
                                    Return (0x10)
                                }
                            }

                            If ((Arg2 == 0x0F))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x10))
                            {
                                Return (0x06)
                            }

                            If ((Arg2 == 0x20))
                            {
                                Return (0x08)
                            }

                            If ((Arg2 == 0x11))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x2C))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0x2D))
                            {
                                Return (0x1B)
                            }

                            If ((Arg2 == 0x11))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x21))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x12))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x22))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x13))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x23))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x14))
                            {
                                Return (0x0A)
                            }

                            If ((Arg2 == 0x24))
                            {
                                Return (0x0A)
                            }

                            If ((Arg2 == 0x15))
                            {
                                Return (0x12)
                            }

                            If ((Arg2 == 0x25))
                            {
                                Return (0x12)
                            }

                            If ((Arg2 == 0x16))
                            {
                                Return (0x08)
                            }

                            If ((Arg2 == 0x26))
                            {
                                Return (0x08)
                            }

                            If ((Arg2 == 0x17))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x27))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x18))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x28))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x19))
                            {
                                Return (0x02)
                            }

                            If ((Arg2 == 0x29))
                            {
                                Return (0x02)
                            }

                            If ((Arg2 == 0x1A))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0x2A))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0x1B))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x2B))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x40))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x50))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x41))
                            {
                                Return (0xBB)
                            }

                            If ((Arg2 == 0x51))
                            {
                                Return (0xBB)
                            }

                            If ((Arg2 == 0x42))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x52))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x44))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x54))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x45))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x55))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x4A))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x5A))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x46))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x56))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x5B))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x85))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x8E))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x8F))
                            {
                                Return (0x11)
                            }

                            If ((Arg2 == 0x90))
                            {
                                Return (0x22)
                            }

                            If ((Arg2 == 0x91))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x92))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x93))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x94))
                            {
                                Return (0x62)
                            }

                            If ((Arg2 == 0x95))
                            {
                                Return (0x41)
                            }

                            If ((Arg2 == 0x96))
                            {
                                Return (0x41)
                            }

                            If ((Arg2 == 0x97))
                            {
                                Return (0x41)
                            }

                            If ((Arg2 == 0x98))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x99))
                            {
                                Return (0x80)
                            }

                            If ((Arg2 == 0x9A))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0x9B))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0x9C))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x9D))
                            {
                                Return (0x80)
                            }

                            If ((Arg2 == 0x9E))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0x9F))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0xA0))
                            {
                                Return (0x71)
                            }

                            If ((Arg2 == 0xA1))
                            {
                                Return (0x11)
                            }

                            If ((Arg2 == 0xA2))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA3))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA4))
                            {
                                Return (0x71)
                            }

                            If ((Arg2 == 0xA5))
                            {
                                Return (0x11)
                            }

                            If ((Arg2 == 0xA6))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA7))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA8))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA9))
                            {
                                Return (0x31)
                            }

                            If ((Arg2 == 0xAA))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xAB))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xAC))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xAD))
                            {
                                Return (0x31)
                            }

                            If ((Arg2 == 0xAE))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xAF))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xB0))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xB1))
                            {
                                Return (0x20)
                            }

                            If ((Arg2 == 0xB2))
                            {
                                Return (0x20)
                            }

                            If ((Arg2 == 0xB3))
                            {
                                Return (0x20)
                            }

                            If ((Arg2 == 0xB4))
                            {
                                Return (0xA0)
                            }

                            If ((Arg2 == 0xB5))
                            {
                                Return (0xB0)
                            }

                            If ((Arg2 == 0xB6))
                            {
                                Return (0xB0)
                            }

                            If ((Arg2 == 0xB7))
                            {
                                Return (0xB0)
                            }

                            If ((Arg2 == 0xB8))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xB9))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0xBA))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0xBB))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0xBC))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0xBD))
                            {
                                Return (0x04)
                            }

                            If ((Arg2 == 0xBE))
                            {
                                Return (0x04)
                            }

                            If ((Arg2 == 0xBF))
                            {
                                Return (0x04)
                            }

                            If ((Arg2 == 0xC0))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC1))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC2))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC3))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC4))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xC5))
                            {
                                Return (0xB3)
                            }

                            If ((Arg2 == 0xC6))
                            {
                                Return (0xC9)
                            }

                            If ((Arg2 == 0xC7))
                            {
                                Return (0x8C)
                            }

                            If ((Arg2 == 0xC8))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xC9))
                            {
                                Return (0xB3)
                            }

                            If ((Arg2 == 0xCA))
                            {
                                Return (0xC9)
                            }

                            If ((Arg2 == 0xCB))
                            {
                                Return (0x8C)
                            }

                            If ((Arg2 == 0xCC))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xCD))
                            {
                                Return (0xB3)
                            }

                            If ((Arg2 == 0xCE))
                            {
                                Return (0xC9)
                            }

                            If ((Arg2 == 0xCF))
                            {
                                Return (0x8C)
                            }

                            If ((Arg2 == 0xD0))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD1))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD2))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD3))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD4))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xD5))
                            {
                                Return (0xC6)
                            }

                            If ((Arg2 == 0xD6))
                            {
                                Return (0x73)
                            }

                            If ((Arg2 == 0xD7))
                            {
                                Return (0x86)
                            }

                            If ((Arg2 == 0xD8))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xD9))
                            {
                                Return (0xC6)
                            }

                            If ((Arg2 == 0xDA))
                            {
                                Return (0x73)
                            }

                            If ((Arg2 == 0xDB))
                            {
                                Return (0x86)
                            }

                            If ((Arg2 == 0xDC))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xDD))
                            {
                                Return (0xC6)
                            }

                            If ((Arg2 == 0xDE))
                            {
                                Return (0x73)
                            }

                            If ((Arg2 == 0xDF))
                            {
                                Return (0x86)
                            }
                        }

                        Return (0xFF)
                    }
                }
            }
        }
    }
    ElseIf ((I2SB == One))
    {
        Scope (_SB.PC00.I2C1)
        {
            If (((I2SC != 0x04) && ((I2SC != 0x03) && 
                (I2SC != 0x05))))
            {
                Device (HDC1)
                {
                    Name (_HID, "10EC1308")  // _HID: Hardware ID
                    Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CDIS, Zero)
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (ConcatenateResTemplate (IICB (0x10, I2SB), INTB (I2SI, Zero, Zero)))
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (_CRS ())
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((I2SC == 0x02) && (CDIS != One)))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CDIS = Zero
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        CDIS = One
                    }
                }

                Device (HDC2)
                {
                    Name (_HID, "INT34C2")  // _HID: Hardware ID
                    Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CDIS, Zero)
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (ConcatenateResTemplate (IICB (0x1C, I2SB), INTB (I2SI, Zero, Zero)))
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (_CRS ())
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((I2SC == One) && (CDIS != One)))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CDIS = Zero
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        CDIS = One
                    }
                }
            }
            Else
            {
                Device (ESSX)
                {
                    Name (_HID, "ESSX8316")  // _HID: Hardware ID
                    Name (_CID, "ESSX8316")  // _CID: Compatible ID
                    Name (_DDN, "ESSX Codec Controller 8316 ")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        If ((I2SC == 0x03))
                        {
                            _HID = "ESSX8316"
                            _CID = "ESSX8316"
                            _DDN = "ESSX Codec Controller 8316"
                        }
                        ElseIf ((I2SC == 0x04))
                        {
                            _HID = "ESSX8326"
                            _CID = "ESSX8326"
                            _DDN = "ESSX Codec Controller 8326"
                        }
                        ElseIf ((I2SC == 0x05))
                        {
                            _HID = "ESSX8336"
                            _CID = "ESSX8336"
                            _DDN = "ESSX Codec Controller 8336"
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((I2SC == 0x03) || (I2SC == 0x05)))
                        {
                            Name (SBFB, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0011, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C0",
                                    0x00, ResourceConsumer, , Exclusive,
                                    )
                            })
                        }
                        ElseIf ((I2SC == 0x04))
                        {
                            Name (SBF2, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0018, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C0",
                                    0x00, ResourceConsumer, , Exclusive,
                                    )
                            })
                        }

                        Name (PBUF, ResourceTemplate ()
                        {
                            GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                                "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                                )
                                {   // Pin list
                                    0x0166
                                }
                        })
                        Name (GBUF, ResourceTemplate ()
                        {
                            GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullUp, 0x0000,
                                "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                                )
                                {   // Pin list
                                    0x0162
                                }
                        })
                        If (((I2SC == 0x03) || (I2SC == 0x05)))
                        {
                            Return (ConcatenateResTemplate (SBFB, ConcatenateResTemplate (PBUF, GBUF)))
                        }
                        Else
                        {
                            Return (ConcatenateResTemplate (SBF2, ConcatenateResTemplate (PBUF, GBUF)))
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (_CRS ())
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == Buffer (0x10)
                                {
                                    /* 0000 */  0x04, 0x0C, 0x80, 0xA9, 0x16, 0xE0, 0x3E, 0x34,  // ......>4
                                    /* 0008 */  0x41, 0xF4, 0x6B, 0xCC, 0xE7, 0x0F, 0x43, 0x32   // A.k...C2
                                }))
                        {
                            If ((Arg2 == Zero))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBB)
                                }
                                Else
                                {
                                    Return (0x55)
                                }
                            }

                            If ((Arg2 == One))
                            {
                                Return (0xCC)
                            }

                            If ((Arg2 == 0x02))
                            {
                                Return (0x02)
                            }

                            If ((Arg2 == 0x03))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x06))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x0E))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x1A)
                                }
                                Else
                                {
                                    Return (0x10)
                                }
                            }

                            If ((Arg2 == 0x0F))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x10))
                            {
                                Return (0x06)
                            }

                            If ((Arg2 == 0x20))
                            {
                                Return (0x08)
                            }

                            If ((Arg2 == 0x11))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x2C))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0x2D))
                            {
                                Return (0x1B)
                            }

                            If ((Arg2 == 0x11))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x21))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x12))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x22))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x13))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x23))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x14))
                            {
                                Return (0x0A)
                            }

                            If ((Arg2 == 0x24))
                            {
                                Return (0x0A)
                            }

                            If ((Arg2 == 0x15))
                            {
                                Return (0x12)
                            }

                            If ((Arg2 == 0x25))
                            {
                                Return (0x12)
                            }

                            If ((Arg2 == 0x16))
                            {
                                Return (0x08)
                            }

                            If ((Arg2 == 0x26))
                            {
                                Return (0x08)
                            }

                            If ((Arg2 == 0x17))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x27))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x18))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x28))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x19))
                            {
                                Return (0x02)
                            }

                            If ((Arg2 == 0x29))
                            {
                                Return (0x02)
                            }

                            If ((Arg2 == 0x1A))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0x2A))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0x1B))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x2B))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x40))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x50))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x41))
                            {
                                Return (0xBB)
                            }

                            If ((Arg2 == 0x51))
                            {
                                Return (0xBB)
                            }

                            If ((Arg2 == 0x42))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x52))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x44))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x54))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x45))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x55))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x4A))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x5A))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x46))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x56))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x5B))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x85))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x8E))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x8F))
                            {
                                Return (0x11)
                            }

                            If ((Arg2 == 0x90))
                            {
                                Return (0x22)
                            }

                            If ((Arg2 == 0x91))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x92))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x93))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x94))
                            {
                                Return (0x62)
                            }

                            If ((Arg2 == 0x95))
                            {
                                Return (0x41)
                            }

                            If ((Arg2 == 0x96))
                            {
                                Return (0x41)
                            }

                            If ((Arg2 == 0x97))
                            {
                                Return (0x41)
                            }

                            If ((Arg2 == 0x98))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x99))
                            {
                                Return (0x80)
                            }

                            If ((Arg2 == 0x9A))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0x9B))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0x9C))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x9D))
                            {
                                Return (0x80)
                            }

                            If ((Arg2 == 0x9E))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0x9F))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0xA0))
                            {
                                Return (0x71)
                            }

                            If ((Arg2 == 0xA1))
                            {
                                Return (0x11)
                            }

                            If ((Arg2 == 0xA2))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA3))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA4))
                            {
                                Return (0x71)
                            }

                            If ((Arg2 == 0xA5))
                            {
                                Return (0x11)
                            }

                            If ((Arg2 == 0xA6))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA7))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA8))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA9))
                            {
                                Return (0x31)
                            }

                            If ((Arg2 == 0xAA))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xAB))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xAC))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xAD))
                            {
                                Return (0x31)
                            }

                            If ((Arg2 == 0xAE))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xAF))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xB0))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xB1))
                            {
                                Return (0x20)
                            }

                            If ((Arg2 == 0xB2))
                            {
                                Return (0x20)
                            }

                            If ((Arg2 == 0xB3))
                            {
                                Return (0x20)
                            }

                            If ((Arg2 == 0xB4))
                            {
                                Return (0xA0)
                            }

                            If ((Arg2 == 0xB5))
                            {
                                Return (0xB0)
                            }

                            If ((Arg2 == 0xB6))
                            {
                                Return (0xB0)
                            }

                            If ((Arg2 == 0xB7))
                            {
                                Return (0xB0)
                            }

                            If ((Arg2 == 0xB8))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xB9))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0xBA))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0xBB))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0xBC))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0xBD))
                            {
                                Return (0x04)
                            }

                            If ((Arg2 == 0xBE))
                            {
                                Return (0x04)
                            }

                            If ((Arg2 == 0xBF))
                            {
                                Return (0x04)
                            }

                            If ((Arg2 == 0xC0))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC1))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC2))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC3))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC4))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xC5))
                            {
                                Return (0xB3)
                            }

                            If ((Arg2 == 0xC6))
                            {
                                Return (0xC9)
                            }

                            If ((Arg2 == 0xC7))
                            {
                                Return (0x8C)
                            }

                            If ((Arg2 == 0xC8))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xC9))
                            {
                                Return (0xB3)
                            }

                            If ((Arg2 == 0xCA))
                            {
                                Return (0xC9)
                            }

                            If ((Arg2 == 0xCB))
                            {
                                Return (0x8C)
                            }

                            If ((Arg2 == 0xCC))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xCD))
                            {
                                Return (0xB3)
                            }

                            If ((Arg2 == 0xCE))
                            {
                                Return (0xC9)
                            }

                            If ((Arg2 == 0xCF))
                            {
                                Return (0x8C)
                            }

                            If ((Arg2 == 0xD0))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD1))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD2))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD3))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD4))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xD5))
                            {
                                Return (0xC6)
                            }

                            If ((Arg2 == 0xD6))
                            {
                                Return (0x73)
                            }

                            If ((Arg2 == 0xD7))
                            {
                                Return (0x86)
                            }

                            If ((Arg2 == 0xD8))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xD9))
                            {
                                Return (0xC6)
                            }

                            If ((Arg2 == 0xDA))
                            {
                                Return (0x73)
                            }

                            If ((Arg2 == 0xDB))
                            {
                                Return (0x86)
                            }

                            If ((Arg2 == 0xDC))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xDD))
                            {
                                Return (0xC6)
                            }

                            If ((Arg2 == 0xDE))
                            {
                                Return (0x73)
                            }

                            If ((Arg2 == 0xDF))
                            {
                                Return (0x86)
                            }
                        }

                        Return (0xFF)
                    }
                }
            }
        }
    }
    ElseIf ((I2SB == 0x02))
    {
        Scope (_SB.PC00.I2C2)
        {
            If (((I2SC != 0x04) && ((I2SC != 0x03) && 
                (I2SC != 0x05))))
            {
                Device (HDC1)
                {
                    Name (_HID, "10EC1308")  // _HID: Hardware ID
                    Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CDIS, Zero)
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (ConcatenateResTemplate (IICB (0x10, I2SB), INTB (I2SI, Zero, Zero)))
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (_CRS ())
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((I2SC == 0x02) && (CDIS != One)))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CDIS = Zero
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        CDIS = One
                    }
                }

                Device (HDC2)
                {
                    Name (_HID, "INT34C2")  // _HID: Hardware ID
                    Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CDIS, Zero)
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (ConcatenateResTemplate (IICB (0x1C, I2SB), INTB (I2SI, Zero, Zero)))
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (_CRS ())
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((I2SC == One) && (CDIS != One)))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CDIS = Zero
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        CDIS = One
                    }
                }
            }
            Else
            {
                Device (ESSX)
                {
                    Name (_HID, "ESSX8316")  // _HID: Hardware ID
                    Name (_CID, "ESSX8316")  // _CID: Compatible ID
                    Name (_DDN, "ESSX Codec Controller 8316 ")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        If ((I2SC == 0x03))
                        {
                            _HID = "ESSX8316"
                            _CID = "ESSX8316"
                            _DDN = "ESSX Codec Controller 8316"
                        }
                        ElseIf ((I2SC == 0x04))
                        {
                            _HID = "ESSX8326"
                            _CID = "ESSX8326"
                            _DDN = "ESSX Codec Controller 8326"
                        }
                        ElseIf ((I2SC == 0x05))
                        {
                            _HID = "ESSX8336"
                            _CID = "ESSX8336"
                            _DDN = "ESSX Codec Controller 8336"
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((I2SC == 0x03) || (I2SC == 0x05)))
                        {
                            Name (SBFB, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0011, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C0",
                                    0x00, ResourceConsumer, , Exclusive,
                                    )
                            })
                        }
                        ElseIf ((I2SC == 0x04))
                        {
                            Name (SBF2, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0018, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C0",
                                    0x00, ResourceConsumer, , Exclusive,
                                    )
                            })
                        }

                        Name (PBUF, ResourceTemplate ()
                        {
                            GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                                "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                                )
                                {   // Pin list
                                    0x0166
                                }
                        })
                        Name (GBUF, ResourceTemplate ()
                        {
                            GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullUp, 0x0000,
                                "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                                )
                                {   // Pin list
                                    0x0162
                                }
                        })
                        If (((I2SC == 0x03) || (I2SC == 0x05)))
                        {
                            Return (ConcatenateResTemplate (SBFB, ConcatenateResTemplate (PBUF, GBUF)))
                        }
                        Else
                        {
                            Return (ConcatenateResTemplate (SBF2, ConcatenateResTemplate (PBUF, GBUF)))
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (_CRS ())
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == Buffer (0x10)
                                {
                                    /* 0000 */  0x04, 0x0C, 0x80, 0xA9, 0x16, 0xE0, 0x3E, 0x34,  // ......>4
                                    /* 0008 */  0x41, 0xF4, 0x6B, 0xCC, 0xE7, 0x0F, 0x43, 0x32   // A.k...C2
                                }))
                        {
                            If ((Arg2 == Zero))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBB)
                                }
                                Else
                                {
                                    Return (0x55)
                                }
                            }

                            If ((Arg2 == One))
                            {
                                Return (0xCC)
                            }

                            If ((Arg2 == 0x02))
                            {
                                Return (0x02)
                            }

                            If ((Arg2 == 0x03))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x06))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x0E))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x1A)
                                }
                                Else
                                {
                                    Return (0x10)
                                }
                            }

                            If ((Arg2 == 0x0F))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x10))
                            {
                                Return (0x06)
                            }

                            If ((Arg2 == 0x20))
                            {
                                Return (0x08)
                            }

                            If ((Arg2 == 0x11))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x2C))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0x2D))
                            {
                                Return (0x1B)
                            }

                            If ((Arg2 == 0x11))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x21))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x12))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x22))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x13))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x23))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x14))
                            {
                                Return (0x0A)
                            }

                            If ((Arg2 == 0x24))
                            {
                                Return (0x0A)
                            }

                            If ((Arg2 == 0x15))
                            {
                                Return (0x12)
                            }

                            If ((Arg2 == 0x25))
                            {
                                Return (0x12)
                            }

                            If ((Arg2 == 0x16))
                            {
                                Return (0x08)
                            }

                            If ((Arg2 == 0x26))
                            {
                                Return (0x08)
                            }

                            If ((Arg2 == 0x17))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x27))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x18))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x28))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x19))
                            {
                                Return (0x02)
                            }

                            If ((Arg2 == 0x29))
                            {
                                Return (0x02)
                            }

                            If ((Arg2 == 0x1A))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0x2A))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0x1B))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x2B))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x40))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x50))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x41))
                            {
                                Return (0xBB)
                            }

                            If ((Arg2 == 0x51))
                            {
                                Return (0xBB)
                            }

                            If ((Arg2 == 0x42))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x52))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x44))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x54))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x45))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x55))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x4A))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x5A))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x46))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x56))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x5B))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x85))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x8E))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x8F))
                            {
                                Return (0x11)
                            }

                            If ((Arg2 == 0x90))
                            {
                                Return (0x22)
                            }

                            If ((Arg2 == 0x91))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x92))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x93))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x94))
                            {
                                Return (0x62)
                            }

                            If ((Arg2 == 0x95))
                            {
                                Return (0x41)
                            }

                            If ((Arg2 == 0x96))
                            {
                                Return (0x41)
                            }

                            If ((Arg2 == 0x97))
                            {
                                Return (0x41)
                            }

                            If ((Arg2 == 0x98))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x99))
                            {
                                Return (0x80)
                            }

                            If ((Arg2 == 0x9A))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0x9B))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0x9C))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x9D))
                            {
                                Return (0x80)
                            }

                            If ((Arg2 == 0x9E))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0x9F))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0xA0))
                            {
                                Return (0x71)
                            }

                            If ((Arg2 == 0xA1))
                            {
                                Return (0x11)
                            }

                            If ((Arg2 == 0xA2))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA3))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA4))
                            {
                                Return (0x71)
                            }

                            If ((Arg2 == 0xA5))
                            {
                                Return (0x11)
                            }

                            If ((Arg2 == 0xA6))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA7))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA8))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA9))
                            {
                                Return (0x31)
                            }

                            If ((Arg2 == 0xAA))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xAB))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xAC))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xAD))
                            {
                                Return (0x31)
                            }

                            If ((Arg2 == 0xAE))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xAF))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xB0))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xB1))
                            {
                                Return (0x20)
                            }

                            If ((Arg2 == 0xB2))
                            {
                                Return (0x20)
                            }

                            If ((Arg2 == 0xB3))
                            {
                                Return (0x20)
                            }

                            If ((Arg2 == 0xB4))
                            {
                                Return (0xA0)
                            }

                            If ((Arg2 == 0xB5))
                            {
                                Return (0xB0)
                            }

                            If ((Arg2 == 0xB6))
                            {
                                Return (0xB0)
                            }

                            If ((Arg2 == 0xB7))
                            {
                                Return (0xB0)
                            }

                            If ((Arg2 == 0xB8))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xB9))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0xBA))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0xBB))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0xBC))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0xBD))
                            {
                                Return (0x04)
                            }

                            If ((Arg2 == 0xBE))
                            {
                                Return (0x04)
                            }

                            If ((Arg2 == 0xBF))
                            {
                                Return (0x04)
                            }

                            If ((Arg2 == 0xC0))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC1))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC2))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC3))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC4))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xC5))
                            {
                                Return (0xB3)
                            }

                            If ((Arg2 == 0xC6))
                            {
                                Return (0xC9)
                            }

                            If ((Arg2 == 0xC7))
                            {
                                Return (0x8C)
                            }

                            If ((Arg2 == 0xC8))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xC9))
                            {
                                Return (0xB3)
                            }

                            If ((Arg2 == 0xCA))
                            {
                                Return (0xC9)
                            }

                            If ((Arg2 == 0xCB))
                            {
                                Return (0x8C)
                            }

                            If ((Arg2 == 0xCC))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xCD))
                            {
                                Return (0xB3)
                            }

                            If ((Arg2 == 0xCE))
                            {
                                Return (0xC9)
                            }

                            If ((Arg2 == 0xCF))
                            {
                                Return (0x8C)
                            }

                            If ((Arg2 == 0xD0))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD1))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD2))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD3))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD4))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xD5))
                            {
                                Return (0xC6)
                            }

                            If ((Arg2 == 0xD6))
                            {
                                Return (0x73)
                            }

                            If ((Arg2 == 0xD7))
                            {
                                Return (0x86)
                            }

                            If ((Arg2 == 0xD8))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xD9))
                            {
                                Return (0xC6)
                            }

                            If ((Arg2 == 0xDA))
                            {
                                Return (0x73)
                            }

                            If ((Arg2 == 0xDB))
                            {
                                Return (0x86)
                            }

                            If ((Arg2 == 0xDC))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xDD))
                            {
                                Return (0xC6)
                            }

                            If ((Arg2 == 0xDE))
                            {
                                Return (0x73)
                            }

                            If ((Arg2 == 0xDF))
                            {
                                Return (0x86)
                            }
                        }

                        Return (0xFF)
                    }
                }
            }
        }
    }
    ElseIf ((I2SB == 0x03))
    {
        Scope (_SB.PC00.I2C3)
        {
            If (((I2SC != 0x04) && ((I2SC != 0x03) && 
                (I2SC != 0x05))))
            {
                Device (HDC1)
                {
                    Name (_HID, "10EC1308")  // _HID: Hardware ID
                    Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CDIS, Zero)
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (ConcatenateResTemplate (IICB (0x10, I2SB), INTB (I2SI, Zero, Zero)))
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (_CRS ())
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((I2SC == 0x02) && (CDIS != One)))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CDIS = Zero
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        CDIS = One
                    }
                }

                Device (HDC2)
                {
                    Name (_HID, "INT34C2")  // _HID: Hardware ID
                    Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CDIS, Zero)
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (ConcatenateResTemplate (IICB (0x1C, I2SB), INTB (I2SI, Zero, Zero)))
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (_CRS ())
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((I2SC == One) && (CDIS != One)))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CDIS = Zero
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        CDIS = One
                    }
                }
            }
            Else
            {
                Device (ESSX)
                {
                    Name (_HID, "ESSX8316")  // _HID: Hardware ID
                    Name (_CID, "ESSX8316")  // _CID: Compatible ID
                    Name (_DDN, "ESSX Codec Controller 8316 ")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        If ((I2SC == 0x03))
                        {
                            _HID = "ESSX8316"
                            _CID = "ESSX8316"
                            _DDN = "ESSX Codec Controller 8316"
                        }
                        ElseIf ((I2SC == 0x04))
                        {
                            _HID = "ESSX8326"
                            _CID = "ESSX8326"
                            _DDN = "ESSX Codec Controller 8326"
                        }
                        ElseIf ((I2SC == 0x05))
                        {
                            _HID = "ESSX8336"
                            _CID = "ESSX8336"
                            _DDN = "ESSX Codec Controller 8336"
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((I2SC == 0x03) || (I2SC == 0x05)))
                        {
                            Name (SBFB, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0011, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C0",
                                    0x00, ResourceConsumer, , Exclusive,
                                    )
                            })
                        }
                        ElseIf ((I2SC == 0x04))
                        {
                            Name (SBF2, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0018, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C0",
                                    0x00, ResourceConsumer, , Exclusive,
                                    )
                            })
                        }

                        Name (PBUF, ResourceTemplate ()
                        {
                            GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                                "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                                )
                                {   // Pin list
                                    0x0166
                                }
                        })
                        Name (GBUF, ResourceTemplate ()
                        {
                            GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullUp, 0x0000,
                                "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                                )
                                {   // Pin list
                                    0x0162
                                }
                        })
                        If (((I2SC == 0x03) || (I2SC == 0x05)))
                        {
                            Return (ConcatenateResTemplate (SBFB, ConcatenateResTemplate (PBUF, GBUF)))
                        }
                        Else
                        {
                            Return (ConcatenateResTemplate (SBF2, ConcatenateResTemplate (PBUF, GBUF)))
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (_CRS ())
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == Buffer (0x10)
                                {
                                    /* 0000 */  0x04, 0x0C, 0x80, 0xA9, 0x16, 0xE0, 0x3E, 0x34,  // ......>4
                                    /* 0008 */  0x41, 0xF4, 0x6B, 0xCC, 0xE7, 0x0F, 0x43, 0x32   // A.k...C2
                                }))
                        {
                            If ((Arg2 == Zero))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBB)
                                }
                                Else
                                {
                                    Return (0x55)
                                }
                            }

                            If ((Arg2 == One))
                            {
                                Return (0xCC)
                            }

                            If ((Arg2 == 0x02))
                            {
                                Return (0x02)
                            }

                            If ((Arg2 == 0x03))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x06))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x0E))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x1A)
                                }
                                Else
                                {
                                    Return (0x10)
                                }
                            }

                            If ((Arg2 == 0x0F))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x10))
                            {
                                Return (0x06)
                            }

                            If ((Arg2 == 0x20))
                            {
                                Return (0x08)
                            }

                            If ((Arg2 == 0x11))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x2C))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0x2D))
                            {
                                Return (0x1B)
                            }

                            If ((Arg2 == 0x11))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x21))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x12))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x22))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x13))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x23))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x14))
                            {
                                Return (0x0A)
                            }

                            If ((Arg2 == 0x24))
                            {
                                Return (0x0A)
                            }

                            If ((Arg2 == 0x15))
                            {
                                Return (0x12)
                            }

                            If ((Arg2 == 0x25))
                            {
                                Return (0x12)
                            }

                            If ((Arg2 == 0x16))
                            {
                                Return (0x08)
                            }

                            If ((Arg2 == 0x26))
                            {
                                Return (0x08)
                            }

                            If ((Arg2 == 0x17))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x27))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x18))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x28))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x19))
                            {
                                Return (0x02)
                            }

                            If ((Arg2 == 0x29))
                            {
                                Return (0x02)
                            }

                            If ((Arg2 == 0x1A))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0x2A))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0x1B))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x2B))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x40))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x50))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x41))
                            {
                                Return (0xBB)
                            }

                            If ((Arg2 == 0x51))
                            {
                                Return (0xBB)
                            }

                            If ((Arg2 == 0x42))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x52))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x44))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x54))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x45))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x55))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x4A))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x5A))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x46))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x56))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x5B))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x85))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x8E))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x8F))
                            {
                                Return (0x11)
                            }

                            If ((Arg2 == 0x90))
                            {
                                Return (0x22)
                            }

                            If ((Arg2 == 0x91))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x92))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x93))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x94))
                            {
                                Return (0x62)
                            }

                            If ((Arg2 == 0x95))
                            {
                                Return (0x41)
                            }

                            If ((Arg2 == 0x96))
                            {
                                Return (0x41)
                            }

                            If ((Arg2 == 0x97))
                            {
                                Return (0x41)
                            }

                            If ((Arg2 == 0x98))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x99))
                            {
                                Return (0x80)
                            }

                            If ((Arg2 == 0x9A))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0x9B))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0x9C))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x9D))
                            {
                                Return (0x80)
                            }

                            If ((Arg2 == 0x9E))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0x9F))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0xA0))
                            {
                                Return (0x71)
                            }

                            If ((Arg2 == 0xA1))
                            {
                                Return (0x11)
                            }

                            If ((Arg2 == 0xA2))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA3))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA4))
                            {
                                Return (0x71)
                            }

                            If ((Arg2 == 0xA5))
                            {
                                Return (0x11)
                            }

                            If ((Arg2 == 0xA6))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA7))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA8))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA9))
                            {
                                Return (0x31)
                            }

                            If ((Arg2 == 0xAA))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xAB))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xAC))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xAD))
                            {
                                Return (0x31)
                            }

                            If ((Arg2 == 0xAE))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xAF))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xB0))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xB1))
                            {
                                Return (0x20)
                            }

                            If ((Arg2 == 0xB2))
                            {
                                Return (0x20)
                            }

                            If ((Arg2 == 0xB3))
                            {
                                Return (0x20)
                            }

                            If ((Arg2 == 0xB4))
                            {
                                Return (0xA0)
                            }

                            If ((Arg2 == 0xB5))
                            {
                                Return (0xB0)
                            }

                            If ((Arg2 == 0xB6))
                            {
                                Return (0xB0)
                            }

                            If ((Arg2 == 0xB7))
                            {
                                Return (0xB0)
                            }

                            If ((Arg2 == 0xB8))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xB9))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0xBA))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0xBB))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0xBC))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0xBD))
                            {
                                Return (0x04)
                            }

                            If ((Arg2 == 0xBE))
                            {
                                Return (0x04)
                            }

                            If ((Arg2 == 0xBF))
                            {
                                Return (0x04)
                            }

                            If ((Arg2 == 0xC0))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC1))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC2))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC3))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC4))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xC5))
                            {
                                Return (0xB3)
                            }

                            If ((Arg2 == 0xC6))
                            {
                                Return (0xC9)
                            }

                            If ((Arg2 == 0xC7))
                            {
                                Return (0x8C)
                            }

                            If ((Arg2 == 0xC8))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xC9))
                            {
                                Return (0xB3)
                            }

                            If ((Arg2 == 0xCA))
                            {
                                Return (0xC9)
                            }

                            If ((Arg2 == 0xCB))
                            {
                                Return (0x8C)
                            }

                            If ((Arg2 == 0xCC))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xCD))
                            {
                                Return (0xB3)
                            }

                            If ((Arg2 == 0xCE))
                            {
                                Return (0xC9)
                            }

                            If ((Arg2 == 0xCF))
                            {
                                Return (0x8C)
                            }

                            If ((Arg2 == 0xD0))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD1))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD2))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD3))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD4))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xD5))
                            {
                                Return (0xC6)
                            }

                            If ((Arg2 == 0xD6))
                            {
                                Return (0x73)
                            }

                            If ((Arg2 == 0xD7))
                            {
                                Return (0x86)
                            }

                            If ((Arg2 == 0xD8))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xD9))
                            {
                                Return (0xC6)
                            }

                            If ((Arg2 == 0xDA))
                            {
                                Return (0x73)
                            }

                            If ((Arg2 == 0xDB))
                            {
                                Return (0x86)
                            }

                            If ((Arg2 == 0xDC))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xDD))
                            {
                                Return (0xC6)
                            }

                            If ((Arg2 == 0xDE))
                            {
                                Return (0x73)
                            }

                            If ((Arg2 == 0xDF))
                            {
                                Return (0x86)
                            }
                        }

                        Return (0xFF)
                    }
                }
            }
        }
    }
    ElseIf ((I2SB == 0x04))
    {
        Scope (_SB.PC00.I2C4)
        {
            If (((I2SC != 0x04) && ((I2SC != 0x03) && 
                (I2SC != 0x05))))
            {
                Device (HDC1)
                {
                    Name (_HID, "10EC1308")  // _HID: Hardware ID
                    Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CDIS, Zero)
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (ConcatenateResTemplate (IICB (0x10, I2SB), INTB (I2SI, Zero, Zero)))
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (_CRS ())
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((I2SC == 0x02) && (CDIS != One)))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CDIS = Zero
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        CDIS = One
                    }
                }

                Device (HDC2)
                {
                    Name (_HID, "INT34C2")  // _HID: Hardware ID
                    Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CDIS, Zero)
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (ConcatenateResTemplate (IICB (0x1C, I2SB), INTB (I2SI, Zero, Zero)))
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (_CRS ())
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((I2SC == One) && (CDIS != One)))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CDIS = Zero
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        CDIS = One
                    }
                }
            }
            Else
            {
                Device (ESSX)
                {
                    Name (_HID, "ESSX8316")  // _HID: Hardware ID
                    Name (_CID, "ESSX8316")  // _CID: Compatible ID
                    Name (_DDN, "ESSX Codec Controller 8316 ")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        If ((I2SC == 0x03))
                        {
                            _HID = "ESSX8316"
                            _CID = "ESSX8316"
                            _DDN = "ESSX Codec Controller 8316"
                        }
                        ElseIf ((I2SC == 0x04))
                        {
                            _HID = "ESSX8326"
                            _CID = "ESSX8326"
                            _DDN = "ESSX Codec Controller 8326"
                        }
                        ElseIf ((I2SC == 0x05))
                        {
                            _HID = "ESSX8336"
                            _CID = "ESSX8336"
                            _DDN = "ESSX Codec Controller 8336"
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((I2SC == 0x03) || (I2SC == 0x05)))
                        {
                            Name (SBFB, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0011, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C0",
                                    0x00, ResourceConsumer, , Exclusive,
                                    )
                            })
                        }
                        ElseIf ((I2SC == 0x04))
                        {
                            Name (SBF2, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0018, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C0",
                                    0x00, ResourceConsumer, , Exclusive,
                                    )
                            })
                        }

                        Name (PBUF, ResourceTemplate ()
                        {
                            GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                                "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                                )
                                {   // Pin list
                                    0x0166
                                }
                        })
                        Name (GBUF, ResourceTemplate ()
                        {
                            GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullUp, 0x0000,
                                "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                                )
                                {   // Pin list
                                    0x0162
                                }
                        })
                        If (((I2SC == 0x03) || (I2SC == 0x05)))
                        {
                            Return (ConcatenateResTemplate (SBFB, ConcatenateResTemplate (PBUF, GBUF)))
                        }
                        Else
                        {
                            Return (ConcatenateResTemplate (SBF2, ConcatenateResTemplate (PBUF, GBUF)))
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (_CRS ())
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == Buffer (0x10)
                                {
                                    /* 0000 */  0x04, 0x0C, 0x80, 0xA9, 0x16, 0xE0, 0x3E, 0x34,  // ......>4
                                    /* 0008 */  0x41, 0xF4, 0x6B, 0xCC, 0xE7, 0x0F, 0x43, 0x32   // A.k...C2
                                }))
                        {
                            If ((Arg2 == Zero))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBB)
                                }
                                Else
                                {
                                    Return (0x55)
                                }
                            }

                            If ((Arg2 == One))
                            {
                                Return (0xCC)
                            }

                            If ((Arg2 == 0x02))
                            {
                                Return (0x02)
                            }

                            If ((Arg2 == 0x03))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x06))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x0E))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x1A)
                                }
                                Else
                                {
                                    Return (0x10)
                                }
                            }

                            If ((Arg2 == 0x0F))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x10))
                            {
                                Return (0x06)
                            }

                            If ((Arg2 == 0x20))
                            {
                                Return (0x08)
                            }

                            If ((Arg2 == 0x11))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x2C))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0x2D))
                            {
                                Return (0x1B)
                            }

                            If ((Arg2 == 0x11))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x21))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x12))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x22))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x13))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x23))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x14))
                            {
                                Return (0x0A)
                            }

                            If ((Arg2 == 0x24))
                            {
                                Return (0x0A)
                            }

                            If ((Arg2 == 0x15))
                            {
                                Return (0x12)
                            }

                            If ((Arg2 == 0x25))
                            {
                                Return (0x12)
                            }

                            If ((Arg2 == 0x16))
                            {
                                Return (0x08)
                            }

                            If ((Arg2 == 0x26))
                            {
                                Return (0x08)
                            }

                            If ((Arg2 == 0x17))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x27))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x18))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x28))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x19))
                            {
                                Return (0x02)
                            }

                            If ((Arg2 == 0x29))
                            {
                                Return (0x02)
                            }

                            If ((Arg2 == 0x1A))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0x2A))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0x1B))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x2B))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x40))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x50))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x41))
                            {
                                Return (0xBB)
                            }

                            If ((Arg2 == 0x51))
                            {
                                Return (0xBB)
                            }

                            If ((Arg2 == 0x42))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x52))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x44))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x54))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x45))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x55))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x4A))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x5A))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x46))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x56))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x5B))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x85))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x8E))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x8F))
                            {
                                Return (0x11)
                            }

                            If ((Arg2 == 0x90))
                            {
                                Return (0x22)
                            }

                            If ((Arg2 == 0x91))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x92))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x93))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x94))
                            {
                                Return (0x62)
                            }

                            If ((Arg2 == 0x95))
                            {
                                Return (0x41)
                            }

                            If ((Arg2 == 0x96))
                            {
                                Return (0x41)
                            }

                            If ((Arg2 == 0x97))
                            {
                                Return (0x41)
                            }

                            If ((Arg2 == 0x98))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x99))
                            {
                                Return (0x80)
                            }

                            If ((Arg2 == 0x9A))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0x9B))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0x9C))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x9D))
                            {
                                Return (0x80)
                            }

                            If ((Arg2 == 0x9E))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0x9F))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0xA0))
                            {
                                Return (0x71)
                            }

                            If ((Arg2 == 0xA1))
                            {
                                Return (0x11)
                            }

                            If ((Arg2 == 0xA2))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA3))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA4))
                            {
                                Return (0x71)
                            }

                            If ((Arg2 == 0xA5))
                            {
                                Return (0x11)
                            }

                            If ((Arg2 == 0xA6))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA7))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA8))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA9))
                            {
                                Return (0x31)
                            }

                            If ((Arg2 == 0xAA))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xAB))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xAC))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xAD))
                            {
                                Return (0x31)
                            }

                            If ((Arg2 == 0xAE))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xAF))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xB0))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xB1))
                            {
                                Return (0x20)
                            }

                            If ((Arg2 == 0xB2))
                            {
                                Return (0x20)
                            }

                            If ((Arg2 == 0xB3))
                            {
                                Return (0x20)
                            }

                            If ((Arg2 == 0xB4))
                            {
                                Return (0xA0)
                            }

                            If ((Arg2 == 0xB5))
                            {
                                Return (0xB0)
                            }

                            If ((Arg2 == 0xB6))
                            {
                                Return (0xB0)
                            }

                            If ((Arg2 == 0xB7))
                            {
                                Return (0xB0)
                            }

                            If ((Arg2 == 0xB8))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xB9))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0xBA))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0xBB))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0xBC))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0xBD))
                            {
                                Return (0x04)
                            }

                            If ((Arg2 == 0xBE))
                            {
                                Return (0x04)
                            }

                            If ((Arg2 == 0xBF))
                            {
                                Return (0x04)
                            }

                            If ((Arg2 == 0xC0))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC1))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC2))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC3))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC4))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xC5))
                            {
                                Return (0xB3)
                            }

                            If ((Arg2 == 0xC6))
                            {
                                Return (0xC9)
                            }

                            If ((Arg2 == 0xC7))
                            {
                                Return (0x8C)
                            }

                            If ((Arg2 == 0xC8))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xC9))
                            {
                                Return (0xB3)
                            }

                            If ((Arg2 == 0xCA))
                            {
                                Return (0xC9)
                            }

                            If ((Arg2 == 0xCB))
                            {
                                Return (0x8C)
                            }

                            If ((Arg2 == 0xCC))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xCD))
                            {
                                Return (0xB3)
                            }

                            If ((Arg2 == 0xCE))
                            {
                                Return (0xC9)
                            }

                            If ((Arg2 == 0xCF))
                            {
                                Return (0x8C)
                            }

                            If ((Arg2 == 0xD0))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD1))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD2))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD3))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD4))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xD5))
                            {
                                Return (0xC6)
                            }

                            If ((Arg2 == 0xD6))
                            {
                                Return (0x73)
                            }

                            If ((Arg2 == 0xD7))
                            {
                                Return (0x86)
                            }

                            If ((Arg2 == 0xD8))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xD9))
                            {
                                Return (0xC6)
                            }

                            If ((Arg2 == 0xDA))
                            {
                                Return (0x73)
                            }

                            If ((Arg2 == 0xDB))
                            {
                                Return (0x86)
                            }

                            If ((Arg2 == 0xDC))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xDD))
                            {
                                Return (0xC6)
                            }

                            If ((Arg2 == 0xDE))
                            {
                                Return (0x73)
                            }

                            If ((Arg2 == 0xDF))
                            {
                                Return (0x86)
                            }
                        }

                        Return (0xFF)
                    }
                }
            }
        }
    }
    ElseIf ((I2SB == 0x05))
    {
        Scope (_SB.PC00.I2C5)
        {
            If (((I2SC != 0x04) && ((I2SC != 0x03) && 
                (I2SC != 0x05))))
            {
                Device (HDC1)
                {
                    Name (_HID, "10EC1308")  // _HID: Hardware ID
                    Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CDIS, Zero)
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (ConcatenateResTemplate (IICB (0x10, I2SB), INTB (I2SI, Zero, Zero)))
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (_CRS ())
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((I2SC == 0x02) && (CDIS != One)))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CDIS = Zero
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        CDIS = One
                    }
                }

                Device (HDC2)
                {
                    Name (_HID, "INT34C2")  // _HID: Hardware ID
                    Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CDIS, Zero)
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (ConcatenateResTemplate (IICB (0x1C, I2SB), INTB (I2SI, Zero, Zero)))
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (_CRS ())
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((I2SC == One) && (CDIS != One)))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CDIS = Zero
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        CDIS = One
                    }
                }
            }
            Else
            {
                Device (ESSX)
                {
                    Name (_HID, "ESSX8316")  // _HID: Hardware ID
                    Name (_CID, "ESSX8316")  // _CID: Compatible ID
                    Name (_DDN, "ESSX Codec Controller 8316 ")  // _DDN: DOS Device Name
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        If ((I2SC == 0x03))
                        {
                            _HID = "ESSX8316"
                            _CID = "ESSX8316"
                            _DDN = "ESSX Codec Controller 8316"
                        }
                        ElseIf ((I2SC == 0x04))
                        {
                            _HID = "ESSX8326"
                            _CID = "ESSX8326"
                            _DDN = "ESSX Codec Controller 8326"
                        }
                        ElseIf ((I2SC == 0x05))
                        {
                            _HID = "ESSX8336"
                            _CID = "ESSX8336"
                            _DDN = "ESSX Codec Controller 8336"
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((I2SC == 0x03) || (I2SC == 0x05)))
                        {
                            Name (SBFB, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0011, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C0",
                                    0x00, ResourceConsumer, , Exclusive,
                                    )
                            })
                        }
                        ElseIf ((I2SC == 0x04))
                        {
                            Name (SBF2, ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0018, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C0",
                                    0x00, ResourceConsumer, , Exclusive,
                                    )
                            })
                        }

                        Name (PBUF, ResourceTemplate ()
                        {
                            GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                                "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                                )
                                {   // Pin list
                                    0x0166
                                }
                        })
                        Name (GBUF, ResourceTemplate ()
                        {
                            GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullUp, 0x0000,
                                "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                                )
                                {   // Pin list
                                    0x0162
                                }
                        })
                        If (((I2SC == 0x03) || (I2SC == 0x05)))
                        {
                            Return (ConcatenateResTemplate (SBFB, ConcatenateResTemplate (PBUF, GBUF)))
                        }
                        Else
                        {
                            Return (ConcatenateResTemplate (SBF2, ConcatenateResTemplate (PBUF, GBUF)))
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (_CRS ())
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }

                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == Buffer (0x10)
                                {
                                    /* 0000 */  0x04, 0x0C, 0x80, 0xA9, 0x16, 0xE0, 0x3E, 0x34,  // ......>4
                                    /* 0008 */  0x41, 0xF4, 0x6B, 0xCC, 0xE7, 0x0F, 0x43, 0x32   // A.k...C2
                                }))
                        {
                            If ((Arg2 == Zero))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBB)
                                }
                                Else
                                {
                                    Return (0x55)
                                }
                            }

                            If ((Arg2 == One))
                            {
                                Return (0xCC)
                            }

                            If ((Arg2 == 0x02))
                            {
                                Return (0x02)
                            }

                            If ((Arg2 == 0x03))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x06))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x0E))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x1A)
                                }
                                Else
                                {
                                    Return (0x10)
                                }
                            }

                            If ((Arg2 == 0x0F))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x10))
                            {
                                Return (0x06)
                            }

                            If ((Arg2 == 0x20))
                            {
                                Return (0x08)
                            }

                            If ((Arg2 == 0x11))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x2C))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0x2D))
                            {
                                Return (0x1B)
                            }

                            If ((Arg2 == 0x11))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x21))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x12))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x22))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x13))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x23))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x14))
                            {
                                Return (0x0A)
                            }

                            If ((Arg2 == 0x24))
                            {
                                Return (0x0A)
                            }

                            If ((Arg2 == 0x15))
                            {
                                Return (0x12)
                            }

                            If ((Arg2 == 0x25))
                            {
                                Return (0x12)
                            }

                            If ((Arg2 == 0x16))
                            {
                                Return (0x08)
                            }

                            If ((Arg2 == 0x26))
                            {
                                Return (0x08)
                            }

                            If ((Arg2 == 0x17))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x27))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x18))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x28))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x19))
                            {
                                Return (0x02)
                            }

                            If ((Arg2 == 0x29))
                            {
                                Return (0x02)
                            }

                            If ((Arg2 == 0x1A))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0x2A))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0x1B))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x2B))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x40))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x50))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x41))
                            {
                                Return (0xBB)
                            }

                            If ((Arg2 == 0x51))
                            {
                                Return (0xBB)
                            }

                            If ((Arg2 == 0x42))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x52))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x44))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x54))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x45))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x55))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0xBF)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If ((Arg2 == 0x4A))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x5A))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x46))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x56))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x5B))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x85))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x8E))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x8F))
                            {
                                Return (0x11)
                            }

                            If ((Arg2 == 0x90))
                            {
                                Return (0x22)
                            }

                            If ((Arg2 == 0x91))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x92))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x93))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0x94))
                            {
                                Return (0x62)
                            }

                            If ((Arg2 == 0x95))
                            {
                                Return (0x41)
                            }

                            If ((Arg2 == 0x96))
                            {
                                Return (0x41)
                            }

                            If ((Arg2 == 0x97))
                            {
                                Return (0x41)
                            }

                            If ((Arg2 == 0x98))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x99))
                            {
                                Return (0x80)
                            }

                            If ((Arg2 == 0x9A))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0x9B))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0x9C))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0x9D))
                            {
                                Return (0x80)
                            }

                            If ((Arg2 == 0x9E))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0x9F))
                            {
                                If ((I2SC == 0x04))
                                {
                                    Return (0x81)
                                }
                                Else
                                {
                                    Return (0x80)
                                }
                            }

                            If ((Arg2 == 0xA0))
                            {
                                Return (0x71)
                            }

                            If ((Arg2 == 0xA1))
                            {
                                Return (0x11)
                            }

                            If ((Arg2 == 0xA2))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA3))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA4))
                            {
                                Return (0x71)
                            }

                            If ((Arg2 == 0xA5))
                            {
                                Return (0x11)
                            }

                            If ((Arg2 == 0xA6))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA7))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA8))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xA9))
                            {
                                Return (0x31)
                            }

                            If ((Arg2 == 0xAA))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xAB))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xAC))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xAD))
                            {
                                Return (0x31)
                            }

                            If ((Arg2 == 0xAE))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xAF))
                            {
                                Return (0x30)
                            }

                            If ((Arg2 == 0xB0))
                            {
                                Return (0x10)
                            }

                            If ((Arg2 == 0xB1))
                            {
                                Return (0x20)
                            }

                            If ((Arg2 == 0xB2))
                            {
                                Return (0x20)
                            }

                            If ((Arg2 == 0xB3))
                            {
                                Return (0x20)
                            }

                            If ((Arg2 == 0xB4))
                            {
                                Return (0xA0)
                            }

                            If ((Arg2 == 0xB5))
                            {
                                Return (0xB0)
                            }

                            If ((Arg2 == 0xB6))
                            {
                                Return (0xB0)
                            }

                            If ((Arg2 == 0xB7))
                            {
                                Return (0xB0)
                            }

                            If ((Arg2 == 0xB8))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xB9))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0xBA))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0xBB))
                            {
                                Return (One)
                            }

                            If ((Arg2 == 0xBC))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0xBD))
                            {
                                Return (0x04)
                            }

                            If ((Arg2 == 0xBE))
                            {
                                Return (0x04)
                            }

                            If ((Arg2 == 0xBF))
                            {
                                Return (0x04)
                            }

                            If ((Arg2 == 0xC0))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC1))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC2))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC3))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xC4))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xC5))
                            {
                                Return (0xB3)
                            }

                            If ((Arg2 == 0xC6))
                            {
                                Return (0xC9)
                            }

                            If ((Arg2 == 0xC7))
                            {
                                Return (0x8C)
                            }

                            If ((Arg2 == 0xC8))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xC9))
                            {
                                Return (0xB3)
                            }

                            If ((Arg2 == 0xCA))
                            {
                                Return (0xC9)
                            }

                            If ((Arg2 == 0xCB))
                            {
                                Return (0x8C)
                            }

                            If ((Arg2 == 0xCC))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xCD))
                            {
                                Return (0xB3)
                            }

                            If ((Arg2 == 0xCE))
                            {
                                Return (0xC9)
                            }

                            If ((Arg2 == 0xCF))
                            {
                                Return (0x8C)
                            }

                            If ((Arg2 == 0xD0))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD1))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD2))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD3))
                            {
                                Return (0xFF)
                            }

                            If ((Arg2 == 0xD4))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xD5))
                            {
                                Return (0xC6)
                            }

                            If ((Arg2 == 0xD6))
                            {
                                Return (0x73)
                            }

                            If ((Arg2 == 0xD7))
                            {
                                Return (0x86)
                            }

                            If ((Arg2 == 0xD8))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xD9))
                            {
                                Return (0xC6)
                            }

                            If ((Arg2 == 0xDA))
                            {
                                Return (0x73)
                            }

                            If ((Arg2 == 0xDB))
                            {
                                Return (0x86)
                            }

                            If ((Arg2 == 0xDC))
                            {
                                Return (Zero)
                            }

                            If ((Arg2 == 0xDD))
                            {
                                Return (0xC6)
                            }

                            If ((Arg2 == 0xDE))
                            {
                                Return (0x73)
                            }

                            If ((Arg2 == 0xDF))
                            {
                                Return (0x86)
                            }
                        }

                        Return (0xFF)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00.HDAS)
    {
        Device (RTKC)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PXDC == One))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }
        }
    }

    If ((PCHA == Zero))
    {
        Scope (_SB.PC00)
        {
            Name (HIDG, ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */)
            Name (TP7G, ToUUID ("ef87eb82-f951-46da-84ec-14871ac6f84b") /* Unknown UUID */)
            Method (HIDD, 5, Serialized)
            {
                If ((Arg0 == HIDG))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (Arg4)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (TP7D, 6, Serialized)
            {
                If ((Arg0 == TP7G))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (ConcatenateResTemplate (Arg4, Arg5))
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (I2CM, 3, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Name (IIC0, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C0",
                                0x00, ResourceConsumer, _Y4F, Exclusive,
                                )
                        })
                        CreateWordField (IIC0, \_SB.PC00.I2CM._Y4F._ADR, DAD0)  // _ADR: Address
                        CreateDWordField (IIC0, \_SB.PC00.I2CM._Y4F._SPE, DSP0)  // _SPE: Speed
                        DAD0 = Arg1
                        DSP0 = Arg2
                        Return (IIC0) /* \_SB_.PC00.I2CM.IIC0 */
                    }
                    Case (One)
                    {
                        Name (IIC1, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C1",
                                0x00, ResourceConsumer, _Y50, Exclusive,
                                )
                        })
                        CreateWordField (IIC1, \_SB.PC00.I2CM._Y50._ADR, DAD1)  // _ADR: Address
                        CreateDWordField (IIC1, \_SB.PC00.I2CM._Y50._SPE, DSP1)  // _SPE: Speed
                        DAD1 = Arg1
                        DSP1 = Arg2
                        Return (IIC1) /* \_SB_.PC00.I2CM.IIC1 */
                    }
                    Case (0x02)
                    {
                        Name (IIC2, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C2",
                                0x00, ResourceConsumer, _Y51, Exclusive,
                                )
                        })
                        CreateWordField (IIC2, \_SB.PC00.I2CM._Y51._ADR, DAD2)  // _ADR: Address
                        CreateDWordField (IIC2, \_SB.PC00.I2CM._Y51._SPE, DSP2)  // _SPE: Speed
                        DAD2 = Arg1
                        DSP2 = Arg2
                        Return (IIC2) /* \_SB_.PC00.I2CM.IIC2 */
                    }
                    Case (0x03)
                    {
                        Name (IIC3, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C3",
                                0x00, ResourceConsumer, _Y52, Exclusive,
                                )
                        })
                        CreateWordField (IIC3, \_SB.PC00.I2CM._Y52._ADR, DAD3)  // _ADR: Address
                        CreateDWordField (IIC3, \_SB.PC00.I2CM._Y52._SPE, DSP3)  // _SPE: Speed
                        DAD3 = Arg1
                        DSP3 = Arg2
                        Return (IIC3) /* \_SB_.PC00.I2CM.IIC3 */
                    }
                    Case (0x04)
                    {
                        Name (IIC4, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C4",
                                0x00, ResourceConsumer, _Y53, Exclusive,
                                )
                        })
                        CreateWordField (IIC4, \_SB.PC00.I2CM._Y53._ADR, DAD4)  // _ADR: Address
                        CreateDWordField (IIC4, \_SB.PC00.I2CM._Y53._SPE, DSP4)  // _SPE: Speed
                        DAD4 = Arg1
                        DSP4 = Arg2
                        Return (IIC4) /* \_SB_.PC00.I2CM.IIC4 */
                    }
                    Case (0x05)
                    {
                        Name (IIC5, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C5",
                                0x00, ResourceConsumer, _Y54, Exclusive,
                                )
                        })
                        CreateWordField (IIC5, \_SB.PC00.I2CM._Y54._ADR, DAD5)  // _ADR: Address
                        CreateDWordField (IIC5, \_SB.PC00.I2CM._Y54._SPE, DSP5)  // _SPE: Speed
                        DAD5 = Arg1
                        DSP5 = Arg2
                        Return (IIC5) /* \_SB_.PC00.I2CM.IIC5 */
                    }
                    Case (0x0C)
                    {
                        Name (IIC6, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C6",
                                0x00, ResourceConsumer, _Y55, Exclusive,
                                )
                        })
                        CreateWordField (IIC6, \_SB.PC00.I2CM._Y55._ADR, DAD6)  // _ADR: Address
                        CreateDWordField (IIC6, \_SB.PC00.I2CM._Y55._SPE, DSP6)  // _SPE: Speed
                        DAD6 = Arg1
                        DSP6 = Arg2
                        Return (IIC6) /* \_SB_.PC00.I2CM.IIC6 */
                    }
                    Case (0x0D)
                    {
                        Name (IIC7, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C7",
                                0x00, ResourceConsumer, _Y56, Exclusive,
                                )
                        })
                        CreateWordField (IIC7, \_SB.PC00.I2CM._Y56._ADR, DAD7)  // _ADR: Address
                        CreateDWordField (IIC7, \_SB.PC00.I2CM._Y56._SPE, DSP7)  // _SPE: Speed
                        DAD7 = Arg1
                        DSP7 = Arg2
                        Return (IIC7) /* \_SB_.PC00.I2CM.IIC7 */
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Method (SPIM, 3, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (0x07)
                    {
                        Name (IIC7, ResourceTemplate ()
                        {
                            SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                                ControllerInitiated, 0x00989680, ClockPolarityLow,
                                ClockPhaseFirst, "\\_SB.PC00.SPI1",
                                0x00, ResourceConsumer, _Y57, Exclusive,
                                )
                        })
                        CreateByteField (IIC7, \_SB.PC00.SPIM._Y57._PHA, DPH7)  // _PHA: Clock Phase
                        CreateDWordField (IIC7, \_SB.PC00.SPIM._Y57._SPE, DSP7)  // _SPE: Speed
                        DPH7 = Arg1
                        DSP7 = Arg2
                        Return (IIC7) /* \_SB_.PC00.SPIM.IIC7 */
                    }
                    Case (0x08)
                    {
                        Name (IIC8, ResourceTemplate ()
                        {
                            SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                                ControllerInitiated, 0x00989680, ClockPolarityLow,
                                ClockPhaseFirst, "\\_SB.PC00.SPI2",
                                0x00, ResourceConsumer, _Y58, Exclusive,
                                )
                        })
                        CreateByteField (IIC8, \_SB.PC00.SPIM._Y58._PHA, DPH8)  // _PHA: Clock Phase
                        CreateDWordField (IIC8, \_SB.PC00.SPIM._Y58._SPE, DSP8)  // _SPE: Speed
                        DPH8 = Arg1
                        DSP8 = Arg2
                        Return (IIC8) /* \_SB_.PC00.SPIM.IIC8 */
                    }
                    Default
                    {
                        Return (Buffer (0x02)
                        {
                             0x79, 0x00                                       // y.
                        })
                    }

                }
            }

            Method (UCMM, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Name (UCM0, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C0",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C0",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C0",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C0",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                        })
                        Return (UCM0) /* \_SB_.PC00.UCMM.UCM0 */
                    }
                    Case (One)
                    {
                        Name (UCM1, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C1",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C1",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C1",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C1",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                        })
                        Return (UCM1) /* \_SB_.PC00.UCMM.UCM1 */
                    }
                    Case (0x02)
                    {
                        Name (UCM2, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C2",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C2",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C2",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C2",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                        })
                        Return (UCM2) /* \_SB_.PC00.UCMM.UCM2 */
                    }
                    Case (0x03)
                    {
                        Name (UCM3, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C3",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C3",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C3",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C3",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                        })
                        Return (UCM3) /* \_SB_.PC00.UCMM.UCM3 */
                    }
                    Case (0x04)
                    {
                        Name (UCM4, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C4",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C4",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C4",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C4",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                        })
                        Return (UCM4) /* \_SB_.PC00.UCMM.UCM4 */
                    }
                    Case (0x05)
                    {
                        Name (UCM5, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C5",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C5",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C5",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC00.I2C5",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                        })
                        Return (UCM5) /* \_SB_.PC00.UCMM.UCM5 */
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
        }

        Scope (_SB.PC00.I2C0)
        {
            Name (I2CN, Zero)
            Name (I2CX, Zero)
            Name (I2CI, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                I2CN = SDS0 /* \SDS0 */
                I2CX = Zero
            }

            Device (TPD0)
            {
                Name (HID2, Zero)
                Name (SBFB, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "NULL",
                        0x00, ResourceConsumer, _Y59, Exclusive,
                        )
                })
                Name (SBFG, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y5A)
                    {
                        0x00000000,
                    }
                })
                CreateWordField (SBFB, \_SB.PC00.I2C0.TPD0._Y59._ADR, BADR)  // _ADR: Address
                CreateDWordField (SBFB, \_SB.PC00.I2C0.TPD0._Y59._SPE, SPED)  // _SPE: Speed
                CreateWordField (SBFG, 0x17, INT1)
                CreateDWordField (SBFI, \_SB.PC00.I2C0.TPD0._Y5A._INT, INT2)  // _INT: Interrupts
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((PCHA == Zero))
                    {
                        If ((OSYS < 0x07DC))
                        {
                            SRXO (GPDI, One)
                        }

                        INT1 = GNUM (GPDI)
                        INT2 = INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            SGRA (GPDI, Local0)
                            SGII (GPDI, Zero)
                            GRXE (GPDI, Zero)
                        }
                    }
                    Else
                    {
                        If ((OSYS < 0x07DC))
                        {
                            ^^^^PGPI.SRXO (GPDI, One)
                        }

                        INT1 = ^^^^PGPI.GNUM (GPDI)
                        INT2 = ^^^^PGPI.INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            ^^^^PGPI.SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            ^^^^PGPI.SGRA (GPDI, Local0)
                            ^^^^PGPI.SGII (GPDI, Zero)
                            ^^^^PGPI.GRXE (GPDI, Zero)
                        }
                    }

                    If ((TPDT == One))
                    {
                        _HID = "SYNA2393"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x02))
                    {
                        _HID = "06CB2846"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x06))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x07))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x08))
                    {
                        _HID = "SNSL0033"
                        HID2 = One
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x09))
                    {
                        _HID = "PIXA0002"
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x05))
                    {
                        HID2 = TPDH /* \TPDH */
                        BADR = TPDB /* \TPDB */
                        If ((TPDS == Zero))
                        {
                            SPED = 0x000186A0
                        }

                        If ((TPDS == One))
                        {
                            SPED = 0x00061A80
                        }

                        If ((TPDS == 0x02))
                        {
                            SPED = 0x000F4240
                        }

                        Return (Zero)
                    }
                }

                Name (_HID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == HIDG))
                    {
                        Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                    }

                    If ((Arg0 == TP7G))
                    {
                        Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((TPDT != Zero) && (I2CN & One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((OSYS < 0x07DC))
                    {
                        Return (SBFI) /* \_SB_.PC00.I2C0.TPD0.SBFI */
                    }

                    If ((TPDM == Zero))
                    {
                        Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                    }

                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
                }
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("f87a6d23-2884-4fe4-a55f-633d9e339ce1") /* Unknown UUID */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "idle-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "SS-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FM-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FMP-active-latency-tolerance", 
                        0xFFFF
                    }
                }
            })
        }

        Scope (_SB.PC00.I2C1)
        {
            Name (I2CN, Zero)
            Name (I2CX, Zero)
            Name (I2CI, One)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                I2CN = SDS1 /* \SDS1 */
                I2CX = One
            }

            Device (TPD0)
            {
                Name (HID2, Zero)
                Name (SBFB, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "NULL",
                        0x00, ResourceConsumer, _Y5B, Exclusive,
                        )
                })
                Name (SBFG, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y5C)
                    {
                        0x00000000,
                    }
                })
                CreateWordField (SBFB, \_SB.PC00.I2C1.TPD0._Y5B._ADR, BADR)  // _ADR: Address
                CreateDWordField (SBFB, \_SB.PC00.I2C1.TPD0._Y5B._SPE, SPED)  // _SPE: Speed
                CreateWordField (SBFG, 0x17, INT1)
                CreateDWordField (SBFI, \_SB.PC00.I2C1.TPD0._Y5C._INT, INT2)  // _INT: Interrupts
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((PCHA == Zero))
                    {
                        If ((OSYS < 0x07DC))
                        {
                            SRXO (GPDI, One)
                        }

                        INT1 = GNUM (GPDI)
                        INT2 = INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            SGRA (GPDI, Local0)
                            SGII (GPDI, Zero)
                            GRXE (GPDI, Zero)
                        }
                    }
                    Else
                    {
                        If ((OSYS < 0x07DC))
                        {
                            ^^^^PGPI.SRXO (GPDI, One)
                        }

                        INT1 = ^^^^PGPI.GNUM (GPDI)
                        INT2 = ^^^^PGPI.INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            ^^^^PGPI.SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            ^^^^PGPI.SGRA (GPDI, Local0)
                            ^^^^PGPI.SGII (GPDI, Zero)
                            ^^^^PGPI.GRXE (GPDI, Zero)
                        }
                    }

                    If ((TPDT == One))
                    {
                        _HID = "SYNA2393"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x02))
                    {
                        _HID = "06CB2846"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x06))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x07))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x08))
                    {
                        _HID = "SNSL0033"
                        HID2 = One
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x09))
                    {
                        _HID = "PIXA0002"
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x05))
                    {
                        HID2 = TPDH /* \TPDH */
                        BADR = TPDB /* \TPDB */
                        If ((TPDS == Zero))
                        {
                            SPED = 0x000186A0
                        }

                        If ((TPDS == One))
                        {
                            SPED = 0x00061A80
                        }

                        If ((TPDS == 0x02))
                        {
                            SPED = 0x000F4240
                        }

                        Return (Zero)
                    }
                }

                Name (_HID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == HIDG))
                    {
                        Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                    }

                    If ((Arg0 == TP7G))
                    {
                        Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((TPDT != Zero) && (I2CN & One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((OSYS < 0x07DC))
                    {
                        Return (SBFI) /* \_SB_.PC00.I2C1.TPD0.SBFI */
                    }

                    If ((TPDM == Zero))
                    {
                        Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                    }

                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
                }
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("f87a6d23-2884-4fe4-a55f-633d9e339ce1") /* Unknown UUID */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "idle-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "SS-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FM-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FMP-active-latency-tolerance", 
                        0xFFFF
                    }
                }
            })
        }

        Scope (_SB.PC00.I2C2)
        {
            Name (I2CN, Zero)
            Name (I2CX, Zero)
            Name (I2CI, 0x02)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                I2CN = SDS2 /* \SDS2 */
                I2CX = 0x02
            }

            Device (TPD0)
            {
                Name (HID2, Zero)
                Name (SBFB, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "NULL",
                        0x00, ResourceConsumer, _Y5D, Exclusive,
                        )
                })
                Name (SBFG, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y5E)
                    {
                        0x00000000,
                    }
                })
                CreateWordField (SBFB, \_SB.PC00.I2C2.TPD0._Y5D._ADR, BADR)  // _ADR: Address
                CreateDWordField (SBFB, \_SB.PC00.I2C2.TPD0._Y5D._SPE, SPED)  // _SPE: Speed
                CreateWordField (SBFG, 0x17, INT1)
                CreateDWordField (SBFI, \_SB.PC00.I2C2.TPD0._Y5E._INT, INT2)  // _INT: Interrupts
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((PCHA == Zero))
                    {
                        If ((OSYS < 0x07DC))
                        {
                            SRXO (GPDI, One)
                        }

                        INT1 = GNUM (GPDI)
                        INT2 = INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            SGRA (GPDI, Local0)
                            SGII (GPDI, Zero)
                            GRXE (GPDI, Zero)
                        }
                    }
                    Else
                    {
                        If ((OSYS < 0x07DC))
                        {
                            ^^^^PGPI.SRXO (GPDI, One)
                        }

                        INT1 = ^^^^PGPI.GNUM (GPDI)
                        INT2 = ^^^^PGPI.INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            ^^^^PGPI.SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            ^^^^PGPI.SGRA (GPDI, Local0)
                            ^^^^PGPI.SGII (GPDI, Zero)
                            ^^^^PGPI.GRXE (GPDI, Zero)
                        }
                    }

                    If ((TPDT == One))
                    {
                        _HID = "SYNA2393"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x02))
                    {
                        _HID = "06CB2846"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x06))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x07))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x08))
                    {
                        _HID = "SNSL0033"
                        HID2 = One
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x09))
                    {
                        _HID = "PIXA0002"
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x05))
                    {
                        HID2 = TPDH /* \TPDH */
                        BADR = TPDB /* \TPDB */
                        If ((TPDS == Zero))
                        {
                            SPED = 0x000186A0
                        }

                        If ((TPDS == One))
                        {
                            SPED = 0x00061A80
                        }

                        If ((TPDS == 0x02))
                        {
                            SPED = 0x000F4240
                        }

                        Return (Zero)
                    }
                }

                Name (_HID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == HIDG))
                    {
                        Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                    }

                    If ((Arg0 == TP7G))
                    {
                        Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((TPDT != Zero) && (I2CN & One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((OSYS < 0x07DC))
                    {
                        Return (SBFI) /* \_SB_.PC00.I2C2.TPD0.SBFI */
                    }

                    If ((TPDM == Zero))
                    {
                        Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                    }

                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
                }
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("f87a6d23-2884-4fe4-a55f-633d9e339ce1") /* Unknown UUID */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "idle-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "SS-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FM-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FMP-active-latency-tolerance", 
                        0xFFFF
                    }
                }
            })
        }

        Scope (_SB.PC00.I2C3)
        {
            Name (I2CN, Zero)
            Name (I2CX, Zero)
            Name (I2CI, 0x03)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                I2CN = SDS3 /* \SDS3 */
                I2CX = 0x03
            }

            Device (TPD0)
            {
                Name (HID2, Zero)
                Name (SBFB, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "NULL",
                        0x00, ResourceConsumer, _Y5F, Exclusive,
                        )
                })
                Name (SBFG, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y60)
                    {
                        0x00000000,
                    }
                })
                CreateWordField (SBFB, \_SB.PC00.I2C3.TPD0._Y5F._ADR, BADR)  // _ADR: Address
                CreateDWordField (SBFB, \_SB.PC00.I2C3.TPD0._Y5F._SPE, SPED)  // _SPE: Speed
                CreateWordField (SBFG, 0x17, INT1)
                CreateDWordField (SBFI, \_SB.PC00.I2C3.TPD0._Y60._INT, INT2)  // _INT: Interrupts
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((PCHA == Zero))
                    {
                        If ((OSYS < 0x07DC))
                        {
                            SRXO (GPDI, One)
                        }

                        INT1 = GNUM (GPDI)
                        INT2 = INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            SGRA (GPDI, Local0)
                            SGII (GPDI, Zero)
                            GRXE (GPDI, Zero)
                        }
                    }
                    Else
                    {
                        If ((OSYS < 0x07DC))
                        {
                            ^^^^PGPI.SRXO (GPDI, One)
                        }

                        INT1 = ^^^^PGPI.GNUM (GPDI)
                        INT2 = ^^^^PGPI.INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            ^^^^PGPI.SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            ^^^^PGPI.SGRA (GPDI, Local0)
                            ^^^^PGPI.SGII (GPDI, Zero)
                            ^^^^PGPI.GRXE (GPDI, Zero)
                        }
                    }

                    If ((TPDT == One))
                    {
                        _HID = "SYNA2393"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x02))
                    {
                        _HID = "06CB2846"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x06))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x07))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x08))
                    {
                        _HID = "SNSL0033"
                        HID2 = One
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x09))
                    {
                        _HID = "PIXA0002"
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x05))
                    {
                        HID2 = TPDH /* \TPDH */
                        BADR = TPDB /* \TPDB */
                        If ((TPDS == Zero))
                        {
                            SPED = 0x000186A0
                        }

                        If ((TPDS == One))
                        {
                            SPED = 0x00061A80
                        }

                        If ((TPDS == 0x02))
                        {
                            SPED = 0x000F4240
                        }

                        Return (Zero)
                    }
                }

                Name (_HID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == HIDG))
                    {
                        Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                    }

                    If ((Arg0 == TP7G))
                    {
                        Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((TPDT != Zero) && (I2CN & One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((OSYS < 0x07DC))
                    {
                        Return (SBFI) /* \_SB_.PC00.I2C3.TPD0.SBFI */
                    }

                    If ((TPDM == Zero))
                    {
                        Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                    }

                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
                }
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("f87a6d23-2884-4fe4-a55f-633d9e339ce1") /* Unknown UUID */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "idle-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "SS-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FM-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FMP-active-latency-tolerance", 
                        0xFFFF
                    }
                }
            })
        }

        Scope (_SB.PC00.I2C4)
        {
            Name (I2CN, Zero)
            Name (I2CX, Zero)
            Name (I2CI, 0x04)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                I2CN = SDS4 /* \SDS4 */
                I2CX = 0x04
            }

            Device (TPD0)
            {
                Name (HID2, Zero)
                Name (SBFB, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "NULL",
                        0x00, ResourceConsumer, _Y61, Exclusive,
                        )
                })
                Name (SBFG, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y62)
                    {
                        0x00000000,
                    }
                })
                CreateWordField (SBFB, \_SB.PC00.I2C4.TPD0._Y61._ADR, BADR)  // _ADR: Address
                CreateDWordField (SBFB, \_SB.PC00.I2C4.TPD0._Y61._SPE, SPED)  // _SPE: Speed
                CreateWordField (SBFG, 0x17, INT1)
                CreateDWordField (SBFI, \_SB.PC00.I2C4.TPD0._Y62._INT, INT2)  // _INT: Interrupts
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((PCHA == Zero))
                    {
                        If ((OSYS < 0x07DC))
                        {
                            SRXO (GPDI, One)
                        }

                        INT1 = GNUM (GPDI)
                        INT2 = INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            SGRA (GPDI, Local0)
                            SGII (GPDI, Zero)
                            GRXE (GPDI, Zero)
                        }
                    }
                    Else
                    {
                        If ((OSYS < 0x07DC))
                        {
                            ^^^^PGPI.SRXO (GPDI, One)
                        }

                        INT1 = ^^^^PGPI.GNUM (GPDI)
                        INT2 = ^^^^PGPI.INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            ^^^^PGPI.SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            ^^^^PGPI.SGRA (GPDI, Local0)
                            ^^^^PGPI.SGII (GPDI, Zero)
                            ^^^^PGPI.GRXE (GPDI, Zero)
                        }
                    }

                    If ((TPDT == One))
                    {
                        _HID = "SYNA2393"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x02))
                    {
                        _HID = "06CB2846"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x06))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x07))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x08))
                    {
                        _HID = "SNSL0033"
                        HID2 = One
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x09))
                    {
                        _HID = "PIXA0002"
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x05))
                    {
                        HID2 = TPDH /* \TPDH */
                        BADR = TPDB /* \TPDB */
                        If ((TPDS == Zero))
                        {
                            SPED = 0x000186A0
                        }

                        If ((TPDS == One))
                        {
                            SPED = 0x00061A80
                        }

                        If ((TPDS == 0x02))
                        {
                            SPED = 0x000F4240
                        }

                        Return (Zero)
                    }
                }

                Name (_HID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == HIDG))
                    {
                        Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                    }

                    If ((Arg0 == TP7G))
                    {
                        Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((TPDT != Zero) && (I2CN & One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((OSYS < 0x07DC))
                    {
                        Return (SBFI) /* \_SB_.PC00.I2C4.TPD0.SBFI */
                    }

                    If ((TPDM == Zero))
                    {
                        Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                    }

                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
                }
            }

            Device (TPL1)
            {
                Name (HID2, Zero)
                Name (TPGI, Zero)
                Name (SBFB, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "NULL",
                        0x00, ResourceConsumer, _Y63, Exclusive,
                        )
                })
                Name (SBFG, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, Exclusive, PullUp, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y64)
                    {
                        0x00000000,
                    }
                })
                CreateWordField (SBFB, \_SB.PC00.I2C4.TPL1._Y63._ADR, BADR)  // _ADR: Address
                CreateDWordField (SBFB, \_SB.PC00.I2C4.TPL1._Y63._SPE, SPED)  // _SPE: Speed
                CreateWordField (SBFG, 0x17, INT1)
                CreateDWordField (SBFI, \_SB.PC00.I2C4.TPL1._Y64._INT, INT2)  // _INT: Interrupts
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    TPGI = T0GI /* \T0GI */
                    If (CondRefOf (\_SB))
                    {
                        If ((OSYS < 0x07DC))
                        {
                            SRXO (TPGI, One)
                        }

                        INT1 = GNUM (TPGI)
                        INT2 = INUM (TPGI)
                        If ((TPLM == Zero))
                        {
                            SHPO (TPGI, One)
                        }
                        Else
                        {
                            SHPO (TPGI, Zero)
                        }
                    }

                    If ((TPLT == One))
                    {
                        _HID = "ATML3432"
                        HID2 = Zero
                        BADR = 0x4C
                        SPED = 0x00061A80
                        Return (Zero)
                    }

                    If ((TPLT == 0x02))
                    {
                        _HID = "ATML2952"
                        HID2 = Zero
                        BADR = 0x4A
                        SPED = 0x00061A80
                        Return (Zero)
                    }

                    If ((TPLT == 0x03))
                    {
                        _HID = "ELAN9048"
                        HID2 = One
                        BADR = 0x10
                        SPED = 0x00061A80
                        Return (Zero)
                    }

                    If ((TPLT == 0x04))
                    {
                        _HID = "NTRG0001"
                        HID2 = One
                        BADR = 0x07
                        SPED = 0x00061A80
                        Return (Zero)
                    }

                    If ((TPLT == 0x05))
                    {
                        _HID = "NTRG0002"
                        HID2 = One
                        BADR = 0x64
                        SPED = 0x00061A80
                        Return (Zero)
                    }

                    If ((TPLT == 0x06))
                    {
                        _HID = "WCOM508E"
                        HID2 = One
                        BADR = 0x0A
                        If ((TPLS == Zero))
                        {
                            SPED = 0x00061A80
                        }

                        If ((TPLS == One))
                        {
                            SPED = 0x00061A80
                        }

                        If ((TPLS == 0x02))
                        {
                            SPED = 0x000F4240
                        }

                        Return (Zero)
                    }

                    If ((TPLT == 0x07))
                    {
                        _HID = "CUST0000"
                        HID2 = TPLH /* \TPLH */
                        BADR = TPLB /* \TPLB */
                        If ((TPLS == Zero))
                        {
                            SPED = 0x000186A0
                        }

                        If ((TPLS == One))
                        {
                            SPED = 0x00061A80
                        }

                        If ((TPLS == 0x02))
                        {
                            SPED = 0x000F4240
                        }

                        Return (Zero)
                    }
                }

                Name (_HID, "XXXX0000")  // _HID: Hardware ID
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Method (_UID, 0, NotSerialized)  // _UID: Unique ID
                {
                    Return (I2CI) /* \_SB_.PC00.I2C4.I2CI */
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == HIDG))
                    {
                        Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                    }

                    If ((Arg0 == TP7G))
                    {
                        Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((TPLT != Zero) && (I2CN & 0x02)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((OSYS < 0x07DC))
                    {
                        Return (SBFI) /* \_SB_.PC00.I2C4.TPL1.SBFI */
                    }

                    If ((TPLM == Zero))
                    {
                        Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                    }

                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
                }
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("f87a6d23-2884-4fe4-a55f-633d9e339ce1") /* Unknown UUID */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "idle-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "SS-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FM-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FMP-active-latency-tolerance", 
                        0xFFFF
                    }
                }
            })
        }

        Scope (_SB.PC00.I2C5)
        {
            Name (I2CN, Zero)
            Name (I2CX, Zero)
            Name (I2CI, 0x05)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                I2CN = SDS5 /* \SDS5 */
                I2CX = 0x05
            }

            Device (TPD0)
            {
                Name (HID2, Zero)
                Name (SBFB, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "NULL",
                        0x00, ResourceConsumer, _Y65, Exclusive,
                        )
                })
                Name (SBFG, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y66)
                    {
                        0x00000000,
                    }
                })
                CreateWordField (SBFB, \_SB.PC00.I2C5.TPD0._Y65._ADR, BADR)  // _ADR: Address
                CreateDWordField (SBFB, \_SB.PC00.I2C5.TPD0._Y65._SPE, SPED)  // _SPE: Speed
                CreateWordField (SBFG, 0x17, INT1)
                CreateDWordField (SBFI, \_SB.PC00.I2C5.TPD0._Y66._INT, INT2)  // _INT: Interrupts
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((PCHA == Zero))
                    {
                        If ((OSYS < 0x07DC))
                        {
                            SRXO (GPDI, One)
                        }

                        INT1 = GNUM (GPDI)
                        INT2 = INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            SGRA (GPDI, Local0)
                            SGII (GPDI, Zero)
                            GRXE (GPDI, Zero)
                        }
                    }
                    Else
                    {
                        If ((OSYS < 0x07DC))
                        {
                            ^^^^PGPI.SRXO (GPDI, One)
                        }

                        INT1 = ^^^^PGPI.GNUM (GPDI)
                        INT2 = ^^^^PGPI.INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            ^^^^PGPI.SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            ^^^^PGPI.SGRA (GPDI, Local0)
                            ^^^^PGPI.SGII (GPDI, Zero)
                            ^^^^PGPI.GRXE (GPDI, Zero)
                        }
                    }

                    If ((TPDT == One))
                    {
                        _HID = "SYNA2393"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x02))
                    {
                        _HID = "06CB2846"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x06))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x07))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x08))
                    {
                        _HID = "SNSL0033"
                        HID2 = One
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x09))
                    {
                        _HID = "PIXA0002"
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x05))
                    {
                        HID2 = TPDH /* \TPDH */
                        BADR = TPDB /* \TPDB */
                        If ((TPDS == Zero))
                        {
                            SPED = 0x000186A0
                        }

                        If ((TPDS == One))
                        {
                            SPED = 0x00061A80
                        }

                        If ((TPDS == 0x02))
                        {
                            SPED = 0x000F4240
                        }

                        Return (Zero)
                    }
                }

                Name (_HID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == HIDG))
                    {
                        Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                    }

                    If ((Arg0 == TP7G))
                    {
                        Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((TPDT != Zero) && (I2CN & One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((OSYS < 0x07DC))
                    {
                        Return (SBFI) /* \_SB_.PC00.I2C5.TPD0.SBFI */
                    }

                    If ((TPDM == Zero))
                    {
                        Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                    }

                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
                }
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("f87a6d23-2884-4fe4-a55f-633d9e339ce1") /* Unknown UUID */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "idle-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "SS-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FM-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FMP-active-latency-tolerance", 
                        0xFFFF
                    }
                }
            })
        }

        Scope (_SB.PC00.SPI1)
        {
            Name (SPIP, Zero)
            Name (SPIX, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                SPIP = SDS7 /* \SDS7 */
                SPIX = 0x07
            }

            Device (FPNT)
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((FPTT == One))
                    {
                        Return ("FPC1011")
                    }

                    If ((FPTT == 0x02))
                    {
                        Return ("FPC1020")
                    }

                    If ((FPTT == 0x03))
                    {
                        Return ("VFSI6101")
                    }

                    If ((FPTT == 0x04))
                    {
                        Return ("VFSI7500")
                    }

                    If ((FPTT == 0x05))
                    {
                        Return ("EGIS0300")
                    }

                    If ((FPTT == 0x06))
                    {
                        Return ("FPC1021")
                    }

                    Return ("DUMY0000")
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    SHPO (GFPI, One)
                    SHPO (GFPS, One)
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((FPTT != Zero) && (SPIP == One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (BBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0008
                            }
                    })
                    Name (IBUF, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y67)
                        {
                            0x00000000,
                        }
                    })
                    Name (GBUF, ResourceTemplate ()
                    {
                        GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, _Y68,
                            )
                            {   // Pin list
                                0x0000
                            }
                    })
                    Name (UBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0000
                            }
                    })
                    CreateWordField (BBUF, 0x17, SPIN)
                    CreateWordField (GBUF, 0x17, GPIN)
                    CreateDWordField (IBUF, \_SB.PC00.SPI1.FPNT._CRS._Y67._INT, IPIN)  // _INT: Interrupts
                    CreateWordField (UBUF, 0x17, UPIN)
                    CreateBitField (IBUF, \_SB.PC00.SPI1.FPNT._CRS._Y67._LL, ILVL)  // _LL_: Low Level
                    CreateBitField (IBUF, \_SB.PC00.SPI1.FPNT._CRS._Y67._HE, ITRG)  // _HE_: High-Edge
                    CreateField (GBUF, \_SB.PC00.SPI1.FPNT._CRS._Y68._POL, 0x02, GLVL)  // _POL: Polarity
                    CreateBitField (GBUF, \_SB.PC00.SPI1.FPNT._CRS._Y68._MOD, GTRG)  // _MOD: Mode
                    SPIN = GNUM (GFPS)
                    GPIN = GNUM (GFPI)
                    IPIN = INUM (GFPI)
                    UPIN = GNUM (GFPI)
                    If (((FPTT == 0x02) || (FPTT == 0x06)))
                    {
                        ILVL = Zero
                        ITRG = One
                        GLVL = Zero
                        GTRG = One
                    }

                    If ((FPTT == 0x04))
                    {
                        ILVL = Zero
                        ITRG = One
                    }

                    Switch (ToInteger (FPTT))
                    {
                        Case (One)
                        {
                            Local1 = 0x00989680
                            Local0 = Zero
                        }
                        Case (0x02)
                        {
                            Local1 = 0x002DC6C0
                            Local0 = Zero
                        }
                        Case (0x03)
                        {
                            Local1 = 0x007A1200
                            Local0 = One
                        }
                        Case (0x04)
                        {
                            Local1 = 0x007A1200
                            Local0 = Zero
                        }
                        Case (0x05)
                        {
                            Local1 = 0x00F42400
                            Local0 = Zero
                        }
                        Case (0x06)
                        {
                            Local1 = 0x002DC6C0
                            Local0 = Zero
                        }
                        Default
                        {
                            Local1 = Zero
                            Local0 = Zero
                        }

                    }

                    If ((FPTT == One))
                    {
                        Return (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF))
                    }

                    If (((FPTT == 0x04) && (FPTM == Zero)))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, GBUF
                            )))
                    }

                    If (((FPTT == 0x04) && (FPTM != Zero)))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, IBUF
                            )))
                    }

                    If ((FPTM == Zero))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), GBUF))
                    }

                    Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), IBUF))
                }
            }
        }

        Scope (_SB.PC00.SPI2)
        {
            Name (SPIP, Zero)
            Name (SPIX, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                SPIP = SDS8 /* \SDS8 */
                SPIX = 0x08
            }

            Device (FPNT)
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((FPTT == One))
                    {
                        Return ("FPC1011")
                    }

                    If ((FPTT == 0x02))
                    {
                        Return ("FPC1020")
                    }

                    If ((FPTT == 0x03))
                    {
                        Return ("VFSI6101")
                    }

                    If ((FPTT == 0x04))
                    {
                        Return ("VFSI7500")
                    }

                    If ((FPTT == 0x05))
                    {
                        Return ("EGIS0300")
                    }

                    If ((FPTT == 0x06))
                    {
                        Return ("FPC1021")
                    }

                    Return ("DUMY0000")
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    SHPO (GFPI, One)
                    SHPO (GFPS, One)
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((FPTT != Zero) && (SPIP == One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (BBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0008
                            }
                    })
                    Name (IBUF, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y69)
                        {
                            0x00000000,
                        }
                    })
                    Name (GBUF, ResourceTemplate ()
                    {
                        GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, _Y6A,
                            )
                            {   // Pin list
                                0x0000
                            }
                    })
                    Name (UBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0000
                            }
                    })
                    CreateWordField (BBUF, 0x17, SPIN)
                    CreateWordField (GBUF, 0x17, GPIN)
                    CreateDWordField (IBUF, \_SB.PC00.SPI2.FPNT._CRS._Y69._INT, IPIN)  // _INT: Interrupts
                    CreateWordField (UBUF, 0x17, UPIN)
                    CreateBitField (IBUF, \_SB.PC00.SPI2.FPNT._CRS._Y69._LL, ILVL)  // _LL_: Low Level
                    CreateBitField (IBUF, \_SB.PC00.SPI2.FPNT._CRS._Y69._HE, ITRG)  // _HE_: High-Edge
                    CreateField (GBUF, \_SB.PC00.SPI2.FPNT._CRS._Y6A._POL, 0x02, GLVL)  // _POL: Polarity
                    CreateBitField (GBUF, \_SB.PC00.SPI2.FPNT._CRS._Y6A._MOD, GTRG)  // _MOD: Mode
                    SPIN = GNUM (GFPS)
                    GPIN = GNUM (GFPI)
                    IPIN = INUM (GFPI)
                    UPIN = GNUM (GFPI)
                    If (((FPTT == 0x02) || (FPTT == 0x06)))
                    {
                        ILVL = Zero
                        ITRG = One
                        GLVL = Zero
                        GTRG = One
                    }

                    If ((FPTT == 0x04))
                    {
                        ILVL = Zero
                        ITRG = One
                    }

                    Switch (ToInteger (FPTT))
                    {
                        Case (One)
                        {
                            Local1 = 0x00989680
                            Local0 = Zero
                        }
                        Case (0x02)
                        {
                            Local1 = 0x002DC6C0
                            Local0 = Zero
                        }
                        Case (0x03)
                        {
                            Local1 = 0x007A1200
                            Local0 = One
                        }
                        Case (0x04)
                        {
                            Local1 = 0x007A1200
                            Local0 = Zero
                        }
                        Case (0x05)
                        {
                            Local1 = 0x00F42400
                            Local0 = Zero
                        }
                        Case (0x06)
                        {
                            Local1 = 0x002DC6C0
                            Local0 = Zero
                        }
                        Default
                        {
                            Local1 = Zero
                            Local0 = Zero
                        }

                    }

                    If ((FPTT == One))
                    {
                        Return (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF))
                    }

                    If (((FPTT == 0x04) && (FPTM == Zero)))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, GBUF
                            )))
                    }

                    If (((FPTT == 0x04) && (FPTM != Zero)))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, IBUF
                            )))
                    }

                    If ((FPTM == Zero))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), GBUF))
                    }

                    Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), IBUF))
                }
            }
        }
    }
    Else
    {
        Scope (_SB.PC02)
        {
            Name (HIDG, ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */)
            Name (TP7G, ToUUID ("ef87eb82-f951-46da-84ec-14871ac6f84b") /* Unknown UUID */)
            Method (HIDD, 5, Serialized)
            {
                If ((Arg0 == HIDG))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (Arg4)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (TP7D, 6, Serialized)
            {
                If ((Arg0 == TP7G))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (ConcatenateResTemplate (Arg4, Arg5))
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (I2CM, 3, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Name (IIC0, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C0",
                                0x00, ResourceConsumer, _Y6B, Exclusive,
                                )
                        })
                        CreateWordField (IIC0, \_SB.PC02.I2CM._Y6B._ADR, DAD0)  // _ADR: Address
                        CreateDWordField (IIC0, \_SB.PC02.I2CM._Y6B._SPE, DSP0)  // _SPE: Speed
                        DAD0 = Arg1
                        DSP0 = Arg2
                        Return (IIC0) /* \_SB_.PC02.I2CM.IIC0 */
                    }
                    Case (One)
                    {
                        Name (IIC1, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C1",
                                0x00, ResourceConsumer, _Y6C, Exclusive,
                                )
                        })
                        CreateWordField (IIC1, \_SB.PC02.I2CM._Y6C._ADR, DAD1)  // _ADR: Address
                        CreateDWordField (IIC1, \_SB.PC02.I2CM._Y6C._SPE, DSP1)  // _SPE: Speed
                        DAD1 = Arg1
                        DSP1 = Arg2
                        Return (IIC1) /* \_SB_.PC02.I2CM.IIC1 */
                    }
                    Case (0x02)
                    {
                        Name (IIC2, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C2",
                                0x00, ResourceConsumer, _Y6D, Exclusive,
                                )
                        })
                        CreateWordField (IIC2, \_SB.PC02.I2CM._Y6D._ADR, DAD2)  // _ADR: Address
                        CreateDWordField (IIC2, \_SB.PC02.I2CM._Y6D._SPE, DSP2)  // _SPE: Speed
                        DAD2 = Arg1
                        DSP2 = Arg2
                        Return (IIC2) /* \_SB_.PC02.I2CM.IIC2 */
                    }
                    Case (0x03)
                    {
                        Name (IIC3, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C3",
                                0x00, ResourceConsumer, _Y6E, Exclusive,
                                )
                        })
                        CreateWordField (IIC3, \_SB.PC02.I2CM._Y6E._ADR, DAD3)  // _ADR: Address
                        CreateDWordField (IIC3, \_SB.PC02.I2CM._Y6E._SPE, DSP3)  // _SPE: Speed
                        DAD3 = Arg1
                        DSP3 = Arg2
                        Return (IIC3) /* \_SB_.PC02.I2CM.IIC3 */
                    }
                    Case (0x04)
                    {
                        Name (IIC4, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C4",
                                0x00, ResourceConsumer, _Y6F, Exclusive,
                                )
                        })
                        CreateWordField (IIC4, \_SB.PC02.I2CM._Y6F._ADR, DAD4)  // _ADR: Address
                        CreateDWordField (IIC4, \_SB.PC02.I2CM._Y6F._SPE, DSP4)  // _SPE: Speed
                        DAD4 = Arg1
                        DSP4 = Arg2
                        Return (IIC4) /* \_SB_.PC02.I2CM.IIC4 */
                    }
                    Case (0x05)
                    {
                        Name (IIC5, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C5",
                                0x00, ResourceConsumer, _Y70, Exclusive,
                                )
                        })
                        CreateWordField (IIC5, \_SB.PC02.I2CM._Y70._ADR, DAD5)  // _ADR: Address
                        CreateDWordField (IIC5, \_SB.PC02.I2CM._Y70._SPE, DSP5)  // _SPE: Speed
                        DAD5 = Arg1
                        DSP5 = Arg2
                        Return (IIC5) /* \_SB_.PC02.I2CM.IIC5 */
                    }
                    Case (0x0C)
                    {
                        Name (IIC6, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C6",
                                0x00, ResourceConsumer, _Y71, Exclusive,
                                )
                        })
                        CreateWordField (IIC6, \_SB.PC02.I2CM._Y71._ADR, DAD6)  // _ADR: Address
                        CreateDWordField (IIC6, \_SB.PC02.I2CM._Y71._SPE, DSP6)  // _SPE: Speed
                        DAD6 = Arg1
                        DSP6 = Arg2
                        Return (IIC6) /* \_SB_.PC02.I2CM.IIC6 */
                    }
                    Case (0x0D)
                    {
                        Name (IIC7, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C7",
                                0x00, ResourceConsumer, _Y72, Exclusive,
                                )
                        })
                        CreateWordField (IIC7, \_SB.PC02.I2CM._Y72._ADR, DAD7)  // _ADR: Address
                        CreateDWordField (IIC7, \_SB.PC02.I2CM._Y72._SPE, DSP7)  // _SPE: Speed
                        DAD7 = Arg1
                        DSP7 = Arg2
                        Return (IIC7) /* \_SB_.PC02.I2CM.IIC7 */
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Method (SPIM, 3, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (0x07)
                    {
                        Name (IIC7, ResourceTemplate ()
                        {
                            SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                                ControllerInitiated, 0x00989680, ClockPolarityLow,
                                ClockPhaseFirst, "\\_SB.PC02.SPI1",
                                0x00, ResourceConsumer, _Y73, Exclusive,
                                )
                        })
                        CreateByteField (IIC7, \_SB.PC02.SPIM._Y73._PHA, DPH7)  // _PHA: Clock Phase
                        CreateDWordField (IIC7, \_SB.PC02.SPIM._Y73._SPE, DSP7)  // _SPE: Speed
                        DPH7 = Arg1
                        DSP7 = Arg2
                        Return (IIC7) /* \_SB_.PC02.SPIM.IIC7 */
                    }
                    Case (0x08)
                    {
                        Name (IIC8, ResourceTemplate ()
                        {
                            SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                                ControllerInitiated, 0x00989680, ClockPolarityLow,
                                ClockPhaseFirst, "\\_SB.PC02.SPI2",
                                0x00, ResourceConsumer, _Y74, Exclusive,
                                )
                        })
                        CreateByteField (IIC8, \_SB.PC02.SPIM._Y74._PHA, DPH8)  // _PHA: Clock Phase
                        CreateDWordField (IIC8, \_SB.PC02.SPIM._Y74._SPE, DSP8)  // _SPE: Speed
                        DPH8 = Arg1
                        DSP8 = Arg2
                        Return (IIC8) /* \_SB_.PC02.SPIM.IIC8 */
                    }
                    Default
                    {
                        Return (Buffer (0x02)
                        {
                             0x79, 0x00                                       // y.
                        })
                    }

                }
            }

            Method (UCMM, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Name (UCM0, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C0",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C0",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C0",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C0",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                        })
                        Return (UCM0) /* \_SB_.PC02.UCMM.UCM0 */
                    }
                    Case (One)
                    {
                        Name (UCM1, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C1",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C1",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C1",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C1",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                        })
                        Return (UCM1) /* \_SB_.PC02.UCMM.UCM1 */
                    }
                    Case (0x02)
                    {
                        Name (UCM2, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C2",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C2",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C2",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C2",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                        })
                        Return (UCM2) /* \_SB_.PC02.UCMM.UCM2 */
                    }
                    Case (0x03)
                    {
                        Name (UCM3, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C3",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C3",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C3",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C3",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                        })
                        Return (UCM3) /* \_SB_.PC02.UCMM.UCM3 */
                    }
                    Case (0x04)
                    {
                        Name (UCM4, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C4",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C4",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C4",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C4",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                        })
                        Return (UCM4) /* \_SB_.PC02.UCMM.UCM4 */
                    }
                    Case (0x05)
                    {
                        Name (UCM5, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C5",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C5",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C5",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                            I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                                AddressingMode7Bit, "\\_SB.PC02.I2C5",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                        })
                        Return (UCM5) /* \_SB_.PC02.UCMM.UCM5 */
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
        }

        Scope (_SB.PC02.I2C0)
        {
            Name (I2CN, Zero)
            Name (I2CX, Zero)
            Name (I2CI, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                I2CN = SDS0 /* \SDS0 */
                I2CX = Zero
            }

            Device (TPD0)
            {
                Name (HID2, Zero)
                Name (SBFB, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "NULL",
                        0x00, ResourceConsumer, _Y75, Exclusive,
                        )
                })
                Name (SBFG, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y76)
                    {
                        0x00000000,
                    }
                })
                CreateWordField (SBFB, \_SB.PC02.I2C0.TPD0._Y75._ADR, BADR)  // _ADR: Address
                CreateDWordField (SBFB, \_SB.PC02.I2C0.TPD0._Y75._SPE, SPED)  // _SPE: Speed
                CreateWordField (SBFG, 0x17, INT1)
                CreateDWordField (SBFI, \_SB.PC02.I2C0.TPD0._Y76._INT, INT2)  // _INT: Interrupts
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((PCHA == Zero))
                    {
                        If ((OSYS < 0x07DC))
                        {
                            SRXO (GPDI, One)
                        }

                        INT1 = GNUM (GPDI)
                        INT2 = INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            SGRA (GPDI, Local0)
                            SGII (GPDI, Zero)
                            GRXE (GPDI, Zero)
                        }
                    }
                    Else
                    {
                        If ((OSYS < 0x07DC))
                        {
                            ^^^^PGPI.SRXO (GPDI, One)
                        }

                        INT1 = ^^^^PGPI.GNUM (GPDI)
                        INT2 = ^^^^PGPI.INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            ^^^^PGPI.SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            ^^^^PGPI.SGRA (GPDI, Local0)
                            ^^^^PGPI.SGII (GPDI, Zero)
                            ^^^^PGPI.GRXE (GPDI, Zero)
                        }
                    }

                    If ((TPDT == One))
                    {
                        _HID = "SYNA2393"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x02))
                    {
                        _HID = "06CB2846"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x06))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x07))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x08))
                    {
                        _HID = "SNSL0033"
                        HID2 = One
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x09))
                    {
                        _HID = "PIXA0002"
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x05))
                    {
                        HID2 = TPDH /* \TPDH */
                        BADR = TPDB /* \TPDB */
                        If ((TPDS == Zero))
                        {
                            SPED = 0x000186A0
                        }

                        If ((TPDS == One))
                        {
                            SPED = 0x00061A80
                        }

                        If ((TPDS == 0x02))
                        {
                            SPED = 0x000F4240
                        }

                        Return (Zero)
                    }
                }

                Name (_HID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == HIDG))
                    {
                        Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                    }

                    If ((Arg0 == TP7G))
                    {
                        Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((TPDT != Zero) && (I2CN & One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((OSYS < 0x07DC))
                    {
                        Return (SBFI) /* \_SB_.PC02.I2C0.TPD0.SBFI */
                    }

                    If ((TPDM == Zero))
                    {
                        Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                    }

                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
                }
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("f87a6d23-2884-4fe4-a55f-633d9e339ce1") /* Unknown UUID */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "idle-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "SS-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FM-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FMP-active-latency-tolerance", 
                        0xFFFF
                    }
                }
            })
        }

        Scope (_SB.PC02.I2C1)
        {
            Name (I2CN, Zero)
            Name (I2CX, Zero)
            Name (I2CI, One)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                I2CN = SDS1 /* \SDS1 */
                I2CX = One
            }

            Device (TPD0)
            {
                Name (HID2, Zero)
                Name (SBFB, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "NULL",
                        0x00, ResourceConsumer, _Y77, Exclusive,
                        )
                })
                Name (SBFG, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y78)
                    {
                        0x00000000,
                    }
                })
                CreateWordField (SBFB, \_SB.PC02.I2C1.TPD0._Y77._ADR, BADR)  // _ADR: Address
                CreateDWordField (SBFB, \_SB.PC02.I2C1.TPD0._Y77._SPE, SPED)  // _SPE: Speed
                CreateWordField (SBFG, 0x17, INT1)
                CreateDWordField (SBFI, \_SB.PC02.I2C1.TPD0._Y78._INT, INT2)  // _INT: Interrupts
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((PCHA == Zero))
                    {
                        If ((OSYS < 0x07DC))
                        {
                            SRXO (GPDI, One)
                        }

                        INT1 = GNUM (GPDI)
                        INT2 = INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            SGRA (GPDI, Local0)
                            SGII (GPDI, Zero)
                            GRXE (GPDI, Zero)
                        }
                    }
                    Else
                    {
                        If ((OSYS < 0x07DC))
                        {
                            ^^^^PGPI.SRXO (GPDI, One)
                        }

                        INT1 = ^^^^PGPI.GNUM (GPDI)
                        INT2 = ^^^^PGPI.INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            ^^^^PGPI.SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            ^^^^PGPI.SGRA (GPDI, Local0)
                            ^^^^PGPI.SGII (GPDI, Zero)
                            ^^^^PGPI.GRXE (GPDI, Zero)
                        }
                    }

                    If ((TPDT == One))
                    {
                        _HID = "SYNA2393"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x02))
                    {
                        _HID = "06CB2846"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x06))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x07))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x08))
                    {
                        _HID = "SNSL0033"
                        HID2 = One
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x09))
                    {
                        _HID = "PIXA0002"
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x05))
                    {
                        HID2 = TPDH /* \TPDH */
                        BADR = TPDB /* \TPDB */
                        If ((TPDS == Zero))
                        {
                            SPED = 0x000186A0
                        }

                        If ((TPDS == One))
                        {
                            SPED = 0x00061A80
                        }

                        If ((TPDS == 0x02))
                        {
                            SPED = 0x000F4240
                        }

                        Return (Zero)
                    }
                }

                Name (_HID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == HIDG))
                    {
                        Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                    }

                    If ((Arg0 == TP7G))
                    {
                        Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((TPDT != Zero) && (I2CN & One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((OSYS < 0x07DC))
                    {
                        Return (SBFI) /* \_SB_.PC02.I2C1.TPD0.SBFI */
                    }

                    If ((TPDM == Zero))
                    {
                        Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                    }

                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
                }
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("f87a6d23-2884-4fe4-a55f-633d9e339ce1") /* Unknown UUID */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "idle-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "SS-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FM-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FMP-active-latency-tolerance", 
                        0xFFFF
                    }
                }
            })
        }

        Scope (_SB.PC02.I2C2)
        {
            Name (I2CN, Zero)
            Name (I2CX, Zero)
            Name (I2CI, 0x02)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                I2CN = SDS2 /* \SDS2 */
                I2CX = 0x02
            }

            Device (TPD0)
            {
                Name (HID2, Zero)
                Name (SBFB, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "NULL",
                        0x00, ResourceConsumer, _Y79, Exclusive,
                        )
                })
                Name (SBFG, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y7A)
                    {
                        0x00000000,
                    }
                })
                CreateWordField (SBFB, \_SB.PC02.I2C2.TPD0._Y79._ADR, BADR)  // _ADR: Address
                CreateDWordField (SBFB, \_SB.PC02.I2C2.TPD0._Y79._SPE, SPED)  // _SPE: Speed
                CreateWordField (SBFG, 0x17, INT1)
                CreateDWordField (SBFI, \_SB.PC02.I2C2.TPD0._Y7A._INT, INT2)  // _INT: Interrupts
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((PCHA == Zero))
                    {
                        If ((OSYS < 0x07DC))
                        {
                            SRXO (GPDI, One)
                        }

                        INT1 = GNUM (GPDI)
                        INT2 = INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            SGRA (GPDI, Local0)
                            SGII (GPDI, Zero)
                            GRXE (GPDI, Zero)
                        }
                    }
                    Else
                    {
                        If ((OSYS < 0x07DC))
                        {
                            ^^^^PGPI.SRXO (GPDI, One)
                        }

                        INT1 = ^^^^PGPI.GNUM (GPDI)
                        INT2 = ^^^^PGPI.INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            ^^^^PGPI.SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            ^^^^PGPI.SGRA (GPDI, Local0)
                            ^^^^PGPI.SGII (GPDI, Zero)
                            ^^^^PGPI.GRXE (GPDI, Zero)
                        }
                    }

                    If ((TPDT == One))
                    {
                        _HID = "SYNA2393"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x02))
                    {
                        _HID = "06CB2846"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x06))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x07))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x08))
                    {
                        _HID = "SNSL0033"
                        HID2 = One
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x09))
                    {
                        _HID = "PIXA0002"
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x05))
                    {
                        HID2 = TPDH /* \TPDH */
                        BADR = TPDB /* \TPDB */
                        If ((TPDS == Zero))
                        {
                            SPED = 0x000186A0
                        }

                        If ((TPDS == One))
                        {
                            SPED = 0x00061A80
                        }

                        If ((TPDS == 0x02))
                        {
                            SPED = 0x000F4240
                        }

                        Return (Zero)
                    }
                }

                Name (_HID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == HIDG))
                    {
                        Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                    }

                    If ((Arg0 == TP7G))
                    {
                        Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((TPDT != Zero) && (I2CN & One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((OSYS < 0x07DC))
                    {
                        Return (SBFI) /* \_SB_.PC02.I2C2.TPD0.SBFI */
                    }

                    If ((TPDM == Zero))
                    {
                        Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                    }

                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
                }
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("f87a6d23-2884-4fe4-a55f-633d9e339ce1") /* Unknown UUID */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "idle-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "SS-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FM-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FMP-active-latency-tolerance", 
                        0xFFFF
                    }
                }
            })
        }

        Scope (_SB.PC02.I2C3)
        {
            Name (I2CN, Zero)
            Name (I2CX, Zero)
            Name (I2CI, 0x03)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                I2CN = SDS3 /* \SDS3 */
                I2CX = 0x03
            }

            Device (TPD0)
            {
                Name (HID2, Zero)
                Name (SBFB, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "NULL",
                        0x00, ResourceConsumer, _Y7B, Exclusive,
                        )
                })
                Name (SBFG, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y7C)
                    {
                        0x00000000,
                    }
                })
                CreateWordField (SBFB, \_SB.PC02.I2C3.TPD0._Y7B._ADR, BADR)  // _ADR: Address
                CreateDWordField (SBFB, \_SB.PC02.I2C3.TPD0._Y7B._SPE, SPED)  // _SPE: Speed
                CreateWordField (SBFG, 0x17, INT1)
                CreateDWordField (SBFI, \_SB.PC02.I2C3.TPD0._Y7C._INT, INT2)  // _INT: Interrupts
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((PCHA == Zero))
                    {
                        If ((OSYS < 0x07DC))
                        {
                            SRXO (GPDI, One)
                        }

                        INT1 = GNUM (GPDI)
                        INT2 = INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            SGRA (GPDI, Local0)
                            SGII (GPDI, Zero)
                            GRXE (GPDI, Zero)
                        }
                    }
                    Else
                    {
                        If ((OSYS < 0x07DC))
                        {
                            ^^^^PGPI.SRXO (GPDI, One)
                        }

                        INT1 = ^^^^PGPI.GNUM (GPDI)
                        INT2 = ^^^^PGPI.INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            ^^^^PGPI.SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            ^^^^PGPI.SGRA (GPDI, Local0)
                            ^^^^PGPI.SGII (GPDI, Zero)
                            ^^^^PGPI.GRXE (GPDI, Zero)
                        }
                    }

                    If ((TPDT == One))
                    {
                        _HID = "SYNA2393"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x02))
                    {
                        _HID = "06CB2846"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x06))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x07))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x08))
                    {
                        _HID = "SNSL0033"
                        HID2 = One
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x09))
                    {
                        _HID = "PIXA0002"
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x05))
                    {
                        HID2 = TPDH /* \TPDH */
                        BADR = TPDB /* \TPDB */
                        If ((TPDS == Zero))
                        {
                            SPED = 0x000186A0
                        }

                        If ((TPDS == One))
                        {
                            SPED = 0x00061A80
                        }

                        If ((TPDS == 0x02))
                        {
                            SPED = 0x000F4240
                        }

                        Return (Zero)
                    }
                }

                Name (_HID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == HIDG))
                    {
                        Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                    }

                    If ((Arg0 == TP7G))
                    {
                        Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((TPDT != Zero) && (I2CN & One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((OSYS < 0x07DC))
                    {
                        Return (SBFI) /* \_SB_.PC02.I2C3.TPD0.SBFI */
                    }

                    If ((TPDM == Zero))
                    {
                        Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                    }

                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
                }
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("f87a6d23-2884-4fe4-a55f-633d9e339ce1") /* Unknown UUID */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "idle-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "SS-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FM-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FMP-active-latency-tolerance", 
                        0xFFFF
                    }
                }
            })
        }

        Scope (_SB.PC02.I2C4)
        {
            Name (I2CN, Zero)
            Name (I2CX, Zero)
            Name (I2CI, 0x04)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                I2CN = SDS4 /* \SDS4 */
                I2CX = 0x04
            }

            Device (TPD0)
            {
                Name (HID2, Zero)
                Name (SBFB, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "NULL",
                        0x00, ResourceConsumer, _Y7D, Exclusive,
                        )
                })
                Name (SBFG, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y7E)
                    {
                        0x00000000,
                    }
                })
                CreateWordField (SBFB, \_SB.PC02.I2C4.TPD0._Y7D._ADR, BADR)  // _ADR: Address
                CreateDWordField (SBFB, \_SB.PC02.I2C4.TPD0._Y7D._SPE, SPED)  // _SPE: Speed
                CreateWordField (SBFG, 0x17, INT1)
                CreateDWordField (SBFI, \_SB.PC02.I2C4.TPD0._Y7E._INT, INT2)  // _INT: Interrupts
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((PCHA == Zero))
                    {
                        If ((OSYS < 0x07DC))
                        {
                            SRXO (GPDI, One)
                        }

                        INT1 = GNUM (GPDI)
                        INT2 = INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            SGRA (GPDI, Local0)
                            SGII (GPDI, Zero)
                            GRXE (GPDI, Zero)
                        }
                    }
                    Else
                    {
                        If ((OSYS < 0x07DC))
                        {
                            ^^^^PGPI.SRXO (GPDI, One)
                        }

                        INT1 = ^^^^PGPI.GNUM (GPDI)
                        INT2 = ^^^^PGPI.INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            ^^^^PGPI.SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            ^^^^PGPI.SGRA (GPDI, Local0)
                            ^^^^PGPI.SGII (GPDI, Zero)
                            ^^^^PGPI.GRXE (GPDI, Zero)
                        }
                    }

                    If ((TPDT == One))
                    {
                        _HID = "SYNA2393"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x02))
                    {
                        _HID = "06CB2846"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x06))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x07))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x08))
                    {
                        _HID = "SNSL0033"
                        HID2 = One
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x09))
                    {
                        _HID = "PIXA0002"
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x05))
                    {
                        HID2 = TPDH /* \TPDH */
                        BADR = TPDB /* \TPDB */
                        If ((TPDS == Zero))
                        {
                            SPED = 0x000186A0
                        }

                        If ((TPDS == One))
                        {
                            SPED = 0x00061A80
                        }

                        If ((TPDS == 0x02))
                        {
                            SPED = 0x000F4240
                        }

                        Return (Zero)
                    }
                }

                Name (_HID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == HIDG))
                    {
                        Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                    }

                    If ((Arg0 == TP7G))
                    {
                        Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((TPDT != Zero) && (I2CN & One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((OSYS < 0x07DC))
                    {
                        Return (SBFI) /* \_SB_.PC02.I2C4.TPD0.SBFI */
                    }

                    If ((TPDM == Zero))
                    {
                        Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                    }

                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
                }
            }

            Device (TPL1)
            {
                Name (HID2, Zero)
                Name (TPGI, Zero)
                Name (SBFB, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "NULL",
                        0x00, ResourceConsumer, _Y7F, Exclusive,
                        )
                })
                Name (SBFG, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, Exclusive, PullUp, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y80)
                    {
                        0x00000000,
                    }
                })
                CreateWordField (SBFB, \_SB.PC02.I2C4.TPL1._Y7F._ADR, BADR)  // _ADR: Address
                CreateDWordField (SBFB, \_SB.PC02.I2C4.TPL1._Y7F._SPE, SPED)  // _SPE: Speed
                CreateWordField (SBFG, 0x17, INT1)
                CreateDWordField (SBFI, \_SB.PC02.I2C4.TPL1._Y80._INT, INT2)  // _INT: Interrupts
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    TPGI = T0GI /* \T0GI */
                    If (CondRefOf (\_SB))
                    {
                        If ((OSYS < 0x07DC))
                        {
                            SRXO (TPGI, One)
                        }

                        INT1 = GNUM (TPGI)
                        INT2 = INUM (TPGI)
                        If ((TPLM == Zero))
                        {
                            SHPO (TPGI, One)
                        }
                        Else
                        {
                            SHPO (TPGI, Zero)
                        }
                    }

                    If ((TPLT == One))
                    {
                        _HID = "ATML3432"
                        HID2 = Zero
                        BADR = 0x4C
                        SPED = 0x00061A80
                        Return (Zero)
                    }

                    If ((TPLT == 0x02))
                    {
                        _HID = "ATML2952"
                        HID2 = Zero
                        BADR = 0x4A
                        SPED = 0x00061A80
                        Return (Zero)
                    }

                    If ((TPLT == 0x03))
                    {
                        _HID = "ELAN9048"
                        HID2 = One
                        BADR = 0x10
                        SPED = 0x00061A80
                        Return (Zero)
                    }

                    If ((TPLT == 0x04))
                    {
                        _HID = "NTRG0001"
                        HID2 = One
                        BADR = 0x07
                        SPED = 0x00061A80
                        Return (Zero)
                    }

                    If ((TPLT == 0x05))
                    {
                        _HID = "NTRG0002"
                        HID2 = One
                        BADR = 0x64
                        SPED = 0x00061A80
                        Return (Zero)
                    }

                    If ((TPLT == 0x06))
                    {
                        _HID = "WCOM508E"
                        HID2 = One
                        BADR = 0x0A
                        If ((TPLS == Zero))
                        {
                            SPED = 0x00061A80
                        }

                        If ((TPLS == One))
                        {
                            SPED = 0x00061A80
                        }

                        If ((TPLS == 0x02))
                        {
                            SPED = 0x000F4240
                        }

                        Return (Zero)
                    }

                    If ((TPLT == 0x07))
                    {
                        _HID = "CUST0000"
                        HID2 = TPLH /* \TPLH */
                        BADR = TPLB /* \TPLB */
                        If ((TPLS == Zero))
                        {
                            SPED = 0x000186A0
                        }

                        If ((TPLS == One))
                        {
                            SPED = 0x00061A80
                        }

                        If ((TPLS == 0x02))
                        {
                            SPED = 0x000F4240
                        }

                        Return (Zero)
                    }
                }

                Name (_HID, "XXXX0000")  // _HID: Hardware ID
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Method (_UID, 0, NotSerialized)  // _UID: Unique ID
                {
                    Return (I2CI) /* \_SB_.PC02.I2C4.I2CI */
                }

                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == HIDG))
                    {
                        Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                    }

                    If ((Arg0 == TP7G))
                    {
                        Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((TPLT != Zero) && (I2CN & 0x02)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((OSYS < 0x07DC))
                    {
                        Return (SBFI) /* \_SB_.PC02.I2C4.TPL1.SBFI */
                    }

                    If ((TPLM == Zero))
                    {
                        Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                    }

                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
                }
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("f87a6d23-2884-4fe4-a55f-633d9e339ce1") /* Unknown UUID */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "idle-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "SS-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FM-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FMP-active-latency-tolerance", 
                        0xFFFF
                    }
                }
            })
        }

        Scope (_SB.PC02.I2C5)
        {
            Name (I2CN, Zero)
            Name (I2CX, Zero)
            Name (I2CI, 0x05)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                I2CN = SDS5 /* \SDS5 */
                I2CX = 0x05
            }

            Device (TPD0)
            {
                Name (HID2, Zero)
                Name (SBFB, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "NULL",
                        0x00, ResourceConsumer, _Y81, Exclusive,
                        )
                })
                Name (SBFG, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y82)
                    {
                        0x00000000,
                    }
                })
                CreateWordField (SBFB, \_SB.PC02.I2C5.TPD0._Y81._ADR, BADR)  // _ADR: Address
                CreateDWordField (SBFB, \_SB.PC02.I2C5.TPD0._Y81._SPE, SPED)  // _SPE: Speed
                CreateWordField (SBFG, 0x17, INT1)
                CreateDWordField (SBFI, \_SB.PC02.I2C5.TPD0._Y82._INT, INT2)  // _INT: Interrupts
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((PCHA == Zero))
                    {
                        If ((OSYS < 0x07DC))
                        {
                            SRXO (GPDI, One)
                        }

                        INT1 = GNUM (GPDI)
                        INT2 = INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            SGRA (GPDI, Local0)
                            SGII (GPDI, Zero)
                            GRXE (GPDI, Zero)
                        }
                    }
                    Else
                    {
                        If ((OSYS < 0x07DC))
                        {
                            ^^^^PGPI.SRXO (GPDI, One)
                        }

                        INT1 = ^^^^PGPI.GNUM (GPDI)
                        INT2 = ^^^^PGPI.INUM (GPDI)
                        If ((TPDM == Zero))
                        {
                            ^^^^PGPI.SHPO (GPDI, One)
                        }

                        If ((TPDM == One))
                        {
                            Local0 = (PPDI ^ One)
                            ^^^^PGPI.SGRA (GPDI, Local0)
                            ^^^^PGPI.SGII (GPDI, Zero)
                            ^^^^PGPI.GRXE (GPDI, Zero)
                        }
                    }

                    If ((TPDT == One))
                    {
                        _HID = "SYNA2393"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x02))
                    {
                        _HID = "06CB2846"
                        HID2 = 0x20
                        Return (Zero)
                    }

                    If ((TPDT == 0x06))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x07))
                    {
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x08))
                    {
                        _HID = "SNSL0033"
                        HID2 = One
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x09))
                    {
                        _HID = "PIXA0002"
                        HID2 = 0x20
                        BADR = 0x2C
                        Return (Zero)
                    }

                    If ((TPDT == 0x05))
                    {
                        HID2 = TPDH /* \TPDH */
                        BADR = TPDB /* \TPDB */
                        If ((TPDS == Zero))
                        {
                            SPED = 0x000186A0
                        }

                        If ((TPDS == One))
                        {
                            SPED = 0x00061A80
                        }

                        If ((TPDS == 0x02))
                        {
                            SPED = 0x000F4240
                        }

                        Return (Zero)
                    }
                }

                Name (_HID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
                Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == HIDG))
                    {
                        Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                    }

                    If ((Arg0 == TP7G))
                    {
                        Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((TPDT != Zero) && (I2CN & One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((OSYS < 0x07DC))
                    {
                        Return (SBFI) /* \_SB_.PC02.I2C5.TPD0.SBFI */
                    }

                    If ((TPDM == Zero))
                    {
                        Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                    }

                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
                }
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("f87a6d23-2884-4fe4-a55f-633d9e339ce1") /* Unknown UUID */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "idle-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "SS-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FM-active-latency-tolerance", 
                        0xFFFF
                    }, 

                    Package (0x02)
                    {
                        "FMP-active-latency-tolerance", 
                        0xFFFF
                    }
                }
            })
        }

        Scope (_SB.PC02.SPI1)
        {
            Name (SPIP, Zero)
            Name (SPIX, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                SPIP = SDS7 /* \SDS7 */
                SPIX = 0x07
            }

            Device (FPNT)
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((FPTT == One))
                    {
                        Return ("FPC1011")
                    }

                    If ((FPTT == 0x02))
                    {
                        Return ("FPC1020")
                    }

                    If ((FPTT == 0x03))
                    {
                        Return ("VFSI6101")
                    }

                    If ((FPTT == 0x04))
                    {
                        Return ("VFSI7500")
                    }

                    If ((FPTT == 0x05))
                    {
                        Return ("EGIS0300")
                    }

                    If ((FPTT == 0x06))
                    {
                        Return ("FPC1021")
                    }

                    Return ("DUMY0000")
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    SHPO (GFPI, One)
                    SHPO (GFPS, One)
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((FPTT != Zero) && (SPIP == One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (BBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0008
                            }
                    })
                    Name (IBUF, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y83)
                        {
                            0x00000000,
                        }
                    })
                    Name (GBUF, ResourceTemplate ()
                    {
                        GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, _Y84,
                            )
                            {   // Pin list
                                0x0000
                            }
                    })
                    Name (UBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0000
                            }
                    })
                    CreateWordField (BBUF, 0x17, SPIN)
                    CreateWordField (GBUF, 0x17, GPIN)
                    CreateDWordField (IBUF, \_SB.PC02.SPI1.FPNT._CRS._Y83._INT, IPIN)  // _INT: Interrupts
                    CreateWordField (UBUF, 0x17, UPIN)
                    CreateBitField (IBUF, \_SB.PC02.SPI1.FPNT._CRS._Y83._LL, ILVL)  // _LL_: Low Level
                    CreateBitField (IBUF, \_SB.PC02.SPI1.FPNT._CRS._Y83._HE, ITRG)  // _HE_: High-Edge
                    CreateField (GBUF, \_SB.PC02.SPI1.FPNT._CRS._Y84._POL, 0x02, GLVL)  // _POL: Polarity
                    CreateBitField (GBUF, \_SB.PC02.SPI1.FPNT._CRS._Y84._MOD, GTRG)  // _MOD: Mode
                    SPIN = GNUM (GFPS)
                    GPIN = GNUM (GFPI)
                    IPIN = INUM (GFPI)
                    UPIN = GNUM (GFPI)
                    If (((FPTT == 0x02) || (FPTT == 0x06)))
                    {
                        ILVL = Zero
                        ITRG = One
                        GLVL = Zero
                        GTRG = One
                    }

                    If ((FPTT == 0x04))
                    {
                        ILVL = Zero
                        ITRG = One
                    }

                    Switch (ToInteger (FPTT))
                    {
                        Case (One)
                        {
                            Local1 = 0x00989680
                            Local0 = Zero
                        }
                        Case (0x02)
                        {
                            Local1 = 0x002DC6C0
                            Local0 = Zero
                        }
                        Case (0x03)
                        {
                            Local1 = 0x007A1200
                            Local0 = One
                        }
                        Case (0x04)
                        {
                            Local1 = 0x007A1200
                            Local0 = Zero
                        }
                        Case (0x05)
                        {
                            Local1 = 0x00F42400
                            Local0 = Zero
                        }
                        Case (0x06)
                        {
                            Local1 = 0x002DC6C0
                            Local0 = Zero
                        }
                        Default
                        {
                            Local1 = Zero
                            Local0 = Zero
                        }

                    }

                    If ((FPTT == One))
                    {
                        Return (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF))
                    }

                    If (((FPTT == 0x04) && (FPTM == Zero)))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, GBUF
                            )))
                    }

                    If (((FPTT == 0x04) && (FPTM != Zero)))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, IBUF
                            )))
                    }

                    If ((FPTM == Zero))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), GBUF))
                    }

                    Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), IBUF))
                }
            }
        }

        Scope (_SB.PC02.SPI2)
        {
            Name (SPIP, Zero)
            Name (SPIX, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                SPIP = SDS8 /* \SDS8 */
                SPIX = 0x08
            }

            Device (FPNT)
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((FPTT == One))
                    {
                        Return ("FPC1011")
                    }

                    If ((FPTT == 0x02))
                    {
                        Return ("FPC1020")
                    }

                    If ((FPTT == 0x03))
                    {
                        Return ("VFSI6101")
                    }

                    If ((FPTT == 0x04))
                    {
                        Return ("VFSI7500")
                    }

                    If ((FPTT == 0x05))
                    {
                        Return ("EGIS0300")
                    }

                    If ((FPTT == 0x06))
                    {
                        Return ("FPC1021")
                    }

                    Return ("DUMY0000")
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    SHPO (GFPI, One)
                    SHPO (GFPS, One)
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((FPTT != Zero) && (SPIP == One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (BBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0008
                            }
                    })
                    Name (IBUF, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y85)
                        {
                            0x00000000,
                        }
                    })
                    Name (GBUF, ResourceTemplate ()
                    {
                        GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, _Y86,
                            )
                            {   // Pin list
                                0x0000
                            }
                    })
                    Name (UBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0000
                            }
                    })
                    CreateWordField (BBUF, 0x17, SPIN)
                    CreateWordField (GBUF, 0x17, GPIN)
                    CreateDWordField (IBUF, \_SB.PC02.SPI2.FPNT._CRS._Y85._INT, IPIN)  // _INT: Interrupts
                    CreateWordField (UBUF, 0x17, UPIN)
                    CreateBitField (IBUF, \_SB.PC02.SPI2.FPNT._CRS._Y85._LL, ILVL)  // _LL_: Low Level
                    CreateBitField (IBUF, \_SB.PC02.SPI2.FPNT._CRS._Y85._HE, ITRG)  // _HE_: High-Edge
                    CreateField (GBUF, \_SB.PC02.SPI2.FPNT._CRS._Y86._POL, 0x02, GLVL)  // _POL: Polarity
                    CreateBitField (GBUF, \_SB.PC02.SPI2.FPNT._CRS._Y86._MOD, GTRG)  // _MOD: Mode
                    SPIN = GNUM (GFPS)
                    GPIN = GNUM (GFPI)
                    IPIN = INUM (GFPI)
                    UPIN = GNUM (GFPI)
                    If (((FPTT == 0x02) || (FPTT == 0x06)))
                    {
                        ILVL = Zero
                        ITRG = One
                        GLVL = Zero
                        GTRG = One
                    }

                    If ((FPTT == 0x04))
                    {
                        ILVL = Zero
                        ITRG = One
                    }

                    Switch (ToInteger (FPTT))
                    {
                        Case (One)
                        {
                            Local1 = 0x00989680
                            Local0 = Zero
                        }
                        Case (0x02)
                        {
                            Local1 = 0x002DC6C0
                            Local0 = Zero
                        }
                        Case (0x03)
                        {
                            Local1 = 0x007A1200
                            Local0 = One
                        }
                        Case (0x04)
                        {
                            Local1 = 0x007A1200
                            Local0 = Zero
                        }
                        Case (0x05)
                        {
                            Local1 = 0x00F42400
                            Local0 = Zero
                        }
                        Case (0x06)
                        {
                            Local1 = 0x002DC6C0
                            Local0 = Zero
                        }
                        Default
                        {
                            Local1 = Zero
                            Local0 = Zero
                        }

                    }

                    If ((FPTT == One))
                    {
                        Return (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF))
                    }

                    If (((FPTT == 0x04) && (FPTM == Zero)))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, GBUF
                            )))
                    }

                    If (((FPTT == 0x04) && (FPTM != Zero)))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, IBUF
                            )))
                    }

                    If ((FPTM == Zero))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), GBUF))
                    }

                    Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), IBUF))
                }
            }
        }
    }

    Method (PKG1, 1, Serialized)
    {
        Name (PKG, Package (0x01)
        {
            Zero
        })
        PKG [Zero] = Arg0
        Return (PKG) /* \PKG1.PKG_ */
    }

    Method (PKG3, 3, Serialized)
    {
        Name (PKG, Package (0x03)
        {
            Zero, 
            Zero, 
            Zero
        })
        PKG [Zero] = Arg0
        PKG [One] = Arg1
        PKG [0x02] = Arg2
        Return (PKG) /* \PKG3.PKG_ */
    }

    If (USTP)
    {
        If ((PCHA == Zero))
        {
            Scope (_SB.PC00.I2C0)
            {
                Method (SSCN, 0, NotSerialized)
                {
                    Return (PKG3 (SSH0, SSL0, SSD0))
                }

                Method (FMCN, 0, NotSerialized)
                {
                    Return (PKG3 (FMH0, FML0, FMD0))
                }

                Method (FPCN, 0, NotSerialized)
                {
                    Return (PKG3 (FPH0, FPL0, FPD0))
                }

                Method (HSCN, 0, NotSerialized)
                {
                    Return (PKG3 (HSH0, HSL0, HSD0))
                }

                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C0))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C0))
                }
            }

            Scope (_SB.PC00.I2C1)
            {
                Method (SSCN, 0, NotSerialized)
                {
                    Return (PKG3 (SSH1, SSL1, SSD1))
                }

                Method (FMCN, 0, NotSerialized)
                {
                    Return (PKG3 (FMH1, FML1, FMD1))
                }

                Method (FPCN, 0, NotSerialized)
                {
                    Return (PKG3 (FPH1, FPL1, FPD1))
                }

                Method (HSCN, 0, NotSerialized)
                {
                    Return (PKG3 (HSH1, HSL1, HSD1))
                }

                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C1))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C1))
                }
            }

            Scope (_SB.PC00.I2C2)
            {
                Method (SSCN, 0, NotSerialized)
                {
                    Return (PKG3 (SSH2, SSL2, SSD2))
                }

                Method (FMCN, 0, NotSerialized)
                {
                    Return (PKG3 (FMH2, FML2, FMD2))
                }

                Method (FPCN, 0, NotSerialized)
                {
                    Return (PKG3 (FPH2, FPL2, FPD2))
                }

                Method (HSCN, 0, NotSerialized)
                {
                    Return (PKG3 (HSH2, HSL2, HSD2))
                }

                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C2))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C2))
                }
            }

            Scope (_SB.PC00.I2C3)
            {
                Method (SSCN, 0, NotSerialized)
                {
                    Return (PKG3 (SSH3, SSL3, SSD3))
                }

                Method (FMCN, 0, NotSerialized)
                {
                    Return (PKG3 (FMH3, FML3, FMD3))
                }

                Method (FPCN, 0, NotSerialized)
                {
                    Return (PKG3 (FPH3, FPL3, FPD3))
                }

                Method (HSCN, 0, NotSerialized)
                {
                    Return (PKG3 (HSH3, HSL3, HSD3))
                }

                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C3))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C3))
                }
            }

            Scope (_SB.PC00.I2C4)
            {
                Method (SSCN, 0, NotSerialized)
                {
                    Return (PKG3 (SSH4, SSL4, SSD4))
                }

                Method (FMCN, 0, NotSerialized)
                {
                    Return (PKG3 (FMH4, FML4, FMD4))
                }

                Method (FPCN, 0, NotSerialized)
                {
                    Return (PKG3 (FPH4, FPL4, FPD4))
                }

                Method (HSCN, 0, NotSerialized)
                {
                    Return (PKG3 (HSH4, HSL4, HSD4))
                }

                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C4))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C4))
                }
            }

            Scope (_SB.PC00.I2C5)
            {
                Method (SSCN, 0, NotSerialized)
                {
                    Return (PKG3 (SSH5, SSL5, SSD5))
                }

                Method (FMCN, 0, NotSerialized)
                {
                    Return (PKG3 (FMH5, FML5, FMD5))
                }

                Method (FPCN, 0, NotSerialized)
                {
                    Return (PKG3 (FPH5, FPL5, FPD5))
                }

                Method (HSCN, 0, NotSerialized)
                {
                    Return (PKG3 (HSH5, HSL5, HSD5))
                }

                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C5))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C5))
                }
            }

            Scope (_SB.PC00.SPI0)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C6))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C6))
                }
            }

            Scope (_SB.PC00.SPI1)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C7))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C7))
                }
            }

            Scope (_SB.PC00.SPI2)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C8))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C8))
                }
            }

            Scope (_SB.PC00.UA00)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C9))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C9))
                }
            }

            Scope (_SB.PC00.UA01)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0CA))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1CA))
                }
            }

            Scope (_SB.PC00.UA02)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0CB))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1CB))
                }
            }
        }
        Else
        {
            Scope (_SB.PC02.I2C0)
            {
                Method (SSCN, 0, NotSerialized)
                {
                    Return (PKG3 (SSH0, SSL0, SSD0))
                }

                Method (FMCN, 0, NotSerialized)
                {
                    Return (PKG3 (FMH0, FML0, FMD0))
                }

                Method (FPCN, 0, NotSerialized)
                {
                    Return (PKG3 (FPH0, FPL0, FPD0))
                }

                Method (HSCN, 0, NotSerialized)
                {
                    Return (PKG3 (HSH0, HSL0, HSD0))
                }

                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C0))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C0))
                }
            }

            Scope (_SB.PC02.I2C1)
            {
                Method (SSCN, 0, NotSerialized)
                {
                    Return (PKG3 (SSH1, SSL1, SSD1))
                }

                Method (FMCN, 0, NotSerialized)
                {
                    Return (PKG3 (FMH1, FML1, FMD1))
                }

                Method (FPCN, 0, NotSerialized)
                {
                    Return (PKG3 (FPH1, FPL1, FPD1))
                }

                Method (HSCN, 0, NotSerialized)
                {
                    Return (PKG3 (HSH1, HSL1, HSD1))
                }

                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C1))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C1))
                }
            }

            Scope (_SB.PC02.I2C2)
            {
                Method (SSCN, 0, NotSerialized)
                {
                    Return (PKG3 (SSH2, SSL2, SSD2))
                }

                Method (FMCN, 0, NotSerialized)
                {
                    Return (PKG3 (FMH2, FML2, FMD2))
                }

                Method (FPCN, 0, NotSerialized)
                {
                    Return (PKG3 (FPH2, FPL2, FPD2))
                }

                Method (HSCN, 0, NotSerialized)
                {
                    Return (PKG3 (HSH2, HSL2, HSD2))
                }

                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C2))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C2))
                }
            }

            Scope (_SB.PC02.I2C3)
            {
                Method (SSCN, 0, NotSerialized)
                {
                    Return (PKG3 (SSH3, SSL3, SSD3))
                }

                Method (FMCN, 0, NotSerialized)
                {
                    Return (PKG3 (FMH3, FML3, FMD3))
                }

                Method (FPCN, 0, NotSerialized)
                {
                    Return (PKG3 (FPH3, FPL3, FPD3))
                }

                Method (HSCN, 0, NotSerialized)
                {
                    Return (PKG3 (HSH3, HSL3, HSD3))
                }

                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C3))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C3))
                }
            }

            Scope (_SB.PC02.I2C4)
            {
                Method (SSCN, 0, NotSerialized)
                {
                    Return (PKG3 (SSH4, SSL4, SSD4))
                }

                Method (FMCN, 0, NotSerialized)
                {
                    Return (PKG3 (FMH4, FML4, FMD4))
                }

                Method (FPCN, 0, NotSerialized)
                {
                    Return (PKG3 (FPH4, FPL4, FPD4))
                }

                Method (HSCN, 0, NotSerialized)
                {
                    Return (PKG3 (HSH4, HSL4, HSD4))
                }

                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C4))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C4))
                }
            }

            Scope (_SB.PC02.I2C5)
            {
                Method (SSCN, 0, NotSerialized)
                {
                    Return (PKG3 (SSH5, SSL5, SSD5))
                }

                Method (FMCN, 0, NotSerialized)
                {
                    Return (PKG3 (FMH5, FML5, FMD5))
                }

                Method (FPCN, 0, NotSerialized)
                {
                    Return (PKG3 (FPH5, FPL5, FPD5))
                }

                Method (HSCN, 0, NotSerialized)
                {
                    Return (PKG3 (HSH5, HSL5, HSD5))
                }

                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C5))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C5))
                }
            }

            Scope (_SB.PC02.SPI0)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C6))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C6))
                }
            }

            Scope (_SB.PC02.SPI1)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C7))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C7))
                }
            }

            Scope (_SB.PC02.SPI2)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C8))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C8))
                }
            }

            Scope (_SB.PC02.UA00)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0C9))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1C9))
                }
            }

            Scope (_SB.PC02.UA01)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0CA))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1CA))
                }
            }

            Scope (_SB.PC02.UA02)
            {
                Method (M0D3, 0, NotSerialized)
                {
                    Return (PKG1 (M0CB))
                }

                Method (M1D3, 0, NotSerialized)
                {
                    Return (PKG1 (M1CB))
                }
            }
        }
    }

    Method (ISAR, 4, NotSerialized)
    {
        ADBG ("ISAR")
        Name (BUF1, Buffer (0x02)
        {
             0x00, 0x00                                       // ..
        })
        If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37") /* Unknown UUID */))
        {
            If ((Arg2 == 0x03))
            {
                If (CondRefOf (\_SB.USSV))
                {
                    Local1 = DerefOf (Arg3 [One])
                    Local1 += One
                    Local2 = DerefOf (Arg3 [0x02])
                    Local2 += One
                    Local2 <<= 0x10
                    Local2 |= Local1
                    \_SB.USSV (Local2)
                    Notify (\_SB.WFDE, 0xD0) // Hardware-Specific
                }

                Return (Zero)
            }
            Else
            {
                Return (Zero)
            }
        }
        Else
        {
            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (\)
    {
        PowerResource (PIN, 0x00, 0x0000)
        {
            Method (STA, 1, Serialized)
            {
                If ((\_SB.GGOV (DerefOf (Arg0 [Zero])) == DerefOf (Arg0 [One]
                    )))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (ON, 1, Serialized)
            {
                ADBG (Concatenate ("PINH GPIO=", ToHexString (DerefOf (Arg0 [Zero]))))
                \_SB.SGOV (DerefOf (Arg0 [Zero]), DerefOf (Arg0 [One]))
            }

            Method (OFF, 1, Serialized)
            {
                ADBG (Concatenate ("PINL GPIO=", ToHexString (DerefOf (Arg0 [Zero]))))
                \_SB.SGOV (DerefOf (Arg0 [Zero]), ~DerefOf (Arg0 [One])
                    )
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
            }
        }

        If ((PCHA != Zero))
        {
            PowerResource (PPIN, 0x00, 0x0000)
            {
                Method (STA, 1, Serialized)
                {
                    If ((\_SB.PGPI.GGOV (DerefOf (Arg0 [Zero])) == DerefOf (Arg0 [One]
                        )))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (ON, 1, Serialized)
                {
                    ADBG (Concatenate ("PINH GPIO=", ToHexString (DerefOf (Arg0 [Zero]))))
                    \_SB.PGPI.SGOV (DerefOf (Arg0 [Zero]), DerefOf (Arg0 [One]))
                }

                Method (OFF, 1, Serialized)
                {
                    ADBG (Concatenate ("PINL GPIO=", ToHexString (DerefOf (Arg0 [Zero]))))
                    \_SB.PGPI.SGOV (DerefOf (Arg0 [Zero]), ~DerefOf (Arg0 [One])
                        )
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }
            }
        }
    }

    If ((PCHA == Zero))
    {
        Name (DEVM, 0xFF)
        Scope (_SB)
        {
            Device (WCCD)
            {
                Name (_HID, "INTC1092")  // _HID: Hardware ID
                Name (_STR, Unicode ("Wireless Connectivity Configuration Device"))  // _STR: Description String
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    DEVM = Zero
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((WWEN != Zero) && (WCEN == One)))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Name (WCS0, Package (0x04)
                {
                    Zero, 
                    Package (0x04)
                    {
                        Zero, 
                        One, 
                        0x02, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        0x02, 
                        0x03, 
                        One
                    }, 

                    Package (0x04)
                    {
                        0x02, 
                        0x03, 
                        One, 
                        0x02
                    }
                })
                Name (WCS1, Package (0x04)
                {
                    One, 
                    Package (0x04)
                    {
                        Zero, 
                        0x02, 
                        0x03, 
                        One
                    }, 

                    Package (0x04)
                    {
                        One, 
                        0x03, 
                        One, 
                        0x02
                    }, 

                    Package (0x04)
                    {
                        0x02, 
                        One, 
                        0x02, 
                        0x03
                    }
                })
                Name (WCS2, Package (0x04)
                {
                    0x02, 
                    Package (0x04)
                    {
                        Zero, 
                        0x03, 
                        One, 
                        0x02
                    }, 

                    Package (0x04)
                    {
                        One, 
                        One, 
                        0x02, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        0x02, 
                        0x02, 
                        0x03, 
                        One
                    }
                })
                Name (WDMC, Package (0x03)
                {
                    Zero, 
                    0x03, 
                    Package (0x04)
                    {
                        Zero, 
                        Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("82737e72-3a33-4c45-a9c7-57c0411a5f13") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Local0 = 0x07
                                Local0 = 0x80000007
                                Return (Local0)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((Arg2 == One))
                        {
                            ADBG (Concatenate ("Device Mode ", ToDecimalString (DEVM)))
                            Return (DEVM) /* \DEVM */
                        }

                        If ((Arg2 == 0x02))
                        {
                            ADBG (Concatenate ("Get WDMC Table with WCS", ToHexString (Arg3)))
                            If ((Arg3 == Zero))
                            {
                                WDMC [0x02] = WCS0 /* \_SB_.WCCD.WCS0 */
                            }
                            ElseIf ((Arg3 == One))
                            {
                                WDMC [0x02] = WCS1 /* \_SB_.WCCD.WCS1 */
                            }
                            ElseIf ((Arg3 == 0x02))
                            {
                                WDMC [0x02] = WCS2 /* \_SB_.WCCD.WCS2 */
                            }
                            Else
                            {
                                ADBG ("Unsupported regulatory is detected!!")
                            }

                            Return (WDMC) /* \_SB_.WCCD.WDMC */
                        }

                        If ((Arg2 == 0x1F))
                        {
                            ADBG (Concatenate ("Set Device Mode ", ToDecimalString (Arg3)))
                            DEVM = Arg3
                            Notify (WCCD, 0x80) // Status Change
                            Return (Zero)
                        }

                        Return (Zero)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }

        Scope (_SB)
        {
            Name (C0PF, Package (0x01)
            {
                Buffer (0x14)
                {
                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x20, 0x03, 0xD0, 0x07,  // .... ...
                    /* 0008 */  0x41, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01,  // A.......
                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                }
            })
            Name (C1PF, Package (0x01)
            {
                Buffer (0x14)
                {
                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x20, 0x03, 0xD0, 0x07,  // .... ...
                    /* 0008 */  0x41, 0x0E, 0x00, 0x00, 0x04, 0x00, 0x80, 0x01,  // A.......
                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                }
            })
        }

        Scope (\)
        {
            Method (PLD1, 0, Serialized)
            {
                Return (\_SB.C0PF)
            }
        }

        Scope (\)
        {
            Method (PLD2, 0, Serialized)
            {
                Return (\_SB.C1PF)
            }
        }

        Scope (_SB.PC00.THC0)
        {
            Device (TLC1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (C0PF) /* \_SB_.C0PF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }

            Device (TLC2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (C0PF) /* \_SB_.C0PF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }

            Device (TLC3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (C0PF) /* \_SB_.C0PF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }
        }

        Scope (_SB.PC00.THC1)
        {
            Device (TLC1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (C1PF) /* \_SB_.C1PF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }

            Device (TLC2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (C1PF) /* \_SB_.C1PF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }

            Device (TLC3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Return (C1PF) /* \_SB_.C1PF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }
        }
    }

    If ((CVFS == One))
    {
        Scope (_SB.PC00)
        {
            Device (SPFD)
            {
                ADBG ("SPFD Device Entry")
                Name (_UID, "SPFD")  // _UID: Unique ID
                Name (_DDN, "Intel SPI OED Device")  // _DDN: DOS Device Name
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return ("INTC10D0")
                }

                Name (PKG0, Package (0x02)
                {
                    "\\_SB.PC00.XHCI.RHUB.VGPO", 
                    "\\_SB.PC00.XHCI.RHUB.VSPI"
                })
                Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
                {
                    If ((CVFS == One))
                    {
                        Return (PKG0) /* \_SB_.PC00.SPFD.PKG0 */
                    }

                    Return (Package (0x00){})
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (CBF1, ResourceTemplate ()
                    {
                        GpioIo (Shared, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0048
                            }
                        GpioInt (Edge, ActiveLow, Shared, PullDefault, 0x0000,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0048
                            }
                    })
                    Name (CBF2, ResourceTemplate ()
                    {
                        GpioIo (Shared, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0037
                            }
                        GpioInt (Edge, ActiveLow, Shared, PullDefault, 0x0000,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0037
                            }
                    })
                    Name (CBF3, ResourceTemplate ()
                    {
                        GpioIo (Shared, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0080
                            }
                        GpioInt (Edge, ActiveLow, Shared, PullDefault, 0x0000,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0080
                            }
                    })
                    Name (VGB1, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.PC00.XHCI.RHUB.VGPO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0000
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.PC00.XHCI.RHUB.VGPO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0001
                            }
                    })
                    Name (VSB1, ResourceTemplate ()
                    {
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x00895440, ClockPolarityHigh,
                            ClockPhaseSecond, "\\_SB.PC00.XHCI.RHUB.VSPI",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    If ((CVFS == One))
                    {
                        ADBG ("SPFD _CRS returns resources for usb based cvf")
                        If ((ToInteger (PLID) == 0x06))
                        {
                            Return (ConcatenateResTemplate (ConcatenateResTemplate (CBF2, VGB1), VSB1))
                        }
                        ElseIf (((ToInteger (PLID) == 0x07) || (ToInteger (PLID) == 
                            0x08)))
                        {
                            Return (ConcatenateResTemplate (ConcatenateResTemplate (CBF3, VGB1), VSB1))
                        }

                        Return (ConcatenateResTemplate (ConcatenateResTemplate (CBF1, VGB1), VSB1))
                    }

                    Return (ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionNone,
                            "\\_SB.PC00", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0000
                            }
                    })
                }

                Device (CVFD)
                {
                    ADBG ("CVFD Device Entry")
                    Name (_UID, "CVFD")  // _UID: Unique ID
                    Name (_DDN, "Intel CVF Device")  // _DDN: DOS Device Name
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return ("INTC10CF")
                    }

                    Method (SID, 1, Serialized)
                    {
                        Return (HCID (One))
                    }
                }
            }
        }

        Scope (_SB.PC00.XHCI.RHUB)
        {
            Device (VGPO)
            {
                ADBG ("VGPO Virutal GPIO Device Entry")
                Name (_UID, "VGPO")  // _UID: Unique ID
                Name (_DDN, "Intel UsbGpio Device")  // _DDN: DOS Device Name
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return ("INTC10D1")
                }

                Name (PKG1, Package (0x01)
                {
                    "\\_SB.PC00.XHCI.RHUB.HS04"
                })
                Name (PKG2, Package (0x01)
                {
                    "\\_SB.PC00.XHCI.RHUB.HS06"
                })
                Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
                {
                    If ((CUPN == 0x04))
                    {
                        Return (PKG1) /* \_SB_.PC00.XHCI.RHUB.VGPO.PKG1 */
                    }
                    ElseIf ((CUPN == 0x06))
                    {
                        Return (PKG2) /* \_SB_.PC00.XHCI.RHUB.VGPO.PKG2 */
                    }

                    Return (Package (0x00){})
                }

                If ((CVFT == One))
                {
                    Device (GPOT)
                    {
                        ADBG ("GPOT: Virtual GPIO Test Device Entry")
                        Name (_UID, "GPOT")  // _UID: Unique ID
                        Name (_HID, "GPTS0000")  // _HID: Hardware ID
                        Name (_CID, "GPTS0000")  // _CID: Compatible ID
                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (SBUF, ResourceTemplate ()
                            {
                                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionNone,
                                    "\\_SB.PC00.XHCI.RHUB.VGPO", 0x00, ResourceConsumer, ,
                                    )
                                    {   // Pin list
                                        0x0000
                                    }
                                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionNone,
                                    "\\_SB.PC00.XHCI.RHUB.VGPO", 0x00, ResourceConsumer, ,
                                    )
                                    {   // Pin list
                                        0x0001
                                    }
                                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionNone,
                                    "\\_SB.PC00.XHCI.RHUB.VGPO", 0x00, ResourceConsumer, ,
                                    )
                                    {   // Pin list
                                        0x0002
                                    }
                                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionNone,
                                    "\\_SB.PC00.XHCI.RHUB.VGPO", 0x00, ResourceConsumer, ,
                                    )
                                    {   // Pin list
                                        0x0003
                                    }
                                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionNone,
                                    "\\_SB.PC00.XHCI.RHUB.VGPO", 0x00, ResourceConsumer, ,
                                    )
                                    {   // Pin list
                                        0x0004
                                    }
                                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionNone,
                                    "\\_SB.PC00.XHCI.RHUB.VGPO", 0x00, ResourceConsumer, ,
                                    )
                                    {   // Pin list
                                        0x0005
                                    }
                                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionNone,
                                    "\\_SB.PC00.XHCI.RHUB.VGPO", 0x00, ResourceConsumer, ,
                                    )
                                    {   // Pin list
                                        0x0006
                                    }
                                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionNone,
                                    "\\_SB.PC00.XHCI.RHUB.VGPO", 0x00, ResourceConsumer, ,
                                    )
                                    {   // Pin list
                                        0x0007
                                    }
                                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionNone,
                                    "\\_SB.PC00.XHCI.RHUB.VGPO", 0x00, ResourceConsumer, ,
                                    )
                                    {   // Pin list
                                        0x0008
                                    }
                                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionNone,
                                    "\\_SB.PC00.XHCI.RHUB.VGPO", 0x00, ResourceConsumer, ,
                                    )
                                    {   // Pin list
                                        0x0009
                                    }
                                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionNone,
                                    "\\_SB.PC00.XHCI.RHUB.VGPO", 0x00, ResourceConsumer, ,
                                    )
                                    {   // Pin list
                                        0x000A
                                    }
                                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionNone,
                                    "\\_SB.PC00.XHCI.RHUB.VGPO", 0x00, ResourceConsumer, ,
                                    )
                                    {   // Pin list
                                        0x000B
                                    }
                            })
                            Return (SBUF) /* \_SB_.PC00.XHCI.RHUB.VGPO.GPOT._CRS.SBUF */
                        }
                    }
                }
            }

            Device (VIC0)
            {
                ADBG ("VIC0: Virtual I2C Device Entry")
                Name (_UID, "VIC0")  // _UID: Unique ID
                Name (_DDN, "Intel UsbI2C Device")  // _DDN: DOS Device Name
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return ("INTC10D2")
                }

                Name (PKG1, Package (0x01)
                {
                    "\\_SB.PC00.XHCI.RHUB.HS04"
                })
                Name (PKG2, Package (0x01)
                {
                    "\\_SB.PC00.XHCI.RHUB.HS06"
                })
                Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
                {
                    If ((CUPN == 0x04))
                    {
                        Return (PKG1) /* \_SB_.PC00.XHCI.RHUB.VIC0.PKG1 */
                    }
                    ElseIf ((CUPN == 0x06))
                    {
                        Return (PKG2) /* \_SB_.PC00.XHCI.RHUB.VIC0.PKG2 */
                    }

                    Return (Package (0x00){})
                }

                If ((CVFT == 0x02))
                {
                    Device (IICT)
                    {
                        ADBG ("IICT: Virtual I2C Test device Entry")
                        Name (_UID, "IICT")  // _UID: Unique ID
                        Name (_HID, "IIC0001")  // _HID: Hardware ID
                        Name (_CID, "IIC0001")  // _CID: Compatible ID
                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            ADBG ("IICT returning VIC0")
                            Return (VIIC (0x7F, Zero))
                        }
                    }
                }
            }

            Device (VIC1)
            {
                ADBG ("VIC1: Virtual I2C Device Entry")
                Name (_UID, "VIC1")  // _UID: Unique ID
                Name (_DDN, "Intel UsbI2C Device")  // _DDN: DOS Device Name
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return ("INTC10D2")
                }

                Name (PKG1, Package (0x01)
                {
                    "\\_SB.PC00.XHCI.RHUB.HS04"
                })
                Name (PKG2, Package (0x01)
                {
                    "\\_SB.PC00.XHCI.RHUB.HS06"
                })
                Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
                {
                    If ((CUPN == 0x04))
                    {
                        Return (PKG1) /* \_SB_.PC00.XHCI.RHUB.VIC1.PKG1 */
                    }
                    ElseIf ((CUPN == 0x06))
                    {
                        Return (PKG2) /* \_SB_.PC00.XHCI.RHUB.VIC1.PKG2 */
                    }

                    Return (Package (0x00){})
                }

                If ((CVFT == 0x02))
                {
                    Device (IICT)
                    {
                        ADBG ("IICT: Virtual I2C Test device Entry")
                        Name (_UID, "IICT")  // _UID: Unique ID
                        Name (_HID, "IIC0001")  // _HID: Hardware ID
                        Name (_CID, "IIC0001")  // _CID: Compatible ID
                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            ADBG ("IICT returning VIC1")
                            Return (VIIC (0x7F, One))
                        }
                    }
                }
            }

            Device (VSPI)
            {
                ADBG ("VSPI: Virtual SPI Device Entry")
                Name (_UID, "VSPI")  // _UID: Unique ID
                Name (_DDN, "Intel UsbSPI Device")  // _DDN: DOS Device Name
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return ("INTC10D3")
                }

                Name (PKG1, Package (0x01)
                {
                    "\\_SB.PC00.XHCI.RHUB.HS04"
                })
                Name (PKG2, Package (0x01)
                {
                    "\\_SB.PC00.XHCI.RHUB.HS06"
                })
                Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
                {
                    If ((CUPN == 0x04))
                    {
                        Return (PKG1) /* \_SB_.PC00.XHCI.RHUB.VSPI.PKG1 */
                    }
                    ElseIf ((CUPN == 0x06))
                    {
                        Return (PKG2) /* \_SB_.PC00.XHCI.RHUB.VSPI.PKG2 */
                    }

                    Return (Package (0x00){})
                }

                If ((CVFT == 0x03))
                {
                    Device (SPIT)
                    {
                        ADBG ("SPIT: Virtual SPI Test device Entry")
                        Name (_UID, "SPIT")  // _UID: Unique ID
                        Name (_HID, "VSPI0001")  // _HID: Hardware ID
                        Name (_CID, "VSPI0001")  // _CID: Compatible ID
                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (XBUF, ResourceTemplate ()
                            {
                                SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                                    ControllerInitiated, 0x00D59F80, ClockPolarityHigh,
                                    ClockPhaseSecond, "\\_SB.PC00.XHCI.RHUB.VSPI",
                                    0x00, ResourceConsumer, , Exclusive,
                                    )
                            })
                            Return (XBUF) /* \_SB_.PC00.XHCI.RHUB.VSPI.SPIT._CRS.XBUF */
                        }
                    }
                }
            }
        }
    }

    If ((LP5E == One))
    {
        Scope (_SB)
        {
            Device (LP5X)
            {
                Name (_HID, "INTC10B9")  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                If (ARLP)
                {
                    _HID = "INTC10BA"
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((LP5E == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2Cx",
                            0x00, ResourceConsumer, _Y87, Exclusive,
                            )
                    })
                    CreateByteField (RBUF, 0x1F, CNST)
                    CreateWordField (RBUF, \_SB.LP5X._CRS._Y87._ADR, SLAD)  // _ADR: Address
                    CNST = CLCN /* \CLCN */
                    SLAD = CLSA /* \CLSA */
                    Return (RBUF) /* \_SB_.LP5X._CRS.RBUF */
                }
            }
        }
    }

    If ((VMDE == One))
    {
        Name (VDSD, One)
        If ((STD3 == Zero))
        {
            VDSD = Zero
        }

        ADBG (Concatenate ("VMD _DSD Method option:", ToHexString (VDSD)))
        Scope (_SB.PC00)
        {
            Device (VMD0)
            {
                Name (_ADR, 0x000E0000)  // _ADR: Address
                If (CondRefOf (\VDSD))
                {
                    If ((VDSD == One))
                    {
                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "StorageD3Enable", 
                                    One
                                }
                            }
                        })
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG ("VMD _PS0")
                    If (CondRefOf (VMS0))
                    {
                        If ((VMS0 != Zero))
                        {
                            ADBG ("VMD SATA0 Ctrlr D0 - Clear LTR ignore bit for SATA")
                            ISAT = Zero
                            ADBG (Concatenate ("LTR ignore bit status = ", ToHexString (ISAT)))
                        }
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG ("VMD _PS3")
                    If (CondRefOf (VMS0))
                    {
                        If ((VMS0 != Zero))
                        {
                            ADBG ("VMD SATA0 Ctrlr D3 - Set LTR ignore bit for SATA")
                            ISAT = One
                            ADBG (Concatenate ("LTR ignore bit status", ToHexString (ISAT)))
                        }
                    }
                }

                Method (CBAR, 3, Serialized)
                {
                    Name (VCFB, Zero)
                    VCFB = XBAS /* \XBAS */
                    VCFB |= Zero
                    VCFB |= 0x00070000
                    VCFB |= Zero
                    OperationRegion (VCFG, SystemMemory, VCFB, 0x0100)
                    Field (VCFG, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x10), 
                        BAR0,   64
                    }

                    Name (DCFB, Zero)
                    DCFB = BAR0 /* \_SB_.PC00.VMD0.CBAR.BAR0 */
                    DCFB &= 0xFFFFFFFFFFFFFFF0
                    DCFB |= (Arg0 << 0x14)
                    DCFB |= (Arg1 << 0x0F)
                    DCFB |= (Arg2 << 0x0C)
                    Return (DCFB) /* \_SB_.PC00.VMD0.CBAR.DCFB */
                }

                Device (SP01)
                {
                    Name (RPB, Zero)
                    Name (RPD, 0x1C)
                    Name (RPF, Zero)
                    Name (RSPT, One)
                    Name (RSPI, Zero)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x80E0FFFF)
                    }

                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        ADBG (Concatenate ("VR3D: ", ToHexString (_ADR ())))
                        Return (VD3C (_ADR ()))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (RPB, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                ADBG (Concatenate ("VPON return as VDID=", ToHexString (VDID)))
                                ADBG ("WAK Notify 0 to VMD controller")
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        ADBG (Concatenate ("VPON VDID=", ToHexString (VDID)))
                                        Break
                                    }

                                    ADBG ("Wait 10 ms for VMD controller to exit D3hot")
                                    Sleep (0x0A)
                                }
                            }
                        }

                        ADBG (Concatenate ("VPONs: ", ToHexString (_ADR ())))
                        If ((ID3C == Zero))
                        {
                            ADBG ("VPON: Device is not in D3Cold")
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        ADBG (Concatenate ("VPOFs: ", ToHexString (_ADR ())))
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD POF L23E TO", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                        ADBG (Concatenate ("VMD POF L23E TO ", ToHexString (_ADR ())))
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            ADBG (Concatenate ("VMD PON- Sticky bit is not set to 1 to: ", ToHexString (_ADR ())))
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD PCIE L23R TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                ADBG (Concatenate ("VMD PCIE LASX TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (SP02)
                {
                    Name (RPB, Zero)
                    Name (RPD, 0x1C)
                    Name (RPF, One)
                    Name (RSPT, One)
                    Name (RSPI, One)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x80E1FFFF)
                    }

                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        ADBG (Concatenate ("VR3D: ", ToHexString (_ADR ())))
                        Return (VD3C (_ADR ()))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (RPB, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                ADBG (Concatenate ("VPON return as VDID=", ToHexString (VDID)))
                                ADBG ("WAK Notify 0 to VMD controller")
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        ADBG (Concatenate ("VPON VDID=", ToHexString (VDID)))
                                        Break
                                    }

                                    ADBG ("Wait 10 ms for VMD controller to exit D3hot")
                                    Sleep (0x0A)
                                }
                            }
                        }

                        ADBG (Concatenate ("VPONs: ", ToHexString (_ADR ())))
                        If ((ID3C == Zero))
                        {
                            ADBG ("VPON: Device is not in D3Cold")
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        ADBG (Concatenate ("VPOFs: ", ToHexString (_ADR ())))
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD POF L23E TO", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                        ADBG (Concatenate ("VMD POF L23E TO ", ToHexString (_ADR ())))
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            ADBG (Concatenate ("VMD PON- Sticky bit is not set to 1 to: ", ToHexString (_ADR ())))
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD PCIE L23R TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                ADBG (Concatenate ("VMD PCIE LASX TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (SP03)
                {
                    Name (RPB, Zero)
                    Name (RPD, 0x1C)
                    Name (RPF, 0x02)
                    Name (RSPT, One)
                    Name (RSPI, 0x02)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x80E2FFFF)
                    }

                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        ADBG (Concatenate ("VR3D: ", ToHexString (_ADR ())))
                        Return (VD3C (_ADR ()))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (RPB, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                ADBG (Concatenate ("VPON return as VDID=", ToHexString (VDID)))
                                ADBG ("WAK Notify 0 to VMD controller")
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        ADBG (Concatenate ("VPON VDID=", ToHexString (VDID)))
                                        Break
                                    }

                                    ADBG ("Wait 10 ms for VMD controller to exit D3hot")
                                    Sleep (0x0A)
                                }
                            }
                        }

                        ADBG (Concatenate ("VPONs: ", ToHexString (_ADR ())))
                        If ((ID3C == Zero))
                        {
                            ADBG ("VPON: Device is not in D3Cold")
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        ADBG (Concatenate ("VPOFs: ", ToHexString (_ADR ())))
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD POF L23E TO", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                        ADBG (Concatenate ("VMD POF L23E TO ", ToHexString (_ADR ())))
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            ADBG (Concatenate ("VMD PON- Sticky bit is not set to 1 to: ", ToHexString (_ADR ())))
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD PCIE L23R TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                ADBG (Concatenate ("VMD PCIE LASX TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (SP04)
                {
                    Name (RPB, Zero)
                    Name (RPD, 0x1C)
                    Name (RPF, 0x03)
                    Name (RSPT, One)
                    Name (RSPI, 0x03)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x80E3FFFF)
                    }

                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        ADBG (Concatenate ("VR3D: ", ToHexString (_ADR ())))
                        Return (VD3C (_ADR ()))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (RPB, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                ADBG (Concatenate ("VPON return as VDID=", ToHexString (VDID)))
                                ADBG ("WAK Notify 0 to VMD controller")
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        ADBG (Concatenate ("VPON VDID=", ToHexString (VDID)))
                                        Break
                                    }

                                    ADBG ("Wait 10 ms for VMD controller to exit D3hot")
                                    Sleep (0x0A)
                                }
                            }
                        }

                        ADBG (Concatenate ("VPONs: ", ToHexString (_ADR ())))
                        If ((ID3C == Zero))
                        {
                            ADBG ("VPON: Device is not in D3Cold")
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        ADBG (Concatenate ("VPOFs: ", ToHexString (_ADR ())))
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD POF L23E TO", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                        ADBG (Concatenate ("VMD POF L23E TO ", ToHexString (_ADR ())))
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            ADBG (Concatenate ("VMD PON- Sticky bit is not set to 1 to: ", ToHexString (_ADR ())))
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD PCIE L23R TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                ADBG (Concatenate ("VMD PCIE LASX TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (SP05)
                {
                    Name (RPB, Zero)
                    Name (RPD, 0x1C)
                    Name (RPF, 0x04)
                    Name (RSPT, One)
                    Name (RSPI, 0x04)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x80E4FFFF)
                    }

                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        ADBG (Concatenate ("VR3D: ", ToHexString (_ADR ())))
                        Return (VD3C (_ADR ()))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (RPB, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                ADBG (Concatenate ("VPON return as VDID=", ToHexString (VDID)))
                                ADBG ("WAK Notify 0 to VMD controller")
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        ADBG (Concatenate ("VPON VDID=", ToHexString (VDID)))
                                        Break
                                    }

                                    ADBG ("Wait 10 ms for VMD controller to exit D3hot")
                                    Sleep (0x0A)
                                }
                            }
                        }

                        ADBG (Concatenate ("VPONs: ", ToHexString (_ADR ())))
                        If ((ID3C == Zero))
                        {
                            ADBG ("VPON: Device is not in D3Cold")
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        ADBG (Concatenate ("VPOFs: ", ToHexString (_ADR ())))
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD POF L23E TO", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                        ADBG (Concatenate ("VMD POF L23E TO ", ToHexString (_ADR ())))
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            ADBG (Concatenate ("VMD PON- Sticky bit is not set to 1 to: ", ToHexString (_ADR ())))
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD PCIE L23R TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                ADBG (Concatenate ("VMD PCIE LASX TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (SP06)
                {
                    Name (RPB, Zero)
                    Name (RPD, 0x1C)
                    Name (RPF, 0x05)
                    Name (RSPT, One)
                    Name (RSPI, 0x05)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x80E5FFFF)
                    }

                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        ADBG (Concatenate ("VR3D: ", ToHexString (_ADR ())))
                        Return (VD3C (_ADR ()))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (RPB, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                ADBG (Concatenate ("VPON return as VDID=", ToHexString (VDID)))
                                ADBG ("WAK Notify 0 to VMD controller")
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        ADBG (Concatenate ("VPON VDID=", ToHexString (VDID)))
                                        Break
                                    }

                                    ADBG ("Wait 10 ms for VMD controller to exit D3hot")
                                    Sleep (0x0A)
                                }
                            }
                        }

                        ADBG (Concatenate ("VPONs: ", ToHexString (_ADR ())))
                        If ((ID3C == Zero))
                        {
                            ADBG ("VPON: Device is not in D3Cold")
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        ADBG (Concatenate ("VPOFs: ", ToHexString (_ADR ())))
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD POF L23E TO", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                        ADBG (Concatenate ("VMD POF L23E TO ", ToHexString (_ADR ())))
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            ADBG (Concatenate ("VMD PON- Sticky bit is not set to 1 to: ", ToHexString (_ADR ())))
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD PCIE L23R TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                ADBG (Concatenate ("VMD PCIE LASX TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (SP07)
                {
                    Name (RPB, Zero)
                    Name (RPD, 0x1C)
                    Name (RPF, 0x06)
                    Name (RSPT, One)
                    Name (RSPI, 0x06)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x80E6FFFF)
                    }

                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        ADBG (Concatenate ("VR3D: ", ToHexString (_ADR ())))
                        Return (VD3C (_ADR ()))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (RPB, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                ADBG (Concatenate ("VPON return as VDID=", ToHexString (VDID)))
                                ADBG ("WAK Notify 0 to VMD controller")
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        ADBG (Concatenate ("VPON VDID=", ToHexString (VDID)))
                                        Break
                                    }

                                    ADBG ("Wait 10 ms for VMD controller to exit D3hot")
                                    Sleep (0x0A)
                                }
                            }
                        }

                        ADBG (Concatenate ("VPONs: ", ToHexString (_ADR ())))
                        If ((ID3C == Zero))
                        {
                            ADBG ("VPON: Device is not in D3Cold")
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        ADBG (Concatenate ("VPOFs: ", ToHexString (_ADR ())))
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD POF L23E TO", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                        ADBG (Concatenate ("VMD POF L23E TO ", ToHexString (_ADR ())))
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            ADBG (Concatenate ("VMD PON- Sticky bit is not set to 1 to: ", ToHexString (_ADR ())))
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD PCIE L23R TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                ADBG (Concatenate ("VMD PCIE LASX TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (SP08)
                {
                    Name (RPB, Zero)
                    Name (RPD, 0x1C)
                    Name (RPF, 0x07)
                    Name (RSPT, One)
                    Name (RSPI, 0x07)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x80E7FFFF)
                    }

                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        ADBG (Concatenate ("VR3D: ", ToHexString (_ADR ())))
                        Return (VD3C (_ADR ()))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (RPB, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                ADBG (Concatenate ("VPON return as VDID=", ToHexString (VDID)))
                                ADBG ("WAK Notify 0 to VMD controller")
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        ADBG (Concatenate ("VPON VDID=", ToHexString (VDID)))
                                        Break
                                    }

                                    ADBG ("Wait 10 ms for VMD controller to exit D3hot")
                                    Sleep (0x0A)
                                }
                            }
                        }

                        ADBG (Concatenate ("VPONs: ", ToHexString (_ADR ())))
                        If ((ID3C == Zero))
                        {
                            ADBG ("VPON: Device is not in D3Cold")
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        ADBG (Concatenate ("VPOFs: ", ToHexString (_ADR ())))
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD POF L23E TO", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                        ADBG (Concatenate ("VMD POF L23E TO ", ToHexString (_ADR ())))
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            ADBG (Concatenate ("VMD PON- Sticky bit is not set to 1 to: ", ToHexString (_ADR ())))
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD PCIE L23R TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                ADBG (Concatenate ("VMD PCIE LASX TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (SP09)
                {
                    Name (RPB, Zero)
                    Name (RPD, 0x06)
                    Name (RPF, Zero)
                    Name (RSPT, One)
                    Name (RSPI, 0x08)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x8030FFFF)
                    }

                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        ADBG (Concatenate ("VR3D: ", ToHexString (_ADR ())))
                        Return (VD3C (_ADR ()))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (RPB, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                ADBG (Concatenate ("VPON return as VDID=", ToHexString (VDID)))
                                ADBG ("WAK Notify 0 to VMD controller")
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        ADBG (Concatenate ("VPON VDID=", ToHexString (VDID)))
                                        Break
                                    }

                                    ADBG ("Wait 10 ms for VMD controller to exit D3hot")
                                    Sleep (0x0A)
                                }
                            }
                        }

                        ADBG (Concatenate ("VPONs: ", ToHexString (_ADR ())))
                        If ((ID3C == Zero))
                        {
                            ADBG ("VPON: Device is not in D3Cold")
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        ADBG (Concatenate ("VPOFs: ", ToHexString (_ADR ())))
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD POF L23E TO", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                        ADBG (Concatenate ("VMD POF L23E TO ", ToHexString (_ADR ())))
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            ADBG (Concatenate ("VMD PON- Sticky bit is not set to 1 to: ", ToHexString (_ADR ())))
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD PCIE L23R TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                ADBG (Concatenate ("VMD PCIE LASX TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (SP10)
                {
                    Name (RPB, Zero)
                    Name (RPD, 0x06)
                    Name (RPF, One)
                    Name (RSPT, One)
                    Name (RSPI, 0x09)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x8031FFFF)
                    }

                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        ADBG (Concatenate ("VR3D: ", ToHexString (_ADR ())))
                        Return (VD3C (_ADR ()))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (RPB, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                ADBG (Concatenate ("VPON return as VDID=", ToHexString (VDID)))
                                ADBG ("WAK Notify 0 to VMD controller")
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        ADBG (Concatenate ("VPON VDID=", ToHexString (VDID)))
                                        Break
                                    }

                                    ADBG ("Wait 10 ms for VMD controller to exit D3hot")
                                    Sleep (0x0A)
                                }
                            }
                        }

                        ADBG (Concatenate ("VPONs: ", ToHexString (_ADR ())))
                        If ((ID3C == Zero))
                        {
                            ADBG ("VPON: Device is not in D3Cold")
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        ADBG (Concatenate ("VPOFs: ", ToHexString (_ADR ())))
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD POF L23E TO", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                        ADBG (Concatenate ("VMD POF L23E TO ", ToHexString (_ADR ())))
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            ADBG (Concatenate ("VMD PON- Sticky bit is not set to 1 to: ", ToHexString (_ADR ())))
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD PCIE L23R TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                ADBG (Concatenate ("VMD PCIE LASX TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (SP11)
                {
                    Name (RPB, Zero)
                    Name (RPD, 0x06)
                    Name (RPF, 0x02)
                    Name (RSPT, One)
                    Name (RSPI, 0x0A)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x8032FFFF)
                    }

                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        ADBG (Concatenate ("VR3D: ", ToHexString (_ADR ())))
                        Return (VD3C (_ADR ()))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (RPB, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                ADBG (Concatenate ("VPON return as VDID=", ToHexString (VDID)))
                                ADBG ("WAK Notify 0 to VMD controller")
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        ADBG (Concatenate ("VPON VDID=", ToHexString (VDID)))
                                        Break
                                    }

                                    ADBG ("Wait 10 ms for VMD controller to exit D3hot")
                                    Sleep (0x0A)
                                }
                            }
                        }

                        ADBG (Concatenate ("VPONs: ", ToHexString (_ADR ())))
                        If ((ID3C == Zero))
                        {
                            ADBG ("VPON: Device is not in D3Cold")
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        ADBG (Concatenate ("VPOFs: ", ToHexString (_ADR ())))
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD POF L23E TO", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                        ADBG (Concatenate ("VMD POF L23E TO ", ToHexString (_ADR ())))
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            ADBG (Concatenate ("VMD PON- Sticky bit is not set to 1 to: ", ToHexString (_ADR ())))
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD PCIE L23R TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                ADBG (Concatenate ("VMD PCIE LASX TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (SP12)
                {
                    Name (RPB, Zero)
                    Name (RPD, One)
                    Name (RPF, Zero)
                    Name (RSPT, One)
                    Name (RSPI, 0x0B)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x8008FFFF)
                    }

                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        ADBG (Concatenate ("VR3D: ", ToHexString (_ADR ())))
                        Return (VD3C (_ADR ()))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (RPB, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                ADBG (Concatenate ("VPON return as VDID=", ToHexString (VDID)))
                                ADBG ("WAK Notify 0 to VMD controller")
                                Notify (^, Zero) // Bus Check
                                Local1 = 0xC8
                                While ((Local1 > Zero))
                                {
                                    Local1 = (Local1 - One)
                                    If ((VDID != 0xFFFFFFFF))
                                    {
                                        ADBG (Concatenate ("VPON VDID=", ToHexString (VDID)))
                                        Break
                                    }

                                    ADBG ("Wait 10 ms for VMD controller to exit D3hot")
                                    Sleep (0x0A)
                                }
                            }
                        }

                        ADBG (Concatenate ("VPONs: ", ToHexString (_ADR ())))
                        If ((ID3C == Zero))
                        {
                            ADBG ("VPON: Device is not in D3Cold")
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        ADBG (Concatenate ("VPOFs: ", ToHexString (_ADR ())))
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD POF L23E TO", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = One
                        ADBG (Concatenate ("VMD POF L23E TO ", ToHexString (_ADR ())))
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((SCB0 != One))
                        {
                            ADBG (Concatenate ("VMD PON- Sticky bit is not set to 1 to: ", ToHexString (_ADR ())))
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                ADBG (Concatenate ("VMD PCIE L23R TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        SCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                ADBG (Concatenate ("VMD PCIE LASX TO ", ToHexString (_ADR ())))
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (PRT0)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, Zero)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00B8FFF0)
                    }

                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        ADBG (Concatenate ("VS3D: ", ToHexString (_ADR ())))
                        Return (VD3C (_ADR ()))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        ADBG (Concatenate ("VSONs: ", ToHexString (_ADR ())))
                        If ((SD3C == Zero))
                        {
                            ADBG ("VMD RPON: no D3C")
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        ADBG (Concatenate ("VSOFs: ", ToHexString (_ADR ())))
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT1)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, One)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00B8FFF1)
                    }

                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        ADBG (Concatenate ("VS3D: ", ToHexString (_ADR ())))
                        Return (VD3C (_ADR ()))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        ADBG (Concatenate ("VSONs: ", ToHexString (_ADR ())))
                        If ((SD3C == Zero))
                        {
                            ADBG ("VMD RPON: no D3C")
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        ADBG (Concatenate ("VSOFs: ", ToHexString (_ADR ())))
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT2)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x02)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00B8FFF2)
                    }

                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        ADBG (Concatenate ("VS3D: ", ToHexString (_ADR ())))
                        Return (VD3C (_ADR ()))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        ADBG (Concatenate ("VSONs: ", ToHexString (_ADR ())))
                        If ((SD3C == Zero))
                        {
                            ADBG ("VMD RPON: no D3C")
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        ADBG (Concatenate ("VSOFs: ", ToHexString (_ADR ())))
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT3)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x03)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00B8FFF3)
                    }

                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        ADBG (Concatenate ("VS3D: ", ToHexString (_ADR ())))
                        Return (VD3C (_ADR ()))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        ADBG (Concatenate ("VSONs: ", ToHexString (_ADR ())))
                        If ((SD3C == Zero))
                        {
                            ADBG ("VMD RPON: no D3C")
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        ADBG (Concatenate ("VSOFs: ", ToHexString (_ADR ())))
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT4)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x04)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00B8FFF4)
                    }

                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        ADBG (Concatenate ("VS3D: ", ToHexString (_ADR ())))
                        Return (VD3C (_ADR ()))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        ADBG (Concatenate ("VSONs: ", ToHexString (_ADR ())))
                        If ((SD3C == Zero))
                        {
                            ADBG ("VMD RPON: no D3C")
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        ADBG (Concatenate ("VSOFs: ", ToHexString (_ADR ())))
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT5)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x05)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00B8FFF5)
                    }

                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        ADBG (Concatenate ("VS3D: ", ToHexString (_ADR ())))
                        Return (VD3C (_ADR ()))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        ADBG (Concatenate ("VSONs: ", ToHexString (_ADR ())))
                        If ((SD3C == Zero))
                        {
                            ADBG ("VMD RPON: no D3C")
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        ADBG (Concatenate ("VSOFs: ", ToHexString (_ADR ())))
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT6)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x06)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00B8FFF6)
                    }

                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        ADBG (Concatenate ("VS3D: ", ToHexString (_ADR ())))
                        Return (VD3C (_ADR ()))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        ADBG (Concatenate ("VSONs: ", ToHexString (_ADR ())))
                        If ((SD3C == Zero))
                        {
                            ADBG ("VMD RPON: no D3C")
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        ADBG (Concatenate ("VSOFs: ", ToHexString (_ADR ())))
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT7)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x07)
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x00B8FFF7)
                    }

                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        ADBG (Concatenate ("VS3D: ", ToHexString (_ADR ())))
                        Return (VD3C (_ADR ()))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        ADBG (Concatenate ("VSONs: ", ToHexString (_ADR ())))
                        If ((SD3C == Zero))
                        {
                            ADBG ("VMD RPON: no D3C")
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        ADBG (Concatenate ("VSOFs: ", ToHexString (_ADR ())))
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Name (VLVN, Zero)
                Name (VV0D, Package (0x20)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (VV1D, Package (0x20)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (VV2D, Package (0x20)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (VV3D, Package (0x20)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (VD3A, Zero)
                Name (VV0S, Zero)
                Name (VV1S, Zero)
                Name (VV2S, Zero)
                Name (VV3S, Zero)
                Method (SVRP, 3, NotSerialized)
                {
                    Local0 = (SizeOf (Arg0) - One)
                    ADBG (Concatenate ("Volume size is: ", Local0))
                    If ((Local0 > 0x20))
                    {
                        ADBG ("Volume size over 32")
                        Return (Zero)
                    }

                    Arg2 = Local0
                    Local1 = Zero
                    While ((Local1 < Local0))
                    {
                        Arg1 [Local1] = DerefOf (Arg0 [(Local1 + One)]
                            )
                        ADBG (Concatenate ("Adding to volume: ", ToHexString (DerefOf (Arg1 [Local1]))))
                        Local1++
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("9cd9cddd-8845-4afd-8392-31c4eb87cabd") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (RBUF, Buffer (One)
                                {
                                     0x00                                             // .
                                })
                                CreateByteField (RBUF, Zero, SFUN)
                                SFUN = 0x7F
                                Return (RBUF) /* \_SB_.PC00.VMD0._DSM.RBUF */
                            }
                            Case (One)
                            {
                                VLVN = ToInteger (DerefOf (Arg3 [Zero]))
                                ADBG (Concatenate ("Vol_Num:", ToHexString (VLVN)))
                                If ((VLVN == Zero))
                                {
                                    SVRP (Arg3, VV0D, RefOf (VV0S))
                                    Return (Zero)
                                }
                                ElseIf ((VLVN == One))
                                {
                                    SVRP (Arg3, VV1D, RefOf (VV1S))
                                    Return (Zero)
                                }
                                ElseIf ((VLVN == 0x02))
                                {
                                    SVRP (Arg3, VV2D, RefOf (VV2S))
                                    Return (Zero)
                                }
                                ElseIf ((VLVN == 0x03))
                                {
                                    SVRP (Arg3, VV3D, RefOf (VV3S))
                                    Return (Zero)
                                }
                                Else
                                {
                                    Return (One)
                                }
                            }
                            Case (0x02)
                            {
                                ADBG ("VMD Logical Volume _DSM.ON:")
                                Name (VVON, Package (0x20)
                                {
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                Local0 = SizeOf (Arg3)
                                Local1 = Zero
                                If ((Local0 <= 0x20))
                                {
                                    While ((Local1 < Local0))
                                    {
                                        VVON [Local1] = ToInteger (DerefOf (Arg3 [Local1]))
                                        ADBG (Concatenate ("ACPI Address of devices -", ToHexString (DerefOf (VVON [Local1]))))
                                        Local1++
                                    }

                                    VLON (Local0, VVON)
                                }

                                Return (Zero)
                            }
                            Case (0x03)
                            {
                                ADBG ("VMD Logical Volume _DSM.OFF:")
                                Name (VVOF, Package (0x20)
                                {
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                Local0 = SizeOf (Arg3)
                                Local1 = Zero
                                If ((Local0 <= 0x20))
                                {
                                    While ((Local1 < Local0))
                                    {
                                        VVOF [Local1] = ToInteger (DerefOf (Arg3 [Local1]))
                                        ADBG (Concatenate ("ACPI Address of devices -", ToHexString (DerefOf (VVOF [Local1]))))
                                        Local1++
                                    }

                                    VLOF (Local0, VVOF)
                                }

                                Return (Zero)
                            }
                            Case (0x04)
                            {
                                ADBG ("GET_RTD3_VOL_MASK unsupported by the driver")
                                Return (Zero)
                            }
                            Case (0x05)
                            {
                                VD3A = DerefOf (Arg3 [Zero])
                                ADBG (Concatenate ("VMD Logical Volume _DSM.D3A:", ToHexString (VD3A)))
                                Return (Zero)
                            }
                            Case (0x06)
                            {
                                If (CondRefOf (ZPPB))
                                {
                                    ADBG (Concatenate ("VMD Zpodd in port :", ToHexString (ZPPB)))
                                    Return (ZPPB) /* \ZPPB */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                            Default
                            {
                                Return (0x02)
                            }

                        }
                    }

                    Return (Zero)
                }

                Method (IVRM, 1, NotSerialized)
                {
                    Local0 = Zero
                    While ((VV0S > Local0))
                    {
                        If ((Arg0 == ToInteger (DerefOf (VV0D [Local0]))))
                        {
                            Return (One)
                        }

                        Local0++
                    }

                    Local0 = Zero
                    While ((VV1S > Local0))
                    {
                        If ((Arg0 == ToInteger (DerefOf (VV1D [Local0]))))
                        {
                            Return (One)
                        }

                        Local0++
                    }

                    Local0 = Zero
                    While ((VV2S > Local0))
                    {
                        If ((Arg0 == ToInteger (DerefOf (VV2D [Local0]))))
                        {
                            Return (One)
                        }

                        Local0++
                    }

                    Local0 = Zero
                    While ((VV3S > Local0))
                    {
                        If ((Arg0 == ToInteger (DerefOf (VV3D [Local0]))))
                        {
                            Return (One)
                        }

                        Local0++
                    }

                    Return (Zero)
                }

                Method (VD3C, 1, NotSerialized)
                {
                    Return ((VD3A && IVRM (Arg0)))
                }

                Method (D3CV, 2, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT0.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT1.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT2.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT3.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT4.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT5.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT6.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT7.SPOF))
                                    {
                                        Return (One)
                                    }
                                }

                            }
                        }
                        Case (One)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.RP01.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.RP02.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.RP03.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.RP04.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.RP05.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.RP06.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.RP07.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.RP08.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (\_SB.PC00.RP09.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (\_SB.PC00.RP10.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP11.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0D)
                                {
                                    If (CondRefOf (\_SB.PC00.RP12.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }

                    Return (Zero)
                }

                Method (VDON, 2, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT0.SPON))
                                    {
                                        ^^SAT0.PRT0.SPON ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT1.SPON))
                                    {
                                        ^^SAT0.PRT1.SPON ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT2.SPON))
                                    {
                                        ^^SAT0.PRT2.SPON ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT3.SPON))
                                    {
                                        ^^SAT0.PRT3.SPON ()
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT4.SPON))
                                    {
                                        ^^SAT0.PRT4.SPON ()
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT5.SPON))
                                    {
                                        ^^SAT0.PRT5.SPON ()
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT6.SPON))
                                    {
                                        ^^SAT0.PRT6.SPON ()
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT7.SPON))
                                    {
                                        ^^SAT0.PRT7.SPON ()
                                    }
                                }

                            }
                        }
                        Case (One)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.RP01.PON))
                                    {
                                        ^^RP01.PON ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.RP02.PON))
                                    {
                                        ^^RP02.PON ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.RP03.PON))
                                    {
                                        ^^RP03.PON ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.RP04.PON))
                                    {
                                        ^^RP04.PON ()
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.RP05.PON))
                                    {
                                        ^^RP05.PON ()
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.RP06.PON))
                                    {
                                        ^^RP06.PON ()
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.RP07.PON))
                                    {
                                        ^^RP07.PON ()
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.RP08.PON))
                                    {
                                        ^^RP08.PON ()
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (\_SB.PC00.RP09.PON))
                                    {
                                        ^^RP09.PON ()
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (\_SB.PC00.RP10.PON))
                                    {
                                        ^^RP10.PON ()
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP11.PON))
                                    {
                                        ^^RP11.PON ()
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (\_SB.PC00.RP12.PON))
                                    {
                                        ^^RP12.PON ()
                                    }
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }

                    Return (Zero)
                }

                Method (VDOF, 2, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT0.SPOF))
                                    {
                                        ^^SAT0.PRT0.SPOF ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT1.SPOF))
                                    {
                                        ^^SAT0.PRT1.SPOF ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT2.SPOF))
                                    {
                                        ^^SAT0.PRT2.SPOF ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT3.SPOF))
                                    {
                                        ^^SAT0.PRT3.SPOF ()
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT4.SPOF))
                                    {
                                        ^^SAT0.PRT4.SPOF ()
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT5.SPOF))
                                    {
                                        ^^SAT0.PRT5.SPOF ()
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT6.SPOF))
                                    {
                                        ^^SAT0.PRT6.SPOF ()
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT7.SPOF))
                                    {
                                        ^^SAT0.PRT7.SPOF ()
                                    }
                                }

                            }
                        }
                        Case (One)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.RP01.POFF))
                                    {
                                        ^^RP01.POFF ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.RP02.POFF))
                                    {
                                        ^^RP02.POFF ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.RP03.POFF))
                                    {
                                        ^^RP03.POFF ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.RP04.POFF))
                                    {
                                        ^^RP04.POFF ()
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.RP05.POFF))
                                    {
                                        ^^RP05.POFF ()
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.RP06.POFF))
                                    {
                                        ^^RP06.POFF ()
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.RP07.POFF))
                                    {
                                        ^^RP07.POFF ()
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.RP08.POFF))
                                    {
                                        ^^RP08.POFF ()
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (\_SB.PC00.RP09.POFF))
                                    {
                                        ^^RP09.POFF ()
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (\_SB.PC00.RP10.POFF))
                                    {
                                        ^^RP10.POFF ()
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP11.POFF))
                                    {
                                        ^^RP11.POFF ()
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (\_SB.PC00.RP12.POFF))
                                    {
                                        ^^RP12.POFF ()
                                    }
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }

                    Return (Zero)
                }

                Method (VLON, 2, Serialized)
                {
                    Name (DRVA, Zero)
                    Local1 = Arg0
                    Local0 = Zero
                    ADBG (Concatenate ("VLON: The size of the buffer:", ToHexString (Local1)))
                    While ((Local1 > Local0))
                    {
                        DRVA = ToInteger (DerefOf (Arg1 [Local0]))
                        Switch (ToInteger (DRVA))
                        {
                            Case (0x80E0FFFF)
                            {
                                ADBG ("VMD Logical volume - RP01")
                                ^SP01.VPON ()
                            }
                            Case (0x80E1FFFF)
                            {
                                ADBG ("VMD Logical volume - RP02")
                                ^SP02.VPON ()
                            }
                            Case (0x80E2FFFF)
                            {
                                ADBG ("VMD Logical volume - RP03")
                                ^SP03.VPON ()
                            }
                            Case (0x80E3FFFF)
                            {
                                ADBG ("VMD Logical volume - RP04")
                                ^SP04.VPON ()
                            }
                            Case (0x80E4FFFF)
                            {
                                ADBG ("VMD Logical volume - RP05")
                                ^SP05.VPON ()
                            }
                            Case (0x80E5FFFF)
                            {
                                ADBG ("VMD Logical volume - RP06")
                                ^SP06.VPON ()
                            }
                            Case (0x80E6FFFF)
                            {
                                ADBG ("VMD Logical volume - RP07")
                                ^SP07.VPON ()
                            }
                            Case (0x80E7FFFF)
                            {
                                ADBG ("VMD Logical volume - RP08")
                                ^SP08.VPON ()
                            }
                            Case (0x8030FFFF)
                            {
                                ADBG ("VMD Logical volume - RP09 0/6/0")
                                ^SP09.VPON ()
                            }
                            Case (0x8031FFFF)
                            {
                                ADBG ("VMD Logical volume - RP10 0/6/1")
                                ^SP10.VPON ()
                            }
                            Case (0x8032FFFF)
                            {
                                ADBG ("VMD Logical volume - RP11 0/6/2")
                                ^SP11.VPON ()
                            }
                            Case (0x8008FFFF)
                            {
                                ADBG ("VMD Logical volume - RP12 0/1/0")
                                ^SP12.VPON ()
                            }
                            Case (0x00B8FFF0)
                            {
                                ADBG ("VMD Logical volume - PRT0")
                                ^PRT0.VSON ()
                            }
                            Case (0x00B8FFF1)
                            {
                                ADBG ("VMD Logical volume - PRT1")
                                ^PRT1.VSON ()
                            }
                            Case (0x00B8FFF2)
                            {
                                ADBG ("VMD Logical volume - PRT2")
                                ^PRT2.VSON ()
                            }
                            Case (0x00B8FFF3)
                            {
                                ADBG ("VMD Logical volume - PRT3")
                                ^PRT3.VSON ()
                            }
                            Case (0x00B8FFF4)
                            {
                                ADBG ("VMD Logical volume - PRT4")
                                ^PRT4.VSON ()
                            }
                            Case (0x00B8FFF5)
                            {
                                ADBG ("VMD Logical volume - PRT5")
                                ^PRT5.VSON ()
                            }
                            Case (0x00B8FFF6)
                            {
                                ADBG ("VMD Logical volume - PRT6")
                                ^PRT6.VSON ()
                            }
                            Case (0x00B8FFF7)
                            {
                                ADBG ("VMD Logical volume - PRT7")
                                ^PRT7.VSON ()
                            }

                        }

                        Local0++
                    }
                }

                Method (VLOF, 2, Serialized)
                {
                    Name (DRVA, Zero)
                    Local1 = Arg0
                    Local0 = Zero
                    ADBG (Concatenate ("VLOF: The size of the Pkg:", ToHexString (Local1)))
                    While ((Local1 > Local0))
                    {
                        DRVA = ToInteger (DerefOf (Arg1 [Local0]))
                        Switch (ToInteger (DRVA))
                        {
                            Case (0x80E0FFFF)
                            {
                                ADBG ("VMD Logical volume - RP01")
                                ^SP01.VPOF ()
                            }
                            Case (0x80E1FFFF)
                            {
                                ADBG ("VMD Logical volume - RP02")
                                ^SP02.VPOF ()
                            }
                            Case (0x80E2FFFF)
                            {
                                ADBG ("VMD Logical volume - RP03")
                                ^SP03.VPOF ()
                            }
                            Case (0x80E3FFFF)
                            {
                                ADBG ("VMD Logical volume - RP04")
                                ^SP04.VPOF ()
                            }
                            Case (0x80E4FFFF)
                            {
                                ADBG ("VMD Logical volume - RP05")
                                ^SP05.VPOF ()
                            }
                            Case (0x80E5FFFF)
                            {
                                ADBG ("VMD Logical volume - RP06")
                                ^SP06.VPOF ()
                            }
                            Case (0x80E6FFFF)
                            {
                                ADBG ("VMD Logical volume - RP07")
                                ^SP07.VPOF ()
                            }
                            Case (0x80E7FFFF)
                            {
                                ADBG ("VMD Logical volume - RP08")
                                ^SP08.VPOF ()
                            }
                            Case (0x8030FFFF)
                            {
                                ADBG ("VMD Logical volume - RP09 0/6/0")
                                ^SP09.VPOF ()
                            }
                            Case (0x8031FFFF)
                            {
                                ADBG ("VMD Logical volume - RP10 0/6/1")
                                ^SP10.VPOF ()
                            }
                            Case (0x8032FFFF)
                            {
                                ADBG ("VMD Logical volume - RP11 0/6/2")
                                ^SP11.VPOF ()
                            }
                            Case (0x8008FFFF)
                            {
                                ADBG ("VMD Logical volume - RP12 0/1/0")
                                ^SP12.VPOF ()
                            }
                            Case (0x00B8FFF0)
                            {
                                ADBG ("VMD Logical volume - PRT0")
                                ^PRT0.VSOF ()
                            }
                            Case (0x00B8FFF1)
                            {
                                ADBG ("VMD Logical volume - PRT1")
                                ^PRT1.VSOF ()
                            }
                            Case (0x00B8FFF2)
                            {
                                ADBG ("VMD Logical volume - PRT2")
                                ^PRT2.VSOF ()
                            }
                            Case (0x00B8FFF3)
                            {
                                ADBG ("VMD Logical volume - PRT3")
                                ^PRT3.VSOF ()
                            }
                            Case (0x00B8FFF4)
                            {
                                ADBG ("VMD Logical volume - PRT4")
                                ^PRT4.VSOF ()
                            }
                            Case (0x00B8FFF5)
                            {
                                ADBG ("VMD Logical volume - PRT5")
                                ^PRT5.VSOF ()
                            }
                            Case (0x00B8FFF6)
                            {
                                ADBG ("VMD Logical volume - PRT6")
                                ^PRT6.VSOF ()
                            }
                            Case (0x00B8FFF7)
                            {
                                ADBG ("VMD Logical volume - PRT7")
                                ^PRT7.VSOF ()
                            }

                        }

                        Local0++
                    }
                }
            }
        }
    }

    Scope (_SB.PC00.RP01)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((P1WG != Zero) && (P1RN == One)))
            {
                Return (GPRW (GGPE (P1WG), 0x04))
            }
            Else
            {
                Return (GPRW (0xC0, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP02)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0xC0, 0x04))
        }
    }

    Scope (_SB.PC00.RP03)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((WLWK != Zero) && (WLRP == 0x03)))
            {
                Return (GPRW (GGPE (WLWK), 0x04))
            }
            Else
            {
                Return (GPRW (0xC0, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP04)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0xC0, 0x04))
        }
    }

    Scope (_SB.PC00.RP05)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((P2WG != Zero) && (P2RN == 0x05)))
            {
                Return (GPRW (GGPE (P2WG), 0x04))
            }
            Else
            {
                Return (GPRW (0xC1, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP06)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((P2WG != Zero) && (P2RN == 0x06)))
            {
                Return (GPRW (GGPE (P2WG), 0x04))
            }
            ElseIf (((P3WG != Zero) && (P3RN == 0x06)))
            {
                Return (GPRW (GGPE (P3WG), 0x04))
            }
            Else
            {
                Return (GPRW (0xC1, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP07)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((WWKP != Zero) && (WWRP == 0x07)))
            {
                Return (GPRW (GGPE (WWKP), 0x04))
            }
            Else
            {
                Return (GPRW (0xC1, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP08)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((WLWK != Zero) && (WLRP == 0x08)))
            {
                Return (GPRW (GGPE (WLWK), 0x04))
            }
            Else
            {
                Return (GPRW (0xC1, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP09)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((WWKP != Zero) && (WWRP == 0x09)))
            {
                Return (GPRW (GGPE (WWKP), 0x04))
            }
            ElseIf (((P3WG != Zero) && (P3RN == 0x09)))
            {
                Return (GPRW (GGPE (P3WG), 0x04))
            }
            Else
            {
                Return (GPRW (0xC2, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP10)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((P2WG != Zero) && (P2RN == 0x0A)))
            {
                Return (GPRW (GGPE (P2WG), 0x04))
            }
            ElseIf (((P5WG != Zero) && (P5RN == 0x0D)))
            {
                Return (GPRW (GGPE (P5WG), 0x04))
            }
            Else
            {
                Return (GPRW (0xC7, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP11)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((P3WG != Zero) && (P3RN == 0x0B)))
            {
                Return (GPRW (GGPE (P3WG), 0x04))
            }
            ElseIf (((P6WG != Zero) && (P6RN == 0x11)))
            {
                Return (GPRW (GGPE (P6WG), 0x04))
            }
            Else
            {
                Return (GPRW (0xC7, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP12)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (((P3WG != Zero) && (P3RN == 0x15)))
            {
                Return (GPRW (GGPE (P3WG), 0x04))
            }
            ElseIf (((P4WG != Zero) && (P4RN == 0x15)))
            {
                Return (GPRW (GGPE (P4WG), 0x04))
            }
            ElseIf (((P4WG != Zero) && (P4RN == 0x0C)))
            {
                Return (GPRW (GGPE (P4WG), 0x04))
            }
            ElseIf (((P7WG != Zero) && (P7RN == 0x15)))
            {
                Return (GPRW (GGPE (P7WG), 0x04))
            }
            Else
            {
                Return (GPRW (0xC7, 0x04))
            }
        }
    }

    If ((PCHA == Zero))
    {
        Scope (_SB.PC00.SAT0)
        {
            Method (SATC, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("e4db149b-fcfe-425b-a6d8-92357d78fc7f") /* SATA Controller */))
                {
                    ADBG ("Win Sata DSM UUID : E4DB149B-FCFE-425b-A6D8-92357D78FC7F")
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (SATD, 4, Serialized)
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        ADBG ("Win Sata DSM fun 0")
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            If (((S0ID == One) && (PUIS == One)))
            {
                Scope (PRT0)
                {
                    Name (GTF0, Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
                    })
                    Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                    {
                        CreateByteField (GTF0, Zero, FEAT)
                        CreateByteField (GTF0, 0x06, CMMD)
                        CreateWordField (Arg0, 0xA6, W083)
                        CreateWordField (Arg0, 0xAC, W086)
                        If ((SizeOf (Arg0) == 0x0200))
                        {
                            If (((W083 & 0x20) == 0x20))
                            {
                                If (((W086 & 0x20) == Zero))
                                {
                                    FEAT = 0x06
                                    CMMD = 0xEF
                                }
                            }
                        }
                    }

                    Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                    {
                        Return (GTF0) /* \_SB_.PC00.SAT0.PRT0.GTF0 */
                    }
                }

                Scope (PRT1)
                {
                    Name (GTF0, Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
                    })
                    Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                    {
                        CreateByteField (GTF0, Zero, FEAT)
                        CreateByteField (GTF0, 0x06, CMMD)
                        CreateWordField (Arg0, 0xA6, W083)
                        CreateWordField (Arg0, 0xAC, W086)
                        If ((SizeOf (Arg0) == 0x0200))
                        {
                            If (((W083 & 0x20) == 0x20))
                            {
                                If (((W086 & 0x20) == Zero))
                                {
                                    FEAT = 0x06
                                    CMMD = 0xEF
                                }
                            }
                        }
                    }

                    Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                    {
                        Return (GTF0) /* \_SB_.PC00.SAT0.PRT1.GTF0 */
                    }
                }

                Scope (PRT2)
                {
                    Name (GTF0, Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
                    })
                    Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                    {
                        CreateByteField (GTF0, Zero, FEAT)
                        CreateByteField (GTF0, 0x06, CMMD)
                        CreateWordField (Arg0, 0xA6, W083)
                        CreateWordField (Arg0, 0xAC, W086)
                        If ((SizeOf (Arg0) == 0x0200))
                        {
                            If (((W083 & 0x20) == 0x20))
                            {
                                If (((W086 & 0x20) == Zero))
                                {
                                    FEAT = 0x06
                                    CMMD = 0xEF
                                }
                            }
                        }
                    }

                    Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                    {
                        Return (GTF0) /* \_SB_.PC00.SAT0.PRT2.GTF0 */
                    }
                }

                Scope (PRT3)
                {
                    Name (GTF0, Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
                    })
                    Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                    {
                        CreateByteField (GTF0, Zero, FEAT)
                        CreateByteField (GTF0, 0x06, CMMD)
                        CreateWordField (Arg0, 0xA6, W083)
                        CreateWordField (Arg0, 0xAC, W086)
                        If ((SizeOf (Arg0) == 0x0200))
                        {
                            If (((W083 & 0x20) == 0x20))
                            {
                                If (((W086 & 0x20) == Zero))
                                {
                                    FEAT = 0x06
                                    CMMD = 0xEF
                                }
                            }
                        }
                    }

                    Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                    {
                        Return (GTF0) /* \_SB_.PC00.SAT0.PRT3.GTF0 */
                    }
                }

                Scope (PRT4)
                {
                    Name (GTF0, Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
                    })
                    Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                    {
                        CreateByteField (GTF0, Zero, FEAT)
                        CreateByteField (GTF0, 0x06, CMMD)
                        CreateWordField (Arg0, 0xA6, W083)
                        CreateWordField (Arg0, 0xAC, W086)
                        If ((SizeOf (Arg0) == 0x0200))
                        {
                            If (((W083 & 0x20) == 0x20))
                            {
                                If (((W086 & 0x20) == Zero))
                                {
                                    FEAT = 0x06
                                    CMMD = 0xEF
                                }
                            }
                        }
                    }

                    Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                    {
                        Return (GTF0) /* \_SB_.PC00.SAT0.PRT4.GTF0 */
                    }
                }

                Scope (PRT5)
                {
                    Name (GTF0, Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
                    })
                    Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                    {
                        CreateByteField (GTF0, Zero, FEAT)
                        CreateByteField (GTF0, 0x06, CMMD)
                        CreateWordField (Arg0, 0xA6, W083)
                        CreateWordField (Arg0, 0xAC, W086)
                        If ((SizeOf (Arg0) == 0x0200))
                        {
                            If (((W083 & 0x20) == 0x20))
                            {
                                If (((W086 & 0x20) == Zero))
                                {
                                    FEAT = 0x06
                                    CMMD = 0xEF
                                }
                            }
                        }
                    }

                    Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                    {
                        Return (GTF0) /* \_SB_.PC00.SAT0.PRT5.GTF0 */
                    }
                }

                If (CondRefOf (PRT6))
                {
                    Scope (PRT6)
                    {
                        Name (GTF0, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
                        })
                        Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                        {
                            CreateByteField (GTF0, Zero, FEAT)
                            CreateByteField (GTF0, 0x06, CMMD)
                            CreateWordField (Arg0, 0xA6, W083)
                            CreateWordField (Arg0, 0xAC, W086)
                            If ((SizeOf (Arg0) == 0x0200))
                            {
                                If (((W083 & 0x20) == 0x20))
                                {
                                    If (((W086 & 0x20) == Zero))
                                    {
                                        FEAT = 0x06
                                        CMMD = 0xEF
                                    }
                                }
                            }
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (GTF0) /* \_SB_.PC00.SAT0.PRT6.GTF0 */
                        }
                    }
                }

                If (CondRefOf (PRT7))
                {
                    Scope (PRT7)
                    {
                        Name (GTF0, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
                        })
                        Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                        {
                            CreateByteField (GTF0, Zero, FEAT)
                            CreateByteField (GTF0, 0x06, CMMD)
                            CreateWordField (Arg0, 0xA6, W083)
                            CreateWordField (Arg0, 0xAC, W086)
                            If ((SizeOf (Arg0) == 0x0200))
                            {
                                If (((W083 & 0x20) == 0x20))
                                {
                                    If (((W086 & 0x20) == Zero))
                                    {
                                        FEAT = 0x06
                                        CMMD = 0xEF
                                    }
                                }
                            }
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Return (GTF0) /* \_SB_.PC00.SAT0.PRT7.GTF0 */
                        }
                    }
                }
            }
        }
    }

    If ((WFFD == One))
    {
        Scope (_SB)
        {
            Method (WFRT, 3, Serialized)
            {
                Local0 = Acquire (WWMT, 0x03E8)
                ADBG ("WWAN Flash Reset Mutex: Acquired Try Done")
                If ((Local0 == Zero))
                {
                    Local0 = One
                    If ((WWRP == One))
                    {
                        If ((Arg0 == Zero))
                        {
                            ADBG ("Start WWAN Warm Reset")
                        }
                        Else
                        {
                            ADBG ("Start WWAN Cold Reset")
                        }

                        If (CondRefOf (\_SB.PC00.RP01.PXSX.FHRF))
                        {
                            ^PC00.RP01.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        ADBG (Concatenate ("WFRT Delay1  ", ToDecimalString (Arg1)))
                        Notify (^PC00.RP01.PXSX, One) // Device Check
                        If (CondRefOf (\_SB.PC00.RP01.PXSX.SHRF))
                        {
                            ^PC00.RP01.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        ADBG (Concatenate ("WFRT Delay2  ", ToDecimalString (Arg2)))
                        Notify (^PC00.RP01.PXSX, One) // Device Check
                        ADBG ("End WWAN Warm Reset")
                        Release (WWMT)
                        Local0 = Zero
                        ADBG ("WWAN Warm Reset Mutex: Release Done")
                        If (CondRefOf (\_SB.PC00.RP01.PXSX.DOSV))
                        {
                            ^PC00.RP01.PXSX.DOSV ()
                        }
                    }

                    If ((WWRP == 0x02))
                    {
                        If ((Arg0 == Zero))
                        {
                            ADBG ("Start WWAN Warm Reset")
                        }
                        Else
                        {
                            ADBG ("Start WWAN Cold Reset")
                        }

                        If (CondRefOf (\_SB.PC00.RP02.PXSX.FHRF))
                        {
                            ^PC00.RP02.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        ADBG (Concatenate ("WFRT Delay1  ", ToDecimalString (Arg1)))
                        Notify (^PC00.RP02.PXSX, One) // Device Check
                        If (CondRefOf (\_SB.PC00.RP02.PXSX.SHRF))
                        {
                            ^PC00.RP02.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        ADBG (Concatenate ("WFRT Delay2  ", ToDecimalString (Arg2)))
                        Notify (^PC00.RP02.PXSX, One) // Device Check
                        ADBG ("End WWAN Warm Reset")
                        Release (WWMT)
                        Local0 = Zero
                        ADBG ("WWAN Warm Reset Mutex: Release Done")
                        If (CondRefOf (\_SB.PC00.RP02.PXSX.DOSV))
                        {
                            ^PC00.RP02.PXSX.DOSV ()
                        }
                    }

                    If ((WWRP == 0x03))
                    {
                        If ((Arg0 == Zero))
                        {
                            ADBG ("Start WWAN Warm Reset")
                        }
                        Else
                        {
                            ADBG ("Start WWAN Cold Reset")
                        }

                        If (CondRefOf (\_SB.PC00.RP03.PXSX.FHRF))
                        {
                            ^PC00.RP03.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        ADBG (Concatenate ("WFRT Delay1  ", ToDecimalString (Arg1)))
                        Notify (^PC00.RP03.PXSX, One) // Device Check
                        If (CondRefOf (\_SB.PC00.RP03.PXSX.SHRF))
                        {
                            ^PC00.RP03.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        ADBG (Concatenate ("WFRT Delay2  ", ToDecimalString (Arg2)))
                        Notify (^PC00.RP03.PXSX, One) // Device Check
                        ADBG ("End WWAN Warm Reset")
                        Release (WWMT)
                        Local0 = Zero
                        ADBG ("WWAN Warm Reset Mutex: Release Done")
                        If (CondRefOf (\_SB.PC00.RP03.PXSX.DOSV))
                        {
                            ^PC00.RP03.PXSX.DOSV ()
                        }
                    }

                    If ((WWRP == 0x04))
                    {
                        If ((Arg0 == Zero))
                        {
                            ADBG ("Start WWAN Warm Reset")
                        }
                        Else
                        {
                            ADBG ("Start WWAN Cold Reset")
                        }

                        If (CondRefOf (\_SB.PC00.RP04.PXSX.FHRF))
                        {
                            ^PC00.RP04.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        ADBG (Concatenate ("WFRT Delay1  ", ToDecimalString (Arg1)))
                        Notify (^PC00.RP04.PXSX, One) // Device Check
                        If (CondRefOf (\_SB.PC00.RP04.PXSX.SHRF))
                        {
                            ^PC00.RP04.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        ADBG (Concatenate ("WFRT Delay2  ", ToDecimalString (Arg2)))
                        Notify (^PC00.RP04.PXSX, One) // Device Check
                        ADBG ("End WWAN Warm Reset")
                        Release (WWMT)
                        Local0 = Zero
                        ADBG ("WWAN Warm Reset Mutex: Release Done")
                        If (CondRefOf (\_SB.PC00.RP04.PXSX.DOSV))
                        {
                            ^PC00.RP04.PXSX.DOSV ()
                        }
                    }

                    If ((WWRP == 0x05))
                    {
                        If ((Arg0 == Zero))
                        {
                            ADBG ("Start WWAN Warm Reset")
                        }
                        Else
                        {
                            ADBG ("Start WWAN Cold Reset")
                        }

                        If (CondRefOf (\_SB.PC00.RP05.PXSX.FHRF))
                        {
                            ^PC00.RP05.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        ADBG (Concatenate ("WFRT Delay1  ", ToDecimalString (Arg1)))
                        Notify (^PC00.RP05.PXSX, One) // Device Check
                        If (CondRefOf (\_SB.PC00.RP05.PXSX.SHRF))
                        {
                            ^PC00.RP05.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        ADBG (Concatenate ("WFRT Delay2  ", ToDecimalString (Arg2)))
                        Notify (^PC00.RP05.PXSX, One) // Device Check
                        ADBG ("End WWAN Warm Reset")
                        Release (WWMT)
                        Local0 = Zero
                        ADBG ("WWAN Warm Reset Mutex: Release Done")
                        If (CondRefOf (\_SB.PC00.RP05.PXSX.DOSV))
                        {
                            ^PC00.RP05.PXSX.DOSV ()
                        }
                    }

                    If ((WWRP == 0x06))
                    {
                        If ((Arg0 == Zero))
                        {
                            ADBG ("Start WWAN Warm Reset")
                        }
                        Else
                        {
                            ADBG ("Start WWAN Cold Reset")
                        }

                        If (CondRefOf (\_SB.PC00.RP06.PXSX.FHRF))
                        {
                            ^PC00.RP06.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        ADBG (Concatenate ("WFRT Delay1  ", ToDecimalString (Arg1)))
                        Notify (^PC00.RP06.PXSX, One) // Device Check
                        If (CondRefOf (\_SB.PC00.RP06.PXSX.SHRF))
                        {
                            ^PC00.RP06.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        ADBG (Concatenate ("WFRT Delay2  ", ToDecimalString (Arg2)))
                        Notify (^PC00.RP06.PXSX, One) // Device Check
                        ADBG ("End WWAN Warm Reset")
                        Release (WWMT)
                        Local0 = Zero
                        ADBG ("WWAN Warm Reset Mutex: Release Done")
                        If (CondRefOf (\_SB.PC00.RP06.PXSX.DOSV))
                        {
                            ^PC00.RP06.PXSX.DOSV ()
                        }
                    }

                    If ((WWRP == 0x07))
                    {
                        If ((Arg0 == Zero))
                        {
                            ADBG ("Start WWAN Warm Reset")
                        }
                        Else
                        {
                            ADBG ("Start WWAN Cold Reset")
                        }

                        If (CondRefOf (\_SB.PC00.RP07.PXSX.FHRF))
                        {
                            ^PC00.RP07.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        ADBG (Concatenate ("WFRT Delay1  ", ToDecimalString (Arg1)))
                        Notify (^PC00.RP07.PXSX, One) // Device Check
                        If (CondRefOf (\_SB.PC00.RP07.PXSX.SHRF))
                        {
                            ^PC00.RP07.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        ADBG (Concatenate ("WFRT Delay2  ", ToDecimalString (Arg2)))
                        Notify (^PC00.RP07.PXSX, One) // Device Check
                        ADBG ("End WWAN Warm Reset")
                        Release (WWMT)
                        Local0 = Zero
                        ADBG ("WWAN Warm Reset Mutex: Release Done")
                        If (CondRefOf (\_SB.PC00.RP07.PXSX.DOSV))
                        {
                            ^PC00.RP07.PXSX.DOSV ()
                        }
                    }

                    If ((WWRP == 0x08))
                    {
                        If ((Arg0 == Zero))
                        {
                            ADBG ("Start WWAN Warm Reset")
                        }
                        Else
                        {
                            ADBG ("Start WWAN Cold Reset")
                        }

                        If (CondRefOf (\_SB.PC00.RP08.PXSX.FHRF))
                        {
                            ^PC00.RP08.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        ADBG (Concatenate ("WFRT Delay1  ", ToDecimalString (Arg1)))
                        Notify (^PC00.RP08.PXSX, One) // Device Check
                        If (CondRefOf (\_SB.PC00.RP08.PXSX.SHRF))
                        {
                            ^PC00.RP08.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        ADBG (Concatenate ("WFRT Delay2  ", ToDecimalString (Arg2)))
                        Notify (^PC00.RP08.PXSX, One) // Device Check
                        ADBG ("End WWAN Warm Reset")
                        Release (WWMT)
                        Local0 = Zero
                        ADBG ("WWAN Warm Reset Mutex: Release Done")
                        If (CondRefOf (\_SB.PC00.RP08.PXSX.DOSV))
                        {
                            ^PC00.RP08.PXSX.DOSV ()
                        }
                    }

                    If ((WWRP == 0x09))
                    {
                        If ((Arg0 == Zero))
                        {
                            ADBG ("Start WWAN Warm Reset")
                        }
                        Else
                        {
                            ADBG ("Start WWAN Cold Reset")
                        }

                        If (CondRefOf (\_SB.PC00.RP09.PXSX.FHRF))
                        {
                            ^PC00.RP09.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        ADBG (Concatenate ("WFRT Delay1  ", ToDecimalString (Arg1)))
                        Notify (^PC00.RP09.PXSX, One) // Device Check
                        If (CondRefOf (\_SB.PC00.RP09.PXSX.SHRF))
                        {
                            ^PC00.RP09.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        ADBG (Concatenate ("WFRT Delay2  ", ToDecimalString (Arg2)))
                        Notify (^PC00.RP09.PXSX, One) // Device Check
                        ADBG ("End WWAN Warm Reset")
                        Release (WWMT)
                        Local0 = Zero
                        ADBG ("WWAN Warm Reset Mutex: Release Done")
                        If (CondRefOf (\_SB.PC00.RP09.PXSX.DOSV))
                        {
                            ^PC00.RP09.PXSX.DOSV ()
                        }
                    }

                    If ((WWRP == 0x0A))
                    {
                        If ((Arg0 == Zero))
                        {
                            ADBG ("Start WWAN Warm Reset")
                        }
                        Else
                        {
                            ADBG ("Start WWAN Cold Reset")
                        }

                        If (CondRefOf (\_SB.PC00.RP10.PXSX.FHRF))
                        {
                            ^PC00.RP10.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        ADBG (Concatenate ("WFRT Delay1  ", ToDecimalString (Arg1)))
                        Notify (^PC00.RP10.PXSX, One) // Device Check
                        If (CondRefOf (\_SB.PC00.RP10.PXSX.SHRF))
                        {
                            ^PC00.RP10.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        ADBG (Concatenate ("WFRT Delay2  ", ToDecimalString (Arg2)))
                        Notify (^PC00.RP10.PXSX, One) // Device Check
                        ADBG ("End WWAN Warm Reset")
                        Release (WWMT)
                        Local0 = Zero
                        ADBG ("WWAN Warm Reset Mutex: Release Done")
                        If (CondRefOf (\_SB.PC00.RP10.PXSX.DOSV))
                        {
                            ^PC00.RP10.PXSX.DOSV ()
                        }
                    }

                    If ((WWRP == 0x0B))
                    {
                        If ((Arg0 == Zero))
                        {
                            ADBG ("Start WWAN Warm Reset")
                        }
                        Else
                        {
                            ADBG ("Start WWAN Cold Reset")
                        }

                        If (CondRefOf (\_SB.PC00.RP11.PXSX.FHRF))
                        {
                            ^PC00.RP11.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        ADBG (Concatenate ("WFRT Delay1  ", ToDecimalString (Arg1)))
                        Notify (^PC00.RP11.PXSX, One) // Device Check
                        If (CondRefOf (\_SB.PC00.RP11.PXSX.SHRF))
                        {
                            ^PC00.RP11.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        ADBG (Concatenate ("WFRT Delay2  ", ToDecimalString (Arg2)))
                        Notify (^PC00.RP11.PXSX, One) // Device Check
                        ADBG ("End WWAN Warm Reset")
                        Release (WWMT)
                        Local0 = Zero
                        ADBG ("WWAN Warm Reset Mutex: Release Done")
                        If (CondRefOf (\_SB.PC00.RP11.PXSX.DOSV))
                        {
                            ^PC00.RP11.PXSX.DOSV ()
                        }
                    }

                    If ((WWRP == 0x0C))
                    {
                        If ((Arg0 == Zero))
                        {
                            ADBG ("Start WWAN Warm Reset")
                        }
                        Else
                        {
                            ADBG ("Start WWAN Cold Reset")
                        }

                        If (CondRefOf (\_SB.PC00.RP12.PXSX.FHRF))
                        {
                            ^PC00.RP12.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        ADBG (Concatenate ("WFRT Delay1  ", ToDecimalString (Arg1)))
                        Notify (^PC00.RP12.PXSX, One) // Device Check
                        If (CondRefOf (\_SB.PC00.RP12.PXSX.SHRF))
                        {
                            ^PC00.RP12.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        ADBG (Concatenate ("WFRT Delay2  ", ToDecimalString (Arg2)))
                        Notify (^PC00.RP12.PXSX, One) // Device Check
                        ADBG ("End WWAN Warm Reset")
                        Release (WWMT)
                        Local0 = Zero
                        ADBG ("WWAN Warm Reset Mutex: Release Done")
                        If (CondRefOf (\_SB.PC00.RP12.PXSX.DOSV))
                        {
                            ^PC00.RP12.PXSX.DOSV ()
                        }
                    }

                    If ((Local0 == One))
                    {
                        Release (WWMT)
                    }
                }
            }

            Device (MFFD)
            {
                Name (_HID, "INTC1073")  // _HID: Hardware ID
                Name (_STR, Unicode ("Modem Firmware Flash Device"))  // _STR: Description String
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((WFFD == One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("0f3d57aa-6046-47b2-8a9a-88f1021d3865") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x07                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            ADBG ("MFFD FLDR")
                            WFRT (Zero, DerefOf (Arg3 [Zero]), DerefOf (Arg3 [One]))
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        If ((Arg2 == 0x02))
                        {
                            ADBG ("MFFD PLDR")
                            WFRT (One, DerefOf (Arg3 [Zero]), DerefOf (Arg3 [One]))
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                        Return (Zero)
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.XDCI))
    {
        Scope (_SB.PC00.XDCI)
        {
            Method (XDAT, 0, Serialized)
            {
                If (CondRefOf (\_SB.PC00.LPCB.H_EC.XDAT))
                {
                    Return (^^LPCB.H_EC.XDAT ())
                }

                Return (Zero)
            }
        }
    }

    Scope (_TZ)
    {
        Method (KELV, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0xFF)
            Local0 *= 0x0A
            Local0 += 0x0AAC
            Return (Local0)
        }

        ThermalZone (THRM)
        {
            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                If (\_SB.PC00.LPCB.EC.MYEC)
                {
                    If (\_SB.PC00.LPCB.EC.CTSD)
                    {
                        \_SB.PC00.LPCB.EC.CTSD = Zero
                        Return (KELV (0x6E))
                    }
                    Else
                    {
                        Local0 = \_SB.PC00.LPCB.EC.CPUT
                        Local0 += 0x02
                        Return (KELV (Local0))
                    }
                }
                Else
                {
                    Return (KELV (0x2D))
                }
            }

            Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
            {
                Return (KELV (0x73))
            }
        }
    }

    Scope (_SB.PC00.LPCB)
    {
        Mutex (\MUEC, 0x00)
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            IO (Decode16,
                0x0068,             // Range Minimum
                0x0068,             // Range Maximum
                0x00,               // Alignment
                0x01,               // Length
                )
            IO (Decode16,
                0x006C,             // Range Minimum
                0x006C,             // Range Maximum
                0x00,               // Alignment
                0x01,               // Length
                )
        })
        Device (EC)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Method (_GPE, 0, NotSerialized)  // _GPE: General Purpose Events
            {
                Local0 = 0x6E
                Return (Local0)
            }

            Name (CTID, Zero)
            Name (MYEC, One)
            Name (CTSD, Zero)
            Name (\PTHR, Zero)
            Name (CONV, Zero)
            OperationRegion (IO_2, SystemIO, 0x68, 0x05)
            Field (IO_2, ByteAcc, Lock, Preserve)
            {
                DAT2,   8, 
                Offset (0x04), 
                CMD2,   8
            }

            Field (IO_2, ByteAcc, Lock, Preserve)
            {
                Offset (0x04), 
                OUT2,   1, 
                INP2,   1
            }

            Method (IRD2, 0, Serialized)
            {
                Return (!INP2)
            }

            Method (ORD2, 0, Serialized)
            {
                Return (OUT2) /* \_SB_.PC00.LPCB.EC__.OUT2 */
            }

            OperationRegion (IO8, SystemIO, 0x80, One)
            Field (IO8, ByteAcc, Lock, Preserve)
            {
                DBG8,   8
            }

            OperationRegion (TEST, SystemIO, 0xB2, One)
            Field (TEST, ByteAcc, Lock, Preserve)
            {
                APMC,   8
            }

            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x03))
                {
                    MYEC = Arg1
                    If ((Arg1 == One))
                    {
                        If (_OSI ("Windows 2015"))
                        {
                            OSVR = 0x05
                        }
                        ElseIf (_OSI ("Windows 2013"))
                        {
                            OSVR = 0x05
                        }
                        ElseIf (_OSI ("Windows 2012"))
                        {
                            OSVR = 0x04
                        }
                        ElseIf (_OSI ("Windows 2009"))
                        {
                            OSVR = 0x03
                        }
                        ElseIf (_OSI ("Windows 2006"))
                        {
                            OSVR = 0x02
                        }
                        ElseIf (_OSI ("Windows 2001"))
                        {
                            OSVR = One
                        }
                        ElseIf (_OSI ("Windows 2001 SP1"))
                        {
                            OSVR = One
                        }
                        ElseIf (_OSI ("Windows 2001 SP2"))
                        {
                            OSVR = One
                        }
                        ElseIf (_OSI ("Windows 2001 SP3"))
                        {
                            OSVR = One
                        }
                    }
                }

                CTSD = Zero
                ^^^GFX0.CLID = LIDS /* \_SB_.PC00.LPCB.EC__.LIDS */
                Local1 = POWS /* \_SB_.PC00.LPCB.EC__.POWS */
                If ((Local1 == One))
                {
                    PWRS = One
                }
                Else
                {
                    PWRS = Zero
                }

                SPNT ()
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFC000800,         // Address Base
                    0x00000100,         // Address Length
                    )
            })
            OperationRegion (ECBA, SystemMemory, 0xFC000800, 0x0100)
            Field (ECBA, ByteAcc, NoLock, Preserve)
            {
                Offset (0x30), 
                POWS,   1, 
                LIDS,   1, 
                Offset (0x31), 
                MBTS,   1, 
                MBCS,   1, 
                MBDS,   1, 
                MBFS,   1, 
                MBWS,   1, 
                MBLS,   1, 
                MBCL,   1, 
                MBFL,   1, 
                Offset (0x38), 
                MDCL,   8, 
                MDCH,   8, 
                MDVL,   8, 
                MDVH,   8, 
                MCAL,   8, 
                MCAH,   8, 
                MSTL,   8, 
                MSTH,   8, 
                MCCL,   8, 
                MCCH,   8, 
                MPOL,   8, 
                MPOH,   8, 
                MFCL,   8, 
                MFCH,   8, 
                MCUL,   8, 
                MCUH,   8, 
                MRCL,   8, 
                MRCH,   8, 
                MVOL,   8, 
                MVOH,   8, 
                MTEL,   8, 
                MTEH,   8, 
                MCVL,   8, 
                MCVH,   8
            }

            OperationRegion (EC, EmbeddedControl, Zero, 0x0100)
            Field (EC, ByteAcc, NoLock, Preserve)
            {
                SMPR,   8, 
                SMST,   8, 
                SMAD,   8, 
                SMCM,   8, 
                SMD0,   264, 
                SMAA,   8, 
                Offset (0x2E), 
                    ,   6, 
                PXCT,   1, 
                Offset (0x36), 
                    ,   4, 
                OSVR,   4, 
                Offset (0x68), 
                CPUT,   8, 
                Offset (0x7E), 
                RES1,   3, 
                CHET,   1, 
                Offset (0x80), 
                SYST,   8, 
                Offset (0xC6), 
                CPTE,   8, 
                Offset (0xD2), 
                SYSM,   2, 
                Offset (0xD4), 
                    ,   4, 
                SILE,   1, 
                Offset (0xE3), 
                OSC1,   8, 
                OSC2,   8, 
                Offset (0xE6), 
                DBG,    8, 
                DTOK,   1, 
                DTNG,   1, 
                FBST,   1, 
                ESGI,   1, 
                ESGO,   1, 
                ESGN,   1, 
                E706,   1, 
                DTDR,   1, 
                RSUS,   1, 
                Offset (0xEB), 
                PSNM,   7, 
                Offset (0xEC), 
                MODS,   1, 
                KBBL,   1, 
                Offset (0xED), 
                SCIC,   8, 
                ISHS,   2, 
                Offset (0xF4), 
                TSIT,   8, 
                TSTU,   8, 
                TSTL,   8, 
                TST2,   8, 
                TSU2,   8, 
                TSL2,   8
            }

            Device (ADP1)
            {
                Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                Name (BFLG, One)
                Name (ACP, One)
                Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                {
                    If (POWS)
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                {
                    _SB
                })
            }

            Name (BIF0, Package (0x0D)
            {
                One, 
                0x1130, 
                0x1130, 
                One, 
                0x39D0, 
                Zero, 
                Zero, 
                One, 
                One, 
                "MS-NF11", 
                "1", 
                "LION", 
                ""
            })
            Name (STAT, Package (0x04)
            {
                0x02, 
                0x0500, 
                0x0800, 
                0x03E8
            })
            Name (PPP0, 0xFFFFFFFF)
            Name (PPP1, 0xFFFFFFFF)
            Name (PPP2, 0xFFFFFFFF)
            Name (PPP3, 0xFFFFFFFF)
            Device (BAT1)
            {
                Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                {
                    _SB
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (MYEC)
                    {
                        If (MBTS)
                        {
                            Return (0x1F)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
                {
                    If (MYEC)
                    {
                        UPBI ()
                    }
                    Else
                    {
                        IVBI ()
                        DBG8 = 0x99
                        Sleep (0x03E8)
                    }

                    Return (BIF0) /* \_SB_.PC00.LPCB.EC__.BIF0 */
                }

                Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                {
                    If (MYEC)
                    {
                        UPBS ()
                    }
                    Else
                    {
                        IVBS ()
                    }

                    Return (STAT) /* \_SB_.PC00.LPCB.EC__.STAT */
                }

                Method (IVBI, 0, NotSerialized)
                {
                    BIF0 [One] = 0xFFFFFFFF
                    BIF0 [0x02] = 0xFFFFFFFF
                    BIF0 [0x04] = 0xFFFFFFFF
                    BIF0 [0x09] = "Wrong"
                    BIF0 [0x0A] = " "
                    BIF0 [0x0B] = "Wrong"
                    BIF0 [0x0C] = "Wrong"
                }

                Method (IVBS, 0, NotSerialized)
                {
                    STAT [Zero] = Zero
                    STAT [One] = 0xFFFFFFFF
                    STAT [0x02] = 0xFFFFFFFF
                    STAT [0x03] = 0x2710
                }

                Method (UPBI, 0, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = Zero
                    Local2 = Zero
                    Local3 = Zero
                    Local0 = MDCH /* \_SB_.PC00.LPCB.EC__.MDCH */
                    Local1 = MDCL /* \_SB_.PC00.LPCB.EC__.MDCL */
                    Local0 <<= 0x08
                    Local0 |= Local1
                    BIF0 [One] = Local0
                    BIF0 [0x09] = "BIF0_9"
                    Local0 = MFCH /* \_SB_.PC00.LPCB.EC__.MFCH */
                    Local1 = MFCL /* \_SB_.PC00.LPCB.EC__.MFCL */
                    OSC2 = MFCH /* \_SB_.PC00.LPCB.EC__.MFCH */
                    OSC1 = MFCL /* \_SB_.PC00.LPCB.EC__.MFCL */
                    Local0 <<= 0x08
                    Local1 |= Local0
                    BIF0 [0x02] = Local1
                    Local0 = MDVH /* \_SB_.PC00.LPCB.EC__.MDVH */
                    Local2 = MDVL /* \_SB_.PC00.LPCB.EC__.MDVL */
                    Local0 <<= 0x08
                    Local2 |= Local0
                    BIF0 [0x04] = Local2
                    BIF0 [0x0A] = ""
                    BIF0 [0x0B] = "LION"
                    Local0 = CTID /* \_SB_.PC00.LPCB.EC__.CTID */
                    If ((Local0 == Zero))
                    {
                        BIF0 [0x0C] = "MSI"
                    }
                    Else
                    {
                        BIF0 [0x0C] = "BIF0_12"
                    }
                }

                Method (UPBS, 0, NotSerialized)
                {
                    Local0 = Zero
                    Local1 = Zero
                    Local2 = Zero
                    Local3 = Zero
                    Local4 = Zero
                    Local7 = Zero
                    Local0 = MBTS /* \_SB_.PC00.LPCB.EC__.MBTS */
                    If ((Local0 == One))
                    {
                        Local0 = POWS /* \_SB_.PC00.LPCB.EC__.POWS */
                        If ((Local0 == One))
                        {
                            Local1 = MBCS /* \_SB_.PC00.LPCB.EC__.MBCS */
                            If ((Local1 == One))
                            {
                                Local4 |= 0x02
                            }
                        }
                        Else
                        {
                            Local4 |= One
                            Local0 = MBLS /* \_SB_.PC00.LPCB.EC__.MBLS */
                            If ((Local0 == One))
                            {
                                Local4 |= 0x04
                            }
                        }

                        Local0 = POWS /* \_SB_.PC00.LPCB.EC__.POWS */
                        If ((Local0 == One))
                        {
                            Local0 = MBCS /* \_SB_.PC00.LPCB.EC__.MBCS */
                            If ((Local0 == One))
                            {
                                Local0 = MCUH /* \_SB_.PC00.LPCB.EC__.MCUH */
                                Local1 = MCUL /* \_SB_.PC00.LPCB.EC__.MCUL */
                                Local0 <<= 0x08
                                Local1 |= Local0
                                If ((Local1 == 0xFFFF))
                                {
                                    Local1 = 0xFFFFFFFF
                                }

                                STAT [One] = Local1
                            }
                            Else
                            {
                                STAT [One] = Zero
                            }
                        }
                        Else
                        {
                            Local0 = MCUH /* \_SB_.PC00.LPCB.EC__.MCUH */
                            Local1 = MCUL /* \_SB_.PC00.LPCB.EC__.MCUL */
                            Local0 <<= 0x08
                            Local1 |= Local0
                            Local1 ^= 0xFFFF
                            If ((Local1 == Zero))
                            {
                                Local1 = 0xFFFFFFFF
                            }

                            STAT [One] = Local1
                        }

                        Local0 = MRCH /* \_SB_.PC00.LPCB.EC__.MRCH */
                        Local2 = MRCL /* \_SB_.PC00.LPCB.EC__.MRCL */
                        Local0 <<= 0x08
                        Local2 |= Local0
                        PPP0 = Local2
                        Local0 = MFCH /* \_SB_.PC00.LPCB.EC__.MFCH */
                        Local2 = MFCL /* \_SB_.PC00.LPCB.EC__.MFCL */
                        Local0 <<= 0x08
                        Local2 |= Local0
                        PPP1 = Local2
                        Local0 = OSC2 /* \_SB_.PC00.LPCB.EC__.OSC2 */
                        Local2 = OSC1 /* \_SB_.PC00.LPCB.EC__.OSC1 */
                        Local0 <<= 0x08
                        Local2 |= Local0
                        PPP2 = Local2
                        PPP3 = (PPP0 * PPP2) /* \_SB_.PC00.LPCB.EC__.PPP2 */
                        Divide (PPP3, PPP1, PPP2, PPP0) /* \_SB_.PC00.LPCB.EC__.PPP0 */
                        STAT [0x02] = PPP0 /* \_SB_.PC00.LPCB.EC__.PPP0 */
                        Local0 = MVOH /* \_SB_.PC00.LPCB.EC__.MVOH */
                        Local3 = MVOL /* \_SB_.PC00.LPCB.EC__.MVOL */
                        Local0 <<= 0x08
                        Local3 |= Local0
                        STAT [0x03] = Local3
                        STAT [Zero] = Local4
                        Sleep (0x64)
                    }
                    Else
                    {
                        IVBS ()
                    }
                }
            }

            Device (LID0)
            {
                Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
                Method (_LID, 0, NotSerialized)  // _LID: Lid Status
                {
                    If (MYEC)
                    {
                        Local0 = LIDS /* \_SB_.PC00.LPCB.EC__.LIDS */
                        ^^^^GFX0.CLID = Local0
                    }
                    Else
                    {
                        Local0 = One
                        ^^^^GFX0.CLID = Local0
                    }

                    Return (Local0)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x04, 0x03))
                }
            }

            Method (_Q70, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0x70
                DBG8 = 0x70
            }

            Method (_Q71, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0x71
                DBG8 = 0x71
            }

            Method (_Q74, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0x74
                DBG8 = 0x74
            }

            Method (_Q78, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0x78
                DBG8 = 0x78
            }

            Method (_Q79, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0x79
                DBG8 = 0x79
            }

            Method (PTHR, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Local0 = Zero
                    ^^^^PR00._PPC () = Local0
                }
                Else
                {
                    Local0 = (SizeOf (^^^^PR00._PSS ()) - One)
                    ^^^^PR00._PPC () = Local0
                }

                SPNT ()
            }

            Method (PTHD, 0, Serialized)
            {
                Local0 = PSNM /* \_SB_.PC00.LPCB.EC__.PSNM */
                ^^^^PR00._PPC () = Local0
                SPNT ()
            }

            Method (_Q80, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0x80
                DBG8 = 0x80
            }

            Method (_Q81, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0x81
                DBG8 = 0x81
                PTHD ()
            }

            Method (_Q82, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0x82
                DBG8 = 0x82
                PTHR (Zero)
            }

            Method (_Q83, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0x83
                DBG8 = 0x83
                Local0 = Zero
                Local0 = POWS /* \_SB_.PC00.LPCB.EC__.POWS */
                If ((Local0 == One))
                {
                    ^ADP1.ACP = One
                    PWRS = One
                }
                Else
                {
                    ^ADP1.ACP = Zero
                    PWRS = Zero
                }

                SPNT ()
                Notify (ADP1, 0x80) // Status Change
            }

            Method (_Q84, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0x84
                DBG8 = 0x84
                UPBT (0x06, One)
                Notify (^^^^HIDD, 0xCD) // Hardware-Specific
                Sleep (0x64)
                UPBT (0x06, Zero)
                Notify (^^^^HIDD, 0xCC) // Hardware-Specific
            }

            Method (_Q85, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0x85
                DBG8 = 0x85
                CTSD = One
                Notify (\_TZ.THRM, 0x80) // Thermal Status Change
            }

            Method (_Q86, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0x86
                DBG8 = 0x86
            }

            Method (_Q87, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0x87
                DBG8 = 0x87
                Local0 = Zero
                Local0 = MBTS /* \_SB_.PC00.LPCB.EC__.MBTS */
                If ((Local0 == One))
                {
                    ^ADP1.BFLG = One
                    If (((OSC1 == Zero) && (OSC2 == Zero)))
                    {
                        Notify (BAT1, 0x81) // Information Change
                    }

                    Notify (BAT1, 0x80) // Status Change
                }
                Else
                {
                    ^ADP1.BFLG = Zero
                    Notify (BAT1, 0x81) // Information Change
                }

                Notify (ADP1, 0x80) // Status Change
            }

            Method (_Q88, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0x88
                DBG8 = 0x88
            }

            Method (_Q89, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0x89
                DBG8 = 0x89
            }

            Method (_Q8A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0x8A
                DBG8 = 0x8A
                CTSD = One
                Notify (\_TZ.THRM, 0x80) // Thermal Status Change
            }

            Method (_Q8B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0x8B
                DBG8 = 0x8B
            }

            Method (_Q8C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0x8C
                DBG8 = 0x8C
            }

            OperationRegion (\SCRP, SystemIO, 0x1280, 0x04)
            Field (SCRP, ByteAcc, NoLock, Preserve)
            {
                CR00,   8, 
                CR01,   8, 
                CR02,   8, 
                CR03,   8
            }

            Method (_QB4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0xB4
                DBG8 = 0xB4
                If ((OSVR >= 0x02))
                {
                    Sleep (0x02EE)
                }
            }

            Method (_QB7, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0xB7
                DBG8 = 0xB7
                If ((OSVR >= 0x02))
                {
                    BRTN (0x87)
                }
            }

            Method (_QB8, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SCIC = 0xB8
                DBG8 = 0xB8
                If ((OSVR >= 0x02))
                {
                    BRTN (0x86)
                }
            }

            Method (_QD1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Notify (^^^RP09.PXSX, 0xD1) // Hardware-Specific
                SCIC = 0xD1
                DBG8 = 0xD1
            }

            Method (_QD2, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Notify (^^^RP09.PXSX, 0xD2) // Hardware-Specific
                SCIC = 0xD2
                DBG8 = 0xD2
            }

            Method (_QD3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Notify (^^^RP09.PXSX, 0xD3) // Hardware-Specific
                SCIC = 0xD3
                DBG8 = 0xD3
            }

            Method (_QD4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Notify (^^^RP09.PXSX, 0xD4) // Hardware-Specific
                SCIC = 0xD4
                DBG8 = 0xD4
            }

            Method (_QD5, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Notify (^^^RP09.PXSX, 0xD5) // Hardware-Specific
                SCIC = 0xD5
                DBG8 = 0xD5
            }

            OperationRegion (LP4D, SystemIO, 0x4D, 0x02)
            Field (LP4D, WordAcc, NoLock, Preserve)
            {
                IO4D,   16
            }

            OperationRegion (LP4F, SystemIO, 0x4F, One)
            Field (LP4F, ByteAcc, NoLock, Preserve)
            {
                IO4F,   8
            }

            OperationRegion (IO, SystemIO, 0x68, 0x05)
            Field (IO, ByteAcc, Lock, Preserve)
            {
                DAT1,   8, 
                Offset (0x04), 
                CMD1,   8
            }

            Field (IO, ByteAcc, Lock, Preserve)
            {
                Offset (0x04), 
                OUTS,   1, 
                INPS,   1
            }

            Method (IRDY, 0, Serialized)
            {
                Return (!INPS)
            }

            Method (ORDY, 0, Serialized)
            {
                Return (OUTS) /* \_SB_.PC00.LPCB.EC__.OUTS */
            }

            Method (WATI, 0, Serialized)
            {
                Local0 = 0x32
                While ((Local0 && !IRDY ()))
                {
                    Sleep (One)
                    Local0--
                }

                Return (IRDY ())
            }

            Method (WATO, 0, Serialized)
            {
                Local0 = 0x32
                While ((Local0 && !ORDY ()))
                {
                    Sleep (One)
                    Local0--
                }

                Return (ORDY ())
            }

            Method (CLRB, 0, Serialized)
            {
                While (WATO ())
                {
                    Local0 = DAT1 /* \_SB_.PC00.LPCB.EC__.DAT1 */
                }
            }

            Method (RDEC, 1, Serialized)
            {
                If (WATI ())
                {
                    CMD1 = 0x80
                    If (WATI ())
                    {
                        DAT1 = Arg0
                        If (WATO ())
                        {
                            Return (DAT1) /* \_SB_.PC00.LPCB.EC__.DAT1 */
                        }
                    }
                }

                Return (Zero)
            }

            Method (WREC, 2, Serialized)
            {
                Noop
            }

            Method (QREC, 0, Serialized)
            {
                Noop
            }

            Method (WCEC, 1, Serialized)
            {
                If (WATI ())
                {
                    CMD1 = Arg0
                }
            }

            Method (_QC0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^SCM0.TDED = 0xC0
                DBG8 = 0xC0
                Notify (SCM0, 0xC0) // Hardware-Specific
            }

            Device (CIND)
            {
                Name (_HID, "INT33D3" /* Intel GPIO Buttons */)  // _HID: Hardware ID
                Name (_CID, "PNP0C60" /* Display Sensor Device */)  // _CID: Compatible ID
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((OSYS >= 0x07DC))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
            }

            Name (VBDS, Zero)
            Name (ONTM, Zero)
            Method (VGBS, 0, Serialized)
            {
                If ((ONTM == Zero))
                {
                    If (((PB1E & 0x08) == 0x08))
                    {
                        UPBT (0x06, Zero)
                    }

                    ONTM = One
                }

                Return (VBDS) /* \_SB_.PC00.LPCB.EC__.VBDS */
            }

            Method (UPBT, 2, Serialized)
            {
                Local0 = (One << Arg0)
                If (Arg1)
                {
                    VBDS |= Local0
                }
                Else
                {
                    VBDS &= ~Local0
                }
            }
        }
    }

    Scope (_SB.PC00.LPCB.EC)
    {
        Device (SCM0)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (TDVR, 0x14)
            Name (MAJR, 0x02)
            Name (MINR, 0x08)
            Name (_WDG, Buffer (0x64)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x4B, 0x01, 0x01, 0x6B, 0x0F, 0xBC, 0xAB,  // AK..k...
                /* 0018 */  0xA1, 0x8E, 0xD1, 0x11, 0x00, 0xA0, 0xC9, 0x06,  // ........
                /* 0020 */  0x29, 0x10, 0x00, 0x00, 0x41, 0x4C, 0x01, 0x01,  // )...AL..
                /* 0028 */  0x6D, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // m.......
                /* 0030 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0038 */  0x41, 0x4A, 0x01, 0x02, 0x6E, 0x0F, 0xBC, 0xAB,  // AJ..n...
                /* 0040 */  0xA1, 0x8E, 0xD1, 0x11, 0x00, 0xA0, 0xC9, 0x06,  // ........
                /* 0048 */  0x29, 0x10, 0x00, 0x00, 0x41, 0x4D, 0x01, 0x02,  // )...AM..
                /* 0050 */  0x8A, 0xC3, 0x3C, 0x5B, 0xD9, 0x40, 0x45, 0x72,  // ..<[.@Er
                /* 0058 */  0x8A, 0xE6, 0x11, 0x45, 0xB7, 0x51, 0xBE, 0x3F,  // ...E.Q.?
                /* 0060 */  0xC0, 0x00, 0x01, 0x09                           // ....
            })
            OperationRegion (EC, EmbeddedControl, Zero, 0x0100)
            Field (EC, ByteAcc, NoLock, Preserve)
            {
                Offset (0x28), 
                TD28,   8, 
                TD29,   8, 
                TD2A,   8, 
                TD2B,   8, 
                TD2C,   8, 
                TD2D,   8, 
                TD2E,   8, 
                TD2F,   8, 
                TD30,   8, 
                TD31,   8, 
                Offset (0x33), 
                TD33,   8, 
                TD34,   8, 
                Offset (0x37), 
                TD37,   8, 
                TD38,   16, 
                TD3A,   16, 
                TD3C,   16, 
                TD3E,   16, 
                TD40,   16, 
                TD42,   16, 
                TD44,   16, 
                TD46,   16, 
                TD48,   16, 
                TD4A,   16, 
                TD4C,   16, 
                TD4E,   16, 
                TD50,   16, 
                TD52,   16, 
                TD54,   16, 
                TD56,   16, 
                TD58,   16, 
                TD5A,   16, 
                TD5C,   16, 
                TD5E,   16, 
                TD60,   16, 
                TD62,   16, 
                TD64,   16, 
                TD66,   16, 
                TD68,   8, 
                TD69,   8, 
                TD6A,   8, 
                TD6B,   8, 
                TD6C,   8, 
                TD6D,   8, 
                TD6E,   8, 
                TD6F,   8, 
                TD70,   8, 
                TD71,   8, 
                TD72,   8, 
                TD73,   8, 
                TD74,   8, 
                TD75,   8, 
                TD76,   8, 
                TD77,   8, 
                TD78,   8, 
                TD79,   8, 
                Offset (0x80), 
                TD80,   8, 
                TD81,   8, 
                TD82,   8, 
                TD83,   8, 
                TD84,   8, 
                TD85,   8, 
                TD86,   8, 
                TD87,   8, 
                TD88,   8, 
                TD89,   8, 
                TD8A,   8, 
                TD8B,   8, 
                TD8C,   8, 
                TD8D,   8, 
                TD8E,   8, 
                TD8F,   8, 
                TD90,   8, 
                Offset (0xA0), 
                TDA0,   8, 
                TDA1,   8, 
                TDA2,   8, 
                TDA3,   8, 
                TDA4,   8, 
                TDA5,   8, 
                TDA6,   8, 
                TDA7,   8, 
                TDA8,   8, 
                TDA9,   8, 
                TDAA,   8, 
                TDAB,   8, 
                TDAC,   8, 
                TDAD,   8, 
                TDAE,   8, 
                TDAF,   8, 
                TDB0,   8, 
                TDB1,   8, 
                TDB2,   8, 
                TDB3,   8, 
                TDB4,   8, 
                TDB5,   8, 
                TDB6,   8, 
                TDB7,   8, 
                TDB8,   8, 
                TDB9,   8, 
                TDBA,   8, 
                TDBB,   8, 
                TDBC,   8, 
                TDBD,   8, 
                TDBE,   8, 
                TDBF,   8, 
                Offset (0xC8), 
                TDC8,   8, 
                TDC9,   8, 
                TDCA,   8, 
                TDCB,   8, 
                TDCC,   8, 
                TDCD,   8, 
                Offset (0xD0), 
                TDD0,   8, 
                TDD1,   8, 
                TDD2,   8, 
                TDD3,   8, 
                TDD4,   8, 
                TDD5,   8, 
                TDD6,   8, 
                Offset (0xD8), 
                TDD8,   8, 
                TDD9,   1, 
                Offset (0xE0), 
                TDE0,   8, 
                Offset (0xE3), 
                TDE3,   8, 
                TE40,   3, 
                TE43,   5, 
                TDE5,   8, 
                TDE6,   8, 
                TDE7,   8, 
                TDE8,   8, 
                Offset (0xED), 
                TDED,   8, 
                TDFA,   8, 
                TDFB,   8, 
                TDFC,   8, 
                TDFD,   8, 
                TDFE,   8, 
                TDFF,   8
            }

            OperationRegion (WMIO, SystemIO, 0x0360, 0x02)
            Field (WMIO, ByteAcc, Lock, Preserve)
            {
                I360,   8, 
                D361,   8
            }

            Method (WMRD, 1, Serialized)
            {
                I360 = Arg0
                Return (D361) /* \_SB_.PC00.LPCB.EC__.SCM0.D361 */
            }

            Method (WMWT, 2, Serialized)
            {
                I360 = Arg0
                D361 = Arg1
            }

            Name (CLBF, Buffer (0x20)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            Name (BFL0, Buffer (0x20){})
            CreateByteField (BFL0, Zero, BL00)
            CreateByteField (BFL0, One, BL01)
            CreateByteField (BFL0, 0x02, BL02)
            CreateByteField (BFL0, 0x03, BL03)
            CreateByteField (BFL0, 0x04, BL04)
            CreateByteField (BFL0, 0x05, BL05)
            CreateByteField (BFL0, 0x06, BL06)
            CreateByteField (BFL0, 0x07, BL07)
            CreateByteField (BFL0, 0x08, BL08)
            CreateByteField (BFL0, 0x09, BL09)
            CreateByteField (BFL0, 0x0A, BL10)
            CreateByteField (BFL0, 0x0B, BL11)
            CreateByteField (BFL0, 0x0C, BL12)
            CreateByteField (BFL0, 0x0D, BL13)
            CreateByteField (BFL0, 0x0E, BL14)
            CreateByteField (BFL0, 0x0F, BL15)
            CreateByteField (BFL0, 0x10, BL16)
            CreateByteField (BFL0, 0x11, BL17)
            CreateByteField (BFL0, 0x12, BL18)
            CreateByteField (BFL0, 0x13, BL19)
            CreateByteField (BFL0, 0x14, BL20)
            CreateByteField (BFL0, 0x15, BL21)
            CreateByteField (BFL0, 0x16, BL22)
            CreateByteField (BFL0, 0x17, BL23)
            CreateByteField (BFL0, 0x18, BL24)
            CreateByteField (BFL0, 0x19, BL25)
            CreateByteField (BFL0, 0x1A, BL26)
            CreateByteField (BFL0, 0x1B, BL27)
            CreateByteField (BFL0, 0x1C, BL28)
            CreateByteField (BFL0, 0x1D, BL29)
            CreateByteField (BFL0, 0x1E, BL30)
            CreateByteField (BFL0, 0x1F, BL31)
            Method (WMAM, 3, NotSerialized)
            {
                BFL0 = CLBF /* \_SB_.PC00.LPCB.EC__.SCM0.CLBF */
                CreateByteField (Arg2, Zero, IPAR)
                CreateByteField (Arg2, One, BS00)
                CreateByteField (Arg2, 0x02, BS01)
                CreateByteField (Arg2, 0x03, BS02)
                CreateByteField (Arg2, 0x04, BS03)
                CreateByteField (Arg2, 0x05, BS04)
                CreateByteField (Arg2, 0x06, BS05)
                CreateByteField (Arg2, 0x07, BS06)
                CreateByteField (Arg2, 0x08, BS07)
                CreateByteField (Arg2, 0x09, BS08)
                CreateByteField (Arg2, 0x0A, BS09)
                CreateByteField (Arg2, 0x0B, BS10)
                CreateByteField (Arg2, 0x0C, BS11)
                CreateByteField (Arg2, 0x0D, BS12)
                CreateByteField (Arg2, 0x0E, BS13)
                CreateByteField (Arg2, 0x0F, BS14)
                CreateByteField (Arg2, 0x10, BS15)
                CreateByteField (Arg2, 0x11, BS16)
                CreateByteField (Arg2, 0x12, BS17)
                CreateByteField (Arg2, 0x13, BS18)
                CreateByteField (Arg2, 0x14, BS19)
                CreateByteField (Arg2, 0x15, BS20)
                CreateByteField (Arg2, 0x16, BS21)
                CreateByteField (Arg2, 0x17, BS22)
                CreateByteField (Arg2, 0x18, BS23)
                CreateByteField (Arg2, 0x19, BS24)
                CreateByteField (Arg2, 0x1A, BS25)
                CreateByteField (Arg2, 0x1B, BS26)
                CreateByteField (Arg2, 0x1C, BS27)
                CreateByteField (Arg2, 0x1D, BS28)
                CreateByteField (Arg2, 0x1E, BS29)
                CreateByteField (Arg2, 0x1F, BS30)
                If ((Arg1 == One))
                {
                    Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                }

                If ((Arg1 == 0x02))
                {
                    Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                }

                If ((Arg1 == 0x03))
                {
                    BL01 = WMRD (0x37)
                    BL02 = WMRD (0xA0)
                    BL03 = WMRD (0xA1)
                    BL04 = WMRD (0xA2)
                    BL05 = WMRD (0xA3)
                    BL06 = WMRD (0xA4)
                    BL07 = WMRD (0xA5)
                    BL08 = WMRD (0xA6)
                    BL09 = WMRD (0xA7)
                    BL10 = WMRD (0xA8)
                    BL11 = WMRD (0xA9)
                    BL12 = WMRD (0xAA)
                    BL13 = WMRD (0xAB)
                    BL14 = WMRD (0xAC)
                    BL15 = WMRD (0xAD)
                    BL16 = WMRD (0xAE)
                    BL17 = WMRD (0xAF)
                    BL18 = WMRD (0xB0)
                    BL19 = WMRD (0xB1)
                    BL20 = WMRD (0xB2)
                    BL21 = WMRD (0xB3)
                    BL22 = WMRD (0xB4)
                    BL23 = WMRD (0xB5)
                    BL24 = WMRD (0xB6)
                    BL25 = WMRD (0xB7)
                    BL26 = WMRD (0xB8)
                    BL27 = WMRD (0xB9)
                    BL28 = WMRD (0xBA)
                    BL29 = WMRD (0xBB)
                    BL00 = One
                    Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                }

                If ((Arg1 == 0x04))
                {
                    Return (One)
                }

                If ((Arg1 == 0x05))
                {
                    If ((IPAR == Zero))
                    {
                        BL01 = WMRD (0xE0)
                        BL02 = WMRD (0xE3)
                        BL03 = WMRD (0xE4)
                        BL04 = WMRD (0xE5)
                        BL05 = WMRD (0xE6)
                        BL06 = WMRD (0xE7)
                        BL07 = WMRD (0xE1)
                        BL08 = WMRD (0xE2)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == One))
                    {
                        BL01 = WMRD (0xE8)
                        BL02 = WMRD (0xEB)
                        BL03 = WMRD (0xEC)
                        BL04 = WMRD (0xED)
                        BL05 = WMRD (0xEE)
                        BL06 = WMRD (0xEF)
                        BL07 = WMRD (0xE9)
                        BL08 = WMRD (0xEA)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x02))
                    {
                        BL01 = WMRD (0xF0)
                        BL02 = WMRD (0xF1)
                        BL03 = WMRD (0xF2)
                        BL04 = WMRD (0xF3)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x03))
                    {
                        BL01 = WMRD (0xF4)
                        BL02 = WMRD (0xF5)
                        BL03 = WMRD (0xF6)
                        BL04 = WMRD (0xF7)
                        BL05 = WMRD (0xF8)
                        BL06 = WMRD (0xF9)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x04))
                    {
                        BL01 = WMRD (0xFA)
                        BL02 = WMRD (0xFB)
                        BL03 = WMRD (0xFC)
                        BL04 = WMRD (0xFD)
                        BL05 = WMRD (0xFE)
                        BL06 = WMRD (0xFF)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x06))
                {
                    If ((IPAR == Zero))
                    {
                        WMWT (0xE0, BS00)
                        WMWT (0xE3, BS01)
                        WMWT (0xE4, BS02)
                        WMWT (0xE5, BS03)
                        WMWT (0xE6, BS04)
                        WMWT (0xE7, BS05)
                        WMWT (0xE1, BS06)
                        WMWT (0xE2, BS07)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == One))
                    {
                        WMWT (0xE8, BS00)
                        WMWT (0xEB, BS01)
                        WMWT (0xEC, BS02)
                        WMWT (0xED, BS03)
                        WMWT (0xEE, BS04)
                        WMWT (0xEF, BS05)
                        WMWT (0xE9, BS06)
                        WMWT (0xEA, BS07)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x02))
                    {
                        WMWT (0xF0, BS00)
                        WMWT (0xF1, BS01)
                        WMWT (0xF2, BS02)
                        WMWT (0xF3, BS03)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x03))
                    {
                        WMWT (0xF4, BS00)
                        WMWT (0xF5, BS01)
                        WMWT (0xF6, BS02)
                        WMWT (0xF7, BS03)
                        WMWT (0xF8, BS04)
                        WMWT (0xF9, BS05)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x04))
                    {
                        WMWT (0xFA, BS00)
                        WMWT (0xFB, BS01)
                        WMWT (0xFC, BS02)
                        WMWT (0xFD, BS03)
                        WMWT (0xFE, BS04)
                        WMWT (0xFF, BS05)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x07))
                {
                    If ((IPAR == Zero))
                    {
                        BL01 = WMRD (Zero)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == One))
                    {
                        BL01 = WMRD (One)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x02))
                    {
                        BL01 = WMRD (0x02)
                        BL02 = WMRD (0x03)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x03))
                    {
                        BL01 = WMRD (0x04)
                        BL02 = WMRD (0x05)
                        BL03 = WMRD (0x06)
                        BL04 = WMRD (0x07)
                        BL05 = WMRD (0x08)
                        BL06 = WMRD (0x09)
                        BL07 = WMRD (0x0A)
                        BL08 = WMRD (0x0B)
                        BL09 = WMRD (0x0C)
                        BL10 = WMRD (0x0D)
                        BL11 = WMRD (0x0E)
                        BL12 = WMRD (0x0F)
                        BL13 = WMRD (0x10)
                        BL14 = WMRD (0x11)
                        BL15 = WMRD (0x12)
                        BL16 = WMRD (0x13)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x04))
                    {
                        BL01 = WMRD (0x14)
                        BL02 = WMRD (0x15)
                        BL03 = WMRD (0x16)
                        BL04 = WMRD (0x17)
                        BL05 = WMRD (0x18)
                        BL06 = WMRD (0x19)
                        BL07 = WMRD (0x1A)
                        BL08 = WMRD (0x1B)
                        BL09 = WMRD (0x1C)
                        BL10 = WMRD (0x1D)
                        BL11 = WMRD (0x1E)
                        BL12 = WMRD (0x1F)
                        BL13 = WMRD (0x20)
                        BL14 = WMRD (0x21)
                        BL15 = WMRD (0x22)
                        BL16 = WMRD (0x23)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x05))
                    {
                        BL01 = WMRD (0x24)
                        BL02 = WMRD (0x25)
                        BL03 = WMRD (0x26)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x08))
                {
                    If ((IPAR == Zero))
                    {
                        WMWT (Zero, BS00)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == One))
                    {
                        WMWT (One, BS00)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x02))
                    {
                        WMWT (0x02, BS00)
                        WMWT (0x03, BS01)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x03))
                    {
                        WMWT (0x04, BS00)
                        WMWT (0x05, BS01)
                        WMWT (0x06, BS02)
                        WMWT (0x07, BS03)
                        WMWT (0x08, BS04)
                        WMWT (0x09, BS05)
                        WMWT (0x0A, BS06)
                        WMWT (0x0B, BS07)
                        WMWT (0x0C, BS08)
                        WMWT (0x0D, BS09)
                        WMWT (0x0E, BS10)
                        WMWT (0x0F, BS11)
                        WMWT (0x10, BS12)
                        WMWT (0x11, BS13)
                        WMWT (0x12, BS14)
                        WMWT (0x13, BS15)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x04))
                    {
                        WMWT (0x14, BS00)
                        WMWT (0x15, BS01)
                        WMWT (0x16, BS02)
                        WMWT (0x17, BS03)
                        WMWT (0x18, BS04)
                        WMWT (0x19, BS05)
                        WMWT (0x1A, BS06)
                        WMWT (0x1B, BS07)
                        WMWT (0x1C, BS08)
                        WMWT (0x1D, BS09)
                        WMWT (0x1E, BS10)
                        WMWT (0x1F, BS11)
                        WMWT (0x20, BS12)
                        WMWT (0x21, BS13)
                        WMWT (0x22, BS14)
                        WMWT (0x23, BS15)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x05))
                    {
                        WMWT (0x24, BS00)
                        WMWT (0x25, BS01)
                        WMWT (0x26, BS02)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x09))
                {
                    If ((IPAR == Zero))
                    {
                        BL01 = WMRD (0x31)
                        BL02 = WMRD (0xBC)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == One))
                    {
                        BL01 = WMRD (0x38)
                        BL02 = WMRD (0x39)
                        BL03 = WMRD (0x3A)
                        BL04 = WMRD (0x3B)
                        BL05 = WMRD (0x3C)
                        BL06 = WMRD (0x3D)
                        BL07 = WMRD (0x3E)
                        BL08 = WMRD (0x3F)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x02))
                    {
                        BL01 = WMRD (0x40)
                        BL02 = WMRD (0x41)
                        BL03 = WMRD (0x42)
                        BL04 = WMRD (0x43)
                        BL05 = WMRD (0x44)
                        BL06 = WMRD (0x45)
                        BL07 = WMRD (0x46)
                        BL08 = WMRD (0x47)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x03))
                    {
                        BL01 = WMRD (0x48)
                        BL02 = WMRD (0x49)
                        BL03 = WMRD (0x4A)
                        BL04 = WMRD (0x4B)
                        BL05 = WMRD (0x4C)
                        BL06 = WMRD (0x4D)
                        BL07 = WMRD (0x4E)
                        BL08 = WMRD (0x4F)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x0A))
                {
                    If ((IPAR == Zero))
                    {
                        WMWT (0x31, BS00)
                        WMWT (0xBC, BS01)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == One))
                    {
                        WMWT (0x38, BS00)
                        WMWT (0x39, BS01)
                        WMWT (0x3A, BS02)
                        WMWT (0x3B, BS03)
                        WMWT (0x3C, BS04)
                        WMWT (0x3D, BS05)
                        WMWT (0x3E, BS06)
                        WMWT (0x3F, BS07)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x02))
                    {
                        WMWT (0x40, BS00)
                        WMWT (0x41, BS01)
                        WMWT (0x42, BS02)
                        WMWT (0x43, BS03)
                        WMWT (0x44, BS04)
                        WMWT (0x45, BS05)
                        WMWT (0x46, BS06)
                        WMWT (0x47, BS07)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x03))
                    {
                        WMWT (0x48, BS00)
                        WMWT (0x49, BS01)
                        WMWT (0x4A, BS02)
                        WMWT (0x4B, BS03)
                        WMWT (0x4C, BS04)
                        WMWT (0x4D, BS05)
                        WMWT (0x4E, BS06)
                        WMWT (0x4F, BS07)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x0B))
                {
                    If ((IPAR == Zero))
                    {
                        BL01 = WMRD (0x32)
                        BL02 = WMRD (0xBD)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == One))
                    {
                        BL01 = WMRD (0x50)
                        BL02 = WMRD (0x51)
                        BL03 = WMRD (0x52)
                        BL04 = WMRD (0x53)
                        BL05 = WMRD (0x54)
                        BL06 = WMRD (0x55)
                        BL07 = WMRD (0x56)
                        BL08 = WMRD (0x57)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x02))
                    {
                        BL01 = WMRD (0x58)
                        BL02 = WMRD (0x59)
                        BL03 = WMRD (0x5A)
                        BL04 = WMRD (0x5B)
                        BL05 = WMRD (0x5C)
                        BL06 = WMRD (0x5D)
                        BL07 = WMRD (0x5E)
                        BL08 = WMRD (0x5F)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x03))
                    {
                        BL01 = WMRD (0x60)
                        BL02 = WMRD (0x61)
                        BL03 = WMRD (0x62)
                        BL04 = WMRD (0x63)
                        BL05 = WMRD (0x64)
                        BL06 = WMRD (0x65)
                        BL07 = WMRD (0x66)
                        BL08 = WMRD (0x67)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x0C))
                {
                    If ((IPAR == Zero))
                    {
                        WMWT (0x32, BS00)
                        WMWT (0xBD, BS01)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == One))
                    {
                        WMWT (0x50, BS00)
                        WMWT (0x51, BS01)
                        WMWT (0x52, BS02)
                        WMWT (0x53, BS03)
                        WMWT (0x54, BS04)
                        WMWT (0x55, BS05)
                        WMWT (0x56, BS06)
                        WMWT (0x57, BS07)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x02))
                    {
                        WMWT (0x58, BS00)
                        WMWT (0x59, BS01)
                        WMWT (0x5A, BS02)
                        WMWT (0x5B, BS03)
                        WMWT (0x5C, BS04)
                        WMWT (0x5D, BS05)
                        WMWT (0x5E, BS06)
                        WMWT (0x5F, BS07)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x03))
                    {
                        WMWT (0x60, BS00)
                        WMWT (0x61, BS01)
                        WMWT (0x62, BS02)
                        WMWT (0x63, BS03)
                        WMWT (0x64, BS04)
                        WMWT (0x65, BS05)
                        WMWT (0x66, BS06)
                        WMWT (0x67, BS07)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x0D))
                {
                    If ((IPAR == Zero))
                    {
                        BL01 = WMRD (0x68)
                        BL02 = WMRD (0x80)
                        BL03 = WMRD (0x9F)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == One))
                    {
                        BL01 = WMRD (0x69)
                        BL02 = WMRD (0x6F)
                        BL03 = WMRD (0x70)
                        BL04 = WMRD (0x6A)
                        BL05 = WMRD (0x6B)
                        BL06 = WMRD (0x6C)
                        BL07 = WMRD (0x6D)
                        BL08 = WMRD (0x6E)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x02))
                    {
                        BL01 = WMRD (0x81)
                        BL02 = WMRD (0x87)
                        BL03 = WMRD (0x88)
                        BL04 = WMRD (0x82)
                        BL05 = WMRD (0x83)
                        BL06 = WMRD (0x84)
                        BL07 = WMRD (0x85)
                        BL08 = WMRD (0x86)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x0E))
                {
                    If ((IPAR == Zero))
                    {
                        WMWT (0x68, BS00)
                        WMWT (0x80, BS01)
                        WMWT (0x9F, BS02)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == One))
                    {
                        WMWT (0x69, BS00)
                        WMWT (0x6F, BS01)
                        WMWT (0x70, BS02)
                        WMWT (0x6A, BS03)
                        WMWT (0x6B, BS04)
                        WMWT (0x6C, BS05)
                        WMWT (0x6D, BS06)
                        WMWT (0x6E, BS07)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x02))
                    {
                        WMWT (0x81, BS00)
                        WMWT (0x87, BS01)
                        WMWT (0x88, BS02)
                        WMWT (0x82, BS03)
                        WMWT (0x83, BS04)
                        WMWT (0x84, BS05)
                        WMWT (0x85, BS06)
                        WMWT (0x86, BS07)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x0F))
                {
                    If ((IPAR == Zero))
                    {
                        BL01 = WMRD (0x33)
                        BL02 = WMRD (0x34)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == One))
                    {
                        BL01 = WMRD (0x79)
                        BL02 = WMRD (0x7A)
                        BL03 = WMRD (0x7B)
                        BL04 = WMRD (0x7C)
                        BL05 = WMRD (0x7D)
                        BL06 = WMRD (0x7E)
                        BL07 = WMRD (0x7F)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x02))
                    {
                        BL01 = WMRD (0x91)
                        BL02 = WMRD (0x92)
                        BL03 = WMRD (0x93)
                        BL04 = WMRD (0x94)
                        BL05 = WMRD (0x95)
                        BL06 = WMRD (0x96)
                        BL07 = WMRD (0x97)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x03))
                    {
                        BL01 = WMRD (0x98)
                        BL02 = WMRD (0x99)
                        BL03 = WMRD (0x9A)
                        BL04 = WMRD (0x9B)
                        BL05 = WMRD (0x9C)
                        BL06 = WMRD (0x9D)
                        BL07 = WMRD (0x9E)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x10))
                {
                    If ((IPAR == Zero))
                    {
                        WMWT (0x33, BS00)
                        WMWT (0x34, BS01)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == One))
                    {
                        WMWT (0x79, BS00)
                        WMWT (0x7A, BS01)
                        WMWT (0x7B, BS02)
                        WMWT (0x7C, BS03)
                        WMWT (0x7D, BS04)
                        WMWT (0x7E, BS05)
                        WMWT (0x7F, BS06)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x02))
                    {
                        WMWT (0x91, BS00)
                        WMWT (0x92, BS01)
                        WMWT (0x93, BS02)
                        WMWT (0x94, BS03)
                        WMWT (0x95, BS04)
                        WMWT (0x96, BS05)
                        WMWT (0x97, BS06)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x03))
                    {
                        WMWT (0x98, BS00)
                        WMWT (0x99, BS01)
                        WMWT (0x9A, BS02)
                        WMWT (0x9B, BS03)
                        WMWT (0x9C, BS04)
                        WMWT (0x9D, BS05)
                        WMWT (0x9E, BS06)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x11))
                {
                    If ((IPAR == Zero))
                    {
                        BL01 = WMRD (0xC8)
                        BL02 = WMRD (0xC9)
                        BL03 = WMRD (0xCA)
                        BL04 = WMRD (0xCB)
                        BL05 = WMRD (0xCC)
                        BL06 = WMRD (0xCD)
                        BL07 = WMRD (0xCE)
                        BL08 = WMRD (0xCF)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == One))
                    {
                        BL01 = WMRD (0x71)
                        BL02 = WMRD (0x72)
                        BL03 = WMRD (0x73)
                        BL04 = WMRD (0x74)
                        BL05 = WMRD (0x75)
                        BL06 = WMRD (0x76)
                        BL07 = WMRD (0x77)
                        BL08 = WMRD (0x78)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x02))
                    {
                        BL01 = WMRD (0x89)
                        BL02 = WMRD (0x8A)
                        BL03 = WMRD (0x8B)
                        BL04 = WMRD (0x8C)
                        BL05 = WMRD (0x8D)
                        BL06 = WMRD (0x8E)
                        BL07 = WMRD (0x8F)
                        BL08 = WMRD (0x90)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x12))
                {
                    If ((IPAR == Zero))
                    {
                        WMWT (0xC8, BS00)
                        WMWT (0xC9, BS01)
                        WMWT (0xCA, BS02)
                        WMWT (0xCB, BS03)
                        WMWT (0xCC, BS04)
                        WMWT (0xCD, BS05)
                        WMWT (0xCE, BS06)
                        WMWT (0xCF, BS07)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == One))
                    {
                        WMWT (0x71, BS00)
                        WMWT (0x72, BS01)
                        WMWT (0x73, BS02)
                        WMWT (0x74, BS03)
                        WMWT (0x75, BS04)
                        WMWT (0x76, BS05)
                        WMWT (0x77, BS06)
                        WMWT (0x78, BS07)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x02))
                    {
                        WMWT (0x89, BS00)
                        WMWT (0x8A, BS01)
                        WMWT (0x8B, BS02)
                        WMWT (0x8C, BS03)
                        WMWT (0x8D, BS04)
                        WMWT (0x8E, BS05)
                        WMWT (0x8F, BS06)
                        WMWT (0x90, BS07)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x13))
                {
                    If ((IPAR == Zero))
                    {
                        BL01 = WMRD (0x28)
                        BL02 = WMRD (0x29)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == One))
                    {
                        BL01 = WMRD (0x2E)
                        BL02 = WMRD (0x2F)
                        BL03 = WMRD (0x2C)
                        BL04 = WMRD (0x2D)
                        BL05 = WMRD (0x2A)
                        BL06 = WMRD (0x2B)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x14))
                {
                    If ((IPAR == Zero))
                    {
                        WMWT (0x28, BS00)
                        WMWT (0x29, BS01)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == One))
                    {
                        WMWT (0x2E, BS00)
                        WMWT (0x2F, BS01)
                        WMWT (0x2C, BS02)
                        WMWT (0x2D, BS03)
                        WMWT (0x2A, BS04)
                        WMWT (0x2B, BS05)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x15))
                {
                    If ((IPAR == Zero))
                    {
                        BL01 = WMRD (0x30)
                        BL02 = WMRD (0xBE)
                        BL03 = WMRD (0xBF)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x16))
                {
                    If ((IPAR == Zero))
                    {
                        WMWT (0x30, BS00)
                        WMWT (0xBE, BS01)
                        WMWT (0xBF, BS02)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x17))
                {
                    If ((IPAR == Zero))
                    {
                        BL01 = WMRD (0xC0)
                        BL02 = WMRD (0xC1)
                        BL03 = WMRD (0xC2)
                        BL04 = WMRD (0xC3)
                        BL05 = WMRD (0xC4)
                        BL06 = WMRD (0xC5)
                        BL07 = WMRD (0xC6)
                        BL08 = WMRD (0xC7)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == One))
                    {
                        BL01 = WMRD (0x35)
                        BL02 = WMRD (0x36)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x18))
                {
                    If ((IPAR == Zero))
                    {
                        WMWT (0xC0, BS00)
                        WMWT (0xC1, BS01)
                        WMWT (0xC2, BS02)
                        WMWT (0xC3, BS03)
                        WMWT (0xC4, BS04)
                        WMWT (0xC5, BS05)
                        WMWT (0xC6, BS06)
                        WMWT (0xC7, BS07)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == One))
                    {
                        WMWT (0x35, BS00)
                        WMWT (0x36, BS01)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x19))
                {
                    If ((IPAR == Zero))
                    {
                        BL01 = WMRD (0xD0)
                        BL02 = WMRD (0xD1)
                        BL03 = WMRD (0xD2)
                        BL04 = WMRD (0xD3)
                        BL05 = WMRD (0xD7)
                        BL06 = WMRD (0xDB)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == One))
                    {
                        BL01 = WMRD (0xD4)
                        BL02 = WMRD (0xD5)
                        BL03 = WMRD (0xD6)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x02))
                    {
                        BL01 = WMRD (0xD8)
                        BL02 = WMRD (0xD9)
                        BL03 = WMRD (0xDA)
                        BL04 = WMRD (0xDC)
                        BL05 = WMRD (0xDD)
                        BL06 = WMRD (0xDE)
                        BL07 = WMRD (0xDF)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x1A))
                {
                    If ((IPAR == Zero))
                    {
                        WMWT (0xD0, BS00)
                        WMWT (0xD1, BS01)
                        WMWT (0xD2, BS02)
                        WMWT (0xD3, BS03)
                        WMWT (0xD7, BS04)
                        WMWT (0xDB, BS05)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == One))
                    {
                        WMWT (0xD4, BS00)
                        WMWT (0xD5, BS01)
                        WMWT (0xD6, BS02)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }

                    If ((IPAR == 0x02))
                    {
                        WMWT (0xD8, BS00)
                        WMWT (0xD9, BS01)
                        WMWT (0xDA, BS02)
                        WMWT (0xDC, BS03)
                        WMWT (0xDD, BS04)
                        WMWT (0xDE, BS05)
                        WMWT (0xDF, BS06)
                        BL00 = One
                        Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                    }
                }

                If ((Arg1 == 0x1B))
                {
                    BL01 = WMRD (IPAR)
                    BL00 = One
                    Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                }

                If ((Arg1 == 0x1C))
                {
                    WMWT (IPAR, BS00)
                    BL00 = One
                    Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                }

                If ((Arg1 == 0x1D))
                {
                    BL01 = MAJR /* \_SB_.PC00.LPCB.EC__.SCM0.MAJR */
                    BL02 = MINR /* \_SB_.PC00.LPCB.EC__.SCM0.MINR */
                    BL00 = One
                    Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
                }

                Return (BFL0) /* \_SB_.PC00.LPCB.EC__.SCM0.BFL0 */
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xC0))
                {
                    Name (EVRT, Buffer (0x02)
                    {
                         0x00, 0x00                                       // ..
                    })
                    Name (TMPB, Zero)
                    TMPB = WMRD (0xD8)
                    EVRT [Zero] = TMPB /* \_SB_.PC00.LPCB.EC__.SCM0._WED.TMPB */
                    If ((TMPB == 0x08))
                    {
                        EVRT [One] = ((WMRD (0xE4) >> 0x03) & 0x1F
                            )
                    }

                    If ((TMPB == 0x56))
                    {
                        EVRT [One] = WMRD (0x2E)
                    }

                    If ((TMPB == 0x57))
                    {
                        EVRT [One] = WMRD (0x2E)
                    }

                    If ((TMPB == 0x5F))
                    {
                        EVRT [One] = WMRD (0x2E)
                    }

                    If ((TMPB == 0x60))
                    {
                        EVRT [One] = (WMRD (0xE4) & 0x07)
                    }

                    If ((TMPB == 0x62))
                    {
                        EVRT [One] = WMRD (0xD1)
                    }

                    If ((TMPB == 0x63))
                    {
                        EVRT [One] = WMRD (0xD1)
                    }

                    If ((TMPB == 0x73))
                    {
                        EVRT [One] = ((WMRD (0xE4) >> 0x03) & 0x1F
                            )
                    }

                    If ((TMPB == 0x79))
                    {
                        EVRT [One] = ((WMRD (0xE4) >> 0x03) & 0x1F
                            )
                    }

                    If ((TMPB == 0x7B))
                    {
                        EVRT [One] = WMRD (0x2E)
                    }

                    If ((TMPB == 0x84))
                    {
                        EVRT [One] = WMRD (0x2E)
                    }

                    If ((TMPB == 0x02))
                    {
                        EVRT [One] = ((WMRD (0xE4) >> 0x03) & 0x1F
                            )
                    }

                    WMWT (0xD8, Zero)
                    Return (EVRT) /* \_SB_.PC00.LPCB.EC__.SCM0._WED.EVRT */
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (PBST, One)
            Name (UPPS, Zero)
            Name (PBLV, Zero)
            Method (PKG2, 2, Serialized)
            {
                Name (PKG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                PKG [Zero] = Arg0
                PKG [One] = Arg1
                Return (PKG) /* \_SB_.PWRB.PKG2.PKG_ */
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Name (GPEB, Zero)
                Return (Package (0x02)
                {
                    0x1E, 
                    0x04
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PBST)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (PBUP, 0, NotSerialized)
            {
                If (UPPS)
                {
                    Notify (PWRB, 0xC0) // Hardware-Specific
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("9c355bcb-35fa-44f7-8a67-447359c36a03") /* Unknown UUID */))
                {
                    If ((Zero == ToInteger (Arg1)))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x07                                             // .
                                })
                            }
                            Case (One)
                            {
                                UPPS = One
                                Return (Zero)
                            }
                            Case (0x02)
                            {
                                If (UPPS)
                                {
                                    If (!PBLV)
                                    {
                                        Return (Zero)
                                    }
                                    Else
                                    {
                                        Return (One)
                                    }
                                }
                                ElseIf (^^PC00.LPCB.PRBL)
                                {
                                    Return (Zero)
                                }
                                Else
                                {
                                    Return (One)
                                }
                            }

                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (HIDD)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return ("INTC1077")
            }

            Name (HBSY, Zero)
            Name (HIDX, Zero)
            Name (HMDE, Zero)
            Name (HRDY, Zero)
            Name (BTLD, Zero)
            Name (BTS1, Zero)
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (((OSYS >= 0x07DD) && (HEFE == One)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (HDDM, 0, Serialized)
            {
                Name (DPKG, Package (0x04)
                {
                    0x11111111, 
                    0x22222222, 
                    0x33333333, 
                    0x44444444
                })
                Return (DPKG) /* \_SB_.HIDD.HDDM.DPKG */
            }

            Method (HDEM, 0, Serialized)
            {
                HBSY = Zero
                If ((HMDE == Zero))
                {
                    Return (HIDX) /* \_SB_.HIDD.HIDX */
                }

                Return (HMDE) /* \_SB_.HIDD.HMDE */
            }

            Method (HDMM, 0, Serialized)
            {
                Return (HMDE) /* \_SB_.HIDD.HMDE */
            }

            Method (HDSM, 1, Serialized)
            {
                HRDY = Arg0
            }

            Method (HPEM, 1, Serialized)
            {
                HBSY = One
                If ((HMDE == Zero))
                {
                    HIDX = Arg0
                }
                Else
                {
                    HIDX = Arg0
                }

                Notify (HIDD, 0xC0) // Hardware-Specific
                Local0 = Zero
                While (((Local0 < 0xFA) && HBSY))
                {
                    Sleep (0x04)
                    Local0++
                }

                If ((HBSY == One))
                {
                    HBSY = Zero
                    HIDX = Zero
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (BTNL, 0, Serialized)
            {
                If (CondRefOf (\_SB.PWRB.PBST))
                {
                    ^^PWRB.PBST = Zero
                    Notify (PWRB, One) // Device Check
                }

                BTLD = One
                If ((AEAB == One))
                {
                    If ((S0ID == Zero))
                    {
                        BTS1 = 0x1E
                    }
                    Else
                    {
                        BTS1 = One
                    }
                }
                Else
                {
                    BTS1 = Zero
                }
            }

            Method (BTNE, 1, Serialized)
            {
                If ((AEAB == One))
                {
                    BTS1 = ((Arg0 & 0x1E) | One)
                }
            }

            Method (BTNS, 0, Serialized)
            {
                If ((AEAB == One))
                {
                    BTS1 = One
                }

                Return (BTS1) /* \_SB_.HIDD.BTS1 */
            }

            Method (BTNC, 0, Serialized)
            {
                If ((AEAB == One))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (HEB2, 0x0002C000)
            Method (HEBC, 0, Serialized)
            {
                If ((AHDB == One))
                {
                    Return (HEB1) /* \HEB1 */
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (H2BC, 0, Serialized)
            {
                If ((AHDB == One))
                {
                    Return (HEB1) /* \HEB1 */
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (HEEC, 0, Serialized)
            {
                If ((AHDB == One))
                {
                    Return (HEB2) /* \_SB_.HIDD.HEB2 */
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("eeec56b3-4442-408f-a792-4edd4d758054") /* Unknown UUID */))
                {
                    If ((One == ToInteger (Arg1)))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (0x02)
                                {
                                     0xFF, 0x03                                       // ..
                                })
                            }
                            Case (One)
                            {
                                BTNL ()
                            }
                            Case (0x02)
                            {
                                Return (HDMM ())
                            }
                            Case (0x03)
                            {
                                HDSM (DerefOf (Arg3 [Zero]))
                            }
                            Case (0x04)
                            {
                                Return (HDEM ())
                            }
                            Case (0x05)
                            {
                                Return (BTNS ())
                            }
                            Case (0x06)
                            {
                                BTNE (DerefOf (Arg3 [Zero]))
                            }
                            Case (0x07)
                            {
                                Return (HEBC ())
                            }
                            Case (0x08)
                            {
                                Return (^^PC00.LPCB.EC.VGBS ())
                            }
                            Case (0x09)
                            {
                                Return (H2BC ())
                            }

                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Method (PWPR, 0, Serialized)
        {
            If (((OSYS >= 0x07DF) && ^HIDD.BTLD))
            {
                Notify (HIDD, 0xCE) // Hardware-Specific
            }
            Else
            {
                If ((^PWRB.PBST == One))
                {
                    Notify (PWRB, 0x80) // Status Change
                    ^PWRB.PBLV = One
                }

                If (CondRefOf (\_SB.PC00.GFX0.IUER))
                {
                    Local0 = ^PC00.GFX0.IUER /* External reference */
                    ^PC00.GFX0.IUER = (Local0 & 0xC0)
                    Local0 = ^PC00.GFX0.IUER /* External reference */
                    ^PC00.GFX0.IUER = (Local0 | One)
                }
            }
        }

        Method (PWRR, 0, Serialized)
        {
            If (((OSYS >= 0x07DF) && ^HIDD.BTLD))
            {
                Notify (HIDD, 0xCF) // Hardware-Specific
            }
            Else
            {
                If ((^PWRB.PBST == One))
                {
                    ^PWRB.PBUP ()
                    ^PWRB.PBLV = Zero
                }

                If (CondRefOf (\_SB.PC00.GFX0.IUER))
                {
                    Local0 = ^PC00.GFX0.IUER /* External reference */
                    ^PC00.GFX0.IUER = (Local0 & 0xC0)
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (BTNS)
        {
            Name (_HID, "ACPI0011" /* Generic Buttons Device */)  // _HID: Hardware ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFI, ResourceTemplate ()
                {
                    GpioInt (Edge, ActiveBoth, Shared, PullNone, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                CreateWordField (SBFI, 0x17, SDIP)
                SDIP = GNUM (0x00141087)
                Return (SBFI) /* \_SB_.BTNS._CRS.SBFI */
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("fa6bd625-9ce8-470d-a2c7-b3ca36c4282e") /* Generic Buttons Device */, 
                Package (0x02)
                {
                    Package (0x05)
                    {
                        Zero, 
                        One, 
                        Zero, 
                        One, 
                        0x0C
                    }, 

                    Package (0x05)
                    {
                        One, 
                        Zero, 
                        One, 
                        One, 
                        0xC6
                    }
                }
            })
        }
    }

    Scope (_SB)
    {
        Name (MAPT, Buffer (0x11)
        {
            /* 0000 */  0x58, 0x52, 0x54, 0x58, 0x4D, 0x41, 0x43, 0x58,  // XRTXMACX
            /* 0008 */  0x23, 0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0x23,  // #.4Vx..#
            /* 0010 */  0x00                                             // .
        })
    }

    Scope (_SB.PC00.I2C0)
    {
        Device (TPL1)
        {
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Name (SADR, Buffer (One)
            {
                 0x01                                             // .
            })
            Name (HIDS, Package (0x01)
            {
                "NVTK0603"
            })
            Name (HIDA, Buffer (One)
            {
                 0x00                                             // .
            })
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return ("NVTK0603")
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFI, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0001, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C0",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveHigh, Exclusive, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0160
                        }
                })
                Return (SBFI) /* \_SB_.PC00.I2C0.TPL1._CRS.SBFI */
            }
        }
    }

    Scope (_SB.PC00.LPCB)
    {
    }

    Device (_SB.TPM)
    {
        Name (TMRQ, 0x00000000)
        Name (TLVL, 0xFFFFFFFF)
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACC0,   8, 
            Offset (0x08), 
            INTE,   32, 
            INTV,   8, 
            Offset (0x10), 
            INTS,   32, 
            INTF,   32, 
            TSTS,   32, 
            Offset (0x24), 
            FIFO,   32, 
            Offset (0x30), 
            IDTF,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y88)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y89)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y8A)
        })
        Name (CRID, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y8B)
        })
        Name (CREI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y8C)
            {
                0x00000000,
            }
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y88._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y88._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = TPBS /* \TPBS */
                CreateDWordField (CRST, \_SB.TPM._Y89._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y89._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = TPCS /* \TPCS */
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTP1 == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y8A._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y8A._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    If (((TMRQ == Zero) || (TMRQ == 0xFFFFFFFF)))
                    {
                        CreateDWordField (CRID, \_SB.TPM._Y8B._BAS, MTFD)  // _BAS: Base Address
                        CreateDWordField (CRID, \_SB.TPM._Y8B._LEN, LTFD)  // _LEN: Length
                        MTFD = 0xFED40000
                        LTFD = 0x5000
                        Return (CRID) /* \_SB_.TPM_.CRID */
                    }
                    Else
                    {
                        CreateDWordField (CREI, \_SB.TPM._Y8C._INT, LIRQ)  // _INT: Interrupts
                        LIRQ = TMRQ /* \_SB_.TPM_.TMRQ */
                        Return (CREI) /* \_SB_.TPM_.CREI */
                    }
                }
                ElseIf ((TTPF == Zero))
                {
                    CreateDWordField (CRST, \_SB.TPM._Y89._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRID) /* \_SB_.TPM_.CRID */
            }

            Return (CRID) /* \_SB_.TPM_.CRID */
        }

        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
        {
            If (((TMRQ != Zero) && (TMRQ != 0xFFFFFFFF)))
            {
                CreateDWordField (Arg0, 0x11, IRQ0)
                CreateDWordField (CREI, \_SB.TPM._Y8C._INT, LIRQ)  // _INT: Interrupts
                LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                TMRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                CreateBitField (Arg0, 0x79, ITRG)
                CreateBitField (CREI, \_SB.TPM._Y8C._HE, LTRG)  // _HE_: High-Edge
                LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                CreateBitField (Arg0, 0x7A, ILVL)
                CreateBitField (CREI, \_SB.TPM._Y8C._LL, LLVL)  // _LL_: Low Level
                LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                If ((((IDTF & 0x0F) == Zero) || ((IDTF & 0x0F
                    ) == 0x0F)))
                {
                    If ((IRQ0 < 0x10))
                    {
                        INTV = (IRQ0 & 0x0F)
                    }

                    If ((ITRG == One))
                    {
                        INTE |= 0x10
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFEF
                    }

                    If ((ILVL == Zero))
                    {
                        INTE |= 0x08
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFF7
                    }
                }
            }
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, One)
        Field (TSMI, ByteAcc, NoLock, Preserve)
        {
            SMI,    8
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }
        }
    }
}



DTPR
----
[000h 0000 004h]                   Signature : "DTPR"    
[004h 0004 004h]                Table Length : 00000088
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : BB
[00Ah 0010 006h]                      Oem ID : ""
[010h 0016 008h]                Oem Table ID : ""
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : ""
[020h 0032 004h]       Asl Compiler Revision : 00000000


**** Unknown ACPI table signature [DTPR]


Raw Table Data: Length 136 (0x88)

    0000: 44 54 50 52 88 00 00 00 01 BB 00 00 00 00 00 00  // DTPR............
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    0030: 02 00 00 00 60 16 DD FE 00 00 00 00 90 16 DD FE  // ....`...........
    0040: 00 00 00 00 08 00 00 00 28 BD 28 D0 00 00 00 00  // ........(.(.....
    0050: 28 3D 29 D0 00 00 00 00 28 BD 31 D0 00 00 00 00  // (=).....(.1.....
    0060: 28 BD 29 D0 00 00 00 00 28 BD 38 D0 00 00 00 00  // (.).....(.8.....
    0070: 28 3D 39 D0 00 00 00 00 28 BD 30 D0 00 00 00 00  // (=9.....(.0.....
    0080: 28 3D 31 D0 00 00 00 00                          // (=1.....


FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 00000114
[008h 0008 001h]                    Revision : 06
[009h 0009 001h]                    Checksum : 1B
[00Ah 0010 006h]                      Oem ID : "MSI_NB"
[010h 0016 008h]                Oem Table ID : "MEGABOOK"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 01000013

[024h 0036 004h]                FACS Address : 658F5000
[028h 0040 004h]                DSDT Address : 6573B000
[02Ch 0044 001h]                       Model : 00
[02Dh 0045 001h]                  PM Profile : 02 [Mobile]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B2
[034h 0052 001h]           ACPI Enable Value : A0
[035h 0053 001h]          ACPI Disable Value : A1
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 00
[038h 0056 004h]    PM1A Event Block Address : 00001800
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00001804
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 00001850
[04Ch 0076 004h]      PM Timer Block Address : 00001808
[050h 0080 004h]          GPE0 Block Address : 00001860
[054h 0084 004h]          GPE1 Block Address : 00001810
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 20
[05Dh 0093 001h]           GPE1 Block Length : 18
[05Eh 0094 001h]            GPE1 Base Offset : 80
[05Fh 0095 001h]                _CST Support : 00
[060h 0096 002h]                  C2 Latency : 0065
[062h 0098 002h]                  C3 Latency : 03E9
[064h 0100 002h]              CPU Cache Size : 0400
[066h 0102 002h]          Cache Flush Stride : 0010
[068h 0104 001h]           Duty Cycle Offset : 00
[069h 0105 001h]            Duty Cycle Width : 00
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 32
[06Dh 0109 002h]  Boot Flags (decoded below) : 0012
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 002384E5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 1
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 1

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 01 [Byte Access:8]
[078h 0120 008h]                     Address : 0000000000000CF9

[080h 0128 001h]        Value to cause reset : 06
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 05
[084h 0132 008h]                FACS Address : 0000000000000000
[08Ch 0140 008h]                DSDT Address : 000000006573B000
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 02 [Word Access:16]
[098h 0152 008h]                     Address : 0000000000001800

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 01 [SystemIO]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 02 [Word Access:16]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000001804

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 01 [SystemIO]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 02 [Word Access:16]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200 008h]                     Address : 0000000000001850

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000001808

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 00
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224 008h]                     Address : 0000000000001860

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 01 [SystemIO]
[0E9h 0233 001h]                   Bit Width : C0
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236 008h]                     Address : 0000000000001810


[0F4h 0244 00Ch]      Sleep Control Register : [Generic Address Structure]
[0F4h 0244 001h]                    Space ID : 00 [SystemMemory]
[0F5h 0245 001h]                   Bit Width : 00
[0F6h 0246 001h]                  Bit Offset : 00
[0F7h 0247 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248 008h]                     Address : 0000000000000000

[100h 0256 00Ch]       Sleep Status Register : [Generic Address Structure]
[100h 0256 001h]                    Space ID : 00 [SystemMemory]
[101h 0257 001h]                   Bit Width : 00
[102h 0258 001h]                  Bit Offset : 00
[103h 0259 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260 008h]                     Address : 0000000000000000

[10Ch 0268 008h]               Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 1B 4D 53 49 5F 4E 42  // FACP......MSI_NB
    0010: 4D 45 47 41 42 4F 4F 4B 09 20 07 01 41 4D 49 20  // MEGABOOK. ..AMI 
    0020: 13 00 00 01 00 50 8F 65 00 B0 73 65 00 02 09 00  // .....P.e..se....
    0030: B2 00 00 00 A0 A1 00 00 00 18 00 00 00 00 00 00  // ................
    0040: 04 18 00 00 00 00 00 00 50 18 00 00 08 18 00 00  // ........P.......
    0050: 60 18 00 00 10 18 00 00 04 02 01 04 20 18 80 00  // `........... ...
    0060: 65 00 E9 03 00 04 10 00 00 00 0D 00 32 12 00 00  // e...........2...
    0070: E5 84 23 00 01 08 00 01 F9 0C 00 00 00 00 00 00  // ..#.............
    0080: 06 00 00 05 00 00 00 00 00 00 00 00 00 B0 73 65  // ..............se
    0090: 00 00 00 00 01 20 00 02 00 18 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 18 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 50 18 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 03 08 18 00 00 00 00 00 00 01 00 00 01  // . ..............
    00E0: 60 18 00 00 00 00 00 00 01 C0 00 01 10 18 00 00  // `...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : 671B8CE1
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 02
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 E1 8C 1B 67 00 00 00 00  // FACS@......g....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000 004h]                   Signature : "FIDT"    
[004h 0004 004h]                Table Length : 0000009C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 36
[00Ah 0010 006h]                      Oem ID : "MSI_NB"
[010h 0016 008h]                Oem Table ID : "MEGABOOK"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 36 4D 53 49 5F 4E 42  // FIDT.....6MSI_NB
    0010: 4D 45 47 41 42 4F 4F 4B 09 20 07 01 41 4D 49 20  // MEGABOOK. ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 31 54 34 31 30  // ....$FID.x.1T410
    0030: 31 30 41 00 CF CC 05 3D 3C 05 AB 41 8F 9C AC BB  // 10A....=<..A....
    0040: FD 4B B6 E1 30 35 00 33 32 00 30 31 00 31 30 00  // .K..05.32.01.10.
    0050: E8 07 06 03 09 2C 2F FF FF 4D 53 49 5F 4E 42 4D  // .....,/..MSI_NBM
    0060: 45 47 41 42 4F 4F 4B 31 00 00 00 FF FF FF FF FF  // EGABOOK1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000 004h]                   Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004 004h]                Table Length : 00000044
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 46
[00Ah 0010 006h]                      Oem ID : "MSI_NB"
[010h 0016 008h]                Oem Table ID : "A M I "
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 01000013


[024h 0036 002h]               Subtable Type : 0000
[026h 0038 001h]                      Length : 10
[027h 0039 001h]                    Revision : 01
[028h 0040 004h]                    Reserved : 00000000
[02Ch 0044 008h]    FPDT Boot Record Address : 0000000063D60000

[034h 0052 002h]               Subtable Type : 0001
[036h 0054 001h]                      Length : 10
[037h 0055 001h]                    Revision : 01
[038h 0056 004h]                    Reserved : 00000000
[03Ch 0060 008h]         S3PT Record Address : 000000005EA2A000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 46 4D 53 49 5F 4E 42  // FPDTD....FMSI_NB
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 00 01 00 00 10 01 00 00 00 00 00 00 D6 63  // ...............c
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 A0 A2 5E  // ...............^
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 06
[00Ah 0010 006h]                      Oem ID : "MSI_NB"
[010h 0016 008h]                Oem Table ID : "MEGABOOK"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 01000013

[024h 0036 004h]           Hardware Block ID : 8086A201

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 40
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 0080
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 06 4D 53 49 5F 4E 42  // HPET8.....MSI_NB
    0010: 4D 45 47 41 42 4F 4F 4B 09 20 07 01 41 4D 49 20  // MEGABOOK. ..AMI 
    0020: 13 00 00 01 01 A2 86 80 00 40 00 00 00 00 D0 FE  // .........@......
    0030: 00 00 00 00 00 80 00 00                          // ........


LPIT
----
[000h 0000 004h]                   Signature : "LPIT"    [Low Power Idle Table]
[004h 0004 004h]                Table Length : 000000CC
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 63
[00Ah 0010 006h]                      Oem ID : "MSI_NB"
[010h 0016 008h]                Oem Table ID : "MEGABOOK"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 01000013

[024h 0036 004h]               Subtable Type : 00000000 [Native C-state Idle Structure]
[028h 0040 004h]                      Length : 00000038
[02Ch 0044 002h]                   Unique ID : 0000
[02Eh 0046 002h]                    Reserved : 0000
[030h 0048 004h]       Flags (decoded below) : 00000000
                              State Disabled : 0
                                  No Counter : 0

[034h 0052 00Ch]               Entry Trigger : [Generic Address Structure]
[034h 0052 001h]                    Space ID : 7F [FunctionalFixedHW]
[035h 0053 001h]                   Bit Width : 01
[036h 0054 001h]                  Bit Offset : 02
[037h 0055 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[038h 0056 008h]                     Address : 0000000000000060

[040h 0064 004h]                   Residency : 00007530
[044h 0068 004h]                     Latency : 00000BB8
[048h 0072 00Ch]           Residency Counter : [Generic Address Structure]
[048h 0072 001h]                    Space ID : 7F [FunctionalFixedHW]
[049h 0073 001h]                   Bit Width : 40
[04Ah 0074 001h]                  Bit Offset : 00
[04Bh 0075 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[04Ch 0076 008h]                     Address : 0000000000000632

[054h 0084 008h]           Counter Frequency : 0000000000000000

[05Ch 0092 004h]               Subtable Type : 00000000 [Native C-state Idle Structure]
[060h 0096 004h]                      Length : 00000038
[064h 0100 002h]                   Unique ID : 0001
[066h 0102 002h]                    Reserved : 0000
[068h 0104 004h]       Flags (decoded below) : 00000000
                              State Disabled : 0
                                  No Counter : 0

[06Ch 0108 00Ch]               Entry Trigger : [Generic Address Structure]
[06Ch 0108 001h]                    Space ID : 7F [FunctionalFixedHW]
[06Dh 0109 001h]                   Bit Width : 01
[06Eh 0110 001h]                  Bit Offset : 02
[06Fh 0111 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[070h 0112 008h]                     Address : 0000000000000060

[078h 0120 004h]                   Residency : 00007530
[07Ch 0124 004h]                     Latency : 00000BB8
[080h 0128 00Ch]           Residency Counter : [Generic Address Structure]
[080h 0128 001h]                    Space ID : 00 [SystemMemory]
[081h 0129 001h]                   Bit Width : 20
[082h 0130 001h]                  Bit Offset : 00
[083h 0131 001h]        Encoded Access Width : 03 [DWord Access:32]
[084h 0132 008h]                     Address : 00000000FE00193C

[08Ch 0140 008h]           Counter Frequency : 0000000000002005

[094h 0148 004h]               Subtable Type : 00000000 [Native C-state Idle Structure]
[098h 0152 004h]                      Length : 00000038
[09Ch 0156 002h]                   Unique ID : 0002
[09Eh 0158 002h]                    Reserved : 0000
[0A0h 0160 004h]       Flags (decoded below) : 00000001
                              State Disabled : 1
                                  No Counter : 0

[0A4h 0164 00Ch]               Entry Trigger : [Generic Address Structure]
[0A4h 0164 001h]                    Space ID : 7F [FunctionalFixedHW]
[0A5h 0165 001h]                   Bit Width : 01
[0A6h 0166 001h]                  Bit Offset : 02
[0A7h 0167 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0A8h 0168 008h]                     Address : 0000000000000060

[0B0h 0176 004h]                   Residency : 00007530
[0B4h 0180 004h]                     Latency : 00000BB8
[0B8h 0184 00Ch]           Residency Counter : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 00 [SystemMemory]
[0B9h 0185 001h]                   Bit Width : 20
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 03 [DWord Access:32]
[0BCh 0188 008h]                     Address : 00000000000000FF

[0C4h 0196 008h]           Counter Frequency : 0000000000000000


Raw Table Data: Length 204 (0xCC)

    0000: 4C 50 49 54 CC 00 00 00 01 63 4D 53 49 5F 4E 42  // LPIT.....cMSI_NB
    0010: 4D 45 47 41 42 4F 4F 4B 09 20 07 01 41 4D 49 20  // MEGABOOK. ..AMI 
    0020: 13 00 00 01 00 00 00 00 38 00 00 00 00 00 00 00  // ........8.......
    0030: 00 00 00 00 7F 01 02 00 60 00 00 00 00 00 00 00  // ........`.......
    0040: 30 75 00 00 B8 0B 00 00 7F 40 00 00 32 06 00 00  // 0u.......@..2...
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0060: 38 00 00 00 01 00 00 00 00 00 00 00 7F 01 02 00  // 8...............
    0070: 60 00 00 00 00 00 00 00 30 75 00 00 B8 0B 00 00  // `.......0u......
    0080: 00 20 00 03 3C 19 00 FE 00 00 00 00 05 20 00 00  // . ..<........ ..
    0090: 00 00 00 00 00 00 00 00 38 00 00 00 02 00 00 00  // ........8.......
    00A0: 01 00 00 00 7F 01 02 00 60 00 00 00 00 00 00 00  // ........`.......
    00B0: 30 75 00 00 B8 0B 00 00 00 20 00 03 FF 00 00 00  // 0u....... ......
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00              // ............


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : AE
[00Ah 0010 006h]                      Oem ID : "MSI_NB"
[010h 0016 008h]                Oem Table ID : "MEGABOOK"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 01000013

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000C0000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : DF
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 AE 4D 53 49 5F 4E 42  // MCFG<.....MSI_NB
    0010: 4D 45 47 41 42 4F 4F 4B 09 20 07 01 41 4D 49 20  // MEGABOOK. ..AMI 
    0020: 13 00 00 01 00 00 00 00 00 00 00 00 00 00 00 C0  // ................
    0030: 00 00 00 00 00 00 00 DF 00 00 00 00              // ............


MSDM
----
[000h 0000 004h]                   Signature : "MSDM"    [Microsoft Data Management Table]
[004h 0004 004h]                Table Length : 00000055
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 91
[00Ah 0010 006h]                      Oem ID : "MSI_NB"
[010h 0016 008h]                Oem Table ID : "MEGABOOK"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 01000013

[024h 0036 031h] Software Licensing Structure : 4D 53 44 4D 55 00 00 00 03 91 4D 53 49 5F 4E 42 /* MSDMU.....MSI_NB */\
/* 034h 0052  16 */                            4D 45 47 41 42 4F 4F 4B 09 20 07 01 41 4D 49 20 /* MEGABOOK. ..AMI  */\
/* 044h 0068  16 */                            13 00 00 01 01 00 00 00 00 00 00 00 01 00 00 00 /* ................ */\
/* 054h 0084   1 */                            00                                              /* . */\

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 91 4D 53 49 5F 4E 42  // MSDMU.....MSI_NB
    0010: 4D 45 47 41 42 4F 4F 4B 09 20 07 01 41 4D 49 20  // MEGABOOK. ..AMI 
    0020: 13 00 00 01 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 34 38 46 59 44 2D 4E 4A  // ........48FYD-NJ
    0040: 50 34 50 2D 46 57 42 37 56 2D 33 50 37 33 34 2D  // P4P-FWB7V-3P734-
    0050: 51 47 50 52 38                                   // QGPR8


NHLT
----
[000h 0000 004h]                   Signature : "NHLT"    [Non HD Audio Link Table]
[004h 0004 004h]                Table Length : 00000960
[008h 0008 001h]                    Revision : 00
[009h 0009 001h]                    Checksum : D7
[00Ah 0010 006h]                      Oem ID : "MSI_NB"
[010h 0016 008h]                Oem Table ID : "MEGABOOK"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 01000013

    /* Main table */
[024h 0036 001h]              Endpoint Count : 03

    /* Endpoint Descriptor #1 */
[025h 0037 004h]           Descriptor Length : 0000067D
[029h 0041 001h]                   Link Type : 02 [Type PDM]
[02Ah 0042 001h]                 Instance Id : 00
[02Bh 0043 002h]                   Vendor Id : 8086
[02Dh 0045 002h]                   Device Id : AE20 [PDM DMIC]
[02Fh 0047 002h]                 Revision Id : 10EC
[031h 0049 004h]                Subsystem Id : 143A1462
[035h 0053 001h]                 Device Type : 00
[036h 0054 001h]                   Direction : 01 [Capture]
[037h 0055 001h]              Virtual Bus Id : 00

    /* Endpoint Device_Specific_Config table */
[038h 0056 004h]           Capabilities Size : 00000030
[03Ch 0060 001h]                Virtual Slot : 00
[03Dh 0061 001h]                 Config Type : 01 [Microphone Array]
[03Eh 0062 001h]                  Array Type : 0F [Vendor Defined]

    /* Vendor-defined microphone count */
[03Fh 0063 001h]            Microphone Count : 02

    /* Vendor-defined microphone array #1*/
[040h 0064 001h]                        Type : 01 [Subcardioid]
[041h 0065 001h]                       Panel : 04 [Front]
[042h 0066 002h]   Speaker Position Distance : 0000
[044h 0068 002h]           Horizontal Offset : FFB0
[046h 0070 002h]             Vertical Offset : 0000
[048h 0072 001h]          Frequency Low Band : 14
[049h 0073 001h]         Frequency High Band : 28
[04Ah 0074 002h]             Direction Angle : 0000
[04Ch 0076 002h]             Elevation Angle : 0000
[04Eh 0078 002h]   Work Vertical Angle Begin : FFC4
[050h 0080 002h]     Work Vertical Angle End : 003C
[052h 0082 002h] Work Horizontal Angle Begin : FFCE
[054h 0084 002h]   Work Horizontal Angle End : 0032

    /* Vendor-defined microphone array #2*/
[056h 0086 001h]                        Type : 01 [Subcardioid]
[057h 0087 001h]                       Panel : 04 [Front]
[058h 0088 002h]   Speaker Position Distance : 0000
[05Ah 0090 002h]           Horizontal Offset : 0050
[05Ch 0092 002h]             Vertical Offset : 0000
[05Eh 0094 001h]          Frequency Low Band : 14
[05Fh 0095 001h]         Frequency High Band : 28
[060h 0096 002h]             Direction Angle : 0000
[062h 0098 002h]             Elevation Angle : 0000
[064h 0100 002h]   Work Vertical Angle Begin : FFC4
[066h 0102 002h]     Work Vertical Angle End : 003C
[068h 0104 002h] Work Horizontal Angle Begin : FFCE
[06Ah 0106 002h]   Work Horizontal Angle End : 0032

    /* Formats_Config table */
[06Ch 0108 001h]               Formats Count : 01

    /* Wave_Format_Extensible table #1 */
[06Dh 0109 002h]                  Format Tag : FFFE
[06Fh 0111 002h]               Channel Count : 0002
[071h 0113 004h]          Samples Per Second : 0000BB80
[075h 0117 004h]    Average Bytes Per Second : 0005DC00
[079h 0121 002h]             Block Alignment : 0008
[07Bh 0123 002h]             Bits Per Sample : 0020
[07Dh 0125 002h]           Extra Format Size : 0016
[07Fh 0127 002h]       Valid Bits Per Sample : 0018
[081h 0129 004h]                Channel Mask : 00000003
[085h 0133 010h]              SubFormat GUID : 00000001-0000-0010-8000-00AA00389B71
[095h 0149 004h]         Capabilities Length : 00000608

    /* Specific_Config table #1 */
[099h 0153 608h]                Capabilities : 01 00 00 00 10 FF FF FF 10 FF FF FF FF FF FF FF /* ................ */\
/* 0A9h 0169  16 */                            FF FF FF FF 03 00 00 00 03 00 00 00 44 80 28 00 /* ............D.(. */\
/* 0B9h 0185  16 */                            44 80 20 00 01 00 00 00 01 C0 00 00 00 18 00 0B /* D. ............. */\
/* 0C9h 0201  16 */                            00 00 00 00 03 0E 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 0D9h 0217  16 */                            00 00 00 00 00 00 00 00 31 00 00 00 76 00 01 00 /* ........1...v... */\
/* 0E9h 0233  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 0F9h 0249  16 */                            00 00 00 00 00 00 00 00 31 00 00 00 E8 01 05 00 /* ........1....... */\
/* 109h 0265  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 119h 0281  16 */                            00 00 00 00 00 00 00 00 49 00 00 40 81 01 40 40 /* ........I..@..@@ */\
/* 129h 0297  16 */                            6D 03 80 40 53 04 C0 40 78 02 00 41 19 FF 4F 41 /* m..@S..@x..A..OA */\
/* 139h 0313  16 */                            ED FD 8F 41 37 00 C0 41 45 02 00 42 8C 00 40 42 /* ...A7..AE..B..@B */\
/* 149h 0329  16 */                            9B FD 8F 42 9D FE CF 42 6C 02 00 43 67 02 40 43 /* ...B...Bl..Cg.@C */\
/* 159h 0345  16 */                            B1 FD 8F 43 25 FC CF 43 6F 01 00 44 21 05 40 44 /* ...C%..Co..D!.@D */\
/* 169h 0361  16 */                            F3 FF 8F 44 C4 F9 CF 44 F9 FD 0F 45 BF 06 40 45 /* ...D...D...E..@E */\
/* 179h 0377  16 */                            8E 04 80 45 73 F9 CF 45 96 F8 0F 46 72 05 40 46 /* ...Es..E...Fr.@F */\
/* 189h 0393  16 */                            69 0A 80 46 CF FC CF 46 D1 F2 0F 47 A4 FF 4F 47 /* i..F...F...G..OG */\
/* 199h 0409  16 */                            25 0F 80 47 FC 04 C0 47 13 F0 0F 48 93 F5 4F 48 /* %..G...G...H..OH */\
/* 1A9h 0425  16 */                            33 0F 80 48 68 10 C0 48 75 F3 0F 49 99 E9 4F 49 /* 3..Hh..Hu..I..OI */\
/* 1B9h 0441  16 */                            A2 07 80 49 90 1B C0 49 65 FF 0F 4A C2 E0 4F 4A /* ...I...Ie..J..OJ */\
/* 1C9h 0457  16 */                            99 F7 8F 4A 92 20 C0 4A C4 12 00 4B 03 E1 4F 4B /* ...J. .J...K..OK */\
/* 1D9h 0473  16 */                            2C E2 8F 4B F2 19 C0 4B A3 28 00 4C F5 EE 4F 4C /* ,..K...K.(.L..OL */\
/* 1E9h 0489  16 */                            29 CE 8F 4C 84 04 C0 4C 40 38 00 4D 2C 0B 40 4D /* )..L...L@8.M,.@M */\
/* 1F9h 0505  16 */                            5E C5 8F 4D E9 E2 CF 4D F5 37 00 4E F8 2F 40 4E /* ^..M...M.7.N./@N */\
/* 209h 0521  16 */                            92 D0 8F 4E E1 BD CF 4E DD 20 00 4F 18 52 40 4F /* ...N...N. .O.R@O */\
/* 219h 0537  16 */                            4F F4 8F 4F B2 A2 CF 4F 4D F0 0F 50 08 60 40 50 /* O..O...OM..P.`@P */\
/* 229h 0553  16 */                            78 2D 80 50 80 A5 CF 50 54 B3 0F 51 82 4A 40 51 /* x-.P...PT..Q.J@Q */\
/* 239h 0569  16 */                            A2 69 80 51 00 D0 CF 51 F5 7E 0F 52 5C 0B 40 52 /* .i.Q...Q.~.R\.@R */\
/* 249h 0585  16 */                            CF 8E 80 52 52 21 C0 52 DC 70 0F 53 96 AD 4F 53 /* ...RR!.R.p.S..OS */\
/* 259h 0601  16 */                            06 7F 80 53 C7 82 C0 53 0A A3 0F 54 8D 53 4F 54 /* ...S...S...T.SOT */\
/* 269h 0617  16 */                            C1 28 80 54 14 C8 C0 54 21 1B 00 55 23 32 4F 55 /* .(.T...T!..U#2OU */\
/* 279h 0633  16 */                            41 97 8F 55 F2 B6 C0 55 87 B6 00 56 02 81 4F 56 /* A..U...U...V..OV */\
/* 289h 0649  16 */                            43 08 8F 56 34 25 C0 56 19 1C 01 57 7E 50 40 57 /* C..V4%.V...W~P@W */\
/* 299h 0665  16 */                            24 EE 8E 57 FD 2C CF 57 1C C9 00 58 71 47 41 58 /* $..W.,.W...XqGAX */\
/* 2A9h 0681  16 */                            01 C6 8F 58 BA 79 CE 58 6B 6E 0F 59 BE 5E 41 59 /* ...X.y.Xkn.Y.^AY */\
/* 2B9h 0697  16 */                            00 70 81 59 76 5B CF 59 77 F7 0D 5A AC 51 4F 5A /* .p.Yv[.Yw..Z.QOZ */\
/* 2C9h 0713  16 */                            09 CF 81 5A 53 36 C2 5A 37 CE 0F 5B A8 3D 4D 5B /* ...ZS6.Z7..[.=M[ */\
/* 2D9h 0729  16 */                            B8 65 8D 5B EF 50 C0 5B 37 8E 03 5C B2 E2 44 5C /* .e.[.P.[7..\..D\ */\
/* 2E9h 0745  16 */                            A5 11 84 5C A3 59 C2 5C 48 F2 00 5D 0E 3F 40 5D /* ...\.Y.\H..].?@] */\
/* 2F9h 0761  16 */                            39 08 80 5D 1B 00 00 80 18 00 40 80 0A 00 80 80 /* 9..]......@..... */\
/* 309h 0777  16 */                            D7 FF CF 80 67 FF 0F 81 A2 FE 4F 81 76 FD 8F 81 /* ....g.....O.v... */\
/* 319h 0793  16 */                            DD FB CF 81 E2 F9 0F 82 A8 F7 4F 82 67 F5 8F 82 /* ..........O.g... */\
/* 329h 0809  16 */                            6C F3 CF 82 0B F2 0F 83 97 F1 4F 83 4A F2 8F 83 /* l.........O.J... */\
/* 339h 0825  16 */                            3B F4 CF 83 51 F7 0F 84 3F FB 4F 84 88 FF 8F 84 /* ;...Q...?.O..... */\
/* 349h 0841  16 */                            92 03 C0 84 C0 06 00 85 8B 08 40 85 A2 08 80 85 /* ..........@..... */\
/* 359h 0857  16 */                            FD 06 C0 85 E9 03 00 86 FC FF 4F 86 FF FB 8F 86 /* ..........O..... */\
/* 369h 0873  16 */                            C8 F8 CF 86 0F F7 0F 87 45 F7 4F 87 75 F9 8F 87 /* ........E.O.u... */\
/* 379h 0889  16 */                            3D FD CF 87 DA 01 00 88 4C 06 40 88 8F 09 80 88 /* =.......L.@..... */\
/* 389h 0905  16 */                            D0 0A C0 88 A4 09 00 89 27 06 40 89 FF 00 80 89 /* ........'.@..... */\
/* 399h 0921  16 */                            43 FB CF 89 3C F6 0F 8A 26 F3 4F 8A DD F2 8F 8A /* C...<...&.O..... */\
/* 3A9h 0937  16 */                            A5 F5 CF 8A 11 FB 0F 8B 0C 02 40 8B 0E 09 80 8B /* ..........@..... */\
/* 3B9h 0953  16 */                            72 0E C0 8B D3 10 00 8C 69 0F 40 8C 42 0A 80 8C /* r.......i.@.B... */\
/* 3C9h 0969  16 */                            4F 02 C0 8C 3E F9 0F 8D 20 F1 4F 8D F1 EB 8F 8D /* O...>... .O..... */\
/* 3D9h 0985  16 */                            25 EB CF 8D 3D EF 0F 8E 9D F7 4F 8E 96 02 80 8E /* %...=.....O..... */\
/* 3E9h 1001  16 */                            BD 0D C0 8E 6D 16 00 8F 67 1A 40 8F 5F 18 80 8F /* ....m...g.@._... */\
/* 3F9h 1017  16 */                            61 10 C0 8F E4 03 00 90 8F F5 4F 90 AB E8 8F 90 /* a.........O..... */\
/* 409h 1033  16 */                            66 E0 CF 90 12 DF 0F 91 83 E5 4F 91 C3 F2 8F 91 /* f.........O..... */\
/* 419h 1049  16 */                            27 04 C0 91 D6 15 00 92 99 23 40 92 D9 29 80 92 /* '........#@..).. */\
/* 429h 1065  16 */                            84 26 C0 92 AA 19 00 93 A6 05 40 93 B6 EE 8F 93 /* .&........@..... */\
/* 439h 1081  16 */                            21 DA CF 93 09 CD 0F 94 2C CB 4F 94 E8 D5 8F 94 /* !.......,.O..... */\
/* 449h 1097  16 */                            B1 EB CF 94 38 08 00 95 31 25 40 95 AF 3B 80 95 /* ....8...1%@..;.. */\
/* 459h 1113  16 */                            B6 45 C0 95 C0 3F 00 96 C6 29 40 96 99 07 80 96 /* .E...?...)@..... */\
/* 469h 1129  16 */                            4C E0 CF 96 DB BC 0F 97 3A A6 4F 97 39 A3 8F 97 /* L.......:.O.9... */\
/* 479h 1145  16 */                            AF B6 CF 97 6D DE 0F 98 33 13 40 98 D5 49 80 98 /* ....m...3.@..I.. */\
/* 489h 1161  16 */                            5A 75 C0 98 C4 89 00 99 ED 7E 40 99 D5 52 80 99 /* Zu.......~@..R.. */\
/* 499h 1177  16 */                            E7 0A C0 99 CC B3 0F 9A B8 5F 4F 9A 67 23 8F 9A /* ........._O.g#.. */\
/* 4A9h 1193  16 */                            59 12 CF 9A EA 3A 0F 9B 13 A3 4F 9B 87 46 80 9B /* Y....:....O..F.. */\
/* 4B9h 1209  16 */                            8B 16 C1 9B BC FB 01 9C 6F D9 42 9C 33 92 83 9C /* ........o.B.3... */\
/* 4C9h 1225  16 */                            98 0C C4 9C 6B 37 04 9D 98 0C 44 9D 33 92 83 9D /* ....k7....D.3... */\
/* 4D9h 1241  16 */                            6F D9 C2 9D BC FB 01 9E 8B 16 41 9E 87 46 80 9E /* o.........A..F.. */\
/* 4E9h 1257  16 */                            13 A3 CF 9E EA 3A 0F 9F 59 12 4F 9F 67 23 8F 9F /* .....:..Y.O.g#.. */\
/* 4F9h 1273  16 */                            B8 5F CF 9F CC B3 0F A0 E7 0A 40 A0 D5 52 80 A0 /* ._........@..R.. */\
/* 509h 1289  16 */                            ED 7E C0 A0 C4 89 00 A1 5A 75 40 A1 D5 49 80 A1 /* .~......Zu@..I.. */\
/* 519h 1305  16 */                            33 13 C0 A1 6D DE 0F A2 AF B6 4F A2 39 A3 8F A2 /* 3...m.....O.9... */\
/* 529h 1321  16 */                            3A A6 CF A2 DB BC 0F A3 4C E0 4F A3 99 07 80 A3 /* :.......L.O..... */\
/* 539h 1337  16 */                            C6 29 C0 A3 C0 3F 00 A4 B6 45 40 A4 AF 3B 80 A4 /* .)...?...E@..;.. */\
/* 549h 1353  16 */                            31 25 C0 A4 38 08 00 A5 B1 EB 4F A5 E8 D5 8F A5 /* 1%..8.....O..... */\
/* 559h 1369  16 */                            2C CB CF A5 09 CD 0F A6 21 DA 4F A6 B6 EE 8F A6 /* ,.......!.O..... */\
/* 569h 1385  16 */                            A6 05 C0 A6 AA 19 00 A7 84 26 40 A7 D9 29 80 A7 /* .........&@..).. */\
/* 579h 1401  16 */                            99 23 C0 A7 D6 15 00 A8 27 04 40 A8 C3 F2 8F A8 /* .#......'.@..... */\
/* 589h 1417  16 */                            83 E5 CF A8 12 DF 0F A9 66 E0 4F A9 AB E8 8F A9 /* ........f.O..... */\
/* 599h 1433  16 */                            8F F5 CF A9 E4 03 00 AA 61 10 40 AA 5F 18 80 AA /* ........a.@._... */\
/* 5A9h 1449  16 */                            67 1A C0 AA 6D 16 00 AB BD 0D 40 AB 96 02 80 AB /* g...m.....@..... */\
/* 5B9h 1465  16 */                            9D F7 CF AB 3D EF 0F AC 25 EB 4F AC F1 EB 8F AC /* ....=...%.O..... */\
/* 5C9h 1481  16 */                            20 F1 CF AC 3E F9 0F AD 4F 02 40 AD 42 0A 80 AD /*  ...>...O.@.B... */\
/* 5D9h 1497  16 */                            69 0F C0 AD D3 10 00 AE 72 0E 40 AE 0E 09 80 AE /* i.......r.@..... */\
/* 5E9h 1513  16 */                            0C 02 C0 AE 11 FB 0F AF A5 F5 4F AF DD F2 8F AF /* ..........O..... */\
/* 5F9h 1529  16 */                            26 F3 CF AF 3C F6 0F B0 43 FB 4F B0 FF 00 80 B0 /* &...<...C.O..... */\
/* 609h 1545  16 */                            27 06 C0 B0 A4 09 00 B1 D0 0A 40 B1 8F 09 80 B1 /* '.........@..... */\
/* 619h 1561  16 */                            4C 06 C0 B1 DA 01 00 B2 3D FD 4F B2 75 F9 8F B2 /* L.......=.O.u... */\
/* 629h 1577  16 */                            45 F7 CF B2 0F F7 0F B3 C8 F8 4F B3 FF FB 8F B3 /* E.........O..... */\
/* 639h 1593  16 */                            FC FF CF B3 E9 03 00 B4 FD 06 40 B4 A2 08 80 B4 /* ..........@..... */\
/* 649h 1609  16 */                            8B 08 C0 B4 C0 06 00 B5 92 03 40 B5 88 FF 8F B5 /* ..........@..... */\
/* 659h 1625  16 */                            3F FB CF B5 51 F7 0F B6 3B F4 4F B6 4A F2 8F B6 /* ?...Q...;.O.J... */\
/* 669h 1641  16 */                            97 F1 CF B6 0B F2 0F B7 6C F3 4F B7 67 F5 8F B7 /* ........l.O.g... */\
/* 679h 1657  16 */                            A8 F7 CF B7 E2 F9 0F B8 DD FB 4F B8 76 FD 8F B8 /* ..........O.v... */\
/* 689h 1673  16 */                            A2 FE CF B8 67 FF 0F B9 D7 FF 4F B9 0A 00 80 B9 /* ....g.....O..... */\
/* 699h 1689   8 */                            18 00 C0 B9 1B 00 00 BA                         /* ........ */\

    /* Structures that are not part of NHLT spec */
[6A1h 1697 001h]    Device Info struct count : 00

    /* Endpoint Descriptor #2 */
[6A2h 1698 004h]           Descriptor Length : 0000019B
[6A6h 1702 001h]                   Link Type : 03 [Type SSP]
[6A7h 1703 001h]                 Instance Id : 00
[6A8h 1704 002h]                   Vendor Id : 8086
[6AAh 1706 002h]                   Device Id : AE30 [BT Sideband]
[6ACh 1708 002h]                 Revision Id : 0001
[6AEh 1710 004h]                Subsystem Id : 00000001
[6B2h 1714 001h]                 Device Type : 00
[6B3h 1715 001h]                   Direction : 00 [Render]
[6B4h 1716 001h]              Virtual Bus Id : 02

    /* Endpoint Device_Specific_Config table */
[6B5h 1717 004h]           Capabilities Size : 00000002
[6B9h 1721 001h]                Virtual Slot : 00
[6BAh 1722 001h]                 Config Type : 00 [Generic Type]

    /* Formats_Config table */
[6BBh 1723 001h]               Formats Count : 03

    /* Wave_Format_Extensible table #1 */
[6BCh 1724 002h]                  Format Tag : FFFE
[6BEh 1726 002h]               Channel Count : 0001
[6C0h 1728 004h]          Samples Per Second : 00001F40
[6C4h 1732 004h]    Average Bytes Per Second : 00003E80
[6C8h 1736 002h]             Block Alignment : 0002
[6CAh 1738 002h]             Bits Per Sample : 0010
[6CCh 1740 002h]           Extra Format Size : 0016
[6CEh 1742 002h]       Valid Bits Per Sample : 0010
[6D0h 1744 004h]                Channel Mask : 00000004
[6D4h 1748 010h]              SubFormat GUID : 00000001-0000-0010-8000-00AA00389B71
[6E4h 1764 004h]         Capabilities Length : 00000054

    /* Specific_Config table #1 */
[6E8h 1768 054h]                Capabilities : 00 00 00 00 F0 FF FF FF 00 00 00 00 00 00 00 00 /* ................ */\
/* 6F8h 1784  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 708h 1800  16 */                            00 00 00 00 3F 00 C0 80 00 00 40 D3 00 00 00 00 /* ....?.....@..... */\
/* 718h 1816  16 */                            05 00 00 02 01 00 00 00 01 00 00 00 02 40 00 00 /* .............@.. */\
/* 728h 1832  16 */                            00 00 00 00 00 00 02 07 00 00 00 00 01 00 00 00 /* ................ */\
/* 738h 1848   4 */                            00 00 00 00                                     /* .... */\

    /* Wave_Format_Extensible table #2 */
[73Ch 1852 002h]                  Format Tag : FFFE
[73Eh 1854 002h]               Channel Count : 0001
[740h 1856 004h]          Samples Per Second : 00003E80
[744h 1860 004h]    Average Bytes Per Second : 00007D00
[748h 1864 002h]             Block Alignment : 0002
[74Ah 1866 002h]             Bits Per Sample : 0010
[74Ch 1868 002h]           Extra Format Size : 0016
[74Eh 1870 002h]       Valid Bits Per Sample : 0010
[750h 1872 004h]                Channel Mask : 00000004
[754h 1876 010h]              SubFormat GUID : 00000001-0000-0010-8000-00AA00389B71
[764h 1892 004h]         Capabilities Length : 00000054

    /* Specific_Config table #2 */
[768h 1896 054h]                Capabilities : 00 00 00 00 F0 FF FF FF 00 00 00 00 00 00 00 00 /* ................ */\
/* 778h 1912  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 788h 1928  16 */                            00 00 00 00 3F 00 C0 80 00 00 40 D3 00 00 00 00 /* ....?.....@..... */\
/* 798h 1944  16 */                            05 00 00 02 01 00 00 00 01 00 00 00 02 40 00 00 /* .............@.. */\
/* 7A8h 1960  16 */                            00 00 00 00 00 00 02 07 00 00 00 00 01 00 00 00 /* ................ */\
/* 7B8h 1976   4 */                            00 00 00 00                                     /* .... */\

    /* Wave_Format_Extensible table #3 */
[7BCh 1980 002h]                  Format Tag : FFFE
[7BEh 1982 002h]               Channel Count : 0002
[7C0h 1984 004h]          Samples Per Second : 0000BB80
[7C4h 1988 004h]    Average Bytes Per Second : 0002EE00
[7C8h 1992 002h]             Block Alignment : 0004
[7CAh 1994 002h]             Bits Per Sample : 0010
[7CCh 1996 002h]           Extra Format Size : 0016
[7CEh 1998 002h]       Valid Bits Per Sample : 0010
[7D0h 2000 004h]                Channel Mask : 00000003
[7D4h 2004 010h]              SubFormat GUID : 00000001-0000-0010-8000-00AA00389B71
[7E4h 2020 004h]         Capabilities Length : 00000054

    /* Specific_Config table #3 */
[7E8h 2024 054h]                Capabilities : 00 00 00 00 10 FF FF FF FF FF FF FF FF FF FF FF /* ................ */\
/* 7F8h 2040  16 */                            FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF /* ................ */\
/* 808h 2056  16 */                            FF FF FF FF 7F 18 C0 C1 00 00 70 C0 00 00 00 00 /* ..........p..... */\
/* 818h 2072  16 */                            05 02 01 02 03 00 00 00 03 00 00 00 02 40 00 00 /* .............@.. */\
/* 828h 2088  16 */                            00 00 00 00 00 0F 07 07 20 00 00 00 01 00 00 00 /* ........ ....... */\
/* 838h 2104   4 */                            FF 0F 00 00                                     /* .... */\

    /* Structures that are not part of NHLT spec */
[83Ch 2108 001h]    Device Info struct count : 00

    /* Endpoint Descriptor #3 */
[83Dh 2109 004h]           Descriptor Length : 0000011B
[841h 2113 001h]                   Link Type : 03 [Type SSP]
[842h 2114 001h]                 Instance Id : 00
[843h 2115 002h]                   Vendor Id : 8086
[845h 2117 002h]                   Device Id : AE30 [BT Sideband]
[847h 2119 002h]                 Revision Id : 0001
[849h 2121 004h]                Subsystem Id : 00000001
[84Dh 2125 001h]                 Device Type : 00
[84Eh 2126 001h]                   Direction : 01 [Capture]
[84Fh 2127 001h]              Virtual Bus Id : 02

    /* Endpoint Device_Specific_Config table */
[850h 2128 004h]           Capabilities Size : 00000002
[854h 2132 001h]                Virtual Slot : 00
[855h 2133 001h]                 Config Type : 00 [Generic Type]

    /* Formats_Config table */
[856h 2134 001h]               Formats Count : 02

    /* Wave_Format_Extensible table #1 */
[857h 2135 002h]                  Format Tag : FFFE
[859h 2137 002h]               Channel Count : 0001
[85Bh 2139 004h]          Samples Per Second : 00001F40
[85Fh 2143 004h]    Average Bytes Per Second : 00003E80
[863h 2147 002h]             Block Alignment : 0002
[865h 2149 002h]             Bits Per Sample : 0010
[867h 2151 002h]           Extra Format Size : 0016
[869h 2153 002h]       Valid Bits Per Sample : 0010
[86Bh 2155 004h]                Channel Mask : 00000004
[86Fh 2159 010h]              SubFormat GUID : 00000001-0000-0010-8000-00AA00389B71
[87Fh 2175 004h]         Capabilities Length : 00000054

    /* Specific_Config table #1 */
[883h 2179 054h]                Capabilities : 00 00 00 00 F0 FF FF FF 00 00 00 00 00 00 00 00 /* ................ */\
/* 893h 2195  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 8A3h 2211  16 */                            00 00 00 00 3F 00 C0 80 00 00 40 D3 00 00 00 00 /* ....?.....@..... */\
/* 8B3h 2227  16 */                            05 00 00 02 01 00 00 00 01 00 00 00 02 40 00 00 /* .............@.. */\
/* 8C3h 2243  16 */                            00 00 00 00 00 00 02 07 00 00 00 00 01 00 00 00 /* ................ */\
/* 8D3h 2259   4 */                            00 00 00 00                                     /* .... */\

    /* Wave_Format_Extensible table #2 */
[8D7h 2263 002h]                  Format Tag : FFFE
[8D9h 2265 002h]               Channel Count : 0001
[8DBh 2267 004h]          Samples Per Second : 00003E80
[8DFh 2271 004h]    Average Bytes Per Second : 00007D00
[8E3h 2275 002h]             Block Alignment : 0002
[8E5h 2277 002h]             Bits Per Sample : 0010
[8E7h 2279 002h]           Extra Format Size : 0016
[8E9h 2281 002h]       Valid Bits Per Sample : 0010
[8EBh 2283 004h]                Channel Mask : 00000004
[8EFh 2287 010h]              SubFormat GUID : 00000001-0000-0010-8000-00AA00389B71
[8FFh 2303 004h]         Capabilities Length : 00000054

    /* Specific_Config table #2 */
[903h 2307 054h]                Capabilities : 00 00 00 00 F0 FF FF FF 00 00 00 00 00 00 00 00 /* ................ */\
/* 913h 2323  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 923h 2339  16 */                            00 00 00 00 3F 00 C0 80 00 00 40 D3 00 00 00 00 /* ....?.....@..... */\
/* 933h 2355  16 */                            05 00 00 02 01 00 00 00 01 00 00 00 02 40 00 00 /* .............@.. */\
/* 943h 2371  16 */                            00 00 00 00 00 00 02 07 00 00 00 00 01 00 00 00 /* ................ */\
/* 953h 2387   4 */                            00 00 00 00                                     /* .... */\

    /* Structures that are not part of NHLT spec */
[957h 2391 001h]    Device Info struct count : 00

/* Terminating specific config (not part of NHLT spec) */
[958h 2392 004h]           Capabilities Size : 00000004
[95Ch 2396 004h]                Capabilities : DE AD BE EF                                     /* .... */\

Raw Table Data: Length 2400 (0x960)

    0000: 4E 48 4C 54 60 09 00 00 00 D7 4D 53 49 5F 4E 42  // NHLT`.....MSI_NB
    0010: 4D 45 47 41 42 4F 4F 4B 09 20 07 01 41 4D 49 20  // MEGABOOK. ..AMI 
    0020: 13 00 00 01 03 7D 06 00 00 02 00 86 80 20 AE EC  // .....}....... ..
    0030: 10 62 14 3A 14 00 01 00 30 00 00 00 00 01 0F 02  // .b.:....0.......
    0040: 01 04 00 00 B0 FF 00 00 14 28 00 00 00 00 C4 FF  // .........(......
    0050: 3C 00 CE FF 32 00 01 04 00 00 50 00 00 00 14 28  // <...2.....P....(
    0060: 00 00 00 00 C4 FF 3C 00 CE FF 32 00 01 FE FF 02  // ......<...2.....
    0070: 00 80 BB 00 00 00 DC 05 00 08 00 20 00 16 00 18  // ........... ....
    0080: 00 03 00 00 00 01 00 00 00 00 00 10 00 80 00 00  // ................
    0090: AA 00 38 9B 71 08 06 00 00 01 00 00 00 10 FF FF  // ..8.q...........
    00A0: FF 10 FF FF FF FF FF FF FF FF FF FF FF 03 00 00  // ................
    00B0: 00 03 00 00 00 44 80 28 00 44 80 20 00 01 00 00  // .....D.(.D. ....
    00C0: 00 01 C0 00 00 00 18 00 0B 00 00 00 00 03 0E 00  // ................
    00D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00E0: 00 31 00 00 00 76 00 01 00 00 00 00 00 00 00 00  // .1...v..........
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 31 00 00 00 E8 01 05 00 00 00 00 00 00 00 00  // .1..............
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0120: 00 49 00 00 40 81 01 40 40 6D 03 80 40 53 04 C0  // .I..@..@@m..@S..
    0130: 40 78 02 00 41 19 FF 4F 41 ED FD 8F 41 37 00 C0  // @x..A..OA...A7..
    0140: 41 45 02 00 42 8C 00 40 42 9B FD 8F 42 9D FE CF  // AE..B..@B...B...
    0150: 42 6C 02 00 43 67 02 40 43 B1 FD 8F 43 25 FC CF  // Bl..Cg.@C...C%..
    0160: 43 6F 01 00 44 21 05 40 44 F3 FF 8F 44 C4 F9 CF  // Co..D!.@D...D...
    0170: 44 F9 FD 0F 45 BF 06 40 45 8E 04 80 45 73 F9 CF  // D...E..@E...Es..
    0180: 45 96 F8 0F 46 72 05 40 46 69 0A 80 46 CF FC CF  // E...Fr.@Fi..F...
    0190: 46 D1 F2 0F 47 A4 FF 4F 47 25 0F 80 47 FC 04 C0  // F...G..OG%..G...
    01A0: 47 13 F0 0F 48 93 F5 4F 48 33 0F 80 48 68 10 C0  // G...H..OH3..Hh..
    01B0: 48 75 F3 0F 49 99 E9 4F 49 A2 07 80 49 90 1B C0  // Hu..I..OI...I...
    01C0: 49 65 FF 0F 4A C2 E0 4F 4A 99 F7 8F 4A 92 20 C0  // Ie..J..OJ...J. .
    01D0: 4A C4 12 00 4B 03 E1 4F 4B 2C E2 8F 4B F2 19 C0  // J...K..OK,..K...
    01E0: 4B A3 28 00 4C F5 EE 4F 4C 29 CE 8F 4C 84 04 C0  // K.(.L..OL)..L...
    01F0: 4C 40 38 00 4D 2C 0B 40 4D 5E C5 8F 4D E9 E2 CF  // L@8.M,.@M^..M...
    0200: 4D F5 37 00 4E F8 2F 40 4E 92 D0 8F 4E E1 BD CF  // M.7.N./@N...N...
    0210: 4E DD 20 00 4F 18 52 40 4F 4F F4 8F 4F B2 A2 CF  // N. .O.R@OO..O...
    0220: 4F 4D F0 0F 50 08 60 40 50 78 2D 80 50 80 A5 CF  // OM..P.`@Px-.P...
    0230: 50 54 B3 0F 51 82 4A 40 51 A2 69 80 51 00 D0 CF  // PT..Q.J@Q.i.Q...
    0240: 51 F5 7E 0F 52 5C 0B 40 52 CF 8E 80 52 52 21 C0  // Q.~.R\.@R...RR!.
    0250: 52 DC 70 0F 53 96 AD 4F 53 06 7F 80 53 C7 82 C0  // R.p.S..OS...S...
    0260: 53 0A A3 0F 54 8D 53 4F 54 C1 28 80 54 14 C8 C0  // S...T.SOT.(.T...
    0270: 54 21 1B 00 55 23 32 4F 55 41 97 8F 55 F2 B6 C0  // T!..U#2OUA..U...
    0280: 55 87 B6 00 56 02 81 4F 56 43 08 8F 56 34 25 C0  // U...V..OVC..V4%.
    0290: 56 19 1C 01 57 7E 50 40 57 24 EE 8E 57 FD 2C CF  // V...W~P@W$..W.,.
    02A0: 57 1C C9 00 58 71 47 41 58 01 C6 8F 58 BA 79 CE  // W...XqGAX...X.y.
    02B0: 58 6B 6E 0F 59 BE 5E 41 59 00 70 81 59 76 5B CF  // Xkn.Y.^AY.p.Yv[.
    02C0: 59 77 F7 0D 5A AC 51 4F 5A 09 CF 81 5A 53 36 C2  // Yw..Z.QOZ...ZS6.
    02D0: 5A 37 CE 0F 5B A8 3D 4D 5B B8 65 8D 5B EF 50 C0  // Z7..[.=M[.e.[.P.
    02E0: 5B 37 8E 03 5C B2 E2 44 5C A5 11 84 5C A3 59 C2  // [7..\..D\...\.Y.
    02F0: 5C 48 F2 00 5D 0E 3F 40 5D 39 08 80 5D 1B 00 00  // \H..].?@]9..]...
    0300: 80 18 00 40 80 0A 00 80 80 D7 FF CF 80 67 FF 0F  // ...@.........g..
    0310: 81 A2 FE 4F 81 76 FD 8F 81 DD FB CF 81 E2 F9 0F  // ...O.v..........
    0320: 82 A8 F7 4F 82 67 F5 8F 82 6C F3 CF 82 0B F2 0F  // ...O.g...l......
    0330: 83 97 F1 4F 83 4A F2 8F 83 3B F4 CF 83 51 F7 0F  // ...O.J...;...Q..
    0340: 84 3F FB 4F 84 88 FF 8F 84 92 03 C0 84 C0 06 00  // .?.O............
    0350: 85 8B 08 40 85 A2 08 80 85 FD 06 C0 85 E9 03 00  // ...@............
    0360: 86 FC FF 4F 86 FF FB 8F 86 C8 F8 CF 86 0F F7 0F  // ...O............
    0370: 87 45 F7 4F 87 75 F9 8F 87 3D FD CF 87 DA 01 00  // .E.O.u...=......
    0380: 88 4C 06 40 88 8F 09 80 88 D0 0A C0 88 A4 09 00  // .L.@............
    0390: 89 27 06 40 89 FF 00 80 89 43 FB CF 89 3C F6 0F  // .'.@.....C...<..
    03A0: 8A 26 F3 4F 8A DD F2 8F 8A A5 F5 CF 8A 11 FB 0F  // .&.O............
    03B0: 8B 0C 02 40 8B 0E 09 80 8B 72 0E C0 8B D3 10 00  // ...@.....r......
    03C0: 8C 69 0F 40 8C 42 0A 80 8C 4F 02 C0 8C 3E F9 0F  // .i.@.B...O...>..
    03D0: 8D 20 F1 4F 8D F1 EB 8F 8D 25 EB CF 8D 3D EF 0F  // . .O.....%...=..
    03E0: 8E 9D F7 4F 8E 96 02 80 8E BD 0D C0 8E 6D 16 00  // ...O.........m..
    03F0: 8F 67 1A 40 8F 5F 18 80 8F 61 10 C0 8F E4 03 00  // .g.@._...a......
    0400: 90 8F F5 4F 90 AB E8 8F 90 66 E0 CF 90 12 DF 0F  // ...O.....f......
    0410: 91 83 E5 4F 91 C3 F2 8F 91 27 04 C0 91 D6 15 00  // ...O.....'......
    0420: 92 99 23 40 92 D9 29 80 92 84 26 C0 92 AA 19 00  // ..#@..)...&.....
    0430: 93 A6 05 40 93 B6 EE 8F 93 21 DA CF 93 09 CD 0F  // ...@.....!......
    0440: 94 2C CB 4F 94 E8 D5 8F 94 B1 EB CF 94 38 08 00  // .,.O.........8..
    0450: 95 31 25 40 95 AF 3B 80 95 B6 45 C0 95 C0 3F 00  // .1%@..;...E...?.
    0460: 96 C6 29 40 96 99 07 80 96 4C E0 CF 96 DB BC 0F  // ..)@.....L......
    0470: 97 3A A6 4F 97 39 A3 8F 97 AF B6 CF 97 6D DE 0F  // .:.O.9.......m..
    0480: 98 33 13 40 98 D5 49 80 98 5A 75 C0 98 C4 89 00  // .3.@..I..Zu.....
    0490: 99 ED 7E 40 99 D5 52 80 99 E7 0A C0 99 CC B3 0F  // ..~@..R.........
    04A0: 9A B8 5F 4F 9A 67 23 8F 9A 59 12 CF 9A EA 3A 0F  // .._O.g#..Y....:.
    04B0: 9B 13 A3 4F 9B 87 46 80 9B 8B 16 C1 9B BC FB 01  // ...O..F.........
    04C0: 9C 6F D9 42 9C 33 92 83 9C 98 0C C4 9C 6B 37 04  // .o.B.3.......k7.
    04D0: 9D 98 0C 44 9D 33 92 83 9D 6F D9 C2 9D BC FB 01  // ...D.3...o......
    04E0: 9E 8B 16 41 9E 87 46 80 9E 13 A3 CF 9E EA 3A 0F  // ...A..F.......:.
    04F0: 9F 59 12 4F 9F 67 23 8F 9F B8 5F CF 9F CC B3 0F  // .Y.O.g#..._.....
    0500: A0 E7 0A 40 A0 D5 52 80 A0 ED 7E C0 A0 C4 89 00  // ...@..R...~.....
    0510: A1 5A 75 40 A1 D5 49 80 A1 33 13 C0 A1 6D DE 0F  // .Zu@..I..3...m..
    0520: A2 AF B6 4F A2 39 A3 8F A2 3A A6 CF A2 DB BC 0F  // ...O.9...:......
    0530: A3 4C E0 4F A3 99 07 80 A3 C6 29 C0 A3 C0 3F 00  // .L.O......)...?.
    0540: A4 B6 45 40 A4 AF 3B 80 A4 31 25 C0 A4 38 08 00  // ..E@..;..1%..8..
    0550: A5 B1 EB 4F A5 E8 D5 8F A5 2C CB CF A5 09 CD 0F  // ...O.....,......
    0560: A6 21 DA 4F A6 B6 EE 8F A6 A6 05 C0 A6 AA 19 00  // .!.O............
    0570: A7 84 26 40 A7 D9 29 80 A7 99 23 C0 A7 D6 15 00  // ..&@..)...#.....
    0580: A8 27 04 40 A8 C3 F2 8F A8 83 E5 CF A8 12 DF 0F  // .'.@............
    0590: A9 66 E0 4F A9 AB E8 8F A9 8F F5 CF A9 E4 03 00  // .f.O............
    05A0: AA 61 10 40 AA 5F 18 80 AA 67 1A C0 AA 6D 16 00  // .a.@._...g...m..
    05B0: AB BD 0D 40 AB 96 02 80 AB 9D F7 CF AB 3D EF 0F  // ...@.........=..
    05C0: AC 25 EB 4F AC F1 EB 8F AC 20 F1 CF AC 3E F9 0F  // .%.O..... ...>..
    05D0: AD 4F 02 40 AD 42 0A 80 AD 69 0F C0 AD D3 10 00  // .O.@.B...i......
    05E0: AE 72 0E 40 AE 0E 09 80 AE 0C 02 C0 AE 11 FB 0F  // .r.@............
    05F0: AF A5 F5 4F AF DD F2 8F AF 26 F3 CF AF 3C F6 0F  // ...O.....&...<..
    0600: B0 43 FB 4F B0 FF 00 80 B0 27 06 C0 B0 A4 09 00  // .C.O.....'......
    0610: B1 D0 0A 40 B1 8F 09 80 B1 4C 06 C0 B1 DA 01 00  // ...@.....L......
    0620: B2 3D FD 4F B2 75 F9 8F B2 45 F7 CF B2 0F F7 0F  // .=.O.u...E......
    0630: B3 C8 F8 4F B3 FF FB 8F B3 FC FF CF B3 E9 03 00  // ...O............
    0640: B4 FD 06 40 B4 A2 08 80 B4 8B 08 C0 B4 C0 06 00  // ...@............
    0650: B5 92 03 40 B5 88 FF 8F B5 3F FB CF B5 51 F7 0F  // ...@.....?...Q..
    0660: B6 3B F4 4F B6 4A F2 8F B6 97 F1 CF B6 0B F2 0F  // .;.O.J..........
    0670: B7 6C F3 4F B7 67 F5 8F B7 A8 F7 CF B7 E2 F9 0F  // .l.O.g..........
    0680: B8 DD FB 4F B8 76 FD 8F B8 A2 FE CF B8 67 FF 0F  // ...O.v.......g..
    0690: B9 D7 FF 4F B9 0A 00 80 B9 18 00 C0 B9 1B 00 00  // ...O............
    06A0: BA 00 9B 01 00 00 03 00 86 80 30 AE 01 00 01 00  // ..........0.....
    06B0: 00 00 00 00 02 02 00 00 00 00 00 03 FE FF 01 00  // ................
    06C0: 40 1F 00 00 80 3E 00 00 02 00 10 00 16 00 10 00  // @....>..........
    06D0: 04 00 00 00 01 00 00 00 00 00 10 00 80 00 00 AA  // ................
    06E0: 00 38 9B 71 54 00 00 00 00 00 00 00 F0 FF FF FF  // .8.qT...........
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0700: 00 00 00 00 00 00 00 00 00 00 00 00 3F 00 C0 80  // ............?...
    0710: 00 00 40 D3 00 00 00 00 05 00 00 02 01 00 00 00  // ..@.............
    0720: 01 00 00 00 02 40 00 00 00 00 00 00 00 00 02 07  // .....@..........
    0730: 00 00 00 00 01 00 00 00 00 00 00 00 FE FF 01 00  // ................
    0740: 80 3E 00 00 00 7D 00 00 02 00 10 00 16 00 10 00  // .>...}..........
    0750: 04 00 00 00 01 00 00 00 00 00 10 00 80 00 00 AA  // ................
    0760: 00 38 9B 71 54 00 00 00 00 00 00 00 F0 FF FF FF  // .8.qT...........
    0770: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0780: 00 00 00 00 00 00 00 00 00 00 00 00 3F 00 C0 80  // ............?...
    0790: 00 00 40 D3 00 00 00 00 05 00 00 02 01 00 00 00  // ..@.............
    07A0: 01 00 00 00 02 40 00 00 00 00 00 00 00 00 02 07  // .....@..........
    07B0: 00 00 00 00 01 00 00 00 00 00 00 00 FE FF 02 00  // ................
    07C0: 80 BB 00 00 00 EE 02 00 04 00 10 00 16 00 10 00  // ................
    07D0: 03 00 00 00 01 00 00 00 00 00 10 00 80 00 00 AA  // ................
    07E0: 00 38 9B 71 54 00 00 00 00 00 00 00 10 FF FF FF  // .8.qT...........
    07F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0800: FF FF FF FF FF FF FF FF FF FF FF FF 7F 18 C0 C1  // ................
    0810: 00 00 70 C0 00 00 00 00 05 02 01 02 03 00 00 00  // ..p.............
    0820: 03 00 00 00 02 40 00 00 00 00 00 00 00 0F 07 07  // .....@..........
    0830: 20 00 00 00 01 00 00 00 FF 0F 00 00 00 1B 01 00  //  ...............
    0840: 00 03 00 86 80 30 AE 01 00 01 00 00 00 00 01 02  // .....0..........
    0850: 02 00 00 00 00 00 02 FE FF 01 00 40 1F 00 00 80  // ...........@....
    0860: 3E 00 00 02 00 10 00 16 00 10 00 04 00 00 00 01  // >...............
    0870: 00 00 00 00 00 10 00 80 00 00 AA 00 38 9B 71 54  // ............8.qT
    0880: 00 00 00 00 00 00 00 F0 FF FF FF 00 00 00 00 00  // ................
    0890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08A0: 00 00 00 00 00 00 00 3F 00 C0 80 00 00 40 D3 00  // .......?.....@..
    08B0: 00 00 00 05 00 00 02 01 00 00 00 01 00 00 00 02  // ................
    08C0: 40 00 00 00 00 00 00 00 00 02 07 00 00 00 00 01  // @...............
    08D0: 00 00 00 00 00 00 00 FE FF 01 00 80 3E 00 00 00  // ............>...
    08E0: 7D 00 00 02 00 10 00 16 00 10 00 04 00 00 00 01  // }...............
    08F0: 00 00 00 00 00 10 00 80 00 00 AA 00 38 9B 71 54  // ............8.qT
    0900: 00 00 00 00 00 00 00 F0 FF FF FF 00 00 00 00 00  // ................
    0910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0920: 00 00 00 00 00 00 00 3F 00 C0 80 00 00 40 D3 00  // .......?.....@..
    0930: 00 00 00 05 00 00 02 01 00 00 00 01 00 00 00 02  // ................
    0940: 40 00 00 00 00 00 00 00 00 02 07 00 00 00 00 01  // @...............
    0950: 00 00 00 00 00 00 00 00 04 00 00 00 DE AD BE EF  // ................


PHAT
----
[000h 0000 004h]                   Signature : "PHAT"    [Platform Health Assessment Table]
[004h 0004 004h]                Table Length : 00000569
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 99
[00Ah 0010 006h]                      Oem ID : "MSI_NB"
[010h 0016 008h]                Oem Table ID : "MEGABOOK"
[018h 0024 004h]                Oem Revision : 00000005
[01Ch 0028 004h]             Asl Compiler ID : "MSFT"
[020h 0032 004h]       Asl Compiler Revision : 0100000D


[024h 0036 002h]               Subtable Type : 0000 [Firmware Version Data]
[026h 0038 002h]                      Length : 0300
[028h 0040 001h]                    Revision : 01
[035h 0053 003h]                    Reserved : 000000
[038h 0056 004h]               Element Count : 0000001B

/* Version Element #1h Offset 30h */

[030h 0048 010h]                        GUID : 27097CFD-46E5-4E39-B8E4-33E439A13EAF
[040h 0064 008h]               Version Value : 000D000000970010
[048h 0072 004h]                 Producer ID : 43544E49

/* Version Element #2h Offset 4Ch */

[04Ch 0076 010h]                        GUID : 64C1A63E-BA2D-41DE-9655-2F70FE618F00
[05Ch 0092 008h]               Version Value : 000D000000970010
[064h 0100 004h]                 Producer ID : 43544E49

/* Version Element #3h Offset 68h */

[068h 0104 010h]                        GUID : D84CA716-7ED3-4C4B-B1D5-2B8C274A19F1
[078h 0120 008h]               Version Value : 000000FFFFFF0020
[080h 0128 004h]                 Producer ID : 43544E49

/* Version Element #4h Offset 84h */

[084h 0132 010h]                        GUID : E9B095BF-DEE2-4AC9-8778-9E41FB86C436
[094h 0148 008h]               Version Value : 000000FFFFFFFFFF
[09Ch 0156 004h]                 Producer ID : 43544E49

/* Version Element #5h Offset A0h */

[0A0h 0160 010h]                        GUID : 38D8AF9D-0F3D-4E48-A36B-FAFD686148A0
[0B0h 0176 008h]               Version Value : 000D000000970010
[0B8h 0184 004h]                 Producer ID : 43544E49

/* Version Element #6h Offset BCh */

[0BCh 0188 010h]                        GUID : 73256EE6-A990-4B13-8ABA-76E22C3E993C
[0CCh 0204 008h]               Version Value : 0001000200080010
[0D4h 0212 004h]                 Producer ID : 43544E49

/* Version Element #7h Offset D8h */

[0D8h 0216 010h]                        GUID : FA2B5B12-3124-43DE-84E6-C4114E881F43
[0E8h 0232 008h]               Version Value : 000D000000970010
[0F0h 0240 004h]                 Producer ID : 43544E49

/* Version Element #8h Offset F4h */

[0F4h 0244 010h]                        GUID : 3D3CE021-CE65-A2F5-A2F5-008B2BBB0CA2
[104h 0260 008h]               Version Value : 0000000000000004
[10Ch 0268 004h]                 Producer ID : 43544E49

/* Version Element #9h Offset 110h */

[110h 0272 010h]                        GUID : 84A3FF3C-CE65-448D-81C4-1A62A8A9C36E
[120h 0288 008h]               Version Value : 0000000000000004
[128h 0296 004h]                 Producer ID : 43544E49

/* Version Element #Ah Offset 12Ch */

[12Ch 0300 010h]                        GUID : FA50153E-6627-4714-9220-B8C71DAB429A
[13Ch 0316 008h]               Version Value : 000000FFFFFFFFFF
[144h 0324 004h]                 Producer ID : 43544E49

/* Version Element #Bh Offset 148h */

[148h 0328 010h]                        GUID : 0169518D-0480-5676-A9C1-5A8903C4992B
[158h 0344 008h]               Version Value : 00300001000A0000
[160h 0352 004h]                 Producer ID : 43544E49

/* Version Element #Ch Offset 164h */

[164h 0356 010h]                        GUID : 0094DFCF-D97B-51A2-8F85-EC2482BD6296
[174h 0372 008h]               Version Value : 0000000000001B65
[17Ch 0380 004h]                 Producer ID : 43544E49

/* Version Element #Dh Offset 180h */

[180h 0384 010h]                        GUID : D1ADD6FD-B056-5486-AD96-5163D1B9CCDC
[190h 0400 008h]               Version Value : 000A000100000000
[198h 0408 004h]                 Producer ID : 43544E49

/* Version Element #Eh Offset 19Ch */

[19Ch 0412 010h]                        GUID : 8F90AA30-B959-57DB-98ED-AEDA14BB4F7F
[1ACh 0428 008h]               Version Value : 000000FFFFFFFFFF
[1B4h 0436 004h]                 Producer ID : 43544E49

/* Version Element #Fh Offset 1B8h */

[1B8h 0440 010h]                        GUID : 877778B9-CF22-476A-97A1-27530D9AFE42
[1C8h 0456 008h]               Version Value : 000D000000970010
[1D0h 0464 004h]                 Producer ID : 43544E49

/* Version Element #10h Offset 1D4h */

[1D4h 0468 010h]                        GUID : DA72FEF3-782B-4C38-8540-2C90217C1673
[1E4h 0484 008h]               Version Value : 000000000000001C
[1ECh 0492 004h]                 Producer ID : 43544E49

/* Version Element #11h Offset 1F0h */

[1F0h 0496 010h]                        GUID : EC643DAC-ABB9-465F-83A6-A857E1D03BA2
[200h 0512 008h]               Version Value : 0001001300140000
[208h 0520 004h]                 Producer ID : 43544E49

/* Version Element #12h Offset 20Ch */

[20Ch 0524 010h]                        GUID : 6858C460-15BA-4EAB-B67C-0053FFCDED54
[21Ch 0540 008h]               Version Value : 000D000000970010
[224h 0548 004h]                 Producer ID : 43544E49

/* Version Element #13h Offset 228h */

[228h 0552 010h]                        GUID : A62BA25D-FFFC-4AC6-A90E-2457AC0E477E
[238h 0568 008h]               Version Value : 0012000000050832
[240h 0576 004h]                 Producer ID : 43544E49

/* Version Element #14h Offset 244h */

[244h 0580 010h]                        GUID : A4D03E4A-A8D2-4419-8C13-A21BD21A0E56
[254h 0596 008h]               Version Value : 03E8000000050733
[25Ch 0604 004h]                 Producer ID : 43544E49

/* Version Element #15h Offset 260h */

[260h 0608 010h]                        GUID : 3381C8E3-B92C-4BAC-B6C6-4390911E934D
[270h 0624 008h]               Version Value : 0001000500020000
[278h 0632 004h]                 Producer ID : 43544E49

/* Version Element #16h Offset 27Ch */

[27Ch 0636 010h]                        GUID : 427DCDB4-1C33-4F2B-B736-F8DABE9E9ACD
[28Ch 0652 008h]               Version Value : 0000000700000000
[294h 0660 004h]                 Producer ID : 43544E49

/* Version Element #17h Offset 298h */

[298h 0664 010h]                        GUID : CCB0BC86-1BCD-476F-AABE-E19159244BFD
[2A8h 0680 008h]               Version Value : 000D000000970010
[2B0h 0688 004h]                 Producer ID : 43544E49

/* Version Element #18h Offset 2B4h */

[2B4h 0692 010h]                        GUID : 988C3FD6-92B2-41A0-B5C3-78A5CD4712F7
[2C4h 0708 008h]               Version Value : 000000FFFFFFFFFF
[2CCh 0716 004h]                 Producer ID : 43544E49

/* Version Element #19h Offset 2D0h */

[2D0h 0720 010h]                        GUID : 03285589-1E37-4B72-A5F9-70D1ADAE5D34
[2E0h 0736 008h]               Version Value : 00FF00FF00000000
[2E8h 0744 004h]                 Producer ID : 43544E49

/* Version Element #1Ah Offset 2ECh */

[2ECh 0748 010h]                        GUID : E823976E-63BA-4114-B64B-8112728D4E03
[2FCh 0764 008h]               Version Value : 000000160001040B
[304h 0772 004h]                 Producer ID : 43544E49

/* Version Element #1Bh Offset 308h */

[308h 0776 010h]                        GUID : 103A9B25-A4D2-4889-9ECC-908CFC313939
[318h 0792 008h]               Version Value : 000000FFFFFFFFFF
[320h 0800 004h]                 Producer ID : 43544E49

[324h 0804 002h]               Subtable Type : 0001 [Firmware Health Data]
[326h 0806 002h]                      Length : 0127
[328h 0808 001h]                    Revision : 01
[32Dh 0813 002h]                    Reserved : 0000
[32Fh 0815 001h]                      Health : 01
[330h 0816 010h]                 Device GUID : 93A41C2F-A09F-E7C2-AC1F-F2488F03EEC3
[340h 0832 004h]      Device-Specific Offset : 00000074
[328h 0808 038h]                 Device Path : "VenHw(93A41C2F-A09F-E7C2-AC"
[360h 0864 0D3h]        Device-Specific Data : 46 00 2D 00 46 00 32 00 34 00 38 00 38 00 46 00 /* F.-.F.2.4.8.8.F. */\
/* 370h 0880  16 */                            30 00 33 00 45 00 45 00 43 00 33 00 29 00 00 00 /* 0.3.E.E.C.3.)... */\
/* 380h 0896  16 */                            01 E0 4D 27 BB 01 00 00 00 C6 4A 7B EA 00 00 00 /* ..M'......J{.... */\
/* 390h 0912  16 */                            00 D6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 3A0h 0928  16 */                            00 00 00 D8 0A CA 76 14 4A 89 43 B7 E5 FD 88 79 /* ......v.J.C....y */\
/* 3B0h 0944  16 */                            17 62 AD 00 00 00 00 00 00 00 00 00 00 00 00 00 /* .b.............. */\
/* 3C0h 0960  16 */                            00 00 00 FC CB E2 2F AA B9 93 4A AB 5B 40 17 3B /* ....../...J.[@.; */\
/* 3D0h 0976  16 */                            58 1C 42 00 00 00 00 00 00 00 00 00 00 00 00 00 /* X.B............. */\
/* 3E0h 0992  16 */                            00 00 00 EE 85 A8 86 1E D7 D6 2E 0F C1 9D 6C CC /* ..............l. */\
/* 3F0h 1008  16 */                            96 77 EB 00 00 00 00 00 00 00 00 00 00 00 00 00 /* .w.............. */\
/* 400h 1024  16 */                            00 00 00 CF CC 05 3D 3C 05 AB 41 8F 9C AC BB FD /* ......=<..A..... */\
/* 410h 1040  16 */                            4B B6 E1 00 00 00 00 00 00 00 00 00 00 00 00 00 /* K............... */\
/* 420h 1056  16 */                            00 00 00 17 E6 00 3E FF C8 88 4E 81 33 C3 03 20 /* ......>...N.3..  */\
/* 430h 1072   3 */                            89 C5 E7                                        /* ... */\

[433h 1075 002h]               Subtable Type : 0000 [Firmware Version Data]
[435h 1077 002h]                      Length : 0000
[437h 1079 001h]                    Revision : 00
[444h 1092 003h]                    Reserved : 000000
[447h 1095 004h]               Element Count : 3E00E617

[43Fh 1087 002h]               Subtable Type : C8FF [Unknown Subtable Type]
[441h 1089 002h]                      Length : 4E88
[443h 1091 001h]                    Revision : 81

Raw Table Data: Length 1385 (0x569)

    0000: 50 48 41 54 69 05 00 00 01 99 4D 53 49 5F 4E 42  // PHATi.....MSI_NB
    0010: 4D 45 47 41 42 4F 4F 4B 05 00 00 00 4D 53 46 54  // MEGABOOK....MSFT
    0020: 0D 00 00 01 00 00 00 03 01 00 00 00 1B 00 00 00  // ................
    0030: FD 7C 09 27 E5 46 39 4E B8 E4 33 E4 39 A1 3E AF  // .|.'.F9N..3.9.>.
    0040: 10 00 97 00 00 00 0D 00 49 4E 54 43 3E A6 C1 64  // ........INTC>..d
    0050: 2D BA DE 41 96 55 2F 70 FE 61 8F 00 10 00 97 00  // -..A.U/p.a......
    0060: 00 00 0D 00 49 4E 54 43 16 A7 4C D8 D3 7E 4B 4C  // ....INTC..L..~KL
    0070: B1 D5 2B 8C 27 4A 19 F1 20 00 FF FF FF 00 00 00  // ..+.'J.. .......
    0080: 49 4E 54 43 BF 95 B0 E9 E2 DE C9 4A 87 78 9E 41  // INTC.......J.x.A
    0090: FB 86 C4 36 FF FF FF FF FF 00 00 00 49 4E 54 43  // ...6........INTC
    00A0: 9D AF D8 38 3D 0F 48 4E A3 6B FA FD 68 61 48 A0  // ...8=.HN.k..haH.
    00B0: 10 00 97 00 00 00 0D 00 49 4E 54 43 E6 6E 25 73  // ........INTC.n%s
    00C0: 90 A9 13 4B 8A BA 76 E2 2C 3E 99 3C 10 00 08 00  // ...K..v.,>.<....
    00D0: 02 00 01 00 49 4E 54 43 12 5B 2B FA 24 31 DE 43  // ....INTC.[+.$1.C
    00E0: 84 E6 C4 11 4E 88 1F 43 10 00 97 00 00 00 0D 00  // ....N..C........
    00F0: 49 4E 54 43 21 E0 3C 3D 65 CE F5 A2 A2 F5 00 8B  // INTC!.<=e.......
    0100: 2B BB 0C A2 04 00 00 00 00 00 00 00 49 4E 54 43  // +...........INTC
    0110: 3C FF A3 84 65 CE 8D 44 81 C4 1A 62 A8 A9 C3 6E  // <...e..D...b...n
    0120: 04 00 00 00 00 00 00 00 49 4E 54 43 3E 15 50 FA  // ........INTC>.P.
    0130: 27 66 14 47 92 20 B8 C7 1D AB 42 9A FF FF FF FF  // 'f.G. ....B.....
    0140: FF 00 00 00 49 4E 54 43 8D 51 69 01 80 04 76 56  // ....INTC.Qi...vV
    0150: A9 C1 5A 89 03 C4 99 2B 00 00 0A 00 01 00 30 00  // ..Z....+......0.
    0160: 49 4E 54 43 CF DF 94 00 7B D9 A2 51 8F 85 EC 24  // INTC....{..Q...$
    0170: 82 BD 62 96 65 1B 00 00 00 00 00 00 49 4E 54 43  // ..b.e.......INTC
    0180: FD D6 AD D1 56 B0 86 54 AD 96 51 63 D1 B9 CC DC  // ....V..T..Qc....
    0190: 00 00 00 00 01 00 0A 00 49 4E 54 43 30 AA 90 8F  // ........INTC0...
    01A0: 59 B9 DB 57 98 ED AE DA 14 BB 4F 7F FF FF FF FF  // Y..W......O.....
    01B0: FF 00 00 00 49 4E 54 43 B9 78 77 87 22 CF 6A 47  // ....INTC.xw.".jG
    01C0: 97 A1 27 53 0D 9A FE 42 10 00 97 00 00 00 0D 00  // ..'S...B........
    01D0: 49 4E 54 43 F3 FE 72 DA 2B 78 38 4C 85 40 2C 90  // INTC..r.+x8L.@,.
    01E0: 21 7C 16 73 1C 00 00 00 00 00 00 00 49 4E 54 43  // !|.s........INTC
    01F0: AC 3D 64 EC B9 AB 5F 46 83 A6 A8 57 E1 D0 3B A2  // .=d..._F...W..;.
    0200: 00 00 14 00 13 00 01 00 49 4E 54 43 60 C4 58 68  // ........INTC`.Xh
    0210: BA 15 AB 4E B6 7C 00 53 FF CD ED 54 10 00 97 00  // ...N.|.S...T....
    0220: 00 00 0D 00 49 4E 54 43 5D A2 2B A6 FC FF C6 4A  // ....INTC].+....J
    0230: A9 0E 24 57 AC 0E 47 7E 32 08 05 00 00 00 12 00  // ..$W..G~2.......
    0240: 49 4E 54 43 4A 3E D0 A4 D2 A8 19 44 8C 13 A2 1B  // INTCJ>.....D....
    0250: D2 1A 0E 56 33 07 05 00 00 00 E8 03 49 4E 54 43  // ...V3.......INTC
    0260: E3 C8 81 33 2C B9 AC 4B B6 C6 43 90 91 1E 93 4D  // ...3,..K..C....M
    0270: 00 00 02 00 05 00 01 00 49 4E 54 43 B4 CD 7D 42  // ........INTC..}B
    0280: 33 1C 2B 4F B7 36 F8 DA BE 9E 9A CD 00 00 00 00  // 3.+O.6..........
    0290: 07 00 00 00 49 4E 54 43 86 BC B0 CC CD 1B 6F 47  // ....INTC......oG
    02A0: AA BE E1 91 59 24 4B FD 10 00 97 00 00 00 0D 00  // ....Y$K.........
    02B0: 49 4E 54 43 D6 3F 8C 98 B2 92 A0 41 B5 C3 78 A5  // INTC.?.....A..x.
    02C0: CD 47 12 F7 FF FF FF FF FF 00 00 00 49 4E 54 43  // .G..........INTC
    02D0: 89 55 28 03 37 1E 72 4B A5 F9 70 D1 AD AE 5D 34  // .U(.7.rK..p...]4
    02E0: 00 00 00 00 FF 00 FF 00 49 4E 54 43 6E 97 23 E8  // ........INTCn.#.
    02F0: BA 63 14 41 B6 4B 81 12 72 8D 4E 03 0B 04 01 00  // .c.A.K..r.N.....
    0300: 16 00 00 00 49 4E 54 43 25 9B 3A 10 D2 A4 89 48  // ....INTC%.:....H
    0310: 9E CC 90 8C FC 31 39 39 FF FF FF FF FF 00 00 00  // .....199........
    0320: 49 4E 54 43 01 00 27 01 01 00 00 01 2F 1C A4 93  // INTC..'...../...
    0330: 9F A0 C2 E7 AC 1F F2 48 8F 03 EE C3 74 00 00 00  // .......H....t...
    0340: 56 00 65 00 6E 00 48 00 77 00 28 00 39 00 33 00  // V.e.n.H.w.(.9.3.
    0350: 41 00 34 00 31 00 43 00 32 00 46 00 2D 00 41 00  // A.4.1.C.2.F.-.A.
    0360: 30 00 39 00 46 00 2D 00 45 00 37 00 43 00 32 00  // 0.9.F.-.E.7.C.2.
    0370: 2D 00 41 00 43 00 31 00 46 00 2D 00 46 00 32 00  // -.A.C.1.F.-.F.2.
    0380: 34 00 38 00 38 00 46 00 30 00 33 00 45 00 45 00  // 4.8.8.F.0.3.E.E.
    0390: 43 00 33 00 29 00 00 00 01 E0 4D 27 BB 01 00 00  // C.3.).....M'....
    03A0: 00 C6 4A 7B EA 00 00 00 00 D6 00 00 00 00 00 00  // ..J{............
    03B0: 00 00 00 00 00 00 00 00 00 00 00 D8 0A CA 76 14  // ..............v.
    03C0: 4A 89 43 B7 E5 FD 88 79 17 62 AD 00 00 00 00 00  // J.C....y.b......
    03D0: 00 00 00 00 00 00 00 00 00 00 00 FC CB E2 2F AA  // ............../.
    03E0: B9 93 4A AB 5B 40 17 3B 58 1C 42 00 00 00 00 00  // ..J.[@.;X.B.....
    03F0: 00 00 00 00 00 00 00 00 00 00 00 EE 85 A8 86 1E  // ................
    0400: D7 D6 2E 0F C1 9D 6C CC 96 77 EB 00 00 00 00 00  // ......l..w......
    0410: 00 00 00 00 00 00 00 00 00 00 00 CF CC 05 3D 3C  // ..............=<
    0420: 05 AB 41 8F 9C AC BB FD 4B B6 E1 00 00 00 00 00  // ..A.....K.......
    0430: 00 00 00 00 00 00 00 00 00 00 00 17 E6 00 3E FF  // ..............>.
    0440: C8 88 4E 81 33 C3 03 20 89 C5 E7 01 00 7D 00 01  // ..N.3.. .....}..
    0450: 00 00 01 09 FF 0D A3 BF 56 22 46 A9 E7 39 9B 0A  // ........V"F..9..
    0460: 79 E7 C7 74 00 00 00 56 00 65 00 6E 00 48 00 77  // y..t...V.e.n.H.w
    0470: 00 28 00 41 00 33 00 30 00 44 00 46 00 46 00 30  // .(.A.3.0.D.F.F.0
    0480: 00 39 00 2D 00 35 00 36 00 42 00 46 00 2D 00 34  // .9.-.5.6.B.F.-.4
    0490: 00 36 00 32 00 32 00 2D 00 41 00 39 00 45 00 37  // .6.2.2.-.A.9.E.7
    04A0: 00 2D 00 33 00 39 00 39 00 42 00 30 00 41 00 37  // .-.3.9.9.B.0.A.7
    04B0: 00 39 00 45 00 37 00 43 00 37 00 29 00 00 00 02  // .9.E.7.C.7.)....
    04C0: 01 05 00 00 00 00 01 00 01 00 A1 00 01 00 00 01  // ................
    04D0: 08 98 B2 46 F0 06 A0 4C 9F 92 5C 49 67 82 92 78  // ...F...L..\Ig..x
    04E0: 74 00 00 00 56 00 65 00 6E 00 48 00 77 00 28 00  // t...V.e.n.H.w.(.
    04F0: 34 00 36 00 42 00 32 00 39 00 38 00 30 00 38 00  // 4.6.B.2.9.8.0.8.
    0500: 2D 00 30 00 36 00 46 00 30 00 2D 00 34 00 43 00  // -.0.6.F.0.-.4.C.
    0510: 41 00 30 00 2D 00 39 00 46 00 39 00 32 00 2D 00  // A.0.-.9.F.9.2.-.
    0520: 35 00 43 00 34 00 39 00 36 00 37 00 38 00 32 00  // 5.C.4.9.6.7.8.2.
    0530: 39 00 32 00 37 00 38 00 29 00 00 00 01 00 00 00  // 9.2.7.8.).......
    0540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0560: 00 00 00 00 00 00 00 00 00                       // .........


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Cst", 0x00003001)
{
    External (_SB_.PR00, DeviceObj)
    External (C6LT, UnknownObj)
    External (C6MW, UnknownObj)
    External (C7LT, UnknownObj)
    External (C7MW, UnknownObj)
    External (CDLT, UnknownObj)
    External (CDLV, UnknownObj)
    External (CDMW, UnknownObj)
    External (CDPW, UnknownObj)
    External (CFGD, UnknownObj)
    External (FEMD, UnknownObj)
    External (FMBL, UnknownObj)
    External (PF00, UnknownObj)
    External (PFLV, UnknownObj)
    External (PWRS, UnknownObj)

    Scope (\_SB.PR00)
    {
        Name (C1TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            One, 
            One, 
            0x03E8
        })
        Name (C6TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001815, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0x015E
        })
        Name (C7TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0xC8
        })
        Name (CDTM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x03, 
            Zero, 
            Zero
        })
        Name (MWES, ResourceTemplate ()
        {
            Register (FFixedHW, 
                0x01,               // Bit Width
                0x02,               // Bit Offset
                0x0000000000000000, // Address
                0x01,               // Access Size
                )
        })
        Name (AC2V, Zero)
        Name (AC3V, Zero)
        Name (C3ST, Package (0x04)
        {
            0x03, 
            Package (0x00){}, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C2ST, Package (0x03)
        {
            0x02, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C1ST, Package (0x02)
        {
            One, 
            Package (0x00){}
        })
        Name (CSTF, Zero)
        Method (_CST, 0, Serialized)  // _CST: C-States
        {
            If (!CSTF)
            {
                C6TM [0x02] = C6LT /* External reference */
                C7TM [0x02] = C7LT /* External reference */
                CDTM [0x02] = CDLT /* External reference */
                CDTM [0x03] = CDPW /* External reference */
                DerefOf (CDTM [Zero]) [0x07] = CDLV /* External reference */
                If (((CFGD & 0x0800) && (PF00 & 0x0200)))
                {
                    C1TM [Zero] = MWES /* \_SB_.PR00.MWES */
                    C6TM [Zero] = MWES /* \_SB_.PR00.MWES */
                    C7TM [Zero] = MWES /* \_SB_.PR00.MWES */
                    CDTM [Zero] = MWES /* \_SB_.PR00.MWES */
                    DerefOf (C6TM [Zero]) [0x07] = C6MW /* External reference */
                    DerefOf (C7TM [Zero]) [0x07] = C7MW /* External reference */
                    DerefOf (CDTM [Zero]) [0x07] = CDMW /* External reference */
                }
                ElseIf (((CFGD & 0x0800) && (PF00 & 0x0100)))
                {
                    C1TM [Zero] = MWES /* \_SB_.PR00.MWES */
                }

                CSTF = Ones
            }

            AC2V = Zero
            AC3V = Zero
            C3ST [One] = C1TM /* \_SB_.PR00.C1TM */
            If ((CFGD & 0x20))
            {
                C3ST [0x02] = C7TM /* \_SB_.PR00.C7TM */
                AC2V = Ones
            }
            ElseIf ((CFGD & 0x10))
            {
                C3ST [0x02] = C6TM /* \_SB_.PR00.C6TM */
                AC2V = Ones
            }

            If ((CFGD & 0x4000))
            {
                C3ST [0x03] = CDTM /* \_SB_.PR00.CDTM */
                AC3V = Ones
            }

            If ((AC2V && AC3V))
            {
                Return (C3ST) /* \_SB_.PR00.C3ST */
            }
            ElseIf (AC2V)
            {
                C2ST [One] = DerefOf (C3ST [One])
                C2ST [0x02] = DerefOf (C3ST [0x02])
                Return (C2ST) /* \_SB_.PR00.C2ST */
            }
            ElseIf (AC3V)
            {
                C2ST [One] = DerefOf (C3ST [One])
                C2ST [0x02] = DerefOf (C3ST [0x03])
                DerefOf (C2ST [0x02]) [One] = 0x02
                Return (C2ST) /* \_SB_.PR00.C2ST */
            }
            Else
            {
                C1ST [One] = DerefOf (C3ST [One])
                Return (C1ST) /* \_SB_.PR00.C1ST */
            }
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 2, "PmaxDv", "Pmax_Dev", 0x00000001)
{
    External (PXAC, IntObj)
    External (PXDC, IntObj)
    External (PXFD, IntObj)
    External (PXUC, IntObj)
    External (PXWC, IntObj)

    Scope (\_SB)
    {
        Device (PMAX)
        {
            Name (_HID, "INT3533")  // _HID: Hardware ID
            Name (RTKS, "\\_SB.PC00.HDAS.RTKC")
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Name (RTK0, 0x0BB8)
            Name (RTKX, 0x0000)
            Name (WFCS, "\\_SB.PC00.LNK2")
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Name (WFC0, 0x032A)
            Name (WFCX, 0x0000)
            Name (UFCS, "\\_SB.PC00.LNK0")
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Name (UFC0, 0x033E)
            Name (UFCX, 0x0000)
            Name (FLDS, "\\_SB.PC00.CLP0")
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Name (FLD0, 0x2328)
            Name (FLDX, 0x0000)
            Name (DSMP, Package (0x04)
            {
                Package (0x02)
                {
                    "", 
                    Package (0x02)
                    {
                        Package (0x02)
                        {
                            Zero, 
                            0xFFFF
                        }, 

                        Package (0x02)
                        {
                            One, 
                            0xFFFF
                        }
                    }
                }, 

                Package (0x02)
                {
                    "", 
                    Package (0x02)
                    {
                        Package (0x02)
                        {
                            Zero, 
                            0xFFFF
                        }, 

                        Package (0x02)
                        {
                            One, 
                            0xFFFF
                        }
                    }
                }, 

                Package (0x02)
                {
                    "", 
                    Package (0x02)
                    {
                        Package (0x02)
                        {
                            Zero, 
                            0xFFFF
                        }, 

                        Package (0x02)
                        {
                            One, 
                            0xFFFF
                        }
                    }
                }, 

                Package (0x02)
                {
                    "", 
                    Package (0x02)
                    {
                        Package (0x02)
                        {
                            Zero, 
                            0xFFFF
                        }, 

                        Package (0x02)
                        {
                            One, 
                            0xFFFF
                        }
                    }
                }
            })
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("2256364f-a3a9-4c9a-bcec-a34a34a57144") /* Unknown UUID */))
                {
                    DerefOf (DSMP [Zero]) [Zero] = RTKS /* \_SB_.PMAX.RTKS */
                    DerefOf (DerefOf (DerefOf (DSMP [Zero]) [One]
                        ) [Zero]) [One] = RTK0 /* \_SB_.PMAX.RTK0 */
                    DerefOf (DerefOf (DerefOf (DSMP [Zero]) [One]
                        ) [One]) [One] = RTKX /* \_SB_.PMAX.RTKX */
                    DerefOf (DSMP [One]) [Zero] = WFCS /* \_SB_.PMAX.WFCS */
                    DerefOf (DerefOf (DerefOf (DSMP [One]) [One]
                        ) [Zero]) [One] = WFC0 /* \_SB_.PMAX.WFC0 */
                    DerefOf (DerefOf (DerefOf (DSMP [One]) [One]
                        ) [One]) [One] = WFCX /* \_SB_.PMAX.WFCX */
                    DerefOf (DSMP [0x02]) [Zero] = UFCS /* \_SB_.PMAX.UFCS */
                    DerefOf (DerefOf (DerefOf (DSMP [0x02]) [One]
                        ) [Zero]) [One] = UFC0 /* \_SB_.PMAX.UFC0 */
                    DerefOf (DerefOf (DerefOf (DSMP [0x02]) [One]
                        ) [One]) [One] = UFCX /* \_SB_.PMAX.UFCX */
                    DerefOf (DSMP [0x03]) [Zero] = FLDS /* \_SB_.PMAX.FLDS */
                    DerefOf (DerefOf (DerefOf (DSMP [0x03]) [One]
                        ) [Zero]) [One] = FLD0 /* \_SB_.PMAX.FLD0 */
                    DerefOf (DerefOf (DerefOf (DSMP [0x03]) [One]
                        ) [One]) [One] = FLDX /* \_SB_.PMAX.FLDX */
                    If ((Arg1 == Zero))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }

                        If ((Arg2 == One))
                        {
                            If ((PXAC == One))
                            {
                                DerefOf (DSMP [Zero]) [One] = Package (0x02)
                                    {
                                        Package (0x02)
                                        {
                                            Zero, 
                                            Zero
                                        }, 

                                        Package (0x02)
                                        {
                                            One, 
                                            Zero
                                        }
                                    }
                            }

                            If ((PXWC == One))
                            {
                                DerefOf (DSMP [One]) [One] = Package (0x02)
                                    {
                                        Package (0x02)
                                        {
                                            Zero, 
                                            Zero
                                        }, 

                                        Package (0x02)
                                        {
                                            One, 
                                            Zero
                                        }
                                    }
                            }

                            If ((PXUC == One))
                            {
                                DerefOf (DSMP [0x02]) [One] = Package (0x02)
                                    {
                                        Package (0x02)
                                        {
                                            Zero, 
                                            Zero
                                        }, 

                                        Package (0x02)
                                        {
                                            One, 
                                            Zero
                                        }
                                    }
                            }

                            If ((PXFD == One))
                            {
                                DerefOf (DSMP [0x03]) [One] = Package (0x02)
                                    {
                                        Package (0x02)
                                        {
                                            Zero, 
                                            Zero
                                        }, 

                                        Package (0x02)
                                        {
                                            One, 
                                            Zero
                                        }
                                    }
                            }

                            Return (DSMP) /* \_SB_.PMAX.DSMP */
                        }
                    }

                    Return (Zero)
                }

                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PXDC == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApIst", 0x00003000)
{
    External (_SB_.PR00._PCT, MethodObj)    // 0 Arguments
    External (_SB_.PR00._PPC, MethodObj)    // 0 Arguments
    External (_SB_.PR00._PSS, MethodObj)    // 0 Arguments
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)
    External (_SB_.PR24, DeviceObj)
    External (_SB_.PR25, DeviceObj)
    External (_SB_.PR26, DeviceObj)
    External (_SB_.PR27, DeviceObj)
    External (_SB_.PR28, DeviceObj)
    External (_SB_.PR29, DeviceObj)
    External (_SB_.PR30, DeviceObj)
    External (_SB_.PR31, DeviceObj)
    External (_SB_.PR32, DeviceObj)
    External (_SB_.PR33, DeviceObj)
    External (_SB_.PR34, DeviceObj)
    External (_SB_.PR35, DeviceObj)
    External (_SB_.PR36, DeviceObj)
    External (_SB_.PR37, DeviceObj)
    External (_SB_.PR38, DeviceObj)
    External (_SB_.PR39, DeviceObj)
    External (_SB_.PR40, DeviceObj)
    External (_SB_.PR41, DeviceObj)
    External (_SB_.PR42, DeviceObj)
    External (_SB_.PR43, DeviceObj)
    External (_SB_.PR44, DeviceObj)
    External (_SB_.PR45, DeviceObj)
    External (_SB_.PR46, DeviceObj)
    External (_SB_.PR47, DeviceObj)
    External (_SB_.PR48, DeviceObj)
    External (_SB_.PR49, DeviceObj)
    External (_SB_.PR50, DeviceObj)
    External (_SB_.PR51, DeviceObj)
    External (_SB_.PR52, DeviceObj)
    External (_SB_.PR53, DeviceObj)
    External (_SB_.PR54, DeviceObj)
    External (_SB_.PR55, DeviceObj)
    External (_SB_.PR56, DeviceObj)
    External (_SB_.PR57, DeviceObj)
    External (_SB_.PR58, DeviceObj)
    External (_SB_.PR59, DeviceObj)
    External (_SB_.PR60, DeviceObj)
    External (_SB_.PR61, DeviceObj)
    External (_SB_.PR62, DeviceObj)
    External (_SB_.PR63, DeviceObj)

    If (CondRefOf (\_SB.PR01))
    {
        Scope (\_SB.PR01)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR02))
    {
        Scope (\_SB.PR02)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR03))
    {
        Scope (\_SB.PR03)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR04))
    {
        Scope (\_SB.PR04)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR05))
    {
        Scope (\_SB.PR05)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR06))
    {
        Scope (\_SB.PR06)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR07))
    {
        Scope (\_SB.PR07)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR08))
    {
        Scope (\_SB.PR08)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR09))
    {
        Scope (\_SB.PR09)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR10))
    {
        Scope (\_SB.PR10)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR11))
    {
        Scope (\_SB.PR11)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR12))
    {
        Scope (\_SB.PR12)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR13))
    {
        Scope (\_SB.PR13)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR14))
    {
        Scope (\_SB.PR14)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR15))
    {
        Scope (\_SB.PR15)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR16))
    {
        Scope (\_SB.PR16)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR17))
    {
        Scope (\_SB.PR17)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR18))
    {
        Scope (\_SB.PR18)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR19))
    {
        Scope (\_SB.PR19)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR20))
    {
        Scope (\_SB.PR20)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR21))
    {
        Scope (\_SB.PR21)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR22))
    {
        Scope (\_SB.PR22)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR23))
    {
        Scope (\_SB.PR23)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR24))
    {
        Scope (\_SB.PR24)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR25))
    {
        Scope (\_SB.PR25)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR26))
    {
        Scope (\_SB.PR26)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR27))
    {
        Scope (\_SB.PR27)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR28))
    {
        Scope (\_SB.PR28)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR29))
    {
        Scope (\_SB.PR29)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR30))
    {
        Scope (\_SB.PR30)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR31))
    {
        Scope (\_SB.PR31)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR32))
    {
        Scope (\_SB.PR32)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR33))
    {
        Scope (\_SB.PR33)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR34))
    {
        Scope (\_SB.PR34)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR35))
    {
        Scope (\_SB.PR35)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR36))
    {
        Scope (\_SB.PR36)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR37))
    {
        Scope (\_SB.PR37)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR38))
    {
        Scope (\_SB.PR38)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR39))
    {
        Scope (\_SB.PR39)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR40))
    {
        Scope (\_SB.PR40)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR41))
    {
        Scope (\_SB.PR41)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR42))
    {
        Scope (\_SB.PR42)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR43))
    {
        Scope (\_SB.PR43)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR44))
    {
        Scope (\_SB.PR44)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR45))
    {
        Scope (\_SB.PR45)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR46))
    {
        Scope (\_SB.PR46)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR47))
    {
        Scope (\_SB.PR47)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR48))
    {
        Scope (\_SB.PR48)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR49))
    {
        Scope (\_SB.PR49)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR50))
    {
        Scope (\_SB.PR50)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR51))
    {
        Scope (\_SB.PR51)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR52))
    {
        Scope (\_SB.PR52)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR53))
    {
        Scope (\_SB.PR53)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR54))
    {
        Scope (\_SB.PR54)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR55))
    {
        Scope (\_SB.PR55)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR56))
    {
        Scope (\_SB.PR56)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR57))
    {
        Scope (\_SB.PR57)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR58))
    {
        Scope (\_SB.PR58)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR59))
    {
        Scope (\_SB.PR59)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR60))
    {
        Scope (\_SB.PR60)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR61))
    {
        Scope (\_SB.PR61)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR62))
    {
        Scope (\_SB.PR62)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }

    If (CondRefOf (\_SB.PR63))
    {
        Scope (\_SB.PR63)
        {
            Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
            {
                Return (\_SB.PR00._PPC ())
            }

            Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
            {
                Return (\_SB.PR00._PCT ())
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Return (\_SB.PR00._PSS ())
            }
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 2, "MSI_NB", "UsbCTabl", 0x00001000)
{
    External (_SB_.PC00.LPCB.H_EC.ERPO, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.WOPM, MethodObj)    // 1 Arguments
    External (_SB_.PC00.XHCI.RHUB, DeviceObj)
    External (ADBG, MethodObj)    // 1 Arguments
    External (TBTS, UnknownObj)
    External (TP1D, UnknownObj)
    External (TP1P, UnknownObj)
    External (TP1T, UnknownObj)
    External (TP1U, UnknownObj)
    External (TP2D, UnknownObj)
    External (TP2P, UnknownObj)
    External (TP2T, UnknownObj)
    External (TP2U, UnknownObj)
    External (TP3D, UnknownObj)
    External (TP3P, UnknownObj)
    External (TP3T, UnknownObj)
    External (TP3U, UnknownObj)
    External (TP4D, UnknownObj)
    External (TP4P, UnknownObj)
    External (TP4T, UnknownObj)
    External (TP4U, UnknownObj)
    External (TP5D, UnknownObj)
    External (TP5P, UnknownObj)
    External (TP5T, UnknownObj)
    External (TP5U, UnknownObj)
    External (TP6D, UnknownObj)
    External (TP6P, UnknownObj)
    External (TP6T, UnknownObj)
    External (TP6U, UnknownObj)
    External (TP7D, UnknownObj)
    External (TP7P, UnknownObj)
    External (TP7T, UnknownObj)
    External (TP7U, UnknownObj)
    External (TP8D, UnknownObj)
    External (TP8P, UnknownObj)
    External (TP8T, UnknownObj)
    External (TP8U, UnknownObj)
    External (TP9D, UnknownObj)
    External (TP9P, UnknownObj)
    External (TP9T, UnknownObj)
    External (TP9U, UnknownObj)
    External (TPAD, UnknownObj)
    External (TPAP, UnknownObj)
    External (TPAT, UnknownObj)
    External (TPAU, UnknownObj)
    External (TTUP, UnknownObj)
    External (UBCB, UnknownObj)
    External (UCMS, UnknownObj)
    External (UDRS, UnknownObj)
    External (USTC, UnknownObj)
    External (XDCE, UnknownObj)

    Debug = "[UsbC UsbCTabl SSDT][AcpiTableEntry]"
    Debug = Timer
    ADBG ("[UsbC UsbCTabl SSDT][AcpiTableEntry]")
    Scope (\_SB)
    {
        Device (UBTC)
        {
            Name (_HID, EisaId ("USBC000"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0CA0"))  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_DDN, "USB Type C")  // _DDN: DOS Device Name
            Method (MGBS, 0, Serialized)
            {
                If ((UCMS == 0x02))
                {
                    Local0 = 0x0100
                }
                Else
                {
                    Local0 = 0x10
                }

                ADBG (Concatenate ("USBC.MGBS", ToHexString (Local0)))
                Return (Local0)
            }

            Method (UCMI, 0, Serialized)
            {
                Local0 = 0x10
                Local1 = (UBCB + Local0)
                ADBG (Concatenate ("UBTC", ToHexString (UBCB)))
                ADBG (Concatenate ("UBTC.UCMI", ToHexString (Local1)))
                Return (Local1)
            }

            Method (UCMO, 0, Serialized)
            {
                Local0 = MGBS ()
                Local0 = (Local0 + 0x10)
                Local1 = (UBCB + Local0)
                ADBG (Concatenate ("UBTC.UCMO", ToHexString (Local1)))
                Return (Local1)
            }

            Name (CRS, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y00)
            })
            OperationRegion (USBC, SystemMemory, UBCB, 0x10)
            Field (USBC, ByteAcc, Lock, Preserve)
            {
                VER1,   8, 
                VER2,   8, 
                RSV1,   8, 
                RSV2,   8, 
                CCI0,   8, 
                CCI1,   8, 
                CCI2,   8, 
                CCI3,   8, 
                CTL0,   8, 
                CTL1,   8, 
                CTL2,   8, 
                CTL3,   8, 
                CTL4,   8, 
                CTL5,   8, 
                CTL6,   8, 
                CTL7,   8
            }

            OperationRegion (USCI, SystemMemory, UCMI (), MGBS ())
            Field (USCI, ByteAcc, Lock, Preserve)
            {
                MGI0,   8, 
                MGI1,   8, 
                MGI2,   8, 
                MGI3,   8, 
                MGI4,   8, 
                MGI5,   8, 
                MGI6,   8, 
                MGI7,   8, 
                MGI8,   8, 
                MGI9,   8, 
                MGIA,   8, 
                MGIB,   8, 
                MGIC,   8, 
                MGID,   8, 
                MGIE,   8, 
                MGIF,   8
            }

            OperationRegion (UCSO, SystemMemory, UCMO (), MGBS ())
            Field (UCSO, ByteAcc, Lock, Preserve)
            {
                MGO0,   8, 
                MGO1,   8, 
                MGO2,   8, 
                MGO3,   8, 
                MGO4,   8, 
                MGO5,   8, 
                MGO6,   8, 
                MGO7,   8, 
                MGO8,   8, 
                MGO9,   8, 
                MGOA,   8, 
                MGOB,   8, 
                MGOC,   8, 
                MGOD,   8, 
                MGOE,   8, 
                MGOF,   8
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRS, \_SB.UBTC._Y00._BAS, CBAS)  // _BAS: Base Address
                CBAS = UBCB /* External reference */
                Return (CRS) /* \_SB_.UBTC.CRS_ */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((USTC == One))
                {
                    If (((UCMS == One) || (UCMS == 0x02)))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (RUCC, 2, Serialized)
            {
                If (((Arg0 <= 0x0A) && (Arg0 >= One)))
                {
                    If ((Arg1 == One))
                    {
                        Return (\_SB.UBTC.TUPC (One, FTPT (Arg0)))
                    }
                    Else
                    {
                        Return (\_SB.UBTC.TPLD (One, FPMN (Arg0)))
                    }
                }
                ElseIf ((Arg1 == One))
                {
                    Return (\_SB.UBTC.TUPC (Zero, Zero))
                }
                Else
                {
                    Return (\_SB.UBTC.TPLD (Zero, Zero))
                }
            }

            Method (FTPT, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (One)
                    {
                        Local0 = (TP1D >> One)
                        Local0 &= 0x03
                    }
                    Case (0x02)
                    {
                        Local0 = (TP2D >> One)
                        Local0 &= 0x03
                    }
                    Case (0x03)
                    {
                        Local0 = (TP3D >> One)
                        Local0 &= 0x03
                    }
                    Case (0x04)
                    {
                        Local0 = (TP4D >> One)
                        Local0 &= 0x03
                    }
                    Case (0x05)
                    {
                        Local0 = (TP5D >> One)
                        Local0 &= 0x03
                    }
                    Case (0x06)
                    {
                        Local0 = (TP6D >> One)
                        Local0 &= 0x03
                    }
                    Case (0x07)
                    {
                        Local0 = (TP7D >> One)
                        Local0 &= 0x03
                    }
                    Case (0x08)
                    {
                        Local0 = (TP8D >> One)
                        Local0 &= 0x03
                    }
                    Case (0x09)
                    {
                        Local0 = (TP9D >> One)
                        Local0 &= 0x03
                    }
                    Case (0x0A)
                    {
                        Local0 = (TPAD >> One)
                        Local0 &= 0x03
                    }
                    Default
                    {
                        Local0 = 0xFF
                    }

                }

                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        Return (0x09)
                    }
                    Case (One)
                    {
                        Return (0x09)
                    }
                    Case (0x02)
                    {
                        Return (0x09)
                    }
                    Case (0x03)
                    {
                        Return (Zero)
                    }

                }

                Return (0x09)
            }

            Method (FPMN, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (One)
                    {
                        Local0 = (TP1D >> One)
                        Local0 &= 0x03
                        Local1 = (TP1D & One)
                        Local2 = TP1P /* External reference */
                        Local3 = TP1T /* External reference */
                    }
                    Case (0x02)
                    {
                        Local0 = (TP2D >> One)
                        Local0 &= 0x03
                        Local1 = (TP2D & One)
                        Local2 = TP2P /* External reference */
                        Local3 = TP2T /* External reference */
                    }
                    Case (0x03)
                    {
                        Local0 = (TP3D >> One)
                        Local0 &= 0x03
                        Local1 = (TP3D & One)
                        Local2 = TP3P /* External reference */
                        Local3 = TP3T /* External reference */
                    }
                    Case (0x04)
                    {
                        Local0 = (TP4D >> One)
                        Local0 &= 0x03
                        Local1 = (TP4D & One)
                        Local2 = TP4P /* External reference */
                        Local3 = TP4T /* External reference */
                    }
                    Case (0x05)
                    {
                        Local0 = (TP5D >> One)
                        Local0 &= 0x03
                        Local1 = (TP5D & One)
                        Local2 = TP5P /* External reference */
                        Local3 = TP5T /* External reference */
                    }
                    Case (0x06)
                    {
                        Local0 = (TP6D >> One)
                        Local0 &= 0x03
                        Local1 = (TP6D & One)
                        Local2 = TP6P /* External reference */
                        Local3 = TP6T /* External reference */
                    }
                    Case (0x07)
                    {
                        Local0 = (TP7D >> One)
                        Local0 &= 0x03
                        Local1 = (TP7D & One)
                        Local2 = TP7P /* External reference */
                        Local3 = TP7T /* External reference */
                    }
                    Case (0x08)
                    {
                        Local0 = (TP8D >> One)
                        Local0 &= 0x03
                        Local1 = (TP8D & One)
                        Local2 = TP8P /* External reference */
                        Local3 = TP8T /* External reference */
                    }
                    Case (0x09)
                    {
                        Local0 = (TP9D >> One)
                        Local0 &= 0x03
                        Local1 = (TP9D & One)
                        Local2 = TP9P /* External reference */
                        Local3 = TP9T /* External reference */
                    }
                    Case (0x0A)
                    {
                        Local0 = (TPAD >> One)
                        Local0 &= 0x03
                        Local1 = (TPAD & One)
                        Local2 = TPAP /* External reference */
                        Local3 = TPAT /* External reference */
                    }
                    Default
                    {
                        Local0 = 0xFF
                        Local1 = Zero
                        Local2 = Zero
                        Local3 = Zero
                    }

                }

                If ((Local0 == Zero))
                {
                    Return (Local2)
                }
                ElseIf (((Local0 == One) || ((Local0 == 0x02) || (Local0 == 
                    0x03))))
                {
                    If ((Local1 == One))
                    {
                        Return (Local2)
                    }
                    Else
                    {
                        Return (Local3)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (TPLD, 2, Serialized)
            {
                Name (PCKG, Package (0x01)
                {
                    Buffer (0x10){}
                })
                CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                REV = One
                CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                VISI = Arg0
                CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                GPOS = Arg1
                CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                SHAP = One
                CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                WID = 0x08
                CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                HGT = 0x03
                Return (PCKG) /* \_SB_.UBTC.TPLD.PCKG */
            }

            Method (TUPC, 2, Serialized)
            {
                Name (PCKG, Package (0x04)
                {
                    One, 
                    Zero, 
                    Zero, 
                    Zero
                })
                PCKG [Zero] = Arg0
                PCKG [One] = Arg1
                Return (PCKG) /* \_SB_.UBTC.TUPC.PCKG */
            }

            Method (ITCP, 1, Serialized)
            {
                Switch (ToInteger (FTPT (Arg0)))
                {
                    Case (Package (0x03)
                        {
                            0x08, 
                            0x09, 
                            0x0A
                        }

)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            If (((TTUP >= One) && (((TP1U == One) || (
                TP1U == 0x02)) && (ITCP (One) == One))))
            {
                Device (CR01)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (RUCC (One, 0x02))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (RUCC (One, One))
                    }
                }
            }

            If (((TTUP >= 0x02) && (((TP2U == One) || (
                TP2U == 0x02)) && (ITCP (0x02) == One))))
            {
                Device (CR02)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (RUCC (0x02, 0x02))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (RUCC (0x02, One))
                    }
                }
            }

            If (((TTUP >= 0x03) && (((TP3U == One) || (
                TP3U == 0x02)) && (ITCP (0x03) == One))))
            {
                Device (CR03)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (RUCC (0x03, 0x02))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (RUCC (0x03, One))
                    }
                }
            }

            If (((TTUP >= 0x04) && (((TP4U == One) || (
                TP4U == 0x02)) && (ITCP (0x04) == One))))
            {
                Device (CR04)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (RUCC (0x04, 0x02))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (RUCC (0x04, One))
                    }
                }
            }

            If (((TTUP >= 0x05) && (((TP5U == One) || (
                TP5U == 0x02)) && (ITCP (0x05) == One))))
            {
                Device (CR05)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (RUCC (0x05, 0x02))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (RUCC (0x05, One))
                    }
                }
            }

            If (((TTUP >= 0x06) && (((TP6U == One) || (
                TP6U == 0x02)) && (ITCP (0x06) == One))))
            {
                Device (CR06)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (RUCC (0x06, 0x02))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (RUCC (0x06, One))
                    }
                }
            }

            If (((TTUP >= 0x07) && (((TP7U == One) || (
                TP7U == 0x02)) && (ITCP (0x07) == One))))
            {
                Device (CR07)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (RUCC (0x07, 0x02))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (RUCC (0x07, One))
                    }
                }
            }

            If (((TTUP >= 0x08) && (((TP8U == One) || (
                TP8U == 0x02)) && (ITCP (0x08) == One))))
            {
                Device (CR08)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (RUCC (0x08, 0x02))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (RUCC (0x08, One))
                    }
                }
            }

            If (((TTUP >= 0x09) && (((TP9U == One) || (
                TP9U == 0x02)) && (ITCP (0x09) == One))))
            {
                Device (CR09)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (RUCC (0x09, 0x02))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (RUCC (0x09, One))
                    }
                }
            }

            If (((TTUP >= 0x0A) && (((TPAU == One) || (
                TPAU == 0x02)) && (ITCP (0x0A) == One))))
            {
                Device (CR0A)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (RUCC (0x0A, 0x02))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (RUCC (0x0A, One))
                    }
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Name (OPMP, Buffer (0x18){})
                If ((Arg0 == ToUUID ("6f8398c2-7ca4-11e4-ad36-631042b5008f") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x3F                                             // ?
                            })
                        }
                        Case (One)
                        {
                            OPMP [Zero] = MGO0 /* \_SB_.UBTC.MGO0 */
                            OPMP [One] = MGO1 /* \_SB_.UBTC.MGO1 */
                            OPMP [0x02] = MGO2 /* \_SB_.UBTC.MGO2 */
                            OPMP [0x03] = MGO3 /* \_SB_.UBTC.MGO3 */
                            OPMP [0x04] = MGO4 /* \_SB_.UBTC.MGO4 */
                            OPMP [0x05] = MGO5 /* \_SB_.UBTC.MGO5 */
                            OPMP [0x06] = MGO6 /* \_SB_.UBTC.MGO6 */
                            OPMP [0x07] = MGO7 /* \_SB_.UBTC.MGO7 */
                            OPMP [0x08] = MGO8 /* \_SB_.UBTC.MGO8 */
                            OPMP [0x09] = MGO9 /* \_SB_.UBTC.MGO9 */
                            OPMP [0x0A] = MGOA /* \_SB_.UBTC.MGOA */
                            OPMP [0x0B] = MGOB /* \_SB_.UBTC.MGOB */
                            OPMP [0x0C] = MGOC /* \_SB_.UBTC.MGOC */
                            OPMP [0x0D] = MGOD /* \_SB_.UBTC.MGOD */
                            OPMP [0x0E] = MGOE /* \_SB_.UBTC.MGOE */
                            OPMP [0x0F] = MGOF /* \_SB_.UBTC.MGOF */
                            OPMP [0x10] = CTL0 /* \_SB_.UBTC.CTL0 */
                            OPMP [0x11] = CTL1 /* \_SB_.UBTC.CTL1 */
                            OPMP [0x12] = CTL2 /* \_SB_.UBTC.CTL2 */
                            OPMP [0x13] = CTL3 /* \_SB_.UBTC.CTL3 */
                            OPMP [0x14] = CTL4 /* \_SB_.UBTC.CTL4 */
                            OPMP [0x15] = CTL5 /* \_SB_.UBTC.CTL5 */
                            OPMP [0x16] = CTL6 /* \_SB_.UBTC.CTL6 */
                            OPMP [0x17] = CTL7 /* \_SB_.UBTC.CTL7 */
                            \_SB.PC00.LPCB.H_EC.WOPM (OPMP)
                            ADBG ("_DSM OPM write to EC")
                        }
                        Case (0x02)
                        {
                            MGI0 = DerefOf (\_SB.PC00.LPCB.H_EC.ERPO () [Zero])
                            MGI1 = DerefOf (\_SB.PC00.LPCB.H_EC.ERPO () [One])
                            MGI2 = DerefOf (\_SB.PC00.LPCB.H_EC.ERPO () [0x02])
                            MGI3 = DerefOf (\_SB.PC00.LPCB.H_EC.ERPO () [0x03])
                            MGI4 = DerefOf (\_SB.PC00.LPCB.H_EC.ERPO () [0x04])
                            MGI5 = DerefOf (\_SB.PC00.LPCB.H_EC.ERPO () [0x05])
                            MGI6 = DerefOf (\_SB.PC00.LPCB.H_EC.ERPO () [0x06])
                            MGI7 = DerefOf (\_SB.PC00.LPCB.H_EC.ERPO () [0x07])
                            MGI8 = DerefOf (\_SB.PC00.LPCB.H_EC.ERPO () [0x08])
                            MGI9 = DerefOf (\_SB.PC00.LPCB.H_EC.ERPO () [0x09])
                            MGIA = DerefOf (\_SB.PC00.LPCB.H_EC.ERPO () [0x0A])
                            MGIB = DerefOf (\_SB.PC00.LPCB.H_EC.ERPO () [0x0B])
                            MGIC = DerefOf (\_SB.PC00.LPCB.H_EC.ERPO () [0x0C])
                            MGID = DerefOf (\_SB.PC00.LPCB.H_EC.ERPO () [0x0D])
                            MGIE = DerefOf (\_SB.PC00.LPCB.H_EC.ERPO () [0x0E])
                            MGIF = DerefOf (\_SB.PC00.LPCB.H_EC.ERPO () [0x0F])
                            CCI0 = DerefOf (\_SB.PC00.LPCB.H_EC.ERPO () [0x10])
                            CCI1 = DerefOf (\_SB.PC00.LPCB.H_EC.ERPO () [0x11])
                            CCI2 = DerefOf (\_SB.PC00.LPCB.H_EC.ERPO () [0x12])
                            CCI3 = DerefOf (\_SB.PC00.LPCB.H_EC.ERPO () [0x13])
                        }
                        Case (0x03)
                        {
                            Return (XDCE) /* External reference */
                        }
                        Case (0x04)
                        {
                            Return (UDRS) /* External reference */
                        }
                        Case (0x05)
                        {
                            If ((UCMS == 0x02))
                            {
                                Return (Buffer (One)
                                {
                                     0x01                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    ADBG ("[UsbC UsbCTabl SSDT][AcpiTableExit]")
    Debug = "[UsbC UsbCTabl SSDT][AcpiTableExit]"
    Debug = Timer
}



SSDT13
------
DefinitionBlock ("", "SSDT", 2, "DptfTb", "DptfTabl", 0x00001000)
{
    External (_SB_.AAC0, FieldUnitObj)
    External (_SB_.ACRT, FieldUnitObj)
    External (_SB_.APSV, FieldUnitObj)
    External (_SB_.CBMI, FieldUnitObj)
    External (_SB_.CFGD, FieldUnitObj)
    External (_SB_.CLVL, FieldUnitObj)
    External (_SB_.CPPC, FieldUnitObj)
    External (_SB_.CTC0, FieldUnitObj)
    External (_SB_.CTC1, FieldUnitObj)
    External (_SB_.CTC2, FieldUnitObj)
    External (_SB_.IETM.ODVP, MethodObj)    // 0 Arguments
    External (_SB_.IETM.SEN2, DeviceObj)
    External (_SB_.IETM.SEN3, DeviceObj)
    External (_SB_.ODV0, IntObj)
    External (_SB_.ODV1, IntObj)
    External (_SB_.ODV2, IntObj)
    External (_SB_.ODV3, IntObj)
    External (_SB_.ODV4, IntObj)
    External (_SB_.ODV5, IntObj)
    External (_SB_.OSCP, IntObj)
    External (_SB_.PAGD, DeviceObj)
    External (_SB_.PAGD._PUR, PkgObj)
    External (_SB_.PAGD._STA, MethodObj)    // 0 Arguments
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.LPCB.EC__, DeviceObj)
    External (_SB_.PC00.LPCB.EC__.CMD1, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC__.DAT1, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC__.DTDR, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC__.DTOK, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC__.MYEC, IntObj)
    External (_SB_.PC00.LPCB.EC__.PATM, UnknownObj)
    External (_SB_.PC00.LPCB.EC__.SCIC, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC__.SILE, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC__.SYSM, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC__.SYST, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC__.TSIT, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC__.TSL2, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC__.TST2, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC__.TSTL, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC__.TSTU, FieldUnitObj)
    External (_SB_.PC00.LPCB.EC__.TSU2, FieldUnitObj)
    External (_SB_.PC00.LPCB.H_EC.DPTF.ARTG, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.B1FC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.B1RC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.BMAX, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.CMPP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.CTYP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.FCHG, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.FNSL, MethodObj)    // 3 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.GFCE, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.GFME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.GFNS, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.GFTE, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.PBOK, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.PBSS, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.PROP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.PWRT, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.RBHF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.SCHG, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.SFME, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.SFTE, MethodObj)    // 2 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.SNRD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.STRP, MethodObj)    // 4 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.UPPM, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.UVTH, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.H_EC.DPTF.VBNL, MethodObj)    // 0 Arguments
    External (_SB_.PC00.MC__.MHBR, FieldUnitObj)
    External (_SB_.PC00.TCPU, DeviceObj)
    External (_SB_.PL10, FieldUnitObj)
    External (_SB_.PL11, FieldUnitObj)
    External (_SB_.PL12, FieldUnitObj)
    External (_SB_.PL20, FieldUnitObj)
    External (_SB_.PL21, FieldUnitObj)
    External (_SB_.PL22, FieldUnitObj)
    External (_SB_.PLDT.ART0, PkgObj)
    External (_SB_.PLDT.ART1, PkgObj)
    External (_SB_.PLDT.FPST, MethodObj)    // 1 Arguments
    External (_SB_.PLDT.GDDV, MethodObj)    // 0 Arguments
    External (_SB_.PLDT.GHID, MethodObj)    // 1 Arguments
    External (_SB_.PLDT.PSVT, PkgObj)
    External (_SB_.PLDT.PTRT, MethodObj)    // 0 Arguments
    External (_SB_.PLW0, FieldUnitObj)
    External (_SB_.PLW1, FieldUnitObj)
    External (_SB_.PLW2, FieldUnitObj)
    External (_SB_.PR00, ProcessorObj)
    External (_SB_.PR00._PSS, MethodObj)    // 0 Arguments
    External (_SB_.PR00._TPC, IntObj)
    External (_SB_.PR00._TSD, MethodObj)    // 0 Arguments
    External (_SB_.PR00._TSS, MethodObj)    // 0 Arguments
    External (_SB_.PR00.LPSS, PkgObj)
    External (_SB_.PR00.TPSS, PkgObj)
    External (_SB_.PR00.TSMC, PkgObj)
    External (_SB_.PR00.TSMF, PkgObj)
    External (_SB_.PR01, ProcessorObj)
    External (_SB_.PR02, ProcessorObj)
    External (_SB_.PR03, ProcessorObj)
    External (_SB_.PR04, ProcessorObj)
    External (_SB_.PR05, ProcessorObj)
    External (_SB_.PR06, ProcessorObj)
    External (_SB_.PR07, ProcessorObj)
    External (_SB_.PR08, ProcessorObj)
    External (_SB_.PR09, ProcessorObj)
    External (_SB_.PR10, ProcessorObj)
    External (_SB_.PR11, ProcessorObj)
    External (_SB_.PR12, ProcessorObj)
    External (_SB_.PR13, ProcessorObj)
    External (_SB_.PR14, ProcessorObj)
    External (_SB_.PR15, ProcessorObj)
    External (_SB_.PR16, ProcessorObj)
    External (_SB_.PR17, ProcessorObj)
    External (_SB_.PR18, ProcessorObj)
    External (_SB_.PR19, ProcessorObj)
    External (_SB_.PR20, ProcessorObj)
    External (_SB_.PR21, ProcessorObj)
    External (_SB_.PR22, ProcessorObj)
    External (_SB_.PR23, ProcessorObj)
    External (_SB_.PR24, ProcessorObj)
    External (_SB_.PR25, ProcessorObj)
    External (_SB_.PR26, ProcessorObj)
    External (_SB_.PR27, ProcessorObj)
    External (_SB_.PR28, ProcessorObj)
    External (_SB_.PR29, ProcessorObj)
    External (_SB_.PR30, ProcessorObj)
    External (_SB_.PR31, ProcessorObj)
    External (_SB_.PR32, ProcessorObj)
    External (_SB_.PR33, ProcessorObj)
    External (_SB_.PR34, ProcessorObj)
    External (_SB_.PR35, ProcessorObj)
    External (_SB_.PR36, ProcessorObj)
    External (_SB_.PR37, ProcessorObj)
    External (_SB_.PR38, ProcessorObj)
    External (_SB_.PR39, ProcessorObj)
    External (_SB_.PR40, ProcessorObj)
    External (_SB_.PR41, ProcessorObj)
    External (_SB_.PR42, ProcessorObj)
    External (_SB_.PR43, ProcessorObj)
    External (_SB_.PR44, ProcessorObj)
    External (_SB_.PR45, ProcessorObj)
    External (_SB_.PR46, ProcessorObj)
    External (_SB_.PR47, ProcessorObj)
    External (_SB_.SLPB, DeviceObj)
    External (_SB_.TAR0, FieldUnitObj)
    External (_SB_.TAR1, FieldUnitObj)
    External (_SB_.TAR2, FieldUnitObj)
    External (_TZ_.ETMD, IntObj)
    External (_TZ_.TZ00, ThermalZoneObj)
    External (ACTT, IntObj)
    External (ADBG, MethodObj)    // 1 Arguments
    External (ATPC, IntObj)
    External (CRTT, IntObj)
    External (D8XH, MethodObj)    // 2 Arguments
    External (ECON, IntObj)
    External (HIDW, MethodObj)    // 4 Arguments
    External (HIWC, MethodObj)    // 1 Arguments
    External (IPCS, MethodObj)    // 7 Arguments
    External (PF00, IntObj)
    External (PNHM, IntObj)
    External (PSVT, IntObj)
    External (PTPC, IntObj)
    External (PWRS, IntObj)
    External (TCNT, IntObj)
    External (TSOD, IntObj)

    Debug = "[Dptf DptfTabl SSDT][AcpiTableEntry]"
    Debug = Timer
    ADBG ("[Dptf DptfTabl SSDT][AcpiTableEntry]")
    Scope (\_SB)
    {
        OperationRegion (DNVS, SystemMemory, 0x658F6000, 0x0021)
        Field (DNVS, AnyAcc, Lock, Preserve)
        {
            DPTF,   8, 
            DCFE,   32, 
            SADE,   8, 
            FND1,   8, 
            FND2,   8, 
            FND3,   8, 
            CHGE,   8, 
            BATR,   8, 
            IN34,   8, 
            S1DE,   8, 
            S2DE,   8, 
            S3DE,   8, 
            S4DE,   8, 
            S5DE,   8, 
            PCHE,   8, 
            PPSZ,   32, 
            PWRE,   8, 
            PPPR,   16, 
            ODV0,   8, 
            ODV1,   8, 
            ODV2,   8, 
            ODV3,   8, 
            ODV4,   8, 
            ODV5,   8, 
            FNSH,   8, 
            FNAU,   8
        }

        Device (IETM)
        {
            Name (_UID, "IETM")  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (\_SB.PLDT.GHID (_UID))
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((\_SB.DPTF == One) && (\_SB.IN34 == One)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (PTRP, Zero)
            Name (PSEM, Zero)
            Name (ATRP, Zero)
            Name (ASEM, Zero)
            Name (YTRP, Zero)
            Name (YSEM, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, Zero, STS1)
                CreateDWordField (Arg3, 0x04, CAP1)
                If ((Arg1 != One))
                {
                    STS1 &= 0xFFFFFF00
                    STS1 |= 0x0A
                    Return (Arg3)
                }

                If ((Arg2 != 0x02))
                {
                    STS1 &= 0xFFFFFF00
                    STS1 |= 0x02
                    Return (Arg3)
                }

                If (CondRefOf (\_SB.APSV))
                {
                    If ((PSEM == Zero))
                    {
                        PSEM = One
                        PTRP = \_SB.APSV /* External reference */
                    }
                }

                If (CondRefOf (\_SB.AAC0))
                {
                    If ((ASEM == Zero))
                    {
                        ASEM = One
                        ATRP = \_SB.AAC0 /* External reference */
                    }
                }

                If (CondRefOf (\_SB.ACRT))
                {
                    If ((YSEM == Zero))
                    {
                        YSEM = One
                        YTRP = \_SB.ACRT /* External reference */
                    }
                }

                If ((Arg0 == ToUUID ("b23ba85d-c8b7-3542-88de-8de2ffcfd698") /* Unknown UUID */))
                {
                    If (~(STS1 & One))
                    {
                        If (\_SB.PC00.LPCB.EC.MYEC)
                        {
                            \_SB.PC00.LPCB.EC.DTDR = One
                            \_SB.PC00.LPCB.EC.DTOK = One
                        }

                        If ((CAP1 & One))
                        {
                            If ((CAP1 & 0x02))
                            {
                                \_SB.AAC0 = 0x6E
                                \_TZ.ETMD = Zero
                            }
                            Else
                            {
                                \_SB.AAC0 = ATRP /* \_SB_.IETM.ATRP */
                                \_TZ.ETMD = One
                            }

                            If ((CAP1 & 0x04))
                            {
                                \_SB.APSV = 0x6E
                            }
                            Else
                            {
                                \_SB.APSV = PTRP /* \_SB_.IETM.PTRP */
                            }

                            If ((CAP1 & 0x08))
                            {
                                \_SB.ACRT = 0xD2
                            }
                            Else
                            {
                                \_SB.ACRT = YTRP /* \_SB_.IETM.YTRP */
                            }

                            If (CondRefOf (\_TZ.TZ00))
                            {
                                Notify (\_TZ.TZ00, 0x81) // Information Change
                            }
                        }
                        Else
                        {
                            \_SB.ACRT = YTRP /* \_SB_.IETM.YTRP */
                            \_SB.APSV = PTRP /* \_SB_.IETM.PTRP */
                            \_SB.AAC0 = ATRP /* \_SB_.IETM.ATRP */
                            \_TZ.ETMD = One
                        }

                        If (CondRefOf (\_TZ.TZ00))
                        {
                            Notify (\_TZ.TZ00, 0x81) // Information Change
                        }
                    }

                    Return (Arg3)
                }

                Return (Arg3)
            }

            Method (DCFG, 0, NotSerialized)
            {
                Return (\_SB.DCFE)
            }

            Name (ODVX, Package (0x06)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (ODVP, 0, Serialized)
            {
                ODVX [Zero] = \_SB.ODV0
                ODVX [One] = \_SB.ODV1
                ODVX [0x02] = \_SB.ODV2
                ODVX [0x03] = \_SB.ODV3
                ODVX [0x04] = \_SB.ODV4
                ODVX [0x05] = \_SB.ODV5
                Return (ODVX) /* \_SB_.IETM.ODVX */
            }

            Name (PTTL, 0x14)
            Name (DTXX, Package (0x01)
            {
                Package (0x08)
                {
                    \_SB.IETM, 
                    \_SB.IETM, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                }
            })
            Name (DAXX, Package (0x02)
            {
                Zero, 
                Package (0x0D)
                {
                    \_SB.IETM, 
                    \_SB.IETM, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF
                }
            })
            Name (DPXX, Package (0x02)
            {
                Zero, 
                Package (0x0C)
                {
                    \_SB.IETM, 
                    \_SB.IETM, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                }
            })
            Method (_TRT, 0, NotSerialized)  // _TRT: Thermal Relationship Table
            {
                If (CondRefOf (\_SB.PLDT.PTRT))
                {
                    Return (\_SB.PLDT.PTRT ())
                }
                Else
                {
                    Return (DTXX) /* \_SB_.IETM.DTXX */
                }
            }

            Method (PSVT, 0, NotSerialized)
            {
                If (CondRefOf (\_SB.PLDT.PSVT))
                {
                    Return (\_SB.PLDT.PSVT) /* External reference */
                }
                Else
                {
                    Return (DPXX) /* \_SB_.IETM.DPXX */
                }
            }

            Method (_ART, 0, NotSerialized)  // _ART: Active Cooling Relationship Table
            {
                If (\_SB.IETM.SEN3.CTYP)
                {
                    If (CondRefOf (\_SB.PLDT.ART1))
                    {
                        Return (\_SB.PLDT.ART1) /* External reference */
                    }
                    Else
                    {
                        Return (DAXX) /* \_SB_.IETM.DAXX */
                    }
                }
                ElseIf (CondRefOf (\_SB.PLDT.ART0))
                {
                    Return (\_SB.PLDT.ART0) /* External reference */
                }
                Else
                {
                    Return (DAXX) /* \_SB_.IETM.DAXX */
                }
            }

            Method (GDDV, 0, Serialized)
            {
                Return (\_SB.PLDT.GDDV ())
            }

            Method (IMOK, 1, NotSerialized)
            {
                If (\_SB.PC00.LPCB.EC.MYEC)
                {
                    \_SB.PC00.LPCB.EC.DTDR = One
                    \_SB.PC00.LPCB.EC.DTOK = One
                }

                Return (Arg0)
            }

            Method (DTNS, 1, NotSerialized)
            {
                Local0 = Arg0
                If ((Local0 & 0x10))
                {
                    ADBG ("Notify Sensor 5")
                    Notify (\_SB.IETM.SEN5, 0x90) // Device-Specific
                }

                If ((Local0 & 0x08))
                {
                    ADBG ("Notify Sensor 4")
                    Notify (\_SB.IETM.SEN4, 0x90) // Device-Specific
                }

                If ((Local0 & 0x04))
                {
                    ADBG ("Notify Sensor 3")
                    Notify (\_SB.IETM.SEN3, 0x90) // Device-Specific
                }

                If ((Local0 & 0x02))
                {
                    ADBG ("Notify Sensor 2")
                    Notify (\_SB.IETM.SEN2, 0x90) // Device-Specific
                }
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Method (KTOC, 1, Serialized)
        {
            If ((Arg0 > 0x0AAC))
            {
                Return (((Arg0 - 0x0AAC) / 0x0A))
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (CTOK, 1, Serialized)
        {
            Return (((Arg0 * 0x0A) + 0x0AAC))
        }

        Method (C10K, 1, Serialized)
        {
            Name (TMP1, Buffer (0x10)
            {
                 0x00                                             // .
            })
            CreateByteField (TMP1, Zero, TMPL)
            CreateByteField (TMP1, One, TMPH)
            Local0 = (Arg0 + 0x0AAC)
            TMPL = (Local0 & 0xFF)
            TMPH = ((Local0 & 0xFF00) >> 0x08)
            ToInteger (TMP1, Local1)
            Return (Local1)
        }

        Method (K10C, 1, Serialized)
        {
            If ((Arg0 > 0x0AAC))
            {
                Return ((Arg0 - 0x0AAC))
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Device (TFN1)
        {
            Name (_UID, "TFN1")  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (\_SB.PLDT.GHID (_UID))
            }

            Name (_STR, Unicode ("Fan 1"))  // _STR: Description String
            Name (PTYP, 0x04)
            Name (FON, One)
            Name (PFLG, Zero)
            Name (FSLV, Zero)
            Name (FNID, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FND1 == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_FIF, 0, NotSerialized)  // _FIF: Fan Information
            {
                Return (Package (0x04)
                {
                    Zero, 
                    One, 
                    0x02, 
                    Zero
                })
            }

            Method (_FPS, 0, NotSerialized)  // _FPS: Fan Performance States
            {
                Return (\_SB.PLDT.FPST (FNID))
            }

            Method (_FSL, 1, Serialized)  // _FSL: Fan Set Level
            {
                If (CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.FNSL))
                {
                    If ((Arg0 != FSLV))
                    {
                        \_SB.PC00.LPCB.H_EC.DPTF.FNSL (FNID, Arg0, FSLV)
                        FSLV = Arg0
                    }
                    Else
                    {
                        ADBG ("_FSL: New Fan Level is the same as previous level. Ignoring. No action taken")
                    }
                }
                Else
                {
                    ADBG ("_FSL: FNSL not available")
                }
            }

            Name (TFST, Package (0x03)
            {
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Method (_FST, 0, Serialized)  // _FST: Fan Status
            {
                If (CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.GFNS))
                {
                    Local0 = \_SB.PC00.LPCB.H_EC.DPTF.GFNS (FNID)
                    If ((Local0 != 0xFFFFFFFF))
                    {
                        TFST [One] = FSLV /* \_SB_.IETM.TFN1.FSLV */
                        TFST [0x02] = Local0
                    }
                    Else
                    {
                        ADBG ("_FST: EC not available")
                    }
                }
                Else
                {
                    ADBG ("_FST: GFNS not available")
                }

                Return (TFST) /* \_SB_.IETM.TFN1.TFST */
            }

            If ((FNSH == One))
            {
                Method (GFST, 0, Serialized)
                {
                    Return (\_SB.PC00.LPCB.H_EC.DPTF.GFTE ())
                }

                Method (SFST, 2, Serialized)
                {
                    \_SB.PC00.LPCB.H_EC.DPTF.SFTE (Arg0, Arg1)
                }

                Method (GFCS, 0, Serialized)
                {
                    Return (\_SB.PC00.LPCB.H_EC.DPTF.GFCE ())
                }

                Method (GFOM, 0, Serialized)
                {
                    Return (\_SB.PC00.LPCB.H_EC.DPTF.GFME ())
                }

                Method (SFOM, 1, Serialized)
                {
                    \_SB.PC00.LPCB.H_EC.DPTF.SFME (Arg0)
                }
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Device (CHRG)
        {
            Name (_UID, "CHRG")  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (\_SB.PLDT.GHID (_UID))
            }

            Name (_STR, Unicode ("Charger"))  // _STR: Description String
            Name (PTYP, 0x0B)
            Name (PFLG, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\_SB.CHGE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (PSSS, Zero)
            Name (PPPS, Zero)
            Name (PPS1, Package (0x08)
            {
                Package (0x08)
                {
                    0x64, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x0DAC, 
                    "MilliAmps", 
                    Zero
                }, 

                Package (0x08)
                {
                    0x55, 
                    Zero, 
                    Zero, 
                    Zero, 
                    One, 
                    0x0BB8, 
                    "MilliAmps", 
                    Zero
                }, 

                Package (0x08)
                {
                    0x47, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x02, 
                    0x09C4, 
                    "MilliAmps", 
                    Zero
                }, 

                Package (0x08)
                {
                    0x39, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x03, 
                    0x07D0, 
                    "MilliAmps", 
                    Zero
                }, 

                Package (0x08)
                {
                    0x2A, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x04, 
                    0x05DC, 
                    "MilliAmps", 
                    Zero
                }, 

                Package (0x08)
                {
                    0x1C, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x05, 
                    0x03E8, 
                    "MilliAmps", 
                    Zero
                }, 

                Package (0x08)
                {
                    0x0E, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x06, 
                    0x01F4, 
                    "MilliAmps", 
                    Zero
                }, 

                Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x07, 
                    Zero, 
                    "MilliAmps", 
                    Zero
                }
            })
            Name (PPS2, Package (0x0A)
            {
                Package (0x08)
                {
                    0x64, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x1194, 
                    "MilliAmps", 
                    Zero
                }, 

                Package (0x08)
                {
                    0x58, 
                    Zero, 
                    Zero, 
                    Zero, 
                    One, 
                    0x0FA0, 
                    "MilliAmps", 
                    Zero
                }, 

                Package (0x08)
                {
                    0x4D, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x02, 
                    0x0DAC, 
                    "MilliAmps", 
                    Zero
                }, 

                Package (0x08)
                {
                    0x42, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x03, 
                    0x0BB8, 
                    "MilliAmps", 
                    Zero
                }, 

                Package (0x08)
                {
                    0x37, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x04, 
                    0x09C4, 
                    "MilliAmps", 
                    Zero
                }, 

                Package (0x08)
                {
                    0x2C, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x05, 
                    0x07D0, 
                    "MilliAmps", 
                    Zero
                }, 

                Package (0x08)
                {
                    0x21, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x06, 
                    0x05DC, 
                    "MilliAmps", 
                    Zero
                }, 

                Package (0x08)
                {
                    0x16, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x07, 
                    0x03E8, 
                    "MilliAmps", 
                    Zero
                }, 

                Package (0x08)
                {
                    0x0B, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x08, 
                    0x01F4, 
                    "MilliAmps", 
                    Zero
                }, 

                Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x09, 
                    Zero, 
                    "MilliAmps", 
                    Zero
                }
            })
            Name (PPS3, Package (0x04)
            {
                Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x3A98, 
                    "MilliVoltage", 
                    Zero
                }, 

                Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    One, 
                    0x2EE0, 
                    "MilliVoltage", 
                    Zero
                }, 

                Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x02, 
                    Zero, 
                    "", 
                    Zero
                }, 

                Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x03, 
                    Zero, 
                    "", 
                    Zero
                }
            })
            Method (PPSS, 0, Serialized)
            {
                ADBG ("DTT calls PPSS")
                If (((ODV0 == One) && (ODV1 == One)))
                {
                    ADBG ("PPSS: selecting PPS")
                    Return (PPS3) /* \_SB_.IETM.CHRG.PPS3 */
                }
                ElseIf ((CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.FCHG) && (\_SB.PC00.LPCB.H_EC.DPTF.FCHG () == One)))
                {
                    ADBG ("PPSS: selecting FCHG")
                    Return (PPS2) /* \_SB_.IETM.CHRG.PPS2 */
                }
                Else
                {
                    ADBG ("PPSS: FCHG and PPS are not available")
                    Return (PPS1) /* \_SB_.IETM.CHRG.PPS1 */
                }
            }

            Method (PCAL, 0, Serialized)
            {
                ADBG ("PCAL!")
                If (((ODV0 == One) && (ODV1 == One)))
                {
                    ADBG ("Save PPS package size to PSSS!")
                    PSSS = SizeOf (PPS3)
                }
                ElseIf ((CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.FCHG) && (\_SB.PC00.LPCB.H_EC.DPTF.FCHG () == One)))
                {
                    PSSS = SizeOf (PPS2)
                }
                Else
                {
                    ADBG ("PCAL: FCHG not available")
                    PSSS = SizeOf (PPS1)
                }
            }

            Method (PPPC, 0, NotSerialized)
            {
                ADBG ("PPPC return the present p-state!")
                Return (PPPS) /* \_SB_.IETM.CHRG.PPPS */
            }

            Method (SPPC, 1, Serialized)
            {
                ADBG ("SPPC to transfer the selected power package!")
                ADBG (Concatenate ("Package Index: ", ToHexString (Arg0)))
                If (CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.SCHG))
                {
                    PCAL ()
                    If ((ToInteger (Arg0) <= (PSSS - One)))
                    {
                        If (((ODV0 == One) && (ODV1 == One)))
                        {
                            Local1 = DerefOf (DerefOf (PPS3 [Arg0]) [0x04])
                            ADBG (Concatenate ("PPS p-state value:", ToHexString (Local1)))
                            PPPS = Local1
                            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.UPPM))
                            {
                                ADBG (Concatenate ("PPS sets P-state: ", ToHexString (Local1)))
                                \_SB.PC00.LPCB.H_EC.DPTF.UPPM (Local1)
                            }
                        }
                        ElseIf ((CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.FCHG) && (\_SB.PC00.LPCB.H_EC.DPTF.FCHG () == One)))
                        {
                            Local1 = DerefOf (DerefOf (PPS2 [Arg0]) [0x05])
                            PPPS = DerefOf (DerefOf (PPS2 [Arg0]) [0x04])
                            \_SB.PC00.LPCB.H_EC.DPTF.SCHG (Local1)
                        }
                        Else
                        {
                            Local1 = DerefOf (DerefOf (PPS1 [Arg0]) [0x05])
                            PPPS = DerefOf (DerefOf (PPS1 [Arg0]) [0x04])
                            \_SB.PC00.LPCB.H_EC.DPTF.SCHG (Local1)
                        }
                    }

                    Return (Zero)
                }

                ADBG ("SPPC: SCHG not available")
            }

            Method (PPDL, 0, NotSerialized)
            {
                ADBG ("DTT calls PPDL")
                PCAL ()
                Return ((PSSS - One))
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Device (TPWR)
        {
            Name (_UID, "TPWR")  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (\_SB.PLDT.GHID (_UID))
            }

            Name (_STR, Unicode ("Platform Power"))  // _STR: Description String
            Name (PTYP, 0x11)
            Name (PFLG, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\_SB.PWRE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (PSOC, 0, NotSerialized)
            {
                If (CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.B1FC))
                {
                    If ((\_SB.PC00.LPCB.H_EC.DPTF.B1FC () == 0xFFFFFFFF))
                    {
                        ADBG ("EC is not available")
                        Return (Zero)
                    }
                    ElseIf ((\_SB.PC00.LPCB.H_EC.DPTF.B1FC () == Zero))
                    {
                        ADBG ("Battery malfunction B1FC")
                        Return (Zero)
                    }
                }

                If ((CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.B1FC) & (\_SB.PC00.LPCB.H_EC.DPTF.B1FC () == Zero)))
                {
                    ADBG ("Battery malfunction B1FC")
                    Return (Zero)
                }

                If (!CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.B1RC))
                {
                    ADBG ("B1RC not available")
                    Return (Zero)
                }

                If ((\_SB.PC00.LPCB.H_EC.DPTF.B1RC () > \_SB.PC00.LPCB.H_EC.DPTF.B1FC ()))
                {
                    ADBG ("Battery malfunction RC greater than FC")
                    Return (Zero)
                }

                If ((\_SB.PC00.LPCB.H_EC.DPTF.B1RC () == \_SB.PC00.LPCB.H_EC.DPTF.B1FC ()))
                {
                    ADBG ("Battery Fully Charged")
                    Return (0x64)
                }

                If ((\_SB.PC00.LPCB.H_EC.DPTF.B1RC () < \_SB.PC00.LPCB.H_EC.DPTF.B1FC ()))
                {
                    Local0 = (\_SB.PC00.LPCB.H_EC.DPTF.B1RC () * 0x64)
                    Divide (Local0, \_SB.PC00.LPCB.H_EC.DPTF.B1FC (), Local2, Local1)
                    Local2 /= 0x64
                    Local3 = (\_SB.PC00.LPCB.H_EC.DPTF.B1FC () / 0xC8)
                    If ((Local2 >= Local3))
                    {
                        Local1 += One
                    }

                    ADBG (Concatenate ("Battery Current Charge: ", ToDecimalString (Local1)))
                    Return (Local1)
                }
                Else
                {
                    ADBG ("PSOC illegal condition")
                    Return (Zero)
                }
            }

            Method (PSRC, 0, Serialized)
            {
                ADBG ("PSRC")
                If ((CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.PWRT) & (\_SB.PC00.LPCB.H_EC.DPTF.PWRT () == 0xFFFFFFFF)))
                {
                    ADBG ("EC is not available")
                    Return (Zero)
                }
                Else
                {
                    Local0 = \_SB.PC00.LPCB.H_EC.DPTF.PWRT ()
                    Local1 = (Local0 & 0xF0)
                }

                Switch (ToInteger ((ToInteger (Local0) & 0x07)))
                {
                    Case (Zero)
                    {
                        ADBG ("DC")
                        Local1 |= Zero
                    }
                    Case (One)
                    {
                        ADBG ("AC")
                        Local1 |= One
                    }
                    Case (0x02)
                    {
                        ADBG ("PD")
                        Local1 |= 0x02
                    }
                    Case (0x04)
                    {
                        ADBG ("PD and PPS Adapter")
                        Local1 |= 0x02
                    }
                    Default
                    {
                        ADBG ("Default DC")
                        Local1 |= Zero
                    }

                }

                Return (Local1)
            }

            Method (ARTG, 0, NotSerialized)
            {
                ADBG ("ARTG")
                If (((PSRC () & 0x07) == One))
                {
                    If (CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.ARTG))
                    {
                        Local0 = \_SB.PC00.LPCB.H_EC.DPTF.ARTG ()
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("ARTG EC: ", ToHexString (Local0)))
                            Return (Local0)
                        }
                    }

                    ADBG ("ARTG EC not available")
                    Return (0x00015F90)
                }
                Else
                {
                    ADBG ("ARTG Power Source is  AC")
                    Return (Zero)
                }
            }

            Method (PROP, 0, NotSerialized)
            {
                If (CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.PROP))
                {
                    Local0 = \_SB.PC00.LPCB.H_EC.DPTF.PROP ()
                    If ((Local0 != 0xFFFFFFFF))
                    {
                        Local0 *= 0x03E8
                        ADBG (Concatenate ("PROP EC: ", ToHexString (Local0)))
                        Return (Local0)
                    }
                }

                ADBG ("PROP EC not available")
                Return (0x61A8)
            }

            Method (PBOK, 1, Serialized)
            {
                If (CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.PBOK))
                {
                    Local0 = (Arg0 & 0x0F)
                    \_SB.PC00.LPCB.H_EC.DPTF.PBOK (Local0)
                    Return (Zero)
                }

                ADBG ("PBOK not available")
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Device (BAT1)
        {
            Name (_UID, "1")  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (\_SB.PLDT.GHID (_UID))
            }

            Name (_STR, Unicode ("Battery 1 Participant"))  // _STR: Description String
            Name (PTYP, 0x0C)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\_SB.BATR == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (PMAX, 0, Serialized)
            {
                If (CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.BMAX))
                {
                    Local0 = \_SB.PC00.LPCB.H_EC.DPTF.BMAX ()
                    If ((Local0 != 0xFFFFFFFF))
                    {
                        If (Local0)
                        {
                            Local0 = ~Local0 |= 0xFFFF0000
                            Local0 = (Local0 += One * 0x0A)
                        }

                        Return (Local0)
                    }
                }

                ADBG ("PMAX: EC not available")
                Return (Zero)
            }

            Method (CTYP, 0, NotSerialized)
            {
                If (CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.CTYP))
                {
                    Local0 = \_SB.PC00.LPCB.H_EC.DPTF.CTYP ()
                    If ((Local0 != 0xFFFFFFFF))
                    {
                        Return (Local0)
                    }
                }

                ADBG ("CTYP: EC not available")
                Return (0x03)
            }

            Method (PBSS, 0, NotSerialized)
            {
                If (CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.PBSS))
                {
                    Local0 = \_SB.PC00.LPCB.H_EC.DPTF.PBSS ()
                    If ((Local0 != 0xFFFFFFFF))
                    {
                        Return (Local0)
                    }
                }

                ADBG ("PBSS: EC not available")
                Return (0x64)
            }

            Method (DPSP, 0, Serialized)
            {
                Return (\_SB.PPPR)
            }

            Method (RBHF, 0, NotSerialized)
            {
                If (CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.RBHF))
                {
                    Local0 = \_SB.PC00.LPCB.H_EC.DPTF.RBHF ()
                    If ((Local0 != 0xFFFFFFFF))
                    {
                        Return (Local0)
                    }
                }

                ADBG ("RBHF: EC not available")
                Return (0xFFFFFFFF)
            }

            Method (VBNL, 0, NotSerialized)
            {
                If (CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.VBNL))
                {
                    Local0 = \_SB.PC00.LPCB.H_EC.DPTF.VBNL ()
                    If ((Local0 != 0xFFFFFFFF))
                    {
                        Return (Local0)
                    }
                }

                ADBG ("VBNL: EC not available")
                Return (0xFFFFFFFF)
            }

            Method (CMPP, 0, NotSerialized)
            {
                If (CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.CMPP))
                {
                    Local0 = \_SB.PC00.LPCB.H_EC.DPTF.CMPP ()
                    If ((Local0 != 0xFFFFFFFF))
                    {
                        Return (Local0)
                    }
                }

                ADBG ("CMPP: EC not available")
                Return (0xFFFFFFFF)
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Device (SEN2)
        {
            Name (_UID, "SEN2")  // _UID: Unique ID
            Name (_STR, Unicode ("Thermistor GT VR"))  // _STR: Description String
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Name (GTSH, 0x14)
            Name (SNID, One)
            Name (SNAC, 0x3C)
            Name (SNA1, 0x32)
            Name (SNA2, 0x28)
            Name (SNPV, 0x41)
            Name (SNCC, 0x50)
            Name (SNC3, 0x46)
            Name (SNHP, 0x4B)
            Name (SNSP, Zero)
            Name (PTYP, 0x03)
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (\_SB.PLDT.GHID (_UID))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PC00.LPCB.EC.MYEC)
                {
                    Switch (0x02)
                    {
                        Case (One)
                        {
                        }
                        Case (0x02)
                        {
                            Local0 = (\_SB.PC00.LPCB.EC.TSIT * 0x0A)
                        }
                        Case (0x03)
                        {
                            Local0 = (\_SB.PC00.LPCB.EC.TST2 * 0x0A)
                        }
                        Case (0x04)
                        {
                            Local0 = (\_SB.PC00.LPCB.EC.SYST * 0x0A)
                        }
                        Case (0x05)
                        {
                        }

                    }

                    Return (\_SB.IETM.C10K (Local0))
                }
                Else
                {
                    Return (0x0BB8)
                }
            }

            Name (LSTM, Zero)
            Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
            {
                LSTM = Arg0
                Notify (^, 0x91) // Device-Specific
                ADBG (Concatenate ("DTI SEN ID: ", ToDecimalString ((SNID + One))))
            }

            Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
            {
                Return (0x0ADE)
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (SNSP) /* \_SB_.IETM.SEN2.SNSP */
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return (\_SB.IETM.CTOK (SNPV))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (\_SB.IETM.CTOK (SNCC))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                Return (\_SB.IETM.CTOK (SNC3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                Return (\_SB.IETM.CTOK (SNHP))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\_SB.S2DE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (PATC, 0x02)
            Method (PAT0, 1, Serialized)
            {
                If (\_SB.PC00.LPCB.EC.MYEC)
                {
                    Local0 = Acquire (\_SB.PC00.LPCB.EC.PATM, 0x0064)
                    If ((Local0 == Zero))
                    {
                        Local1 = \_SB.IETM.K10C (Arg0)
                        Divide (Local1, 0x0A, Local2, Local3)
                        \_SB.PC00.LPCB.EC.TSTL = Local3
                        Release (\_SB.PC00.LPCB.EC.PATM)
                    }
                }
            }

            Method (PAT1, 1, Serialized)
            {
                If (\_SB.PC00.LPCB.EC.MYEC)
                {
                    Local0 = Acquire (\_SB.PC00.LPCB.EC.PATM, 0x0064)
                    If ((Local0 == Zero))
                    {
                        Local1 = \_SB.IETM.K10C (Arg0)
                        Divide (Local1, 0x0A, Local2, Local3)
                        If ((Local3 > 0x7F))
                        {
                            Local3 = 0x7F
                        }

                        \_SB.PC00.LPCB.EC.TSTU = Local3
                        Release (\_SB.PC00.LPCB.EC.PATM)
                    }
                }
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Device (SEN3)
        {
            Name (_UID, "SEN3")  // _UID: Unique ID
            Name (_STR, Unicode ("Thermistor Ambient"))  // _STR: Description String
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Name (GTSH, 0x14)
            Name (SNID, 0x02)
            Name (SNAC, 0x3C)
            Name (SNA1, 0x32)
            Name (SNA2, 0x28)
            Name (SNPV, 0x41)
            Name (SNCC, 0x50)
            Name (SNC3, 0x46)
            Name (SNHP, 0x4B)
            Name (SNSP, Zero)
            Name (PTYP, 0x03)
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (\_SB.PLDT.GHID (_UID))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PC00.LPCB.EC.MYEC)
                {
                    Switch (0x03)
                    {
                        Case (One)
                        {
                        }
                        Case (0x02)
                        {
                            Local0 = (\_SB.PC00.LPCB.EC.TSIT * 0x0A)
                        }
                        Case (0x03)
                        {
                            Local0 = (\_SB.PC00.LPCB.EC.TST2 * 0x0A)
                        }
                        Case (0x04)
                        {
                            Local0 = (\_SB.PC00.LPCB.EC.SYST * 0x0A)
                        }
                        Case (0x05)
                        {
                        }

                    }

                    Return (\_SB.IETM.C10K (Local0))
                }
                Else
                {
                    Return (0x0BB8)
                }
            }

            Name (LSTM, Zero)
            Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
            {
                LSTM = Arg0
                Notify (^, 0x91) // Device-Specific
                ADBG (Concatenate ("DTI SEN ID: ", ToDecimalString ((SNID + One))))
            }

            Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
            {
                Return (0x0ADE)
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (SNSP) /* \_SB_.IETM.SEN3.SNSP */
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return (\_SB.IETM.CTOK (SNPV))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (\_SB.IETM.CTOK (SNCC))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                Return (\_SB.IETM.CTOK (SNC3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                Return (\_SB.IETM.CTOK (SNHP))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\_SB.S3DE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (PATC, 0x02)
            Method (PAT0, 1, Serialized)
            {
                If (\_SB.PC00.LPCB.EC.MYEC)
                {
                    Local0 = Acquire (\_SB.PC00.LPCB.EC.PATM, 0x0064)
                    If ((Local0 == Zero))
                    {
                        Local1 = \_SB.IETM.K10C (Arg0)
                        Divide (Local1, 0x0A, Local2, Local3)
                        \_SB.PC00.LPCB.EC.TSL2 = Local3
                        Release (\_SB.PC00.LPCB.EC.PATM)
                    }
                }
            }

            Method (PAT1, 1, Serialized)
            {
                If (\_SB.PC00.LPCB.EC.MYEC)
                {
                    Local0 = Acquire (\_SB.PC00.LPCB.EC.PATM, 0x0064)
                    If ((Local0 == Zero))
                    {
                        Local1 = \_SB.IETM.K10C (Arg0)
                        Divide (Local1, 0x0A, Local2, Local3)
                        If ((Local3 > 0x7F))
                        {
                            Local3 = 0x7F
                        }

                        \_SB.PC00.LPCB.EC.TSU2 = Local3
                        Release (\_SB.PC00.LPCB.EC.PATM)
                    }
                }
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Device (SEN4)
        {
            Name (_UID, "SEN4")  // _UID: Unique ID
            Name (_STR, Unicode ("Thermistor Battery Charger"))  // _STR: Description String
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Name (GTSH, 0x14)
            Name (SNID, 0x03)
            Name (SNAC, 0x3C)
            Name (SNA1, 0x32)
            Name (SNA2, 0x28)
            Name (SNPV, 0x41)
            Name (SNCC, 0x50)
            Name (SNC3, 0x46)
            Name (SNHP, 0x4B)
            Name (SNSP, Zero)
            Name (PTYP, 0x03)
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (\_SB.PLDT.GHID (_UID))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PC00.LPCB.EC.MYEC)
                {
                    Switch (0x04)
                    {
                        Case (One)
                        {
                        }
                        Case (0x02)
                        {
                            Local0 = (\_SB.PC00.LPCB.EC.TSIT * 0x0A)
                        }
                        Case (0x03)
                        {
                            Local0 = (\_SB.PC00.LPCB.EC.TST2 * 0x0A)
                        }
                        Case (0x04)
                        {
                            Local0 = (\_SB.PC00.LPCB.EC.SYST * 0x0A)
                        }
                        Case (0x05)
                        {
                        }

                    }

                    Return (\_SB.IETM.C10K (Local0))
                }
                Else
                {
                    Return (0x0BB8)
                }
            }

            Name (LSTM, Zero)
            Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
            {
                LSTM = Arg0
                Notify (^, 0x91) // Device-Specific
                ADBG (Concatenate ("DTI SEN ID: ", ToDecimalString ((SNID + One))))
            }

            Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
            {
                Return (0x0ADE)
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (SNSP) /* \_SB_.IETM.SEN4.SNSP */
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return (\_SB.IETM.CTOK (SNPV))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (\_SB.IETM.CTOK (SNCC))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                Return (\_SB.IETM.CTOK (SNC3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                Return (\_SB.IETM.CTOK (SNHP))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\_SB.S4DE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (PATC, 0x02)
            Method (PAT0, 1, Serialized)
            {
                If (\_SB.PC00.LPCB.EC.MYEC)
                {
                    Local0 = Acquire (\_SB.PC00.LPCB.EC.PATM, 0x0064)
                    If ((Local0 == Zero))
                    {
                        Local1 = \_SB.IETM.K10C (Arg0)
                        Divide (Local1, 0x0A, Local2, Local3)
                        \_SB.PC00.LPCB.EC.TSL2 = Local3
                        Release (\_SB.PC00.LPCB.EC.PATM)
                    }
                }
            }

            Method (PAT1, 1, Serialized)
            {
                If (\_SB.PC00.LPCB.EC.MYEC)
                {
                    Local0 = Acquire (\_SB.PC00.LPCB.EC.PATM, 0x0064)
                    If ((Local0 == Zero))
                    {
                        Local1 = \_SB.IETM.K10C (Arg0)
                        Divide (Local1, 0x0A, Local2, Local3)
                        If ((Local3 > 0x7F))
                        {
                            Local3 = 0x7F
                        }

                        \_SB.PC00.LPCB.EC.TSU2 = Local3
                        Release (\_SB.PC00.LPCB.EC.PATM)
                    }
                }
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Device (SEN5)
        {
            Name (_UID, "SEN5")  // _UID: Unique ID
            Name (_STR, Unicode ("Thermistor Memory"))  // _STR: Description String
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Name (GTSH, 0x14)
            Name (SNID, 0x04)
            Name (SNAC, 0x3C)
            Name (SNA1, 0x32)
            Name (SNA2, 0x28)
            Name (SNPV, 0x41)
            Name (SNCC, 0x50)
            Name (SNC3, 0x46)
            Name (SNHP, 0x4B)
            Name (SNSP, Zero)
            Name (PTYP, 0x03)
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (\_SB.PLDT.GHID (_UID))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.SNRD))
                {
                    Local0 = \_SB.IETM.C10K (\_SB.PC00.LPCB.H_EC.DPTF.SNRD (SNID))
                    ADBG (Concatenate ("SEN ID: ", ToDecimalString ((SNID + One))))
                    ADBG (Concatenate ("SEN EC Value in 10th: ", ToHexString (Local0)))
                    Return (Local0)
                }

                ADBG ("_TMP: SNRD not available")
                Return (Zero)
            }

            Name (LSTM, Zero)
            Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
            {
                LSTM = Arg0
                Notify (^, 0x91) // Device-Specific
                ADBG (Concatenate ("DTI SEN ID: ", ToDecimalString ((SNID + One))))
            }

            Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
            {
                Return (0x0ADE)
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (SNSP) /* \_SB_.IETM.SEN5.SNSP */
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return (\_SB.IETM.CTOK (SNPV))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (\_SB.IETM.CTOK (SNCC))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                Return (\_SB.IETM.CTOK (SNC3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                Return (\_SB.IETM.CTOK (SNHP))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\_SB.S5DE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (PATC, 0x02)
            Method (PAT0, 1, Serialized)
            {
                If (CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.STRP))
                {
                    Local0 = (GTSH / 0x0A)
                    Local1 = \_SB.IETM.K10C (Arg0)
                    \_SB.PC00.LPCB.H_EC.DPTF.STRP (SNID, Local1, Local0, Zero)
                    Return (Zero)
                }

                ADBG ("PAT0: STRP not available")
            }

            Method (PAT1, 1, Serialized)
            {
                If (CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.STRP))
                {
                    Local0 = (GTSH / 0x0A)
                    Local1 = \_SB.IETM.K10C (Arg0)
                    \_SB.PC00.LPCB.H_EC.DPTF.STRP (SNID, Local1, Local0, One)
                    Return (Zero)
                }

                ADBG ("PAT1: STRP not available")
            }
        }
    }

    Scope (\_SB.PC00.TCPU)
    {
        Name (PFLG, Zero)
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((\_SB.SADE == One))
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }

        OperationRegion (CPWR, SystemMemory, ((\_SB.PC00.MC.MHBR << 0x0F) + 0x5000), 0x1000)
        Field (CPWR, ByteAcc, NoLock, Preserve)
        {
            Offset (0x930), 
            PTDP,   15, 
            Offset (0x932), 
            PMIN,   15, 
            Offset (0x934), 
            PMAX,   15, 
            Offset (0x936), 
            TMAX,   7, 
            Offset (0x938), 
            PWRU,   4, 
            Offset (0x939), 
            EGYU,   5, 
            Offset (0x93A), 
            TIMU,   4, 
            Offset (0x958), 
            Offset (0x95C), 
            LPMS,   1, 
            CTNL,   2, 
            Offset (0x978), 
            PCTP,   8, 
            Offset (0x998), 
            RP0C,   8, 
            RP1C,   8, 
            RPNC,   8, 
            Offset (0xF3C), 
            TRAT,   8, 
            Offset (0xF40), 
            PTD1,   15, 
            Offset (0xF42), 
            TRA1,   8, 
            Offset (0xF44), 
            PMX1,   15, 
            Offset (0xF46), 
            PMN1,   15, 
            Offset (0xF48), 
            PTD2,   15, 
            Offset (0xF4A), 
            TRA2,   8, 
            Offset (0xF4C), 
            PMX2,   15, 
            Offset (0xF4E), 
            PMN2,   15, 
            Offset (0xF50), 
            CTCL,   2, 
                ,   29, 
            CLCK,   1, 
            MNTR,   8
        }

        Name (XPCC, Zero)
        Method (PPCC, 0, Serialized)
        {
            If (((XPCC == Zero) && CondRefOf (\_SB.CBMI)))
            {
                Switch (ToInteger (\_SB.CBMI))
                {
                    Case (Zero)
                    {
                        If (((\_SB.CLVL >= One) && (\_SB.CLVL <= 0x03)))
                        {
                            CPL0 ()
                            XPCC = One
                        }
                    }
                    Case (One)
                    {
                        If (((\_SB.CLVL == 0x02) || (\_SB.CLVL == 0x03)))
                        {
                            CPL1 ()
                            XPCC = One
                        }
                    }
                    Case (0x02)
                    {
                        If ((\_SB.CLVL == 0x03))
                        {
                            CPL2 ()
                            XPCC = One
                        }
                    }

                }
            }

            Return (NPCC) /* \_SB_.PC00.TCPU.NPCC */
        }

        Name (NPCC, Package (0x03)
        {
            0x02, 
            Package (0x06)
            {
                Zero, 
                0x88B8, 
                0xAFC8, 
                0x6D60, 
                0x7D00, 
                0x03E8
            }, 

            Package (0x06)
            {
                One, 
                0xDBBA, 
                0xDBBA, 
                Zero, 
                Zero, 
                0x03E8
            }
        })
        Method (CPNU, 2, Serialized)
        {
            Name (CNVT, Zero)
            Name (PPUU, Zero)
            Name (RMDR, Zero)
            If ((PWRU == Zero))
            {
                PPUU = One
            }
            Else
            {
                PPUU = (PWRU-- << 0x02)
            }

            Divide (Arg0, PPUU, RMDR, CNVT) /* \_SB_.PC00.TCPU.CPNU.CNVT */
            If ((Arg1 == Zero))
            {
                Return (CNVT) /* \_SB_.PC00.TCPU.CPNU.CNVT */
            }
            Else
            {
                CNVT *= 0x03E8
                RMDR *= 0x03E8
                RMDR /= PPUU
                CNVT += RMDR /* \_SB_.PC00.TCPU.CPNU.RMDR */
                Return (CNVT) /* \_SB_.PC00.TCPU.CPNU.CNVT */
            }
        }

        Method (CPL0, 0, NotSerialized)
        {
            \_SB.PC00.TCPU.NPCC [Zero] = 0x02
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [One] = 0x7D
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x02] = CPNU (\_SB.PL10, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x03] = (\_SB.PLW0 * 0x03E8)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x04] = ((\_SB.PLW0 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x05] = PPSZ /* \_SB_.PPSZ */
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [One] = CPNU (\_SB.PL20, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x02] = CPNU (\_SB.PL20, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x05] = PPSZ /* \_SB_.PPSZ */
        }

        Method (CPL1, 0, NotSerialized)
        {
            \_SB.PC00.TCPU.NPCC [Zero] = 0x02
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [One] = 0x7D
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x02] = CPNU (\_SB.PL11, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x03] = (\_SB.PLW1 * 0x03E8)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x04] = ((\_SB.PLW1 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x05] = PPSZ /* \_SB_.PPSZ */
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [One] = CPNU (\_SB.PL21, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x02] = CPNU (\_SB.PL21, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x05] = PPSZ /* \_SB_.PPSZ */
        }

        Method (CPL2, 0, NotSerialized)
        {
            \_SB.PC00.TCPU.NPCC [Zero] = 0x02
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [One] = 0x7D
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x02] = CPNU (\_SB.PL12, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x03] = (\_SB.PLW2 * 0x03E8)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x04] = ((\_SB.PLW2 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x05] = PPSZ /* \_SB_.PPSZ */
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [One] = CPNU (\_SB.PL22, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x02] = CPNU (\_SB.PL22, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x05] = PPSZ /* \_SB_.PPSZ */
        }

        Name (LSTM, Zero)
        Name (_PPC, Zero)  // _PPC: Performance Present Capabilities
        Method (SPPC, 1, Serialized)
        {
            If (CondRefOf (\_SB.CPPC))
            {
                \_SB.CPPC = Arg0
            }

            If ((ToInteger (\TCNT) > Zero))
            {
                Notify (\_SB.PR00, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > One))
            {
                Notify (\_SB.PR01, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x02))
            {
                Notify (\_SB.PR02, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x03))
            {
                Notify (\_SB.PR03, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x04))
            {
                Notify (\_SB.PR04, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x05))
            {
                Notify (\_SB.PR05, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x06))
            {
                Notify (\_SB.PR06, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x07))
            {
                Notify (\_SB.PR07, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x08))
            {
                Notify (\_SB.PR08, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x09))
            {
                Notify (\_SB.PR09, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x0A))
            {
                Notify (\_SB.PR10, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x0B))
            {
                Notify (\_SB.PR11, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x0C))
            {
                Notify (\_SB.PR12, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x0D))
            {
                Notify (\_SB.PR13, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x0E))
            {
                Notify (\_SB.PR14, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x0F))
            {
                Notify (\_SB.PR15, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x10))
            {
                Notify (\_SB.PR16, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x11))
            {
                Notify (\_SB.PR17, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x12))
            {
                Notify (\_SB.PR18, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x13))
            {
                Notify (\_SB.PR19, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x14))
            {
                Notify (\_SB.PR20, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x15))
            {
                Notify (\_SB.PR21, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x16))
            {
                Notify (\_SB.PR22, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x17))
            {
                Notify (\_SB.PR23, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x18))
            {
                Notify (\_SB.PR24, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x19))
            {
                Notify (\_SB.PR25, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x1A))
            {
                Notify (\_SB.PR26, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x1B))
            {
                Notify (\_SB.PR27, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x1C))
            {
                Notify (\_SB.PR28, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x1D))
            {
                Notify (\_SB.PR29, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x1E))
            {
                Notify (\_SB.PR30, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x1F))
            {
                Notify (\_SB.PR31, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x20))
            {
                Notify (\_SB.PR32, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x21))
            {
                Notify (\_SB.PR33, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x22))
            {
                Notify (\_SB.PR34, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x23))
            {
                Notify (\_SB.PR35, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x24))
            {
                Notify (\_SB.PR36, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x25))
            {
                Notify (\_SB.PR37, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x26))
            {
                Notify (\_SB.PR38, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x27))
            {
                Notify (\_SB.PR39, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x28))
            {
                Notify (\_SB.PR40, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x29))
            {
                Notify (\_SB.PR41, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x2A))
            {
                Notify (\_SB.PR42, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x2B))
            {
                Notify (\_SB.PR43, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x2C))
            {
                Notify (\_SB.PR44, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x2D))
            {
                Notify (\_SB.PR45, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x2E))
            {
                Notify (\_SB.PR46, 0x80) // Status Change
            }

            If ((ToInteger (\TCNT) > 0x2F))
            {
                Notify (\_SB.PR47, 0x80) // Status Change
            }
        }

        Method (SPUR, 1, NotSerialized)
        {
            ADBG (Concatenate ("SPUR, Arg0=", ToDecimalString (Arg0)))
            If ((Arg0 <= \TCNT))
            {
                If ((\_SB.PAGD._STA () == 0x0F))
                {
                    \_SB.PAGD._PUR [One] = Arg0
                    Notify (\_SB.PAGD, 0x80) // Status Change
                }
            }
        }

        Method (PCCC, 0, Serialized)
        {
            PCCX [Zero] = One
            Switch (ToInteger (CPNU (PTDP, Zero)))
            {
                Case (0x39)
                {
                    DerefOf (PCCX [One]) [Zero] = 0xA7F8
                    DerefOf (PCCX [One]) [One] = 0x00017318
                }
                Case (0x2F)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x9858
                    DerefOf (PCCX [One]) [One] = 0x00014C08
                }
                Case (0x25)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x7148
                    DerefOf (PCCX [One]) [One] = 0xD6D8
                }
                Case (0x19)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x3E80
                    DerefOf (PCCX [One]) [One] = 0x7D00
                }
                Case (0x0F)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x36B0
                    DerefOf (PCCX [One]) [One] = 0x7D00
                }
                Case (0x0B)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x36B0
                    DerefOf (PCCX [One]) [One] = 0x61A8
                }
                Default
                {
                    DerefOf (PCCX [One]) [Zero] = 0xFF
                    DerefOf (PCCX [One]) [One] = 0xFF
                }

            }

            Return (PCCX) /* \_SB_.PC00.TCPU.PCCX */
        }

        Name (PCCX, Package (0x02)
        {
            0x80000000, 
            Package (0x02)
            {
                0x80000000, 
                0x80000000
            }
        })
        Name (KEFF, Package (0x1E)
        {
            Package (0x02)
            {
                0x01BC, 
                Zero
            }, 

            Package (0x02)
            {
                0x01CF, 
                0x27
            }, 

            Package (0x02)
            {
                0x01E1, 
                0x4B
            }, 

            Package (0x02)
            {
                0x01F3, 
                0x6C
            }, 

            Package (0x02)
            {
                0x0206, 
                0x8B
            }, 

            Package (0x02)
            {
                0x0218, 
                0xA8
            }, 

            Package (0x02)
            {
                0x022A, 
                0xC3
            }, 

            Package (0x02)
            {
                0x023D, 
                0xDD
            }, 

            Package (0x02)
            {
                0x024F, 
                0xF4
            }, 

            Package (0x02)
            {
                0x0261, 
                0x010B
            }, 

            Package (0x02)
            {
                0x0274, 
                0x011F
            }, 

            Package (0x02)
            {
                0x032C, 
                0x01BD
            }, 

            Package (0x02)
            {
                0x03D7, 
                0x0227
            }, 

            Package (0x02)
            {
                0x048B, 
                0x026D
            }, 

            Package (0x02)
            {
                0x053E, 
                0x02A1
            }, 

            Package (0x02)
            {
                0x05F7, 
                0x02C6
            }, 

            Package (0x02)
            {
                0x06A8, 
                0x02E6
            }, 

            Package (0x02)
            {
                0x075D, 
                0x02FF
            }, 

            Package (0x02)
            {
                0x0818, 
                0x0311
            }, 

            Package (0x02)
            {
                0x08CF, 
                0x0322
            }, 

            Package (0x02)
            {
                0x179C, 
                0x0381
            }, 

            Package (0x02)
            {
                0x2DDC, 
                0x039C
            }, 

            Package (0x02)
            {
                0x44A8, 
                0x039E
            }, 

            Package (0x02)
            {
                0x5C35, 
                0x0397
            }, 

            Package (0x02)
            {
                0x747D, 
                0x038D
            }, 

            Package (0x02)
            {
                0x8D7F, 
                0x0382
            }, 

            Package (0x02)
            {
                0xA768, 
                0x0376
            }, 

            Package (0x02)
            {
                0xC23B, 
                0x0369
            }, 

            Package (0x02)
            {
                0xDE26, 
                0x035A
            }, 

            Package (0x02)
            {
                0xFB7C, 
                0x034A
            }
        })
        Name (CEUP, Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        })
        Method (_TMP, 0, Serialized)  // _TMP: Temperature
        {
            Return (\_SB.IETM.CTOK (PCTP))
        }

        Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
        {
            LSTM = Arg0
            Notify (\_SB.PC00.TCPU, 0x91) // Device-Specific
        }

        Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
        {
            Return (0x0ADE)
        }

        Name (PTYP, Zero)
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (CondRefOf (\_SB.PR00._PSS))
            {
                Return (\_SB.PR00._PSS ())
            }
            Else
            {
                Return (Package (0x02)
                {
                    Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
            }
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If (CondRefOf (\_SB.PR00._TSS))
            {
                Return (\_SB.PR00._TSS ())
            }
            Else
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
            }
        }

        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            If (CondRefOf (\_SB.PR00._TPC))
            {
                Return (\_SB.PR00._TPC) /* External reference */
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            If ((CondRefOf (\PF00) && (\PF00 != 0x80000000)))
            {
                If ((\PF00 & 0x04))
                {
                    Return (Package (0x02)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x05,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001810, // Address
                                ,)
                        }, 

                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x05,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001810, // Address
                                ,)
                        }
                    })
                }
            }
            Else
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (CondRefOf (\_SB.PR00._TSD))
            {
                Return (\_SB.PR00._TSD ())
            }
            Else
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        0xFC, 
                        Zero
                    }
                })
            }
        }

        Method (_TDL, 0, NotSerialized)  // _TDL: T-State Depth Limit
        {
            If ((CondRefOf (\_SB.PR00._TSS) && CondRefOf (\_SB.CFGD)))
            {
                If ((\_SB.CFGD & 0x2000))
                {
                    Return ((SizeOf (\_SB.PR00.TSMF) - One))
                }
                Else
                {
                    Return ((SizeOf (\_SB.PR00.TSMC) - One))
                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PDL, 0, NotSerialized)  // _PDL: P-state Depth Limit
        {
            If (CondRefOf (\_SB.PR00._PSS))
            {
                If ((\_SB.OSCP & 0x0400))
                {
                    Return ((SizeOf (\_SB.PR00.TPSS) - One))
                }
                Else
                {
                    Return ((SizeOf (\_SB.PR00.LPSS) - One))
                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Name (TJMX, 0x6E)
        Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
        {
            Return (Zero)
        }

        Method (_AC0, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            Local1 = \_SB.IETM.CTOK (TJMX)
            Local1 -= 0x0A
            If ((LSTM >= Local1))
            {
                Return ((Local1 - 0x14))
            }
            Else
            {
                Return (Local1)
            }
        }

        Method (_AC1, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            Local1 = \_SB.IETM.CTOK (TJMX)
            Local1 -= 0x1E
            If ((LSTM >= Local1))
            {
                Return ((Local1 - 0x14))
            }
            Else
            {
                Return (Local1)
            }
        }

        Method (_AC2, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            Local1 = \_SB.IETM.CTOK (TJMX)
            Local1 -= 0x28
            If ((LSTM >= Local1))
            {
                Return ((Local1 - 0x14))
            }
            Else
            {
                Return (Local1)
            }
        }

        Method (_AC3, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            Local1 = \_SB.IETM.CTOK (TJMX)
            Local1 -= 0x37
            If ((LSTM >= Local1))
            {
                Return ((Local1 - 0x14))
            }
            Else
            {
                Return (Local1)
            }
        }

        Method (_AC4, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            Local1 = \_SB.IETM.CTOK (TJMX)
            Local1 -= 0x46
            If ((LSTM >= Local1))
            {
                Return ((Local1 - 0x14))
            }
            Else
            {
                Return (Local1)
            }
        }

        Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
        {
            Return (\_SB.IETM.CTOK (TJMX))
        }

        Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
        {
            Return (\_SB.IETM.CTOK (TJMX))
        }

        Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
        {
            Return (\_SB.IETM.CTOK (TJMX))
        }

        Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
        {
            Return (\_SB.IETM.CTOK (TJMX))
        }

        Method (UVTH, 1, Serialized)
        {
            If (CondRefOf (\_SB.PC00.LPCB.H_EC.DPTF.UVTH))
            {
                \_SB.PC00.LPCB.H_EC.DPTF.UVTH (Arg0)
                Return (Zero)
            }

            ADBG ("UVTH not available")
        }
    }

    Scope (\_SB.IETM)
    {
        Name (CTSP, Package (0x01)
        {
            ToUUID ("e145970a-e4c1-4d73-900e-c9c5a69dd067") /* Unknown UUID */
        })
    }

    Scope (\_SB.PC00.TCPU)
    {
        Method (TDPL, 0, Serialized)
        {
            Name (MPL0, Zero)
            Name (MPL1, Zero)
            Name (MPL2, Zero)
            Local0 = CTNL /* \_SB_.PC00.TCPU.CTNL */
            If (((Local0 == One) || (Local0 == 0x02)))
            {
                Local0 = \_SB.CLVL /* External reference */
            }
            Else
            {
                Return (Package (0x01)
                {
                    Zero
                })
            }

            If ((CLCK == One))
            {
                Local0 = One
            }

            MPL0 = CPNU (\_SB.PL10, One)
            MPL1 = CPNU (\_SB.PL11, One)
            MPL2 = CPNU (\_SB.PL12, One)
            Name (TMP1, Package (0x01)
            {
                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Name (TMP2, Package (0x02)
            {
                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Name (TMP3, Package (0x03)
            {
                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            If ((Local0 == 0x03))
            {
                If ((MPL0 > MPL1))
                {
                    If ((MPL0 > MPL2))
                    {
                        If ((MPL1 > MPL2))
                        {
                            Local3 = Zero
                            LEV0 = Zero
                            Local4 = One
                            LEV1 = One
                            Local5 = 0x02
                            LEV2 = 0x02
                        }
                        Else
                        {
                            Local3 = Zero
                            LEV0 = Zero
                            Local5 = One
                            LEV1 = 0x02
                            Local4 = 0x02
                            LEV2 = One
                        }
                    }
                    Else
                    {
                        Local5 = Zero
                        LEV0 = 0x02
                        Local3 = One
                        LEV1 = Zero
                        Local4 = 0x02
                        LEV2 = One
                    }
                }
                ElseIf ((MPL1 > MPL2))
                {
                    If ((MPL0 > MPL2))
                    {
                        Local4 = Zero
                        LEV0 = One
                        Local3 = One
                        LEV1 = Zero
                        Local5 = 0x02
                        LEV2 = 0x02
                    }
                    Else
                    {
                        Local4 = Zero
                        LEV0 = One
                        Local5 = One
                        LEV1 = 0x02
                        Local3 = 0x02
                        LEV2 = Zero
                    }
                }
                Else
                {
                    Local5 = Zero
                    LEV0 = 0x02
                    Local4 = One
                    LEV1 = One
                    Local3 = 0x02
                    LEV2 = Zero
                }

                Local1 = (\_SB.TAR0 + One)
                Local2 = (Local1 * 0x64)
                DerefOf (TMP3 [Local3]) [Zero] = MPL0 /* \_SB_.PC00.TCPU.TDPL.MPL0 */
                DerefOf (TMP3 [Local3]) [One] = Local2
                DerefOf (TMP3 [Local3]) [0x02] = \_SB.CTC0 /* External reference */
                DerefOf (TMP3 [Local3]) [0x03] = Local1
                DerefOf (TMP3 [Local3]) [0x04] = Zero
                Local1 = (\_SB.TAR1 + One)
                Local2 = (Local1 * 0x64)
                DerefOf (TMP3 [Local4]) [Zero] = MPL1 /* \_SB_.PC00.TCPU.TDPL.MPL1 */
                DerefOf (TMP3 [Local4]) [One] = Local2
                DerefOf (TMP3 [Local4]) [0x02] = \_SB.CTC1 /* External reference */
                DerefOf (TMP3 [Local4]) [0x03] = Local1
                DerefOf (TMP3 [Local4]) [0x04] = Zero
                Local1 = (\_SB.TAR2 + One)
                Local2 = (Local1 * 0x64)
                DerefOf (TMP3 [Local5]) [Zero] = MPL2 /* \_SB_.PC00.TCPU.TDPL.MPL2 */
                DerefOf (TMP3 [Local5]) [One] = Local2
                DerefOf (TMP3 [Local5]) [0x02] = \_SB.CTC2 /* External reference */
                DerefOf (TMP3 [Local5]) [0x03] = Local1
                DerefOf (TMP3 [Local5]) [0x04] = Zero
                Return (TMP3) /* \_SB_.PC00.TCPU.TDPL.TMP3 */
            }

            If ((Local0 == 0x02))
            {
                If ((MPL0 > MPL1))
                {
                    Local3 = Zero
                    Local4 = One
                    LEV0 = Zero
                    LEV1 = One
                    LEV2 = Zero
                }
                Else
                {
                    Local4 = Zero
                    Local3 = One
                    LEV0 = One
                    LEV1 = Zero
                    LEV2 = Zero
                }

                Local1 = (\_SB.TAR0 + One)
                Local2 = (Local1 * 0x64)
                DerefOf (TMP2 [Local3]) [Zero] = MPL0 /* \_SB_.PC00.TCPU.TDPL.MPL0 */
                DerefOf (TMP2 [Local3]) [One] = Local2
                DerefOf (TMP2 [Local3]) [0x02] = \_SB.CTC0 /* External reference */
                DerefOf (TMP2 [Local3]) [0x03] = Local1
                DerefOf (TMP2 [Local3]) [0x04] = Zero
                Local1 = (\_SB.TAR1 + One)
                Local2 = (Local1 * 0x64)
                DerefOf (TMP2 [Local4]) [Zero] = MPL1 /* \_SB_.PC00.TCPU.TDPL.MPL1 */
                DerefOf (TMP2 [Local4]) [One] = Local2
                DerefOf (TMP2 [Local4]) [0x02] = \_SB.CTC1 /* External reference */
                DerefOf (TMP2 [Local4]) [0x03] = Local1
                DerefOf (TMP2 [Local4]) [0x04] = Zero
                Return (TMP2) /* \_SB_.PC00.TCPU.TDPL.TMP2 */
            }

            If ((Local0 == One))
            {
                Switch (ToInteger (\_SB.CBMI))
                {
                    Case (Zero)
                    {
                        Local1 = (\_SB.TAR0 + One)
                        Local2 = (Local1 * 0x64)
                        DerefOf (TMP1 [Zero]) [Zero] = MPL0 /* \_SB_.PC00.TCPU.TDPL.MPL0 */
                        DerefOf (TMP1 [Zero]) [One] = Local2
                        DerefOf (TMP1 [Zero]) [0x02] = \_SB.CTC0 /* External reference */
                        DerefOf (TMP1 [Zero]) [0x03] = Local1
                        DerefOf (TMP1 [Zero]) [0x04] = Zero
                        LEV0 = Zero
                        LEV1 = Zero
                        LEV2 = Zero
                    }
                    Case (One)
                    {
                        Local1 = (\_SB.TAR1 + One)
                        Local2 = (Local1 * 0x64)
                        DerefOf (TMP1 [Zero]) [Zero] = MPL1 /* \_SB_.PC00.TCPU.TDPL.MPL1 */
                        DerefOf (TMP1 [Zero]) [One] = Local2
                        DerefOf (TMP1 [Zero]) [0x02] = \_SB.CTC1 /* External reference */
                        DerefOf (TMP1 [Zero]) [0x03] = Local1
                        DerefOf (TMP1 [Zero]) [0x04] = Zero
                        LEV0 = One
                        LEV1 = One
                        LEV2 = One
                    }
                    Case (0x02)
                    {
                        Local1 = (\_SB.TAR2 + One)
                        Local2 = (Local1 * 0x64)
                        DerefOf (TMP1 [Zero]) [Zero] = MPL2 /* \_SB_.PC00.TCPU.TDPL.MPL2 */
                        DerefOf (TMP1 [Zero]) [One] = Local2
                        DerefOf (TMP1 [Zero]) [0x02] = \_SB.CTC2 /* External reference */
                        DerefOf (TMP1 [Zero]) [0x03] = Local1
                        DerefOf (TMP1 [Zero]) [0x04] = Zero
                        LEV0 = 0x02
                        LEV1 = 0x02
                        LEV2 = 0x02
                    }

                }

                Return (TMP1) /* \_SB_.PC00.TCPU.TDPL.TMP1 */
            }

            Return (Zero)
        }

        Name (MAXT, Zero)
        Method (TDPC, 0, NotSerialized)
        {
            Return (MAXT) /* \_SB_.PC00.TCPU.MAXT */
        }

        Name (LEV0, Zero)
        Name (LEV1, Zero)
        Name (LEV2, Zero)
        Method (STDP, 1, Serialized)
        {
            If ((Arg0 >= \_SB.CLVL))
            {
                Return (Zero)
            }

            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Local0 = LEV0 /* \_SB_.PC00.TCPU.LEV0 */
                }
                Case (One)
                {
                    Local0 = LEV1 /* \_SB_.PC00.TCPU.LEV1 */
                }
                Case (0x02)
                {
                    Local0 = LEV2 /* \_SB_.PC00.TCPU.LEV2 */
                }

            }

            Switch (ToInteger (Local0))
            {
                Case (Zero)
                {
                    CPL0 ()
                }
                Case (One)
                {
                    CPL1 ()
                }
                Case (0x02)
                {
                    CPL2 ()
                }

            }

            Notify (\_SB.PC00.TCPU, 0x83) // Device-Specific Change
        }
    }

    Scope (\_SB.IETM)
    {
        Device (TPCH)
        {
            Name (_UID, "TPCH")  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (\_SB.PLDT.GHID (_UID))
            }

            Name (_STR, Unicode ("Intel PCH FIVR Participant"))  // _STR: Description String
            Name (PTYP, 0x05)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\_SB.PCHE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RFC0, 1, Serialized)
            {
                IPCS (0xA3, One, 0x08, Zero, Arg0, Zero, Zero)
                Return (Package (0x01)
                {
                    Zero
                })
            }

            Method (RFC1, 1, Serialized)
            {
                IPCS (0xA3, One, 0x08, One, Arg0, Zero, Zero)
                Return (Package (0x01)
                {
                    Zero
                })
            }

            Method (SEMI, 1, Serialized)
            {
                IPCS (0xA3, One, 0x08, 0x02, Arg0, Zero, Zero)
                Return (Package (0x01)
                {
                    Zero
                })
            }

            Method (PKGC, 1, Serialized)
            {
                Name (PPKG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                PPKG [Zero] = DerefOf (Arg0 [Zero])
                PPKG [One] = DerefOf (Arg0 [One])
                Return (PPKG) /* \_SB_.IETM.TPCH.PKGC.PPKG */
            }

            Method (GFC0, 0, Serialized)
            {
                Local0 = IPCS (0xA3, Zero, 0x08, Zero, Zero, Zero, Zero)
                Local1 = PKGC (Local0)
                Return (Local1)
            }

            Method (GFC1, 0, Serialized)
            {
                Local0 = IPCS (0xA3, Zero, 0x08, One, Zero, Zero, Zero)
                Local1 = PKGC (Local0)
                Return (Local1)
            }

            Method (GEMI, 0, Serialized)
            {
                Local0 = IPCS (0xA3, Zero, 0x08, 0x02, Zero, Zero, Zero)
                Local1 = PKGC (Local0)
                Return (Local1)
            }

            Method (GFFS, 0, Serialized)
            {
                Local0 = IPCS (0xA3, Zero, 0x08, 0x03, Zero, Zero, Zero)
                Local1 = PKGC (Local0)
                Return (Local1)
            }

            Method (GFCS, 0, Serialized)
            {
                Local0 = IPCS (0xA3, Zero, 0x08, 0x04, Zero, Zero, Zero)
                Local1 = PKGC (Local0)
                Return (Local1)
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Name (DP2P, Package (0x01)
        {
            ToUUID ("9e04115a-ae87-4d1c-9500-0f3e340bfe75") /* Unknown UUID */
        })
        Name (DPSP, Package (0x01)
        {
            ToUUID ("42a441d6-ae6a-462b-a84b-4a8ce79027d3") /* Unknown UUID */
        })
        Name (DASP, Package (0x01)
        {
            ToUUID ("3a95c389-e4b8-4629-a526-c52c88626bae") /* Unknown UUID */
        })
        Name (DA2P, Package (0x01)
        {
            ToUUID ("0e56fab6-bdfc-4e8c-8246-40ecfd4d74ea") /* Unknown UUID */
        })
        Name (DCSP, Package (0x01)
        {
            ToUUID ("97c68ae7-15fa-499c-b8c9-5da81d606e0a") /* Unknown UUID */
        })
        Name (RFIP, Package (0x01)
        {
            ToUUID ("c4ce1849-243a-49f3-b8d5-f97002f38e6a") /* Unknown UUID */
        })
        Name (POBP, Package (0x01)
        {
            ToUUID ("f5a35014-c209-46a4-993a-eb56de7530a1") /* Unknown UUID */
        })
        Name (DAPP, Package (0x01)
        {
            ToUUID ("63be270f-1c11-48fd-a6f7-3af253ff3e2d") /* Unknown UUID */
        })
        Name (DVSP, Package (0x01)
        {
            ToUUID ("6ed722a7-9240-48a5-b479-31eef723d7cf") /* Unknown UUID */
        })
        Name (DPID, Package (0x01)
        {
            ToUUID ("42496e14-bc1b-46e8-a798-ca915464426f") /* Unknown UUID */
        })
    }

    Scope (\_SB.IETM)
    {
        Method (TEVT, 2, Serialized)
        {
            Switch (ToString (Arg0, Ones))
            {
                Case ("IETM")
                {
                    Notify (\_SB.IETM, Arg1)
                }
                Case ("TCPU")
                {
                    Notify (\_SB.PC00.TCPU, Arg1)
                }
                Case ("TPCH")
                {
                    Notify (\_SB.IETM.TPCH, Arg1)
                }

            }

            If (\ECON)
            {
                Switch (ToString (Arg0, Ones))
                {
                    Case ("CHRG")
                    {
                        Notify (\_SB.IETM.CHRG, Arg1)
                    }
                    Case ("SEN2")
                    {
                        Notify (\_SB.IETM.SEN2, Arg1)
                    }
                    Case ("SEN3")
                    {
                        Notify (\_SB.IETM.SEN3, Arg1)
                    }
                    Case ("SEN4")
                    {
                        Notify (\_SB.IETM.SEN4, Arg1)
                    }
                    Case ("SEN5")
                    {
                        Notify (\_SB.IETM.SEN5, Arg1)
                    }
                    Case ("TFN1")
                    {
                        Notify (\_SB.IETM.TFN1, Arg1)
                    }
                    Case ("TPWR")
                    {
                        Notify (\_SB.IETM.TPWR, Arg1)
                    }

                }
            }
        }
    }

    OperationRegion (ODV, SystemMemory, 0xFC000700, 0x0100)
    Field (ODV, AnyAcc, NoLock, Preserve)
    {
        OEV0,   8, 
        OEV1,   8, 
        OEV2,   8, 
        OEV3,   8, 
        OEV4,   8, 
        OEV5,   8
    }

    Scope (\_SB.PC00.LPCB.EC)
    {
        Mutex (PATM, 0x00)
        Method (_QC1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Local0 = Acquire (\_SB.PC00.LPCB.EC.PATM, 0x0064)
            If ((Local0 == Zero))
            {
                SCIC = 0xC1
                D8XH (Zero, 0xC1)
                Release (\_SB.PC00.LPCB.EC.PATM)
            }

            Notify (\_SB.IETM.SEN2, 0x90) // Device-Specific
        }

        Method (_QC2, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Local0 = Acquire (\_SB.PC00.LPCB.EC.PATM, 0x0064)
            If ((Local0 == Zero))
            {
                If ((\_SB.PC00.LPCB.EC.DTDR == One))
                {
                    SCIC = 0xC2
                    D8XH (Zero, 0xC2)
                    \_SB.ODV0 = OEV0 /* \OEV0 */
                    \_SB.ODV1 = OEV1 /* \OEV1 */
                    \_SB.ODV2 = OEV2 /* \OEV2 */
                    \_SB.ODV3 = OEV3 /* \OEV3 */
                    \_SB.ODV4 = OEV4 /* \OEV4 */
                    \_SB.ODV5 = OEV5 /* \OEV5 */
                    \_SB.IETM.ODVP ()
                    Notify (\_SB.IETM, 0x88) // Device-Specific
                }

                Release (\_SB.PC00.LPCB.EC.PATM)
            }
        }

        Method (_QC3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Local0 = Acquire (\_SB.PC00.LPCB.EC.PATM, 0x0064)
            If ((Local0 == Zero))
            {
                SCIC = 0xC3
                D8XH (Zero, 0xC3)
                Release (\_SB.PC00.LPCB.EC.PATM)
            }

            Notify (\_SB.IETM, 0xA0) // Device-Specific
        }

        Method (_QC4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Local0 = Acquire (\_SB.PC00.LPCB.EC.PATM, 0x0064)
            If ((Local0 == Zero))
            {
                SCIC = 0xC4
                D8XH (Zero, 0xC4)
                Release (\_SB.PC00.LPCB.EC.PATM)
            }

            Notify (\_SB.IETM.SEN3, 0x90) // Device-Specific
        }
    }

    ADBG ("[Dptf DptfTabl SSDT][AcpiTableExit]")
    Debug = "[Dptf DptfTabl SSDT][AcpiTableExit]"
    Debug = Timer
}



SSDT14
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Psd", 0x00003000)
{
    External (_SB_.CFGD, FieldUnitObj)
    External (_SB_.PR00, DeviceObj)
    External (BCNT, UnknownObj)
    External (CM00, UnknownObj)
    External (CORE, UnknownObj)
    External (HTRO, UnknownObj)
    External (MDID, UnknownObj)
    External (PF00, IntObj)
    External (SCM0, UnknownObj)
    External (SCM1, UnknownObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PR00)
    {
        Method (GPSD, 2, NotSerialized)
        {
            Name (HPSD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    Zero, 
                    0xFE, 
                    0x80
                }
            })
            Name (SPSD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    Zero, 
                    0xFC, 
                    0x80
                }
            })
            If (((\_SB.CFGD & 0x02000000) && (\_SB.CFGD & 0x00400000)))
            {
                DerefOf (HPSD [Zero]) [0x02] = Arg0
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            ElseIf (HTRO)
            {
                DerefOf (HPSD [Zero]) [0x04] = ((Arg1 & 
                    0xE0) >> 0x05)
                DerefOf (SPSD [Zero]) [0x04] = ((Arg1 & 
                    0xE0) >> 0x05)
                DerefOf (HPSD [Zero]) [0x02] = (Arg1 & 0x1F
                    )
                DerefOf (SPSD [Zero]) [0x02] = (Arg1 & 0x1F
                    )
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PF00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR00.GPSD.HPSD */
            }

            Return (SPSD) /* \_SB_.PR00.GPSD.SPSD */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (GPSD (Zero, CM00))
        }
    }
}



SSDT15
------
DefinitionBlock ("", "SSDT", 2, "MSI_NB", "TbtTypeC", 0x00000000)
{
    External (_SB_.PC00.RP01.PXSX, DeviceObj)
    External (_SB_.PC00.RP05.PXSX, DeviceObj)
    External (_SB_.PC00.RP09.DTWK, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP09.PXSX, DeviceObj)
    External (_SB_.PC00.RP09.PXSX.SLOT, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.TBDH.NHI4, DeviceObj)
    External (_SB_.PC00.RP09.PXSX.TBDH.NHI5, DeviceObj)
    External (_SB_.PC00.RP09.PXSX.TBDH.SLOT, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.TP1D, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.TP1T, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.TP2D, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.TP2T, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.TP3D, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.TP3T, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.TP4D, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.TP4T, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.TP5D, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.TP5T, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.TP6D, UnknownObj)
    External (_SB_.PC00.RP09.PXSX.TP6T, UnknownObj)
    External (_SB_.PC00.RP09.TUID, IntObj)
    External (_SB_.PC00.RP09.WAKG, IntObj)
    External (_SB_.PC00.RP10.DTWK, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP10.PXSX, DeviceObj)
    External (_SB_.PC00.RP10.PXSX.SLOT, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.TBDH.NHI4, DeviceObj)
    External (_SB_.PC00.RP10.PXSX.TBDH.NHI5, DeviceObj)
    External (_SB_.PC00.RP10.PXSX.TBDH.SLOT, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.TP1D, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.TP1T, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.TP2D, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.TP2T, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.TP3D, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.TP3T, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.TP4D, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.TP4T, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.TP5D, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.TP5T, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.TP6D, UnknownObj)
    External (_SB_.PC00.RP10.PXSX.TP6T, UnknownObj)
    External (_SB_.PC00.RP10.TUID, IntObj)
    External (_SB_.PC00.RP10.WAKG, IntObj)
    External (_SB_.PC00.RP17.DTWK, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP17.PXSX, DeviceObj)
    External (_SB_.PC00.RP17.PXSX.SLOT, UnknownObj)
    External (_SB_.PC00.RP17.PXSX.TBDH.NHI4, DeviceObj)
    External (_SB_.PC00.RP17.PXSX.TBDH.NHI5, DeviceObj)
    External (_SB_.PC00.RP17.PXSX.TBDH.SLOT, UnknownObj)
    External (_SB_.PC00.RP17.PXSX.TP1D, UnknownObj)
    External (_SB_.PC00.RP17.PXSX.TP1T, UnknownObj)
    External (_SB_.PC00.RP17.PXSX.TP2D, UnknownObj)
    External (_SB_.PC00.RP17.PXSX.TP2T, UnknownObj)
    External (_SB_.PC00.RP17.PXSX.TP3D, UnknownObj)
    External (_SB_.PC00.RP17.PXSX.TP3T, UnknownObj)
    External (_SB_.PC00.RP17.PXSX.TP4D, UnknownObj)
    External (_SB_.PC00.RP17.PXSX.TP4T, UnknownObj)
    External (_SB_.PC00.RP17.PXSX.TP5D, UnknownObj)
    External (_SB_.PC00.RP17.PXSX.TP5T, UnknownObj)
    External (_SB_.PC00.RP17.PXSX.TP6D, UnknownObj)
    External (_SB_.PC00.RP17.PXSX.TP6T, UnknownObj)
    External (_SB_.PC00.RP17.TUID, IntObj)
    External (_SB_.PC00.RP17.WAKG, IntObj)
    External (_SB_.PC02.RP09.DTWK, MethodObj)    // 1 Arguments
    External (_SB_.PC02.RP09.PXSX, DeviceObj)
    External (_SB_.PC02.RP09.PXSX.SLOT, UnknownObj)
    External (_SB_.PC02.RP09.PXSX.TBDH.NHI4, DeviceObj)
    External (_SB_.PC02.RP09.PXSX.TBDH.NHI5, DeviceObj)
    External (_SB_.PC02.RP09.PXSX.TBDH.SLOT, UnknownObj)
    External (_SB_.PC02.RP09.PXSX.TP1D, UnknownObj)
    External (_SB_.PC02.RP09.PXSX.TP1T, UnknownObj)
    External (_SB_.PC02.RP09.PXSX.TP2D, UnknownObj)
    External (_SB_.PC02.RP09.PXSX.TP2T, UnknownObj)
    External (_SB_.PC02.RP09.PXSX.TP3D, UnknownObj)
    External (_SB_.PC02.RP09.PXSX.TP3T, UnknownObj)
    External (_SB_.PC02.RP09.PXSX.TP4D, UnknownObj)
    External (_SB_.PC02.RP09.PXSX.TP4T, UnknownObj)
    External (_SB_.PC02.RP09.PXSX.TP5D, UnknownObj)
    External (_SB_.PC02.RP09.PXSX.TP5T, UnknownObj)
    External (_SB_.PC02.RP09.PXSX.TP6D, UnknownObj)
    External (_SB_.PC02.RP09.PXSX.TP6T, UnknownObj)
    External (_SB_.PC02.RP09.TUID, IntObj)
    External (_SB_.PC02.RP09.WAKG, IntObj)
    External (_SB_.UBTC.RUCC, MethodObj)    // 2 Arguments
    External (ADBG, MethodObj)    // 1 Arguments
    External (DPM1, IntObj)
    External (DPM2, IntObj)
    External (DPM3, IntObj)
    External (DSCE, IntObj)
    External (DTFS, IntObj)
    External (DTMB, MethodObj)    // 4 Arguments
    External (DTRT, IntObj)
    External (NDUS, IntObj)
    External (NTUS, IntObj)
    External (RPS0, IntObj)
    External (RPS1, IntObj)
    External (RPT0, IntObj)
    External (RPT1, IntObj)
    External (TBSE, IntObj)
    External (TP1D, IntObj)
    External (TP1P, IntObj)
    External (TP1T, IntObj)
    External (TP2D, IntObj)
    External (TP2P, IntObj)
    External (TP2T, IntObj)
    External (TP3D, IntObj)
    External (TP3P, IntObj)
    External (TP3T, IntObj)
    External (TP4D, IntObj)
    External (TP4P, IntObj)
    External (TP4T, IntObj)
    External (TP5D, IntObj)
    External (TP5P, IntObj)
    External (TP5T, IntObj)
    External (TP6D, IntObj)
    External (TP6P, IntObj)
    External (TP6T, IntObj)

    If (CondRefOf (\RPS0))
    {
        ADBG (Concatenate ("upstream port RPS0 = ", ToHexString (RPS0)))
    }

    If (CondRefOf (\RPS1))
    {
        ADBG (Concatenate ("upstream port RPS1 = ", ToHexString (RPS1)))
    }

    If (CondRefOf (\RPT0))
    {
        ADBG (Concatenate ("upstream port RPT0 = ", ToHexString (RPT0)))
    }

    If (CondRefOf (\RPT1))
    {
        ADBG (Concatenate ("upstream port RPT1 = ", ToHexString (RPT1)))
    }

    If (CondRefOf (\DTFS))
    {
        If (((DTFS == One) && (RPS0 == 0x02)))
        {
            If ((RPT0 == 0x02))
            {
                Scope (\_SB.PC00.RP09.PXSX)
                {
                    Name (TURP, 0x09)
                    Device (TBDU)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                        Device (XHCI)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                            {
                                ADBG (Concatenate ("[dTBT] DTBT XHCI S0W - RP SLOT ", ToHexString (SLOT)))
                                Return (0x04)
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                ADBG (Concatenate ("[dTBT] DTBT XHCI PS0 - RP SLOT ", ToHexString (SLOT)))
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                ADBG (Concatenate ("[dTBT] DTBT XHCI PS3 - RP SLOT ", ToHexString (SLOT)))
                            }

                            Device (RHUB)
                            {
                                Name (_ADR, Zero)  // _ADR: Address
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    ADBG (Concatenate ("[dTBT] DTBT XHCI RHUB S0W return 4 - RP SLOT ", ToHexString (SLOT)))
                                    Return (0x04)
                                }

                                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                                {
                                    ADBG (Concatenate ("[dTBT] DTBT XHCI RHUB PS0 - RP SLOT ", ToHexString (SLOT)))
                                }

                                Method (_PS2, 0, Serialized)  // _PS2: Power State 2
                                {
                                    ADBG (Concatenate ("[dTBT] DTBT XHCI RHUB PS2 - RP SLOT ", ToHexString (SLOT)))
                                }

                                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                                {
                                    ADBG (Concatenate ("[dTBT] DTBT XHCI RHUB PS3 - RP SLOT ", ToHexString (SLOT)))
                                }

                                Method (SLMS, 1, Serialized)
                                {
                                    Local0 = (TURP << 0x02)
                                    Local0 |= One
                                    If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                    {
                                        Return ((TP1D & One))
                                    }
                                    ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                    {
                                        Return ((TP2D & One))
                                    }
                                    ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                    {
                                        Return ((TP3D & One))
                                    }
                                    ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                    {
                                        Return ((TP4D & One))
                                    }
                                    ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                    {
                                        Return ((TP5D & One))
                                    }
                                    ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                    {
                                        Return ((TP6D & One))
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                Method (FPCP, 2, Serialized)
                                {
                                    Local0 = (TURP << 0x02)
                                    Local0 |= One
                                    If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (One, Arg1))
                                    }
                                    ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (0x02, Arg1))
                                    }
                                    ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (0x03, Arg1))
                                    }
                                    ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (0x04, Arg1))
                                    }
                                    ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (0x05, Arg1))
                                    }
                                    ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (0x06, Arg1))
                                    }
                                    ElseIf ((Arg1 == One))
                                    {
                                        Return (TUPC (Zero, Zero))
                                    }
                                    Else
                                    {
                                        Return (TPLD (Zero, Zero))
                                    }
                                }

                                Method (FPSP, 1, Serialized)
                                {
                                    Local0 = (TURP << 0x02)
                                    Local0 |= One
                                    If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                    {
                                        Return (One)
                                    }
                                    ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                    {
                                        Return (One)
                                    }
                                    ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                    {
                                        Return (One)
                                    }
                                    ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                    {
                                        Return (One)
                                    }
                                    ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                    {
                                        Return (One)
                                    }
                                    ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                Method (TPLD, 2, Serialized)
                                {
                                    Name (PCKG, Package (0x01)
                                    {
                                        Buffer (0x10){}
                                    })
                                    CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                                    REV = One
                                    CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                                    VISI = Arg0
                                    CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                                    GPOS = Arg1
                                    CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                                    SHAP = One
                                    CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                                    WID = 0x08
                                    CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                                    HGT = 0x03
                                    Return (PCKG) /* \_SB_.PC00.RP09.PXSX.TBDU.XHCI.RHUB.TPLD.PCKG */
                                }

                                Method (TUPC, 2, Serialized)
                                {
                                    Name (PCKG, Package (0x04)
                                    {
                                        One, 
                                        Zero, 
                                        Zero, 
                                        Zero
                                    })
                                    PCKG [Zero] = Arg0
                                    PCKG [One] = Arg1
                                    Return (PCKG) /* \_SB_.PC00.RP09.PXSX.TBDU.XHCI.RHUB.TUPC.PCKG */
                                }

                                If ((FPSP (One) == One))
                                {
                                    Device (HS01)
                                    {
                                        Name (_ADR, One)  // _ADR: Address
                                        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                        {
                                            If ((SLMS (One) == Zero))
                                            {
                                                Return (FPCP (One, One))
                                            }
                                            Else
                                            {
                                                Return (TUPC (Zero, Zero))
                                            }
                                        }

                                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                        {
                                            If ((SLMS (One) == Zero))
                                            {
                                                Return (FPCP (One, 0x02))
                                            }
                                            Else
                                            {
                                                Return (TPLD (Zero, Zero))
                                            }
                                        }
                                    }
                                }

                                If ((FPSP (0x02) == One))
                                {
                                    Device (HS02)
                                    {
                                        Name (_ADR, 0x02)  // _ADR: Address
                                        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                        {
                                            If ((SLMS (0x02) == Zero))
                                            {
                                                Return (FPCP (0x02, One))
                                            }
                                            Else
                                            {
                                                Return (TUPC (Zero, Zero))
                                            }
                                        }

                                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                        {
                                            If ((SLMS (0x02) == Zero))
                                            {
                                                Return (FPCP (0x02, 0x02))
                                            }
                                            Else
                                            {
                                                Return (TPLD (Zero, Zero))
                                            }
                                        }
                                    }
                                }

                                If ((FPSP (One) == One))
                                {
                                    Device (SS01)
                                    {
                                        Name (_ADR, 0x03)  // _ADR: Address
                                        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                        {
                                            Return (FPCP (One, One))
                                        }

                                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                        {
                                            Return (FPCP (One, 0x02))
                                        }

                                        If (CondRefOf (\_SB.PC00.RP09.TUID))
                                        {
                                            ADBG (Concatenate ("[dTBT] DTBT SS01 - RP SLOT ", ToHexString (SLOT)))
                                            If ((\_SB.PC00.RP09.TUID <= One))
                                            {
                                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                                {
                                                    ADBG (Concatenate ("[dTBT] DTBT SS01 DSD - RP SLOT ", ToHexString (SLOT)))
                                                    If ((\_SB.PC00.RP09.TUID == Zero))
                                                    {
                                                        Return (Package (0x02)
                                                        {
                                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                                            Package (0x02)
                                                            {
                                                                Package (0x02)
                                                                {
                                                                    "usb4-host-interface", 
                                                                    \_SB.PC00.RP09.PXSX.TBDH.NHI4
                                                                }, 

                                                                Package (0x02)
                                                                {
                                                                    "usb4-port-number", 
                                                                    Zero
                                                                }
                                                            }
                                                        })
                                                    }
                                                    Else
                                                    {
                                                        Return (Package (0x02)
                                                        {
                                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                                            Package (0x02)
                                                            {
                                                                Package (0x02)
                                                                {
                                                                    "usb4-host-interface", 
                                                                    \_SB.PC00.RP09.PXSX.TBDH.NHI5
                                                                }, 

                                                                Package (0x02)
                                                                {
                                                                    "usb4-port-number", 
                                                                    Zero
                                                                }
                                                            }
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                If ((FPSP (0x02) == One))
                                {
                                    Device (SS02)
                                    {
                                        Name (_ADR, 0x04)  // _ADR: Address
                                        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                        {
                                            Return (FPCP (0x02, One))
                                        }

                                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                        {
                                            Return (FPCP (0x02, 0x02))
                                        }

                                        If (CondRefOf (\_SB.PC00.RP09.TUID))
                                        {
                                            ADBG (Concatenate ("[dTBT] DTBT SS02 - RP SLOT ", ToHexString (SLOT)))
                                            If ((\_SB.PC00.RP09.TUID <= One))
                                            {
                                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                                {
                                                    ADBG (Concatenate ("[dTBT] DTBT SS02 DSD - RP SLOT ", ToHexString (SLOT)))
                                                    If ((\_SB.PC00.RP09.TUID == Zero))
                                                    {
                                                        Return (Package (0x02)
                                                        {
                                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                                            Package (0x02)
                                                            {
                                                                Package (0x02)
                                                                {
                                                                    "usb4-host-interface", 
                                                                    \_SB.PC00.RP09.PXSX.TBDH.NHI4
                                                                }, 

                                                                Package (0x02)
                                                                {
                                                                    "usb4-port-number", 
                                                                    One
                                                                }
                                                            }
                                                        })
                                                    }
                                                    Else
                                                    {
                                                        Return (Package (0x02)
                                                        {
                                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                                            Package (0x02)
                                                            {
                                                                Package (0x02)
                                                                {
                                                                    "usb4-host-interface", 
                                                                    \_SB.PC00.RP09.PXSX.TBDH.NHI5
                                                                }, 

                                                                Package (0x02)
                                                                {
                                                                    "usb4-port-number", 
                                                                    One
                                                                }
                                                            }
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                Return (Zero)
                            }
                        }
                    }

                    If ((CondRefOf (\_SB.PC00.RP09.TUID) && CondRefOf (\DTRT)))
                    {
                        Device (TBDH)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            If ((\_SB.PC00.RP09.TUID <= One))
                            {
                                If ((\_SB.PC00.RP09.TUID == Zero))
                                {
                                    Device (NHI4)
                                    {
                                        Name (_ADR, Zero)  // _ADR: Address
                                        If (CondRefOf (\DTRT))
                                        {
                                            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _S0W - RP SLOT ", ToHexString (SLOT)))
                                                If ((\DTRT == Zero))
                                                {
                                                    ADBG ("[dTBT] DTBT NHI S0W return 3")
                                                    Return (0x03)
                                                }
                                                Else
                                                {
                                                    ADBG ("[dTBT] DTBT NHI S0W return 4")
                                                    Return (0x04)
                                                }
                                            }

                                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS0 - RP SLOT ", ToHexString (SLOT)))
                                            }

                                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS3 Start - RP SLOT", ToHexString (SLOT)))
                                                If (!(CondRefOf (\RPS0) && CondRefOf (\RPT0)))
                                                {
                                                    ADBG ("[dTBT] dTBT NHI _PS3 End due to RPS# or RPT# not present!")
                                                    Return (Zero)
                                                }

                                                If (CondRefOf (\_SB.PC00.RP09.WAKG))
                                                {
                                                    ADBG (Concatenate ("[dTBT] WAKG = ", ToHexString (\_SB.PC00.RP09.WAKG)))
                                                    If ((\_SB.PC00.RP09.WAKG != Zero))
                                                    {
                                                        ADBG ("[dTBT] Enable Wake")
                                                        \_SB.PC00.RP09.DTWK (Zero)
                                                    }
                                                }

                                                If (CondRefOf (\DTMB))
                                                {
                                                    \DTMB (0x48, Zero, \RPS0, \RPT0)
                                                }

                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS3 End - RP SLOT ", ToHexString (SLOT)))
                                            }

                                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                }
                                Else
                                {
                                    Device (NHI5)
                                    {
                                        Name (_ADR, Zero)  // _ADR: Address
                                        If (CondRefOf (\DTRT))
                                        {
                                            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _S0W - RP SLOT ", ToHexString (SLOT)))
                                                If ((\DTRT == Zero))
                                                {
                                                    ADBG ("[dTBT] DTBT NHI S0W return 3")
                                                    Return (0x03)
                                                }
                                                Else
                                                {
                                                    ADBG ("[dTBT] DTBT NHI S0W return 4")
                                                    Return (0x04)
                                                }
                                            }

                                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS0 - RP SLOT ", ToHexString (SLOT)))
                                            }

                                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS3 Start - RP SLOT", ToHexString (SLOT)))
                                                If (!(CondRefOf (\RPS1) && CondRefOf (\RPT1)))
                                                {
                                                    ADBG ("[dTBT] dTBT NHI _PS3 End due to RPS# or RPT# not present!")
                                                    Return (Zero)
                                                }

                                                If (CondRefOf (\_SB.PC00.RP09.WAKG))
                                                {
                                                    ADBG (Concatenate ("[dTBT] WAKG = ", ToHexString (\_SB.PC00.RP09.WAKG)))
                                                    If ((\_SB.PC00.RP09.WAKG != Zero))
                                                    {
                                                        ADBG ("[dTBT] Enable Wake")
                                                        \_SB.PC00.RP09.DTWK (Zero)
                                                    }
                                                }

                                                If (CondRefOf (\DTMB))
                                                {
                                                    \DTMB (0x48, Zero, \RPS1, \RPT1)
                                                }

                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS3 End - RP SLOT ", ToHexString (SLOT)))
                                            }

                                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        Device (TBP1)
                        {
                            Name (_ADR, 0x00010000)  // _ADR: Address
                            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS1 _S0W - RP SLOT ", ToHexString (SLOT)))
                                If ((\DTRT == Zero))
                                {
                                    ADBG ("[dTBT] DTBT DS1 S0W return 3")
                                    Return (0x03)
                                }
                                Else
                                {
                                    ADBG ("[dTBT] DTBT DS1 S0W return 4")
                                    Return (0x04)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS1 _PS0 - RP SLOT ", ToHexString (SLOT)))
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS1 _PS3 - RP SLOT ", ToHexString (SLOT)))
                            }

                            If ((\_SB.PC00.RP09.TUID <= One))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    ADBG (Concatenate ("[dTBT] dTBT DS1 _DSD - RP SLOT ", ToHexString (SLOT)))
                                    If ((\_SB.PC00.RP09.TUID == Zero))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                            Package (0x02)
                                            {
                                                Package (0x02)
                                                {
                                                    "usb4-host-interface", 
                                                    \_SB.PC00.RP09.PXSX.TBDH.NHI4
                                                }, 

                                                Package (0x02)
                                                {
                                                    "usb4-port-number", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                            Package (0x02)
                                            {
                                                Package (0x02)
                                                {
                                                    "usb4-host-interface", 
                                                    \_SB.PC00.RP09.PXSX.TBDH.NHI5
                                                }, 

                                                Package (0x02)
                                                {
                                                    "usb4-port-number", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Device (TBP3)
                        {
                            Name (_ADR, 0x00030000)  // _ADR: Address
                            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS3 _S0W - RP SLOT ", ToHexString (SLOT)))
                                If ((\DTRT == Zero))
                                {
                                    ADBG ("[dTBT] DTBT DS3 S0W return 3")
                                    Return (0x03)
                                }
                                Else
                                {
                                    ADBG ("[dTBT] DTBT DS3 S0W return 4")
                                    Return (0x04)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS3 _PS0 - RP SLOT ", ToHexString (SLOT)))
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS3 _PS3 - RP SLOT ", ToHexString (SLOT)))
                            }

                            If ((\_SB.PC00.RP09.TUID <= One))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    ADBG (Concatenate ("[dTBT] dTBT DS3 _DSD - RP SLOT ", ToHexString (SLOT)))
                                    If ((\_SB.PC00.RP09.TUID == Zero))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                            Package (0x02)
                                            {
                                                Package (0x02)
                                                {
                                                    "usb4-host-interface", 
                                                    \_SB.PC00.RP09.PXSX.TBDH.NHI4
                                                }, 

                                                Package (0x02)
                                                {
                                                    "usb4-port-number", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                            Package (0x02)
                                            {
                                                Package (0x02)
                                                {
                                                    "usb4-host-interface", 
                                                    \_SB.PC00.RP09.PXSX.TBDH.NHI5
                                                }, 

                                                Package (0x02)
                                                {
                                                    "usb4-port-number", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        If (((DTFS == One) && (RPS0 == 0x0A)))
        {
            If ((RPT0 == 0x02))
            {
                Scope (\_SB.PC00.RP10.PXSX)
                {
                    Name (TURP, 0x0A)
                    Device (TBDU)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                        Device (XHCI)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                            {
                                ADBG (Concatenate ("[dTBT] DTBT XHCI S0W - RP SLOT ", ToHexString (SLOT)))
                                Return (0x04)
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                ADBG (Concatenate ("[dTBT] DTBT XHCI PS0 - RP SLOT ", ToHexString (SLOT)))
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                ADBG (Concatenate ("[dTBT] DTBT XHCI PS3 - RP SLOT ", ToHexString (SLOT)))
                            }

                            Device (RHUB)
                            {
                                Name (_ADR, Zero)  // _ADR: Address
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    ADBG (Concatenate ("[dTBT] DTBT XHCI RHUB S0W return 4 - RP SLOT ", ToHexString (SLOT)))
                                    Return (0x04)
                                }

                                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                                {
                                    ADBG (Concatenate ("[dTBT] DTBT XHCI RHUB PS0 - RP SLOT ", ToHexString (SLOT)))
                                }

                                Method (_PS2, 0, Serialized)  // _PS2: Power State 2
                                {
                                    ADBG (Concatenate ("[dTBT] DTBT XHCI RHUB PS2 - RP SLOT ", ToHexString (SLOT)))
                                }

                                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                                {
                                    ADBG (Concatenate ("[dTBT] DTBT XHCI RHUB PS3 - RP SLOT ", ToHexString (SLOT)))
                                }

                                Method (SLMS, 1, Serialized)
                                {
                                    Local0 = (TURP << 0x02)
                                    Local0 |= One
                                    If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                    {
                                        Return ((TP1D & One))
                                    }
                                    ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                    {
                                        Return ((TP2D & One))
                                    }
                                    ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                    {
                                        Return ((TP3D & One))
                                    }
                                    ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                    {
                                        Return ((TP4D & One))
                                    }
                                    ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                    {
                                        Return ((TP5D & One))
                                    }
                                    ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                    {
                                        Return ((TP6D & One))
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                Method (FPCP, 2, Serialized)
                                {
                                    Local0 = (TURP << 0x02)
                                    Local0 |= One
                                    If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (One, Arg1))
                                    }
                                    ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (0x02, Arg1))
                                    }
                                    ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (0x03, Arg1))
                                    }
                                    ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (0x04, Arg1))
                                    }
                                    ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (0x05, Arg1))
                                    }
                                    ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (0x06, Arg1))
                                    }
                                    ElseIf ((Arg1 == One))
                                    {
                                        Return (TUPC (Zero, Zero))
                                    }
                                    Else
                                    {
                                        Return (TPLD (Zero, Zero))
                                    }
                                }

                                Method (FPSP, 1, Serialized)
                                {
                                    Local0 = (TURP << 0x02)
                                    Local0 |= One
                                    If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                    {
                                        Return (One)
                                    }
                                    ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                    {
                                        Return (One)
                                    }
                                    ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                    {
                                        Return (One)
                                    }
                                    ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                    {
                                        Return (One)
                                    }
                                    ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                    {
                                        Return (One)
                                    }
                                    ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                Method (TPLD, 2, Serialized)
                                {
                                    Name (PCKG, Package (0x01)
                                    {
                                        Buffer (0x10){}
                                    })
                                    CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                                    REV = One
                                    CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                                    VISI = Arg0
                                    CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                                    GPOS = Arg1
                                    CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                                    SHAP = One
                                    CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                                    WID = 0x08
                                    CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                                    HGT = 0x03
                                    Return (PCKG) /* \_SB_.PC00.RP10.PXSX.TBDU.XHCI.RHUB.TPLD.PCKG */
                                }

                                Method (TUPC, 2, Serialized)
                                {
                                    Name (PCKG, Package (0x04)
                                    {
                                        One, 
                                        Zero, 
                                        Zero, 
                                        Zero
                                    })
                                    PCKG [Zero] = Arg0
                                    PCKG [One] = Arg1
                                    Return (PCKG) /* \_SB_.PC00.RP10.PXSX.TBDU.XHCI.RHUB.TUPC.PCKG */
                                }

                                If ((FPSP (One) == One))
                                {
                                    Device (HS01)
                                    {
                                        Name (_ADR, One)  // _ADR: Address
                                        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                        {
                                            If ((SLMS (One) == Zero))
                                            {
                                                Return (FPCP (One, One))
                                            }
                                            Else
                                            {
                                                Return (TUPC (Zero, Zero))
                                            }
                                        }

                                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                        {
                                            If ((SLMS (One) == Zero))
                                            {
                                                Return (FPCP (One, 0x02))
                                            }
                                            Else
                                            {
                                                Return (TPLD (Zero, Zero))
                                            }
                                        }
                                    }
                                }

                                If ((FPSP (0x02) == One))
                                {
                                    Device (HS02)
                                    {
                                        Name (_ADR, 0x02)  // _ADR: Address
                                        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                        {
                                            If ((SLMS (0x02) == Zero))
                                            {
                                                Return (FPCP (0x02, One))
                                            }
                                            Else
                                            {
                                                Return (TUPC (Zero, Zero))
                                            }
                                        }

                                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                        {
                                            If ((SLMS (0x02) == Zero))
                                            {
                                                Return (FPCP (0x02, 0x02))
                                            }
                                            Else
                                            {
                                                Return (TPLD (Zero, Zero))
                                            }
                                        }
                                    }
                                }

                                If ((FPSP (One) == One))
                                {
                                    Device (SS01)
                                    {
                                        Name (_ADR, 0x03)  // _ADR: Address
                                        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                        {
                                            Return (FPCP (One, One))
                                        }

                                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                        {
                                            Return (FPCP (One, 0x02))
                                        }

                                        If (CondRefOf (\_SB.PC00.RP10.TUID))
                                        {
                                            ADBG (Concatenate ("[dTBT] DTBT SS01 - RP SLOT ", ToHexString (SLOT)))
                                            If ((\_SB.PC00.RP10.TUID <= One))
                                            {
                                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                                {
                                                    ADBG (Concatenate ("[dTBT] DTBT SS01 DSD - RP SLOT ", ToHexString (SLOT)))
                                                    If ((\_SB.PC00.RP10.TUID == Zero))
                                                    {
                                                        Return (Package (0x02)
                                                        {
                                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                                            Package (0x02)
                                                            {
                                                                Package (0x02)
                                                                {
                                                                    "usb4-host-interface", 
                                                                    \_SB.PC00.RP10.PXSX.TBDH.NHI4
                                                                }, 

                                                                Package (0x02)
                                                                {
                                                                    "usb4-port-number", 
                                                                    Zero
                                                                }
                                                            }
                                                        })
                                                    }
                                                    Else
                                                    {
                                                        Return (Package (0x02)
                                                        {
                                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                                            Package (0x02)
                                                            {
                                                                Package (0x02)
                                                                {
                                                                    "usb4-host-interface", 
                                                                    \_SB.PC00.RP10.PXSX.TBDH.NHI5
                                                                }, 

                                                                Package (0x02)
                                                                {
                                                                    "usb4-port-number", 
                                                                    Zero
                                                                }
                                                            }
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                If ((FPSP (0x02) == One))
                                {
                                    Device (SS02)
                                    {
                                        Name (_ADR, 0x04)  // _ADR: Address
                                        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                        {
                                            Return (FPCP (0x02, One))
                                        }

                                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                        {
                                            Return (FPCP (0x02, 0x02))
                                        }

                                        If (CondRefOf (\_SB.PC00.RP10.TUID))
                                        {
                                            ADBG (Concatenate ("[dTBT] DTBT SS02 - RP SLOT ", ToHexString (SLOT)))
                                            If ((\_SB.PC00.RP10.TUID <= One))
                                            {
                                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                                {
                                                    ADBG (Concatenate ("[dTBT] DTBT SS02 DSD - RP SLOT ", ToHexString (SLOT)))
                                                    If ((\_SB.PC00.RP10.TUID == Zero))
                                                    {
                                                        Return (Package (0x02)
                                                        {
                                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                                            Package (0x02)
                                                            {
                                                                Package (0x02)
                                                                {
                                                                    "usb4-host-interface", 
                                                                    \_SB.PC00.RP10.PXSX.TBDH.NHI4
                                                                }, 

                                                                Package (0x02)
                                                                {
                                                                    "usb4-port-number", 
                                                                    One
                                                                }
                                                            }
                                                        })
                                                    }
                                                    Else
                                                    {
                                                        Return (Package (0x02)
                                                        {
                                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                                            Package (0x02)
                                                            {
                                                                Package (0x02)
                                                                {
                                                                    "usb4-host-interface", 
                                                                    \_SB.PC00.RP10.PXSX.TBDH.NHI5
                                                                }, 

                                                                Package (0x02)
                                                                {
                                                                    "usb4-port-number", 
                                                                    One
                                                                }
                                                            }
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                Return (Zero)
                            }
                        }
                    }

                    If ((CondRefOf (\_SB.PC00.RP10.TUID) && CondRefOf (\DTRT)))
                    {
                        Device (TBDH)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            If ((\_SB.PC00.RP10.TUID <= One))
                            {
                                If ((\_SB.PC00.RP10.TUID == Zero))
                                {
                                    Device (NHI4)
                                    {
                                        Name (_ADR, Zero)  // _ADR: Address
                                        If (CondRefOf (\DTRT))
                                        {
                                            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _S0W - RP SLOT ", ToHexString (SLOT)))
                                                If ((\DTRT == Zero))
                                                {
                                                    ADBG ("[dTBT] DTBT NHI S0W return 3")
                                                    Return (0x03)
                                                }
                                                Else
                                                {
                                                    ADBG ("[dTBT] DTBT NHI S0W return 4")
                                                    Return (0x04)
                                                }
                                            }

                                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS0 - RP SLOT ", ToHexString (SLOT)))
                                            }

                                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS3 Start - RP SLOT", ToHexString (SLOT)))
                                                If (!(CondRefOf (\RPS0) && CondRefOf (\RPT0)))
                                                {
                                                    ADBG ("[dTBT] dTBT NHI _PS3 End due to RPS# or RPT# not present!")
                                                    Return (Zero)
                                                }

                                                If (CondRefOf (\_SB.PC00.RP10.WAKG))
                                                {
                                                    ADBG (Concatenate ("[dTBT] WAKG = ", ToHexString (\_SB.PC00.RP10.WAKG)))
                                                    If ((\_SB.PC00.RP10.WAKG != Zero))
                                                    {
                                                        ADBG ("[dTBT] Enable Wake")
                                                        \_SB.PC00.RP10.DTWK (Zero)
                                                    }
                                                }

                                                If (CondRefOf (\DTMB))
                                                {
                                                    \DTMB (0x48, Zero, \RPS0, \RPT0)
                                                }

                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS3 End - RP SLOT ", ToHexString (SLOT)))
                                            }

                                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                }
                                Else
                                {
                                    Device (NHI5)
                                    {
                                        Name (_ADR, Zero)  // _ADR: Address
                                        If (CondRefOf (\DTRT))
                                        {
                                            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _S0W - RP SLOT ", ToHexString (SLOT)))
                                                If ((\DTRT == Zero))
                                                {
                                                    ADBG ("[dTBT] DTBT NHI S0W return 3")
                                                    Return (0x03)
                                                }
                                                Else
                                                {
                                                    ADBG ("[dTBT] DTBT NHI S0W return 4")
                                                    Return (0x04)
                                                }
                                            }

                                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS0 - RP SLOT ", ToHexString (SLOT)))
                                            }

                                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS3 Start - RP SLOT", ToHexString (SLOT)))
                                                If (!(CondRefOf (\RPS1) && CondRefOf (\RPT1)))
                                                {
                                                    ADBG ("[dTBT] dTBT NHI _PS3 End due to RPS# or RPT# not present!")
                                                    Return (Zero)
                                                }

                                                If (CondRefOf (\_SB.PC00.RP10.WAKG))
                                                {
                                                    ADBG (Concatenate ("[dTBT] WAKG = ", ToHexString (\_SB.PC00.RP10.WAKG)))
                                                    If ((\_SB.PC00.RP10.WAKG != Zero))
                                                    {
                                                        ADBG ("[dTBT] Enable Wake")
                                                        \_SB.PC00.RP10.DTWK (Zero)
                                                    }
                                                }

                                                If (CondRefOf (\DTMB))
                                                {
                                                    \DTMB (0x48, Zero, \RPS1, \RPT1)
                                                }

                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS3 End - RP SLOT ", ToHexString (SLOT)))
                                            }

                                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        Device (TBP1)
                        {
                            Name (_ADR, 0x00010000)  // _ADR: Address
                            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS1 _S0W - RP SLOT ", ToHexString (SLOT)))
                                If ((\DTRT == Zero))
                                {
                                    ADBG ("[dTBT] DTBT DS1 S0W return 3")
                                    Return (0x03)
                                }
                                Else
                                {
                                    ADBG ("[dTBT] DTBT DS1 S0W return 4")
                                    Return (0x04)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS1 _PS0 - RP SLOT ", ToHexString (SLOT)))
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS1 _PS3 - RP SLOT ", ToHexString (SLOT)))
                            }

                            If ((\_SB.PC00.RP10.TUID <= One))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    ADBG (Concatenate ("[dTBT] dTBT DS1 _DSD - RP SLOT ", ToHexString (SLOT)))
                                    If ((\_SB.PC00.RP10.TUID == Zero))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                            Package (0x02)
                                            {
                                                Package (0x02)
                                                {
                                                    "usb4-host-interface", 
                                                    \_SB.PC00.RP10.PXSX.TBDH.NHI4
                                                }, 

                                                Package (0x02)
                                                {
                                                    "usb4-port-number", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                            Package (0x02)
                                            {
                                                Package (0x02)
                                                {
                                                    "usb4-host-interface", 
                                                    \_SB.PC00.RP10.PXSX.TBDH.NHI5
                                                }, 

                                                Package (0x02)
                                                {
                                                    "usb4-port-number", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Device (TBP3)
                        {
                            Name (_ADR, 0x00030000)  // _ADR: Address
                            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS3 _S0W - RP SLOT ", ToHexString (SLOT)))
                                If ((\DTRT == Zero))
                                {
                                    ADBG ("[dTBT] DTBT DS3 S0W return 3")
                                    Return (0x03)
                                }
                                Else
                                {
                                    ADBG ("[dTBT] DTBT DS3 S0W return 4")
                                    Return (0x04)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS3 _PS0 - RP SLOT ", ToHexString (SLOT)))
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS3 _PS3 - RP SLOT ", ToHexString (SLOT)))
                            }

                            If ((\_SB.PC00.RP10.TUID <= One))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    ADBG (Concatenate ("[dTBT] dTBT DS3 _DSD - RP SLOT ", ToHexString (SLOT)))
                                    If ((\_SB.PC00.RP10.TUID == Zero))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                            Package (0x02)
                                            {
                                                Package (0x02)
                                                {
                                                    "usb4-host-interface", 
                                                    \_SB.PC00.RP10.PXSX.TBDH.NHI4
                                                }, 

                                                Package (0x02)
                                                {
                                                    "usb4-port-number", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                            Package (0x02)
                                            {
                                                Package (0x02)
                                                {
                                                    "usb4-host-interface", 
                                                    \_SB.PC00.RP10.PXSX.TBDH.NHI5
                                                }, 

                                                Package (0x02)
                                                {
                                                    "usb4-port-number", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        If (((DTFS == One) && ((RPS0 == 0x04) || (RPS1 == 0x04))))
        {
            If ((RPT0 == 0x02))
            {
                Scope (\_SB.PC00.RP17.PXSX)
                {
                    Name (TURP, 0x11)
                    Device (TBDU)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                        Device (XHCI)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                            {
                                ADBG (Concatenate ("[dTBT] DTBT XHCI S0W - RP SLOT ", ToHexString (SLOT)))
                                Return (0x04)
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                ADBG (Concatenate ("[dTBT] DTBT XHCI PS0 - RP SLOT ", ToHexString (SLOT)))
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                ADBG (Concatenate ("[dTBT] DTBT XHCI PS3 - RP SLOT ", ToHexString (SLOT)))
                            }

                            Device (RHUB)
                            {
                                Name (_ADR, Zero)  // _ADR: Address
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    ADBG (Concatenate ("[dTBT] DTBT XHCI RHUB S0W return 4 - RP SLOT ", ToHexString (SLOT)))
                                    Return (0x04)
                                }

                                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                                {
                                    ADBG (Concatenate ("[dTBT] DTBT XHCI RHUB PS0 - RP SLOT ", ToHexString (SLOT)))
                                }

                                Method (_PS2, 0, Serialized)  // _PS2: Power State 2
                                {
                                    ADBG (Concatenate ("[dTBT] DTBT XHCI RHUB PS2 - RP SLOT ", ToHexString (SLOT)))
                                }

                                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                                {
                                    ADBG (Concatenate ("[dTBT] DTBT XHCI RHUB PS3 - RP SLOT ", ToHexString (SLOT)))
                                }

                                Method (SLMS, 1, Serialized)
                                {
                                    Local0 = (TURP << 0x02)
                                    Local0 |= One
                                    If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                    {
                                        Return ((TP1D & One))
                                    }
                                    ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                    {
                                        Return ((TP2D & One))
                                    }
                                    ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                    {
                                        Return ((TP3D & One))
                                    }
                                    ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                    {
                                        Return ((TP4D & One))
                                    }
                                    ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                    {
                                        Return ((TP5D & One))
                                    }
                                    ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                    {
                                        Return ((TP6D & One))
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                Method (FPCP, 2, Serialized)
                                {
                                    Local0 = (TURP << 0x02)
                                    Local0 |= One
                                    If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (One, Arg1))
                                    }
                                    ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (0x02, Arg1))
                                    }
                                    ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (0x03, Arg1))
                                    }
                                    ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (0x04, Arg1))
                                    }
                                    ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (0x05, Arg1))
                                    }
                                    ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (0x06, Arg1))
                                    }
                                    ElseIf ((Arg1 == One))
                                    {
                                        Return (TUPC (Zero, Zero))
                                    }
                                    Else
                                    {
                                        Return (TPLD (Zero, Zero))
                                    }
                                }

                                Method (FPSP, 1, Serialized)
                                {
                                    Local0 = (TURP << 0x02)
                                    Local0 |= One
                                    If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                    {
                                        Return (One)
                                    }
                                    ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                    {
                                        Return (One)
                                    }
                                    ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                    {
                                        Return (One)
                                    }
                                    ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                    {
                                        Return (One)
                                    }
                                    ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                    {
                                        Return (One)
                                    }
                                    ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                Method (TPLD, 2, Serialized)
                                {
                                    Name (PCKG, Package (0x01)
                                    {
                                        Buffer (0x10){}
                                    })
                                    CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                                    REV = One
                                    CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                                    VISI = Arg0
                                    CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                                    GPOS = Arg1
                                    CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                                    SHAP = One
                                    CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                                    WID = 0x08
                                    CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                                    HGT = 0x03
                                    Return (PCKG) /* \_SB_.PC00.RP17.PXSX.TBDU.XHCI.RHUB.TPLD.PCKG */
                                }

                                Method (TUPC, 2, Serialized)
                                {
                                    Name (PCKG, Package (0x04)
                                    {
                                        One, 
                                        Zero, 
                                        Zero, 
                                        Zero
                                    })
                                    PCKG [Zero] = Arg0
                                    PCKG [One] = Arg1
                                    Return (PCKG) /* \_SB_.PC00.RP17.PXSX.TBDU.XHCI.RHUB.TUPC.PCKG */
                                }

                                If ((FPSP (One) == One))
                                {
                                    Device (HS01)
                                    {
                                        Name (_ADR, One)  // _ADR: Address
                                        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                        {
                                            If ((SLMS (One) == Zero))
                                            {
                                                Return (FPCP (One, One))
                                            }
                                            Else
                                            {
                                                Return (TUPC (Zero, Zero))
                                            }
                                        }

                                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                        {
                                            If ((SLMS (One) == Zero))
                                            {
                                                Return (FPCP (One, 0x02))
                                            }
                                            Else
                                            {
                                                Return (TPLD (Zero, Zero))
                                            }
                                        }
                                    }
                                }

                                If ((FPSP (0x02) == One))
                                {
                                    Device (HS02)
                                    {
                                        Name (_ADR, 0x02)  // _ADR: Address
                                        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                        {
                                            If ((SLMS (0x02) == Zero))
                                            {
                                                Return (FPCP (0x02, One))
                                            }
                                            Else
                                            {
                                                Return (TUPC (Zero, Zero))
                                            }
                                        }

                                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                        {
                                            If ((SLMS (0x02) == Zero))
                                            {
                                                Return (FPCP (0x02, 0x02))
                                            }
                                            Else
                                            {
                                                Return (TPLD (Zero, Zero))
                                            }
                                        }
                                    }
                                }

                                If ((FPSP (One) == One))
                                {
                                    Device (SS01)
                                    {
                                        Name (_ADR, 0x03)  // _ADR: Address
                                        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                        {
                                            Return (FPCP (One, One))
                                        }

                                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                        {
                                            Return (FPCP (One, 0x02))
                                        }

                                        If (CondRefOf (\_SB.PC00.RP17.TUID))
                                        {
                                            ADBG (Concatenate ("[dTBT] DTBT SS01 - RP SLOT ", ToHexString (SLOT)))
                                            If ((\_SB.PC00.RP17.TUID <= One))
                                            {
                                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                                {
                                                    ADBG (Concatenate ("[dTBT] DTBT SS01 DSD - RP SLOT ", ToHexString (SLOT)))
                                                    If ((\_SB.PC00.RP17.TUID == Zero))
                                                    {
                                                        Return (Package (0x02)
                                                        {
                                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                                            Package (0x02)
                                                            {
                                                                Package (0x02)
                                                                {
                                                                    "usb4-host-interface", 
                                                                    \_SB.PC00.RP17.PXSX.TBDH.NHI4
                                                                }, 

                                                                Package (0x02)
                                                                {
                                                                    "usb4-port-number", 
                                                                    Zero
                                                                }
                                                            }
                                                        })
                                                    }
                                                    Else
                                                    {
                                                        Return (Package (0x02)
                                                        {
                                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                                            Package (0x02)
                                                            {
                                                                Package (0x02)
                                                                {
                                                                    "usb4-host-interface", 
                                                                    \_SB.PC00.RP17.PXSX.TBDH.NHI5
                                                                }, 

                                                                Package (0x02)
                                                                {
                                                                    "usb4-port-number", 
                                                                    Zero
                                                                }
                                                            }
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                If ((FPSP (0x02) == One))
                                {
                                    Device (SS02)
                                    {
                                        Name (_ADR, 0x04)  // _ADR: Address
                                        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                        {
                                            Return (FPCP (0x02, One))
                                        }

                                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                        {
                                            Return (FPCP (0x02, 0x02))
                                        }

                                        If (CondRefOf (\_SB.PC00.RP17.TUID))
                                        {
                                            ADBG (Concatenate ("[dTBT] DTBT SS02 - RP SLOT ", ToHexString (SLOT)))
                                            If ((\_SB.PC00.RP17.TUID <= One))
                                            {
                                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                                {
                                                    ADBG (Concatenate ("[dTBT] DTBT SS02 DSD - RP SLOT ", ToHexString (SLOT)))
                                                    If ((\_SB.PC00.RP17.TUID == Zero))
                                                    {
                                                        Return (Package (0x02)
                                                        {
                                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                                            Package (0x02)
                                                            {
                                                                Package (0x02)
                                                                {
                                                                    "usb4-host-interface", 
                                                                    \_SB.PC00.RP17.PXSX.TBDH.NHI4
                                                                }, 

                                                                Package (0x02)
                                                                {
                                                                    "usb4-port-number", 
                                                                    One
                                                                }
                                                            }
                                                        })
                                                    }
                                                    Else
                                                    {
                                                        Return (Package (0x02)
                                                        {
                                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                                            Package (0x02)
                                                            {
                                                                Package (0x02)
                                                                {
                                                                    "usb4-host-interface", 
                                                                    \_SB.PC00.RP17.PXSX.TBDH.NHI5
                                                                }, 

                                                                Package (0x02)
                                                                {
                                                                    "usb4-port-number", 
                                                                    One
                                                                }
                                                            }
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                Return (Zero)
                            }
                        }
                    }

                    If ((CondRefOf (\_SB.PC00.RP17.TUID) && CondRefOf (\DTRT)))
                    {
                        Device (TBDH)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            If ((\_SB.PC00.RP17.TUID <= One))
                            {
                                If ((\_SB.PC00.RP17.TUID == Zero))
                                {
                                    Device (NHI4)
                                    {
                                        Name (_ADR, Zero)  // _ADR: Address
                                        If (CondRefOf (\DTRT))
                                        {
                                            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _S0W - RP SLOT ", ToHexString (SLOT)))
                                                If ((\DTRT == Zero))
                                                {
                                                    ADBG ("[dTBT] DTBT NHI S0W return 3")
                                                    Return (0x03)
                                                }
                                                Else
                                                {
                                                    ADBG ("[dTBT] DTBT NHI S0W return 4")
                                                    Return (0x04)
                                                }
                                            }

                                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS0 - RP SLOT ", ToHexString (SLOT)))
                                            }

                                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS3 Start - RP SLOT", ToHexString (SLOT)))
                                                If (!(CondRefOf (\RPS0) && CondRefOf (\RPT0)))
                                                {
                                                    ADBG ("[dTBT] dTBT NHI _PS3 End due to RPS# or RPT# not present!")
                                                    Return (Zero)
                                                }

                                                If (CondRefOf (\_SB.PC00.RP17.WAKG))
                                                {
                                                    ADBG (Concatenate ("[dTBT] WAKG = ", ToHexString (\_SB.PC00.RP17.WAKG)))
                                                    If ((\_SB.PC00.RP17.WAKG != Zero))
                                                    {
                                                        ADBG ("[dTBT] Enable Wake")
                                                        \_SB.PC00.RP17.DTWK (Zero)
                                                    }
                                                }

                                                If (CondRefOf (\DTMB))
                                                {
                                                    \DTMB (0x48, Zero, \RPS0, \RPT0)
                                                }

                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS3 End - RP SLOT ", ToHexString (SLOT)))
                                            }

                                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                }
                                Else
                                {
                                    Device (NHI5)
                                    {
                                        Name (_ADR, Zero)  // _ADR: Address
                                        If (CondRefOf (\DTRT))
                                        {
                                            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _S0W - RP SLOT ", ToHexString (SLOT)))
                                                If ((\DTRT == Zero))
                                                {
                                                    ADBG ("[dTBT] DTBT NHI S0W return 3")
                                                    Return (0x03)
                                                }
                                                Else
                                                {
                                                    ADBG ("[dTBT] DTBT NHI S0W return 4")
                                                    Return (0x04)
                                                }
                                            }

                                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS0 - RP SLOT ", ToHexString (SLOT)))
                                            }

                                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS3 Start - RP SLOT", ToHexString (SLOT)))
                                                If (!(CondRefOf (\RPS1) && CondRefOf (\RPT1)))
                                                {
                                                    ADBG ("[dTBT] dTBT NHI _PS3 End due to RPS# or RPT# not present!")
                                                    Return (Zero)
                                                }

                                                If (CondRefOf (\_SB.PC00.RP17.WAKG))
                                                {
                                                    ADBG (Concatenate ("[dTBT] WAKG = ", ToHexString (\_SB.PC00.RP17.WAKG)))
                                                    If ((\_SB.PC00.RP17.WAKG != Zero))
                                                    {
                                                        ADBG ("[dTBT] Enable Wake")
                                                        \_SB.PC00.RP17.DTWK (Zero)
                                                    }
                                                }

                                                If (CondRefOf (\DTMB))
                                                {
                                                    \DTMB (0x48, Zero, \RPS1, \RPT1)
                                                }

                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS3 End - RP SLOT ", ToHexString (SLOT)))
                                            }

                                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        Device (TBP1)
                        {
                            Name (_ADR, 0x00010000)  // _ADR: Address
                            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS1 _S0W - RP SLOT ", ToHexString (SLOT)))
                                If ((\DTRT == Zero))
                                {
                                    ADBG ("[dTBT] DTBT DS1 S0W return 3")
                                    Return (0x03)
                                }
                                Else
                                {
                                    ADBG ("[dTBT] DTBT DS1 S0W return 4")
                                    Return (0x04)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS1 _PS0 - RP SLOT ", ToHexString (SLOT)))
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS1 _PS3 - RP SLOT ", ToHexString (SLOT)))
                            }

                            If ((\_SB.PC00.RP17.TUID <= One))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    ADBG (Concatenate ("[dTBT] dTBT DS1 _DSD - RP SLOT ", ToHexString (SLOT)))
                                    If ((\_SB.PC00.RP17.TUID == Zero))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                            Package (0x02)
                                            {
                                                Package (0x02)
                                                {
                                                    "usb4-host-interface", 
                                                    \_SB.PC00.RP17.PXSX.TBDH.NHI4
                                                }, 

                                                Package (0x02)
                                                {
                                                    "usb4-port-number", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                            Package (0x02)
                                            {
                                                Package (0x02)
                                                {
                                                    "usb4-host-interface", 
                                                    \_SB.PC00.RP17.PXSX.TBDH.NHI5
                                                }, 

                                                Package (0x02)
                                                {
                                                    "usb4-port-number", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Device (TBP3)
                        {
                            Name (_ADR, 0x00030000)  // _ADR: Address
                            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS3 _S0W - RP SLOT ", ToHexString (SLOT)))
                                If ((\DTRT == Zero))
                                {
                                    ADBG ("[dTBT] DTBT DS3 S0W return 3")
                                    Return (0x03)
                                }
                                Else
                                {
                                    ADBG ("[dTBT] DTBT DS3 S0W return 4")
                                    Return (0x04)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS3 _PS0 - RP SLOT ", ToHexString (SLOT)))
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS3 _PS3 - RP SLOT ", ToHexString (SLOT)))
                            }

                            If ((\_SB.PC00.RP17.TUID <= One))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    ADBG (Concatenate ("[dTBT] dTBT DS3 _DSD - RP SLOT ", ToHexString (SLOT)))
                                    If ((\_SB.PC00.RP17.TUID == Zero))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                            Package (0x02)
                                            {
                                                Package (0x02)
                                                {
                                                    "usb4-host-interface", 
                                                    \_SB.PC00.RP17.PXSX.TBDH.NHI4
                                                }, 

                                                Package (0x02)
                                                {
                                                    "usb4-port-number", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                            Package (0x02)
                                            {
                                                Package (0x02)
                                                {
                                                    "usb4-host-interface", 
                                                    \_SB.PC00.RP17.PXSX.TBDH.NHI5
                                                }, 

                                                Package (0x02)
                                                {
                                                    "usb4-port-number", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        If (((DTFS == One) && ((RPS0 == 0x09) || (RPS1 == 0x09))))
        {
            If ((RPT1 == One))
            {
                Scope (\_SB.PC02.RP09.PXSX)
                {
                    Name (TURP, 0x09)
                    Device (TBDU)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                        Device (XHCI)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                            {
                                ADBG (Concatenate ("[dTBT] DTBT XHCI S0W - RP SLOT ", ToHexString (SLOT)))
                                Return (0x04)
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                ADBG (Concatenate ("[dTBT] DTBT XHCI PS0 - RP SLOT ", ToHexString (SLOT)))
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                ADBG (Concatenate ("[dTBT] DTBT XHCI PS3 - RP SLOT ", ToHexString (SLOT)))
                            }

                            Device (RHUB)
                            {
                                Name (_ADR, Zero)  // _ADR: Address
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    ADBG (Concatenate ("[dTBT] DTBT XHCI RHUB S0W return 4 - RP SLOT ", ToHexString (SLOT)))
                                    Return (0x04)
                                }

                                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                                {
                                    ADBG (Concatenate ("[dTBT] DTBT XHCI RHUB PS0 - RP SLOT ", ToHexString (SLOT)))
                                }

                                Method (_PS2, 0, Serialized)  // _PS2: Power State 2
                                {
                                    ADBG (Concatenate ("[dTBT] DTBT XHCI RHUB PS2 - RP SLOT ", ToHexString (SLOT)))
                                }

                                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                                {
                                    ADBG (Concatenate ("[dTBT] DTBT XHCI RHUB PS3 - RP SLOT ", ToHexString (SLOT)))
                                }

                                Method (SLMS, 1, Serialized)
                                {
                                    Local0 = (TURP << 0x02)
                                    Local0 |= One
                                    If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                    {
                                        Return ((TP1D & One))
                                    }
                                    ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                    {
                                        Return ((TP2D & One))
                                    }
                                    ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                    {
                                        Return ((TP3D & One))
                                    }
                                    ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                    {
                                        Return ((TP4D & One))
                                    }
                                    ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                    {
                                        Return ((TP5D & One))
                                    }
                                    ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                    {
                                        Return ((TP6D & One))
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                Method (FPCP, 2, Serialized)
                                {
                                    Local0 = (TURP << 0x02)
                                    Local0 |= One
                                    If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (One, Arg1))
                                    }
                                    ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (0x02, Arg1))
                                    }
                                    ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (0x03, Arg1))
                                    }
                                    ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (0x04, Arg1))
                                    }
                                    ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (0x05, Arg1))
                                    }
                                    ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                    {
                                        Return (\_SB.UBTC.RUCC (0x06, Arg1))
                                    }
                                    ElseIf ((Arg1 == One))
                                    {
                                        Return (TUPC (Zero, Zero))
                                    }
                                    Else
                                    {
                                        Return (TPLD (Zero, Zero))
                                    }
                                }

                                Method (FPSP, 1, Serialized)
                                {
                                    Local0 = (TURP << 0x02)
                                    Local0 |= One
                                    If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                    {
                                        Return (One)
                                    }
                                    ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                    {
                                        Return (One)
                                    }
                                    ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                    {
                                        Return (One)
                                    }
                                    ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                    {
                                        Return (One)
                                    }
                                    ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                    {
                                        Return (One)
                                    }
                                    ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                Method (TPLD, 2, Serialized)
                                {
                                    Name (PCKG, Package (0x01)
                                    {
                                        Buffer (0x10){}
                                    })
                                    CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                                    REV = One
                                    CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                                    VISI = Arg0
                                    CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                                    GPOS = Arg1
                                    CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                                    SHAP = One
                                    CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                                    WID = 0x08
                                    CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                                    HGT = 0x03
                                    Return (PCKG) /* \_SB_.PC02.RP09.PXSX.TBDU.XHCI.RHUB.TPLD.PCKG */
                                }

                                Method (TUPC, 2, Serialized)
                                {
                                    Name (PCKG, Package (0x04)
                                    {
                                        One, 
                                        Zero, 
                                        Zero, 
                                        Zero
                                    })
                                    PCKG [Zero] = Arg0
                                    PCKG [One] = Arg1
                                    Return (PCKG) /* \_SB_.PC02.RP09.PXSX.TBDU.XHCI.RHUB.TUPC.PCKG */
                                }

                                If ((FPSP (One) == One))
                                {
                                    Device (HS01)
                                    {
                                        Name (_ADR, One)  // _ADR: Address
                                        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                        {
                                            If ((SLMS (One) == Zero))
                                            {
                                                Return (FPCP (One, One))
                                            }
                                            Else
                                            {
                                                Return (TUPC (Zero, Zero))
                                            }
                                        }

                                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                        {
                                            If ((SLMS (One) == Zero))
                                            {
                                                Return (FPCP (One, 0x02))
                                            }
                                            Else
                                            {
                                                Return (TPLD (Zero, Zero))
                                            }
                                        }
                                    }
                                }

                                If ((FPSP (0x02) == One))
                                {
                                    Device (HS02)
                                    {
                                        Name (_ADR, 0x02)  // _ADR: Address
                                        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                        {
                                            If ((SLMS (0x02) == Zero))
                                            {
                                                Return (FPCP (0x02, One))
                                            }
                                            Else
                                            {
                                                Return (TUPC (Zero, Zero))
                                            }
                                        }

                                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                        {
                                            If ((SLMS (0x02) == Zero))
                                            {
                                                Return (FPCP (0x02, 0x02))
                                            }
                                            Else
                                            {
                                                Return (TPLD (Zero, Zero))
                                            }
                                        }
                                    }
                                }

                                If ((FPSP (One) == One))
                                {
                                    Device (SS01)
                                    {
                                        Name (_ADR, 0x03)  // _ADR: Address
                                        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                        {
                                            Return (FPCP (One, One))
                                        }

                                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                        {
                                            Return (FPCP (One, 0x02))
                                        }

                                        If (CondRefOf (\_SB.PC02.RP09.TUID))
                                        {
                                            ADBG (Concatenate ("[dTBT] DTBT SS01 - RP SLOT ", ToHexString (SLOT)))
                                            If ((\_SB.PC02.RP09.TUID <= One))
                                            {
                                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                                {
                                                    ADBG (Concatenate ("[dTBT] DTBT SS01 DSD - RP SLOT ", ToHexString (SLOT)))
                                                    If ((\_SB.PC02.RP09.TUID == Zero))
                                                    {
                                                        Return (Package (0x02)
                                                        {
                                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                                            Package (0x02)
                                                            {
                                                                Package (0x02)
                                                                {
                                                                    "usb4-host-interface", 
                                                                    \_SB.PC02.RP09.PXSX.TBDH.NHI4
                                                                }, 

                                                                Package (0x02)
                                                                {
                                                                    "usb4-port-number", 
                                                                    Zero
                                                                }
                                                            }
                                                        })
                                                    }
                                                    Else
                                                    {
                                                        Return (Package (0x02)
                                                        {
                                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                                            Package (0x02)
                                                            {
                                                                Package (0x02)
                                                                {
                                                                    "usb4-host-interface", 
                                                                    \_SB.PC02.RP09.PXSX.TBDH.NHI5
                                                                }, 

                                                                Package (0x02)
                                                                {
                                                                    "usb4-port-number", 
                                                                    Zero
                                                                }
                                                            }
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                If ((FPSP (0x02) == One))
                                {
                                    Device (SS02)
                                    {
                                        Name (_ADR, 0x04)  // _ADR: Address
                                        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                        {
                                            Return (FPCP (0x02, One))
                                        }

                                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                        {
                                            Return (FPCP (0x02, 0x02))
                                        }

                                        If (CondRefOf (\_SB.PC02.RP09.TUID))
                                        {
                                            ADBG (Concatenate ("[dTBT] DTBT SS02 - RP SLOT ", ToHexString (SLOT)))
                                            If ((\_SB.PC02.RP09.TUID <= One))
                                            {
                                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                                {
                                                    ADBG (Concatenate ("[dTBT] DTBT SS02 DSD - RP SLOT ", ToHexString (SLOT)))
                                                    If ((\_SB.PC02.RP09.TUID == Zero))
                                                    {
                                                        Return (Package (0x02)
                                                        {
                                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                                            Package (0x02)
                                                            {
                                                                Package (0x02)
                                                                {
                                                                    "usb4-host-interface", 
                                                                    \_SB.PC02.RP09.PXSX.TBDH.NHI4
                                                                }, 

                                                                Package (0x02)
                                                                {
                                                                    "usb4-port-number", 
                                                                    One
                                                                }
                                                            }
                                                        })
                                                    }
                                                    Else
                                                    {
                                                        Return (Package (0x02)
                                                        {
                                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                                            Package (0x02)
                                                            {
                                                                Package (0x02)
                                                                {
                                                                    "usb4-host-interface", 
                                                                    \_SB.PC02.RP09.PXSX.TBDH.NHI5
                                                                }, 

                                                                Package (0x02)
                                                                {
                                                                    "usb4-port-number", 
                                                                    One
                                                                }
                                                            }
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                            {
                                Return (Zero)
                            }
                        }
                    }

                    If ((CondRefOf (\_SB.PC02.RP09.TUID) && CondRefOf (\DTRT)))
                    {
                        Device (TBDH)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            If ((\_SB.PC02.RP09.TUID <= One))
                            {
                                If ((\_SB.PC02.RP09.TUID == Zero))
                                {
                                    Device (NHI4)
                                    {
                                        Name (_ADR, Zero)  // _ADR: Address
                                        If (CondRefOf (\DTRT))
                                        {
                                            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _S0W - RP SLOT ", ToHexString (SLOT)))
                                                If ((\DTRT == Zero))
                                                {
                                                    ADBG ("[dTBT] DTBT NHI S0W return 3")
                                                    Return (0x03)
                                                }
                                                Else
                                                {
                                                    ADBG ("[dTBT] DTBT NHI S0W return 4")
                                                    Return (0x04)
                                                }
                                            }

                                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS0 - RP SLOT ", ToHexString (SLOT)))
                                            }

                                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS3 Start - RP SLOT", ToHexString (SLOT)))
                                                If (!(CondRefOf (\RPS0) && CondRefOf (\RPT0)))
                                                {
                                                    ADBG ("[dTBT] dTBT NHI _PS3 End due to RPS# or RPT# not present!")
                                                    Return (Zero)
                                                }

                                                If (CondRefOf (\_SB.PC02.RP09.WAKG))
                                                {
                                                    ADBG (Concatenate ("[dTBT] WAKG = ", ToHexString (\_SB.PC02.RP09.WAKG)))
                                                    If ((\_SB.PC02.RP09.WAKG != Zero))
                                                    {
                                                        ADBG ("[dTBT] Enable Wake")
                                                        \_SB.PC02.RP09.DTWK (Zero)
                                                    }
                                                }

                                                If (CondRefOf (\DTMB))
                                                {
                                                    \DTMB (0x48, Zero, \RPS0, \RPT0)
                                                }

                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS3 End - RP SLOT ", ToHexString (SLOT)))
                                            }

                                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                }
                                Else
                                {
                                    Device (NHI5)
                                    {
                                        Name (_ADR, Zero)  // _ADR: Address
                                        If (CondRefOf (\DTRT))
                                        {
                                            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _S0W - RP SLOT ", ToHexString (SLOT)))
                                                If ((\DTRT == Zero))
                                                {
                                                    ADBG ("[dTBT] DTBT NHI S0W return 3")
                                                    Return (0x03)
                                                }
                                                Else
                                                {
                                                    ADBG ("[dTBT] DTBT NHI S0W return 4")
                                                    Return (0x04)
                                                }
                                            }

                                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS0 - RP SLOT ", ToHexString (SLOT)))
                                            }

                                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                                            {
                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS3 Start - RP SLOT", ToHexString (SLOT)))
                                                If (!(CondRefOf (\RPS1) && CondRefOf (\RPT1)))
                                                {
                                                    ADBG ("[dTBT] dTBT NHI _PS3 End due to RPS# or RPT# not present!")
                                                    Return (Zero)
                                                }

                                                If (CondRefOf (\_SB.PC02.RP09.WAKG))
                                                {
                                                    ADBG (Concatenate ("[dTBT] WAKG = ", ToHexString (\_SB.PC02.RP09.WAKG)))
                                                    If ((\_SB.PC02.RP09.WAKG != Zero))
                                                    {
                                                        ADBG ("[dTBT] Enable Wake")
                                                        \_SB.PC02.RP09.DTWK (Zero)
                                                    }
                                                }

                                                If (CondRefOf (\DTMB))
                                                {
                                                    \DTMB (0x48, Zero, \RPS1, \RPT1)
                                                }

                                                ADBG (Concatenate ("[dTBT] dTBT NHI _PS3 End - RP SLOT ", ToHexString (SLOT)))
                                            }

                                            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        Device (TBP1)
                        {
                            Name (_ADR, 0x00010000)  // _ADR: Address
                            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS1 _S0W - RP SLOT ", ToHexString (SLOT)))
                                If ((\DTRT == Zero))
                                {
                                    ADBG ("[dTBT] DTBT DS1 S0W return 3")
                                    Return (0x03)
                                }
                                Else
                                {
                                    ADBG ("[dTBT] DTBT DS1 S0W return 4")
                                    Return (0x04)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS1 _PS0 - RP SLOT ", ToHexString (SLOT)))
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS1 _PS3 - RP SLOT ", ToHexString (SLOT)))
                            }

                            If ((\_SB.PC02.RP09.TUID <= One))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    ADBG (Concatenate ("[dTBT] dTBT DS1 _DSD - RP SLOT ", ToHexString (SLOT)))
                                    If ((\_SB.PC02.RP09.TUID == Zero))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                            Package (0x02)
                                            {
                                                Package (0x02)
                                                {
                                                    "usb4-host-interface", 
                                                    \_SB.PC02.RP09.PXSX.TBDH.NHI4
                                                }, 

                                                Package (0x02)
                                                {
                                                    "usb4-port-number", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                            Package (0x02)
                                            {
                                                Package (0x02)
                                                {
                                                    "usb4-host-interface", 
                                                    \_SB.PC02.RP09.PXSX.TBDH.NHI5
                                                }, 

                                                Package (0x02)
                                                {
                                                    "usb4-port-number", 
                                                    Zero
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }

                        Device (TBP3)
                        {
                            Name (_ADR, 0x00030000)  // _ADR: Address
                            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS3 _S0W - RP SLOT ", ToHexString (SLOT)))
                                If ((\DTRT == Zero))
                                {
                                    ADBG ("[dTBT] DTBT DS3 S0W return 3")
                                    Return (0x03)
                                }
                                Else
                                {
                                    ADBG ("[dTBT] DTBT DS3 S0W return 4")
                                    Return (0x04)
                                }
                            }

                            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS3 _PS0 - RP SLOT ", ToHexString (SLOT)))
                            }

                            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                            {
                                ADBG (Concatenate ("[dTBT] dTBT DS3 _PS3 - RP SLOT ", ToHexString (SLOT)))
                            }

                            If ((\_SB.PC02.RP09.TUID <= One))
                            {
                                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                                {
                                    ADBG (Concatenate ("[dTBT] dTBT DS3 _DSD - RP SLOT ", ToHexString (SLOT)))
                                    If ((\_SB.PC02.RP09.TUID == Zero))
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                            Package (0x02)
                                            {
                                                Package (0x02)
                                                {
                                                    "usb4-host-interface", 
                                                    \_SB.PC02.RP09.PXSX.TBDH.NHI4
                                                }, 

                                                Package (0x02)
                                                {
                                                    "usb4-port-number", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                    Else
                                    {
                                        Return (Package (0x02)
                                        {
                                            ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                            Package (0x02)
                                            {
                                                Package (0x02)
                                                {
                                                    "usb4-host-interface", 
                                                    \_SB.PC02.RP09.PXSX.TBDH.NHI5
                                                }, 

                                                Package (0x02)
                                                {
                                                    "usb4-port-number", 
                                                    One
                                                }
                                            }
                                        })
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}



SSDT16
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Ist", 0x00003000)
{
    External (_SB_.CPPC, FieldUnitObj)
    External (_SB_.OSCP, IntObj)
    External (_SB_.PR00, DeviceObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PR00)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.CPPC) /* External reference */
        }

        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((\_SB.OSCP & 0x0400))
            {
                Return (TPSS) /* \_SB_.PR00.TPSS */
            }
            Else
            {
                Return (LPSS) /* \_SB_.PR00.LPSS */
            }
        }

        Name (LPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000BB9, 
                0x00006D60, 
                0x0000000A, 
                0x0000000A, 
                0x00003000, 
                0x00003000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x00006D60, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00006369, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A28, 
                0x000059D2, 
                0x0000000A, 
                0x0000000A, 
                0x00001A00, 
                0x00001A00
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x000051A2, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x00004CA3, 
                0x0000000A, 
                0x0000000A, 
                0x00001700, 
                0x00001700
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x000044EC, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00003C8F, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x00003488, 
                0x0000000A, 
                0x0000000A, 
                0x00001100, 
                0x00001100
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00002992, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x00002662, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x00001C5A, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00001971, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x000015C5, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }, 

            Package (0x06)
            {
                0x00000258, 
                0x00001050, 
                0x0000000A, 
                0x0000000A, 
                0x00000600, 
                0x00000600
            }, 

            Package (0x06)
            {
                0x00000190, 
                0x00000A53, 
                0x0000000A, 
                0x0000000A, 
                0x00000400, 
                0x00000400
            }
        })
        Name (TPSS, Package (0x1C)
        {
            Package (0x06)
            {
                0x00000BB9, 
                0x00006D60, 
                0x0000000A, 
                0x0000000A, 
                0x00003000, 
                0x00003000
            }, 

            Package (0x06)
            {
                0x00000BB8, 
                0x00006D60, 
                0x0000000A, 
                0x0000000A, 
                0x00001E00, 
                0x00001E00
            }, 

            Package (0x06)
            {
                0x00000B54, 
                0x000067CE, 
                0x0000000A, 
                0x0000000A, 
                0x00001D00, 
                0x00001D00
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00006369, 
                0x0000000A, 
                0x0000000A, 
                0x00001C00, 
                0x00001C00
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00005F19, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x00000A28, 
                0x000059D2, 
                0x0000000A, 
                0x0000000A, 
                0x00001A00, 
                0x00001A00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000055AE, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x000051A2, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x00004CA3, 
                0x0000000A, 
                0x0000000A, 
                0x00001700, 
                0x00001700
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000048BE, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x000044EC, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00004034, 
                0x0000000A, 
                0x0000000A, 
                0x00001400, 
                0x00001400
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00003C8F, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000038FA, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x00003488, 
                0x0000000A, 
                0x0000000A, 
                0x00001100, 
                0x00001100
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x0000311B, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00002DC1, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00002992, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x00002662, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00002341, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x0000044C, 
                0x00001F54, 
                0x0000000A, 
                0x0000000A, 
                0x00000B00, 
                0x00000B00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x00001C5A, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00001971, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x000015C5, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }, 

            Package (0x06)
            {
                0x000002BC, 
                0x00001302, 
                0x0000000A, 
                0x0000000A, 
                0x00000700, 
                0x00000700
            }, 

            Package (0x06)
            {
                0x00000258, 
                0x00001050, 
                0x0000000A, 
                0x0000000A, 
                0x00000600, 
                0x00000600
            }, 

            Package (0x06)
            {
                0x000001F4, 
                0x00000CE1, 
                0x0000000A, 
                0x0000000A, 
                0x00000500, 
                0x00000500
            }, 

            Package (0x06)
            {
                0x00000190, 
                0x00000A53, 
                0x0000000A, 
                0x0000000A, 
                0x00000400, 
                0x00000400
            }
        })
    }
}



SSDT17
------
DefinitionBlock ("", "SSDT", 2, "MSI_NB", "I2Pm_Rvp", 0x00001000)
{
    External (_SB_.PC00.I2C0, DeviceObj)
    External (_SB_.PC00.I2C1, DeviceObj)
    External (_SB_.PC00.I2C3, DeviceObj)
    External (_SB_.PC00.I2C4, DeviceObj)
    External (_SB_.PC00.I2C5, DeviceObj)
    External (POME, UnknownObj)

    Scope (\_SB.PC00.I2C3)
    {
        Name (PACT, 0x07)
        Name (PABN, 0x33)
        Name (PAS1, Package (0x09)
        {
            0x18, 
            0x1E, 
            0x11, 
            0x15, 
            0x13, 
            0x12, 
            0x16, 
            0xFF, 
            0xFF
        })
        Name (PMP0, Package (0x08)
        {
            Package (0x08)
            {
                "CPU_VCCCORE1                   ", 
                0x0002, 
                "CPU_VCCCORE2                   ", 
                0x0002, 
                "CPU_VCCCORE3                   ", 
                0x0002, 
                "CPU_VCCCORE4                   ", 
                0x0002
            }, 

            Package (0x08)
            {
                "CPU_VCCGT1                     ", 
                0x0002, 
                "CPU_VCCGT2                     ", 
                0x0002, 
                "                               ", 
                0x0000, 
                "CPU_VCCSA                      ", 
                0x0002
            }, 

            Package (0x08)
            {
                "CPU_VNNAON                     ", 
                0x0001, 
                "CAMERA_V1P8S1                  ", 
                0x000A, 
                "CAMERA_V3P3S1                  ", 
                0x000A, 
                "CONNECTIVITY_WLAN              ", 
                0x0005
            }, 

            Package (0x08)
            {
                "VR_CPU_INPUT                   ", 
                0x0002, 
                "STORAGE_PCH_SSD1               ", 
                0x0005, 
                "SYSTEM_VBATA                   ", 
                0x0002, 
                "STORAGE_CPU_SSD4               ", 
                0x0005
            }, 

            Package (0x08)
            {
                "CPU_VCC1P8                     ", 
                0x000A, 
                "CPU_VCCIO                      ", 
                0x0004, 
                "CPU_VDD2                       ", 
                0x0002, 
                "                               ", 
                0x0000
            }, 

            Package (0x08)
            {
                "CPU_VNNAON_QUIET_1             ", 
                0x000A, 
                "CPU_VNNAON_QUIET_2             ", 
                0x000A, 
                "CPU_VCC1P8_QUIET_1_R           ", 
                0x000A, 
                "CPU_VCC1P8_QUIET_2             ", 
                0x000A
            }, 

            Package (0x08)
            {
                "CPU_VCC_3P3                    ", 
                0x000A, 
                "CPU_VCC1P5_RT                  ", 
                0x000A, 
                "                               ", 
                0x0000, 
                "                               ", 
                0x0000
            }, 

            Package (0x08)
            {
                "                               ", 
                0xFFFF, 
                "                               ", 
                0xFFFF, 
                "                               ", 
                0xFFFF, 
                "                               ", 
                0xFFFF
            }
        })
        Name (PMP1, Package (0x08)
        {
            Package (0x04)
            {
                0x07D0, 
                0x07D0, 
                0x07D0, 
                0x07D0
            }, 

            Package (0x04)
            {
                0x07D0, 
                0x07D0, 
                0x0000, 
                0x07D0
            }, 

            Package (0x04)
            {
                0x03E8, 
                0x2710, 
                0x2710, 
                0x1388
            }, 

            Package (0x04)
            {
                0x07D0, 
                0x1388, 
                0x07D0, 
                0x1388
            }, 

            Package (0x04)
            {
                0x2710, 
                0x0FA0, 
                0x07D0, 
                0x0000
            }, 

            Package (0x04)
            {
                0x2710, 
                0x2710, 
                0x2710, 
                0x2710
            }, 

            Package (0x04)
            {
                0x2710, 
                0x2710, 
                0x0000, 
                0x0000
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }
        })
        Device (PA01)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (POME)
                {
                    If ((PACT >= One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2Cx",
                        0x00, ResourceConsumer, _Y00, Exclusive,
                        )
                })
                CreateByteField (RBUF, 0x1F, PAST)
                CreateWordField (RBUF, \_SB.PC00.I2C3.PA01._CRS._Y00._ADR, PAAD)  // _ADR: Address
                PAST = PABN /* \_SB_.PC00.I2C3.PABN */
                PAAD = DerefOf (PAS1 [Zero])
                Return (RBUF) /* \_SB_.PC00.I2C3.PA01._CRS.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 != ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09") /* Unknown UUID */))
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                             // .
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Return (DerefOf (PMP0 [Zero]))
                    }
                    Case (0x02)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Return (DerefOf (PMP1 [Zero]))
                    }
                    Case (0x03)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3) /* \_SB_.PC00.I2C3.PA01._DSM.BUF3 */
                    }
                    Case (0x04)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4) /* \_SB_.PC00.I2C3.PA01._DSM.BUF4 */
                    }
                    Case (0x05)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5) /* \_SB_.PC00.I2C3.PA01._DSM.BUF5 */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6) /* \_SB_.PC00.I2C3.PA01._DSM.BUF6 */
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (PA02)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (POME)
                {
                    If ((PACT >= 0x02))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2Cx",
                        0x00, ResourceConsumer, _Y01, Exclusive,
                        )
                })
                CreateByteField (RBUF, 0x1F, PAST)
                CreateWordField (RBUF, \_SB.PC00.I2C3.PA02._CRS._Y01._ADR, PAAD)  // _ADR: Address
                PAST = PABN /* \_SB_.PC00.I2C3.PABN */
                PAAD = DerefOf (PAS1 [One])
                Return (RBUF) /* \_SB_.PC00.I2C3.PA02._CRS.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 != ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09") /* Unknown UUID */))
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                             // .
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Return (DerefOf (PMP0 [One]))
                    }
                    Case (0x02)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Return (DerefOf (PMP1 [One]))
                    }
                    Case (0x03)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3) /* \_SB_.PC00.I2C3.PA02._DSM.BUF3 */
                    }
                    Case (0x04)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4) /* \_SB_.PC00.I2C3.PA02._DSM.BUF4 */
                    }
                    Case (0x05)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5) /* \_SB_.PC00.I2C3.PA02._DSM.BUF5 */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6) /* \_SB_.PC00.I2C3.PA02._DSM.BUF6 */
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (PA03)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (POME)
                {
                    If ((PACT >= 0x03))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2Cx",
                        0x00, ResourceConsumer, _Y02, Exclusive,
                        )
                })
                CreateByteField (RBUF, 0x1F, PAST)
                CreateWordField (RBUF, \_SB.PC00.I2C3.PA03._CRS._Y02._ADR, PAAD)  // _ADR: Address
                PAST = PABN /* \_SB_.PC00.I2C3.PABN */
                PAAD = DerefOf (PAS1 [0x02])
                Return (RBUF) /* \_SB_.PC00.I2C3.PA03._CRS.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 != ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09") /* Unknown UUID */))
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                             // .
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Return (DerefOf (PMP0 [0x02]))
                    }
                    Case (0x02)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Return (DerefOf (PMP1 [0x02]))
                    }
                    Case (0x03)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3) /* \_SB_.PC00.I2C3.PA03._DSM.BUF3 */
                    }
                    Case (0x04)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4) /* \_SB_.PC00.I2C3.PA03._DSM.BUF4 */
                    }
                    Case (0x05)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5) /* \_SB_.PC00.I2C3.PA03._DSM.BUF5 */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6) /* \_SB_.PC00.I2C3.PA03._DSM.BUF6 */
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (PA04)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (POME)
                {
                    If ((PACT >= 0x04))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2Cx",
                        0x00, ResourceConsumer, _Y03, Exclusive,
                        )
                })
                CreateByteField (RBUF, 0x1F, PAST)
                CreateWordField (RBUF, \_SB.PC00.I2C3.PA04._CRS._Y03._ADR, PAAD)  // _ADR: Address
                PAST = PABN /* \_SB_.PC00.I2C3.PABN */
                PAAD = DerefOf (PAS1 [0x03])
                Return (RBUF) /* \_SB_.PC00.I2C3.PA04._CRS.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 != ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09") /* Unknown UUID */))
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                             // .
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Return (DerefOf (PMP0 [0x03]))
                    }
                    Case (0x02)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Return (DerefOf (PMP1 [0x03]))
                    }
                    Case (0x03)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3) /* \_SB_.PC00.I2C3.PA04._DSM.BUF3 */
                    }
                    Case (0x04)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4) /* \_SB_.PC00.I2C3.PA04._DSM.BUF4 */
                    }
                    Case (0x05)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5) /* \_SB_.PC00.I2C3.PA04._DSM.BUF5 */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6) /* \_SB_.PC00.I2C3.PA04._DSM.BUF6 */
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (PA05)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (POME)
                {
                    If ((PACT >= 0x05))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2Cx",
                        0x00, ResourceConsumer, _Y04, Exclusive,
                        )
                })
                CreateByteField (RBUF, 0x1F, PAST)
                CreateWordField (RBUF, \_SB.PC00.I2C3.PA05._CRS._Y04._ADR, PAAD)  // _ADR: Address
                PAST = PABN /* \_SB_.PC00.I2C3.PABN */
                PAAD = DerefOf (PAS1 [0x04])
                Return (RBUF) /* \_SB_.PC00.I2C3.PA05._CRS.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 != ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09") /* Unknown UUID */))
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                             // .
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Return (DerefOf (PMP0 [0x04]))
                    }
                    Case (0x02)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Return (DerefOf (PMP1 [0x04]))
                    }
                    Case (0x03)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3) /* \_SB_.PC00.I2C3.PA05._DSM.BUF3 */
                    }
                    Case (0x04)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4) /* \_SB_.PC00.I2C3.PA05._DSM.BUF4 */
                    }
                    Case (0x05)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5) /* \_SB_.PC00.I2C3.PA05._DSM.BUF5 */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6) /* \_SB_.PC00.I2C3.PA05._DSM.BUF6 */
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (PA06)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (POME)
                {
                    If ((PACT >= 0x06))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2Cx",
                        0x00, ResourceConsumer, _Y05, Exclusive,
                        )
                })
                CreateByteField (RBUF, 0x1F, PAST)
                CreateWordField (RBUF, \_SB.PC00.I2C3.PA06._CRS._Y05._ADR, PAAD)  // _ADR: Address
                PAST = PABN /* \_SB_.PC00.I2C3.PABN */
                PAAD = DerefOf (PAS1 [0x05])
                Return (RBUF) /* \_SB_.PC00.I2C3.PA06._CRS.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 != ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09") /* Unknown UUID */))
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                             // .
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Return (DerefOf (PMP0 [0x05]))
                    }
                    Case (0x02)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Return (DerefOf (PMP1 [0x05]))
                    }
                    Case (0x03)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3) /* \_SB_.PC00.I2C3.PA06._DSM.BUF3 */
                    }
                    Case (0x04)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4) /* \_SB_.PC00.I2C3.PA06._DSM.BUF4 */
                    }
                    Case (0x05)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5) /* \_SB_.PC00.I2C3.PA06._DSM.BUF5 */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6) /* \_SB_.PC00.I2C3.PA06._DSM.BUF6 */
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (PA07)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (POME)
                {
                    If ((PACT >= 0x07))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2Cx",
                        0x00, ResourceConsumer, _Y06, Exclusive,
                        )
                })
                CreateByteField (RBUF, 0x1F, PAST)
                CreateWordField (RBUF, \_SB.PC00.I2C3.PA07._CRS._Y06._ADR, PAAD)  // _ADR: Address
                PAST = PABN /* \_SB_.PC00.I2C3.PABN */
                PAAD = DerefOf (PAS1 [0x06])
                Return (RBUF) /* \_SB_.PC00.I2C3.PA07._CRS.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 != ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09") /* Unknown UUID */))
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                             // .
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Return (DerefOf (PMP0 [0x06]))
                    }
                    Case (0x02)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Return (DerefOf (PMP1 [0x06]))
                    }
                    Case (0x03)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3) /* \_SB_.PC00.I2C3.PA07._DSM.BUF3 */
                    }
                    Case (0x04)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4) /* \_SB_.PC00.I2C3.PA07._DSM.BUF4 */
                    }
                    Case (0x05)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5) /* \_SB_.PC00.I2C3.PA07._DSM.BUF5 */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6) /* \_SB_.PC00.I2C3.PA07._DSM.BUF6 */
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (PA08)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (POME)
                {
                    If ((PACT >= 0x08))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2Cx",
                        0x00, ResourceConsumer, _Y07, Exclusive,
                        )
                })
                CreateByteField (RBUF, 0x1F, PAST)
                CreateWordField (RBUF, \_SB.PC00.I2C3.PA08._CRS._Y07._ADR, PAAD)  // _ADR: Address
                PAST = PABN /* \_SB_.PC00.I2C3.PABN */
                PAAD = DerefOf (PAS1 [0x07])
                Return (RBUF) /* \_SB_.PC00.I2C3.PA08._CRS.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 != ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09") /* Unknown UUID */))
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                             // .
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Return (DerefOf (PMP0 [0x07]))
                    }
                    Case (0x02)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Return (DerefOf (PMP1 [0x07]))
                    }
                    Case (0x03)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3) /* \_SB_.PC00.I2C3.PA08._DSM.BUF3 */
                    }
                    Case (0x04)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4) /* \_SB_.PC00.I2C3.PA08._DSM.BUF4 */
                    }
                    Case (0x05)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5) /* \_SB_.PC00.I2C3.PA08._DSM.BUF5 */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6) /* \_SB_.PC00.I2C3.PA08._DSM.BUF6 */
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



SSDT18
------
DefinitionBlock ("", "SSDT", 2, "INTEL ", "TcssSsdt", 0x00001000)
{
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.GFX0, DeviceObj)
    External (_SB_.PC00.GFX0.GFPS, MethodObj)    // 0 Arguments
    External (_SB_.PC00.GMHB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TDM0.SCME, UnknownObj)
    External (_SB_.PC00.TDM1.SCME, UnknownObj)
    External (ADBG, MethodObj)    // 1 Arguments
    External (CSFR, UnknownObj)
    External (DME0, UnknownObj)
    External (DME1, UnknownObj)
    External (ECR1, UnknownObj)
    External (GP1E, IntObj)
    External (GPRW, MethodObj)    // 2 Arguments
    External (IMRY, UnknownObj)
    External (IOMB, UnknownObj)
    External (ITM0, UnknownObj)
    External (ITM1, UnknownObj)
    External (LTE0, UnknownObj)
    External (LTE1, UnknownObj)
    External (LTE2, UnknownObj)
    External (LTE3, UnknownObj)
    External (OTHC, UnknownObj)
    External (P2PS, UnknownObj)
    External (PCIC, MethodObj)    // 1 Arguments
    External (PCID, MethodObj)    // 4 Arguments
    External (PICM, UnknownObj)
    External (PNS0, UnknownObj)
    External (PNS1, UnknownObj)
    External (PNS2, UnknownObj)
    External (PNS3, UnknownObj)
    External (PSL0, UnknownObj)
    External (PSL1, UnknownObj)
    External (PSL2, UnknownObj)
    External (PSL3, UnknownObj)
    External (REGO, UnknownObj)
    External (RPCC, UnknownObj)
    External (RTBM, UnknownObj)
    External (TCDS, UnknownObj)
    External (TCIR, UnknownObj)
    External (TCIT, UnknownObj)
    External (TDCE, UnknownObj)
    External (THCE, UnknownObj)
    External (TIVS, UnknownObj)
    External (TPA0, UnknownObj)
    External (TPA1, UnknownObj)
    External (TPA2, UnknownObj)
    External (TPA3, UnknownObj)
    External (TRE0, UnknownObj)
    External (TRE1, UnknownObj)
    External (TRE2, UnknownObj)
    External (TRE3, UnknownObj)
    External (TRTD, UnknownObj)
    External (U4SE, IntObj)
    External (XDAT, MethodObj)    // 0 Arguments

    Name (ITNB, 0x658F7000)
    Name (ITNL, 0x0014)
    OperationRegion (ITNV, SystemMemory, ITNB, ITNL)
    Field (ITNV, AnyAcc, Lock, Preserve)
    {
        ITSP,   8, 
        IDM0,   8, 
        IDM1,   8, 
        ITCP,   8, 
        IT0E,   8, 
        IT1E,   8, 
        IT2E,   8, 
        IT3E,   8, 
        IORB,   8, 
        ITRT,   8, 
        ITRE,   16, 
        ITIM,   8, 
        ITFP,   16, 
        ITCT,   16, 
        ITVD,   8, 
        PLAT,   16
    }

    Scope (\_SB)
    {
        Name (C2PW, Zero)
        Method (C2PM, 4, Serialized)
        {
            Switch (ToInteger (Arg3))
            {
                Case (Zero)
                {
                    Local0 = "Tcss iTbt Pcie 0 RP 0"
                }
                Case (One)
                {
                    Local0 = "Tcss iTbt Pcie 0 RP 1"
                }
                Case (0x02)
                {
                    Local0 = "Tcss iTbt Pcie 0 RP 2"
                }
                Case (0x03)
                {
                    Local0 = "Tcss iTbt Pcie 0 RP 3"
                }
                Case (0x04)
                {
                    Local0 = "Tcss xHci"
                }
                Case (0x05)
                {
                    Local0 = "Tcss xDci"
                }
                Case (0x06)
                {
                    Local0 = "Tcss Dma 0"
                }
                Case (0x07)
                {
                    Local0 = "Tcss Dma 1"
                }
                Case (0x08)
                {
                    Local0 = "Tcss iTbt Pcie 1 RP 0"
                }
                Case (0x09)
                {
                    Local0 = "Tcss iTbt Pcie 1 RP 1"
                }
                Case (0x0A)
                {
                    Local0 = "Tcss iTbt Pcie 1 RP 2"
                }
                Case (0x0B)
                {
                    Local0 = "Tcss iTbt Pcie 1 RP 3"
                }
                Default
                {
                    Return (Zero)
                }

            }

            Local1 = Zero
            Local1 = (One << ToInteger (Arg3))
            ADBG (Concatenate ("Local1 = ", ToHexString (Local1)))
            ADBG (Concatenate ("Before CPU to PCH Wake capability configuration Start from ", Local0))
            ADBG (Concatenate (Local0, Concatenate (" Cpu To Pch Wake Value = ", ToHexString (C2PW))))
            ADBG (Concatenate ("C2PM ", Local0))
            If ((Arg0 && Arg1))
            {
                If (((C2PW & Local1) == Zero))
                {
                    C2PW |= Local1
                }

                ADBG (Concatenate (Local0, " Sx EnWak"))
            }
            ElseIf ((Arg0 || Arg2))
            {
                If (((C2PW & Local1) == Zero))
                {
                    C2PW |= Local1
                }

                ADBG (Concatenate (Local0, " D3 En Wak"))
            }
            Else
            {
                If (((C2PW & Local1) != Zero))
                {
                    C2PW &= ~Local1
                }

                ADBG (Concatenate (Local0, " DisWak"))
            }

            ADBG (Concatenate ("After CPU to PCH Wake capability configuration End from ", Local0))
            ADBG (Concatenate (Local0, Concatenate (" Cpu To Pch Wake Value = ", ToHexString (C2PW))))
            Local0 = Zero
            Return (Local0)
        }

        Method (TCWK, 1, NotSerialized)
        {
            If (((Arg0 == 0x03) || (Arg0 == 0x04)))
            {
                If ((\_SB.PC00.TRP0.VDID != 0xFFFFFFFF))
                {
                    Notify (\_SB.PC00.TRP0, Zero) // Bus Check
                }

                If ((\_SB.PC00.TRP1.VDID != 0xFFFFFFFF))
                {
                    Notify (\_SB.PC00.TRP1, Zero) // Bus Check
                }

                If ((\_SB.PC00.TRP2.VDID != 0xFFFFFFFF))
                {
                    Notify (\_SB.PC00.TRP2, Zero) // Bus Check
                }

                If ((\_SB.PC00.TRP3.VDID != 0xFFFFFFFF))
                {
                    Notify (\_SB.PC00.TRP3, Zero) // Bus Check
                }
            }
        }
    }

    Scope (\_SB.PC00)
    {
        OperationRegion (MBAR, SystemMemory, (\_SB.PC00.GMHB () + REGO), 0x1000)
        Field (MBAR, ByteAcc, NoLock, Preserve)
        {
            RBAR,   64
        }

        OperationRegion (PBAR, SystemMemory, (\_SB.PC00.GMHB () + 0x5DA0), 0x08)
        Field (PBAR, DWordAcc, NoLock, Preserve)
        {
            PMBD,   32, 
            PMBC,   8, 
            PSCM,   8, 
                ,   15, 
            PMBR,   1
        }

        Method (PMBY, 0, NotSerialized)
        {
            Local0 = Zero
            While ((PMBR && (Local0 < 0x03E8)))
            {
                Local0++
                Stall (One)
            }

            If ((Local0 == 0x03E8))
            {
                Return (0xFF)
            }

            Return (Zero)
        }

        OperationRegion (IOMR, SystemMemory, IOMB, 0x0100)
        Field (IOMR, DWordAcc, NoLock, Preserve)
        {
            Offset (0x40), 
                ,   15, 
            TD3C,   1, 
            TACK,   1, 
            DPOF,   1, 
                ,   2, 
            Offset (0x44), 
            DPHD,   1, 
            Offset (0x48), 
                ,   12, 
            INDP,   1, 
            Offset (0x70), 
            IMCD,   32, 
            IMDA,   32
        }

        Name (IGFG, Zero)
        Method (IMNG, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x03)
                {
                    If ((INDP == One))
                    {
                        IGFG = One
                    }

                    If ((DPHD == One))
                    {
                        DPHD = Zero
                    }
                }
                Case (0x04)
                {
                    If ((INDP == One))
                    {
                        IGFG = Zero
                    }

                    If ((DPHD == One))
                    {
                        DPHD = Zero
                    }
                }
                Case (0x71)
                {
                    Local0 = 0x0F
                    If (CondRefOf (\_SB.PC00.GFX0.GFPS))
                    {
                        Local0 = \_SB.PC00.GFX0.GFPS ()
                    }

                    If ((IGFG == Zero))
                    {
                        If (((INDP == One) && (Local0 == 0x03)))
                        {
                            ADBG (" Notify _SB.PC00.GFX0 ")
                            Notify (\_SB.PC00.GFX0, Zero) // Bus Check
                        }
                    }
                }

            }
        }

        Method (IMMD, 1, NotSerialized)
        {
            IMDA = Arg0
            ADBG (Concatenate ("IMMD :: ", ToHexString (IMDA)))
            Return (Zero)
        }

        Method (IMMC, 5, Serialized)
        {
            Name (OPTS, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            CreateByteField (OPTS, Zero, CMST)
            CreateByteField (OPTS, One, RTB1)
            IMMD (Arg4)
            Local1 = Arg3
            Local1 <<= 0x08
            Local1 += Arg2
            Local1 <<= 0x08
            Local1 += Arg0
            IMCD = Local1
            ADBG (Concatenate ("Set IMMC Command ", ToHexString (IMCD)))
            IMCD |= 0x80000000
            ADBG (Concatenate ("Set IMMC Run Bit ", ToHexString (IMCD)))
            Local0 = Arg1
            ADBG (Concatenate ("IMMC Delay ", ToHexString (Local0)))
            While ((((IMCD & 0x80000000) != Zero) && (Local0 != 
                Zero)))
            {
                Sleep (One)
                Local0--
            }

            Switch (ToInteger (Arg0))
            {
                Case (0x02)
                {
                    ADBG ("GEM_SB_TRAN_CMD")
                    Return (Zero)
                }
                Case (0x03)
                {
                    ADBG ("IOM_BIOS_MBX_GET_HPD_COUNT")
                    If (((IMCD & 0x80000000) != Zero))
                    {
                        ADBG ("Timeout!")
                        ADBG (Concatenate ("IOM MB CMD Reg ", ToHexString (IMCD)))
                        ADBG (Concatenate ("IOM MB DATA Reg ", ToHexString (IMDA)))
                        CMST = One
                        Return (OPTS) /* \_SB_.PC00.IMMC.OPTS */
                    }
                    ElseIf (((IMCD & 0xFF) != Zero))
                    {
                        ADBG ("Completion Code Fail")
                        ADBG (Concatenate ("IOM MB CMD Reg ", ToHexString (IMCD)))
                        CMST = One
                    }
                    Else
                    {
                        ADBG ("Passed")
                        ADBG (Concatenate ("IOM MB CMD Reg :: ", ToHexString (IMCD)))
                        ADBG (Concatenate ("IOM MB DATA Reg :: ", ToHexString (IMDA)))
                        ADBG (Concatenate ("Arg2 is Port Number :: ", ToHexString (Arg2)))
                        CMST = Zero
                        RTB1 = IMDA /* \_SB_.PC00.IMDA */
                    }

                    Return (OPTS) /* \_SB_.PC00.IMMC.OPTS */
                }
                Case (0x06)
                {
                    ADBG ("BIOS_MBX_DEC_HPD_COUNT")
                    RTB1 = Zero
                    If (((IMCD & 0x80000000) != Zero))
                    {
                        ADBG ("Timeout!")
                        CMST = One
                    }
                    ElseIf (((IMCD & 0xFF) != Zero))
                    {
                        ADBG ("Completion Code Fail")
                        ADBG (Concatenate ("IOM MB CMD Reg ", ToHexString (IMCD)))
                        CMST = One
                        RTB1 = IMDA /* \_SB_.PC00.IMDA */
                    }
                    Else
                    {
                        ADBG ("Passed")
                        CMST = Zero
                    }

                    Return (OPTS) /* \_SB_.PC00.IMMC.OPTS */
                }
                Default
                {
                    CMST = One
                    Return (OPTS) /* \_SB_.PC00.IMMC.OPTS */
                }

            }
        }

        Name (CTP0, Zero)
        Name (CTP1, Zero)
        Method (TG0N, 0, NotSerialized)
        {
            ADBG ("TG0N Start")
            ADBG (Concatenate ("DMA0 VDID -", ToHexString (\_SB.PC00.TDM0.VDID)))
            ADBG (Concatenate ("DMA0 PMST -", ToHexString (\_SB.PC00.TDM0.PMST)))
            ADBG (Concatenate ("DMA0 PMEE -", ToHexString (\_SB.PC00.TDM0.PMEE)))
            ADBG (Concatenate ("DMA0 PMES -", ToHexString (\_SB.PC00.TDM0.PMES)))
            ADBG (Concatenate ("DMA0 STAT -", ToHexString (\_SB.PC00.TDM0.STAT)))
            If ((\_SB.PC00.TDM0.VDID != 0xFFFFFFFF))
            {
                If ((\_SB.PC00.TDM0.STAT == Zero))
                {
                    \_SB.PC00.TDM0.D3CX ()
                    ADBG ("Let\'s bring TBT RPs out of D3Cold")
                    If ((\_SB.PC00.TRP0.VDID != 0xFFFFFFFF))
                    {
                        \_SB.PC00.TRP0.D3CX ()
                    }

                    If ((\_SB.PC00.TRP1.VDID != 0xFFFFFFFF))
                    {
                        \_SB.PC00.TRP1.D3CX ()
                    }

                    If ((\_SB.PC00.TDM0.ALCT == One))
                    {
                        If ((CTP0 == One))
                        {
                            \_SB.PC00.TDM0.CNTP ()
                            \_SB.PC00.TDM0.WACT = One
                            CTP0 = Zero
                        }

                        \_SB.PC00.TDM0.ALCT = Zero
                    }
                }
                Else
                {
                    ADBG ("Drop TG0N due to it is already exit D3 cold")
                }

                Sleep (ITRE)
            }

            ADBG ("TG0N End")
        }

        Method (TG0F, 0, NotSerialized)
        {
            ADBG ("TG0F Start")
            ADBG (Concatenate ("DMA0 VDID -", ToHexString (\_SB.PC00.TDM0.VDID)))
            ADBG (Concatenate ("DMA0 PMST -", ToHexString (\_SB.PC00.TDM0.PMST)))
            ADBG (Concatenate ("DMA0 PMEE -", ToHexString (\_SB.PC00.TDM0.PMEE)))
            ADBG (Concatenate ("DMA0 PMES -", ToHexString (\_SB.PC00.TDM0.PMES)))
            ADBG (Concatenate ("DMA0 STAT -", ToHexString (\_SB.PC00.TDM0.STAT)))
            If ((\_SB.PC00.TDM0.VDID != 0xFFFFFFFF))
            {
                If ((\_SB.PC00.TDM0.STAT == One))
                {
                    \_SB.PC00.TDM0.D3CE ()
                    ADBG ("Let\'s push TBT RPs to D3Cold together")
                    If ((\_SB.PC00.TRP0.VDID != 0xFFFFFFFF))
                    {
                        ADBG (Concatenate ("PC00.TRP0.PDSX -", ToHexString (\_SB.PC00.TRP0.PDSX)))
                        If ((\_SB.PC00.TRP0.PDSX == One))
                        {
                            CTP0 = One
                        }

                        \_SB.PC00.TRP0.D3CE ()
                    }

                    If ((\_SB.PC00.TRP1.VDID != 0xFFFFFFFF))
                    {
                        ADBG (Concatenate ("PC00.TRP1.PDSX -", ToHexString (\_SB.PC00.TRP1.PDSX)))
                        If ((\_SB.PC00.TRP1.PDSX == One))
                        {
                            CTP0 = One
                        }

                        \_SB.PC00.TRP1.D3CE ()
                    }
                }
            }

            ADBG ("TG0F End")
        }

        Method (TG1N, 0, NotSerialized)
        {
            ADBG ("TG1N Start")
            ADBG (Concatenate ("DMA1 VDID -", ToHexString (\_SB.PC00.TDM1.VDID)))
            ADBG (Concatenate ("DMA1 PMST -", ToHexString (\_SB.PC00.TDM1.PMST)))
            ADBG (Concatenate ("DMA1 PMEE -", ToHexString (\_SB.PC00.TDM1.PMEE)))
            ADBG (Concatenate ("DMA1 PMES -", ToHexString (\_SB.PC00.TDM1.PMES)))
            ADBG (Concatenate ("DMA1 STAT -", ToHexString (\_SB.PC00.TDM1.STAT)))
            If ((\_SB.PC00.TDM1.VDID != 0xFFFFFFFF))
            {
                If ((\_SB.PC00.TDM1.STAT == Zero))
                {
                    \_SB.PC00.TDM1.D3CX ()
                    ADBG ("Let\'s bring TBT RPs out of D3Cold")
                    If ((\_SB.PC00.TRP2.VDID != 0xFFFFFFFF))
                    {
                        \_SB.PC00.TRP2.D3CX ()
                    }

                    If ((\_SB.PC00.TRP3.VDID != 0xFFFFFFFF))
                    {
                        \_SB.PC00.TRP3.D3CX ()
                    }

                    If ((\_SB.PC00.TDM1.ALCT == One))
                    {
                        If ((CTP1 == One))
                        {
                            \_SB.PC00.TDM1.CNTP ()
                            \_SB.PC00.TDM1.WACT = One
                            CTP1 = Zero
                        }

                        \_SB.PC00.TDM1.ALCT = Zero
                    }
                }
                Else
                {
                    ADBG ("Drop TG1N due to it is already exit D3 cold")
                }

                Sleep (ITRE)
            }

            ADBG ("TG1N End")
        }

        Method (TG1F, 0, NotSerialized)
        {
            ADBG ("TG1F Start")
            ADBG (Concatenate ("DMA1 VDID -", ToHexString (\_SB.PC00.TDM1.VDID)))
            ADBG (Concatenate ("DMA1 PMST -", ToHexString (\_SB.PC00.TDM1.PMST)))
            ADBG (Concatenate ("DMA1 PMEE -", ToHexString (\_SB.PC00.TDM1.PMEE)))
            ADBG (Concatenate ("DMA1 PMES -", ToHexString (\_SB.PC00.TDM1.PMES)))
            ADBG (Concatenate ("DMA1 STAT -", ToHexString (\_SB.PC00.TDM1.STAT)))
            If ((\_SB.PC00.TDM1.VDID != 0xFFFFFFFF))
            {
                If ((\_SB.PC00.TDM1.STAT == One))
                {
                    \_SB.PC00.TDM1.D3CE ()
                    ADBG ("Let\'s push TBT RPs to D3Cold together")
                    If ((\_SB.PC00.TRP2.VDID != 0xFFFFFFFF))
                    {
                        ADBG (Concatenate ("PC00.TRP2.PDSX -", ToHexString (\_SB.PC00.TRP2.PDSX)))
                        If ((\_SB.PC00.TRP2.PDSX == One))
                        {
                            CTP1 = One
                        }

                        \_SB.PC00.TRP2.D3CE ()
                    }

                    If ((\_SB.PC00.TRP3.VDID != 0xFFFFFFFF))
                    {
                        ADBG (Concatenate ("PC00.TRP3.PDSX -", ToHexString (\_SB.PC00.TRP3.PDSX)))
                        If ((\_SB.PC00.TRP3.PDSX == One))
                        {
                            CTP1 = One
                        }

                        \_SB.PC00.TRP3.D3CE ()
                    }
                }
            }

            ADBG ("TG1F End")
        }

        If (ITRT)
        {
            Method (TBON, 1, NotSerialized)
            {
                If (ITIM)
                {
                    If ((Arg0 == Zero))
                    {
                        ADBG ("TBT0 Group ON Start")
                        TG0N ()
                        ADBG ("TBT0 Group ON End")
                    }
                    Else
                    {
                        ADBG ("TBT1 Group ON Start")
                        TG1N ()
                        ADBG ("TBT1 Group ON End")
                    }
                }
                Else
                {
                    ADBG ("TBT IMR is not valid")
                }
            }

            Method (TBOF, 1, NotSerialized)
            {
                If (ITIM)
                {
                    If ((Arg0 == Zero))
                    {
                        ADBG ("TBT0 Group OFF Start")
                        ADBG (Concatenate ("Skip D3C entry? ", ToHexString (\_SB.PC00.TDM0.SD3C)))
                        If ((\_SB.PC00.TDM0.SD3C == Zero))
                        {
                            TG0F ()
                        }

                        ADBG ("TBT0 Group OFF End")
                    }
                    Else
                    {
                        ADBG ("TBT1 Group OFF Start")
                        ADBG (Concatenate ("Skip D3C entry? ", ToHexString (\_SB.PC00.TDM1.SD3C)))
                        If ((\_SB.PC00.TDM1.SD3C == Zero))
                        {
                            TG1F ()
                        }

                        ADBG ("TBT1 Group OFF End")
                    }
                }
                Else
                {
                    ADBG ("TBT IMR is not valid")
                }
            }

            PowerResource (TBT0, 0x00, 0x0001)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("DMA0 D3C STAT -", ToHexString (\_SB.PC00.TDM0.STAT)))
                    Return (\_SB.PC00.TDM0.STAT)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("TBT0 _ON")
                    If ((\_SB.PC00.TDM0.SCME == Zero))
                    {
                        TBON (Zero)
                    }
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("TBT0 _OFF")
                    If ((\_SB.PC00.TDM0.SCME == Zero))
                    {
                        TBOF (Zero)
                    }
                }
            }

            PowerResource (TBT1, 0x00, 0x0001)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("DMA1 D3C STAT -", ToHexString (\_SB.PC00.TDM1.STAT)))
                    Return (\_SB.PC00.TDM1.STAT)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("TBT1 _ON")
                    If ((\_SB.PC00.TDM1.SCME == Zero))
                    {
                        TBON (One)
                    }
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("TBT1 _OFF")
                    If ((\_SB.PC00.TDM1.SCME == Zero))
                    {
                        TBOF (One)
                    }
                }
            }
        }

        If (TRTD)
        {
            Method (TCON, 0, NotSerialized)
            {
                ADBG ("TCSS ON")
                ADBG ("TCON")
                If ((TD3C == One))
                {
                    ADBG (Concatenate ("TACK before D3 cold exit -", ToHexString (TACK)))
                    TD3C = Zero
                    Local0 = Zero
                    While (((TACK != Zero) && (Local0 < 0x64)))
                    {
                        Sleep (One)
                        Local0++
                    }

                    ADBG (Concatenate ("TACK after D3 cold exit -", ToHexString (TACK)))
                    ADBG (Concatenate ("Time for wait TACK - ", ToHexString (Local0)))
                    If ((Local0 == 0x64))
                    {
                        ADBG ("Error: Timeout occurred")
                    }
                    Else
                    {
                        ADBG ("D3Cold Exit")
                        If (((TDCE == One) && (IMRY == One)))
                        {
                            ADBG ("IOM.D3.TDCE")
                            \_SB.PC00.TXDC.SINT (TCIT, TCIR)
                            ADBG ("IOM.D3.TDCE Done")
                        }
                    }
                }
                Else
                {
                    ADBG ("Drop TCON due to it is already exit D3 cold")
                    Return (Zero)
                }

                ADBG ("TCSS ON End")
            }

            Method (TCOF, 0, NotSerialized)
            {
                ADBG ("TCSS OFF Start")
                ADBG ("TCOF")
                ADBG (Concatenate ("DMA0 Skip D3C entry? ", ToHexString (\_SB.PC00.TDM0.SD3C)))
                ADBG (Concatenate ("DMA1 Skip D3C entry? ", ToHexString (\_SB.PC00.TDM1.SD3C)))
                ADBG (Concatenate ("XHCI Skip D3C entry? ", ToHexString (\_SB.PC00.TXHC.SD3C)))
                If (((\_SB.PC00.TXHC.SD3C != Zero) || ((\_SB.PC00.TDM0.SD3C != Zero) || 
                    (\_SB.PC00.TDM1.SD3C != Zero))))
                {
                    Return (Zero)
                }

                ADBG ("D3Cold Entry")
                TD3C = One
                ADBG (Concatenate ("IOM D3Cold -", ToHexString (TD3C)))
                ADBG ("TCSS OFF End")
            }

            PowerResource (D3C, 0x00, 0x0000)
            {
                Name (STAT, One)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS D3C STAT -", ToHexString (STAT)))
                    Return (STAT) /* \_SB_.PC00.D3C_.STAT */
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.PC00.TCON ()
                    STAT = One
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.PC00.TCOF ()
                    STAT = Zero
                }
            }
        }

        Device (TXHC)
        {
            Name (_ADR, 0x000D0000)  // _ADR: Address
            Name (_DDN, "ICL North XHCI controller")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("ICL North XHCI controller"))  // _STR: Description String
            Name (DCPM, 0x04)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("TCSS xHCI _STA", ToHexString (THCE)))
                If ((THCE == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (BASE, 0, NotSerialized)
            {
                Local0 = (_ADR & 0x07)
                Local1 = ((_ADR >> 0x10) & 0x1F)
                Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                Local3 = (\_SB.PC00.GPCB () + Local2)
                ADBG (Concatenate ("CPU XHCI PCIe MMIO Address", ToHexString (Local3)))
                Return (Local3)
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG ("CPU XHCI _PS0 Start")
                If ((\_SB.PC00.TXHC.PMEE == One))
                {
                    ADBG ("Clear PME_EN of CPU XHCI")
                    \_SB.PC00.TXHC.PMEE = Zero
                }

                ADBG ("CPU XHCI _PS0 End")
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG ("CPU XHCI _PS3 Start")
                If ((\_SB.PC00.TXHC.PMEE == Zero))
                {
                    ADBG ("PME_EN was not set. Set PME_EN of CPU XHCI")
                    \_SB.PC00.TXHC.PMEE = One
                }

                ADBG ("CPU XHCI _PS3 End")
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If (TRTD)
                {
                    Return (0x04)
                }
                Else
                {
                    Return (0x03)
                }
            }

            Name (SD3C, Zero)
            If (TRTD)
            {
                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    Return (Package (0x01)
                    {
                        \_SB.PC00.D3C
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    Return (Package (0x01)
                    {
                        \_SB.PC00.D3C
                    })
                }
            }

            OperationRegion (XPRT, SystemMemory, BASE (), 0x0100)
            Field (XPRT, ByteAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x74), 
                D0D3,   2, 
                Offset (0x75), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Name (XFLT, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG ("XHCI _DSM")
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x03)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x03)
            }

            Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
            {
                Return (0x03)
            }

            Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
            {
                Return (0x03)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (GP1E))
                {
                    If ((GP1E != Zero))
                    {
                        Return (GPRW (0x80, 0x04))
                    }
                }

                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                ADBG ("TCSS XHCI _DSW")
                ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                ADBG (Concatenate ("Arg2 -", ToHexString (Arg2)))
                C2PM (Arg0, Arg1, Arg2, DCPM)
                SD3C = Arg1
                ADBG (Concatenate ("SD3C -", ToHexString (SD3C)))
            }

            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (TPLD, 2, Serialized)
                {
                    Name (PCKG, Package (0x01)
                    {
                        Buffer (0x10){}
                    })
                    CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                    REV = One
                    CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                    VISI = Arg0
                    CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                    GPOS = Arg1
                    CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                    SHAP = One
                    CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                    WID = 0x08
                    CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                    HGT = 0x03
                    Return (PCKG) /* \_SB_.PC00.TXHC.RHUB.TPLD.PCKG */
                }

                Method (TUPC, 2, Serialized)
                {
                    Name (PCKG, Package (0x04)
                    {
                        One, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    PCKG [Zero] = Arg0
                    PCKG [One] = Arg1
                    Return (PCKG) /* \_SB_.PC00.TXHC.RHUB.TUPC.PCKG */
                }

                Device (HS01)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (TUPC (Zero, Zero))
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (TPLD (Zero, Zero))
                    }
                }

                Device (SS01)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    If (CondRefOf (U4SE))
                    {
                        If (((U4SE == One) && (DME0 == One)))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                ADBG ("XHC SS01 _DSD")
                                Return (Package (0x02)
                                {
                                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                    Package (0x02)
                                    {
                                        Package (0x02)
                                        {
                                            "usb4-host-interface", 
                                            \_SB.PC00.TDM0
                                        }, 

                                        Package (0x02)
                                        {
                                            "usb4-port-number", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }

                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        ADBG ("TCSS XHCI SS01 _DSM")
                        If ((Arg0 == ToUUID ("ce2ee385-00e6-48cb-9f05-2edb927c4899") /* USB Controller */))
                        {
                            ADBG ("TCSS XHCI SS01 GUID")
                            If ((Arg2 == Zero))
                            {
                                ADBG ("TCSS XHCI SS01 F0")
                                Return (Buffer (One)
                                {
                                     0x21                                             // !
                                })
                            }

                            If ((Arg2 == 0x05))
                            {
                                ADBG ("TCSS XHCI SS01 F5")
                                If ((Arg1 == Zero))
                                {
                                    If (((RTBM & One) == One))
                                    {
                                        ADBG ("XHC SS01 _DSM U1U2 disable")
                                        Return (One)
                                    }

                                    Return (Zero)
                                }
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Device (SS02)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    If (CondRefOf (U4SE))
                    {
                        If (((U4SE == One) && (DME0 == One)))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                ADBG ("XHC SS02 _DSD")
                                Return (Package (0x02)
                                {
                                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                    Package (0x02)
                                    {
                                        Package (0x02)
                                        {
                                            "usb4-host-interface", 
                                            \_SB.PC00.TDM0
                                        }, 

                                        Package (0x02)
                                        {
                                            "usb4-port-number", 
                                            One
                                        }
                                    }
                                })
                            }
                        }
                    }

                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        ADBG ("TCSS XHCI SS02 _DSM")
                        If ((Arg0 == ToUUID ("ce2ee385-00e6-48cb-9f05-2edb927c4899") /* USB Controller */))
                        {
                            ADBG ("TCSS XHCI SS02 GUID")
                            If ((Arg2 == Zero))
                            {
                                ADBG ("TCSS XHCI SS02 F0")
                                Return (Buffer (One)
                                {
                                     0x21                                             // !
                                })
                            }

                            If ((Arg2 == 0x05))
                            {
                                ADBG ("TCSS XHCI SS02 F5")
                                If ((Arg1 == Zero))
                                {
                                    If (((RTBM & 0x02) == 0x02))
                                    {
                                        ADBG ("XHC SS02 _DSM U1U2 disable")
                                        Return (One)
                                    }

                                    Return (Zero)
                                }
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Device (SS03)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    If (CondRefOf (U4SE))
                    {
                        If (((U4SE == One) && (DME1 == One)))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                ADBG ("XHC SS03 _DSD")
                                Return (Package (0x02)
                                {
                                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                    Package (0x02)
                                    {
                                        Package (0x02)
                                        {
                                            "usb4-host-interface", 
                                            \_SB.PC00.TDM1
                                        }, 

                                        Package (0x02)
                                        {
                                            "usb4-port-number", 
                                            0x02
                                        }
                                    }
                                })
                            }
                        }
                    }

                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        ADBG ("TCSS XHCI SS03 _DSM")
                        If ((Arg0 == ToUUID ("ce2ee385-00e6-48cb-9f05-2edb927c4899") /* USB Controller */))
                        {
                            ADBG ("TCSS XHCI SS03 GUID")
                            If ((Arg2 == Zero))
                            {
                                ADBG ("TCSS XHCI SS03 F0")
                                Return (Buffer (One)
                                {
                                     0x21                                             // !
                                })
                            }

                            If ((Arg2 == 0x05))
                            {
                                ADBG ("TCSS XHCI SS03 F5")
                                If ((Arg1 == Zero))
                                {
                                    If (((RTBM & 0x04) == 0x04))
                                    {
                                        ADBG ("XHC SS03 _DSM U1U2 disable")
                                        Return (One)
                                    }

                                    Return (Zero)
                                }
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Device (SS04)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    If (CondRefOf (U4SE))
                    {
                        If (((U4SE == One) && (DME1 == One)))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                ADBG ("XHC SS04 _DSD")
                                Return (Package (0x02)
                                {
                                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                                    Package (0x02)
                                    {
                                        Package (0x02)
                                        {
                                            "usb4-host-interface", 
                                            \_SB.PC00.TDM1
                                        }, 

                                        Package (0x02)
                                        {
                                            "usb4-port-number", 
                                            0x03
                                        }
                                    }
                                })
                            }
                        }
                    }

                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        ADBG ("TCSS XHCI SS04 _DSM")
                        If ((Arg0 == ToUUID ("ce2ee385-00e6-48cb-9f05-2edb927c4899") /* USB Controller */))
                        {
                            ADBG ("TCSS XHCI SS04 GUID")
                            If ((Arg2 == Zero))
                            {
                                ADBG ("TCSS XHCI SS04 F0")
                                Return (Buffer (One)
                                {
                                     0x21                                             // !
                                })
                            }

                            If ((Arg2 == 0x05))
                            {
                                ADBG ("TCSS XHCI SS04 F5")
                                If ((Arg1 == Zero))
                                {
                                    If (((RTBM & 0x08) == 0x08))
                                    {
                                        ADBG ("XHC SS04 _DSM U1U2 disable")
                                        Return (One)
                                    }

                                    Return (Zero)
                                }
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG ("TCSS RHUB XHCI PS0")
                }

                Method (_PS2, 0, Serialized)  // _PS2: Power State 2
                {
                    ADBG ("TCSS RHUB XHCI PS2")
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG ("TCSS RHUB XHCI PS3")
                }
            }
        }

        If ((TDCE == One))
        {
            Device (TXDC)
            {
                Name (_ADR, 0x000D0001)  // _ADR: Address
                Name (_DDN, "ICL North XDCI controller")  // _DDN: DOS Device Name
                Name (_STR, Unicode ("ICL North XDCI controller"))  // _STR: Description String
                Name (DCPM, 0x05)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS xDCI _STA", ToHexString (TDCE)))
                    If ((TDCE == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (SINT, 2, Serialized)
                {
                    ADBG ("xDCI.SINT")
                    If ((IMRY == One))
                    {
                        Local0 = (Arg0 << 0x08)
                        Local1 = (Arg1 << 0x14)
                        Local0 += Local1
                        ADBG (Concatenate ("TCSS xDCI SINT", ToHexString (Local0)))
                        IMMC (0x02, Zero, One, Zero, Local0)
                    }
                    Else
                    {
                        ADBG ("IOM not ready")
                    }

                    ADBG ("xDCI.SINT Done")
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x03)
                }

                OperationRegion (XDCS, PCI_Config, Zero, 0x0100)
                Field (XDCS, DWordAcc, NoLock, Preserve)
                {
                    DVID,   16, 
                    Offset (0x10), 
                    XDCB,   64
                }

                Field (XDCS, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    D0I3,   2
                }

                Method (XDBA, 0, NotSerialized)
                {
                    Return ((^XDCB & 0xFFFFFFFFFFFFFF00))
                }

                OperationRegion (XDMM, SystemMemory, XDBA (), 0x00110000)
                Field (XDMM, WordAcc, NoLock, Preserve)
                {
                    Offset (0xC110), 
                    GCTL,   32, 
                    Offset (0x10F810), 
                    Offset (0x10F811), 
                    U2CP,   2, 
                    U3CP,   2, 
                    Offset (0x10F818), 
                    PUPS,   2, 
                        ,   1, 
                    PURC,   1, 
                    Offset (0x10F81A), 
                    Offset (0x10F81C), 
                        ,   3, 
                    UXPE,   2, 
                    Offset (0x10F81E)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    ADBG ("TXDC DSM")
                    If ((Arg0 == ToUUID ("732b85d5-b7a7-4a1b-9ba0-4bbd00ffd511") /* Unknown UUID */))
                    {
                        If ((Arg1 == One))
                        {
                            Method (SPPT, 2, Serialized)
                            {
                                ADBG ("TXDC Set PMU Power State")
                                Local1 = Arg0
                                Local2 = Arg1
                                If ((Local1 == Zero))
                                {
                                    ADBG ("TXDC PMU D0")
                                    UXPE = Zero
                                    Local0 = Zero
                                    While ((Local0 < 0x0A))
                                    {
                                        Stall (0x64)
                                        Local0++
                                    }

                                    PUPS = Zero
                                    Local0 = Zero
                                    While ((Local0 < 0x07D0))
                                    {
                                        Stall (0x64)
                                        If (((U2CP == Zero) && (U3CP == Zero)))
                                        {
                                            Break
                                        }

                                        Local0++
                                    }

                                    If ((U2CP != Zero))
                                    {
                                        ADBG ("TXDC U2 not in D0")
                                    }

                                    If ((U3CP != Zero))
                                    {
                                        ADBG ("TXDC U3 not in D0")
                                    }

                                    Return (Zero)
                                }

                                If ((Local1 == 0x03))
                                {
                                    ADBG ("TXDC PMU D3")
                                    If ((U2CP != Zero))
                                    {
                                        ADBG ("TXDC U2 not in D0")
                                    }

                                    If ((U3CP != Zero))
                                    {
                                        ADBG ("TXDC U3 not in D0")
                                    }

                                    PUPS = 0x03
                                    Local0 = Zero
                                    While ((Local0 < 0x07D0))
                                    {
                                        Stall (0x64)
                                        If (((U2CP == 0x03) && (U3CP == 0x03)))
                                        {
                                            Break
                                        }

                                        Local0++
                                    }

                                    If ((U2CP != 0x03))
                                    {
                                        ADBG ("TXDC U2 not in D3")
                                    }

                                    If ((U3CP != 0x03))
                                    {
                                        ADBG ("TXDC U3 not in D3")
                                    }

                                    UXPE = Local2
                                    Return (Zero)
                                }

                                Return (Zero)
                            }

                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    ADBG ("TXDC Fn0")
                                    Return (Buffer (0x02)
                                    {
                                         0xF3, 0x03                                       // ..
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("TXDC Fn1")
                                    Return (One)
                                }
                                Case (0x04)
                                {
                                    ADBG ("TXDC Fn4")
                                    Local1 = DerefOf (Arg3 [Zero])
                                    ADBG (Local1)
                                    SPPT (Local1, Zero)
                                }
                                Case (0x05)
                                {
                                    ADBG ("TXDC Fn5")
                                    If (CondRefOf (XDAT))
                                    {
                                        If ((XDAT () == One))
                                        {
                                            ADBG ("USB Attach")
                                            Notify (\_SB.PC00.TXDC, 0x80) // Status Change
                                        }
                                        Else
                                        {
                                            ADBG ("USB Detach")
                                            Notify (\_SB.PC00.TXDC, 0x81) // Information Change
                                        }
                                    }

                                    Return (Zero)
                                }
                                Case (0x06)
                                {
                                    ADBG ("TXDC Fn6")
                                    If ((OTHC == Zero))
                                    {
                                        CSFR = One
                                        Local0 = Zero
                                        While ((Local0 < 0x64))
                                        {
                                            If ((CSFR == Zero))
                                            {
                                                Break
                                            }

                                            Sleep (One)
                                        }
                                    }

                                    Return (Zero)
                                }
                                Case (0x07)
                                {
                                    ADBG ("TXDC Fn7")
                                    Local0 = PUPS /* \_SB_.PC00.TXDC.PUPS */
                                    Return (Local0)
                                }
                                Case (0x08)
                                {
                                    ADBG ("TXDC Fn8")
                                    Return (One)
                                }
                                Case (0x09)
                                {
                                    ADBG ("TXDC Fn9")
                                    Local1 = (TCDS & 0xFFF80000)
                                    Local1 >>= 0x13
                                    ADBG (Concatenate ("CPU XDCI: Func9 Return Val = ", ToHexString (Local1)))
                                    Return (Local1)
                                }

                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (GP1E))
                    {
                        If ((GP1E != Zero))
                        {
                            Return (GPRW (0x80, 0x04))
                        }
                    }

                    Return (GPRW (0x6D, 0x04))
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }
            }
        }

        Device (TDM0)
        {
            Name (_ADR, 0x000D0002)  // _ADR: Address
            Name (_DDN, "ICL TBT DMA0 controller")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("ICL TBT DMA0 controller"))  // _STR: Description String
            Name (DUID, Zero)
            Name (DCPM, 0x06)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("TCSS DMA0 _STA", ToHexString (DME0)))
                If ((DME0 == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (BASE, 0, NotSerialized)
            {
                Local0 = (\_SB.PC00.GPCB () + 0x0006A000)
                ADBG (Concatenate ("TDM0 MMIO Address", ToHexString (Local0)))
                Return (Local0)
            }

            OperationRegion (DPME, SystemMemory, BASE (), 0x0100)
            Field (DPME, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x84), 
                PMST,   2, 
                Offset (0x85), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1, 
                Offset (0xFC), 
                DD3E,   1, 
                DFPE,   1, 
                Offset (0xFF), 
                DMAD,   8
            }

            Name (STAT, One)
            Name (ALCT, Zero)
            Name (WACT, Zero)
            Name (SCME, Zero)
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("TBT DMA PS0 Start, DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("DMA VDID -", ToHexString (VDID)))
                ADBG (Concatenate ("PMST -", ToHexString (PMST)))
                ADBG (Concatenate ("PMEE -", ToHexString (PMEE)))
                ADBG (Concatenate ("PMES -", ToHexString (PMES)))
                ADBG (Concatenate ("SCME -", ToHexString (SCME)))
                If ((SCME == One))
                {
                    TBON (DUID)
                }
                ElseIf ((WACT == One))
                {
                    WACT = 0x02
                    WFCC (ITCT)
                    WACT = Zero
                }
                ElseIf ((WACT == 0x02))
                {
                    ADBG ("Wait until other _PS0 get response")
                    While ((WACT != Zero))
                    {
                        Sleep (0x05)
                    }

                    ADBG ("Other _PS0 got response")
                }

                ADBG (Concatenate ("TBT DMA PS0 End, DUID -", ToHexString (DUID)))
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("TBT DMA PS3 Start, DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("DMA VDID -", ToHexString (VDID)))
                ADBG (Concatenate ("PMST -", ToHexString (PMST)))
                ADBG (Concatenate ("PMEE -", ToHexString (PMEE)))
                ADBG (Concatenate ("PMES -", ToHexString (PMES)))
                ADBG (Concatenate ("SCME -", ToHexString (SCME)))
                If ((SCME == One))
                {
                    TBOF (DUID)
                }

                ADBG (Concatenate ("TBT DMA PS3 End, DUID -", ToHexString (DUID)))
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                ADBG ("TDMA S0W")
                If (ITRT)
                {
                    Return (0x04)
                }
                Else
                {
                    Return (0x03)
                }
            }

            If (ITRT)
            {
                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    If (TRTD)
                    {
                        If (SCME)
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.D3C
                            })
                        }

                        If ((DUID == Zero))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If ((DUID == Zero))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    If (TRTD)
                    {
                        If (SCME)
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.D3C
                            })
                        }

                        If ((DUID == Zero))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If ((DUID == Zero))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }
            }

            Method (D3CX, 0, Serialized)
            {
                ADBG ("Disable DMA RTD3 bit")
                ADBG (Concatenate ("DUID -", ToHexString (DUID)))
                DD3E = Zero
                STAT = One
            }

            Method (D3CE, 0, Serialized)
            {
                ADBG ("Enable DMA RTD3 bit")
                ADBG (Concatenate ("DUID -", ToHexString (DUID)))
                DD3E = One
                STAT = Zero
                If ((SCME == Zero))
                {
                    ALCT = One
                }
            }

            Name (SD3C, Zero)
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                ADBG (Concatenate ("TCSS DMA _DSW DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                SD3C = Arg1
                ADBG (Concatenate ("SD3C -", ToHexString (SD3C)))
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (GP1E))
                {
                    If ((GP1E != Zero))
                    {
                        Return (GPRW (0x80, 0x04))
                    }
                }

                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG (Concatenate ("TBT _DSD IMR_VALID =", ToHexString (ITIM)))
                ADBG (Concatenate ("TBT _DSD WAKE_SUPPORTED =", ToHexString (TIVS)))
                If (ITIM)
                {
                    If (TIVS)
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "IMR_VALID", 
                                    One
                                }
                            }, 

                            ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "WAKE_SUPPORTED", 
                                    One
                                }
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "IMR_VALID", 
                                    One
                                }
                            }, 

                            ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "WAKE_SUPPORTED", 
                                    Zero
                                }
                            }
                        })
                    }
                }
                ElseIf (TIVS)
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "IMR_VALID", 
                                Zero
                            }
                        }, 

                        ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "WAKE_SUPPORTED", 
                                One
                            }
                        }
                    })
                }
                Else
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "IMR_VALID", 
                                Zero
                            }
                        }, 

                        ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "WAKE_SUPPORTED", 
                                Zero
                            }
                        }
                    })
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("197db5e0-f095-4f33-b915-71dd70833e55") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (PCPN, Buffer (One)
                        {
                             0x00                                             // .
                        })
                        CreateBitField (PCPN, Zero, PCP0)
                        CreateBitField (PCPN, One, PCP1)
                        If ((DUID == Zero))
                        {
                            If ((TRE0 == One))
                            {
                                PCP0 = One
                            }

                            If ((TRE1 == One))
                            {
                                PCP1 = One
                            }
                        }
                        Else
                        {
                            If ((TRE2 == One))
                            {
                                PCP0 = One
                            }

                            If ((TRE3 == One))
                            {
                                PCP1 = One
                            }
                        }

                        Return (PCPN) /* \_SB_.PC00.TDM0._DSM.PCPN */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Name (TCAP, Buffer (One)
                        {
                             0x00                                             // .
                        })
                        CreateBitField (TCAP, Zero, IMRV)
                        CreateBitField (TCAP, One, WAKE)
                        CreateBitField (TCAP, 0x02, TVDS)
                        If (ITIM)
                        {
                            IMRV = One
                        }

                        If (TIVS)
                        {
                            WAKE = One
                        }

                        If (ITVD)
                        {
                            TVDS = One
                        }

                        Return (TCAP) /* \_SB_.PC00.TDM0._DSM.TCAP */
                    }
                }
                ElseIf ((Arg0 == Buffer (0x10)
                        {
                            /* 0000 */  0x32, 0x52, 0x42, 0x1B, 0x4C, 0x15, 0x34, 0x4F,  // 2RB.L.4O
                            /* 0008 */  0x7B, 0x9E, 0xB6, 0x5C, 0x94, 0x64, 0x94, 0xA3   // {..\.d..
                        }))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            ADBG (Concatenate ("TBT DMA _DSM DUID:", ToHexString (DUID)))
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }

                            }

                            ADBG ("return buffer 0x00")
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                        Case (One)
                        {
                            ADBG (Concatenate ("TBT DMA _DSM Func 1 DUID:", ToHexString (DUID)))
                            If ((DUID == One))
                            {
                                ADBG (Concatenate ("ITM1:", ToHexString (ITM1)))
                                Return (ITM1) /* External reference */
                            }
                            Else
                            {
                                ADBG (Concatenate ("ITM0:", ToHexString (ITM0)))
                                Return (ITM0) /* External reference */
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (STCM, 2, Serialized)
            {
                ADBG (Concatenate ("STCM DUID = ", ToHexString (DUID)))
                ADBG (Concatenate ("Requested CM mode = ", Arg0))
                ADBG (Concatenate ("Pre-boot CM Info  = ", ToHexString (Arg1)))
                Local0 = (Arg1 & 0x07)
                Local1 = One
                If (((Arg1 & 0x80) != 0x80))
                {
                    ADBG ("U4CM valid bit is not set!")
                    Return (0xFF)
                }
                Else
                {
                    SCME = Local0
                    If ((Arg0 == Local0))
                    {
                        ADBG ("Pre-boot CM mode aligns with OS preferred CM mode")
                        Local1 = Zero
                    }
                }

                If ((Local1 == One))
                {
                    If ((CHCM (Arg0) == Zero))
                    {
                        ADBG (Concatenate ("Switch CM mode success, request mode = ", Arg0))
                        SCME = Arg0
                    }
                    Else
                    {
                        ADBG (Concatenate ("Switch CM mode failure, request mode = ", Arg0))
                        Return (0xFF)
                    }
                }

                ADBG (Concatenate ("SCME - ", ToHexString (SCME)))
                Return (SCME) /* \_SB_.PC00.TDM0.SCME */
            }

            Field (DPME, DWordAcc, NoLock, Preserve)
            {
                Offset (0xC8), 
                    ,   31, 
                INFR,   1, 
                Offset (0xEC), 
                TB2P,   32, 
                P2TB,   32
            }

            Method (ITMB, 1, Serialized)
            {
                ADBG (ToHexString (_DDN))
                ADBG (Concatenate ("MailBox Cmd ", ToHexString ((Arg0 >> One))))
                Local0 = (Arg0 | One)
                P2TB = Local0
                ADBG ("Command is sent")
            }

            Method (WFCC, 1, Serialized)
            {
                WTBS (Arg0)
                P2TB = Zero
                WTBC (Arg0)
            }

            Method (WTBS, 1, Serialized)
            {
                Local0 = Arg0
                ADBG (Concatenate ("Wait TB2P to be set, DUID ", ToHexString (DUID)))
                While ((Local0 > Zero))
                {
                    If ((TB2P & One))
                    {
                        ADBG (Concatenate ("TB2P is set, DUID ", ToHexString (DUID)))
                        ADBG (Concatenate ("Wait count = ", ToHexString ((Arg0 - Local0))))
                        Break
                    }

                    Local0--
                    Sleep (One)
                }

                If ((Local0 == Zero))
                {
                    ADBG (Concatenate ("Command Timeout, DUID ", ToHexString (DUID)))
                    ADBG (Concatenate ("Timeout Value ", ToHexString (Arg0)))
                }

                Return (Local0)
            }

            Method (WTBC, 1, Serialized)
            {
                Local0 = Arg0
                ADBG (Concatenate ("Wait TB2P to be clear, DUID ", ToHexString (DUID)))
                While ((Local0 > Zero))
                {
                    If (((TB2P & One) != One))
                    {
                        ADBG (Concatenate ("TB2P is clear, DUID ", ToHexString (DUID)))
                        Break
                    }

                    Local0--
                    Sleep (One)
                }

                If ((Local0 == Zero))
                {
                    ADBG (Concatenate ("Command Timeout, DUID ", ToHexString (DUID)))
                    ADBG (Concatenate ("Timeout Value ", ToHexString (Arg0)))
                }
            }

            Method (CNTP, 0, Serialized)
            {
                ADBG (Concatenate ("TCSS Send ITBT CONNECT TOPOLOGY Cmd Start, DUID -", ToHexString (DUID)))
                Local0 = Zero
                If ((DFPE == Zero))
                {
                    DMAD = 0x22
                    DFPE = One
                    While (((INFR == Zero) && (Local0 < ITFP)))
                    {
                        Sleep (One)
                        Local0++
                    }
                }

                If ((Local0 != ITFP))
                {
                    ITMB (0x3E)
                }
                Else
                {
                    ADBG ("Force Power Timeout occurred")
                }

                If ((DFPE != Zero))
                {
                    ADBG ("Unset Force Power")
                    DFPE = Zero
                }

                ADBG (Concatenate ("TCSS Send ITBT CONNECT TOPOLOGY Cmd End, DUID -", ToHexString (DUID)))
            }

            Method (CMMB, 1, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    ADBG ("Set FW CM mode")
                    ITMB (0x44)
                }
                ElseIf ((Arg0 == One))
                {
                    ADBG ("Set SW CM mode")
                    ITMB (0x46)
                }

                Local0 = WTBS (0x01F4)
                If ((Local0 != Zero))
                {
                    ADBG ("Set CM mode done bit is set")
                    Local1 = Zero
                }
                Else
                {
                    ADBG ("Set CM mode command timeout")
                    Local1 = 0xFF
                }

                P2TB = Zero
                Return (Local1)
            }

            Method (CHCM, 1, Serialized)
            {
                ADBG (Concatenate ("iTBT CHCM - Switch CM mode to ", Arg0))
                If ((Arg0 > One))
                {
                    ADBG ("Invalid CM mode value")
                    Return (0xFF)
                }

                Local0 = Zero
                If ((DFPE == Zero))
                {
                    ADBG ("Set Force Power")
                    DMAD = 0x22
                    DFPE = One
                    While (((INFR == Zero) && (Local0 < ITFP)))
                    {
                        Sleep (One)
                        Local0++
                    }
                }
                Else
                {
                    ADBG ("Force Power has been set")
                }

                If ((Local0 != ITFP))
                {
                    Local1 = CMMB (Arg0)
                    If (((Arg0 == Zero) && (Local1 == Zero)))
                    {
                        ADBG ("Send Connect Topology command")
                        ITMB (0x3E)
                        Local2 = WTBS (ITCT)
                        If ((Local2 != Zero))
                        {
                            ADBG ("Connect topology command done bit is set")
                            Local1 = Zero
                        }
                        Else
                        {
                            ADBG ("Connect topology command timeout!")
                            Local1 = 0xFF
                        }

                        P2TB = Zero
                    }
                }
                Else
                {
                    ADBG ("Force Power Timeout occurred")
                    Local1 = 0xFF
                }

                If ((DFPE != Zero))
                {
                    ADBG ("Unset Force Power")
                    DFPE = Zero
                }

                ADBG (Concatenate ("iTBT change CM mode status = ", Local1))
                Return (Local1)
            }
        }

        Device (TDM1)
        {
            Name (_ADR, 0x000D0003)  // _ADR: Address
            Name (_DDN, "ICL TBT DMA1 controller")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("ICL TBT DMA1 controller"))  // _STR: Description String
            Name (DUID, One)
            Name (DCPM, 0x07)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("TCSS DMA1 _STA", ToHexString (DME1)))
                If ((DME1 == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (BASE, 0, NotSerialized)
            {
                Local0 = (\_SB.PC00.GPCB () + 0x0006B000)
                ADBG (Concatenate ("TDM1 MMIO Address", ToHexString (Local0)))
                Return (Local0)
            }

            OperationRegion (DPME, SystemMemory, BASE (), 0x0100)
            Field (DPME, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x84), 
                PMST,   2, 
                Offset (0x85), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1, 
                Offset (0xFC), 
                DD3E,   1, 
                DFPE,   1, 
                Offset (0xFF), 
                DMAD,   8
            }

            Name (STAT, One)
            Name (ALCT, Zero)
            Name (WACT, Zero)
            Name (SCME, Zero)
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("TBT DMA PS0 Start, DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("DMA VDID -", ToHexString (VDID)))
                ADBG (Concatenate ("PMST -", ToHexString (PMST)))
                ADBG (Concatenate ("PMEE -", ToHexString (PMEE)))
                ADBG (Concatenate ("PMES -", ToHexString (PMES)))
                ADBG (Concatenate ("SCME -", ToHexString (SCME)))
                If ((SCME == One))
                {
                    TBON (DUID)
                }
                ElseIf ((WACT == One))
                {
                    WACT = 0x02
                    WFCC (ITCT)
                    WACT = Zero
                }
                ElseIf ((WACT == 0x02))
                {
                    ADBG ("Wait until other _PS0 get response")
                    While ((WACT != Zero))
                    {
                        Sleep (0x05)
                    }

                    ADBG ("Other _PS0 got response")
                }

                ADBG (Concatenate ("TBT DMA PS0 End, DUID -", ToHexString (DUID)))
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("TBT DMA PS3 Start, DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("DMA VDID -", ToHexString (VDID)))
                ADBG (Concatenate ("PMST -", ToHexString (PMST)))
                ADBG (Concatenate ("PMEE -", ToHexString (PMEE)))
                ADBG (Concatenate ("PMES -", ToHexString (PMES)))
                ADBG (Concatenate ("SCME -", ToHexString (SCME)))
                If ((SCME == One))
                {
                    TBOF (DUID)
                }

                ADBG (Concatenate ("TBT DMA PS3 End, DUID -", ToHexString (DUID)))
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                ADBG ("TDMA S0W")
                If (ITRT)
                {
                    Return (0x04)
                }
                Else
                {
                    Return (0x03)
                }
            }

            If (ITRT)
            {
                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    If (TRTD)
                    {
                        If (SCME)
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.D3C
                            })
                        }

                        If ((DUID == Zero))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If ((DUID == Zero))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    If (TRTD)
                    {
                        If (SCME)
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.D3C
                            })
                        }

                        If ((DUID == Zero))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If ((DUID == Zero))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }
            }

            Method (D3CX, 0, Serialized)
            {
                ADBG ("Disable DMA RTD3 bit")
                ADBG (Concatenate ("DUID -", ToHexString (DUID)))
                DD3E = Zero
                STAT = One
            }

            Method (D3CE, 0, Serialized)
            {
                ADBG ("Enable DMA RTD3 bit")
                ADBG (Concatenate ("DUID -", ToHexString (DUID)))
                DD3E = One
                STAT = Zero
                If ((SCME == Zero))
                {
                    ALCT = One
                }
            }

            Name (SD3C, Zero)
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                ADBG (Concatenate ("TCSS DMA _DSW DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                SD3C = Arg1
                ADBG (Concatenate ("SD3C -", ToHexString (SD3C)))
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (GP1E))
                {
                    If ((GP1E != Zero))
                    {
                        Return (GPRW (0x80, 0x04))
                    }
                }

                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG (Concatenate ("TBT _DSD IMR_VALID =", ToHexString (ITIM)))
                ADBG (Concatenate ("TBT _DSD WAKE_SUPPORTED =", ToHexString (TIVS)))
                If (ITIM)
                {
                    If (TIVS)
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "IMR_VALID", 
                                    One
                                }
                            }, 

                            ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "WAKE_SUPPORTED", 
                                    One
                                }
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "IMR_VALID", 
                                    One
                                }
                            }, 

                            ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "WAKE_SUPPORTED", 
                                    Zero
                                }
                            }
                        })
                    }
                }
                ElseIf (TIVS)
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "IMR_VALID", 
                                Zero
                            }
                        }, 

                        ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "WAKE_SUPPORTED", 
                                One
                            }
                        }
                    })
                }
                Else
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "IMR_VALID", 
                                Zero
                            }
                        }, 

                        ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "WAKE_SUPPORTED", 
                                Zero
                            }
                        }
                    })
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("197db5e0-f095-4f33-b915-71dd70833e55") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (PCPN, Buffer (One)
                        {
                             0x00                                             // .
                        })
                        CreateBitField (PCPN, Zero, PCP0)
                        CreateBitField (PCPN, One, PCP1)
                        If ((DUID == Zero))
                        {
                            If ((TRE0 == One))
                            {
                                PCP0 = One
                            }

                            If ((TRE1 == One))
                            {
                                PCP1 = One
                            }
                        }
                        Else
                        {
                            If ((TRE2 == One))
                            {
                                PCP0 = One
                            }

                            If ((TRE3 == One))
                            {
                                PCP1 = One
                            }
                        }

                        Return (PCPN) /* \_SB_.PC00.TDM1._DSM.PCPN */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Name (TCAP, Buffer (One)
                        {
                             0x00                                             // .
                        })
                        CreateBitField (TCAP, Zero, IMRV)
                        CreateBitField (TCAP, One, WAKE)
                        CreateBitField (TCAP, 0x02, TVDS)
                        If (ITIM)
                        {
                            IMRV = One
                        }

                        If (TIVS)
                        {
                            WAKE = One
                        }

                        If (ITVD)
                        {
                            TVDS = One
                        }

                        Return (TCAP) /* \_SB_.PC00.TDM1._DSM.TCAP */
                    }
                }
                ElseIf ((Arg0 == Buffer (0x10)
                        {
                            /* 0000 */  0x32, 0x52, 0x42, 0x1B, 0x4C, 0x15, 0x34, 0x4F,  // 2RB.L.4O
                            /* 0008 */  0x7B, 0x9E, 0xB6, 0x5C, 0x94, 0x64, 0x94, 0xA3   // {..\.d..
                        }))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            ADBG (Concatenate ("TBT DMA _DSM DUID:", ToHexString (DUID)))
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }

                            }

                            ADBG ("return buffer 0x00")
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                        Case (One)
                        {
                            ADBG (Concatenate ("TBT DMA _DSM Func 1 DUID:", ToHexString (DUID)))
                            If ((DUID == One))
                            {
                                ADBG (Concatenate ("ITM1:", ToHexString (ITM1)))
                                Return (ITM1) /* External reference */
                            }
                            Else
                            {
                                ADBG (Concatenate ("ITM0:", ToHexString (ITM0)))
                                Return (ITM0) /* External reference */
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (STCM, 2, Serialized)
            {
                ADBG (Concatenate ("STCM DUID = ", ToHexString (DUID)))
                ADBG (Concatenate ("Requested CM mode = ", Arg0))
                ADBG (Concatenate ("Pre-boot CM Info  = ", ToHexString (Arg1)))
                Local0 = (Arg1 & 0x07)
                Local1 = One
                If (((Arg1 & 0x80) != 0x80))
                {
                    ADBG ("U4CM valid bit is not set!")
                    Return (0xFF)
                }
                Else
                {
                    SCME = Local0
                    If ((Arg0 == Local0))
                    {
                        ADBG ("Pre-boot CM mode aligns with OS preferred CM mode")
                        Local1 = Zero
                    }
                }

                If ((Local1 == One))
                {
                    If ((CHCM (Arg0) == Zero))
                    {
                        ADBG (Concatenate ("Switch CM mode success, request mode = ", Arg0))
                        SCME = Arg0
                    }
                    Else
                    {
                        ADBG (Concatenate ("Switch CM mode failure, request mode = ", Arg0))
                        Return (0xFF)
                    }
                }

                ADBG (Concatenate ("SCME - ", ToHexString (SCME)))
                Return (SCME) /* \_SB_.PC00.TDM1.SCME */
            }

            Field (DPME, DWordAcc, NoLock, Preserve)
            {
                Offset (0xC8), 
                    ,   31, 
                INFR,   1, 
                Offset (0xEC), 
                TB2P,   32, 
                P2TB,   32
            }

            Method (ITMB, 1, Serialized)
            {
                ADBG (ToHexString (_DDN))
                ADBG (Concatenate ("MailBox Cmd ", ToHexString ((Arg0 >> One))))
                Local0 = (Arg0 | One)
                P2TB = Local0
                ADBG ("Command is sent")
            }

            Method (WFCC, 1, Serialized)
            {
                WTBS (Arg0)
                P2TB = Zero
                WTBC (Arg0)
            }

            Method (WTBS, 1, Serialized)
            {
                Local0 = Arg0
                ADBG (Concatenate ("Wait TB2P to be set, DUID ", ToHexString (DUID)))
                While ((Local0 > Zero))
                {
                    If ((TB2P & One))
                    {
                        ADBG (Concatenate ("TB2P is set, DUID ", ToHexString (DUID)))
                        ADBG (Concatenate ("Wait count = ", ToHexString ((Arg0 - Local0))))
                        Break
                    }

                    Local0--
                    Sleep (One)
                }

                If ((Local0 == Zero))
                {
                    ADBG (Concatenate ("Command Timeout, DUID ", ToHexString (DUID)))
                    ADBG (Concatenate ("Timeout Value ", ToHexString (Arg0)))
                }

                Return (Local0)
            }

            Method (WTBC, 1, Serialized)
            {
                Local0 = Arg0
                ADBG (Concatenate ("Wait TB2P to be clear, DUID ", ToHexString (DUID)))
                While ((Local0 > Zero))
                {
                    If (((TB2P & One) != One))
                    {
                        ADBG (Concatenate ("TB2P is clear, DUID ", ToHexString (DUID)))
                        Break
                    }

                    Local0--
                    Sleep (One)
                }

                If ((Local0 == Zero))
                {
                    ADBG (Concatenate ("Command Timeout, DUID ", ToHexString (DUID)))
                    ADBG (Concatenate ("Timeout Value ", ToHexString (Arg0)))
                }
            }

            Method (CNTP, 0, Serialized)
            {
                ADBG (Concatenate ("TCSS Send ITBT CONNECT TOPOLOGY Cmd Start, DUID -", ToHexString (DUID)))
                Local0 = Zero
                If ((DFPE == Zero))
                {
                    DMAD = 0x22
                    DFPE = One
                    While (((INFR == Zero) && (Local0 < ITFP)))
                    {
                        Sleep (One)
                        Local0++
                    }
                }

                If ((Local0 != ITFP))
                {
                    ITMB (0x3E)
                }
                Else
                {
                    ADBG ("Force Power Timeout occurred")
                }

                If ((DFPE != Zero))
                {
                    ADBG ("Unset Force Power")
                    DFPE = Zero
                }

                ADBG (Concatenate ("TCSS Send ITBT CONNECT TOPOLOGY Cmd End, DUID -", ToHexString (DUID)))
            }

            Method (CMMB, 1, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    ADBG ("Set FW CM mode")
                    ITMB (0x44)
                }
                ElseIf ((Arg0 == One))
                {
                    ADBG ("Set SW CM mode")
                    ITMB (0x46)
                }

                Local0 = WTBS (0x01F4)
                If ((Local0 != Zero))
                {
                    ADBG ("Set CM mode done bit is set")
                    Local1 = Zero
                }
                Else
                {
                    ADBG ("Set CM mode command timeout")
                    Local1 = 0xFF
                }

                P2TB = Zero
                Return (Local1)
            }

            Method (CHCM, 1, Serialized)
            {
                ADBG (Concatenate ("iTBT CHCM - Switch CM mode to ", Arg0))
                If ((Arg0 > One))
                {
                    ADBG ("Invalid CM mode value")
                    Return (0xFF)
                }

                Local0 = Zero
                If ((DFPE == Zero))
                {
                    ADBG ("Set Force Power")
                    DMAD = 0x22
                    DFPE = One
                    While (((INFR == Zero) && (Local0 < ITFP)))
                    {
                        Sleep (One)
                        Local0++
                    }
                }
                Else
                {
                    ADBG ("Force Power has been set")
                }

                If ((Local0 != ITFP))
                {
                    Local1 = CMMB (Arg0)
                    If (((Arg0 == Zero) && (Local1 == Zero)))
                    {
                        ADBG ("Send Connect Topology command")
                        ITMB (0x3E)
                        Local2 = WTBS (ITCT)
                        If ((Local2 != Zero))
                        {
                            ADBG ("Connect topology command done bit is set")
                            Local1 = Zero
                        }
                        Else
                        {
                            ADBG ("Connect topology command timeout!")
                            Local1 = 0xFF
                        }

                        P2TB = Zero
                    }
                }
                Else
                {
                    ADBG ("Force Power Timeout occurred")
                    Local1 = 0xFF
                }

                If ((DFPE != Zero))
                {
                    ADBG ("Unset Force Power")
                    DFPE = Zero
                }

                ADBG (Concatenate ("iTBT change CM mode status = ", Local1))
                Return (Local1)
            }
        }

        Device (TRP0)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((TPA0 != Zero))
                {
                    ADBG (Concatenate ("TRP0 _ADR", ToHexString (TPA0)))
                    Return (TPA0) /* External reference */
                }
                Else
                {
                    Return (0x00070000)
                }
            }

            Name (TUID, Zero)
            Name (LTEN, Zero)
            Name (LMSL, 0x88C8)
            Name (LNSL, 0x88C8)
            Name (DCPM, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("TCSS RP0 _STA", ToHexString (TRE0)))
                If ((TRE0 == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTE0 /* External reference */
                LMSL = PSL0 /* External reference */
                LNSL = PNS0 /* External reference */
            }

            Name (PRTP, 0x08)
            Name (BCFG, Ones)
            Method (BASE, 0, NotSerialized)
            {
                If ((BCFG != Ones))
                {
                    ADBG (Concatenate ("PCIe MMIO Address ", ToHexString (BCFG)))
                    Return (BCFG) /* \_SB_.PC00.TRP0.BCFG */
                }
                Else
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port ", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    Local3 = (\_SB.PC00.GPCB () + Local2)
                    BCFG = Local3
                    ADBG (Concatenate ("PCIe MMIO Address ", ToHexString (BCFG)))
                    Return (BCFG) /* \_SB_.PC00.TRP0.BCFG */
                }
            }

            Method (GOPB, 1, NotSerialized)
            {
                Local0 = (BASE () + Arg0)
                ADBG (Concatenate ("TCSS PCIE RP register offset MMIO Address ", ToHexString (Local0)))
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, BASE (), 0x0C00)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                DLSC,   1, 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0x328), 
                STS1,   32
            }

            OperationRegion (TPCS, SystemMemory, GOPB (0x0420), 0x04)
            Field (TPCS, AnyAcc, NoLock, Preserve)
            {
                    ,   30, 
                DPGE,   1
            }

            OperationRegion (ADCS, SystemMemory, GOPB (0x05BC), 0x04)
            Field (ADCS, AnyAcc, NoLock, Preserve)
            {
                    ,   3, 
                RPER,   1, 
                RPFE,   1
            }

            OperationRegion (CCCS, SystemMemory, GOPB (RPCC), 0x20)
            Field (CCCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0x0C), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Field (CCCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0x12), 
                    ,   2, 
                L23E,   1, 
                L23R,   1
            }

            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x68), 
                    ,   10, 
                LNRE,   1, 
                Offset (0x404), 
                LSOE,   1, 
                LNSE,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x05, FUN5)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            FUN0 = One
                            FUN5 = IORB /* \IORB */
                            If ((LTEN == One))
                            {
                                FUN6 = One
                            }

                            If ((Arg1 >= 0x02))
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                            Return (OPTS) /* \_SB_.PC00.TRP0._DSM.OPTS */
                        }
                        Case (0x05)
                        {
                            If ((Arg1 >= One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.TRP0.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (GP1E))
                    {
                        If ((GP1E != Zero))
                        {
                            Return (GPRW (0xC7, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                \_SB.PC00.TDM0.SD3C = Arg1
                \_SB.PC00.TDM1.SD3C = Arg1
                ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                C2PM (Arg0, Arg1, Arg2, DCPM)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (GP1E))
                {
                    If ((GP1E != Zero))
                    {
                        Return (GPRW (0xC7, 0x04))
                    }
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (LTRC, 0, Serialized)
            {
                ADBG (Concatenate ("TCSS RP LTREN check TUID -", ToHexString (TUID)))
                If ((VDID != 0xFFFFFFFF))
                {
                    ADBG (Concatenate ("Current DCTL2 LTREN -", ToHexString (LNRE)))
                    HPSX = One
                    If ((LASX == Zero))
                    {
                        LNRE = One
                        Sleep (One)
                        LNRE = Zero
                        ADBG (Concatenate ("Toggle LTREN to TUID -", ToHexString (TUID)))
                    }
                }
            }

            Method (CRPM, 0, Serialized)
            {
                If ((VDID != 0xFFFFFFFF))
                {
                    Return (D3HT) /* \_SB_.PC00.TRP0.D3HT */
                }

                Return (0xFF)
            }

            Method (HPEV, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && HPSX))
                {
                    ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                    If (((PDCX == One) && (DLSC == One)))
                    {
                        PDCX = One
                        HPSX = One
                        Notify (^, Zero) // Bus Check
                    }
                    Else
                    {
                        HPSX = One
                    }

                    ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                }
            }

            Name (STAT, One)
            Method (D3CX, 0, Serialized)
            {
                ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                If ((STAT == One))
                {
                    Return (Zero)
                }

                ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                RPFE = Zero
                ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                RPER = Zero
                ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                L23R = One
                Local0 = Zero
                Local1 = L23R /* \_SB_.PC00.TRP0.L23R */
                While (Local1)
                {
                    If ((Local0 > 0x14))
                    {
                        Break
                    }

                    Sleep (0x05)
                    Local0++
                    Local1 = L23R /* \_SB_.PC00.TRP0.L23R */
                }

                ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                STAT = One
                Local0 = Zero
                Local1 = LASX /* \_SB_.PC00.TRP0.LASX */
                If ((PLAT > Zero))
                {
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > PLAT))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0 += 0x05
                        Local1 = LASX /* \_SB_.PC00.TRP0.LASX */
                    }
                }

                ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                ADBG (Concatenate ("PLAT -", ToHexString (PLAT)))
                ADBG ("TBT RP D3ColdExit End")
            }

            Method (D3CE, 0, Serialized)
            {
                ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                If ((STAT == Zero))
                {
                    Return (Zero)
                }

                If (((LNSE == One) || (LSOE == One)))
                {
                    If (((LASX == One) && (LNRE == Zero)))
                    {
                        LNRE = One
                        Sleep (One)
                        LNRE = Zero
                        ADBG ("Toggle LNRE -")
                    }
                }

                L23E = One
                Local0 = Zero
                Local1 = L23E /* \_SB_.PC00.TRP0.L23E */
                While (Local1)
                {
                    If ((Local0 > 0x14))
                    {
                        Break
                    }

                    Sleep (0x05)
                    Local0++
                    Local1 = L23E /* \_SB_.PC00.TRP0.L23E */
                }

                ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                STAT = Zero
                ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                RPFE = One
                ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                RPER = One
                ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                HPEV ()
                HPME ()
                If ((PMEX == One))
                {
                    ADBG ("Disable PME SCI")
                    PMEX = Zero
                }

                Sleep (PLAT)
                If (((TUID == Zero) || (TUID == One)))
                {
                    If ((\_SB.PC00.TDM0.WACT == One))
                    {
                        \_SB.PC00.TDM0.WACT = 0x02
                        \_SB.PC00.TDM0.WFCC (ITCT)
                        \_SB.PC00.TDM0.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM0.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }
                }
                ElseIf ((\_SB.PC00.TDM1.WACT == One))
                {
                    \_SB.PC00.TDM1.WACT = 0x02
                    \_SB.PC00.TDM1.WFCC (ITCT)
                    \_SB.PC00.TDM1.WACT = Zero
                }
                ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                {
                    ADBG ("Wait until other _PS0 get response")
                    While ((\_SB.PC00.TDM1.WACT != Zero))
                    {
                        Sleep (0x05)
                    }

                    ADBG ("Other _PS0 got response")
                }

                ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                CHKH ()
                If ((HPEX == Zero))
                {
                    ADBG ("Enable Hot Plug SCI")
                    HPEX = One
                    HPEV ()
                }

                If ((PMEX == Zero))
                {
                    ADBG ("Enable PME SCI")
                    PMEX = One
                    HPME ()
                }

                ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
            }

            Method (CHKH, 0, NotSerialized)
            {
                If ((PDCX == One))
                {
                    ADBG ("PDC get set before enable HotPlug SCI")
                    If ((DLSC == Zero))
                    {
                        ADBG ("Clear PDC since it is not a real hotplug")
                        PDCX = One
                    }
                }
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG ("TBT RP _DSD")
                ADBG (Concatenate ("TUID = ", ToHexString (TUID)))
                If (CondRefOf (U4SE))
                {
                    If ((U4SE == Zero))
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }
                        })
                    }
                }

                If ((((TUID == Zero) || (TUID == One)) && (DME0 == One)))
                {
                    Return (Package (0x06)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }, 

                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "usb4-host-interface", 
                                \_SB.PC00.TDM0
                            }, 

                            Package (0x02)
                            {
                                "usb4-port-number", 
                                TUID
                            }
                        }
                    })
                }
                ElseIf ((((TUID == 0x02) || (TUID == 0x03)) && (DME1 == 
                    One)))
                {
                    Return (Package (0x06)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }, 

                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "usb4-host-interface", 
                                \_SB.PC00.TDM1
                            }, 

                            Package (0x02)
                            {
                                "usb4-port-number", 
                                TUID
                            }
                        }
                    })
                }
                Else
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }
                    })
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If (ITRT)
                {
                    Return (0x04)
                }
                Else
                {
                    Return (0x03)
                }
            }

            If (ITRT)
            {
                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    If (TRTD)
                    {
                        If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.D3C
                            })
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If (((TUID == Zero) || (TUID == One)))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    If (TRTD)
                    {
                        If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.D3C
                            })
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If (((TUID == Zero) || (TUID == One)))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }
            }

            Method (HPME, 0, Serialized)
            {
                ADBG ("TBT HPME")
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    ADBG ("TBT RP exists")
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                    Return (One)
                }

                Return (Zero)
            }

            Name (AR01, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                Return (AR01) /* \_SB_.PC00.TRP0.AR01 */
            }
        }

        Device (TRP1)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((TPA1 != Zero))
                {
                    ADBG (Concatenate ("TRP1 _ADR", ToHexString (TPA1)))
                    Return (TPA1) /* External reference */
                }
                Else
                {
                    Return (0x00070001)
                }
            }

            Name (TUID, One)
            Name (LTEN, Zero)
            Name (LMSL, 0x88C8)
            Name (LNSL, 0x88C8)
            Name (DCPM, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("TCSS RP1 _STA", ToHexString (TRE1)))
                If ((TRE1 == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTE1 /* External reference */
                LMSL = PSL1 /* External reference */
                LNSL = PNS1 /* External reference */
            }

            Name (PRTP, 0x08)
            Name (BCFG, Ones)
            Method (BASE, 0, NotSerialized)
            {
                If ((BCFG != Ones))
                {
                    ADBG (Concatenate ("PCIe MMIO Address ", ToHexString (BCFG)))
                    Return (BCFG) /* \_SB_.PC00.TRP1.BCFG */
                }
                Else
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port ", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    Local3 = (\_SB.PC00.GPCB () + Local2)
                    BCFG = Local3
                    ADBG (Concatenate ("PCIe MMIO Address ", ToHexString (BCFG)))
                    Return (BCFG) /* \_SB_.PC00.TRP1.BCFG */
                }
            }

            Method (GOPB, 1, NotSerialized)
            {
                Local0 = (BASE () + Arg0)
                ADBG (Concatenate ("TCSS PCIE RP register offset MMIO Address ", ToHexString (Local0)))
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, BASE (), 0x0C00)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                DLSC,   1, 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0x328), 
                STS1,   32
            }

            OperationRegion (TPCS, SystemMemory, GOPB (0x0420), 0x04)
            Field (TPCS, AnyAcc, NoLock, Preserve)
            {
                    ,   30, 
                DPGE,   1
            }

            OperationRegion (ADCS, SystemMemory, GOPB (0x05BC), 0x04)
            Field (ADCS, AnyAcc, NoLock, Preserve)
            {
                    ,   3, 
                RPER,   1, 
                RPFE,   1
            }

            OperationRegion (CCCS, SystemMemory, GOPB (RPCC), 0x20)
            Field (CCCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0x0C), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Field (CCCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0x12), 
                    ,   2, 
                L23E,   1, 
                L23R,   1
            }

            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x68), 
                    ,   10, 
                LNRE,   1, 
                Offset (0x404), 
                LSOE,   1, 
                LNSE,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x05, FUN5)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            FUN0 = One
                            FUN5 = IORB /* \IORB */
                            If ((LTEN == One))
                            {
                                FUN6 = One
                            }

                            If ((Arg1 >= 0x02))
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                            Return (OPTS) /* \_SB_.PC00.TRP1._DSM.OPTS */
                        }
                        Case (0x05)
                        {
                            If ((Arg1 >= One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.TRP1.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (GP1E))
                    {
                        If ((GP1E != Zero))
                        {
                            Return (GPRW (0xC7, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                \_SB.PC00.TDM0.SD3C = Arg1
                \_SB.PC00.TDM1.SD3C = Arg1
                ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                C2PM (Arg0, Arg1, Arg2, DCPM)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (GP1E))
                {
                    If ((GP1E != Zero))
                    {
                        Return (GPRW (0xC7, 0x04))
                    }
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (LTRC, 0, Serialized)
            {
                ADBG (Concatenate ("TCSS RP LTREN check TUID -", ToHexString (TUID)))
                If ((VDID != 0xFFFFFFFF))
                {
                    ADBG (Concatenate ("Current DCTL2 LTREN -", ToHexString (LNRE)))
                    HPSX = One
                    If ((LASX == Zero))
                    {
                        LNRE = One
                        Sleep (One)
                        LNRE = Zero
                        ADBG (Concatenate ("Toggle LTREN to TUID -", ToHexString (TUID)))
                    }
                }
            }

            Method (CRPM, 0, Serialized)
            {
                If ((VDID != 0xFFFFFFFF))
                {
                    Return (D3HT) /* \_SB_.PC00.TRP1.D3HT */
                }

                Return (0xFF)
            }

            Method (HPEV, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && HPSX))
                {
                    ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                    If (((PDCX == One) && (DLSC == One)))
                    {
                        PDCX = One
                        HPSX = One
                        Notify (^, Zero) // Bus Check
                    }
                    Else
                    {
                        HPSX = One
                    }

                    ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                }
            }

            Name (STAT, One)
            Method (D3CX, 0, Serialized)
            {
                ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                If ((STAT == One))
                {
                    Return (Zero)
                }

                ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                RPFE = Zero
                ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                RPER = Zero
                ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                L23R = One
                Local0 = Zero
                Local1 = L23R /* \_SB_.PC00.TRP1.L23R */
                While (Local1)
                {
                    If ((Local0 > 0x14))
                    {
                        Break
                    }

                    Sleep (0x05)
                    Local0++
                    Local1 = L23R /* \_SB_.PC00.TRP1.L23R */
                }

                ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                STAT = One
                Local0 = Zero
                Local1 = LASX /* \_SB_.PC00.TRP1.LASX */
                If ((PLAT > Zero))
                {
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > PLAT))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0 += 0x05
                        Local1 = LASX /* \_SB_.PC00.TRP1.LASX */
                    }
                }

                ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                ADBG (Concatenate ("PLAT -", ToHexString (PLAT)))
                ADBG ("TBT RP D3ColdExit End")
            }

            Method (D3CE, 0, Serialized)
            {
                ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                If ((STAT == Zero))
                {
                    Return (Zero)
                }

                If (((LNSE == One) || (LSOE == One)))
                {
                    If (((LASX == One) && (LNRE == Zero)))
                    {
                        LNRE = One
                        Sleep (One)
                        LNRE = Zero
                        ADBG ("Toggle LNRE -")
                    }
                }

                L23E = One
                Local0 = Zero
                Local1 = L23E /* \_SB_.PC00.TRP1.L23E */
                While (Local1)
                {
                    If ((Local0 > 0x14))
                    {
                        Break
                    }

                    Sleep (0x05)
                    Local0++
                    Local1 = L23E /* \_SB_.PC00.TRP1.L23E */
                }

                ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                STAT = Zero
                ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                RPFE = One
                ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                RPER = One
                ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                HPEV ()
                HPME ()
                If ((PMEX == One))
                {
                    ADBG ("Disable PME SCI")
                    PMEX = Zero
                }

                Sleep (PLAT)
                If (((TUID == Zero) || (TUID == One)))
                {
                    If ((\_SB.PC00.TDM0.WACT == One))
                    {
                        \_SB.PC00.TDM0.WACT = 0x02
                        \_SB.PC00.TDM0.WFCC (ITCT)
                        \_SB.PC00.TDM0.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM0.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }
                }
                ElseIf ((\_SB.PC00.TDM1.WACT == One))
                {
                    \_SB.PC00.TDM1.WACT = 0x02
                    \_SB.PC00.TDM1.WFCC (ITCT)
                    \_SB.PC00.TDM1.WACT = Zero
                }
                ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                {
                    ADBG ("Wait until other _PS0 get response")
                    While ((\_SB.PC00.TDM1.WACT != Zero))
                    {
                        Sleep (0x05)
                    }

                    ADBG ("Other _PS0 got response")
                }

                ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                CHKH ()
                If ((HPEX == Zero))
                {
                    ADBG ("Enable Hot Plug SCI")
                    HPEX = One
                    HPEV ()
                }

                If ((PMEX == Zero))
                {
                    ADBG ("Enable PME SCI")
                    PMEX = One
                    HPME ()
                }

                ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
            }

            Method (CHKH, 0, NotSerialized)
            {
                If ((PDCX == One))
                {
                    ADBG ("PDC get set before enable HotPlug SCI")
                    If ((DLSC == Zero))
                    {
                        ADBG ("Clear PDC since it is not a real hotplug")
                        PDCX = One
                    }
                }
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG ("TBT RP _DSD")
                ADBG (Concatenate ("TUID = ", ToHexString (TUID)))
                If (CondRefOf (U4SE))
                {
                    If ((U4SE == Zero))
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }
                        })
                    }
                }

                If ((((TUID == Zero) || (TUID == One)) && (DME0 == One)))
                {
                    Return (Package (0x06)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }, 

                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "usb4-host-interface", 
                                \_SB.PC00.TDM0
                            }, 

                            Package (0x02)
                            {
                                "usb4-port-number", 
                                TUID
                            }
                        }
                    })
                }
                ElseIf ((((TUID == 0x02) || (TUID == 0x03)) && (DME1 == 
                    One)))
                {
                    Return (Package (0x06)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }, 

                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "usb4-host-interface", 
                                \_SB.PC00.TDM1
                            }, 

                            Package (0x02)
                            {
                                "usb4-port-number", 
                                TUID
                            }
                        }
                    })
                }
                Else
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }
                    })
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If (ITRT)
                {
                    Return (0x04)
                }
                Else
                {
                    Return (0x03)
                }
            }

            If (ITRT)
            {
                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    If (TRTD)
                    {
                        If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.D3C
                            })
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If (((TUID == Zero) || (TUID == One)))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    If (TRTD)
                    {
                        If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.D3C
                            })
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If (((TUID == Zero) || (TUID == One)))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }
            }

            Method (HPME, 0, Serialized)
            {
                ADBG ("TBT HPME")
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    ADBG ("TBT RP exists")
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                    Return (One)
                }

                Return (Zero)
            }

            Name (AR01, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                Return (AR01) /* \_SB_.PC00.TRP1.AR01 */
            }
        }

        Device (TRP2)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((TPA2 != Zero))
                {
                    ADBG (Concatenate ("TRP2 _ADR", ToHexString (TPA2)))
                    Return (TPA2) /* External reference */
                }
                Else
                {
                    Return (0x00070002)
                }
            }

            Name (TUID, 0x02)
            Name (LTEN, Zero)
            Name (LMSL, 0x88C8)
            Name (LNSL, 0x88C8)
            Name (DCPM, 0x02)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("TCSS RP2 _STA", ToHexString (TRE2)))
                If ((TRE2 == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTE2 /* External reference */
                LMSL = PSL2 /* External reference */
                LNSL = PNS2 /* External reference */
            }

            Name (PRTP, 0x08)
            Name (BCFG, Ones)
            Method (BASE, 0, NotSerialized)
            {
                If ((BCFG != Ones))
                {
                    ADBG (Concatenate ("PCIe MMIO Address ", ToHexString (BCFG)))
                    Return (BCFG) /* \_SB_.PC00.TRP2.BCFG */
                }
                Else
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port ", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    Local3 = (\_SB.PC00.GPCB () + Local2)
                    BCFG = Local3
                    ADBG (Concatenate ("PCIe MMIO Address ", ToHexString (BCFG)))
                    Return (BCFG) /* \_SB_.PC00.TRP2.BCFG */
                }
            }

            Method (GOPB, 1, NotSerialized)
            {
                Local0 = (BASE () + Arg0)
                ADBG (Concatenate ("TCSS PCIE RP register offset MMIO Address ", ToHexString (Local0)))
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, BASE (), 0x0C00)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                DLSC,   1, 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0x328), 
                STS1,   32
            }

            OperationRegion (TPCS, SystemMemory, GOPB (0x0420), 0x04)
            Field (TPCS, AnyAcc, NoLock, Preserve)
            {
                    ,   30, 
                DPGE,   1
            }

            OperationRegion (ADCS, SystemMemory, GOPB (0x05BC), 0x04)
            Field (ADCS, AnyAcc, NoLock, Preserve)
            {
                    ,   3, 
                RPER,   1, 
                RPFE,   1
            }

            OperationRegion (CCCS, SystemMemory, GOPB (RPCC), 0x20)
            Field (CCCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0x0C), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Field (CCCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0x12), 
                    ,   2, 
                L23E,   1, 
                L23R,   1
            }

            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x68), 
                    ,   10, 
                LNRE,   1, 
                Offset (0x404), 
                LSOE,   1, 
                LNSE,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x05, FUN5)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            FUN0 = One
                            FUN5 = IORB /* \IORB */
                            If ((LTEN == One))
                            {
                                FUN6 = One
                            }

                            If ((Arg1 >= 0x02))
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                            Return (OPTS) /* \_SB_.PC00.TRP2._DSM.OPTS */
                        }
                        Case (0x05)
                        {
                            If ((Arg1 >= One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.TRP2.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (GP1E))
                    {
                        If ((GP1E != Zero))
                        {
                            Return (GPRW (0xC7, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                \_SB.PC00.TDM0.SD3C = Arg1
                \_SB.PC00.TDM1.SD3C = Arg1
                ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                C2PM (Arg0, Arg1, Arg2, DCPM)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (GP1E))
                {
                    If ((GP1E != Zero))
                    {
                        Return (GPRW (0xC7, 0x04))
                    }
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (LTRC, 0, Serialized)
            {
                ADBG (Concatenate ("TCSS RP LTREN check TUID -", ToHexString (TUID)))
                If ((VDID != 0xFFFFFFFF))
                {
                    ADBG (Concatenate ("Current DCTL2 LTREN -", ToHexString (LNRE)))
                    HPSX = One
                    If ((LASX == Zero))
                    {
                        LNRE = One
                        Sleep (One)
                        LNRE = Zero
                        ADBG (Concatenate ("Toggle LTREN to TUID -", ToHexString (TUID)))
                    }
                }
            }

            Method (CRPM, 0, Serialized)
            {
                If ((VDID != 0xFFFFFFFF))
                {
                    Return (D3HT) /* \_SB_.PC00.TRP2.D3HT */
                }

                Return (0xFF)
            }

            Method (HPEV, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && HPSX))
                {
                    ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                    If (((PDCX == One) && (DLSC == One)))
                    {
                        PDCX = One
                        HPSX = One
                        Notify (^, Zero) // Bus Check
                    }
                    Else
                    {
                        HPSX = One
                    }

                    ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                }
            }

            Name (STAT, One)
            Method (D3CX, 0, Serialized)
            {
                ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                If ((STAT == One))
                {
                    Return (Zero)
                }

                ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                RPFE = Zero
                ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                RPER = Zero
                ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                L23R = One
                Local0 = Zero
                Local1 = L23R /* \_SB_.PC00.TRP2.L23R */
                While (Local1)
                {
                    If ((Local0 > 0x14))
                    {
                        Break
                    }

                    Sleep (0x05)
                    Local0++
                    Local1 = L23R /* \_SB_.PC00.TRP2.L23R */
                }

                ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                STAT = One
                Local0 = Zero
                Local1 = LASX /* \_SB_.PC00.TRP2.LASX */
                If ((PLAT > Zero))
                {
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > PLAT))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0 += 0x05
                        Local1 = LASX /* \_SB_.PC00.TRP2.LASX */
                    }
                }

                ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                ADBG (Concatenate ("PLAT -", ToHexString (PLAT)))
                ADBG ("TBT RP D3ColdExit End")
            }

            Method (D3CE, 0, Serialized)
            {
                ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                If ((STAT == Zero))
                {
                    Return (Zero)
                }

                If (((LNSE == One) || (LSOE == One)))
                {
                    If (((LASX == One) && (LNRE == Zero)))
                    {
                        LNRE = One
                        Sleep (One)
                        LNRE = Zero
                        ADBG ("Toggle LNRE -")
                    }
                }

                L23E = One
                Local0 = Zero
                Local1 = L23E /* \_SB_.PC00.TRP2.L23E */
                While (Local1)
                {
                    If ((Local0 > 0x14))
                    {
                        Break
                    }

                    Sleep (0x05)
                    Local0++
                    Local1 = L23E /* \_SB_.PC00.TRP2.L23E */
                }

                ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                STAT = Zero
                ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                RPFE = One
                ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                RPER = One
                ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                HPEV ()
                HPME ()
                If ((PMEX == One))
                {
                    ADBG ("Disable PME SCI")
                    PMEX = Zero
                }

                Sleep (PLAT)
                If (((TUID == Zero) || (TUID == One)))
                {
                    If ((\_SB.PC00.TDM0.WACT == One))
                    {
                        \_SB.PC00.TDM0.WACT = 0x02
                        \_SB.PC00.TDM0.WFCC (ITCT)
                        \_SB.PC00.TDM0.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM0.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }
                }
                ElseIf ((\_SB.PC00.TDM1.WACT == One))
                {
                    \_SB.PC00.TDM1.WACT = 0x02
                    \_SB.PC00.TDM1.WFCC (ITCT)
                    \_SB.PC00.TDM1.WACT = Zero
                }
                ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                {
                    ADBG ("Wait until other _PS0 get response")
                    While ((\_SB.PC00.TDM1.WACT != Zero))
                    {
                        Sleep (0x05)
                    }

                    ADBG ("Other _PS0 got response")
                }

                ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                CHKH ()
                If ((HPEX == Zero))
                {
                    ADBG ("Enable Hot Plug SCI")
                    HPEX = One
                    HPEV ()
                }

                If ((PMEX == Zero))
                {
                    ADBG ("Enable PME SCI")
                    PMEX = One
                    HPME ()
                }

                ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
            }

            Method (CHKH, 0, NotSerialized)
            {
                If ((PDCX == One))
                {
                    ADBG ("PDC get set before enable HotPlug SCI")
                    If ((DLSC == Zero))
                    {
                        ADBG ("Clear PDC since it is not a real hotplug")
                        PDCX = One
                    }
                }
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG ("TBT RP _DSD")
                ADBG (Concatenate ("TUID = ", ToHexString (TUID)))
                If (CondRefOf (U4SE))
                {
                    If ((U4SE == Zero))
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }
                        })
                    }
                }

                If ((((TUID == Zero) || (TUID == One)) && (DME0 == One)))
                {
                    Return (Package (0x06)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }, 

                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "usb4-host-interface", 
                                \_SB.PC00.TDM0
                            }, 

                            Package (0x02)
                            {
                                "usb4-port-number", 
                                TUID
                            }
                        }
                    })
                }
                ElseIf ((((TUID == 0x02) || (TUID == 0x03)) && (DME1 == 
                    One)))
                {
                    Return (Package (0x06)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }, 

                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "usb4-host-interface", 
                                \_SB.PC00.TDM1
                            }, 

                            Package (0x02)
                            {
                                "usb4-port-number", 
                                TUID
                            }
                        }
                    })
                }
                Else
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }
                    })
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If (ITRT)
                {
                    Return (0x04)
                }
                Else
                {
                    Return (0x03)
                }
            }

            If (ITRT)
            {
                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    If (TRTD)
                    {
                        If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.D3C
                            })
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If (((TUID == Zero) || (TUID == One)))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    If (TRTD)
                    {
                        If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.D3C
                            })
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If (((TUID == Zero) || (TUID == One)))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }
            }

            Method (HPME, 0, Serialized)
            {
                ADBG ("TBT HPME")
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    ADBG ("TBT RP exists")
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                    Return (One)
                }

                Return (Zero)
            }

            Name (AR01, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                Return (AR01) /* \_SB_.PC00.TRP2.AR01 */
            }
        }

        Device (TRP3)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((TPA3 != Zero))
                {
                    ADBG (Concatenate ("TRP3 _ADR", ToHexString (TPA3)))
                    Return (TPA3) /* External reference */
                }
                Else
                {
                    Return (0x00070003)
                }
            }

            Name (TUID, 0x03)
            Name (LTEN, Zero)
            Name (LMSL, 0x88C8)
            Name (LNSL, 0x88C8)
            Name (DCPM, 0x03)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("TCSS RP3 _STA", ToHexString (TRE3)))
                If ((TRE3 == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTE3 /* External reference */
                LMSL = PSL3 /* External reference */
                LNSL = PNS3 /* External reference */
            }

            Name (PRTP, 0x08)
            Name (BCFG, Ones)
            Method (BASE, 0, NotSerialized)
            {
                If ((BCFG != Ones))
                {
                    ADBG (Concatenate ("PCIe MMIO Address ", ToHexString (BCFG)))
                    Return (BCFG) /* \_SB_.PC00.TRP3.BCFG */
                }
                Else
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port ", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    Local3 = (\_SB.PC00.GPCB () + Local2)
                    BCFG = Local3
                    ADBG (Concatenate ("PCIe MMIO Address ", ToHexString (BCFG)))
                    Return (BCFG) /* \_SB_.PC00.TRP3.BCFG */
                }
            }

            Method (GOPB, 1, NotSerialized)
            {
                Local0 = (BASE () + Arg0)
                ADBG (Concatenate ("TCSS PCIE RP register offset MMIO Address ", ToHexString (Local0)))
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, BASE (), 0x0C00)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                DLSC,   1, 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0x328), 
                STS1,   32
            }

            OperationRegion (TPCS, SystemMemory, GOPB (0x0420), 0x04)
            Field (TPCS, AnyAcc, NoLock, Preserve)
            {
                    ,   30, 
                DPGE,   1
            }

            OperationRegion (ADCS, SystemMemory, GOPB (0x05BC), 0x04)
            Field (ADCS, AnyAcc, NoLock, Preserve)
            {
                    ,   3, 
                RPER,   1, 
                RPFE,   1
            }

            OperationRegion (CCCS, SystemMemory, GOPB (RPCC), 0x20)
            Field (CCCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0x0C), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Field (CCCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0x12), 
                    ,   2, 
                L23E,   1, 
                L23R,   1
            }

            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x68), 
                    ,   10, 
                LNRE,   1, 
                Offset (0x404), 
                LSOE,   1, 
                LNSE,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x05, FUN5)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            FUN0 = One
                            FUN5 = IORB /* \IORB */
                            If ((LTEN == One))
                            {
                                FUN6 = One
                            }

                            If ((Arg1 >= 0x02))
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                            Return (OPTS) /* \_SB_.PC00.TRP3._DSM.OPTS */
                        }
                        Case (0x05)
                        {
                            If ((Arg1 >= One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.TRP3.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (GP1E))
                    {
                        If ((GP1E != Zero))
                        {
                            Return (GPRW (0xC7, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                \_SB.PC00.TDM0.SD3C = Arg1
                \_SB.PC00.TDM1.SD3C = Arg1
                ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                C2PM (Arg0, Arg1, Arg2, DCPM)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (GP1E))
                {
                    If ((GP1E != Zero))
                    {
                        Return (GPRW (0xC7, 0x04))
                    }
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (LTRC, 0, Serialized)
            {
                ADBG (Concatenate ("TCSS RP LTREN check TUID -", ToHexString (TUID)))
                If ((VDID != 0xFFFFFFFF))
                {
                    ADBG (Concatenate ("Current DCTL2 LTREN -", ToHexString (LNRE)))
                    HPSX = One
                    If ((LASX == Zero))
                    {
                        LNRE = One
                        Sleep (One)
                        LNRE = Zero
                        ADBG (Concatenate ("Toggle LTREN to TUID -", ToHexString (TUID)))
                    }
                }
            }

            Method (CRPM, 0, Serialized)
            {
                If ((VDID != 0xFFFFFFFF))
                {
                    Return (D3HT) /* \_SB_.PC00.TRP3.D3HT */
                }

                Return (0xFF)
            }

            Method (HPEV, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && HPSX))
                {
                    ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                    If (((PDCX == One) && (DLSC == One)))
                    {
                        PDCX = One
                        HPSX = One
                        Notify (^, Zero) // Bus Check
                    }
                    Else
                    {
                        HPSX = One
                    }

                    ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                }
            }

            Name (STAT, One)
            Method (D3CX, 0, Serialized)
            {
                ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                If ((STAT == One))
                {
                    Return (Zero)
                }

                ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                RPFE = Zero
                ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                RPER = Zero
                ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                L23R = One
                Local0 = Zero
                Local1 = L23R /* \_SB_.PC00.TRP3.L23R */
                While (Local1)
                {
                    If ((Local0 > 0x14))
                    {
                        Break
                    }

                    Sleep (0x05)
                    Local0++
                    Local1 = L23R /* \_SB_.PC00.TRP3.L23R */
                }

                ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                STAT = One
                Local0 = Zero
                Local1 = LASX /* \_SB_.PC00.TRP3.LASX */
                If ((PLAT > Zero))
                {
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > PLAT))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0 += 0x05
                        Local1 = LASX /* \_SB_.PC00.TRP3.LASX */
                    }
                }

                ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                ADBG (Concatenate ("PLAT -", ToHexString (PLAT)))
                ADBG ("TBT RP D3ColdExit End")
            }

            Method (D3CE, 0, Serialized)
            {
                ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                If ((STAT == Zero))
                {
                    Return (Zero)
                }

                If (((LNSE == One) || (LSOE == One)))
                {
                    If (((LASX == One) && (LNRE == Zero)))
                    {
                        LNRE = One
                        Sleep (One)
                        LNRE = Zero
                        ADBG ("Toggle LNRE -")
                    }
                }

                L23E = One
                Local0 = Zero
                Local1 = L23E /* \_SB_.PC00.TRP3.L23E */
                While (Local1)
                {
                    If ((Local0 > 0x14))
                    {
                        Break
                    }

                    Sleep (0x05)
                    Local0++
                    Local1 = L23E /* \_SB_.PC00.TRP3.L23E */
                }

                ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                STAT = Zero
                ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                RPFE = One
                ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                RPER = One
                ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                HPEV ()
                HPME ()
                If ((PMEX == One))
                {
                    ADBG ("Disable PME SCI")
                    PMEX = Zero
                }

                Sleep (PLAT)
                If (((TUID == Zero) || (TUID == One)))
                {
                    If ((\_SB.PC00.TDM0.WACT == One))
                    {
                        \_SB.PC00.TDM0.WACT = 0x02
                        \_SB.PC00.TDM0.WFCC (ITCT)
                        \_SB.PC00.TDM0.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM0.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }
                }
                ElseIf ((\_SB.PC00.TDM1.WACT == One))
                {
                    \_SB.PC00.TDM1.WACT = 0x02
                    \_SB.PC00.TDM1.WFCC (ITCT)
                    \_SB.PC00.TDM1.WACT = Zero
                }
                ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                {
                    ADBG ("Wait until other _PS0 get response")
                    While ((\_SB.PC00.TDM1.WACT != Zero))
                    {
                        Sleep (0x05)
                    }

                    ADBG ("Other _PS0 got response")
                }

                ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                CHKH ()
                If ((HPEX == Zero))
                {
                    ADBG ("Enable Hot Plug SCI")
                    HPEX = One
                    HPEV ()
                }

                If ((PMEX == Zero))
                {
                    ADBG ("Enable PME SCI")
                    PMEX = One
                    HPME ()
                }

                ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
            }

            Method (CHKH, 0, NotSerialized)
            {
                If ((PDCX == One))
                {
                    ADBG ("PDC get set before enable HotPlug SCI")
                    If ((DLSC == Zero))
                    {
                        ADBG ("Clear PDC since it is not a real hotplug")
                        PDCX = One
                    }
                }
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG ("TBT RP _DSD")
                ADBG (Concatenate ("TUID = ", ToHexString (TUID)))
                If (CondRefOf (U4SE))
                {
                    If ((U4SE == Zero))
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "HotPlugSupportInD3", 
                                    One
                                }
                            }, 

                            ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                            Package (0x02)
                            {
                                Package (0x02)
                                {
                                    "ExternalFacingPort", 
                                    One
                                }, 

                                Package (0x02)
                                {
                                    "UID", 
                                    TUID
                                }
                            }
                        })
                    }
                }

                If ((((TUID == Zero) || (TUID == One)) && (DME0 == One)))
                {
                    Return (Package (0x06)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }, 

                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "usb4-host-interface", 
                                \_SB.PC00.TDM0
                            }, 

                            Package (0x02)
                            {
                                "usb4-port-number", 
                                TUID
                            }
                        }
                    })
                }
                ElseIf ((((TUID == 0x02) || (TUID == 0x03)) && (DME1 == 
                    One)))
                {
                    Return (Package (0x06)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }, 

                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "usb4-host-interface", 
                                \_SB.PC00.TDM1
                            }, 

                            Package (0x02)
                            {
                                "usb4-port-number", 
                                TUID
                            }
                        }
                    })
                }
                Else
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }
                    })
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If (ITRT)
                {
                    Return (0x04)
                }
                Else
                {
                    Return (0x03)
                }
            }

            If (ITRT)
            {
                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    If (TRTD)
                    {
                        If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.D3C
                            })
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If (((TUID == Zero) || (TUID == One)))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    If (TRTD)
                    {
                        If (((\_SB.PC00.TDM0.SCME == One) || (\_SB.PC00.TDM1.SCME == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.D3C
                            })
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If (((TUID == Zero) || (TUID == One)))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }
            }

            Method (HPME, 0, Serialized)
            {
                ADBG ("TBT HPME")
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    ADBG ("TBT RP exists")
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                    Return (One)
                }

                Return (Zero)
            }

            Name (AR01, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                Return (AR01) /* \_SB_.PC00.TRP3.AR01 */
            }
        }
    }
}



SSDT19
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApCst", 0x00003000)
{
    External (_SB_.PR00._CST, UnknownObj)
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)
    External (_SB_.PR24, DeviceObj)
    External (_SB_.PR25, DeviceObj)
    External (_SB_.PR26, DeviceObj)
    External (_SB_.PR27, DeviceObj)
    External (_SB_.PR28, DeviceObj)
    External (_SB_.PR29, DeviceObj)
    External (_SB_.PR30, DeviceObj)
    External (_SB_.PR31, DeviceObj)
    External (_SB_.PR32, DeviceObj)
    External (_SB_.PR33, DeviceObj)
    External (_SB_.PR34, DeviceObj)
    External (_SB_.PR35, DeviceObj)
    External (_SB_.PR36, DeviceObj)
    External (_SB_.PR37, DeviceObj)
    External (_SB_.PR38, DeviceObj)
    External (_SB_.PR39, DeviceObj)
    External (_SB_.PR40, DeviceObj)
    External (_SB_.PR41, DeviceObj)
    External (_SB_.PR42, DeviceObj)
    External (_SB_.PR43, DeviceObj)
    External (_SB_.PR44, DeviceObj)
    External (_SB_.PR45, DeviceObj)
    External (_SB_.PR46, DeviceObj)
    External (_SB_.PR47, DeviceObj)
    External (_SB_.PR48, DeviceObj)
    External (_SB_.PR49, DeviceObj)
    External (_SB_.PR50, DeviceObj)
    External (_SB_.PR51, DeviceObj)
    External (_SB_.PR52, DeviceObj)
    External (_SB_.PR53, DeviceObj)
    External (_SB_.PR54, DeviceObj)
    External (_SB_.PR55, DeviceObj)
    External (_SB_.PR56, DeviceObj)
    External (_SB_.PR57, DeviceObj)
    External (_SB_.PR58, DeviceObj)
    External (_SB_.PR59, DeviceObj)
    External (_SB_.PR60, DeviceObj)
    External (_SB_.PR61, DeviceObj)
    External (_SB_.PR62, DeviceObj)
    External (_SB_.PR63, DeviceObj)

    If (CondRefOf (\_SB.PR01))
    {
        Scope (\_SB.PR01)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR02))
    {
        Scope (\_SB.PR02)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR03))
    {
        Scope (\_SB.PR03)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR04))
    {
        Scope (\_SB.PR04)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR05))
    {
        Scope (\_SB.PR05)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR06))
    {
        Scope (\_SB.PR06)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR07))
    {
        Scope (\_SB.PR07)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR08))
    {
        Scope (\_SB.PR08)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR09))
    {
        Scope (\_SB.PR09)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR10))
    {
        Scope (\_SB.PR10)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR11))
    {
        Scope (\_SB.PR11)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR12))
    {
        Scope (\_SB.PR12)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR13))
    {
        Scope (\_SB.PR13)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR14))
    {
        Scope (\_SB.PR14)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR15))
    {
        Scope (\_SB.PR15)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR16))
    {
        Scope (\_SB.PR16)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR17))
    {
        Scope (\_SB.PR17)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR18))
    {
        Scope (\_SB.PR18)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR19))
    {
        Scope (\_SB.PR19)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR20))
    {
        Scope (\_SB.PR20)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR21))
    {
        Scope (\_SB.PR21)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR22))
    {
        Scope (\_SB.PR22)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR23))
    {
        Scope (\_SB.PR23)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR24))
    {
        Scope (\_SB.PR24)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR25))
    {
        Scope (\_SB.PR25)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR26))
    {
        Scope (\_SB.PR26)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR27))
    {
        Scope (\_SB.PR27)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR28))
    {
        Scope (\_SB.PR28)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR29))
    {
        Scope (\_SB.PR29)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR30))
    {
        Scope (\_SB.PR30)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR31))
    {
        Scope (\_SB.PR31)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR32))
    {
        Scope (\_SB.PR32)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR33))
    {
        Scope (\_SB.PR33)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR34))
    {
        Scope (\_SB.PR34)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR35))
    {
        Scope (\_SB.PR35)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR36))
    {
        Scope (\_SB.PR36)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR37))
    {
        Scope (\_SB.PR37)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR38))
    {
        Scope (\_SB.PR38)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR39))
    {
        Scope (\_SB.PR39)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR40))
    {
        Scope (\_SB.PR40)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR41))
    {
        Scope (\_SB.PR41)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR42))
    {
        Scope (\_SB.PR42)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR43))
    {
        Scope (\_SB.PR43)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR44))
    {
        Scope (\_SB.PR44)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR45))
    {
        Scope (\_SB.PR45)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR46))
    {
        Scope (\_SB.PR46)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR47))
    {
        Scope (\_SB.PR47)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR48))
    {
        Scope (\_SB.PR48)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR49))
    {
        Scope (\_SB.PR49)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR50))
    {
        Scope (\_SB.PR50)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR51))
    {
        Scope (\_SB.PR51)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR52))
    {
        Scope (\_SB.PR52)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR53))
    {
        Scope (\_SB.PR53)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR54))
    {
        Scope (\_SB.PR54)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR55))
    {
        Scope (\_SB.PR55)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR56))
    {
        Scope (\_SB.PR56)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR57))
    {
        Scope (\_SB.PR57)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR58))
    {
        Scope (\_SB.PR58)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR59))
    {
        Scope (\_SB.PR59)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR60))
    {
        Scope (\_SB.PR60)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR61))
    {
        Scope (\_SB.PR61)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR62))
    {
        Scope (\_SB.PR62)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }

    If (CondRefOf (\_SB.PR63))
    {
        Scope (\_SB.PR63)
        {
            Method (_CST, 0, NotSerialized)  // _CST: C-States
            {
                Return (\_SB.PR00._CST) /* External reference */
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Hwp", 0x00003000)
{
    External (_SB_.CFGD, IntObj)
    External (_SB_.HWPE, IntObj)
    External (_SB_.HWPV, IntObj)
    External (_SB_.OSCP, IntObj)
    External (_SB_.PR00, DeviceObj)
    External (ADBG, MethodObj)    // 1 Arguments
    External (BSFQ, UnknownObj)
    External (CORE, UnknownObj)
    External (IS00, UnknownObj)
    External (MXP1, UnknownObj)
    External (P100, UnknownObj)
    External (RPEF, UnknownObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PR00)
    {
        Name (CPC3, Package (0x17)
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000000000CE, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000777, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000770, // Address
                    0x04,               // Access Size
                    )
            }, 

            One, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x0A,               // Bit Width
                    0x20,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            Zero, 
            Zero, 
            Zero
        })
        Name (CPC4, Package (0x19)
        {
            0x19, 
            0x04, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000000000CE, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000777, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000770, // Address
                    0x04,               // Access Size
                    )
            }, 

            One, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x0A,               // Bit Width
                    0x20,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Package (0x05)
            {
                Package (0x03)
                {
                    0x03, 
                    0x04, 
                    0x05
                }, 

                One, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x01,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000C88, // Address
                        0x04,               // Access Size
                        )
                }, 

                0x04, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x20,               // Bit Width
                        0x20,               // Bit Offset
                        0x0000000000000C8F, // Address
                        0x04,               // Access Size
                        )
                }
            }
        })
        Method (GCPC, 3, NotSerialized)
        {
            ADBG (Concatenate ("_CPC CPU = ", ToDecimalString (Arg0)))
            ADBG (Concatenate ("  _CPC Max P1 = ", ToDecimalString (MXP1)))
            ADBG (Concatenate ("  _CPC BusFrequency = ", ToDecimalString (BSFQ)))
            ADBG (Concatenate ("  _CPC P1 = ", ToDecimalString (Arg1)))
            ADBG (Concatenate ("  _CPC Scaling = ", ToDecimalString (Arg2)))
            Local0 = (MXP1 * Arg2)
            Local0 /= 0x64
            ADBG (Concatenate ("  _CPC.ReferencePerformance (Max P1 * Scaling / 100) = ", ToDecimalString (Local0)))
            CPC3 [0x14] = Local0
            CPC4 [0x14] = Local0
            Local0 = (Arg1 * BSFQ) /* External reference */
            ADBG (Concatenate ("  _CPC.NominalFrequency (P1 * BusFrequency) =", ToDecimalString (Local0)))
            CPC3 [0x16] = Local0
            CPC4 [0x16] = Local0
            Local0 = (Arg1 * Arg2)
            Local0 /= 0x64
            ADBG (Concatenate ("  _CPC.NominalPerformance (P1 * Scaling / 100) = ", ToDecimalString (Local0)))
            CPC3 [0x03] = Local0
            CPC4 [0x03] = Local0
            If ((\_SB.CFGD & 0x01000000))
            {
                If (((\_SB.CFGD & 0x02000000) == Zero))
                {
                    CPC3 [0x02] = 0xFF
                    CPC4 [0x02] = 0xFF
                }
            }

            If (RPEF)
            {
                Return (CPC4) /* \_SB_.PR00.CPC4 */
            }
            Else
            {
                Return (CPC3) /* \_SB_.PR00.CPC3 */
            }
        }

        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (GCPC (Zero, P100, IS00))
        }
    }
}



SSDT20
------
DefinitionBlock ("", "SSDT", 2, "SocCmn", "SocCmn ", 0x00003000)
{
    External (_SB_.CPPC, FieldUnitObj)
    External (_SB_.PC00.RP01, DeviceObj)
    External (_SB_.PC00.RP01.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP01.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP01.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP01.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP01.VDID, FieldUnitObj)
    External (_SB_.PC00.RP02, DeviceObj)
    External (_SB_.PC00.RP02.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP02.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP02.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP02.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP02.VDID, FieldUnitObj)
    External (_SB_.PC00.RP03, DeviceObj)
    External (_SB_.PC00.RP03.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP03.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP03.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP03.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP03.VDID, FieldUnitObj)
    External (_SB_.PC00.RP04, DeviceObj)
    External (_SB_.PC00.RP04.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP04.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP04.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP04.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP04.VDID, FieldUnitObj)
    External (_SB_.PC00.RP05, DeviceObj)
    External (_SB_.PC00.RP05.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP05.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP05.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP05.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP05.VDID, FieldUnitObj)
    External (_SB_.PC00.RP06, DeviceObj)
    External (_SB_.PC00.RP06.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP06.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP06.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP06.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP06.VDID, FieldUnitObj)
    External (_SB_.PC00.RP07, DeviceObj)
    External (_SB_.PC00.RP07.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP07.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP07.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP07.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP07.VDID, FieldUnitObj)
    External (_SB_.PC00.RP08, DeviceObj)
    External (_SB_.PC00.RP08.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP08.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP08.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP08.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP08.VDID, FieldUnitObj)
    External (_SB_.PC00.RP09, DeviceObj)
    External (_SB_.PC00.RP09.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP09.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP09.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP09.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP09.VDID, FieldUnitObj)
    External (_SB_.PC00.RP10, DeviceObj)
    External (_SB_.PC00.RP10.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP10.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP10.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP10.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP10.VDID, FieldUnitObj)
    External (_SB_.PC00.RP11, DeviceObj)
    External (_SB_.PC00.RP11.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP11.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP11.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP11.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP11.VDID, FieldUnitObj)
    External (_SB_.PC00.RP12, DeviceObj)
    External (_SB_.PC00.RP12.HPEX, FieldUnitObj)
    External (_SB_.PC00.RP12.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP12.PMEX, FieldUnitObj)
    External (_SB_.PC00.RP12.PMSX, FieldUnitObj)
    External (_SB_.PC00.RP12.VDID, FieldUnitObj)
    External (_SB_.PC00.TCON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TG0N, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TG1N, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP0.HPEX, IntObj)
    External (_SB_.PC00.TRP0.HPSX, IntObj)
    External (_SB_.PC00.TRP0.PMEX, IntObj)
    External (_SB_.PC00.TRP0.PMSX, IntObj)
    External (_SB_.PC00.TRP1.HPEX, IntObj)
    External (_SB_.PC00.TRP1.HPSX, IntObj)
    External (_SB_.PC00.TRP1.PMEX, IntObj)
    External (_SB_.PC00.TRP1.PMSX, IntObj)
    External (_SB_.PC00.TRP2.HPEX, IntObj)
    External (_SB_.PC00.TRP2.HPSX, IntObj)
    External (_SB_.PC00.TRP2.PMEX, IntObj)
    External (_SB_.PC00.TRP2.PMSX, IntObj)
    External (_SB_.PC00.TRP3.HPEX, IntObj)
    External (_SB_.PC00.TRP3.HPSX, IntObj)
    External (_SB_.PC00.TRP3.PMEX, IntObj)
    External (_SB_.PC00.TRP3.PMSX, IntObj)
    External (_SB_.PC00.TXHC, DeviceObj)
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR00.LPSS, PkgObj)
    External (_SB_.PR00.TPSS, PkgObj)
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)
    External (_SB_.PR24, DeviceObj)
    External (_SB_.PR25, DeviceObj)
    External (_SB_.PR26, DeviceObj)
    External (_SB_.PR27, DeviceObj)
    External (_SB_.PR28, DeviceObj)
    External (_SB_.PR29, DeviceObj)
    External (_SB_.PR30, DeviceObj)
    External (_SB_.PR31, DeviceObj)
    External (_SB_.PR32, DeviceObj)
    External (_SB_.PR33, DeviceObj)
    External (_SB_.PR34, DeviceObj)
    External (_SB_.PR35, DeviceObj)
    External (_SB_.PR36, DeviceObj)
    External (_SB_.PR37, DeviceObj)
    External (_SB_.PR38, DeviceObj)
    External (_SB_.PR39, DeviceObj)
    External (_SB_.PR40, DeviceObj)
    External (_SB_.PR41, DeviceObj)
    External (_SB_.PR42, DeviceObj)
    External (_SB_.PR43, DeviceObj)
    External (_SB_.PR44, DeviceObj)
    External (_SB_.PR45, DeviceObj)
    External (_SB_.PR46, DeviceObj)
    External (_SB_.PR47, DeviceObj)
    External (_SB_.PR48, DeviceObj)
    External (_SB_.PR49, DeviceObj)
    External (_SB_.PR50, DeviceObj)
    External (_SB_.PR51, DeviceObj)
    External (_SB_.PR52, DeviceObj)
    External (_SB_.PR53, DeviceObj)
    External (_SB_.PR54, DeviceObj)
    External (_SB_.PR55, DeviceObj)
    External (_SB_.PR56, DeviceObj)
    External (_SB_.PR57, DeviceObj)
    External (_SB_.PR58, DeviceObj)
    External (_SB_.PR59, DeviceObj)
    External (_SB_.PR60, DeviceObj)
    External (_SB_.PR61, DeviceObj)
    External (_SB_.PR62, DeviceObj)
    External (_SB_.PR63, DeviceObj)
    External (_SB_.TCWK, MethodObj)    // 1 Arguments
    External (ITRT, FieldUnitObj)
    External (NEXP, FieldUnitObj)
    External (OSCC, FieldUnitObj)
    External (PCHS, FieldUnitObj)
    External (PCHX, IntObj)
    External (PF00, IntObj)
    External (PF01, IntObj)
    External (PF02, IntObj)
    External (PF03, IntObj)
    External (PF04, IntObj)
    External (PF05, IntObj)
    External (PF06, IntObj)
    External (PF07, IntObj)
    External (PF08, IntObj)
    External (PF09, IntObj)
    External (PF10, IntObj)
    External (PF11, IntObj)
    External (PF12, IntObj)
    External (PF13, IntObj)
    External (PF14, IntObj)
    External (PF15, IntObj)
    External (PF16, IntObj)
    External (PF17, IntObj)
    External (PF18, IntObj)
    External (PF19, IntObj)
    External (PF20, IntObj)
    External (PF21, IntObj)
    External (PF22, IntObj)
    External (PF23, IntObj)
    External (PF24, IntObj)
    External (PF25, IntObj)
    External (PF26, IntObj)
    External (PF27, IntObj)
    External (PF28, IntObj)
    External (PF29, IntObj)
    External (PF30, IntObj)
    External (PF31, IntObj)
    External (PF32, IntObj)
    External (PF33, IntObj)
    External (PF34, IntObj)
    External (PF35, IntObj)
    External (PF36, IntObj)
    External (PF37, IntObj)
    External (PF38, IntObj)
    External (PF39, IntObj)
    External (PF40, IntObj)
    External (PF41, IntObj)
    External (PF42, IntObj)
    External (PF43, IntObj)
    External (PF44, IntObj)
    External (PF45, IntObj)
    External (PF46, IntObj)
    External (PF47, IntObj)
    External (PF48, IntObj)
    External (PF49, IntObj)
    External (PF50, IntObj)
    External (PF51, IntObj)
    External (PF52, IntObj)
    External (PF53, IntObj)
    External (PF54, IntObj)
    External (PF55, IntObj)
    External (PF56, IntObj)
    External (PF57, IntObj)
    External (PF58, IntObj)
    External (PF59, IntObj)
    External (PF60, IntObj)
    External (PF61, IntObj)
    External (PF62, IntObj)
    External (PF63, IntObj)
    External (TCNT, FieldUnitObj)
    External (TRTD, FieldUnitObj)

    Method (NHPG, 0, Serialized)
    {
        If (CondRefOf (\_SB.PC00.RP01.HPEX))
        {
            \_SB.PC00.RP01.HPEX = Zero
        }

        If (CondRefOf (\_SB.PC00.RP02.HPEX))
        {
            \_SB.PC00.RP02.HPEX = Zero
        }

        If (CondRefOf (\_SB.PC00.RP03.HPEX))
        {
            \_SB.PC00.RP03.HPEX = Zero
        }

        If (CondRefOf (\_SB.PC00.RP04.HPEX))
        {
            \_SB.PC00.RP04.HPEX = Zero
        }

        If (CondRefOf (\_SB.PC00.RP05.HPEX))
        {
            \_SB.PC00.RP05.HPEX = Zero
        }

        If (CondRefOf (\_SB.PC00.RP06.HPEX))
        {
            \_SB.PC00.RP06.HPEX = Zero
        }

        If (CondRefOf (\_SB.PC00.RP07.HPEX))
        {
            \_SB.PC00.RP07.HPEX = Zero
        }

        If (CondRefOf (\_SB.PC00.RP08.HPEX))
        {
            \_SB.PC00.RP08.HPEX = Zero
        }

        If (CondRefOf (\_SB.PC00.RP09.HPEX))
        {
            \_SB.PC00.RP09.HPEX = Zero
        }

        If (CondRefOf (\_SB.PC00.TXHC))
        {
            \_SB.PC00.TRP0.HPEX = Zero
            \_SB.PC00.TRP1.HPEX = Zero
            \_SB.PC00.TRP2.HPEX = Zero
            \_SB.PC00.TRP3.HPEX = Zero
        }

        If (CondRefOf (\_SB.PC00.RP01.HPSX))
        {
            \_SB.PC00.RP01.HPSX = One
        }

        If (CondRefOf (\_SB.PC00.RP02.HPSX))
        {
            \_SB.PC00.RP02.HPSX = One
        }

        If (CondRefOf (\_SB.PC00.RP03.HPSX))
        {
            \_SB.PC00.RP03.HPSX = One
        }

        If (CondRefOf (\_SB.PC00.RP04.HPSX))
        {
            \_SB.PC00.RP04.HPSX = One
        }

        If (CondRefOf (\_SB.PC00.RP05.HPSX))
        {
            \_SB.PC00.RP05.HPSX = One
        }

        If (CondRefOf (\_SB.PC00.RP06.HPSX))
        {
            \_SB.PC00.RP06.HPSX = One
        }

        If (CondRefOf (\_SB.PC00.RP07.HPSX))
        {
            \_SB.PC00.RP07.HPSX = One
        }

        If (CondRefOf (\_SB.PC00.RP08.HPSX))
        {
            \_SB.PC00.RP08.HPSX = One
        }

        If (CondRefOf (\_SB.PC00.RP09.HPSX))
        {
            \_SB.PC00.RP09.HPSX = One
        }

        If (CondRefOf (\_SB.PC00.TXHC))
        {
            \_SB.PC00.TRP0.HPSX = One
            \_SB.PC00.TRP1.HPSX = One
            \_SB.PC00.TRP2.HPSX = One
            \_SB.PC00.TRP3.HPSX = One
        }
    }

    Method (NPME, 0, Serialized)
    {
        If (CondRefOf (\_SB.PC00.RP01.PMEX))
        {
            \_SB.PC00.RP01.PMEX = Zero
        }

        If (CondRefOf (\_SB.PC00.RP02.PMEX))
        {
            \_SB.PC00.RP02.PMEX = Zero
        }

        If (CondRefOf (\_SB.PC00.RP03.PMEX))
        {
            \_SB.PC00.RP03.PMEX = Zero
        }

        If (CondRefOf (\_SB.PC00.RP04.PMEX))
        {
            \_SB.PC00.RP04.PMEX = Zero
        }

        If (CondRefOf (\_SB.PC00.RP05.PMEX))
        {
            \_SB.PC00.RP05.PMEX = Zero
        }

        If (CondRefOf (\_SB.PC00.RP06.PMEX))
        {
            \_SB.PC00.RP06.PMEX = Zero
        }

        If (CondRefOf (\_SB.PC00.RP07.PMEX))
        {
            \_SB.PC00.RP07.PMEX = Zero
        }

        If (CondRefOf (\_SB.PC00.RP08.PMEX))
        {
            \_SB.PC00.RP08.PMEX = Zero
        }

        If (CondRefOf (\_SB.PC00.RP09.PMEX))
        {
            \_SB.PC00.RP09.PMEX = Zero
        }

        If (CondRefOf (\_SB.PC00.TXHC))
        {
            \_SB.PC00.TRP0.PMEX = Zero
            \_SB.PC00.TRP1.PMEX = Zero
            \_SB.PC00.TRP2.PMEX = Zero
            \_SB.PC00.TRP3.PMEX = Zero
        }

        If (CondRefOf (\_SB.PC00.RP01.PMSX))
        {
            \_SB.PC00.RP01.PMSX = One
        }

        If (CondRefOf (\_SB.PC00.RP02.PMSX))
        {
            \_SB.PC00.RP02.PMSX = One
        }

        If (CondRefOf (\_SB.PC00.RP03.PMSX))
        {
            \_SB.PC00.RP03.PMSX = One
        }

        If (CondRefOf (\_SB.PC00.RP04.PMSX))
        {
            \_SB.PC00.RP04.PMSX = One
        }

        If (CondRefOf (\_SB.PC00.RP05.PMSX))
        {
            \_SB.PC00.RP05.PMSX = One
        }

        If (CondRefOf (\_SB.PC00.RP06.PMSX))
        {
            \_SB.PC00.RP06.PMSX = One
        }

        If (CondRefOf (\_SB.PC00.RP07.PMSX))
        {
            \_SB.PC00.RP07.PMSX = One
        }

        If (CondRefOf (\_SB.PC00.RP08.PMSX))
        {
            \_SB.PC00.RP08.PMSX = One
        }

        If (CondRefOf (\_SB.PC00.RP09.PMSX))
        {
            \_SB.PC00.RP09.PMSX = One
        }

        If (CondRefOf (\_SB.PC00.TXHC))
        {
            \_SB.PC00.TRP0.PMSX = One
            \_SB.PC00.TRP1.PMSX = One
            \_SB.PC00.TRP2.PMSX = One
            \_SB.PC00.TRP3.PMSX = One
        }
    }

    Method (SPNT, 0, Serialized)
    {
        If ((\PF00 & 0x0400))
        {
            If (CondRefOf (\_SB.PR00.TPSS))
            {
                \_SB.CPPC = Zero
            }
        }
        ElseIf (CondRefOf (\_SB.PR00.LPSS))
        {
            \_SB.CPPC = Zero
        }

        If ((TCNT > One))
        {
            If ((\PF00 & 0x08))
            {
                Notify (\_SB.PR00, 0x80) // Status Change
            }

            If ((\PF01 & 0x08))
            {
                Notify (\_SB.PR01, 0x80) // Status Change
            }

            If ((\PF02 & 0x08))
            {
                Notify (\_SB.PR02, 0x80) // Status Change
            }

            If ((\PF03 & 0x08))
            {
                Notify (\_SB.PR03, 0x80) // Status Change
            }

            If ((\PF04 & 0x08))
            {
                Notify (\_SB.PR04, 0x80) // Status Change
            }

            If ((\PF05 & 0x08))
            {
                Notify (\_SB.PR05, 0x80) // Status Change
            }

            If ((\PF06 & 0x08))
            {
                Notify (\_SB.PR06, 0x80) // Status Change
            }

            If ((\PF07 & 0x08))
            {
                Notify (\_SB.PR07, 0x80) // Status Change
            }

            If ((\PF08 & 0x08))
            {
                Notify (\_SB.PR08, 0x80) // Status Change
            }

            If ((\PF09 & 0x08))
            {
                Notify (\_SB.PR09, 0x80) // Status Change
            }

            If ((\PF10 & 0x08))
            {
                Notify (\_SB.PR10, 0x80) // Status Change
            }

            If ((\PF11 & 0x08))
            {
                Notify (\_SB.PR11, 0x80) // Status Change
            }

            If ((\PF12 & 0x08))
            {
                Notify (\_SB.PR12, 0x80) // Status Change
            }

            If ((\PF13 & 0x08))
            {
                Notify (\_SB.PR13, 0x80) // Status Change
            }

            If ((\PF14 & 0x08))
            {
                Notify (\_SB.PR14, 0x80) // Status Change
            }

            If ((\PF15 & 0x08))
            {
                Notify (\_SB.PR15, 0x80) // Status Change
            }

            If ((\PF16 & 0x08))
            {
                Notify (\_SB.PR16, 0x80) // Status Change
            }

            If ((\PF17 & 0x08))
            {
                Notify (\_SB.PR17, 0x80) // Status Change
            }

            If ((\PF18 & 0x08))
            {
                Notify (\_SB.PR18, 0x80) // Status Change
            }

            If ((\PF19 & 0x08))
            {
                Notify (\_SB.PR19, 0x80) // Status Change
            }

            If ((\PF20 & 0x08))
            {
                Notify (\_SB.PR20, 0x80) // Status Change
            }

            If ((\PF21 & 0x08))
            {
                Notify (\_SB.PR21, 0x80) // Status Change
            }

            If ((\PF22 & 0x08))
            {
                Notify (\_SB.PR22, 0x80) // Status Change
            }

            If ((\PF23 & 0x08))
            {
                Notify (\_SB.PR23, 0x80) // Status Change
            }

            If ((\PF24 & 0x08))
            {
                Notify (\_SB.PR24, 0x80) // Status Change
            }

            If ((\PF25 & 0x08))
            {
                Notify (\_SB.PR25, 0x80) // Status Change
            }

            If ((\PF26 & 0x08))
            {
                Notify (\_SB.PR26, 0x80) // Status Change
            }

            If ((\PF27 & 0x08))
            {
                Notify (\_SB.PR27, 0x80) // Status Change
            }

            If ((\PF28 & 0x08))
            {
                Notify (\_SB.PR28, 0x80) // Status Change
            }

            If ((\PF29 & 0x08))
            {
                Notify (\_SB.PR29, 0x80) // Status Change
            }

            If ((\PF30 & 0x08))
            {
                Notify (\_SB.PR30, 0x80) // Status Change
            }

            If ((\PF31 & 0x08))
            {
                Notify (\_SB.PR31, 0x80) // Status Change
            }

            If ((\PF32 & 0x08))
            {
                Notify (\_SB.PR32, 0x80) // Status Change
            }

            If ((\PF33 & 0x08))
            {
                Notify (\_SB.PR33, 0x80) // Status Change
            }

            If ((\PF34 & 0x08))
            {
                Notify (\_SB.PR34, 0x80) // Status Change
            }

            If ((\PF35 & 0x08))
            {
                Notify (\_SB.PR35, 0x80) // Status Change
            }

            If ((\PF36 & 0x08))
            {
                Notify (\_SB.PR36, 0x80) // Status Change
            }

            If ((\PF37 & 0x08))
            {
                Notify (\_SB.PR37, 0x80) // Status Change
            }

            If ((\PF38 & 0x08))
            {
                Notify (\_SB.PR38, 0x80) // Status Change
            }

            If ((\PF39 & 0x08))
            {
                Notify (\_SB.PR39, 0x80) // Status Change
            }

            If ((\PF40 & 0x08))
            {
                Notify (\_SB.PR40, 0x80) // Status Change
            }

            If ((\PF41 & 0x08))
            {
                Notify (\_SB.PR41, 0x80) // Status Change
            }

            If ((\PF42 & 0x08))
            {
                Notify (\_SB.PR42, 0x80) // Status Change
            }

            If ((\PF43 & 0x08))
            {
                Notify (\_SB.PR43, 0x80) // Status Change
            }

            If ((\PF44 & 0x08))
            {
                Notify (\_SB.PR44, 0x80) // Status Change
            }

            If ((\PF45 & 0x08))
            {
                Notify (\_SB.PR45, 0x80) // Status Change
            }

            If ((\PF46 & 0x08))
            {
                Notify (\_SB.PR46, 0x80) // Status Change
            }

            If ((\PF47 & 0x08))
            {
                Notify (\_SB.PR47, 0x80) // Status Change
            }

            If ((\PF48 & 0x08))
            {
                Notify (\_SB.PR48, 0x80) // Status Change
            }

            If ((\PF49 & 0x08))
            {
                Notify (\_SB.PR49, 0x80) // Status Change
            }

            If ((\PF50 & 0x08))
            {
                Notify (\_SB.PR50, 0x80) // Status Change
            }

            If ((\PF51 & 0x08))
            {
                Notify (\_SB.PR51, 0x80) // Status Change
            }

            If ((\PF52 & 0x08))
            {
                Notify (\_SB.PR52, 0x80) // Status Change
            }

            If ((\PF53 & 0x08))
            {
                Notify (\_SB.PR53, 0x80) // Status Change
            }

            If ((\PF54 & 0x08))
            {
                Notify (\_SB.PR54, 0x80) // Status Change
            }

            If ((\PF55 & 0x08))
            {
                Notify (\_SB.PR55, 0x80) // Status Change
            }

            If ((\PF56 & 0x08))
            {
                Notify (\_SB.PR56, 0x80) // Status Change
            }

            If ((\PF57 & 0x08))
            {
                Notify (\_SB.PR57, 0x80) // Status Change
            }

            If ((\PF58 & 0x08))
            {
                Notify (\_SB.PR58, 0x80) // Status Change
            }

            If ((\PF59 & 0x08))
            {
                Notify (\_SB.PR59, 0x80) // Status Change
            }

            If ((\PF60 & 0x08))
            {
                Notify (\_SB.PR60, 0x80) // Status Change
            }

            If ((\PF61 & 0x08))
            {
                Notify (\_SB.PR61, 0x80) // Status Change
            }

            If ((\PF62 & 0x08))
            {
                Notify (\_SB.PR62, 0x80) // Status Change
            }

            If ((\PF63 & 0x08))
            {
                Notify (\_SB.PR63, 0x80) // Status Change
            }
        }
        Else
        {
            Notify (\_SB.PR00, 0x80) // Status Change
        }

        If ((TCNT > One))
        {
            If (((\PF00 & 0x08) && (\PF00 & 0x10)))
            {
                Notify (\_SB.PR00, 0x81) // Information Change
            }

            If (((\PF01 & 0x08) && (\PF01 & 0x10)))
            {
                Notify (\_SB.PR01, 0x81) // Information Change
            }

            If (((\PF02 & 0x08) && (\PF02 & 0x10)))
            {
                Notify (\_SB.PR02, 0x81) // Information Change
            }

            If (((\PF03 & 0x08) && (\PF03 & 0x10)))
            {
                Notify (\_SB.PR03, 0x81) // Information Change
            }

            If (((\PF04 & 0x08) && (\PF04 & 0x10)))
            {
                Notify (\_SB.PR04, 0x81) // Information Change
            }

            If (((\PF05 & 0x08) && (\PF05 & 0x10)))
            {
                Notify (\_SB.PR05, 0x81) // Information Change
            }

            If (((\PF06 & 0x08) && (\PF06 & 0x10)))
            {
                Notify (\_SB.PR06, 0x81) // Information Change
            }

            If (((\PF07 & 0x08) && (\PF07 & 0x10)))
            {
                Notify (\_SB.PR07, 0x81) // Information Change
            }

            If (((\PF08 & 0x08) && (\PF08 & 0x10)))
            {
                Notify (\_SB.PR08, 0x81) // Information Change
            }

            If (((\PF09 & 0x08) && (\PF09 & 0x10)))
            {
                Notify (\_SB.PR09, 0x81) // Information Change
            }

            If (((\PF10 & 0x08) && (\PF10 & 0x10)))
            {
                Notify (\_SB.PR10, 0x81) // Information Change
            }

            If (((\PF11 & 0x08) && (\PF11 & 0x10)))
            {
                Notify (\_SB.PR11, 0x81) // Information Change
            }

            If (((\PF12 & 0x08) && (\PF12 & 0x10)))
            {
                Notify (\_SB.PR12, 0x81) // Information Change
            }

            If (((\PF13 & 0x08) && (\PF13 & 0x10)))
            {
                Notify (\_SB.PR13, 0x81) // Information Change
            }

            If (((\PF14 & 0x08) && (\PF14 & 0x10)))
            {
                Notify (\_SB.PR14, 0x81) // Information Change
            }

            If (((\PF15 & 0x08) && (\PF15 & 0x10)))
            {
                Notify (\_SB.PR15, 0x81) // Information Change
            }

            If (((\PF16 & 0x08) && (\PF16 & 0x10)))
            {
                Notify (\_SB.PR16, 0x81) // Information Change
            }

            If (((\PF17 & 0x08) && (\PF17 & 0x10)))
            {
                Notify (\_SB.PR17, 0x81) // Information Change
            }

            If (((\PF18 & 0x08) && (\PF18 & 0x10)))
            {
                Notify (\_SB.PR18, 0x81) // Information Change
            }

            If (((\PF19 & 0x08) && (\PF19 & 0x10)))
            {
                Notify (\_SB.PR19, 0x81) // Information Change
            }

            If (((\PF20 & 0x08) && (\PF20 & 0x10)))
            {
                Notify (\_SB.PR20, 0x81) // Information Change
            }

            If (((\PF21 & 0x08) && (\PF21 & 0x10)))
            {
                Notify (\_SB.PR21, 0x81) // Information Change
            }

            If (((\PF22 & 0x08) && (\PF22 & 0x10)))
            {
                Notify (\_SB.PR22, 0x81) // Information Change
            }

            If (((\PF23 & 0x08) && (\PF23 & 0x10)))
            {
                Notify (\_SB.PR23, 0x81) // Information Change
            }

            If (((\PF24 & 0x08) && (\PF24 & 0x10)))
            {
                Notify (\_SB.PR24, 0x81) // Information Change
            }

            If (((\PF25 & 0x08) && (\PF25 & 0x10)))
            {
                Notify (\_SB.PR25, 0x81) // Information Change
            }

            If (((\PF26 & 0x08) && (\PF26 & 0x10)))
            {
                Notify (\_SB.PR26, 0x81) // Information Change
            }

            If (((\PF27 & 0x08) && (\PF27 & 0x10)))
            {
                Notify (\_SB.PR27, 0x81) // Information Change
            }

            If (((\PF28 & 0x08) && (\PF28 & 0x10)))
            {
                Notify (\_SB.PR28, 0x81) // Information Change
            }

            If (((\PF29 & 0x08) && (\PF29 & 0x10)))
            {
                Notify (\_SB.PR29, 0x81) // Information Change
            }

            If (((\PF30 & 0x08) && (\PF30 & 0x10)))
            {
                Notify (\_SB.PR30, 0x81) // Information Change
            }

            If (((\PF31 & 0x08) && (\PF31 & 0x10)))
            {
                Notify (\_SB.PR31, 0x81) // Information Change
            }

            If (((\PF32 & 0x08) && (\PF32 & 0x10)))
            {
                Notify (\_SB.PR32, 0x81) // Information Change
            }

            If (((\PF33 & 0x08) && (\PF33 & 0x10)))
            {
                Notify (\_SB.PR33, 0x81) // Information Change
            }

            If (((\PF34 & 0x08) && (\PF34 & 0x10)))
            {
                Notify (\_SB.PR34, 0x81) // Information Change
            }

            If (((\PF35 & 0x08) && (\PF35 & 0x10)))
            {
                Notify (\_SB.PR35, 0x81) // Information Change
            }

            If (((\PF36 & 0x08) && (\PF36 & 0x10)))
            {
                Notify (\_SB.PR36, 0x81) // Information Change
            }

            If (((\PF37 & 0x08) && (\PF37 & 0x10)))
            {
                Notify (\_SB.PR37, 0x81) // Information Change
            }

            If (((\PF38 & 0x08) && (\PF38 & 0x10)))
            {
                Notify (\_SB.PR38, 0x81) // Information Change
            }

            If (((\PF39 & 0x08) && (\PF39 & 0x10)))
            {
                Notify (\_SB.PR39, 0x81) // Information Change
            }

            If (((\PF40 & 0x08) && (\PF40 & 0x10)))
            {
                Notify (\_SB.PR40, 0x81) // Information Change
            }

            If (((\PF41 & 0x08) && (\PF41 & 0x10)))
            {
                Notify (\_SB.PR41, 0x81) // Information Change
            }

            If (((\PF42 & 0x08) && (\PF42 & 0x10)))
            {
                Notify (\_SB.PR42, 0x81) // Information Change
            }

            If (((\PF43 & 0x08) && (\PF43 & 0x10)))
            {
                Notify (\_SB.PR43, 0x81) // Information Change
            }

            If (((\PF44 & 0x08) && (\PF44 & 0x10)))
            {
                Notify (\_SB.PR44, 0x81) // Information Change
            }

            If (((\PF45 & 0x08) && (\PF45 & 0x10)))
            {
                Notify (\_SB.PR45, 0x81) // Information Change
            }

            If (((\PF46 & 0x08) && (\PF46 & 0x10)))
            {
                Notify (\_SB.PR46, 0x81) // Information Change
            }

            If (((\PF47 & 0x08) && (\PF47 & 0x10)))
            {
                Notify (\_SB.PR47, 0x81) // Information Change
            }

            If (((\PF48 & 0x08) && (\PF48 & 0x10)))
            {
                Notify (\_SB.PR48, 0x81) // Information Change
            }

            If (((\PF49 & 0x08) && (\PF49 & 0x10)))
            {
                Notify (\_SB.PR49, 0x81) // Information Change
            }

            If (((\PF50 & 0x08) && (\PF50 & 0x10)))
            {
                Notify (\_SB.PR50, 0x81) // Information Change
            }

            If (((\PF51 & 0x08) && (\PF51 & 0x10)))
            {
                Notify (\_SB.PR51, 0x81) // Information Change
            }

            If (((\PF52 & 0x08) && (\PF52 & 0x10)))
            {
                Notify (\_SB.PR52, 0x81) // Information Change
            }

            If (((\PF53 & 0x08) && (\PF53 & 0x10)))
            {
                Notify (\_SB.PR53, 0x81) // Information Change
            }

            If (((\PF54 & 0x08) && (\PF54 & 0x10)))
            {
                Notify (\_SB.PR54, 0x81) // Information Change
            }

            If (((\PF55 & 0x08) && (\PF55 & 0x10)))
            {
                Notify (\_SB.PR55, 0x81) // Information Change
            }

            If (((\PF56 & 0x08) && (\PF56 & 0x10)))
            {
                Notify (\_SB.PR56, 0x81) // Information Change
            }

            If (((\PF57 & 0x08) && (\PF57 & 0x10)))
            {
                Notify (\_SB.PR57, 0x81) // Information Change
            }

            If (((\PF58 & 0x08) && (\PF58 & 0x10)))
            {
                Notify (\_SB.PR58, 0x81) // Information Change
            }

            If (((\PF59 & 0x08) && (\PF59 & 0x10)))
            {
                Notify (\_SB.PR59, 0x81) // Information Change
            }

            If (((\PF60 & 0x08) && (\PF60 & 0x10)))
            {
                Notify (\_SB.PR60, 0x81) // Information Change
            }

            If (((\PF61 & 0x08) && (\PF61 & 0x10)))
            {
                Notify (\_SB.PR61, 0x81) // Information Change
            }

            If (((\PF62 & 0x08) && (\PF62 & 0x10)))
            {
                Notify (\_SB.PR62, 0x81) // Information Change
            }

            If (((\PF63 & 0x08) && (\PF63 & 0x10)))
            {
                Notify (\_SB.PR63, 0x81) // Information Change
            }
        }
        Else
        {
            Notify (\_SB.PR00, 0x81) // Information Change
        }
    }

    Method (SPTS, 1, NotSerialized)
    {
        If (CondRefOf (\_SB.PC00.TXHC))
        {
            If (TRTD)
            {
                \_SB.PC00.TCON ()
            }

            If (ITRT)
            {
                \_SB.PC00.TG0N ()
                \_SB.PC00.TG1N ()
            }
        }
    }

    Method (SWAK, 2, NotSerialized)
    {
        If (NEXP)
        {
            If ((OSCC & One))
            {
                NHPG ()
            }

            If ((OSCC & 0x04))
            {
                NPME ()
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If (CondRefOf (\_SB.PC00.RP01))
            {
                If ((\_SB.PC00.RP01.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x02) != One))
                    {
                        Notify (\_SB.PC00.RP01, Zero) // Bus Check
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.RP02))
            {
                If ((\_SB.PC00.RP02.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x04) != One))
                    {
                        Notify (\_SB.PC00.RP02, Zero) // Bus Check
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.RP03))
            {
                If ((\_SB.PC00.RP03.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x08) != One))
                    {
                        Notify (\_SB.PC00.RP03, Zero) // Bus Check
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.RP04))
            {
                If ((\_SB.PC00.RP04.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x10) != One))
                    {
                        Notify (\_SB.PC00.RP04, Zero) // Bus Check
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.RP05))
            {
                If ((\_SB.PC00.RP05.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x20) != One))
                    {
                        Notify (\_SB.PC00.RP05, Zero) // Bus Check
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.RP06))
            {
                If ((\_SB.PC00.RP06.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x40) != One))
                    {
                        Notify (\_SB.PC00.RP06, Zero) // Bus Check
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.RP07))
            {
                If ((\_SB.PC00.RP07.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x80) != One))
                    {
                        Notify (\_SB.PC00.RP07, Zero) // Bus Check
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.RP08))
            {
                If ((\_SB.PC00.RP08.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x0100) != One))
                    {
                        Notify (\_SB.PC00.RP08, Zero) // Bus Check
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.RP09))
            {
                If ((\_SB.PC00.RP09.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x0200) != One))
                    {
                        Notify (\_SB.PC00.RP09, Zero) // Bus Check
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.RP10))
            {
                If ((\_SB.PC00.RP10.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x0400) != One))
                    {
                        Notify (\_SB.PC00.RP10, Zero) // Bus Check
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.RP11))
            {
                If ((\_SB.PC00.RP11.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x0800) != One))
                    {
                        Notify (\_SB.PC00.RP11, Zero) // Bus Check
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.RP12))
            {
                If ((\_SB.PC00.RP12.VDID != 0xFFFFFFFF))
                {
                    If (((Arg1 & 0x1000) != One))
                    {
                        Notify (\_SB.PC00.RP12, Zero) // Bus Check
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.TXHC))
            {
                \_SB.TCWK (Arg0)
            }
        }
    }
}



SSDT21
------
DefinitionBlock ("", "SSDT", 2, "MSI_NB", "MsiNvs ", 0x00003000)
{
    Name (MSNB, 0x65844B18)
    Name (MSNL, 0x0100)
    OperationRegion (MSNV, SystemMemory, MSNB, MSNL)
    Field (MSNV, AnyAcc, Lock, Preserve)
    {
        TPDV,   32, 
        OMDS,   8, 
        DRRD,   8, 
        AUXP,   8, 
        HPS2,   8, 
        CPUD,   8
    }
}



SSDT22
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApHwp", 0x00003000)
{
    External (_SB_.PR00.GCPC, MethodObj)    // 3 Arguments
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)
    External (_SB_.PR24, DeviceObj)
    External (_SB_.PR25, DeviceObj)
    External (_SB_.PR26, DeviceObj)
    External (_SB_.PR27, DeviceObj)
    External (_SB_.PR28, DeviceObj)
    External (_SB_.PR29, DeviceObj)
    External (_SB_.PR30, DeviceObj)
    External (_SB_.PR31, DeviceObj)
    External (_SB_.PR32, DeviceObj)
    External (_SB_.PR33, DeviceObj)
    External (_SB_.PR34, DeviceObj)
    External (_SB_.PR35, DeviceObj)
    External (_SB_.PR36, DeviceObj)
    External (_SB_.PR37, DeviceObj)
    External (_SB_.PR38, DeviceObj)
    External (_SB_.PR39, DeviceObj)
    External (_SB_.PR40, DeviceObj)
    External (_SB_.PR41, DeviceObj)
    External (_SB_.PR42, DeviceObj)
    External (_SB_.PR43, DeviceObj)
    External (_SB_.PR44, DeviceObj)
    External (_SB_.PR45, DeviceObj)
    External (_SB_.PR46, DeviceObj)
    External (_SB_.PR47, DeviceObj)
    External (_SB_.PR48, DeviceObj)
    External (_SB_.PR49, DeviceObj)
    External (_SB_.PR50, DeviceObj)
    External (_SB_.PR51, DeviceObj)
    External (_SB_.PR52, DeviceObj)
    External (_SB_.PR53, DeviceObj)
    External (_SB_.PR54, DeviceObj)
    External (_SB_.PR55, DeviceObj)
    External (_SB_.PR56, DeviceObj)
    External (_SB_.PR57, DeviceObj)
    External (_SB_.PR58, DeviceObj)
    External (_SB_.PR59, DeviceObj)
    External (_SB_.PR60, DeviceObj)
    External (_SB_.PR61, DeviceObj)
    External (_SB_.PR62, DeviceObj)
    External (_SB_.PR63, DeviceObj)
    External (IS01, UnknownObj)
    External (IS02, UnknownObj)
    External (IS03, UnknownObj)
    External (IS04, UnknownObj)
    External (IS05, UnknownObj)
    External (IS06, UnknownObj)
    External (IS07, UnknownObj)
    External (IS08, UnknownObj)
    External (IS09, UnknownObj)
    External (IS10, UnknownObj)
    External (IS11, UnknownObj)
    External (IS12, UnknownObj)
    External (IS13, UnknownObj)
    External (IS14, UnknownObj)
    External (IS15, UnknownObj)
    External (IS16, UnknownObj)
    External (IS17, UnknownObj)
    External (IS18, UnknownObj)
    External (IS19, UnknownObj)
    External (IS20, UnknownObj)
    External (IS21, UnknownObj)
    External (IS22, UnknownObj)
    External (IS23, UnknownObj)
    External (IS24, UnknownObj)
    External (IS25, UnknownObj)
    External (IS26, UnknownObj)
    External (IS27, UnknownObj)
    External (IS28, UnknownObj)
    External (IS29, UnknownObj)
    External (IS30, UnknownObj)
    External (IS31, UnknownObj)
    External (IS32, UnknownObj)
    External (IS33, UnknownObj)
    External (IS34, UnknownObj)
    External (IS35, UnknownObj)
    External (IS36, UnknownObj)
    External (IS37, UnknownObj)
    External (IS38, UnknownObj)
    External (IS39, UnknownObj)
    External (IS40, UnknownObj)
    External (IS41, UnknownObj)
    External (IS42, UnknownObj)
    External (IS43, UnknownObj)
    External (IS44, UnknownObj)
    External (IS45, UnknownObj)
    External (IS46, UnknownObj)
    External (IS47, UnknownObj)
    External (IS48, UnknownObj)
    External (IS49, UnknownObj)
    External (IS50, UnknownObj)
    External (IS51, UnknownObj)
    External (IS52, UnknownObj)
    External (IS53, UnknownObj)
    External (IS54, UnknownObj)
    External (IS55, UnknownObj)
    External (IS56, UnknownObj)
    External (IS57, UnknownObj)
    External (IS58, UnknownObj)
    External (IS59, UnknownObj)
    External (IS60, UnknownObj)
    External (IS61, UnknownObj)
    External (IS62, UnknownObj)
    External (IS63, UnknownObj)
    External (P101, UnknownObj)
    External (P102, UnknownObj)
    External (P103, UnknownObj)
    External (P104, UnknownObj)
    External (P105, UnknownObj)
    External (P106, UnknownObj)
    External (P107, UnknownObj)
    External (P108, UnknownObj)
    External (P109, UnknownObj)
    External (P110, UnknownObj)
    External (P111, UnknownObj)
    External (P112, UnknownObj)
    External (P113, UnknownObj)
    External (P114, UnknownObj)
    External (P115, UnknownObj)
    External (P116, UnknownObj)
    External (P117, UnknownObj)
    External (P118, UnknownObj)
    External (P119, UnknownObj)
    External (P120, UnknownObj)
    External (P121, UnknownObj)
    External (P122, UnknownObj)
    External (P123, UnknownObj)
    External (P124, UnknownObj)
    External (P125, UnknownObj)
    External (P126, UnknownObj)
    External (P127, UnknownObj)
    External (P128, UnknownObj)
    External (P129, UnknownObj)
    External (P130, UnknownObj)
    External (P131, UnknownObj)
    External (P132, UnknownObj)
    External (P133, UnknownObj)
    External (P134, UnknownObj)
    External (P135, UnknownObj)
    External (P136, UnknownObj)
    External (P137, UnknownObj)
    External (P138, UnknownObj)
    External (P139, UnknownObj)
    External (P140, UnknownObj)
    External (P141, UnknownObj)
    External (P142, UnknownObj)
    External (P143, UnknownObj)
    External (P144, UnknownObj)
    External (P145, UnknownObj)
    External (P146, UnknownObj)
    External (P147, UnknownObj)
    External (P148, UnknownObj)
    External (P149, UnknownObj)
    External (P150, UnknownObj)
    External (P151, UnknownObj)
    External (P152, UnknownObj)
    External (P153, UnknownObj)
    External (P154, UnknownObj)
    External (P155, UnknownObj)
    External (P156, UnknownObj)
    External (P157, UnknownObj)
    External (P158, UnknownObj)
    External (P159, UnknownObj)
    External (P160, UnknownObj)
    External (P161, UnknownObj)
    External (P162, UnknownObj)
    External (P163, UnknownObj)

    If (CondRefOf (\_SB.PR01))
    {
        Scope (\_SB.PR01)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (One, P101, IS01))
            }
        }
    }

    If (CondRefOf (\_SB.PR02))
    {
        Scope (\_SB.PR02)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x02, P102, IS02))
            }
        }
    }

    If (CondRefOf (\_SB.PR03))
    {
        Scope (\_SB.PR03)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x03, P103, IS03))
            }
        }
    }

    If (CondRefOf (\_SB.PR04))
    {
        Scope (\_SB.PR04)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x04, P104, IS04))
            }
        }
    }

    If (CondRefOf (\_SB.PR05))
    {
        Scope (\_SB.PR05)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x05, P105, IS05))
            }
        }
    }

    If (CondRefOf (\_SB.PR06))
    {
        Scope (\_SB.PR06)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x06, P106, IS06))
            }
        }
    }

    If (CondRefOf (\_SB.PR07))
    {
        Scope (\_SB.PR07)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x07, P107, IS07))
            }
        }
    }

    If (CondRefOf (\_SB.PR08))
    {
        Scope (\_SB.PR08)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x08, P108, IS08))
            }
        }
    }

    If (CondRefOf (\_SB.PR09))
    {
        Scope (\_SB.PR09)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x09, P109, IS09))
            }
        }
    }

    If (CondRefOf (\_SB.PR10))
    {
        Scope (\_SB.PR10)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x0A, P110, IS10))
            }
        }
    }

    If (CondRefOf (\_SB.PR11))
    {
        Scope (\_SB.PR11)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x0B, P111, IS11))
            }
        }
    }

    If (CondRefOf (\_SB.PR12))
    {
        Scope (\_SB.PR12)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x0C, P112, IS12))
            }
        }
    }

    If (CondRefOf (\_SB.PR13))
    {
        Scope (\_SB.PR13)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x0D, P113, IS13))
            }
        }
    }

    If (CondRefOf (\_SB.PR14))
    {
        Scope (\_SB.PR14)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x0E, P114, IS14))
            }
        }
    }

    If (CondRefOf (\_SB.PR15))
    {
        Scope (\_SB.PR15)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x0F, P115, IS15))
            }
        }
    }

    If (CondRefOf (\_SB.PR16))
    {
        Scope (\_SB.PR16)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x10, P116, IS16))
            }
        }
    }

    If (CondRefOf (\_SB.PR17))
    {
        Scope (\_SB.PR17)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x11, P117, IS17))
            }
        }
    }

    If (CondRefOf (\_SB.PR18))
    {
        Scope (\_SB.PR18)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x12, P118, IS18))
            }
        }
    }

    If (CondRefOf (\_SB.PR19))
    {
        Scope (\_SB.PR19)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x13, P119, IS19))
            }
        }
    }

    If (CondRefOf (\_SB.PR20))
    {
        Scope (\_SB.PR20)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x14, P120, IS20))
            }
        }
    }

    If (CondRefOf (\_SB.PR21))
    {
        Scope (\_SB.PR21)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x15, P121, IS21))
            }
        }
    }

    If (CondRefOf (\_SB.PR22))
    {
        Scope (\_SB.PR22)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x16, P122, IS22))
            }
        }
    }

    If (CondRefOf (\_SB.PR23))
    {
        Scope (\_SB.PR23)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x17, P123, IS23))
            }
        }
    }

    If (CondRefOf (\_SB.PR24))
    {
        Scope (\_SB.PR24)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x18, P124, IS24))
            }
        }
    }

    If (CondRefOf (\_SB.PR25))
    {
        Scope (\_SB.PR25)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x19, P125, IS25))
            }
        }
    }

    If (CondRefOf (\_SB.PR26))
    {
        Scope (\_SB.PR26)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x1A, P126, IS26))
            }
        }
    }

    If (CondRefOf (\_SB.PR27))
    {
        Scope (\_SB.PR27)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x1B, P127, IS27))
            }
        }
    }

    If (CondRefOf (\_SB.PR28))
    {
        Scope (\_SB.PR28)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x1C, P128, IS28))
            }
        }
    }

    If (CondRefOf (\_SB.PR29))
    {
        Scope (\_SB.PR29)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x1D, P129, IS29))
            }
        }
    }

    If (CondRefOf (\_SB.PR30))
    {
        Scope (\_SB.PR30)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x1E, P130, IS30))
            }
        }
    }

    If (CondRefOf (\_SB.PR31))
    {
        Scope (\_SB.PR31)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x1F, P131, IS31))
            }
        }
    }

    If (CondRefOf (\_SB.PR32))
    {
        Scope (\_SB.PR32)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x20, P132, IS32))
            }
        }
    }

    If (CondRefOf (\_SB.PR33))
    {
        Scope (\_SB.PR33)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x21, P133, IS33))
            }
        }
    }

    If (CondRefOf (\_SB.PR34))
    {
        Scope (\_SB.PR34)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x22, P134, IS34))
            }
        }
    }

    If (CondRefOf (\_SB.PR35))
    {
        Scope (\_SB.PR35)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x23, P135, IS35))
            }
        }
    }

    If (CondRefOf (\_SB.PR36))
    {
        Scope (\_SB.PR36)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x24, P136, IS36))
            }
        }
    }

    If (CondRefOf (\_SB.PR37))
    {
        Scope (\_SB.PR37)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x25, P137, IS37))
            }
        }
    }

    If (CondRefOf (\_SB.PR38))
    {
        Scope (\_SB.PR38)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x26, P138, IS38))
            }
        }
    }

    If (CondRefOf (\_SB.PR39))
    {
        Scope (\_SB.PR39)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x27, P139, IS39))
            }
        }
    }

    If (CondRefOf (\_SB.PR40))
    {
        Scope (\_SB.PR40)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x28, P140, IS40))
            }
        }
    }

    If (CondRefOf (\_SB.PR41))
    {
        Scope (\_SB.PR41)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x29, P141, IS41))
            }
        }
    }

    If (CondRefOf (\_SB.PR42))
    {
        Scope (\_SB.PR42)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x2A, P142, IS42))
            }
        }
    }

    If (CondRefOf (\_SB.PR43))
    {
        Scope (\_SB.PR43)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x2B, P143, IS43))
            }
        }
    }

    If (CondRefOf (\_SB.PR44))
    {
        Scope (\_SB.PR44)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x2C, P144, IS44))
            }
        }
    }

    If (CondRefOf (\_SB.PR45))
    {
        Scope (\_SB.PR45)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x2D, P145, IS45))
            }
        }
    }

    If (CondRefOf (\_SB.PR46))
    {
        Scope (\_SB.PR46)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x2E, P146, IS46))
            }
        }
    }

    If (CondRefOf (\_SB.PR47))
    {
        Scope (\_SB.PR47)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x2F, P147, IS47))
            }
        }
    }

    If (CondRefOf (\_SB.PR48))
    {
        Scope (\_SB.PR48)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x30, P148, IS48))
            }
        }
    }

    If (CondRefOf (\_SB.PR49))
    {
        Scope (\_SB.PR49)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x31, P149, IS49))
            }
        }
    }

    If (CondRefOf (\_SB.PR50))
    {
        Scope (\_SB.PR50)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x32, P150, IS50))
            }
        }
    }

    If (CondRefOf (\_SB.PR51))
    {
        Scope (\_SB.PR51)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x33, P151, IS51))
            }
        }
    }

    If (CondRefOf (\_SB.PR52))
    {
        Scope (\_SB.PR52)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x34, P152, IS52))
            }
        }
    }

    If (CondRefOf (\_SB.PR53))
    {
        Scope (\_SB.PR53)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x35, P153, IS53))
            }
        }
    }

    If (CondRefOf (\_SB.PR54))
    {
        Scope (\_SB.PR54)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x36, P154, IS54))
            }
        }
    }

    If (CondRefOf (\_SB.PR55))
    {
        Scope (\_SB.PR55)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x37, P155, IS55))
            }
        }
    }

    If (CondRefOf (\_SB.PR56))
    {
        Scope (\_SB.PR56)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x38, P156, IS56))
            }
        }
    }

    If (CondRefOf (\_SB.PR57))
    {
        Scope (\_SB.PR57)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x39, P157, IS57))
            }
        }
    }

    If (CondRefOf (\_SB.PR58))
    {
        Scope (\_SB.PR58)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x3A, P158, IS58))
            }
        }
    }

    If (CondRefOf (\_SB.PR59))
    {
        Scope (\_SB.PR59)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x3B, P159, IS59))
            }
        }
    }

    If (CondRefOf (\_SB.PR60))
    {
        Scope (\_SB.PR60)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x3C, P160, IS60))
            }
        }
    }

    If (CondRefOf (\_SB.PR61))
    {
        Scope (\_SB.PR61)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x3D, P161, IS61))
            }
        }
    }

    If (CondRefOf (\_SB.PR62))
    {
        Scope (\_SB.PR62)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x3E, P162, IS62))
            }
        }
    }

    If (CondRefOf (\_SB.PR63))
    {
        Scope (\_SB.PR63)
        {
            Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
            {
                Return (\_SB.PR00.GCPC (0x3F, P163, IS63))
            }
        }
    }
}



SSDT23
------
DefinitionBlock ("", "SSDT", 2, "INTEL", "xh_mtlp3", 0x00000000)
{
    External (_SB_.BTRK, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP01.PXSX.BTIE, FieldUnitObj)
    External (_SB_.PC00.RP01.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TXHC.RHUB.SS01, DeviceObj)
    External (_SB_.PC00.TXHC.RHUB.SS02, DeviceObj)
    External (_SB_.PC00.TXHC.RHUB.SS03, DeviceObj)
    External (_SB_.PC00.TXHC.RHUB.SS04, DeviceObj)
    External (_SB_.PC00.XHCI, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS01, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS02, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS03, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS04, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS05, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS06, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS07, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS08, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS09, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS10, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.BRMT, IntObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.CBTA, IntObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.CBTC, IntObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.CBTI, IntObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.CRFP, UnknownObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.RDLY, UnknownObj)
    External (_SB_.PC00.XHCI.RHUB.HS10.WVHO, IntObj)
    External (_SB_.PC00.XHCI.RHUB.SS01, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS02, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS03, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS04, DeviceObj)
    External (_SB_.PC02.HDBO, UnknownObj)
    External (_SB_.UBTC.RUCC, MethodObj)    // 2 Arguments
    External (ADBG, MethodObj)    // 1 Arguments
    External (ATDV, UnknownObj)
    External (BED2, UnknownObj)
    External (BED3, UnknownObj)
    External (BIPM, UnknownObj)
    External (BLEC, UnknownObj)
    External (BLPD, UnknownObj)
    External (BLPI, UnknownObj)
    External (BRMT, IntObj)
    External (BSPL, UnknownObj)
    External (BTBR, UnknownObj)
    External (BTL2, UnknownObj)
    External (BTLE, UnknownObj)
    External (BTLL, UnknownObj)
    External (BTSE, UnknownObj)
    External (CECV, UnknownObj)
    External (CGLS, UnknownObj)
    External (CNMT, UnknownObj)
    External (HDBO, UnknownObj)
    External (LEDU, UnknownObj)
    External (PU2C, UnknownObj)
    External (PU3C, UnknownObj)
    External (SLEC, UnknownObj)
    External (TAPM, UnknownObj)
    External (TILE, UnknownObj)
    External (TIS0, UnknownObj)
    External (TIS4, UnknownObj)
    External (TIS5, UnknownObj)
    External (TS0X, UnknownObj)

    Method (GPLD, 2, Serialized)
    {
        Name (PCKG, Package (0x01)
        {
            Buffer (0x10){}
        })
        CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
        REV = 0x02
        CreateField (DerefOf (PCKG [Zero]), 0x07, One, RGB)
        RGB = One
        CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
        VISI = Arg0
        CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
        GPOS = Arg1
        Return (PCKG) /* \GPLD.PCKG */
    }

    Method (GUPC, 2, Serialized)
    {
        Name (PCKG, Package (0x04)
        {
            0xFF, 
            0xFF, 
            Zero, 
            Zero
        })
        PCKG [Zero] = Arg0
        PCKG [One] = Arg1
        Return (PCKG) /* \GUPC.PCKG */
    }

    Scope (\_SB.PC00.TXHC.RHUB.SS01)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (\_SB.UBTC.RUCC (One, One))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (\_SB.UBTC.RUCC (One, 0x02))
        }
    }

    Scope (\_SB.PC00.TXHC.RHUB.SS02)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.TXHC.RHUB.SS03)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.TXHC.RHUB.SS04)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    If ((One <= PU2C))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS01)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                Return (\_SB.UBTC.RUCC (One, One))
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (\_SB.UBTC.RUCC (One, 0x02))
            }
        }
    }

    If ((0x02 <= PU2C))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS02)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                Return (GUPC (Zero, 0xFF))
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (GPLD (Zero, 0x02))
            }
        }
    }

    If ((0x03 <= PU2C))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS03)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                Return (GUPC (Zero, 0xFF))
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (GPLD (Zero, 0x03))
            }
        }
    }

    If ((0x04 <= PU2C))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS04)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                Return (GUPC (Zero, 0xFF))
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (GPLD (Zero, 0x04))
            }
        }
    }

    If ((0x05 <= PU2C))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS05)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                Return (GUPC (Zero, 0xFF))
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (GPLD (Zero, 0x05))
            }
        }
    }

    If ((0x06 <= PU2C))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS06)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                Return (GUPC (Zero, 0xFF))
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (GPLD (Zero, 0x06))
            }
        }
    }

    If ((0x07 <= PU2C))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS07)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                Return (GUPC (Zero, 0xFF))
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (GPLD (Zero, 0x07))
            }
        }
    }

    If ((0x08 <= PU2C))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS08)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                Return (GUPC (Zero, 0xFF))
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (GPLD (Zero, 0x08))
            }
        }
    }

    If ((0x09 <= PU2C))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS09)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                Return (GUPC (Zero, 0xFF))
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (GPLD (Zero, 0x09))
            }
        }
    }

    If ((0x0A <= PU2C))
    {
        Scope (\_SB.PC00.XHCI.RHUB.HS10)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                Return (GUPC (0xFF, 0xFF))
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (GPLD (Zero, 0x0A))
            }

            If (\_SB.PC00.RP01.PXSX.WIST ())
            {
                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = \ATDV /* External reference */
                    DerefOf (SADX [0x02]) [One] = \ATDV /* External reference */
                    Return (SADX) /* \_SB_.PC00.XHCI.RHUB.HS10.SADX */
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("aa10f4e0-81ac-4233-abf6-3b2ac50e28d9") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x1B                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            ADBG (Concatenate ("Set RDLY ", ToDecimalString (Arg3)))
                            RDLY = Arg3
                        }

                        If ((Arg2 == 0x03))
                        {
                            CreateWordField (Arg3, Zero, CMDT)
                            CreateWordField (Arg3, 0x02, CMDP)
                            If ((CMDT == One))
                            {
                                BRMT = CMDP /* \_SB_.PC00.XHCI.RHUB.HS10._DSM.CMDP */
                            }
                        }

                        If ((Arg2 == 0x04))
                        {
                            Return (BRMT) /* External reference */
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("2d19d3e1-5708-4696-bd5b-2c3dbae2d6a9") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            ADBG (Concatenate ("Tile Activation ", ToDecimalString (Arg3)))
                        }

                        Return (Zero)
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                PowerResource (BTRT, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("BT PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("BT PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("BT PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("BT PR _RST")
                        Local0 = Acquire (\CNMT, 0x03E8)
                        ADBG ("BT CNMT Mutex:Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            \_SB.BTRK (Zero)
                            Sleep (RDLY)
                            \_SB.BTRK (One)
                            Sleep (RDLY)
                        }

                        Release (\CNMT)
                    }
                }

                PowerResource (DBTR, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("BT PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("BT PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("BT PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("CNVd BT _RST")
                        ADBG (Concatenate (" WVHO -  ", ToHexString (WVHO)))
                        Local0 = Acquire (\CNMT, 0x03E8)
                        ADBG ("BT CNMT Mutex:Acquired Try Done")
                        If ((Local0 == Zero))
                        {
                            If ((BRMT == Zero))
                            {
                                ADBG ("BT RF Kill ON")
                                \_SB.BTRK (Zero)
                            }
                            ElseIf ((WVHO != Zero))
                            {
                                \_SB.PC00.RP01.PXSX.BTIE = Zero
                                ADBG ("Set BTIE Disable")
                            }

                            Sleep (RDLY)
                            If ((BRMT == Zero))
                            {
                                ADBG ("BT RF Kill OFF")
                                \_SB.BTRK (One)
                            }
                            ElseIf ((WVHO != Zero))
                            {
                                \_SB.PC00.RP01.PXSX.BTIE = One
                                ADBG ("Set BTIE Enable")
                            }

                            Sleep (RDLY)
                        }

                        Release (\CNMT)
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (((CBTC == One) && (CBTI == One)))
                    {
                        Return (Package (0x01)
                        {
                            BTRT
                        })
                    }
                    Else
                    {
                        Return (Package (0x01)
                        {
                            DBTR
                        })
                    }
                }

                Name (BRDY, Package (0x02)
                {
                    One, 
                    Package (0x0A)
                    {
                        0x12, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (BRDS, 0, Serialized)
                {
                    DerefOf (BRDY [One]) [One] = \BTSE /* External reference */
                    DerefOf (BRDY [One]) [0x02] = \BIPM /* External reference */
                    DerefOf (BRDY [One]) [0x03] = \BSPL /* External reference */
                    DerefOf (BRDY [One]) [0x04] = \BTBR /* External reference */
                    DerefOf (BRDY [One]) [0x05] = \BED2 /* External reference */
                    DerefOf (BRDY [One]) [0x06] = \BED3 /* External reference */
                    DerefOf (BRDY [One]) [0x07] = \BTLE /* External reference */
                    DerefOf (BRDY [One]) [0x08] = \BTL2 /* External reference */
                    DerefOf (BRDY [One]) [0x09] = \BTLL /* External reference */
                    Return (BRDY) /* \_SB_.PC00.XHCI.RHUB.HS10.BRDY */
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x12, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    DerefOf (ECKY [One]) [One] = \CECV /* External reference */
                    Return (ECKY) /* \_SB_.PC00.XHCI.RHUB.HS10.ECKY */
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PC00.XHCI.RHUB.HS10.GPCX */
                }

                Name (GLAX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Zero
                    }
                })
                Method (GLAI, 0, Serialized)
                {
                    ADBG (Concatenate ("AR: GLAI method. CGLS = ", ToHexString (\CGLS)))
                    DerefOf (GLAX [One]) [One] = \CGLS /* External reference */
                    DerefOf (GLAX [0x02]) [One] = \CGLS /* External reference */
                    Return (GLAX) /* \_SB_.PC00.XHCI.RHUB.HS10.GLAX */
                }

                Name (BTLY, Package (0x02)
                {
                    One, 
                    Package (0x0B)
                    {
                        0x12, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (BTLC, 0, Serialized)
                {
                    DerefOf (BTLY [One]) [One] = \TILE /* External reference */
                    DerefOf (BTLY [One]) [0x02] = \TIS0 /* External reference */
                    DerefOf (BTLY [One]) [0x03] = \TS0X /* External reference */
                    DerefOf (BTLY [One]) [0x04] = \TIS4 /* External reference */
                    DerefOf (BTLY [One]) [0x05] = \TIS5 /* External reference */
                    DerefOf (BTLY [One]) [0x06] = \BLEC /* External reference */
                    DerefOf (BTLY [One]) [0x07] = \BLPD /* External reference */
                    DerefOf (BTLY [One]) [0x08] = \BLPI /* External reference */
                    Return (BTLY) /* \_SB_.PC00.XHCI.RHUB.HS10.BTLY */
                }

                Method (AOLX, 0, NotSerialized)
                {
                    Name (AODS, Package (0x03)
                    {
                        Zero, 
                        0x12, 
                        Zero
                    })
                    If ((CBTA == One))
                    {
                        If ((CRFP == Zero))
                        {
                            If ((\HDBO & One))
                            {
                                AODS [0x02] = One
                            }
                        }
                        Else
                        {
                            AODS [0x02] = One
                        }
                    }

                    Return (AODS) /* \_SB_.PC00.XHCI.RHUB.HS10.AOLX.AODS */
                }

                Method (AOLD, 0, NotSerialized)
                {
                    Return (AOLX ())
                }
            }
        }
    }

    If ((One <= PU3C))
    {
        Scope (\_SB.PC00.XHCI.RHUB.SS01)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                Return (GUPC (Zero, 0xFF))
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (GPLD (Zero, 0xFF))
            }
        }
    }

    If ((0x02 <= PU3C))
    {
        Scope (\_SB.PC00.XHCI.RHUB.SS02)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                Return (GUPC (Zero, 0xFF))
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (GPLD (Zero, 0xFF))
            }
        }
    }

    If ((0x03 <= PU3C))
    {
        Scope (\_SB.PC00.XHCI.RHUB.SS03)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                Return (GUPC (Zero, 0xFF))
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (GPLD (Zero, 0xFF))
            }
        }
    }

    If ((0x04 <= PU3C))
    {
        Scope (\_SB.PC00.XHCI.RHUB.SS04)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                Return (GUPC (Zero, 0xFF))
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (GPLD (Zero, 0xFF))
            }
        }
    }
}



SSDT24
------
DefinitionBlock ("", "SSDT", 2, "INTEL ", "PDatTabl", 0x00001000)
{
    External (_SB_.IETM.CHRG, DeviceObj)
    External (_SB_.IETM.SEN2, DeviceObj)
    External (_SB_.IETM.SEN3, DeviceObj)
    External (_SB_.IETM.SEN4, DeviceObj)
    External (_SB_.IETM.SEN5, DeviceObj)
    External (_SB_.IETM.TFN1, DeviceObj)
    External (_SB_.IETM.TPWR, DeviceObj)
    External (_SB_.PC00.TCPU, DeviceObj)
    External (BREV, IntObj)
    External (PLID, IntObj)

    Scope (\_SB)
    {
        Device (PLDT)
        {
            Name (_HID, EisaId ("PNP0A05") /* Generic Container Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Name (_STR, Unicode ("Platform Data"))  // _STR: Description String
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (GHID, 1, Serialized)
            {
                If ((Arg0 == "IETM"))
                {
                    Return ("INTC1042")
                }

                If ((Arg0 == "SEN1"))
                {
                    Return ("INTC1062")
                }

                If ((Arg0 == "SEN2"))
                {
                    Return ("INTC1062")
                }

                If ((Arg0 == "SEN3"))
                {
                    Return ("INTC1062")
                }

                If ((Arg0 == "SEN4"))
                {
                    Return ("INTC1062")
                }

                If ((Arg0 == "SEN5"))
                {
                    Return ("INTC1062")
                }

                If ((Arg0 == "TPCH"))
                {
                    Return ("INTC1064")
                }

                If ((Arg0 == "TFN1"))
                {
                    Return ("INTC1063")
                }

                If ((Arg0 == "TFN2"))
                {
                    Return ("INTC1063")
                }

                If ((Arg0 == "TFN3"))
                {
                    Return ("INTC1063")
                }

                If ((Arg0 == "TPWR"))
                {
                    Return ("INTC1065")
                }

                If ((Arg0 == "DPLY"))
                {
                    Return (0x0634D425)
                }

                If ((Arg0 == "1"))
                {
                    Return ("INTC1066")
                }

                If ((Arg0 == "CHRG"))
                {
                    Return ("INTC1062")
                }

                Return ("XXXX9999")
            }

            Method (GDDV, 0, Serialized)
            {
                Return (Package (0x01)
                {
                    Buffer (0x0505)
                    {
                        /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                        /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                        /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                        /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                        /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0068 */  0x00, 0x00, 0x00, 0x00, 0xA1, 0x75, 0x28, 0x26,  // .....u(&
                        /* 0070 */  0xF3, 0x4D, 0x02, 0x06, 0xCE, 0xA7, 0x19, 0xC9,  // .M......
                        /* 0078 */  0x90, 0x61, 0xEF, 0x43, 0x43, 0x66, 0xF2, 0xA3,  // .a.CCf..
                        /* 0080 */  0x98, 0xE9, 0x8C, 0x22, 0xA6, 0xE8, 0xF7, 0x7B,  // ..."...{
                        /* 0088 */  0x46, 0x59, 0x90, 0xBD, 0x71, 0x04, 0x00, 0x00,  // FY..q...
                        /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                        /* 0098 */  0x01, 0xA2, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..<.....
                        /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                        /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                        /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                        /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                        /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                        /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x44, 0x26, 0xD8,  // u8...D&.
                        /* 00D0 */  0xA6, 0x2E, 0xE3, 0xB0, 0x1D, 0x2E, 0x19, 0xBA,  // ........
                        /* 00D8 */  0xBF, 0x66, 0x6B, 0x16, 0x8F, 0x47, 0x6B, 0x74,  // .fk..Gkt
                        /* 00E0 */  0x4E, 0xB1, 0x4E, 0xA0, 0x60, 0x91, 0x8D, 0x38,  // N.N.`..8
                        /* 00E8 */  0x91, 0x18, 0x3A, 0xA2, 0x7F, 0x3F, 0x7A, 0x65,  // ..:..?ze
                        /* 00F0 */  0x93, 0x86, 0x54, 0xE0, 0x7D, 0x0B, 0x58, 0xC9,  // ..T.}.X.
                        /* 00F8 */  0xFE, 0x86, 0x61, 0xE9, 0xBE, 0xEE, 0x96, 0xB0,  // ..a.....
                        /* 0100 */  0x38, 0x8D, 0x02, 0x05, 0x21, 0xE8, 0x18, 0x87,  // 8...!...
                        /* 0108 */  0x46, 0x78, 0x5E, 0xEB, 0xCE, 0x37, 0x10, 0x6D,  // Fx^..7.m
                        /* 0110 */  0xE7, 0xE4, 0x74, 0xD6, 0x0C, 0xB4, 0xB7, 0x3E,  // ..t....>
                        /* 0118 */  0x79, 0x84, 0x8D, 0x5B, 0x51, 0x8A, 0x7B, 0x73,  // y..[Q.{s
                        /* 0120 */  0xC9, 0x0E, 0x60, 0x77, 0x1A, 0xC0, 0xE6, 0x0B,  // ..`w....
                        /* 0128 */  0x79, 0x48, 0x38, 0x76, 0xA9, 0x34, 0x5C, 0x02,  // yH8v.4\.
                        /* 0130 */  0x25, 0x83, 0x22, 0xBB, 0xBA, 0xBF, 0xC8, 0x79,  // %."....y
                        /* 0138 */  0xE3, 0xB2, 0x06, 0x45, 0x86, 0x17, 0xC4, 0x29,  // ...E...)
                        /* 0140 */  0xBD, 0x30, 0xCC, 0x2B, 0xA7, 0xF8, 0x5F, 0x7B,  // .0.+.._{
                        /* 0148 */  0x94, 0x81, 0xDD, 0x56, 0x3A, 0x1B, 0x84, 0x72,  // ...V:..r
                        /* 0150 */  0xBC, 0x84, 0xF6, 0x09, 0x0A, 0xB8, 0xDE, 0x1F,  // ........
                        /* 0158 */  0x12, 0x95, 0xBE, 0xE4, 0x69, 0x2A, 0xAA, 0xB0,  // ....i*..
                        /* 0160 */  0x94, 0x35, 0x93, 0x8B, 0xAA, 0x77, 0xF3, 0xB3,  // .5...w..
                        /* 0168 */  0xED, 0xA1, 0x17, 0x96, 0x48, 0xCC, 0x04, 0xCB,  // ....H...
                        /* 0170 */  0x29, 0x34, 0x80, 0xD6, 0xAD, 0x96, 0x6D, 0x6E,  // )4....mn
                        /* 0178 */  0x55, 0x1F, 0xD4, 0xE4, 0xCB, 0x8E, 0xA0, 0x98,  // U.......
                        /* 0180 */  0x7B, 0x81, 0x61, 0x61, 0xF2, 0x3E, 0x0D, 0x36,  // {.aa.>.6
                        /* 0188 */  0x27, 0x09, 0x39, 0x60, 0x7C, 0xC4, 0xB1, 0x1A,  // '.9`|...
                        /* 0190 */  0xB6, 0x96, 0xAA, 0x1D, 0x59, 0x20, 0xDA, 0x54,  // ....Y .T
                        /* 0198 */  0x04, 0x48, 0x26, 0x80, 0x48, 0x3A, 0x04, 0x1C,  // .H&.H:..
                        /* 01A0 */  0x6E, 0x7E, 0x27, 0xFD, 0x32, 0xD1, 0xD5, 0xA6,  // n~'.2...
                        /* 01A8 */  0x93, 0x77, 0x50, 0x5A, 0xC9, 0x39, 0xF0, 0x71,  // .wPZ.9.q
                        /* 01B0 */  0x14, 0x98, 0x16, 0xEF, 0x49, 0x0B, 0xDB, 0x4E,  // ....I..N
                        /* 01B8 */  0xA0, 0xF9, 0x48, 0xAE, 0x83, 0x50, 0xE9, 0x4A,  // ..H..P.J
                        /* 01C0 */  0x0F, 0x8D, 0x3E, 0x96, 0x59, 0x0D, 0x86, 0xC4,  // ..>.Y...
                        /* 01C8 */  0x16, 0xEB, 0x8D, 0x7F, 0xCC, 0x9E, 0x69, 0xB1,  // ......i.
                        /* 01D0 */  0x96, 0xE7, 0x27, 0x2C, 0x2C, 0xD8, 0xDD, 0x21,  // ..',,..!
                        /* 01D8 */  0x93, 0xE6, 0x6D, 0xAC, 0xE5, 0x1A, 0xE9, 0xE8,  // ..m.....
                        /* 01E0 */  0x2D, 0xC1, 0x51, 0x92, 0x43, 0xC9, 0x1A, 0xC5,  // -.Q.C...
                        /* 01E8 */  0x8A, 0xC2, 0x07, 0xF9, 0xA8, 0xCA, 0x51, 0xC0,  // ......Q.
                        /* 01F0 */  0x2C, 0x07, 0x65, 0x5B, 0x53, 0xB8, 0xAD, 0x06,  // ,.e[S...
                        /* 01F8 */  0x47, 0x9C, 0x2C, 0x47, 0xAD, 0x27, 0x05, 0x49,  // G.,G.'.I
                        /* 0200 */  0x15, 0x36, 0x36, 0x65, 0xDF, 0x5E, 0x30, 0x02,  // .66e.^0.
                        /* 0208 */  0x26, 0xAC, 0x82, 0xF1, 0x28, 0xFD, 0x0B, 0xCA,  // &...(...
                        /* 0210 */  0x7B, 0x1B, 0x7B, 0xA4, 0x11, 0x7C, 0x15, 0x81,  // {.{..|..
                        /* 0218 */  0x7A, 0x61, 0x71, 0x0E, 0xA8, 0x96, 0x3C, 0x5A,  // zaq...<Z
                        /* 0220 */  0x85, 0xB6, 0xA4, 0x70, 0x6C, 0x58, 0xAD, 0x74,  // ...plX.t
                        /* 0228 */  0xE5, 0xC2, 0xB5, 0xAE, 0x87, 0x9C, 0xAB, 0x36,  // .......6
                        /* 0230 */  0xE8, 0x88, 0x92, 0x0F, 0x9B, 0x3E, 0xC4, 0x4F,  // .....>.O
                        /* 0238 */  0x8D, 0x3A, 0xE1, 0x53, 0x21, 0x51, 0x71, 0x53,  // .:.S!QqS
                        /* 0240 */  0x69, 0xD4, 0xB5, 0xD9, 0x05, 0x64, 0x05, 0x01,  // i....d..
                        /* 0248 */  0x5F, 0xD7, 0xA0, 0xAA, 0xEB, 0x48, 0xDA, 0xB8,  // _....H..
                        /* 0250 */  0x59, 0x79, 0x5F, 0xA1, 0x85, 0xF7, 0xD2, 0x14,  // Yy_.....
                        /* 0258 */  0x9F, 0x21, 0x43, 0x85, 0xF9, 0x03, 0x28, 0x7C,  // .!C...(|
                        /* 0260 */  0x57, 0x0B, 0xFC, 0x2B, 0x3A, 0xC7, 0x30, 0x63,  // W..+:.0c
                        /* 0268 */  0x42, 0x1A, 0xAF, 0x99, 0xF4, 0xF1, 0x97, 0x60,  // B......`
                        /* 0270 */  0xAD, 0x35, 0x7E, 0xFE, 0xC0, 0x14, 0x59, 0x09,  // .5~...Y.
                        /* 0278 */  0x7B, 0x9B, 0x3F, 0x91, 0x5E, 0x4D, 0x52, 0x6D,  // {.?.^MRm
                        /* 0280 */  0xD1, 0x49, 0x3D, 0x34, 0x23, 0x4C, 0x33, 0xB7,  // .I=4#L3.
                        /* 0288 */  0xF1, 0x2A, 0x38, 0xF5, 0x75, 0x12, 0x7F, 0xF4,  // .*8.u...
                        /* 0290 */  0x06, 0x81, 0xD9, 0x62, 0x8A, 0xED, 0xA8, 0xDE,  // ...b....
                        /* 0298 */  0xE4, 0xCF, 0x25, 0x23, 0x36, 0x38, 0xFF, 0xA1,  // ..%#68..
                        /* 02A0 */  0xA2, 0x40, 0x8F, 0x3A, 0x81, 0x9E, 0xE4, 0x2F,  // .@.:.../
                        /* 02A8 */  0x93, 0x8E, 0x5A, 0x14, 0xBB, 0xD8, 0x7B, 0x59,  // ..Z...{Y
                        /* 02B0 */  0x08, 0xD8, 0xA0, 0xDE, 0x89, 0x57, 0xCE, 0xEA,  // .....W..
                        /* 02B8 */  0xDA, 0x2F, 0x91, 0xA0, 0x4E, 0xDF, 0x49, 0x41,  // ./..N.IA
                        /* 02C0 */  0x69, 0x90, 0xC7, 0xBB, 0xF7, 0x3A, 0x58, 0x11,  // i....:X.
                        /* 02C8 */  0x93, 0x7F, 0xC5, 0x3F, 0x75, 0x81, 0x11, 0x32,  // ...?u..2
                        /* 02D0 */  0x38, 0x7E, 0xC2, 0xF9, 0x21, 0x7B, 0x75, 0xF4,  // 8~..!{u.
                        /* 02D8 */  0xF3, 0xDA, 0xC2, 0xAB, 0x40, 0xD5, 0xCF, 0x2A,  // ....@..*
                        /* 02E0 */  0x13, 0xBC, 0x70, 0xD6, 0xA8, 0xC1, 0x84, 0xC4,  // ..p.....
                        /* 02E8 */  0xB8, 0x1D, 0x68, 0x6A, 0x80, 0xC0, 0xA6, 0xC2,  // ..hj....
                        /* 02F0 */  0x45, 0x55, 0xC1, 0xD7, 0x74, 0xE9, 0xDD, 0x23,  // EU..t..#
                        /* 02F8 */  0xA6, 0x51, 0x8C, 0xE4, 0xE4, 0xF0, 0x5D, 0x29,  // .Q....])
                        /* 0300 */  0xBA, 0x97, 0x79, 0x2C, 0xC2, 0xAB, 0x33, 0x3B,  // ..y,..3;
                        /* 0308 */  0xDB, 0xA9, 0xB8, 0x0C, 0x13, 0x3F, 0x81, 0x07,  // .....?..
                        /* 0310 */  0x7B, 0xB9, 0x0D, 0xD8, 0x1F, 0x71, 0x9C, 0x1F,  // {....q..
                        /* 0318 */  0xDF, 0x68, 0xC4, 0x78, 0xE5, 0x4D, 0x96, 0x6A,  // .h.x.M.j
                        /* 0320 */  0x7F, 0x0A, 0x7B, 0x17, 0x1A, 0x01, 0xDD, 0x64,  // ..{....d
                        /* 0328 */  0x6E, 0x8D, 0x44, 0x6F, 0xF3, 0x27, 0x8D, 0x82,  // n.Do.'..
                        /* 0330 */  0xB8, 0xB6, 0xCC, 0x69, 0x29, 0x53, 0x28, 0x9D,  // ...i)S(.
                        /* 0338 */  0x1A, 0x65, 0x91, 0x40, 0x2A, 0x96, 0xC1, 0xCE,  // .e.@*...
                        /* 0340 */  0xA0, 0x1B, 0x53, 0x10, 0x43, 0xE7, 0xA2, 0x46,  // ..S.C..F
                        /* 0348 */  0xF1, 0x88, 0xAD, 0x11, 0x8B, 0x37, 0xFB, 0xCC,  // .....7..
                        /* 0350 */  0x15, 0xC8, 0xD3, 0x30, 0xB8, 0x4A, 0x70, 0x43,  // ...0.JpC
                        /* 0358 */  0x01, 0x51, 0x40, 0xDF, 0xEB, 0x61, 0xAF, 0x38,  // .Q@..a.8
                        /* 0360 */  0xD6, 0xA9, 0xFF, 0xB4, 0x20, 0xA0, 0x56, 0x11,  // .... .V.
                        /* 0368 */  0x16, 0x17, 0x18, 0xD1, 0x0B, 0x36, 0x52, 0x1F,  // .....6R.
                        /* 0370 */  0x1E, 0x87, 0xCF, 0xCC, 0x79, 0x35, 0x45, 0xDF,  // ....y5E.
                        /* 0378 */  0xCC, 0x1F, 0xEC, 0x42, 0xD0, 0x77, 0xB8, 0x3C,  // ...B.w.<
                        /* 0380 */  0xD2, 0xCB, 0x03, 0x55, 0x05, 0x87, 0x82, 0x68,  // ...U...h
                        /* 0388 */  0x1E, 0xBC, 0x77, 0xD2, 0x67, 0x1B, 0x31, 0x23,  // ..w.g.1#
                        /* 0390 */  0xA1, 0xF9, 0xC7, 0x2D, 0xB6, 0xCD, 0xBB, 0x43,  // ...-...C
                        /* 0398 */  0x21, 0xB2, 0x09, 0x47, 0xFA, 0x74, 0xA6, 0xA9,  // !..G.t..
                        /* 03A0 */  0xFD, 0xAB, 0xC1, 0xC7, 0xB9, 0x55, 0x97, 0xE4,  // .....U..
                        /* 03A8 */  0x24, 0x67, 0x77, 0x6B, 0xA7, 0x64, 0xD0, 0xC4,  // $gwk.d..
                        /* 03B0 */  0x46, 0xBF, 0x70, 0xCB, 0x5B, 0xA3, 0xD2, 0x5D,  // F.p.[..]
                        /* 03B8 */  0x33, 0x8C, 0x24, 0x4A, 0x29, 0xA6, 0x94, 0x5A,  // 3.$J)..Z
                        /* 03C0 */  0xAE, 0xAE, 0x6C, 0x2B, 0xA8, 0x16, 0x02, 0x2D,  // ..l+...-
                        /* 03C8 */  0xF6, 0x57, 0x54, 0x7F, 0xB7, 0xC2, 0xB4, 0xAC,  // .WT.....
                        /* 03D0 */  0xCE, 0x75, 0xF4, 0x6B, 0x01, 0xCD, 0xBE, 0xD8,  // .u.k....
                        /* 03D8 */  0x2E, 0xF8, 0x8C, 0x82, 0x78, 0x36, 0x30, 0x9B,  // ....x60.
                        /* 03E0 */  0x87, 0x60, 0x29, 0xE3, 0xA5, 0xE5, 0xAC, 0x6D,  // .`)....m
                        /* 03E8 */  0x26, 0x5C, 0x3D, 0xD2, 0xA2, 0x6C, 0xDE, 0xE2,  // &\=..l..
                        /* 03F0 */  0x61, 0x9F, 0x78, 0x75, 0x46, 0xA7, 0xE7, 0x98,  // a.xuF...
                        /* 03F8 */  0x2D, 0x6A, 0xFC, 0x86, 0x32, 0xF8, 0xD8, 0xBE,  // -j..2...
                        /* 0400 */  0x4C, 0xDB, 0x0A, 0x0E, 0x5D, 0x02, 0x96, 0x84,  // L...]...
                        /* 0408 */  0xE7, 0xF5, 0x8A, 0x24, 0xE5, 0x18, 0x39, 0x04,  // ...$..9.
                        /* 0410 */  0xB4, 0x0A, 0xC2, 0x14, 0xAC, 0x5B, 0x73, 0x89,  // .....[s.
                        /* 0418 */  0x4E, 0x82, 0x78, 0x3D, 0x4D, 0x3B, 0x5F, 0x51,  // N.x=M;_Q
                        /* 0420 */  0x73, 0x7E, 0x9E, 0x67, 0xA5, 0x87, 0xBF, 0x31,  // s~.g...1
                        /* 0428 */  0xEE, 0xB4, 0x35, 0x94, 0x71, 0x3B, 0x00, 0x83,  // ..5.q;..
                        /* 0430 */  0xDF, 0xBD, 0xF7, 0xE1, 0x75, 0x50, 0x0B, 0xDF,  // ....uP..
                        /* 0438 */  0xC1, 0x6F, 0xA7, 0x03, 0xA4, 0xCA, 0xF0, 0xAE,  // .o......
                        /* 0440 */  0xD2, 0xD8, 0x54, 0x19, 0x93, 0xFB, 0x5E, 0x3C,  // ..T...^<
                        /* 0448 */  0x41, 0x6E, 0x18, 0xDA, 0x8B, 0x57, 0x01, 0xA1,  // An...W..
                        /* 0450 */  0x5C, 0x66, 0x03, 0x86, 0x2E, 0xC9, 0xC3, 0x99,  // \f......
                        /* 0458 */  0x6B, 0x92, 0x12, 0xBE, 0x59, 0xC7, 0x3B, 0xFE,  // k...Y.;.
                        /* 0460 */  0x63, 0x0E, 0x72, 0x21, 0xA4, 0xE0, 0xA7, 0x89,  // c.r!....
                        /* 0468 */  0x7F, 0x42, 0x25, 0xAE, 0xA4, 0x88, 0x19, 0x56,  // .B%....V
                        /* 0470 */  0xB9, 0x3C, 0xBB, 0xA9, 0x65, 0xB6, 0x5F, 0x78,  // .<..e._x
                        /* 0478 */  0x8A, 0x0B, 0x6A, 0x07, 0xAE, 0x7C, 0xF1, 0x02,  // ..j..|..
                        /* 0480 */  0xE3, 0x79, 0x23, 0xA5, 0xBE, 0xF1, 0xE2, 0x6A,  // .y#....j
                        /* 0488 */  0x3A, 0x0C, 0x29, 0xAD, 0xC2, 0xBD, 0x75, 0xFC,  // :.)...u.
                        /* 0490 */  0x8C, 0x30, 0x55, 0x39, 0x02, 0xC7, 0x12, 0x3B,  // .0U9...;
                        /* 0498 */  0x49, 0xD9, 0x23, 0xD7, 0xFC, 0xBA, 0xC7, 0x2A,  // I.#....*
                        /* 04A0 */  0x9E, 0xC0, 0x06, 0x25, 0xF5, 0x22, 0x10, 0x55,  // ...%.".U
                        /* 04A8 */  0xC6, 0xA2, 0xE5, 0x1A, 0x94, 0xF5, 0x24, 0xBF,  // ......$.
                        /* 04B0 */  0x58, 0xE7, 0xFB, 0x36, 0xD1, 0x46, 0x44, 0xE3,  // X..6.FD.
                        /* 04B8 */  0x30, 0x18, 0x2F, 0x56, 0x31, 0xF2, 0x4C, 0xF8,  // 0./V1.L.
                        /* 04C0 */  0x02, 0x73, 0x7B, 0x3A, 0x4C, 0x72, 0xFE, 0x70,  // .s{:Lr.p
                        /* 04C8 */  0x42, 0x2D, 0x08, 0xA7, 0xC7, 0x34, 0x9D, 0x66,  // B-...4.f
                        /* 04D0 */  0x31, 0x91, 0x1E, 0xDA, 0x25, 0xF8, 0xD0, 0x36,  // 1...%..6
                        /* 04D8 */  0x17, 0x8B, 0x57, 0x9A, 0x07, 0xDB, 0xBB, 0xEF,  // ..W.....
                        /* 04E0 */  0x1E, 0xF4, 0x8B, 0xFE, 0x23, 0x30, 0xD6, 0x75,  // ....#0.u
                        /* 04E8 */  0x4D, 0x78, 0x3B, 0x94, 0xE1, 0xFB, 0x38, 0xFC,  // Mx;...8.
                        /* 04F0 */  0xC4, 0x58, 0x33, 0x63, 0xF5, 0xE0, 0x76, 0x9D,  // .X3c..v.
                        /* 04F8 */  0xEF, 0x76, 0x7E, 0x8E, 0x1D, 0x8A, 0x09, 0xE2,  // .v~.....
                        /* 0500 */  0x5C, 0x8A, 0xBA, 0x5D, 0x48                     // \..]H
                    }
                })
            }

            Method (FIDC, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (One)
                    }
                    Case (One)
                    {
                        Return (0x02)
                    }
                    Case (0x02)
                    {
                        Return (0x04)
                    }
                    Default
                    {
                        Return (0xF0)
                    }

                }
            }

            Method (FPST, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (FPS0) /* \_SB_.PLDT.FPS0 */
                    }
                    Default
                    {
                        Return (FPS0) /* \_SB_.PLDT.FPS0 */
                    }

                }
            }

            Name (FPS0, Package (0x0D)
            {
                Zero, 
                Package (0x05)
                {
                    0x64, 
                    0xFFFFFFFF, 
                    0x2EE0, 
                    0x01F4, 
                    0x1388
                }, 

                Package (0x05)
                {
                    0x5F, 
                    0xFFFFFFFF, 
                    0x2D50, 
                    0x01DB, 
                    0x128E
                }, 

                Package (0x05)
                {
                    0x5A, 
                    0xFFFFFFFF, 
                    0x2BC0, 
                    0x01C2, 
                    0x1194
                }, 

                Package (0x05)
                {
                    0x55, 
                    0xFFFFFFFF, 
                    0x2904, 
                    0x01A9, 
                    0x109A
                }, 

                Package (0x05)
                {
                    0x50, 
                    0xFFFFFFFF, 
                    0x2648, 
                    0x0190, 
                    0x0FA0
                }, 

                Package (0x05)
                {
                    0x46, 
                    0xFFFFFFFF, 
                    0x2454, 
                    0x015E, 
                    0x0DAC
                }, 

                Package (0x05)
                {
                    0x3C, 
                    0xFFFFFFFF, 
                    0x1CE8, 
                    0x012C, 
                    0x0BB8
                }, 

                Package (0x05)
                {
                    0x32, 
                    0xFFFFFFFF, 
                    0x189C, 
                    0xFA, 
                    0x09C4
                }, 

                Package (0x05)
                {
                    0x28, 
                    0xFFFFFFFF, 
                    0x13EC, 
                    0xC8, 
                    0x07D0
                }, 

                Package (0x05)
                {
                    0x1E, 
                    0xFFFFFFFF, 
                    0x0ED8, 
                    0x96, 
                    0x05DC
                }, 

                Package (0x05)
                {
                    0x19, 
                    0xFFFFFFFF, 
                    0x0C80, 
                    0x7D, 
                    0x04E2
                }, 

                Package (0x05)
                {
                    Zero, 
                    0xFFFFFFFF, 
                    Zero, 
                    Zero, 
                    Zero
                }
            })
            If (CondRefOf (\_SB.IETM.TFN1))
            {
                Name (ART1, Package (0x06)
                {
                    Zero, 
                    Package (0x0D)
                    {
                        \_SB.IETM.TFN1, 
                        \_SB.PC00.TCPU, 
                        0x64, 
                        0x50, 
                        0x3C, 
                        0x28, 
                        0x1E, 
                        0x14, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    }, 

                    Package (0x0D)
                    {
                        \_SB.IETM.TFN1, 
                        \_SB.IETM.SEN2, 
                        0x64, 
                        0x50, 
                        0x3C, 
                        0x1E, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    }, 

                    Package (0x0D)
                    {
                        \_SB.IETM.TFN1, 
                        \_SB.IETM.SEN3, 
                        0x64, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0x50, 
                        0x3C, 
                        0x1E, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    }, 

                    Package (0x0D)
                    {
                        \_SB.IETM.TFN1, 
                        \_SB.IETM.SEN4, 
                        0x64, 
                        0x50, 
                        0x3C, 
                        0x1E, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    }, 

                    Package (0x0D)
                    {
                        \_SB.IETM.TFN1, 
                        \_SB.IETM.SEN5, 
                        0x64, 
                        0x50, 
                        0x3C, 
                        0x1E, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    }
                })
                Name (ART0, Package (0x06)
                {
                    Zero, 
                    Package (0x0D)
                    {
                        \_SB.IETM.TFN1, 
                        \_SB.PC00.TCPU, 
                        0x64, 
                        0x64, 
                        0x50, 
                        0x32, 
                        0x28, 
                        0x1E, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    }, 

                    Package (0x0D)
                    {
                        \_SB.IETM.TFN1, 
                        \_SB.IETM.SEN2, 
                        0x64, 
                        0x50, 
                        0x32, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    }, 

                    Package (0x0D)
                    {
                        \_SB.IETM.TFN1, 
                        \_SB.IETM.SEN3, 
                        0x64, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0x64, 
                        0x50, 
                        0x32, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    }, 

                    Package (0x0D)
                    {
                        \_SB.IETM.TFN1, 
                        \_SB.IETM.SEN4, 
                        0x64, 
                        0x64, 
                        0x50, 
                        0x32, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    }, 

                    Package (0x0D)
                    {
                        \_SB.IETM.TFN1, 
                        \_SB.IETM.SEN5, 
                        0x64, 
                        0x64, 
                        0x50, 
                        0x32, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    }
                })
            }

            If (CondRefOf (\_SB.IETM.CHRG))
            {
                Name (TRT0, Package (0x02)
                {
                    Package (0x08)
                    {
                        \_SB.PC00.TCPU, 
                        \_SB.IETM.SEN2, 
                        0x28, 
                        0x64, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        \_SB.IETM.CHRG, 
                        \_SB.IETM.SEN4, 
                        0x14, 
                        0xC8, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (PTRT, 0, NotSerialized)
                {
                    Return (TRT0) /* \_SB_.PLDT.TRT0 */
                }

                Name (PSVT, Package (0x05)
                {
                    0x02, 
                    Package (0x0C)
                    {
                        \_SB.IETM.CHRG, 
                        \_SB.IETM.SEN3, 
                        One, 
                        0xC8, 
                        0x0C6E, 
                        0x0E, 
                        0x000A0000, 
                        "MAX", 
                        One, 
                        0x0A, 
                        0x0A, 
                        Zero
                    }, 

                    Package (0x0C)
                    {
                        \_SB.IETM.CHRG, 
                        \_SB.IETM.SEN3, 
                        One, 
                        0xC8, 
                        0x0CA0, 
                        0x0E, 
                        0x000A0000, 
                        One, 
                        One, 
                        0x0A, 
                        0x0A, 
                        Zero
                    }, 

                    Package (0x0C)
                    {
                        \_SB.IETM.CHRG, 
                        \_SB.IETM.SEN3, 
                        One, 
                        0xC8, 
                        0x0CD2, 
                        0x0E, 
                        0x000A0000, 
                        0x02, 
                        One, 
                        0x0A, 
                        0x0A, 
                        Zero
                    }, 

                    Package (0x0C)
                    {
                        \_SB.IETM.CHRG, 
                        \_SB.IETM.SEN3, 
                        One, 
                        0xC8, 
                        0x0D36, 
                        0x0E, 
                        0x000A0000, 
                        "MIN", 
                        One, 
                        0x0A, 
                        0x0A, 
                        Zero
                    }
                })
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 2, "MSI_NB", "PtidDevc", 0x00001000)
{
    External (_SB_.PC00.LPCB.ENPC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.ISPC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.OSDD, MethodObj)    // 2 Arguments
    External (_SB_.PC00.LPCB.PSDD, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.RPCS, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.RPEC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.RPMD, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.TSDD, MethodObj)    // 2 Arguments
    External (_SB_.PC00.LPCB.WPMD, MethodObj)    // 1 Arguments
    External (_TZ_.TZ00._TMP, UnknownObj)
    External (PAMT, UnknownObj)
    External (TSDB, UnknownObj)

    Scope (\_SB)
    {
        Device (PTID)
        {
            Name (_HID, EisaId ("INT340E") /* Motherboard Resources */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Name (IVER, 0x00030000)
            Name (_STA, 0x0F)  // _STA: Status
            Method (TSDL, 0, NotSerialized)
            {
                If ((TSDB == One))
                {
                    Return (TSD2) /* \_SB_.PTID.TSD2 */
                }

                Return (TSD1) /* \_SB_.PTID.TSD1 */
            }

            Name (TSD1, Package (0x26)
            {
                Zero, 
                "CPU Core 0 DTS", 
                Zero, 
                "CPU Core 1 DTS", 
                Zero, 
                "CPU Core 2 DTS", 
                Zero, 
                "CPU Core 3 DTS", 
                Zero, 
                "CPU Core Package DTS", 
                0x03, 
                "DIMM0_hotspot_U4C1", 
                0x03, 
                "DIMM1_hotspot_Q4D1", 
                0x03, 
                "IMVP_conn_Q7C1", 
                0x03, 
                "board_hotspot1_U3G3", 
                0x03, 
                "board_hotspot2_Q3G1", 
                Zero, 
                "CPU Package Temperature", 
                0x05, 
                "PCH DTS Temperature from PCH", 
                Zero, 
                "CPU PECI reading", 
                0x05, 
                "SA DTS Temperature from PCH", 
                0x02, 
                "TZ00 _TMP", 
                0x03, 
                "SDRAM_hotspot_RT5B1", 
                0x03, 
                "NGFF_slot_RT6G1", 
                0x03, 
                "IMVP_conn_RT7D1", 
                0x03, 
                "board_hotspot3_RT8F1"
            })
            Name (TSD2, Package (0x26)
            {
                Zero, 
                "CPU Core 0 DTS", 
                Zero, 
                "CPU Core 1 DTS", 
                Zero, 
                "CPU Core 2 DTS", 
                Zero, 
                "CPU Core 3 DTS", 
                Zero, 
                "CPU Core Package DTS", 
                0x03, 
                "A-Skin Hotspot U21", 
                0x03, 
                "A-Skin Hotspot U21 IR", 
                0x03, 
                "B-Skin Hotspot U1", 
                0x03, 
                "B-Skin Hotspot U1 IR", 
                Zero, 
                "CPU Package Temperature", 
                0x05, 
                "PCH DTS Temperature from PCH", 
                Zero, 
                "CPU PECI reading", 
                0x05, 
                "SA DTS Temperature from PCH", 
                0x02, 
                "TZ00 _TMP", 
                0x03, 
                "SoC VR Thermsitor RT11", 
                0x03, 
                "Memory Thermistor RT9", 
                0x03, 
                "GNSS Board Ambient Thermistor R4", 
                0x03, 
                "System VR Thermistor RT10", 
                0x03, 
                "A-Skin MipiCam Thermistor RT8"
            })
            Name (PSDL, Package (0x26)
            {
                0x0B, 
                "Platform Power (mW)", 
                0x0B, 
                "Brick Power cW (100ths)", 
                0x0B, 
                "Battery Discharge Power cW (100ths)", 
                0x0B, 
                "Platform Average Power (mW)", 
                0x0B, 
                "Brick Average Power cW (0.01)", 
                0x0B, 
                "Battery Discharge Average Power cW (0.01)", 
                0x0C, 
                "Battery 1 Design Capacity (mWh)", 
                0x0C, 
                "Battery 1 Remaining Capacity (mWh)", 
                0x0C, 
                "Battery 1 Full Charge Capacity (mWh)", 
                0x0C, 
                "Battery 1 Full Resolution Voltage (mV)", 
                0x0C, 
                "Battery 1 Full Resolution Discharge Current (mA)", 
                0x0C, 
                "Battery 1 Full Resolution Charge Current (mA)", 
                0x0C, 
                "Battery 2 Remaining Capacity (mWh)", 
                0x0C, 
                "Battery 2 Full Charge Capacity (mWh)", 
                0x0C, 
                "Battery 2 Full Resolution Voltage (mV)", 
                0x0C, 
                "Battery 2 Full Resolution Discharge Current (mA)", 
                0x0C, 
                "Battery 2 Full Resolution Charge Current (mA)", 
                0x0C, 
                "Battery Pack 1 maximum power (mW)", 
                0x0C, 
                "Battery Pack 2 maximum power (mW)"
            })
            Method (OSDL, 0, NotSerialized)
            {
                If ((TSDB == One))
                {
                    Return (OSD2) /* \_SB_.PTID.OSD2 */
                }

                Return (OSD1) /* \_SB_.PTID.OSD1 */
            }

            Name (OSD1, Package (0x15)
            {
                0x04, 
                "CPU Fan Duty Cycle", 
                "RAW", 
                0x04, 
                "CPU Fan #1 Speed", 
                "RPM", 
                0x03, 
                "Skin Temp 0", 
                "RAW", 
                0x03, 
                "Thermistor 1 ", 
                "RAW", 
                0x03, 
                "Thermistor 2 ", 
                "RAW", 
                0x03, 
                "Thermistor 3 ", 
                "RAW", 
                0x03, 
                "Thermistor 4 ", 
                "RAW"
            })
            Name (OSD2, Package (0x18)
            {
                0x04, 
                "CPU Fan Duty Cycle", 
                "RAW", 
                0x04, 
                "CPU Fan #1 Speed", 
                "RPM", 
                0x03, 
                "Skin Temp 0", 
                "RAW", 
                0x03, 
                "Thermistor 1 ", 
                "RAW", 
                0x03, 
                "Thermistor 2 ", 
                "RAW", 
                0x03, 
                "Thermistor 3 ", 
                "RAW", 
                0x03, 
                "Thermistor 4 ", 
                "RAW", 
                0x03, 
                "Thermistor 5 ", 
                "RAW"
            })
            Name (TMP1, Package (0x13)
            {
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000
            })
            Name (TMP2, Package (0x14)
            {
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000
            })
            Method (TSDD, 0, Serialized)
            {
                If ((TSDB == One))
                {
                    Return (\_SB.PC00.LPCB.TSDD (One, TMP1))
                }
                Else
                {
                    Return (\_SB.PC00.LPCB.TSDD (Zero, TMP2))
                }
            }

            Name (PWRV, Package (0x13)
            {
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000
            })
            Method (PSDD, 0, Serialized)
            {
                Return (\_SB.PC00.LPCB.PSDD (PWRV))
            }

            Name (OSV1, Package (0x08)
            {
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000
            })
            Name (OSV2, Package (0x07)
            {
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000, 
                0x80000000
            })
            Method (OSDD, 0, Serialized)
            {
                If ((TSDB == One))
                {
                    Return (\_SB.PC00.LPCB.OSDD (One, OSV1))
                }
                Else
                {
                    Return (\_SB.PC00.LPCB.OSDD (Zero, OSV2))
                }
            }

            Method (SDSP, 0, NotSerialized)
            {
                Return (0x0A)
            }

            Name (PADA, Package (0x0A)
            {
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0x1A, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Name (PADD, Package (0x0A)
            {
                0x02, 
                0x06A4, 
                0x06A0, 
                0x1A, 
                0x62, 
                0x63, 
                0x60, 
                0x61, 
                0x65, 
                0x64
            })
            Method (PADT, 0, NotSerialized)
            {
                If (PAMT)
                {
                    Return (PADA) /* \_SB_.PTID.PADA */
                }

                Return (PADD) /* \_SB_.PTID.PADD */
            }

            Method (RPMD, 0, Serialized)
            {
                Return (\_SB.PC00.LPCB.RPMD ())
            }

            Method (WPMD, 1, NotSerialized)
            {
                If ((SizeOf (Arg0) != 0x1A))
                {
                    Return (0xFFFFFFFF)
                }

                \_SB.PC00.LPCB.WPMD (Arg0)
                Return (Zero)
            }

            Method (ISPC, 0, NotSerialized)
            {
                \_SB.PC00.LPCB.ISPC ()
                Return (Zero)
            }

            Method (ENPC, 0, NotSerialized)
            {
                \_SB.PC00.LPCB.ENPC ()
                Return (Zero)
            }

            Method (RPCS, 0, NotSerialized)
            {
                Return (\_SB.PC00.LPCB.RPCS ())
            }

            Method (RPEC, 0, NotSerialized)
            {
                Return (\_SB.PC00.LPCB.RPEC ())
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 2, "MSI_NB", "MtlP_Rvp", 0x00001000)
{
    External (_SB_.CAGS, MethodObj)    // 1 Arguments
    External (_SB_.CSD0, MethodObj)    // 1 Arguments
    External (_SB_.CSD3, MethodObj)    // 1 Arguments
    External (_SB_.GGOV, MethodObj)    // 1 Arguments
    External (_SB_.ISME, MethodObj)    // 1 Arguments
    External (_SB_.OSCO, UnknownObj)
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.GLAN, DeviceObj)
    External (_SB_.PC00.HDAS, DeviceObj)
    External (_SB_.PC00.HDAS.VDID, UnknownObj)
    External (_SB_.PC00.I2C0, DeviceObj)
    External (_SB_.PC00.I2C0.TPD0, DeviceObj)
    External (_SB_.PC00.I2C1, DeviceObj)
    External (_SB_.PC00.I2C1.TPL1, DeviceObj)
    External (_SB_.PC00.I2C3, DeviceObj)
    External (_SB_.PC00.I2C3.TPD0, DeviceObj)
    External (_SB_.PC00.I2C3.TPD0._STA, MethodObj)    // 0 Arguments
    External (_SB_.PC00.I2C4, DeviceObj)
    External (_SB_.PC00.I2C4.I2CI, UnknownObj)
    External (_SB_.PC00.I2C4.TPI2, UnknownObj)
    External (_SB_.PC00.I2C4.TPL1, DeviceObj)
    External (_SB_.PC00.I2C4.TPL1._STA, MethodObj)    // 0 Arguments
    External (_SB_.PC00.I2C5, DeviceObj)
    External (_SB_.PC00.I2C5.I2CI, UnknownObj)
    External (_SB_.PC00.I2C5.TPI2, UnknownObj)
    External (_SB_.PC00.I2C5.TPL1, DeviceObj)
    External (_SB_.PC00.I2C5.TPL1._STA, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01, DeviceObj)
    External (_SB_.PC00.RP01.CEMP, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP01.D3HT, FieldUnitObj)
    External (_SB_.PC00.RP01.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.DVES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PCPB, IntObj)
    External (_SB_.PC00.RP01.PDOD, UnknownObj)
    External (_SB_.PC00.RP01.PGRT, UnknownObj)
    External (_SB_.PC00.RP01.PRMV, IntObj)
    External (_SB_.PC00.RP01.PRTP, IntObj)
    External (_SB_.PC00.RP01.PXSX, DeviceObj)
    External (_SB_.PC00.RP01.RD3C, IntObj)
    External (_SB_.PC00.RP01.SLOT, IntObj)
    External (_SB_.PC00.RP01.VDID, UnknownObj)
    External (_SB_.PC00.RP02, DeviceObj)
    External (_SB_.PC00.RP02.PRMV, IntObj)
    External (_SB_.PC00.RP02.PRTP, IntObj)
    External (_SB_.PC00.RP02.RD3C, IntObj)
    External (_SB_.PC00.RP02.SLOT, IntObj)
    External (_SB_.PC00.RP02.VDID, UnknownObj)
    External (_SB_.PC00.RP03, DeviceObj)
    External (_SB_.PC00.RP03.PRMV, IntObj)
    External (_SB_.PC00.RP03.PRTP, IntObj)
    External (_SB_.PC00.RP03.RD3C, IntObj)
    External (_SB_.PC00.RP03.SLOT, IntObj)
    External (_SB_.PC00.RP03.VDID, UnknownObj)
    External (_SB_.PC00.RP04, DeviceObj)
    External (_SB_.PC00.RP04.PRMV, IntObj)
    External (_SB_.PC00.RP04.PRTP, IntObj)
    External (_SB_.PC00.RP04.RD3C, IntObj)
    External (_SB_.PC00.RP04.SLOT, IntObj)
    External (_SB_.PC00.RP04.VDID, UnknownObj)
    External (_SB_.PC00.RP05, DeviceObj)
    External (_SB_.PC00.RP05.PRMV, IntObj)
    External (_SB_.PC00.RP05.PRTP, IntObj)
    External (_SB_.PC00.RP05.RD3C, IntObj)
    External (_SB_.PC00.RP05.SLOT, IntObj)
    External (_SB_.PC00.RP05.VDID, UnknownObj)
    External (_SB_.PC00.RP06, DeviceObj)
    External (_SB_.PC00.RP06.CEMP, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP06.D3HT, FieldUnitObj)
    External (_SB_.PC00.RP06.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.DVES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PCPB, IntObj)
    External (_SB_.PC00.RP06.PDOD, UnknownObj)
    External (_SB_.PC00.RP06.PGRT, UnknownObj)
    External (_SB_.PC00.RP06.PRMV, IntObj)
    External (_SB_.PC00.RP06.PRTP, IntObj)
    External (_SB_.PC00.RP06.RD3C, IntObj)
    External (_SB_.PC00.RP06.SLOT, IntObj)
    External (_SB_.PC00.RP06.VDID, UnknownObj)
    External (_SB_.PC00.RP07, DeviceObj)
    External (_SB_.PC00.RP07.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.LASX, UnknownObj)
    External (_SB_.PC00.RP07.PRMV, IntObj)
    External (_SB_.PC00.RP07.PRTP, IntObj)
    External (_SB_.PC00.RP07.PWRG, UnknownObj)
    External (_SB_.PC00.RP07.PXSX, DeviceObj)
    External (_SB_.PC00.RP07.RD3C, IntObj)
    External (_SB_.PC00.RP07.SCLK, UnknownObj)
    External (_SB_.PC00.RP07.SLOT, IntObj)
    External (_SB_.PC00.RP07.TB2F, UnknownObj)
    External (_SB_.PC00.RP07.TB2R, UnknownObj)
    External (_SB_.PC00.RP07.TFDI, UnknownObj)
    External (_SB_.PC00.RP07.TN2B, UnknownObj)
    External (_SB_.PC00.RP07.TR2B, UnknownObj)
    External (_SB_.PC00.RP07.TR2P, UnknownObj)
    External (_SB_.PC00.RP07.VDID, UnknownObj)
    External (_SB_.PC00.RP07.WAKG, UnknownObj)
    External (_SB_.PC00.RP07.WAKP, UnknownObj)
    External (_SB_.PC00.RP07.WWEN, UnknownObj)
    External (_SB_.PC00.RP08, DeviceObj)
    External (_SB_.PC00.RP08.PRMV, IntObj)
    External (_SB_.PC00.RP08.PRTP, IntObj)
    External (_SB_.PC00.RP08.RD3C, IntObj)
    External (_SB_.PC00.RP08.SLOT, IntObj)
    External (_SB_.PC00.RP08.VDID, UnknownObj)
    External (_SB_.PC00.RP09, DeviceObj)
    External (_SB_.PC00.RP09.CEMP, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP09.D3HT, FieldUnitObj)
    External (_SB_.PC00.RP09.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.DVES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PCPB, IntObj)
    External (_SB_.PC00.RP09.PDOD, UnknownObj)
    External (_SB_.PC00.RP09.PGRT, UnknownObj)
    External (_SB_.PC00.RP09.PRMV, IntObj)
    External (_SB_.PC00.RP09.PRTP, IntObj)
    External (_SB_.PC00.RP09.PXSX, DeviceObj)
    External (_SB_.PC00.RP09.RD3C, IntObj)
    External (_SB_.PC00.RP09.SLOT, IntObj)
    External (_SB_.PC00.RP09.VDID, UnknownObj)
    External (_SB_.PC00.RP10, DeviceObj)
    External (_SB_.PC00.RP10.CEMP, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP10.D3HT, FieldUnitObj)
    External (_SB_.PC00.RP10.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.DVES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PCPB, IntObj)
    External (_SB_.PC00.RP10.PDOD, UnknownObj)
    External (_SB_.PC00.RP10.PGRT, UnknownObj)
    External (_SB_.PC00.RP10.PRMV, IntObj)
    External (_SB_.PC00.RP10.PRTP, IntObj)
    External (_SB_.PC00.RP10.PXSX, DeviceObj)
    External (_SB_.PC00.RP10.RD3C, IntObj)
    External (_SB_.PC00.RP10.SLOT, IntObj)
    External (_SB_.PC00.RP10.VDID, UnknownObj)
    External (_SB_.PC00.RP11, DeviceObj)
    External (_SB_.PC00.RP11.CEMP, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP11.D3HT, FieldUnitObj)
    External (_SB_.PC00.RP11.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.DVES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PCPB, IntObj)
    External (_SB_.PC00.RP11.PDOD, UnknownObj)
    External (_SB_.PC00.RP11.PGRT, UnknownObj)
    External (_SB_.PC00.RP11.PRMV, IntObj)
    External (_SB_.PC00.RP11.PRTP, IntObj)
    External (_SB_.PC00.RP11.PXSX, DeviceObj)
    External (_SB_.PC00.RP11.RD3C, IntObj)
    External (_SB_.PC00.RP11.SLOT, IntObj)
    External (_SB_.PC00.RP11.VDID, UnknownObj)
    External (_SB_.PC00.RP12, DeviceObj)
    External (_SB_.PC00.RP12.ASLC, UnknownObj)
    External (_SB_.PC00.RP12.BCLP, UnknownObj)
    External (_SB_.PC00.RP12.CEMP, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP12.D3HT, FieldUnitObj)
    External (_SB_.PC00.RP12.DGDS, UnknownObj)
    External (_SB_.PC00.RP12.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.DVES, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PCPB, IntObj)
    External (_SB_.PC00.RP12.PDOD, UnknownObj)
    External (_SB_.PC00.RP12.PGRT, UnknownObj)
    External (_SB_.PC00.RP12.PRMV, IntObj)
    External (_SB_.PC00.RP12.PRTP, IntObj)
    External (_SB_.PC00.RP12.PXSX, UnknownObj)
    External (_SB_.PC00.RP12.PXSX.PEGB.PEGE.DEDP, DeviceObj)
    External (_SB_.PC00.RP12.RD3C, IntObj)
    External (_SB_.PC00.RP12.SLOT, IntObj)
    External (_SB_.PC00.RP12.VDID, UnknownObj)
    External (_SB_.PC00.RP13, DeviceObj)
    External (_SB_.PC00.RP13.PRMV, IntObj)
    External (_SB_.PC00.RP13.PRTP, IntObj)
    External (_SB_.PC00.RP13.RD3C, IntObj)
    External (_SB_.PC00.RP13.SLOT, IntObj)
    External (_SB_.PC00.RP13.VDID, UnknownObj)
    External (_SB_.PC00.RP14, DeviceObj)
    External (_SB_.PC00.RP14.PRMV, IntObj)
    External (_SB_.PC00.RP14.PRTP, IntObj)
    External (_SB_.PC00.RP14.RD3C, IntObj)
    External (_SB_.PC00.RP14.SLOT, IntObj)
    External (_SB_.PC00.RP15, DeviceObj)
    External (_SB_.PC00.RP15.PRMV, IntObj)
    External (_SB_.PC00.RP15.PRTP, IntObj)
    External (_SB_.PC00.RP15.RD3C, IntObj)
    External (_SB_.PC00.RP15.SLOT, IntObj)
    External (_SB_.PC00.RP16, DeviceObj)
    External (_SB_.PC00.RP16.PRMV, IntObj)
    External (_SB_.PC00.RP16.PRTP, IntObj)
    External (_SB_.PC00.RP16.RD3C, IntObj)
    External (_SB_.PC00.RP16.SLOT, IntObj)
    External (_SB_.PC00.RP17, DeviceObj)
    External (_SB_.PC00.RP17.PRMV, IntObj)
    External (_SB_.PC00.RP17.PRTP, IntObj)
    External (_SB_.PC00.RP17.RD3C, IntObj)
    External (_SB_.PC00.RP17.SLOT, IntObj)
    External (_SB_.PC00.RP17.VDID, UnknownObj)
    External (_SB_.PC00.RP18, DeviceObj)
    External (_SB_.PC00.RP18.PRMV, IntObj)
    External (_SB_.PC00.RP18.PRTP, IntObj)
    External (_SB_.PC00.RP18.RD3C, IntObj)
    External (_SB_.PC00.RP18.SLOT, IntObj)
    External (_SB_.PC00.RP19, DeviceObj)
    External (_SB_.PC00.RP19.PRMV, IntObj)
    External (_SB_.PC00.RP19.PRTP, IntObj)
    External (_SB_.PC00.RP19.RD3C, IntObj)
    External (_SB_.PC00.RP19.SLOT, IntObj)
    External (_SB_.PC00.RP20, DeviceObj)
    External (_SB_.PC00.RP20.PRMV, IntObj)
    External (_SB_.PC00.RP20.PRTP, IntObj)
    External (_SB_.PC00.RP20.RD3C, IntObj)
    External (_SB_.PC00.RP20.SLOT, IntObj)
    External (_SB_.PC00.RP21, DeviceObj)
    External (_SB_.PC00.RP21.PRMV, IntObj)
    External (_SB_.PC00.RP21.PRTP, IntObj)
    External (_SB_.PC00.RP21.RD3C, IntObj)
    External (_SB_.PC00.RP21.SLOT, IntObj)
    External (_SB_.PC00.RP21.VDID, UnknownObj)
    External (_SB_.PC00.RP22, DeviceObj)
    External (_SB_.PC00.RP22.PRMV, IntObj)
    External (_SB_.PC00.RP22.PRTP, IntObj)
    External (_SB_.PC00.RP22.RD3C, IntObj)
    External (_SB_.PC00.RP22.SLOT, IntObj)
    External (_SB_.PC00.RP23, DeviceObj)
    External (_SB_.PC00.RP23.PRMV, IntObj)
    External (_SB_.PC00.RP23.PRTP, IntObj)
    External (_SB_.PC00.RP23.RD3C, IntObj)
    External (_SB_.PC00.RP23.SLOT, IntObj)
    External (_SB_.PC00.RP24, DeviceObj)
    External (_SB_.PC00.RP24.PRMV, IntObj)
    External (_SB_.PC00.RP24.PRTP, IntObj)
    External (_SB_.PC00.RP24.RD3C, IntObj)
    External (_SB_.PC00.RP24.SLOT, IntObj)
    External (_SB_.PC00.RP25, DeviceObj)
    External (_SB_.PC00.RP25.PRMV, IntObj)
    External (_SB_.PC00.RP25.PRTP, IntObj)
    External (_SB_.PC00.RP25.RD3C, IntObj)
    External (_SB_.PC00.RP25.SLOT, IntObj)
    External (_SB_.PC00.RP26, DeviceObj)
    External (_SB_.PC00.RP26.PRMV, IntObj)
    External (_SB_.PC00.RP26.PRTP, IntObj)
    External (_SB_.PC00.RP26.RD3C, IntObj)
    External (_SB_.PC00.RP26.SLOT, IntObj)
    External (_SB_.PC00.RP27, DeviceObj)
    External (_SB_.PC00.RP27.PRMV, IntObj)
    External (_SB_.PC00.RP27.PRTP, IntObj)
    External (_SB_.PC00.RP27.RD3C, IntObj)
    External (_SB_.PC00.RP27.SLOT, IntObj)
    External (_SB_.PC00.RP28, DeviceObj)
    External (_SB_.PC00.RP28.PRMV, IntObj)
    External (_SB_.PC00.RP28.PRTP, IntObj)
    External (_SB_.PC00.RP28.RD3C, IntObj)
    External (_SB_.PC00.RP28.SLOT, IntObj)
    External (_SB_.PC00.SAT0, DeviceObj)
    External (_SB_.PC00.SAT0.PRT0, DeviceObj)
    External (_SB_.PC00.SAT0.PRT1, DeviceObj)
    External (_SB_.PC00.SAT0.PRT2, DeviceObj)
    External (_SB_.PC00.SAT0.PRT3, DeviceObj)
    External (_SB_.PC00.SAT0.PRT4, DeviceObj)
    External (_SB_.PC00.SAT0.PRT5, DeviceObj)
    External (_SB_.PC00.SAT0.PRT6, DeviceObj)
    External (_SB_.PC00.SAT0.PRT7, DeviceObj)
    External (_SB_.PC00.UA02.BTH0, DeviceObj)
    External (_SB_.PC00.VMD0, DeviceObj)
    External (_SB_.PC00.VMD0.PP01, DeviceObj)
    External (_SB_.PC00.VMD0.PP01._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP01.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP01.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP01.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP02, DeviceObj)
    External (_SB_.PC00.VMD0.PP02._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP02.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP02.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP02.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP03, DeviceObj)
    External (_SB_.PC00.VMD0.PP03._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP03.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP03.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP03.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP04, DeviceObj)
    External (_SB_.PC00.VMD0.PP04._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP04.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP04.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP04.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP05, DeviceObj)
    External (_SB_.PC00.VMD0.PP05._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP05.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP05.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP05.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP06, DeviceObj)
    External (_SB_.PC00.VMD0.PP06._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP06.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP06.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP06.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP07, DeviceObj)
    External (_SB_.PC00.VMD0.PP07._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP07.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP07.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP07.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP08, DeviceObj)
    External (_SB_.PC00.VMD0.PP08._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP08.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP08.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP08.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP09, DeviceObj)
    External (_SB_.PC00.VMD0.PP09._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP09.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP09.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP09.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP10, DeviceObj)
    External (_SB_.PC00.VMD0.PP10._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP10.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP10.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP10.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP11, DeviceObj)
    External (_SB_.PC00.VMD0.PP11._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP11.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP11.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP11.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP12, DeviceObj)
    External (_SB_.PC00.VMD0.PP12._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP12.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP12.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP12.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP13, DeviceObj)
    External (_SB_.PC00.VMD0.PP13._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP13.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP13.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP13.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP14, DeviceObj)
    External (_SB_.PC00.VMD0.PP14._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP14.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP14.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP14.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP15, DeviceObj)
    External (_SB_.PC00.VMD0.PP15._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP15.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP15.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP15.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP16, DeviceObj)
    External (_SB_.PC00.VMD0.PP16._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP16.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP16.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP16.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP17, DeviceObj)
    External (_SB_.PC00.VMD0.PP17._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP17.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP17.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP17.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP18, DeviceObj)
    External (_SB_.PC00.VMD0.PP18._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP18.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP18.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP18.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP19, DeviceObj)
    External (_SB_.PC00.VMD0.PP19._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP19.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP19.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP19.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP20, DeviceObj)
    External (_SB_.PC00.VMD0.PP20._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP20.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP20.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP20.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP21, DeviceObj)
    External (_SB_.PC00.VMD0.PP21._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP21.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP21.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP21.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP22, DeviceObj)
    External (_SB_.PC00.VMD0.PP22._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP22.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP22.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP22.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP23, DeviceObj)
    External (_SB_.PC00.VMD0.PP23._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP23.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP23.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP23.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP24, DeviceObj)
    External (_SB_.PC00.VMD0.PP24._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP24.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP24.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PP24.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT0, DeviceObj)
    External (_SB_.PC00.VMD0.PRT0._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT0.VS3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT0.VSOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT0.VSON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT1, DeviceObj)
    External (_SB_.PC00.VMD0.PRT1._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT1.VS3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT1.VSOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT1.VSON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT2, DeviceObj)
    External (_SB_.PC00.VMD0.PRT2._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT2.VS3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT2.VSOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT2.VSON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT3, DeviceObj)
    External (_SB_.PC00.VMD0.PRT3._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT3.VS3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT3.VSOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT3.VSON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT4, DeviceObj)
    External (_SB_.PC00.VMD0.PRT4._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT4.VS3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT4.VSOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT4.VSON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT5, DeviceObj)
    External (_SB_.PC00.VMD0.PRT5._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT5.VS3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT5.VSOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT5.VSON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT6, DeviceObj)
    External (_SB_.PC00.VMD0.PRT6._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT6.VS3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT6.VSOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT6.VSON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT7, DeviceObj)
    External (_SB_.PC00.VMD0.PRT7._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT7.VS3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT7.VSOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.PRT7.VSON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP01, DeviceObj)
    External (_SB_.PC00.VMD0.SP01._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP01.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP01.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP01.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP02, DeviceObj)
    External (_SB_.PC00.VMD0.SP02._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP02.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP02.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP02.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP03, DeviceObj)
    External (_SB_.PC00.VMD0.SP03._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP03.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP03.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP03.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP04, DeviceObj)
    External (_SB_.PC00.VMD0.SP04._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP04.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP04.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP04.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP05, DeviceObj)
    External (_SB_.PC00.VMD0.SP05._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP05.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP05.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP05.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP06, DeviceObj)
    External (_SB_.PC00.VMD0.SP06._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP06.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP06.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP06.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP07, DeviceObj)
    External (_SB_.PC00.VMD0.SP07._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP07.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP07.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP07.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP08, DeviceObj)
    External (_SB_.PC00.VMD0.SP08._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP08.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP08.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP08.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP09, DeviceObj)
    External (_SB_.PC00.VMD0.SP09._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP09.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP09.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP09.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP10, DeviceObj)
    External (_SB_.PC00.VMD0.SP10._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP10.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP10.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP10.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP11, DeviceObj)
    External (_SB_.PC00.VMD0.SP11._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP11.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP11.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP11.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP12, DeviceObj)
    External (_SB_.PC00.VMD0.SP12._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP12.VPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP12.VPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP12.VR3D, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.SP13, DeviceObj)
    External (_SB_.PC00.VMD0.SP17, DeviceObj)
    External (_SB_.PC00.VMD0.SP21, DeviceObj)
    External (_SB_.PC00.VMD0.VD3A, MethodObj)    // 0 Arguments
    External (_SB_.PC00.VMD0.VLOF, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.VLON, MethodObj)    // 2 Arguments
    External (_SB_.PC00.VMD0.VMPP, UnknownObj)
    External (_SB_.PC00.VMD0.VMS0, UnknownObj)
    External (_SB_.PC00.VMD0.VMSP, UnknownObj)
    External (_SB_.PC00.VMD0.VV0D, UnknownObj)
    External (_SB_.PC00.VMD0.VV0S, UnknownObj)
    External (_SB_.PC00.VMD0.VV1D, UnknownObj)
    External (_SB_.PC00.VMD0.VV1S, UnknownObj)
    External (_SB_.PC00.VMD0.VV2D, UnknownObj)
    External (_SB_.PC00.VMD0.VV2S, UnknownObj)
    External (_SB_.PC00.VMD0.VV3D, UnknownObj)
    External (_SB_.PC00.VMD0.VV3S, UnknownObj)
    External (_SB_.PC00.XDCI, DeviceObj)
    External (_SB_.PC00.XDCI.D0I3, UnknownObj)
    External (_SB_.PC00.XDCI.XDCB, UnknownObj)
    External (_SB_.PC00.XHCI, DeviceObj)
    External (_SB_.PC00.XHCI.MEMB, UnknownObj)
    External (_SB_.PC00.XHCI.RHUB, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS01, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS02, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS10, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS01, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS02, DeviceObj)
    External (_SB_.PC02, DeviceObj)
    External (_SB_.PC02.GBES, UnknownObj)
    External (_SB_.PC02.GLAN, DeviceObj)
    External (_SB_.PC02.I2C1.TPL1, DeviceObj)
    External (_SB_.PC02.RP01, DeviceObj)
    External (_SB_.PC02.RP01.PRMV, IntObj)
    External (_SB_.PC02.RP01.PRTP, IntObj)
    External (_SB_.PC02.RP01.RD3C, IntObj)
    External (_SB_.PC02.RP01.SLOT, IntObj)
    External (_SB_.PC02.RP01.VDID, UnknownObj)
    External (_SB_.PC02.RP04, DeviceObj)
    External (_SB_.PC02.RP04.PRMV, IntObj)
    External (_SB_.PC02.RP04.PRTP, IntObj)
    External (_SB_.PC02.RP04.RD3C, IntObj)
    External (_SB_.PC02.RP04.SLOT, IntObj)
    External (_SB_.PC02.RP04.VDID, UnknownObj)
    External (_SB_.PC02.RP05, DeviceObj)
    External (_SB_.PC02.RP05.PRMV, IntObj)
    External (_SB_.PC02.RP05.PRTP, IntObj)
    External (_SB_.PC02.RP05.RD3C, IntObj)
    External (_SB_.PC02.RP05.SLOT, IntObj)
    External (_SB_.PC02.RP05.VDID, UnknownObj)
    External (_SB_.PC02.RP07, DeviceObj)
    External (_SB_.PC02.RP07.PRMV, IntObj)
    External (_SB_.PC02.RP07.PRTP, IntObj)
    External (_SB_.PC02.RP07.RD3C, IntObj)
    External (_SB_.PC02.RP07.SLOT, IntObj)
    External (_SB_.PC02.RP07.VDID, UnknownObj)
    External (_SB_.PC02.RP08, DeviceObj)
    External (_SB_.PC02.RP08.PRMV, IntObj)
    External (_SB_.PC02.RP08.PRTP, IntObj)
    External (_SB_.PC02.RP08.RD3C, IntObj)
    External (_SB_.PC02.RP08.SLOT, IntObj)
    External (_SB_.PC02.RP09, DeviceObj)
    External (_SB_.PC02.RP09.PRMV, IntObj)
    External (_SB_.PC02.RP09.PRTP, IntObj)
    External (_SB_.PC02.RP09.RD3C, IntObj)
    External (_SB_.PC02.RP09.SLOT, IntObj)
    External (_SB_.PC02.RP09.VDID, UnknownObj)
    External (_SB_.PC02.RP13, DeviceObj)
    External (_SB_.PC02.RP13.PRMV, IntObj)
    External (_SB_.PC02.RP13.PRTP, IntObj)
    External (_SB_.PC02.RP13.RD3C, IntObj)
    External (_SB_.PC02.RP13.SLOT, IntObj)
    External (_SB_.PC02.RP13.VDID, UnknownObj)
    External (_SB_.PC02.RP17, DeviceObj)
    External (_SB_.PC02.RP17.PRMV, IntObj)
    External (_SB_.PC02.RP17.PRTP, IntObj)
    External (_SB_.PC02.RP17.RD3C, IntObj)
    External (_SB_.PC02.RP17.SLOT, IntObj)
    External (_SB_.PC02.RP17.VDID, UnknownObj)
    External (_SB_.PC02.RP21, DeviceObj)
    External (_SB_.PC02.RP21.PRMV, IntObj)
    External (_SB_.PC02.RP21.PRTP, IntObj)
    External (_SB_.PC02.RP21.RD3C, IntObj)
    External (_SB_.PC02.RP21.SLOT, IntObj)
    External (_SB_.PC02.RP21.VDID, UnknownObj)
    External (_SB_.PC02.SAT0, DeviceObj)
    External (_SB_.PC02.SAT0.PRT0, DeviceObj)
    External (_SB_.PC02.SAT0.PRT1, DeviceObj)
    External (_SB_.PC02.SAT0.PRT2, DeviceObj)
    External (_SB_.PC02.SAT0.PRT3, DeviceObj)
    External (_SB_.PC02.SAT0.PRT4, DeviceObj)
    External (_SB_.PC02.SAT0.PRT5, DeviceObj)
    External (_SB_.PC02.SAT0.PRT6, DeviceObj)
    External (_SB_.PC02.SAT0.PRT7, DeviceObj)
    External (_SB_.PC02.XDCI, DeviceObj)
    External (_SB_.PC02.XDCI.D0I3, UnknownObj)
    External (_SB_.PC02.XDCI.XDCB, UnknownObj)
    External (_SB_.PSD0, MethodObj)    // 1 Arguments
    External (_SB_.PSD3, MethodObj)    // 1 Arguments
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.SGRA, MethodObj)    // 2 Arguments
    External (_SB_.SHPO, MethodObj)    // 2 Arguments
    External (ADBG, MethodObj)    // 1 Arguments
    External (AUDD, FieldUnitObj)
    External (DGBA, FieldUnitObj)
    External (DGOP, FieldUnitObj)
    External (DTFS, IntObj)
    External (DTOE, IntObj)
    External (DTRC, IntObj)
    External (DTRD, IntObj)
    External (DTRO, IntObj)
    External (DVID, UnknownObj)
    External (GBED, UnknownObj)
    External (GBEP, UnknownObj)
    External (GBES, UnknownObj)
    External (GPDI, UnknownObj)
    External (IC0D, FieldUnitObj)
    External (IC1D, FieldUnitObj)
    External (IC1S, FieldUnitObj)
    External (P3EP, UnknownObj)
    External (P3PG, UnknownObj)
    External (P3RG, UnknownObj)
    External (P3RP, UnknownObj)
    External (P3WG, UnknownObj)
    External (P4EP, UnknownObj)
    External (P4PG, UnknownObj)
    External (P4RG, UnknownObj)
    External (P4RP, UnknownObj)
    External (P4WG, UnknownObj)
    External (PBRS, UnknownObj)
    External (PEP0, UnknownObj)
    External (PFCP, UnknownObj)
    External (PIN_.OFF_, MethodObj)    // 1 Arguments
    External (PIN_.ON__, MethodObj)    // 1 Arguments
    External (PIN_.STA_, MethodObj)    // 1 Arguments
    External (PPDI, UnknownObj)
    External (PRST, UnknownObj)
    External (RCG0, IntObj)
    External (RCG1, IntObj)
    External (RPS0, IntObj)
    External (RPT0, IntObj)
    External (RTD3, FieldUnitObj)
    External (S0ID, UnknownObj)
    External (S1PG, UnknownObj)
    External (S1PP, UnknownObj)
    External (S1RG, UnknownObj)
    External (S1RP, UnknownObj)
    External (S2PG, UnknownObj)
    External (S2PP, UnknownObj)
    External (S2RG, UnknownObj)
    External (S2RP, UnknownObj)
    External (S3PG, UnknownObj)
    External (S3PP, UnknownObj)
    External (S3RG, UnknownObj)
    External (S3RP, UnknownObj)
    External (S4PG, UnknownObj)
    External (S4PP, UnknownObj)
    External (S4RG, UnknownObj)
    External (S4RP, UnknownObj)
    External (SDS0, FieldUnitObj)
    External (SDS1, FieldUnitObj)
    External (SHSB, FieldUnitObj)
    External (SPCO, MethodObj)    // 2 Arguments
    External (STD3, FieldUnitObj)
    External (T0EP, UnknownObj)
    External (T0GI, UnknownObj)
    External (T0IP, UnknownObj)
    External (T0PE, UnknownObj)
    External (T0PR, UnknownObj)
    External (T0RP, UnknownObj)
    External (T1EP, UnknownObj)
    External (T1GI, UnknownObj)
    External (T1IP, UnknownObj)
    External (T1PE, UnknownObj)
    External (T1PR, UnknownObj)
    External (T1RP, UnknownObj)
    External (TPDT, UnknownObj)
    External (TPLS, UnknownObj)
    External (TPLT, UnknownObj)
    External (UAMS, UnknownObj)
    External (VMDE, UnknownObj)
    External (VRRD, FieldUnitObj)
    External (WBRS, UnknownObj)
    External (WFCP, UnknownObj)
    External (WLWK, UnknownObj)
    External (WPRP, UnknownObj)
    External (WRTO, UnknownObj)
    External (WWKP, UnknownObj)
    External (WWMT, UnknownObj)
    External (XDCE, UnknownObj)
    External (XDST, IntObj)
    External (XHPR, UnknownObj)
    External (ZPPB, UnknownObj)

    Scope (\_SB.PC00.RP01)
    {
        Name (RSTG, Package (0x02)
        {
            Zero, 
            Zero
        })
        RSTG [Zero] = S1RG /* External reference */
        RSTG [One] = S1RP /* External reference */
        Name (PWRG, Package (0x02)
        {
            Zero, 
            Zero
        })
        PWRG [Zero] = S1PG /* External reference */
        PWRG [One] = S1PP /* External reference */
        Name (WAKG, Zero)
        Name (WAKP, Zero)
        Name (SCLK, Zero)
        Name (WKEN, Zero)
        Name (WOFF, Zero)
        Name (LNRD, Zero)
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            ADBG (Concatenate ("_S0W For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (CondRefOf (RD3C))
            {
                If ((RD3C == 0x02))
                {
                    ADBG (Concatenate ("_S0W - D3 Cold Enable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (0x04)
                }
            }

            ADBG (Concatenate ("_S0W - D0 For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            Return (Zero)
        }

        Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
        {
            ADBG (Concatenate ("_DSW For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (Arg1)
            {
                WKEN = One
                ADBG (Concatenate ("_DSW Sx Wake Enable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
            ElseIf ((Arg0 && Arg2))
            {
                WKEN = One
                ADBG (Concatenate ("_DSW D3 Wake Enable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
            Else
            {
                WKEN = Zero
                ADBG (Concatenate ("_DSW D0 Wake Disable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
        }

        Method (PPS0, 0, Serialized)
        {
            ADBG (Concatenate ("PPS0 For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            ADBG (Concatenate ("VDID - ", ToHexString (VDID)))
            ADBG (Concatenate ("Power Stat: ", ToHexString (D3HT)))
        }

        Method (PPS3, 0, Serialized)
        {
            ADBG (Concatenate ("PPS3 For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            ADBG (Concatenate ("VDID - ", ToHexString (VDID)))
            ADBG (Concatenate ("Power Stat: ", ToHexString (D3HT)))
        }

        PowerResource (PXP, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("PXP _STA Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If ((VDID == 0xFFFFFFFF))
                {
                    ADBG ("_STA return 0 as VDID = 0xFFFFFFFF")
                    Return (Zero)
                }

                If ((GPRS (0x02) == Zero))
                {
                    Return (Zero)
                }

                Return (PSTA ())
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                ADBG (Concatenate ("PXP _ON Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If ((VDID == 0xFFFFFFFF))
                {
                    ADBG ("_ON return as VDID = 0xFFFFFFFF")
                }
                ElseIf ((GPRS (One) == Zero)){}
                Else
                {
                    PON ()
                    L23D ()
                }
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                ADBG (Concatenate ("PXP _OFF Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If ((VDID == 0xFFFFFFFF))
                {
                    ADBG ("_OFF return as VDID = 0xFFFFFFFF")
                }
                ElseIf ((GPRS (Zero) == Zero)){}
                Else
                {
                    DL23 ()
                    POFF ()
                }
            }
        }

        Method (GPPR, 0, NotSerialized)
        {
            ADBG (Concatenate ("GPPR Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (CondRefOf (WAKP))
            {
                If (((WAKP != Zero) && (WKEN == Zero)))
                {
                    ADBG (Concatenate ("WAKE enable and keep CIO power on for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            If (CondRefOf (PCPB))
            {
                If ((PCPB != Zero))
                {
                    ADBG (Concatenate ("PCIe core power veto bitmask is not Zero now, not allow for core power removal. For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            If (CondRefOf (DVES))
            {
                If ((DVES () == Zero))
                {
                    ADBG (Concatenate ("DG Device core power removal is Denied for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            Return (One)
        }

        Method (GPRS, 1, Serialized)
        {
            ADBG (Concatenate ("GPRS Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If ((PGRT == Zero))
            {
                Return (Zero)
            }

            If (CondRefOf (RD3C))
            {
                If ((RD3C != 0x02))
                {
                    ADBG (Concatenate ("Skiping D3 Flow as D3Cold support is Disable for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    If ((Arg0 != 0x02))
                    {
                        If (CondRefOf (CEMP))
                        {
                            CEMP (One)
                        }
                    }

                    Return (Zero)
                }
            }

            If (CondRefOf (PRMV))
            {
                If ((PRMV == One))
                {
                    ADBG (Concatenate ("Skiping D3 Flow for Storage Device Mapped under VMD connected to ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            Return (One)
        }

        Method (PSTA, 0, NotSerialized)
        {
            ADBG (Concatenate ("PSTA Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (\PIN.STA (RSTG))
            {
                ADBG (Concatenate ("PSTA OFF For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                Return (Zero)
            }
            Else
            {
                ADBG (Concatenate ("PSTA ON For", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                Return (One)
            }
        }

        Method (PON, 0, NotSerialized)
        {
            ADBG (Concatenate ("PON Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (CondRefOf (CEMP))
            {
                CEMP (One)
            }

            If (CondRefOf (WAKG))
            {
                If ((WAKG != Zero))
                {
                    \_SB.SHPO (WAKG, One)
                    \_SB.CAGS (WAKG)
                    ADBG (Concatenate ("WAKG: set GPIO mode ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                }
            }

            If ((CondRefOf (PRTP) && (PRTP == 0x02)))
            {
                \_SB.PSD0 (SLOT)
            }

            If (CondRefOf (PWRG))
            {
                If (CondRefOf (WOFF))
                {
                    If ((WOFF != Zero))
                    {
                        Local0 = ((Timer - WOFF) / 0x2710)
                        If ((Local0 < PDOD))
                        {
                            Sleep ((PDOD - Local0))
                            ADBG (Concatenate ("Rtd3Pcie Generic _ON Sleep time : ", ToHexString ((PDOD - Local0))))
                            ADBG (Concatenate ("Rtd3Pcie Generic _ON Local0 time : ", ToHexString (Local0)))
                        }

                        WOFF = Zero
                    }
                }

                ADBG (Concatenate ("Rtd3Pcie Generic _ON PDOD time : ", ToHexString (PDOD)))
                ADBG (Concatenate ("Rtd3Pcie Generic _ON Current time : ", ToHexString (Timer)))
                \PIN.ON (PWRG)
                Sleep (PEP0)
            }

            If (CondRefOf (SCLK))
            {
                SPCO (SCLK, One)
            }

            \PIN.OFF (RSTG)
        }

        Method (POFF, 0, NotSerialized)
        {
            ADBG (Concatenate ("POFF Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            Local1 = (LNRD / 0x03E8)
            Sleep (Local1)
            \PIN.ON (RSTG)
            If ((CondRefOf (PRTP) && (PRTP == 0x02)))
            {
                \_SB.PSD3 (SLOT)
            }

            If (CondRefOf (SCLK))
            {
                SPCO (SCLK, Zero)
            }

            If (CondRefOf (PWRG))
            {
                If ((GPPR () == One))
                {
                    \PIN.OFF (PWRG)
                }

                If (CondRefOf (WOFF))
                {
                    WOFF = Timer
                }
            }

            If (CondRefOf (WAKG))
            {
                If (((WAKG != Zero) && WKEN))
                {
                    \_SB.SHPO (WAKG, Zero)
                    ADBG (Concatenate ("WAKG: set ACPI mode ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                }
            }

            ADBG (Concatenate ("Rtd3Pcie _OFF TOFF time : ", ToHexString (WOFF)))
            If (CondRefOf (CEMP))
            {
                CEMP (Zero)
            }
        }

        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
        {
            Return (Package (0x01)
            {
                PXP
            })
        }

        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
        {
            Return (Package (0x01)
            {
                PXP
            })
        }

        Method (UPRD, 1, Serialized)
        {
            If ((Arg0 <= 0x2710))
            {
                LNRD = Arg0
            }

            Return (LNRD) /* \_SB_.PC00.RP01.LNRD */
        }

        Scope (\_SB.PC00.RP01.PXSX)
        {
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                ADBG (Concatenate ("_S0W For Child Storage Device Of ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If (CondRefOf (^^RD3C))
                {
                    If ((^^RD3C == 0x02))
                    {
                        ADBG (Concatenate ("_S0W - D3 Cold Enable For Child Device of ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                            Concatenate (" And Index : ", ToHexString (SLOT))))))
                        Return (0x04)
                    }
                    ElseIf ((^^RD3C == Zero))
                    {
                        ADBG (Concatenate ("_S0W - D3 Disable For Child Device of ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                            Concatenate (" And Index : ", ToHexString (SLOT))))))
                        Return (Zero)
                    }
                }

                ADBG (Concatenate ("_S0W - D3 Hot Enable For Child Device of ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                Return (0x03)
            }

            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
            {
                Return (^^_PR0 ())
            }

            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
            {
                Return (^^_PR3 ())
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("Storage Child Device _PS0 for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("Storage Child Device _PS3 for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
        }
    }

    Scope (\_SB.PC00.RP06)
    {
        Name (RSTG, Package (0x02)
        {
            Zero, 
            Zero
        })
        RSTG [Zero] = P3RG /* External reference */
        RSTG [One] = P3RP /* External reference */
        Name (PWRG, Package (0x02)
        {
            Zero, 
            Zero
        })
        PWRG [Zero] = P3PG /* External reference */
        PWRG [One] = P3EP /* External reference */
        Name (WAKG, Zero)
        WAKG = P3WG /* External reference */
        Name (SCLK, 0x03)
        Name (WAKP, Zero)
        Name (WKEN, Zero)
        Name (WOFF, Zero)
        Name (LNRD, Zero)
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            ADBG (Concatenate ("_S0W For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (CondRefOf (RD3C))
            {
                If ((RD3C == 0x02))
                {
                    ADBG (Concatenate ("_S0W - D3 Cold Enable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (0x04)
                }
            }

            ADBG (Concatenate ("_S0W - D0 For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            Return (Zero)
        }

        Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
        {
            ADBG (Concatenate ("_DSW For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (Arg1)
            {
                WKEN = One
                ADBG (Concatenate ("_DSW Sx Wake Enable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
            ElseIf ((Arg0 && Arg2))
            {
                WKEN = One
                ADBG (Concatenate ("_DSW D3 Wake Enable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
            Else
            {
                WKEN = Zero
                ADBG (Concatenate ("_DSW D0 Wake Disable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
        }

        Method (PPS0, 0, Serialized)
        {
            ADBG (Concatenate ("PPS0 For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            ADBG (Concatenate ("VDID - ", ToHexString (VDID)))
            ADBG (Concatenate ("Power Stat: ", ToHexString (D3HT)))
        }

        Method (PPS3, 0, Serialized)
        {
            ADBG (Concatenate ("PPS3 For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            ADBG (Concatenate ("VDID - ", ToHexString (VDID)))
            ADBG (Concatenate ("Power Stat: ", ToHexString (D3HT)))
        }

        PowerResource (PXP, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("PXP _STA Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If ((VDID == 0xFFFFFFFF))
                {
                    ADBG ("_STA return 0 as VDID = 0xFFFFFFFF")
                    Return (Zero)
                }

                If ((GPRS (0x02) == Zero))
                {
                    Return (Zero)
                }

                Return (PSTA ())
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                ADBG (Concatenate ("PXP _ON Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If ((VDID == 0xFFFFFFFF))
                {
                    ADBG ("_ON return as VDID = 0xFFFFFFFF")
                }
                ElseIf ((GPRS (One) == Zero)){}
                Else
                {
                    PON ()
                    L23D ()
                }
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                ADBG (Concatenate ("PXP _OFF Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If ((VDID == 0xFFFFFFFF))
                {
                    ADBG ("_OFF return as VDID = 0xFFFFFFFF")
                }
                ElseIf ((GPRS (Zero) == Zero)){}
                Else
                {
                    DL23 ()
                    POFF ()
                }
            }
        }

        Method (GPPR, 0, NotSerialized)
        {
            ADBG (Concatenate ("GPPR Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (CondRefOf (WAKP))
            {
                If (((WAKP != Zero) && (WKEN == Zero)))
                {
                    ADBG (Concatenate ("WAKE enable and keep CIO power on for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            If (CondRefOf (PCPB))
            {
                If ((PCPB != Zero))
                {
                    ADBG (Concatenate ("PCIe core power veto bitmask is not Zero now, not allow for core power removal. For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            If (CondRefOf (DVES))
            {
                If ((DVES () == Zero))
                {
                    ADBG (Concatenate ("DG Device core power removal is Denied for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            Return (One)
        }

        Method (GPRS, 1, Serialized)
        {
            ADBG (Concatenate ("GPRS Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If ((PGRT == Zero))
            {
                Return (Zero)
            }

            If (CondRefOf (RD3C))
            {
                If ((RD3C != 0x02))
                {
                    ADBG (Concatenate ("Skiping D3 Flow as D3Cold support is Disable for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    If ((Arg0 != 0x02))
                    {
                        If (CondRefOf (CEMP))
                        {
                            CEMP (One)
                        }
                    }

                    Return (Zero)
                }
            }

            If (CondRefOf (PRMV))
            {
                If ((PRMV == One))
                {
                    ADBG (Concatenate ("Skiping D3 Flow for Storage Device Mapped under VMD connected to ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            Return (One)
        }

        Method (PSTA, 0, NotSerialized)
        {
            ADBG (Concatenate ("PSTA Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (\PIN.STA (RSTG))
            {
                ADBG (Concatenate ("PSTA OFF For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                Return (Zero)
            }
            Else
            {
                ADBG (Concatenate ("PSTA ON For", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                Return (One)
            }
        }

        Method (PON, 0, NotSerialized)
        {
            ADBG (Concatenate ("PON Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (CondRefOf (CEMP))
            {
                CEMP (One)
            }

            If (CondRefOf (WAKG))
            {
                If ((WAKG != Zero))
                {
                    \_SB.SHPO (WAKG, One)
                    \_SB.CAGS (WAKG)
                    ADBG (Concatenate ("WAKG: set GPIO mode ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                }
            }

            If ((CondRefOf (PRTP) && (PRTP == 0x02)))
            {
                \_SB.PSD0 (SLOT)
            }

            If (CondRefOf (PWRG))
            {
                If (CondRefOf (WOFF))
                {
                    If ((WOFF != Zero))
                    {
                        Local0 = ((Timer - WOFF) / 0x2710)
                        If ((Local0 < PDOD))
                        {
                            Sleep ((PDOD - Local0))
                            ADBG (Concatenate ("Rtd3Pcie Generic _ON Sleep time : ", ToHexString ((PDOD - Local0))))
                            ADBG (Concatenate ("Rtd3Pcie Generic _ON Local0 time : ", ToHexString (Local0)))
                        }

                        WOFF = Zero
                    }
                }

                ADBG (Concatenate ("Rtd3Pcie Generic _ON PDOD time : ", ToHexString (PDOD)))
                ADBG (Concatenate ("Rtd3Pcie Generic _ON Current time : ", ToHexString (Timer)))
                \PIN.ON (PWRG)
                Sleep (PEP0)
            }

            If (CondRefOf (SCLK))
            {
                SPCO (SCLK, One)
            }

            \PIN.OFF (RSTG)
        }

        Method (POFF, 0, NotSerialized)
        {
            ADBG (Concatenate ("POFF Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            Local1 = (LNRD / 0x03E8)
            Sleep (Local1)
            \PIN.ON (RSTG)
            If ((CondRefOf (PRTP) && (PRTP == 0x02)))
            {
                \_SB.PSD3 (SLOT)
            }

            If (CondRefOf (SCLK))
            {
                SPCO (SCLK, Zero)
            }

            If (CondRefOf (PWRG))
            {
                If ((GPPR () == One))
                {
                    \PIN.OFF (PWRG)
                }

                If (CondRefOf (WOFF))
                {
                    WOFF = Timer
                }
            }

            If (CondRefOf (WAKG))
            {
                If (((WAKG != Zero) && WKEN))
                {
                    \_SB.SHPO (WAKG, Zero)
                    ADBG (Concatenate ("WAKG: set ACPI mode ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                }
            }

            ADBG (Concatenate ("Rtd3Pcie _OFF TOFF time : ", ToHexString (WOFF)))
            If (CondRefOf (CEMP))
            {
                CEMP (Zero)
            }
        }

        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
        {
            Return (Package (0x01)
            {
                PXP
            })
        }

        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
        {
            Return (Package (0x01)
            {
                PXP
            })
        }

        Method (UPRD, 1, Serialized)
        {
            If ((Arg0 <= 0x2710))
            {
                LNRD = Arg0
            }

            Return (LNRD) /* \_SB_.PC00.RP06.LNRD */
        }
    }

    If ((WRTO != Zero))
    {
        Scope (\_SB.PC00.RP07)
        {
            Name (BRST, Package (0x02)
            {
                Zero, 
                Zero
            })
            BRST [Zero] = WBRS /* External reference */
            BRST [One] = PBRS /* External reference */
            Name (RSTG, Package (0x02)
            {
                Zero, 
                Zero
            })
            RSTG [Zero] = PRST /* External reference */
            RSTG [One] = WPRP /* External reference */
            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PWRG [Zero] = WFCP /* External reference */
            PWRG [One] = PFCP /* External reference */
            Name (WAKG, Zero)
            WAKG = WWKP /* External reference */
            Name (SCLK, One)
            Name (WKEN, Zero)
            Name (WOFF, Zero)
            Name (OFEN, One)
            Name (ONEN, Zero)
            Method (_S0W, 0, Serialized)  // _S0W: S0 Device Wake State
            {
                If ((WRTO == 0x03))
                {
                    Return (0x04)
                }
                ElseIf ((WRTO == 0x02))
                {
                    Return (0x03)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S4W, 0, Serialized)  // _S4W: S4 Device Wake State
            {
                If ((WRTO == 0x03))
                {
                    Return (0x04)
                }
                ElseIf ((WRTO == 0x02))
                {
                    Return (0x03)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                ADBG ("_DSW PCIe")
                ADBG (SLOT)
                If ((Arg1 >= 0x03))
                {
                    WKEN = Zero
                    ADBG ("PCIE Sx DisWak")
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                    ADBG ("PCIE D3 EnWak")
                }
                Else
                {
                    ADBG ("PCIE D0 DisWak")
                }
            }

            If ((WWEN == 0x02))
            {
                If ((WRTO != 0x02))
                {
                    PowerResource (PXP5, 0x00, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((VDID == 0xFFFFFFFF))
                            {
                                ADBG (Concatenate ("_STA no RP ", ToHexString (SLOT)))
                                Return (Zero)
                            }

                            Return (PSTA ())
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                            Local0 = Acquire (\WWMT, 0x03E8)
                            ADBG ("WWAN _ON WWMT Mutex:Acquired Try Done")
                            If ((Local0 == Zero))
                            {
                                ADBG ("WWAN _ON WWMT Mutex:Acquired Done")
                                If ((VDID == 0xFFFFFFFF))
                                {
                                    ADBG (Concatenate ("_ON no RP ", ToHexString (SLOT)))
                                    Release (\WWMT)
                                    Return (Zero)
                                }

                                If ((OFEN == One))
                                {
                                    ADBG ("WWAN is already ON.")
                                    Release (\WWMT)
                                    Return (Zero)
                                }

                                \_SB.SHPO (WAKG, One)
                                PON5 ()
                                L23D ()
                                If (CondRefOf (WOFF))
                                {
                                    If ((WOFF != Zero))
                                    {
                                        WOFF = Zero
                                        Sleep (TR2P)
                                        ADBG (Concatenate ("SLP TR2P ", ToDecimalString (TR2P)))
                                    }
                                }

                                OFEN = One
                                Release (\WWMT)
                                ADBG ("WWAN _ON WWMT Mutex:Release Done")
                            }
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                            Local0 = Acquire (\WWMT, 0x03E8)
                            ADBG ("WWAN _OFF WWMT Mutex:Acquired Try Done")
                            If ((Local0 == Zero))
                            {
                                ADBG ("WWAN _OFF WWMT Mutex:Acquired Done")
                                If ((VDID == 0xFFFFFFFF))
                                {
                                    ADBG (Concatenate ("_OFF no RP", ToHexString (SLOT)))
                                    Release (\WWMT)
                                    Return (Zero)
                                }

                                If ((OFEN == Zero))
                                {
                                    ADBG ("WWAN is already OFF.")
                                    Release (\WWMT)
                                    Return (Zero)
                                }

                                DL23 ()
                                POF5 ()
                                WKEN = Zero
                                OFEN = Zero
                                Release (\WWMT)
                                ADBG ("WWAN _OFF WWMT Mutex:Release Done")
                            }
                        }
                    }
                }

                Method (PON5, 0, Serialized)
                {
                    ADBG (Concatenate ("PON RP ", ToHexString (SLOT)))
                    \_SB.PSD0 (SLOT)
                    If (CondRefOf (WOFF))
                    {
                        If ((WOFF != Zero))
                        {
                            Local0 = ((Timer - WOFF) / 0x2710)
                            ADBG (Concatenate ("SLP TFDI ", ToDecimalString (TFDI)))
                            If ((Local0 < TFDI))
                            {
                                Sleep ((TFDI - Local0))
                            }

                            If (CondRefOf (PWRG))
                            {
                                ADBG ("WWAN PWR ON")
                                \PIN.ON (PWRG)
                            }

                            Sleep (TN2B)
                            ADBG (Concatenate ("SLP TN2B ", ToDecimalString (TN2B)))
                            If (CondRefOf (BRST))
                            {
                                \PIN.OFF (BRST)
                            }

                            Sleep (TB2R)
                            ADBG (Concatenate ("SLP TB2R ", ToDecimalString (TB2R)))
                        }
                    }

                    If (CondRefOf (SCLK))
                    {
                        SPCO (SCLK, One)
                    }

                    \PIN.OFF (RSTG)
                }

                Method (POF5, 0, Serialized)
                {
                    ADBG (Concatenate ("POFF RP ", ToHexString (SLOT)))
                    \PIN.ON (RSTG)
                    \_SB.PSD3 (SLOT)
                    If (CondRefOf (SCLK))
                    {
                        SPCO (SCLK, Zero)
                        Sleep (0x10)
                    }

                    If ((WKEN == Zero))
                    {
                        Sleep (TR2B)
                        If (CondRefOf (BRST))
                        {
                            \PIN.ON (BRST)
                        }

                        Sleep (TB2F)
                        ADBG (Concatenate ("TB2F ", ToDecimalString (TB2F)))
                        ADBG ("WWAN PWR OFF")
                        If (CondRefOf (PWRG))
                        {
                            \PIN.OFF (PWRG)
                        }

                        If (CondRefOf (WOFF))
                        {
                            WOFF = Timer
                        }
                    }

                    If (CondRefOf (WAKG))
                    {
                        If (((WAKG != Zero) && WKEN))
                        {
                            ADBG ("Enable WAKE")
                            \_SB.SHPO (WAKG, Zero)
                        }
                        Else
                        {
                            ADBG ("Disable WAKE")
                            \_SB.SHPO (WAKG, One)
                        }
                    }
                }

                Scope (PXSX)
                {
                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        ADBG ("WWAN _PS0")
                        Local0 = Zero
                        While ((\_SB.PC00.RP07.LASX == Zero))
                        {
                            If ((Local0 > 0x14))
                            {
                                ADBG ("WWAN _PS0 LASX TO")
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        ADBG (Concatenate ("_PS0 LASX Delay Time ", ToDecimalString (Local0)))
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        ADBG ("WWAN _PS3")
                    }
                }
            }
            Else
            {
                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("_STA no RP ", ToHexString (SLOT)))
                            Return (Zero)
                        }

                        Return (PSTA ())
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("_ON no RP ", ToHexString (SLOT)))
                            Return (Zero)
                        }

                        If ((ONEN == Zero))
                        {
                            Return (Zero)
                        }

                        \_SB.SHPO (WAKG, One)
                        If (CondRefOf (WOFF))
                        {
                            If ((WOFF != Zero))
                            {
                                Local0 = ((Timer - WOFF) / 0x2710)
                                If ((Local0 < 0x01F4))
                                {
                                    Sleep ((0x01F4 - Local0))
                                }
                            }
                        }

                        PON ()
                        L23D ()
                        If (CondRefOf (WOFF))
                        {
                            If ((WOFF != Zero))
                            {
                                WOFF = Zero
                                Sleep (0x01F4)
                            }
                        }

                        OFEN = One
                        ONEN = Zero
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("_OFF no RP", ToHexString (SLOT)))
                            Return (Zero)
                        }

                        If ((OFEN == Zero))
                        {
                            Return (Zero)
                        }

                        DL23 ()
                        POFF ()
                        If ((WKEN == Zero))
                        {
                            \PIN.ON (BRST)
                            Sleep (0x02)
                            ADBG ("WWAN PWR OFF")
                            \PIN.OFF (PWRG)
                            If (CondRefOf (WOFF))
                            {
                                WOFF = Timer
                            }
                        }

                        If (CondRefOf (WAKG))
                        {
                            If (((WAKG != Zero) && WKEN))
                            {
                                ADBG ("Enable WAKE")
                                \_SB.SHPO (WAKG, Zero)
                            }
                            Else
                            {
                                ADBG ("Disable WAKE")
                                \_SB.SHPO (WAKG, One)
                            }
                        }

                        WKEN = Zero
                        OFEN = Zero
                        ONEN = One
                    }
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If (CondRefOf (PWRG))
                {
                    If (!\PIN.STA (PWRG))
                    {
                        ADBG (Concatenate ("PSTA OFF ", ToHexString (SLOT)))
                        Return (Zero)
                    }
                }

                If (\PIN.STA (RSTG))
                {
                    ADBG (Concatenate ("PSTA OFF ", ToHexString (SLOT)))
                    Return (Zero)
                }
                Else
                {
                    ADBG (Concatenate ("PSTA ON ", ToHexString (SLOT)))
                    Return (One)
                }
            }

            Method (PON, 0, NotSerialized)
            {
                ADBG (Concatenate ("PON RP ", ToHexString (SLOT)))
                \_SB.PSD0 (SLOT)
                If (CondRefOf (WOFF))
                {
                    If ((WOFF != Zero))
                    {
                        If (CondRefOf (PWRG))
                        {
                            ADBG ("WWAN PWR ON")
                            \PIN.ON (PWRG)
                            Sleep (PEP0)
                            ADBG (Concatenate ("PEP0 ", ToHexString (PEP0)))
                        }

                        \PIN.OFF (BRST)
                        Sleep (0x14)
                    }
                    Else
                    {
                        Stall (0x14)
                    }
                }
                Else
                {
                    Stall (0x14)
                }

                If (CondRefOf (SCLK))
                {
                    SPCO (SCLK, One)
                }

                If (CondRefOf (WOFF))
                {
                    If ((WOFF != Zero))
                    {
                        Sleep (0x64)
                    }
                }

                \PIN.OFF (RSTG)
            }

            Method (POFF, 0, NotSerialized)
            {
                ADBG (Concatenate ("POFF RP ", ToHexString (SLOT)))
                \PIN.ON (RSTG)
                \_SB.PSD3 (SLOT)
                If (CondRefOf (SCLK))
                {
                    SPCO (SCLK, Zero)
                    Sleep (0x10)
                }
            }

            If ((WRTO != 0x02))
            {
                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    If ((WWEN == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            PXP5
                        })
                    }
                    Else
                    {
                        Return (Package (0x01)
                        {
                            PXP
                        })
                    }
                }
            }

            If ((WRTO == 0x03))
            {
                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    If ((WWEN == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            PXP5
                        })
                    }
                    Else
                    {
                        Return (Package (0x01)
                        {
                            PXP
                        })
                    }
                }
            }
        }
    }

    Scope (\_SB.PC00.RP09)
    {
        Name (RSTG, Package (0x02)
        {
            Zero, 
            Zero
        })
        RSTG [Zero] = S2RG /* External reference */
        RSTG [One] = S2RP /* External reference */
        Name (PWRG, Package (0x02)
        {
            Zero, 
            Zero
        })
        PWRG [Zero] = S2PG /* External reference */
        PWRG [One] = S2PP /* External reference */
        Name (WAKG, Zero)
        Name (WAKP, Zero)
        Name (SCLK, 0x04)
        Name (WKEN, Zero)
        Name (WOFF, Zero)
        Name (LNRD, Zero)
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            ADBG (Concatenate ("_S0W For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (CondRefOf (RD3C))
            {
                If ((RD3C == 0x02))
                {
                    ADBG (Concatenate ("_S0W - D3 Cold Enable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (0x04)
                }
            }

            ADBG (Concatenate ("_S0W - D0 For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            Return (Zero)
        }

        Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
        {
            ADBG (Concatenate ("_DSW For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (Arg1)
            {
                WKEN = One
                ADBG (Concatenate ("_DSW Sx Wake Enable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
            ElseIf ((Arg0 && Arg2))
            {
                WKEN = One
                ADBG (Concatenate ("_DSW D3 Wake Enable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
            Else
            {
                WKEN = Zero
                ADBG (Concatenate ("_DSW D0 Wake Disable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
        }

        Method (PPS0, 0, Serialized)
        {
            ADBG (Concatenate ("PPS0 For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            ADBG (Concatenate ("VDID - ", ToHexString (VDID)))
            ADBG (Concatenate ("Power Stat: ", ToHexString (D3HT)))
        }

        Method (PPS3, 0, Serialized)
        {
            ADBG (Concatenate ("PPS3 For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            ADBG (Concatenate ("VDID - ", ToHexString (VDID)))
            ADBG (Concatenate ("Power Stat: ", ToHexString (D3HT)))
        }

        PowerResource (PXP, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("PXP _STA Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If ((VDID == 0xFFFFFFFF))
                {
                    ADBG ("_STA return 0 as VDID = 0xFFFFFFFF")
                    Return (Zero)
                }

                If ((GPRS (0x02) == Zero))
                {
                    Return (Zero)
                }

                Return (PSTA ())
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                ADBG (Concatenate ("PXP _ON Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If ((VDID == 0xFFFFFFFF))
                {
                    ADBG ("_ON return as VDID = 0xFFFFFFFF")
                }
                ElseIf ((GPRS (One) == Zero)){}
                Else
                {
                    PON ()
                    L23D ()
                }
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                ADBG (Concatenate ("PXP _OFF Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If ((VDID == 0xFFFFFFFF))
                {
                    ADBG ("_OFF return as VDID = 0xFFFFFFFF")
                }
                ElseIf ((GPRS (Zero) == Zero)){}
                Else
                {
                    DL23 ()
                    POFF ()
                }
            }
        }

        Method (GPPR, 0, NotSerialized)
        {
            ADBG (Concatenate ("GPPR Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (CondRefOf (WAKP))
            {
                If (((WAKP != Zero) && (WKEN == Zero)))
                {
                    ADBG (Concatenate ("WAKE enable and keep CIO power on for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            If (CondRefOf (PCPB))
            {
                If ((PCPB != Zero))
                {
                    ADBG (Concatenate ("PCIe core power veto bitmask is not Zero now, not allow for core power removal. For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            If (CondRefOf (DVES))
            {
                If ((DVES () == Zero))
                {
                    ADBG (Concatenate ("DG Device core power removal is Denied for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            Return (One)
        }

        Method (GPRS, 1, Serialized)
        {
            ADBG (Concatenate ("GPRS Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If ((PGRT == Zero))
            {
                Return (Zero)
            }

            If (CondRefOf (RD3C))
            {
                If ((RD3C != 0x02))
                {
                    ADBG (Concatenate ("Skiping D3 Flow as D3Cold support is Disable for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    If ((Arg0 != 0x02))
                    {
                        If (CondRefOf (CEMP))
                        {
                            CEMP (One)
                        }
                    }

                    Return (Zero)
                }
            }

            If (CondRefOf (PRMV))
            {
                If ((PRMV == One))
                {
                    ADBG (Concatenate ("Skiping D3 Flow for Storage Device Mapped under VMD connected to ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            Return (One)
        }

        Method (PSTA, 0, NotSerialized)
        {
            ADBG (Concatenate ("PSTA Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (\PIN.STA (RSTG))
            {
                ADBG (Concatenate ("PSTA OFF For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                Return (Zero)
            }
            Else
            {
                ADBG (Concatenate ("PSTA ON For", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                Return (One)
            }
        }

        Method (PON, 0, NotSerialized)
        {
            ADBG (Concatenate ("PON Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (CondRefOf (CEMP))
            {
                CEMP (One)
            }

            If (CondRefOf (WAKG))
            {
                If ((WAKG != Zero))
                {
                    \_SB.SHPO (WAKG, One)
                    \_SB.CAGS (WAKG)
                    ADBG (Concatenate ("WAKG: set GPIO mode ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                }
            }

            If ((CondRefOf (PRTP) && (PRTP == 0x02)))
            {
                \_SB.PSD0 (SLOT)
            }

            If (CondRefOf (PWRG))
            {
                If (CondRefOf (WOFF))
                {
                    If ((WOFF != Zero))
                    {
                        Local0 = ((Timer - WOFF) / 0x2710)
                        If ((Local0 < PDOD))
                        {
                            Sleep ((PDOD - Local0))
                            ADBG (Concatenate ("Rtd3Pcie Generic _ON Sleep time : ", ToHexString ((PDOD - Local0))))
                            ADBG (Concatenate ("Rtd3Pcie Generic _ON Local0 time : ", ToHexString (Local0)))
                        }

                        WOFF = Zero
                    }
                }

                ADBG (Concatenate ("Rtd3Pcie Generic _ON PDOD time : ", ToHexString (PDOD)))
                ADBG (Concatenate ("Rtd3Pcie Generic _ON Current time : ", ToHexString (Timer)))
                \PIN.ON (PWRG)
                Sleep (PEP0)
            }

            If (CondRefOf (SCLK))
            {
                SPCO (SCLK, One)
            }

            \PIN.OFF (RSTG)
        }

        Method (POFF, 0, NotSerialized)
        {
            ADBG (Concatenate ("POFF Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            Local1 = (LNRD / 0x03E8)
            Sleep (Local1)
            \PIN.ON (RSTG)
            If ((CondRefOf (PRTP) && (PRTP == 0x02)))
            {
                \_SB.PSD3 (SLOT)
            }

            If (CondRefOf (SCLK))
            {
                SPCO (SCLK, Zero)
            }

            If (CondRefOf (PWRG))
            {
                If ((GPPR () == One))
                {
                    \PIN.OFF (PWRG)
                }

                If (CondRefOf (WOFF))
                {
                    WOFF = Timer
                }
            }

            If (CondRefOf (WAKG))
            {
                If (((WAKG != Zero) && WKEN))
                {
                    \_SB.SHPO (WAKG, Zero)
                    ADBG (Concatenate ("WAKG: set ACPI mode ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                }
            }

            ADBG (Concatenate ("Rtd3Pcie _OFF TOFF time : ", ToHexString (WOFF)))
            If (CondRefOf (CEMP))
            {
                CEMP (Zero)
            }
        }

        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
        {
            Return (Package (0x01)
            {
                PXP
            })
        }

        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
        {
            Return (Package (0x01)
            {
                PXP
            })
        }

        Method (UPRD, 1, Serialized)
        {
            If ((Arg0 <= 0x2710))
            {
                LNRD = Arg0
            }

            Return (LNRD) /* \_SB_.PC00.RP09.LNRD */
        }

        Scope (\_SB.PC00.RP09.PXSX)
        {
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                ADBG (Concatenate ("_S0W For Child Storage Device Of ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If (CondRefOf (^^RD3C))
                {
                    If ((^^RD3C == 0x02))
                    {
                        ADBG (Concatenate ("_S0W - D3 Cold Enable For Child Device of ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                            Concatenate (" And Index : ", ToHexString (SLOT))))))
                        Return (0x04)
                    }
                    ElseIf ((^^RD3C == Zero))
                    {
                        ADBG (Concatenate ("_S0W - D3 Disable For Child Device of ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                            Concatenate (" And Index : ", ToHexString (SLOT))))))
                        Return (Zero)
                    }
                }

                ADBG (Concatenate ("_S0W - D3 Hot Enable For Child Device of ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                Return (0x03)
            }

            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
            {
                Return (^^_PR0 ())
            }

            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
            {
                Return (^^_PR3 ())
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("Storage Child Device _PS0 for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("Storage Child Device _PS3 for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
        }
    }

    Scope (\_SB.PC00.RP10)
    {
        Name (RSTG, Package (0x02)
        {
            Zero, 
            Zero
        })
        RSTG [Zero] = S3RG /* External reference */
        RSTG [One] = S3RP /* External reference */
        Name (PWRG, Package (0x02)
        {
            Zero, 
            Zero
        })
        PWRG [Zero] = S3PG /* External reference */
        PWRG [One] = S3PP /* External reference */
        Name (WAKG, Zero)
        Name (WAKP, Zero)
        Name (SCLK, 0x08)
        Name (WKEN, Zero)
        Name (WOFF, Zero)
        Name (LNRD, Zero)
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            ADBG (Concatenate ("_S0W For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (CondRefOf (RD3C))
            {
                If ((RD3C == 0x02))
                {
                    ADBG (Concatenate ("_S0W - D3 Cold Enable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (0x04)
                }
            }

            ADBG (Concatenate ("_S0W - D0 For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            Return (Zero)
        }

        Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
        {
            ADBG (Concatenate ("_DSW For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (Arg1)
            {
                WKEN = One
                ADBG (Concatenate ("_DSW Sx Wake Enable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
            ElseIf ((Arg0 && Arg2))
            {
                WKEN = One
                ADBG (Concatenate ("_DSW D3 Wake Enable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
            Else
            {
                WKEN = Zero
                ADBG (Concatenate ("_DSW D0 Wake Disable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
        }

        Method (PPS0, 0, Serialized)
        {
            ADBG (Concatenate ("PPS0 For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            ADBG (Concatenate ("VDID - ", ToHexString (VDID)))
            ADBG (Concatenate ("Power Stat: ", ToHexString (D3HT)))
        }

        Method (PPS3, 0, Serialized)
        {
            ADBG (Concatenate ("PPS3 For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            ADBG (Concatenate ("VDID - ", ToHexString (VDID)))
            ADBG (Concatenate ("Power Stat: ", ToHexString (D3HT)))
        }

        PowerResource (PXP, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("PXP _STA Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If ((VDID == 0xFFFFFFFF))
                {
                    ADBG ("_STA return 0 as VDID = 0xFFFFFFFF")
                    Return (Zero)
                }

                If ((GPRS (0x02) == Zero))
                {
                    Return (Zero)
                }

                Return (PSTA ())
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                ADBG (Concatenate ("PXP _ON Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If ((VDID == 0xFFFFFFFF))
                {
                    ADBG ("_ON return as VDID = 0xFFFFFFFF")
                }
                ElseIf ((GPRS (One) == Zero)){}
                Else
                {
                    PON ()
                    L23D ()
                }
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                ADBG (Concatenate ("PXP _OFF Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If ((VDID == 0xFFFFFFFF))
                {
                    ADBG ("_OFF return as VDID = 0xFFFFFFFF")
                }
                ElseIf ((GPRS (Zero) == Zero)){}
                Else
                {
                    DL23 ()
                    POFF ()
                }
            }
        }

        Method (GPPR, 0, NotSerialized)
        {
            ADBG (Concatenate ("GPPR Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (CondRefOf (WAKP))
            {
                If (((WAKP != Zero) && (WKEN == Zero)))
                {
                    ADBG (Concatenate ("WAKE enable and keep CIO power on for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            If (CondRefOf (PCPB))
            {
                If ((PCPB != Zero))
                {
                    ADBG (Concatenate ("PCIe core power veto bitmask is not Zero now, not allow for core power removal. For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            If (CondRefOf (DVES))
            {
                If ((DVES () == Zero))
                {
                    ADBG (Concatenate ("DG Device core power removal is Denied for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            Return (One)
        }

        Method (GPRS, 1, Serialized)
        {
            ADBG (Concatenate ("GPRS Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If ((PGRT == Zero))
            {
                Return (Zero)
            }

            If (CondRefOf (RD3C))
            {
                If ((RD3C != 0x02))
                {
                    ADBG (Concatenate ("Skiping D3 Flow as D3Cold support is Disable for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    If ((Arg0 != 0x02))
                    {
                        If (CondRefOf (CEMP))
                        {
                            CEMP (One)
                        }
                    }

                    Return (Zero)
                }
            }

            If (CondRefOf (PRMV))
            {
                If ((PRMV == One))
                {
                    ADBG (Concatenate ("Skiping D3 Flow for Storage Device Mapped under VMD connected to ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            Return (One)
        }

        Method (PSTA, 0, NotSerialized)
        {
            ADBG (Concatenate ("PSTA Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (\PIN.STA (RSTG))
            {
                ADBG (Concatenate ("PSTA OFF For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                Return (Zero)
            }
            Else
            {
                ADBG (Concatenate ("PSTA ON For", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                Return (One)
            }
        }

        Method (PON, 0, NotSerialized)
        {
            ADBG (Concatenate ("PON Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (CondRefOf (CEMP))
            {
                CEMP (One)
            }

            If (CondRefOf (WAKG))
            {
                If ((WAKG != Zero))
                {
                    \_SB.SHPO (WAKG, One)
                    \_SB.CAGS (WAKG)
                    ADBG (Concatenate ("WAKG: set GPIO mode ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                }
            }

            If ((CondRefOf (PRTP) && (PRTP == 0x02)))
            {
                \_SB.PSD0 (SLOT)
            }

            If (CondRefOf (PWRG))
            {
                If (CondRefOf (WOFF))
                {
                    If ((WOFF != Zero))
                    {
                        Local0 = ((Timer - WOFF) / 0x2710)
                        If ((Local0 < PDOD))
                        {
                            Sleep ((PDOD - Local0))
                            ADBG (Concatenate ("Rtd3Pcie Generic _ON Sleep time : ", ToHexString ((PDOD - Local0))))
                            ADBG (Concatenate ("Rtd3Pcie Generic _ON Local0 time : ", ToHexString (Local0)))
                        }

                        WOFF = Zero
                    }
                }

                ADBG (Concatenate ("Rtd3Pcie Generic _ON PDOD time : ", ToHexString (PDOD)))
                ADBG (Concatenate ("Rtd3Pcie Generic _ON Current time : ", ToHexString (Timer)))
                \PIN.ON (PWRG)
                Sleep (PEP0)
            }

            If (CondRefOf (SCLK))
            {
                SPCO (SCLK, One)
            }

            \PIN.OFF (RSTG)
        }

        Method (POFF, 0, NotSerialized)
        {
            ADBG (Concatenate ("POFF Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            Local1 = (LNRD / 0x03E8)
            Sleep (Local1)
            \PIN.ON (RSTG)
            If ((CondRefOf (PRTP) && (PRTP == 0x02)))
            {
                \_SB.PSD3 (SLOT)
            }

            If (CondRefOf (SCLK))
            {
                SPCO (SCLK, Zero)
            }

            If (CondRefOf (PWRG))
            {
                If ((GPPR () == One))
                {
                    \PIN.OFF (PWRG)
                }

                If (CondRefOf (WOFF))
                {
                    WOFF = Timer
                }
            }

            If (CondRefOf (WAKG))
            {
                If (((WAKG != Zero) && WKEN))
                {
                    \_SB.SHPO (WAKG, Zero)
                    ADBG (Concatenate ("WAKG: set ACPI mode ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                }
            }

            ADBG (Concatenate ("Rtd3Pcie _OFF TOFF time : ", ToHexString (WOFF)))
            If (CondRefOf (CEMP))
            {
                CEMP (Zero)
            }
        }

        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
        {
            Return (Package (0x01)
            {
                PXP
            })
        }

        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
        {
            Return (Package (0x01)
            {
                PXP
            })
        }

        Method (UPRD, 1, Serialized)
        {
            If ((Arg0 <= 0x2710))
            {
                LNRD = Arg0
            }

            Return (LNRD) /* \_SB_.PC00.RP10.LNRD */
        }

        Scope (\_SB.PC00.RP10.PXSX)
        {
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                ADBG (Concatenate ("_S0W For Child Storage Device Of ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If (CondRefOf (^^RD3C))
                {
                    If ((^^RD3C == 0x02))
                    {
                        ADBG (Concatenate ("_S0W - D3 Cold Enable For Child Device of ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                            Concatenate (" And Index : ", ToHexString (SLOT))))))
                        Return (0x04)
                    }
                    ElseIf ((^^RD3C == Zero))
                    {
                        ADBG (Concatenate ("_S0W - D3 Disable For Child Device of ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                            Concatenate (" And Index : ", ToHexString (SLOT))))))
                        Return (Zero)
                    }
                }

                ADBG (Concatenate ("_S0W - D3 Hot Enable For Child Device of ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                Return (0x03)
            }

            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
            {
                Return (^^_PR0 ())
            }

            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
            {
                Return (^^_PR3 ())
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("Storage Child Device _PS0 for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("Storage Child Device _PS3 for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
        }
    }

    Scope (\_SB.PC00.RP11)
    {
        Name (RSTG, Package (0x02)
        {
            Zero, 
            Zero
        })
        RSTG [Zero] = S4RG /* External reference */
        RSTG [One] = S4RP /* External reference */
        Name (PWRG, Package (0x02)
        {
            Zero, 
            Zero
        })
        PWRG [Zero] = S4PG /* External reference */
        PWRG [One] = S4PP /* External reference */
        Name (WAKG, Zero)
        Name (WAKP, Zero)
        Name (SCLK, 0x07)
        Name (WKEN, Zero)
        Name (WOFF, Zero)
        Name (LNRD, Zero)
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            ADBG (Concatenate ("_S0W For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (CondRefOf (RD3C))
            {
                If ((RD3C == 0x02))
                {
                    ADBG (Concatenate ("_S0W - D3 Cold Enable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (0x04)
                }
            }

            ADBG (Concatenate ("_S0W - D0 For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            Return (Zero)
        }

        Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
        {
            ADBG (Concatenate ("_DSW For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (Arg1)
            {
                WKEN = One
                ADBG (Concatenate ("_DSW Sx Wake Enable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
            ElseIf ((Arg0 && Arg2))
            {
                WKEN = One
                ADBG (Concatenate ("_DSW D3 Wake Enable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
            Else
            {
                WKEN = Zero
                ADBG (Concatenate ("_DSW D0 Wake Disable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
        }

        Method (PPS0, 0, Serialized)
        {
            ADBG (Concatenate ("PPS0 For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            ADBG (Concatenate ("VDID - ", ToHexString (VDID)))
            ADBG (Concatenate ("Power Stat: ", ToHexString (D3HT)))
        }

        Method (PPS3, 0, Serialized)
        {
            ADBG (Concatenate ("PPS3 For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            ADBG (Concatenate ("VDID - ", ToHexString (VDID)))
            ADBG (Concatenate ("Power Stat: ", ToHexString (D3HT)))
        }

        PowerResource (PXP, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("PXP _STA Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If ((VDID == 0xFFFFFFFF))
                {
                    ADBG ("_STA return 0 as VDID = 0xFFFFFFFF")
                    Return (Zero)
                }

                If ((GPRS (0x02) == Zero))
                {
                    Return (Zero)
                }

                Return (PSTA ())
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                ADBG (Concatenate ("PXP _ON Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If ((VDID == 0xFFFFFFFF))
                {
                    ADBG ("_ON return as VDID = 0xFFFFFFFF")
                }
                ElseIf ((GPRS (One) == Zero)){}
                Else
                {
                    PON ()
                    L23D ()
                }
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                ADBG (Concatenate ("PXP _OFF Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If ((VDID == 0xFFFFFFFF))
                {
                    ADBG ("_OFF return as VDID = 0xFFFFFFFF")
                }
                ElseIf ((GPRS (Zero) == Zero)){}
                Else
                {
                    DL23 ()
                    POFF ()
                }
            }
        }

        Method (GPPR, 0, NotSerialized)
        {
            ADBG (Concatenate ("GPPR Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (CondRefOf (WAKP))
            {
                If (((WAKP != Zero) && (WKEN == Zero)))
                {
                    ADBG (Concatenate ("WAKE enable and keep CIO power on for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            If (CondRefOf (PCPB))
            {
                If ((PCPB != Zero))
                {
                    ADBG (Concatenate ("PCIe core power veto bitmask is not Zero now, not allow for core power removal. For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            If (CondRefOf (DVES))
            {
                If ((DVES () == Zero))
                {
                    ADBG (Concatenate ("DG Device core power removal is Denied for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            Return (One)
        }

        Method (GPRS, 1, Serialized)
        {
            ADBG (Concatenate ("GPRS Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If ((PGRT == Zero))
            {
                Return (Zero)
            }

            If (CondRefOf (RD3C))
            {
                If ((RD3C != 0x02))
                {
                    ADBG (Concatenate ("Skiping D3 Flow as D3Cold support is Disable for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    If ((Arg0 != 0x02))
                    {
                        If (CondRefOf (CEMP))
                        {
                            CEMP (One)
                        }
                    }

                    Return (Zero)
                }
            }

            If (CondRefOf (PRMV))
            {
                If ((PRMV == One))
                {
                    ADBG (Concatenate ("Skiping D3 Flow for Storage Device Mapped under VMD connected to ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            Return (One)
        }

        Method (PSTA, 0, NotSerialized)
        {
            ADBG (Concatenate ("PSTA Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (\PIN.STA (RSTG))
            {
                ADBG (Concatenate ("PSTA OFF For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                Return (Zero)
            }
            Else
            {
                ADBG (Concatenate ("PSTA ON For", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                Return (One)
            }
        }

        Method (PON, 0, NotSerialized)
        {
            ADBG (Concatenate ("PON Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (CondRefOf (CEMP))
            {
                CEMP (One)
            }

            If (CondRefOf (WAKG))
            {
                If ((WAKG != Zero))
                {
                    \_SB.SHPO (WAKG, One)
                    \_SB.CAGS (WAKG)
                    ADBG (Concatenate ("WAKG: set GPIO mode ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                }
            }

            If ((CondRefOf (PRTP) && (PRTP == 0x02)))
            {
                \_SB.PSD0 (SLOT)
            }

            If (CondRefOf (PWRG))
            {
                If (CondRefOf (WOFF))
                {
                    If ((WOFF != Zero))
                    {
                        Local0 = ((Timer - WOFF) / 0x2710)
                        If ((Local0 < PDOD))
                        {
                            Sleep ((PDOD - Local0))
                            ADBG (Concatenate ("Rtd3Pcie Generic _ON Sleep time : ", ToHexString ((PDOD - Local0))))
                            ADBG (Concatenate ("Rtd3Pcie Generic _ON Local0 time : ", ToHexString (Local0)))
                        }

                        WOFF = Zero
                    }
                }

                ADBG (Concatenate ("Rtd3Pcie Generic _ON PDOD time : ", ToHexString (PDOD)))
                ADBG (Concatenate ("Rtd3Pcie Generic _ON Current time : ", ToHexString (Timer)))
                \PIN.ON (PWRG)
                Sleep (PEP0)
            }

            If (CondRefOf (SCLK))
            {
                SPCO (SCLK, One)
            }

            \PIN.OFF (RSTG)
        }

        Method (POFF, 0, NotSerialized)
        {
            ADBG (Concatenate ("POFF Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            Local1 = (LNRD / 0x03E8)
            Sleep (Local1)
            \PIN.ON (RSTG)
            If ((CondRefOf (PRTP) && (PRTP == 0x02)))
            {
                \_SB.PSD3 (SLOT)
            }

            If (CondRefOf (SCLK))
            {
                SPCO (SCLK, Zero)
            }

            If (CondRefOf (PWRG))
            {
                If ((GPPR () == One))
                {
                    \PIN.OFF (PWRG)
                }

                If (CondRefOf (WOFF))
                {
                    WOFF = Timer
                }
            }

            If (CondRefOf (WAKG))
            {
                If (((WAKG != Zero) && WKEN))
                {
                    \_SB.SHPO (WAKG, Zero)
                    ADBG (Concatenate ("WAKG: set ACPI mode ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                }
            }

            ADBG (Concatenate ("Rtd3Pcie _OFF TOFF time : ", ToHexString (WOFF)))
            If (CondRefOf (CEMP))
            {
                CEMP (Zero)
            }
        }

        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
        {
            Return (Package (0x01)
            {
                PXP
            })
        }

        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
        {
            Return (Package (0x01)
            {
                PXP
            })
        }

        Method (UPRD, 1, Serialized)
        {
            If ((Arg0 <= 0x2710))
            {
                LNRD = Arg0
            }

            Return (LNRD) /* \_SB_.PC00.RP11.LNRD */
        }

        Scope (\_SB.PC00.RP11.PXSX)
        {
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                ADBG (Concatenate ("_S0W For Child Storage Device Of ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If (CondRefOf (^^RD3C))
                {
                    If ((^^RD3C == 0x02))
                    {
                        ADBG (Concatenate ("_S0W - D3 Cold Enable For Child Device of ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                            Concatenate (" And Index : ", ToHexString (SLOT))))))
                        Return (0x04)
                    }
                    ElseIf ((^^RD3C == Zero))
                    {
                        ADBG (Concatenate ("_S0W - D3 Disable For Child Device of ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                            Concatenate (" And Index : ", ToHexString (SLOT))))))
                        Return (Zero)
                    }
                }

                ADBG (Concatenate ("_S0W - D3 Hot Enable For Child Device of ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                Return (0x03)
            }

            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
            {
                Return (^^_PR0 ())
            }

            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
            {
                Return (^^_PR3 ())
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("Storage Child Device _PS0 for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("Storage Child Device _PS3 for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
        }
    }

    Scope (\_SB.PC00.RP12)
    {
        Name (RSTG, Package (0x02)
        {
            Zero, 
            Zero
        })
        RSTG [Zero] = P4RG /* External reference */
        RSTG [One] = P4RP /* External reference */
        Name (PWRG, Package (0x02)
        {
            Zero, 
            Zero
        })
        PWRG [Zero] = P4PG /* External reference */
        PWRG [One] = P4EP /* External reference */
        Name (WAKG, Zero)
        WAKG = P4WG /* External reference */
        Name (SCLK, 0x06)
        Name (WAKP, Zero)
        Name (WKEN, Zero)
        Name (WOFF, Zero)
        Name (LNRD, Zero)
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            ADBG (Concatenate ("_S0W For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (CondRefOf (RD3C))
            {
                If ((RD3C == 0x02))
                {
                    ADBG (Concatenate ("_S0W - D3 Cold Enable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (0x04)
                }
            }

            ADBG (Concatenate ("_S0W - D0 For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            Return (Zero)
        }

        Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
        {
            ADBG (Concatenate ("_DSW For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (Arg1)
            {
                WKEN = One
                ADBG (Concatenate ("_DSW Sx Wake Enable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
            ElseIf ((Arg0 && Arg2))
            {
                WKEN = One
                ADBG (Concatenate ("_DSW D3 Wake Enable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
            Else
            {
                WKEN = Zero
                ADBG (Concatenate ("_DSW D0 Wake Disable For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
            }
        }

        Method (PPS0, 0, Serialized)
        {
            ADBG (Concatenate ("PPS0 For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            ADBG (Concatenate ("VDID - ", ToHexString (VDID)))
            ADBG (Concatenate ("Power Stat: ", ToHexString (D3HT)))
        }

        Method (PPS3, 0, Serialized)
        {
            ADBG (Concatenate ("PPS3 For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            ADBG (Concatenate ("VDID - ", ToHexString (VDID)))
            ADBG (Concatenate ("Power Stat: ", ToHexString (D3HT)))
        }

        PowerResource (PXP, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("PXP _STA Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If ((VDID == 0xFFFFFFFF))
                {
                    ADBG ("_STA return 0 as VDID = 0xFFFFFFFF")
                    Return (Zero)
                }

                If ((GPRS (0x02) == Zero))
                {
                    Return (Zero)
                }

                Return (PSTA ())
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                ADBG (Concatenate ("PXP _ON Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If ((VDID == 0xFFFFFFFF))
                {
                    ADBG ("_ON return as VDID = 0xFFFFFFFF")
                }
                ElseIf ((GPRS (One) == Zero)){}
                Else
                {
                    PON ()
                    L23D ()
                }
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                ADBG (Concatenate ("PXP _OFF Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                If ((VDID == 0xFFFFFFFF))
                {
                    ADBG ("_OFF return as VDID = 0xFFFFFFFF")
                }
                ElseIf ((GPRS (Zero) == Zero)){}
                Else
                {
                    DL23 ()
                    POFF ()
                }
            }
        }

        Method (GPPR, 0, NotSerialized)
        {
            ADBG (Concatenate ("GPPR Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (CondRefOf (WAKP))
            {
                If (((WAKP != Zero) && (WKEN == Zero)))
                {
                    ADBG (Concatenate ("WAKE enable and keep CIO power on for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            If (CondRefOf (PCPB))
            {
                If ((PCPB != Zero))
                {
                    ADBG (Concatenate ("PCIe core power veto bitmask is not Zero now, not allow for core power removal. For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            If (CondRefOf (DVES))
            {
                If ((DVES () == Zero))
                {
                    ADBG (Concatenate ("DG Device core power removal is Denied for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            Return (One)
        }

        Method (GPRS, 1, Serialized)
        {
            ADBG (Concatenate ("GPRS Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If ((PGRT == Zero))
            {
                Return (Zero)
            }

            If (CondRefOf (RD3C))
            {
                If ((RD3C != 0x02))
                {
                    ADBG (Concatenate ("Skiping D3 Flow as D3Cold support is Disable for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    If ((Arg0 != 0x02))
                    {
                        If (CondRefOf (CEMP))
                        {
                            CEMP (One)
                        }
                    }

                    Return (Zero)
                }
            }

            If (CondRefOf (PRMV))
            {
                If ((PRMV == One))
                {
                    ADBG (Concatenate ("Skiping D3 Flow for Storage Device Mapped under VMD connected to ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }
            }

            Return (One)
        }

        Method (PSTA, 0, NotSerialized)
        {
            ADBG (Concatenate ("PSTA Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (\PIN.STA (RSTG))
            {
                ADBG (Concatenate ("PSTA OFF For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                Return (Zero)
            }
            Else
            {
                ADBG (Concatenate ("PSTA ON For", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                Return (One)
            }
        }

        Method (PON, 0, NotSerialized)
        {
            ADBG (Concatenate ("PON Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            If (CondRefOf (CEMP))
            {
                CEMP (One)
            }

            If (CondRefOf (WAKG))
            {
                If ((WAKG != Zero))
                {
                    \_SB.SHPO (WAKG, One)
                    \_SB.CAGS (WAKG)
                    ADBG (Concatenate ("WAKG: set GPIO mode ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                }
            }

            If ((CondRefOf (PRTP) && (PRTP == 0x02)))
            {
                \_SB.PSD0 (SLOT)
            }

            If (CondRefOf (PWRG))
            {
                If (CondRefOf (WOFF))
                {
                    If ((WOFF != Zero))
                    {
                        Local0 = ((Timer - WOFF) / 0x2710)
                        If ((Local0 < PDOD))
                        {
                            Sleep ((PDOD - Local0))
                            ADBG (Concatenate ("Rtd3Pcie Generic _ON Sleep time : ", ToHexString ((PDOD - Local0))))
                            ADBG (Concatenate ("Rtd3Pcie Generic _ON Local0 time : ", ToHexString (Local0)))
                        }

                        WOFF = Zero
                    }
                }

                ADBG (Concatenate ("Rtd3Pcie Generic _ON PDOD time : ", ToHexString (PDOD)))
                ADBG (Concatenate ("Rtd3Pcie Generic _ON Current time : ", ToHexString (Timer)))
                \PIN.ON (PWRG)
                Sleep (PEP0)
            }

            If (CondRefOf (SCLK))
            {
                SPCO (SCLK, One)
            }

            \PIN.OFF (RSTG)
        }

        Method (POFF, 0, NotSerialized)
        {
            ADBG (Concatenate ("POFF Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                Concatenate (" And Index : ", ToHexString (SLOT))))))
            Local1 = (LNRD / 0x03E8)
            Sleep (Local1)
            \PIN.ON (RSTG)
            If ((CondRefOf (PRTP) && (PRTP == 0x02)))
            {
                \_SB.PSD3 (SLOT)
            }

            If (CondRefOf (SCLK))
            {
                SPCO (SCLK, Zero)
            }

            If (CondRefOf (PWRG))
            {
                If ((GPPR () == One))
                {
                    \PIN.OFF (PWRG)
                }

                If (CondRefOf (WOFF))
                {
                    WOFF = Timer
                }
            }

            If (CondRefOf (WAKG))
            {
                If (((WAKG != Zero) && WKEN))
                {
                    \_SB.SHPO (WAKG, Zero)
                    ADBG (Concatenate ("WAKG: set ACPI mode ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                }
            }

            ADBG (Concatenate ("Rtd3Pcie _OFF TOFF time : ", ToHexString (WOFF)))
            If (CondRefOf (CEMP))
            {
                CEMP (Zero)
            }
        }

        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
        {
            Return (Package (0x01)
            {
                PXP
            })
        }

        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
        {
            Return (Package (0x01)
            {
                PXP
            })
        }

        Method (UPRD, 1, Serialized)
        {
            If ((Arg0 <= 0x2710))
            {
                LNRD = Arg0
            }

            Return (LNRD) /* \_SB_.PC00.RP12.LNRD */
        }

        If ((DGBA != Zero))
        {
            OperationRegion (DGMR, SystemMemory, DGOP, 0x2000)
            Field (DGMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x60), 
                PCON,   32, 
                Offset (0x100), 
                DRDY,   32, 
                CSTS,   32, 
                CEVT,   32, 
                Offset (0x120), 
                DIDL,   32, 
                DDL2,   32, 
                DDL3,   32, 
                DDL4,   32, 
                DDL5,   32, 
                DDL6,   32, 
                DDL7,   32, 
                DDL8,   32, 
                CPDL,   32, 
                CPL2,   32, 
                CPL3,   32, 
                CPL4,   32, 
                CPL5,   32, 
                CPL6,   32, 
                CPL7,   32, 
                CPL8,   32, 
                CADL,   32, 
                CAL2,   32, 
                CAL3,   32, 
                CAL4,   32, 
                CAL5,   32, 
                CAL6,   32, 
                CAL7,   32, 
                CAL8,   32, 
                NADL,   32, 
                NDL2,   32, 
                NDL3,   32, 
                NDL4,   32, 
                NDL5,   32, 
                NDL6,   32, 
                NDL7,   32, 
                NDL8,   32, 
                ASLP,   32, 
                TIDX,   32, 
                CHPD,   32, 
                CLID,   32, 
                CDCK,   32, 
                SXSW,   32, 
                EVTS,   32, 
                CNOT,   32, 
                NRDY,   32, 
                DDL9,   32, 
                DD10,   32, 
                DD11,   32, 
                DD12,   32, 
                DD13,   32, 
                DD14,   32, 
                DD15,   32, 
                CPL9,   32, 
                CP10,   32, 
                CP11,   32, 
                CP12,   32, 
                CP13,   32, 
                CP14,   32, 
                CP15,   32, 
                Offset (0x300), 
                Offset (0x304), 
                ASLC,   32, 
                Offset (0x30C), 
                Offset (0x310), 
                BCLP,   32, 
                Offset (0x318), 
                CBLV,   32, 
                BCLM,   320, 
                Offset (0x3C6), 
                VRSR,   1, 
                Offset (0x1C00), 
                PHED,   32, 
                BDDC,   2048
            }

            Method (DVES, 0, Serialized)
            {
                ADBG (Concatenate ("DG: DVES Entry For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                ADBG (Concatenate ("DG: POFF PCON=", ToHexString (PCON)))
                ADBG (Concatenate ("DG: POFF VRSR = ", ToHexString (VRSR)))
                If ((DGBA == Zero))
                {
                    ADBG (Concatenate ("DG: not Supported For ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (One)
                }

                If ((((0x1800 & PCON) == 0x1800) && VRSR))
                {
                    ADBG (Concatenate ("DG: VRAMSR enabled for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                        Concatenate (" And Index : ", ToHexString (SLOT))))))
                    Return (Zero)
                }

                ADBG (Concatenate ("DG: VRAMSR is not enabled for ", Concatenate ("PCIE RP", Concatenate (Concatenate (" Type (2: PCH, 4: CPU) : ", ToHexString (PRTP)), 
                    Concatenate (" And Index : ", ToHexString (SLOT))))))
                Return (One)
            }

            Method (DNOT, 2, NotSerialized)
            {
                CEVT = Arg0
                CSTS = 0x03
                If (((CHPD == Zero) && (Arg1 == Zero)))
                {
                    Notify (\_SB.PC00.RP12.PXSX, Arg1)
                }

                Notify (\_SB.PC00.RP12.PXSX, 0x80) // Status Change
                Return (Zero)
            }

            Method (DLID, 1, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    CLID = 0x03
                }
                Else
                {
                    CLID = Arg0
                }

                If (DNOT (0x02, Zero))
                {
                    CLID |= 0x80000000
                    Return (One)
                }

                Return (Zero)
            }

            Method (DINT, 2, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    BCLP = ((Arg1 * 0xFF) / 0x64)
                    BCLP |= 0x80000000
                    ASLC = 0x02
                }

                Return (Zero)
            }

            Method (HBRT, 1, Serialized)
            {
                If ((0x04 & DGDS))
                {
                    If ((Arg0 == 0x04))
                    {
                        Notify (\_SB.PC00.RP12.PXSX.PEGB.PEGE.DEDP, 0x87) // Device-Specific
                    }

                    If ((Arg0 == 0x03))
                    {
                        Notify (\_SB.PC00.RP12.PXSX.PEGB.PEGE.DEDP, 0x86) // Device-Specific
                    }
                }
            }
        }
    }

    If ((CondRefOf (VMDE) && CondRefOf (\_SB.PC00.VMD0)))
    {
        Scope (\_SB.PC00)
        {
            If ((VMDE == One))
            {
                ADBG ("VMD is Enabled")
                Scope (VMD0)
                {
                    If (CondRefOf (VMPP))
                    {
                        If ((VMPP & One))
                        {
                            Scope (PP01)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x02))
                        {
                            Scope (PP02)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x04))
                        {
                            Scope (PP03)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x08))
                        {
                            Scope (PP04)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x10))
                        {
                            Scope (PP05)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x20))
                        {
                            Scope (PP06)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x40))
                        {
                            Scope (PP07)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x80))
                        {
                            Scope (PP08)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x0100))
                        {
                            Scope (PP09)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x0200))
                        {
                            Scope (PP10)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x0400))
                        {
                            Scope (PP11)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x0800))
                        {
                            Scope (PP12)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x1000))
                        {
                            Scope (PP13)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x2000))
                        {
                            Scope (PP14)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x4000))
                        {
                            Scope (PP15)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x8000))
                        {
                            Scope (PP16)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x00010000))
                        {
                            Scope (PP17)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x00020000))
                        {
                            Scope (PP18)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x00040000))
                        {
                            Scope (PP19)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x00080000))
                        {
                            Scope (PP20)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x00100000))
                        {
                            Scope (PP21)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x00200000))
                        {
                            Scope (PP22)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x00400000))
                        {
                            Scope (PP23)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMPP & 0x00800000))
                        {
                            Scope (PP24)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    If (CondRefOf (VMSP))
                    {
                        If ((VMSP & 0x0100))
                        {
                            Scope (SP01)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMSP & 0x0200))
                        {
                            Scope (SP02)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMSP & 0x0400))
                        {
                            Scope (SP03)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMSP & 0x0800))
                        {
                            Scope (SP04)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMSP & 0x1000))
                        {
                            Scope (SP05)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMSP & 0x2000))
                        {
                            Scope (SP06)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMSP & 0x4000))
                        {
                            Scope (SP07)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMSP & 0x8000))
                        {
                            Scope (SP08)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMSP & One))
                        {
                            Scope (SP09)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMSP & 0x02))
                        {
                            Scope (SP10)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMSP & 0x04))
                        {
                            Scope (SP11)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMSP & 0x20))
                        {
                            Scope (SP12)
                            {
                                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                {
                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                            Return (0x04)
                                        }

                                        Return (0x03)
                                    }

                                    Return (0x03)
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }

                                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                        {
                                            Return (Package (0x01)
                                            {
                                                NVPR
                                            })
                                        }
                                    }
                                }

                                If (CondRefOf (\STD3))
                                {
                                    If ((\STD3 == 0x02))
                                    {
                                        PowerResource (NVPR, 0x04, 0x0000)
                                        {
                                            Name (_STA, One)  // _STA: Status
                                            Method (_ON, 0, Serialized)  // _ON_: Power On
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe ONr:", ToHexString (_ADR ())))
                                                    VPON ()
                                                    _STA = One
                                                }
                                            }

                                            Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                            {
                                                If (!VR3D ())
                                                {
                                                    ADBG (Concatenate ("VMD PCIe OFFr:", ToHexString (_ADR ())))
                                                    VPOF ()
                                                    _STA = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    If (CondRefOf (VMS0))
                    {
                        If ((VMS0 & One))
                        {
                            Scope (PRT0)
                            {
                                ADBG ("VMD SATA drive is enabled")
                                If (((ZPPB & One) == Zero))
                                {
                                    Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                    {
                                        If (CondRefOf (\STD3))
                                        {
                                            If ((\STD3 == 0x02))
                                            {
                                                ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                                Return (0x04)
                                            }

                                            Return (0x03)
                                        }

                                        Return (0x03)
                                    }

                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                            {
                                                Return (Package (0x01)
                                                {
                                                    NVPR
                                                })
                                            }

                                            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                            {
                                                Return (Package (0x01)
                                                {
                                                    NVPR
                                                })
                                            }
                                        }
                                    }

                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            PowerResource (NVPR, 0x04, 0x0000)
                                            {
                                                Name (_STA, One)  // _STA: Status
                                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                                {
                                                    If (!VS3D ())
                                                    {
                                                        ADBG (Concatenate ("VMD_SATA_ON:", ToHexString (_ADR ())))
                                                        VSON ()
                                                        _STA = One
                                                    }
                                                }

                                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                                {
                                                    If (!VS3D ())
                                                    {
                                                        ADBG (Concatenate ("VMD_SATA_OFF:", ToHexString (_ADR ())))
                                                        VSOF ()
                                                        _STA = Zero
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMS0 & 0x02))
                        {
                            Scope (PRT1)
                            {
                                ADBG ("VMD SATA drive is enabled")
                                If (((ZPPB & 0x02) == Zero))
                                {
                                    Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                    {
                                        If (CondRefOf (\STD3))
                                        {
                                            If ((\STD3 == 0x02))
                                            {
                                                ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                                Return (0x04)
                                            }

                                            Return (0x03)
                                        }

                                        Return (0x03)
                                    }

                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                            {
                                                Return (Package (0x01)
                                                {
                                                    NVPR
                                                })
                                            }

                                            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                            {
                                                Return (Package (0x01)
                                                {
                                                    NVPR
                                                })
                                            }
                                        }
                                    }

                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            PowerResource (NVPR, 0x04, 0x0000)
                                            {
                                                Name (_STA, One)  // _STA: Status
                                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                                {
                                                    If (!VS3D ())
                                                    {
                                                        ADBG (Concatenate ("VMD_SATA_ON:", ToHexString (_ADR ())))
                                                        VSON ()
                                                        _STA = One
                                                    }
                                                }

                                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                                {
                                                    If (!VS3D ())
                                                    {
                                                        ADBG (Concatenate ("VMD_SATA_OFF:", ToHexString (_ADR ())))
                                                        VSOF ()
                                                        _STA = Zero
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMS0 & 0x04))
                        {
                            Scope (PRT2)
                            {
                                ADBG ("VMD SATA drive is enabled")
                                If (((ZPPB & 0x04) == Zero))
                                {
                                    Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                    {
                                        If (CondRefOf (\STD3))
                                        {
                                            If ((\STD3 == 0x02))
                                            {
                                                ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                                Return (0x04)
                                            }

                                            Return (0x03)
                                        }

                                        Return (0x03)
                                    }

                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                            {
                                                Return (Package (0x01)
                                                {
                                                    NVPR
                                                })
                                            }

                                            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                            {
                                                Return (Package (0x01)
                                                {
                                                    NVPR
                                                })
                                            }
                                        }
                                    }

                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            PowerResource (NVPR, 0x04, 0x0000)
                                            {
                                                Name (_STA, One)  // _STA: Status
                                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                                {
                                                    If (!VS3D ())
                                                    {
                                                        ADBG (Concatenate ("VMD_SATA_ON:", ToHexString (_ADR ())))
                                                        VSON ()
                                                        _STA = One
                                                    }
                                                }

                                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                                {
                                                    If (!VS3D ())
                                                    {
                                                        ADBG (Concatenate ("VMD_SATA_OFF:", ToHexString (_ADR ())))
                                                        VSOF ()
                                                        _STA = Zero
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMS0 & 0x08))
                        {
                            Scope (PRT3)
                            {
                                ADBG ("VMD SATA drive is enabled")
                                If (((ZPPB & 0x08) == Zero))
                                {
                                    Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                    {
                                        If (CondRefOf (\STD3))
                                        {
                                            If ((\STD3 == 0x02))
                                            {
                                                ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                                Return (0x04)
                                            }

                                            Return (0x03)
                                        }

                                        Return (0x03)
                                    }

                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                            {
                                                Return (Package (0x01)
                                                {
                                                    NVPR
                                                })
                                            }

                                            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                            {
                                                Return (Package (0x01)
                                                {
                                                    NVPR
                                                })
                                            }
                                        }
                                    }

                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            PowerResource (NVPR, 0x04, 0x0000)
                                            {
                                                Name (_STA, One)  // _STA: Status
                                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                                {
                                                    If (!VS3D ())
                                                    {
                                                        ADBG (Concatenate ("VMD_SATA_ON:", ToHexString (_ADR ())))
                                                        VSON ()
                                                        _STA = One
                                                    }
                                                }

                                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                                {
                                                    If (!VS3D ())
                                                    {
                                                        ADBG (Concatenate ("VMD_SATA_OFF:", ToHexString (_ADR ())))
                                                        VSOF ()
                                                        _STA = Zero
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMS0 & 0x10))
                        {
                            Scope (PRT4)
                            {
                                ADBG ("VMD SATA drive is enabled")
                                If (((ZPPB & 0x10) == Zero))
                                {
                                    Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                    {
                                        If (CondRefOf (\STD3))
                                        {
                                            If ((\STD3 == 0x02))
                                            {
                                                ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                                Return (0x04)
                                            }

                                            Return (0x03)
                                        }

                                        Return (0x03)
                                    }

                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                            {
                                                Return (Package (0x01)
                                                {
                                                    NVPR
                                                })
                                            }

                                            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                            {
                                                Return (Package (0x01)
                                                {
                                                    NVPR
                                                })
                                            }
                                        }
                                    }

                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            PowerResource (NVPR, 0x04, 0x0000)
                                            {
                                                Name (_STA, One)  // _STA: Status
                                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                                {
                                                    If (!VS3D ())
                                                    {
                                                        ADBG (Concatenate ("VMD_SATA_ON:", ToHexString (_ADR ())))
                                                        VSON ()
                                                        _STA = One
                                                    }
                                                }

                                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                                {
                                                    If (!VS3D ())
                                                    {
                                                        ADBG (Concatenate ("VMD_SATA_OFF:", ToHexString (_ADR ())))
                                                        VSOF ()
                                                        _STA = Zero
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMS0 & 0x20))
                        {
                            Scope (PRT5)
                            {
                                ADBG ("VMD SATA drive is enabled")
                                If (((ZPPB & 0x20) == Zero))
                                {
                                    Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                    {
                                        If (CondRefOf (\STD3))
                                        {
                                            If ((\STD3 == 0x02))
                                            {
                                                ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                                Return (0x04)
                                            }

                                            Return (0x03)
                                        }

                                        Return (0x03)
                                    }

                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                            {
                                                Return (Package (0x01)
                                                {
                                                    NVPR
                                                })
                                            }

                                            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                            {
                                                Return (Package (0x01)
                                                {
                                                    NVPR
                                                })
                                            }
                                        }
                                    }

                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            PowerResource (NVPR, 0x04, 0x0000)
                                            {
                                                Name (_STA, One)  // _STA: Status
                                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                                {
                                                    If (!VS3D ())
                                                    {
                                                        ADBG (Concatenate ("VMD_SATA_ON:", ToHexString (_ADR ())))
                                                        VSON ()
                                                        _STA = One
                                                    }
                                                }

                                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                                {
                                                    If (!VS3D ())
                                                    {
                                                        ADBG (Concatenate ("VMD_SATA_OFF:", ToHexString (_ADR ())))
                                                        VSOF ()
                                                        _STA = Zero
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMS0 & 0x40))
                        {
                            Scope (PRT6)
                            {
                                ADBG ("VMD SATA drive is enabled")
                                If (((ZPPB & 0x40) == Zero))
                                {
                                    Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                    {
                                        If (CondRefOf (\STD3))
                                        {
                                            If ((\STD3 == 0x02))
                                            {
                                                ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                                Return (0x04)
                                            }

                                            Return (0x03)
                                        }

                                        Return (0x03)
                                    }

                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                            {
                                                Return (Package (0x01)
                                                {
                                                    NVPR
                                                })
                                            }

                                            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                            {
                                                Return (Package (0x01)
                                                {
                                                    NVPR
                                                })
                                            }
                                        }
                                    }

                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            PowerResource (NVPR, 0x04, 0x0000)
                                            {
                                                Name (_STA, One)  // _STA: Status
                                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                                {
                                                    If (!VS3D ())
                                                    {
                                                        ADBG (Concatenate ("VMD_SATA_ON:", ToHexString (_ADR ())))
                                                        VSON ()
                                                        _STA = One
                                                    }
                                                }

                                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                                {
                                                    If (!VS3D ())
                                                    {
                                                        ADBG (Concatenate ("VMD_SATA_OFF:", ToHexString (_ADR ())))
                                                        VSOF ()
                                                        _STA = Zero
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        If ((VMS0 & 0x80))
                        {
                            Scope (PRT7)
                            {
                                ADBG ("VMD SATA drive is enabled")
                                If (((ZPPB & 0x80) == Zero))
                                {
                                    Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                                    {
                                        If (CondRefOf (\STD3))
                                        {
                                            If ((\STD3 == 0x02))
                                            {
                                                ADBG (Concatenate ("_S0W - Storage D3 Status : ", ToHexString (\STD3)))
                                                Return (0x04)
                                            }

                                            Return (0x03)
                                        }

                                        Return (0x03)
                                    }

                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                            {
                                                Return (Package (0x01)
                                                {
                                                    NVPR
                                                })
                                            }

                                            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                            {
                                                Return (Package (0x01)
                                                {
                                                    NVPR
                                                })
                                            }
                                        }
                                    }

                                    If (CondRefOf (\STD3))
                                    {
                                        If ((\STD3 == 0x02))
                                        {
                                            PowerResource (NVPR, 0x04, 0x0000)
                                            {
                                                Name (_STA, One)  // _STA: Status
                                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                                {
                                                    If (!VS3D ())
                                                    {
                                                        ADBG (Concatenate ("VMD_SATA_ON:", ToHexString (_ADR ())))
                                                        VSON ()
                                                        _STA = One
                                                    }
                                                }

                                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                                {
                                                    If (!VS3D ())
                                                    {
                                                        ADBG (Concatenate ("VMD_SATA_OFF:", ToHexString (_ADR ())))
                                                        VSOF ()
                                                        _STA = Zero
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Device (VOL0)
                    {
                        Name (_ADR, 0x0080FFFF)  // _ADR: Address
                        If ((CondRefOf (\RTD3) && CondRefOf (\STD3)))
                        {
                            If (((\RTD3 != Zero) && (\STD3 == 0x02)))
                            {
                                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                {
                                    Return (Package (0x01)
                                    {
                                        V0PR
                                    })
                                }

                                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                {
                                    Return (Package (0x01)
                                    {
                                        V0PR
                                    })
                                }
                            }
                        }

                        If ((CondRefOf (\RTD3) && CondRefOf (\STD3)))
                        {
                            If (((\RTD3 != Zero) && (\STD3 == 0x02)))
                            {
                                PowerResource (V0PR, 0x04, 0x0000)
                                {
                                    Name (_STA, One)  // _STA: Status
                                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                                    {
                                        ADBG ("VMD VOL0._ON")
                                        If (VD3A ())
                                        {
                                            ^^^VLON (VV0S, VV0D)
                                            _STA = One
                                        }
                                        Else
                                        {
                                            ADBG ("Global RTD3 lock")
                                        }
                                    }

                                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                                    {
                                        ADBG ("VMD VOL0._OFF")
                                        If (VD3A ())
                                        {
                                            ^^^VLOF (VV0S, VV0D)
                                            _STA = Zero
                                        }
                                        Else
                                        {
                                            ADBG ("Global RTD3 lock")
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Device (VOL1)
                    {
                        Name (_ADR, 0x0081FFFF)  // _ADR: Address
                        If ((CondRefOf (\RTD3) && CondRefOf (\STD3)))
                        {
                            If (((\RTD3 != Zero) && (\STD3 == 0x02)))
                            {
                                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                {
                                    Return (Package (0x01)
                                    {
                                        V1PR
                                    })
                                }

                                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                {
                                    Return (Package (0x01)
                                    {
                                        V1PR
                                    })
                                }
                            }
                        }

                        If ((CondRefOf (\RTD3) && CondRefOf (\STD3)))
                        {
                            If (((\RTD3 != Zero) && (\STD3 == 0x02)))
                            {
                                PowerResource (V1PR, 0x04, 0x0000)
                                {
                                    Name (_STA, One)  // _STA: Status
                                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                                    {
                                        ADBG ("VMD VOL1._ON")
                                        If (VD3A ())
                                        {
                                            ^^^VLON (VV1S, VV1D)
                                            _STA = One
                                        }
                                        Else
                                        {
                                            ADBG ("Global RTD3 lock")
                                        }
                                    }

                                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                                    {
                                        ADBG ("VMD VOL1._OFF")
                                        If (VD3A ())
                                        {
                                            ^^^VLOF (VV1S, VV1D)
                                            _STA = Zero
                                        }
                                        Else
                                        {
                                            ADBG ("Global RTD3 lock")
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Device (VOL2)
                    {
                        Name (_ADR, 0x0082FFFF)  // _ADR: Address
                        If ((CondRefOf (\RTD3) && CondRefOf (\STD3)))
                        {
                            If (((\RTD3 != Zero) && (\STD3 == 0x02)))
                            {
                                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                {
                                    Return (Package (0x01)
                                    {
                                        V2PR
                                    })
                                }

                                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                {
                                    Return (Package (0x01)
                                    {
                                        V2PR
                                    })
                                }
                            }
                        }

                        If ((CondRefOf (\RTD3) && CondRefOf (\STD3)))
                        {
                            If (((\RTD3 != Zero) && (\STD3 == 0x02)))
                            {
                                PowerResource (V2PR, 0x04, 0x0000)
                                {
                                    Name (_STA, One)  // _STA: Status
                                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                                    {
                                        ADBG ("VMD VOL2._ON")
                                        If (VD3A ())
                                        {
                                            ^^^VLON (VV2S, VV2D)
                                            _STA = One
                                        }
                                        Else
                                        {
                                            ADBG ("Global RTD3 lock")
                                        }
                                    }

                                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                                    {
                                        ADBG ("VMD VOL2._OFF")
                                        If (VD3A ())
                                        {
                                            ^^^VLOF (VV2S, VV2D)
                                            _STA = Zero
                                        }
                                        Else
                                        {
                                            ADBG ("Global RTD3 lock")
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Device (VOL3)
                    {
                        Name (_ADR, 0x0083FFFF)  // _ADR: Address
                        If ((CondRefOf (\RTD3) && CondRefOf (\STD3)))
                        {
                            If (((\RTD3 != Zero) && (\STD3 == 0x02)))
                            {
                                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                                {
                                    Return (Package (0x01)
                                    {
                                        V3PR
                                    })
                                }

                                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                                {
                                    Return (Package (0x01)
                                    {
                                        V3PR
                                    })
                                }
                            }
                        }

                        If ((CondRefOf (\RTD3) && CondRefOf (\STD3)))
                        {
                            If (((\RTD3 != Zero) && (\STD3 == 0x02)))
                            {
                                PowerResource (V3PR, 0x04, 0x0000)
                                {
                                    Name (_STA, One)  // _STA: Status
                                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                                    {
                                        ADBG ("VMD VOL3._ON")
                                        If (VD3A ())
                                        {
                                            ^^^VLON (VV3S, VV3D)
                                            _STA = One
                                        }
                                        Else
                                        {
                                            ADBG ("Global RTD3 lock")
                                        }
                                    }

                                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                                    {
                                        ADBG ("VMD VOL3._OFF")
                                        If (VD3A ())
                                        {
                                            ^^^VLOF (VV3S, VV3D)
                                            _STA = Zero
                                        }
                                        Else
                                        {
                                            ADBG ("Global RTD3 lock")
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    If ((XDCE == One))
    {
        Scope (\_SB)
        {
            PowerResource (USBC, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }
            }
        }

        Scope (\_SB.PC00.XDCI)
        {
            OperationRegion (GENR, SystemMemory, ((XDCB & 0xFFFFFFFFFFFFFF00) + 0x0010F81C), 0x04)
            Field (GENR, WordAcc, NoLock, Preserve)
            {
                    ,   2, 
                CPME,   1, 
                U3EN,   1, 
                U2EN,   1
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                CPME = One
                U2EN = One
                U3EN = One
                ADBG ("XDC CSD3")
                \_SB.CSD3 (0x17)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                CPME = Zero
                U2EN = Zero
                U3EN = Zero
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                ADBG ("XDC CSD0")
                \_SB.CSD0 (0x17)
            }

            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
            {
                Return (Package (0x01)
                {
                    USBC
                })
            }
        }
    }

    If ((GBES != Zero))
    {
        Scope (\_SB.PC00.GLAN)
        {
            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                ADBG ("GBE CSD3")
                \_SB.CSD3 (0x15)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If (!GBED)
                {
                    ADBG ("GBE CSD0")
                    \_SB.CSD0 (0x15)
                }
            }
        }
    }

    Scope (\_SB.PC00.I2C3)
    {
        Name (ONTM, Zero)
        Method (PS0X, 0, Serialized)
        {
            ADBG ("I2C3 _PS0")
        }

        Method (PS3X, 0, Serialized)
        {
            ADBG ("I2C3 _PS3")
        }

        If ((TPDT != Zero))
        {
            PowerResource (PXTC, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("I2C3 TPD _STA ON")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("I2C3 Tpd PWR ON")
                    \_SB.SGRA (GPDI, PPDI)
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("I2C3 Tpd PWR OFF")
                    Local0 = (PPDI ^ One)
                    \_SB.SGRA (GPDI, Local0)
                }
            }
        }

        If ((TPDT != Zero))
        {
            Scope (TPD0)
            {
                Name (TD_N, "TPD0")
                Name (TD_P, Package (0x01)
                {
                    \_SB.PC00.I2C3.PXTC
                })
                Alias (IC0D, TD_D)
                Alias (\_SB.PC00.I2C3.ONTM, TD_C)
                Method (PS0X, 0, Serialized)
                {
                    ADBG (Concatenate (TD_N, " D0"))
                    If ((TD_C == Zero))
                    {
                        Return (Zero)
                    }

                    Local0 = ((Timer - TD_C) / 0x2710)
                    Local1 = (TD_D + VRRD) /* External reference */
                    If ((Local0 < Local1))
                    {
                        Sleep ((Local1 - Local0))
                    }
                }

                Method (PS3X, 0, Serialized)
                {
                    ADBG (Concatenate (TD_N, " D3"))
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    If ((_STA () == 0x0F))
                    {
                        Return (TD_P) /* \_SB_.PC00.I2C3.TPD0.TD_P */
                    }
                    Else
                    {
                        Return (Package (0x00){})
                    }
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    If ((_STA () == 0x0F))
                    {
                        Return (TD_P) /* \_SB_.PC00.I2C3.TPD0.TD_P */
                    }
                    Else
                    {
                        Return (Package (0x00){})
                    }
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    PS0X ()
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    PS3X ()
                }
            }
        }
    }

    Scope (\_SB.PC00.I2C4)
    {
        Name (ONTM, Zero)
        Name (TPPE, Zero)
        Name (TPPR, Zero)
        Name (TPIP, Zero)
        Name (TPEP, Zero)
        Name (TPRP, Zero)
        Name (TPI2, Zero)
        TPPE = T0PE /* External reference */
        TPPR = T0PR /* External reference */
        TPIP = T0IP /* External reference */
        TPEP = T0EP /* External reference */
        TPRP = T0RP /* External reference */
        TPI2 = T0GI /* External reference */
        If ((TPLT != Zero))
        {
            If ((TPLS == One))
            {
                Method (PS0X, 0, Serialized)
                {
                    ADBG (Concatenate ("_PS0 I2C controller= ", ToHexString (I2CI)))
                }

                Method (PS3X, 0, Serialized)
                {
                    ADBG (Concatenate ("_PS3 I2C controller= ", ToHexString (I2CI)))
                }

                If ((TPLT != Zero))
                {
                    PowerResource (PTPL, 0x00, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((\_SB.GGOV (TPPE) == One))
                            {
                                ADBG (Concatenate ("TPL _STA ON I2C controller= ", ToHexString (I2CI)))
                                Return (One)
                            }
                            Else
                            {
                                ADBG (Concatenate ("TPL _STA OFF I2C controller= ", ToHexString (I2CI)))
                                Return (Zero)
                            }
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                            ADBG (Concatenate ("Touch PWR ON I2C controller= ", ToHexString (I2CI)))
                            \_SB.SGOV (TPPE, TPEP)
                            Sleep (0x02)
                            \_SB.SGOV (TPPR, TPRP)
                            ONTM = Timer
                            \_SB.SGRA (TPI2, TPIP)
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                            ADBG (Concatenate ("Touch PWR OFF I2C controller= ", ToHexString (I2CI)))
                            Local0 = (TPIP ^ One)
                            \_SB.SGRA (TPI2, Local0)
                            Local0 = (TPRP ^ One)
                            \_SB.SGOV (TPPR, Local0)
                            Sleep (0x03)
                            Local0 = (TPEP ^ One)
                            \_SB.SGOV (TPPE, Local0)
                            ONTM = Zero
                        }
                    }
                }

                Scope (TPL1)
                {
                    Name (TD_P, Package (0x01)
                    {
                        \_SB.PC00.I2C4.PTPL
                    })
                    Alias (\_SB.PC00.I2C4.ONTM, TD_C)
                    Name (TD_N, "TPL1")
                    Alias (IC1D, TD_D)
                    Method (PS0X, 0, Serialized)
                    {
                        ADBG (Concatenate (TD_N, " D0"))
                        If ((TD_C == Zero))
                        {
                            Return (Zero)
                        }

                        Local0 = ((Timer - TD_C) / 0x2710)
                        Local1 = (TD_D + VRRD) /* External reference */
                        If ((Local0 < Local1))
                        {
                            Sleep ((Local1 - Local0))
                        }
                    }

                    Method (PS3X, 0, Serialized)
                    {
                        ADBG (Concatenate (TD_N, " D3"))
                    }

                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If ((_STA () == 0x0F))
                        {
                            Return (TD_P) /* \_SB_.PC00.I2C4.TPL1.TD_P */
                        }
                        Else
                        {
                            Return (Package (0x00){})
                        }
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If ((_STA () == 0x0F))
                        {
                            Return (TD_P) /* \_SB_.PC00.I2C4.TPL1.TD_P */
                        }
                        Else
                        {
                            Return (Package (0x00){})
                        }
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        PS0X ()
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        PS3X ()
                    }
                }
            }
        }
    }

    Scope (\_SB.PC00.I2C5)
    {
        Name (ONTM, Zero)
        Name (TPPE, Zero)
        Name (TPPR, Zero)
        Name (TPIP, Zero)
        Name (TPEP, Zero)
        Name (TPRP, Zero)
        Name (TPI2, Zero)
        TPPE = T1PE /* External reference */
        TPPR = T1PR /* External reference */
        TPIP = T1IP /* External reference */
        TPEP = T1EP /* External reference */
        TPRP = T1RP /* External reference */
        TPI2 = T1GI /* External reference */
        If ((TPLT != Zero))
        {
            If ((TPLS == One))
            {
                Method (PS0X, 0, Serialized)
                {
                    ADBG (Concatenate ("_PS0 I2C controller= ", ToHexString (I2CI)))
                }

                Method (PS3X, 0, Serialized)
                {
                    ADBG (Concatenate ("_PS3 I2C controller= ", ToHexString (I2CI)))
                }

                If ((TPLT != Zero))
                {
                    PowerResource (PTPL, 0x00, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((\_SB.GGOV (TPPE) == One))
                            {
                                ADBG (Concatenate ("TPL _STA ON I2C controller= ", ToHexString (I2CI)))
                                Return (One)
                            }
                            Else
                            {
                                ADBG (Concatenate ("TPL _STA OFF I2C controller= ", ToHexString (I2CI)))
                                Return (Zero)
                            }
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                            ADBG (Concatenate ("Touch PWR ON I2C controller= ", ToHexString (I2CI)))
                            \_SB.SGOV (TPPE, TPEP)
                            Sleep (0x02)
                            \_SB.SGOV (TPPR, TPRP)
                            ONTM = Timer
                            \_SB.SGRA (TPI2, TPIP)
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                            ADBG (Concatenate ("Touch PWR OFF I2C controller= ", ToHexString (I2CI)))
                            Local0 = (TPIP ^ One)
                            \_SB.SGRA (TPI2, Local0)
                            Local0 = (TPRP ^ One)
                            \_SB.SGOV (TPPR, Local0)
                            Sleep (0x03)
                            Local0 = (TPEP ^ One)
                            \_SB.SGOV (TPPE, Local0)
                            ONTM = Zero
                        }
                    }
                }

                Scope (TPL1)
                {
                    Name (TD_P, Package (0x01)
                    {
                        \_SB.PC00.I2C5.PTPL
                    })
                    Alias (\_SB.PC00.I2C5.ONTM, TD_C)
                    Name (TD_N, "TPL1")
                    Alias (IC1D, TD_D)
                    Method (PS0X, 0, Serialized)
                    {
                        ADBG (Concatenate (TD_N, " D0"))
                        If ((TD_C == Zero))
                        {
                            Return (Zero)
                        }

                        Local0 = ((Timer - TD_C) / 0x2710)
                        Local1 = (TD_D + VRRD) /* External reference */
                        If ((Local0 < Local1))
                        {
                            Sleep ((Local1 - Local0))
                        }
                    }

                    Method (PS3X, 0, Serialized)
                    {
                        ADBG (Concatenate (TD_N, " D3"))
                    }

                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If ((_STA () == 0x0F))
                        {
                            Return (TD_P) /* \_SB_.PC00.I2C5.TPL1.TD_P */
                        }
                        Else
                        {
                            Return (Package (0x00){})
                        }
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If ((_STA () == 0x0F))
                        {
                            Return (TD_P) /* \_SB_.PC00.I2C5.TPL1.TD_P */
                        }
                        Else
                        {
                            Return (Package (0x00){})
                        }
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        PS0X ()
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        PS3X ()
                    }
                }
            }
        }
    }

    Scope (\_SB.PC00)
    {
        PowerResource (PAUD, 0x00, 0x0000)
        {
            Name (PSTA, One)
            Name (ONTM, Zero)
            Name (_STA, One)  // _STA: Status
            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                ADBG ("Audio Codec LON")
                _STA = One
                PUAM ()
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                ADBG ("Audio Codec LOFF")
                _STA = Zero
                PUAM ()
            }

            Method (PUAM, 0, Serialized)
            {
                If (((^_STA == Zero) && (\UAMS != Zero)))
                {
                    ADBG ("PAUD-PUAM OFF")
                }
                Else
                {
                    ADBG ("PAUD-PUAM ON")
                    If ((^PSTA != One))
                    {
                        ^PSTA = One
                        ^ONTM = Timer
                        ADBG ("Audio Codec ON")
                    }
                }
            }
        }
    }

    If ((\_SB.PC00.HDAS.VDID != 0xFFFFFFFF))
    {
        Scope (\_SB.PC00.HDAS)
        {
            Method (PS0X, 0, Serialized)
            {
                ADBG ("HDAS.PS0X")
                If ((\_SB.PC00.PAUD.ONTM == Zero))
                {
                    Return (Zero)
                }

                Local0 = ((Timer - \_SB.PC00.PAUD.ONTM) / 0x2710)
                Local1 = (AUDD + VRRD) /* External reference */
                If ((Local0 < Local1))
                {
                    Sleep ((Local1 - Local0))
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                \_SB.PC00.PAUD
            })
        }
    }

    Scope (\_GPE)
    {
        Method (_L0C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            ADBG (" _L0C WLAN Event")
            \_SB.SHPO (WLWK, One)
            Notify (\_SB.PC00.RP08, 0x02) // Device Wake
        }

        Method (AL6F, 0, NotSerialized)
        {
            ADBG ("AL6F Start")
            If (\_SB.ISME (WWKP))
            {
                ADBG ("AL6F WWAN")
                \_SB.SHPO (WWKP, One)
                Notify (\_SB.PC00.RP07, 0x02) // Device Wake
                \_SB.CAGS (WWKP)
            }

            If (\_SB.ISME (P3WG))
            {
                ADBG ("AL6F X1 PCIe slot")
                \_SB.SHPO (P3WG, One)
                Notify (\_SB.PC00.RP06, 0x02) // Device Wake
                \_SB.CAGS (P3WG)
            }

            If (\_SB.ISME (P4WG))
            {
                ADBG ("AL6F X8 PCIe slot")
                \_SB.SHPO (P4WG, One)
                Notify (\_SB.PC00.RP12, 0x02) // Device Wake
                \_SB.CAGS (P4WG)
            }

            ADBG ("AL6F End")
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "CpuRef", "CpuSsdt", 0x00003000)
{
    External (_SB_.OSCP, IntObj)
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)
    External (_SB_.PR24, DeviceObj)
    External (_SB_.PR25, DeviceObj)
    External (_SB_.PR26, DeviceObj)
    External (_SB_.PR27, DeviceObj)
    External (_SB_.PR28, DeviceObj)
    External (_SB_.PR29, DeviceObj)
    External (_SB_.PR30, DeviceObj)
    External (_SB_.PR31, DeviceObj)
    External (_SB_.PR32, DeviceObj)
    External (_SB_.PR33, DeviceObj)
    External (_SB_.PR34, DeviceObj)
    External (_SB_.PR35, DeviceObj)
    External (_SB_.PR36, DeviceObj)
    External (_SB_.PR37, DeviceObj)
    External (_SB_.PR38, DeviceObj)
    External (_SB_.PR39, DeviceObj)
    External (_SB_.PR40, DeviceObj)
    External (_SB_.PR41, DeviceObj)
    External (_SB_.PR42, DeviceObj)
    External (_SB_.PR43, DeviceObj)
    External (_SB_.PR44, DeviceObj)
    External (_SB_.PR45, DeviceObj)
    External (_SB_.PR46, DeviceObj)
    External (_SB_.PR47, DeviceObj)
    External (_SB_.PR48, DeviceObj)
    External (_SB_.PR49, DeviceObj)
    External (_SB_.PR50, DeviceObj)
    External (_SB_.PR51, DeviceObj)
    External (_SB_.PR52, DeviceObj)
    External (_SB_.PR53, DeviceObj)
    External (_SB_.PR54, DeviceObj)
    External (_SB_.PR55, DeviceObj)
    External (_SB_.PR56, DeviceObj)
    External (_SB_.PR57, DeviceObj)
    External (_SB_.PR58, DeviceObj)
    External (_SB_.PR59, DeviceObj)
    External (_SB_.PR60, DeviceObj)
    External (_SB_.PR61, DeviceObj)
    External (_SB_.PR62, DeviceObj)
    External (_SB_.PR63, DeviceObj)
    External (OSYS, UnknownObj)

    Scope (\)
    {
        Name (\PF00, 0x80000000)
        Name (\PF01, 0x80000000)
        Name (\PF02, 0x80000000)
        Name (\PF03, 0x80000000)
        Name (\PF04, 0x80000000)
        Name (\PF05, 0x80000000)
        Name (\PF06, 0x80000000)
        Name (\PF07, 0x80000000)
        Name (\PF08, 0x80000000)
        Name (\PF09, 0x80000000)
        Name (\PF10, 0x80000000)
        Name (\PF11, 0x80000000)
        Name (\PF12, 0x80000000)
        Name (\PF13, 0x80000000)
        Name (\PF14, 0x80000000)
        Name (\PF15, 0x80000000)
        Name (\PF16, 0x80000000)
        Name (\PF17, 0x80000000)
        Name (\PF18, 0x80000000)
        Name (\PF19, 0x80000000)
        Name (\PF20, 0x80000000)
        Name (\PF21, 0x80000000)
        Name (\PF22, 0x80000000)
        Name (\PF23, 0x80000000)
        Name (\PF24, 0x80000000)
        Name (\PF25, 0x80000000)
        Name (\PF26, 0x80000000)
        Name (\PF27, 0x80000000)
        Name (\PF28, 0x80000000)
        Name (\PF29, 0x80000000)
        Name (\PF30, 0x80000000)
        Name (\PF31, 0x80000000)
        Name (\PF32, 0x80000000)
        Name (\PF33, 0x80000000)
        Name (\PF34, 0x80000000)
        Name (\PF35, 0x80000000)
        Name (\PF36, 0x80000000)
        Name (\PF37, 0x80000000)
        Name (\PF38, 0x80000000)
        Name (\PF39, 0x80000000)
        Name (\PF40, 0x80000000)
        Name (\PF41, 0x80000000)
        Name (\PF42, 0x80000000)
        Name (\PF43, 0x80000000)
        Name (\PF44, 0x80000000)
        Name (\PF45, 0x80000000)
        Name (\PF46, 0x80000000)
        Name (\PF47, 0x80000000)
        Name (\PF48, 0x80000000)
        Name (\PF49, 0x80000000)
        Name (\PF50, 0x80000000)
        Name (\PF51, 0x80000000)
        Name (\PF52, 0x80000000)
        Name (\PF53, 0x80000000)
        Name (\PF54, 0x80000000)
        Name (\PF55, 0x80000000)
        Name (\PF56, 0x80000000)
        Name (\PF57, 0x80000000)
        Name (\PF58, 0x80000000)
        Name (\PF59, 0x80000000)
        Name (\PF60, 0x80000000)
        Name (\PF61, 0x80000000)
        Name (\PF62, 0x80000000)
        Name (\PF63, 0x80000000)
    }

    Scope (\_SB)
    {
        Name (CTPC, Zero)
        OperationRegion (PNVS, SystemMemory, 0x658F8000, 0x0126)
        Field (PNVS, AnyAcc, Lock, Preserve)
        {
            PGRV,   8, 
            CFGD,   32, 
            Offset (0x06), 
            ACRT,   8, 
            APSV,   8, 
            AAC0,   8, 
            CPID,   32, 
            CPPC,   8, 
            CLVL,   8, 
            CBMI,   8, 
            PL10,   16, 
            PL11,   16, 
            PL12,   16, 
            PL20,   16, 
            PL21,   16, 
            PL22,   16, 
            PLW0,   8, 
            PLW1,   8, 
            PLW2,   8, 
            CTC0,   8, 
            CTC1,   8, 
            CTC2,   8, 
            TAR0,   8, 
            TAR1,   8, 
            TAR2,   8, 
            PPC0,   8, 
            PPC1,   8, 
            PPC2,   8, 
            Offset (0x29), 
            C6MW,   8, 
            C7MW,   8, 
            CDMW,   8, 
            Offset (0x2E), 
            C6LT,   16, 
            C7LT,   16, 
            CDLT,   16, 
            CDLV,   16, 
            CDPW,   16, 
            MPMF,   8, 
            HWPV,   8, 
            Offset (0x57), 
            OBIN,   8, 
            HWPE,   8, 
            HTRO,   8, 
            CM00,   8, 
            CM01,   8, 
            CM02,   8, 
            CM03,   8, 
            CM04,   8, 
            CM05,   8, 
            CM06,   8, 
            CM07,   8, 
            CM08,   8, 
            CM09,   8, 
            CM10,   8, 
            CM11,   8, 
            CM12,   8, 
            CM13,   8, 
            CM14,   8, 
            CM15,   8, 
            CM16,   8, 
            CM17,   8, 
            CM18,   8, 
            CM19,   8, 
            CM20,   8, 
            CM21,   8, 
            CM22,   8, 
            CM23,   8, 
            CM24,   8, 
            CM25,   8, 
            CM26,   8, 
            CM27,   8, 
            CM28,   8, 
            CM29,   8, 
            CM30,   8, 
            CM31,   8, 
            CM32,   8, 
            CM33,   8, 
            CM34,   8, 
            CM35,   8, 
            CM36,   8, 
            CM37,   8, 
            CM38,   8, 
            CM39,   8, 
            CM40,   8, 
            CM41,   8, 
            CM42,   8, 
            CM43,   8, 
            CM44,   8, 
            CM45,   8, 
            CM46,   8, 
            CM47,   8, 
            CM48,   8, 
            CM49,   8, 
            CM50,   8, 
            CM51,   8, 
            CM52,   8, 
            CM53,   8, 
            CM54,   8, 
            CM55,   8, 
            CM56,   8, 
            CM57,   8, 
            CM58,   8, 
            CM59,   8, 
            CM60,   8, 
            CM61,   8, 
            CM62,   8, 
            CM63,   8, 
            CORE,   64, 
            P100,   8, 
            P101,   8, 
            P102,   8, 
            P103,   8, 
            P104,   8, 
            P105,   8, 
            P106,   8, 
            P107,   8, 
            P108,   8, 
            P109,   8, 
            P110,   8, 
            P111,   8, 
            P112,   8, 
            P113,   8, 
            P114,   8, 
            P115,   8, 
            P116,   8, 
            P117,   8, 
            P118,   8, 
            P119,   8, 
            P120,   8, 
            P121,   8, 
            P122,   8, 
            P123,   8, 
            P124,   8, 
            P125,   8, 
            P126,   8, 
            P127,   8, 
            P128,   8, 
            P129,   8, 
            P130,   8, 
            P131,   8, 
            P132,   8, 
            P133,   8, 
            P134,   8, 
            P135,   8, 
            P136,   8, 
            P137,   8, 
            P138,   8, 
            P139,   8, 
            P140,   8, 
            P141,   8, 
            P142,   8, 
            P143,   8, 
            P144,   8, 
            P145,   8, 
            P146,   8, 
            P147,   8, 
            P148,   8, 
            P149,   8, 
            P150,   8, 
            P151,   8, 
            P152,   8, 
            P153,   8, 
            P154,   8, 
            P155,   8, 
            P156,   8, 
            P157,   8, 
            P158,   8, 
            P159,   8, 
            P160,   8, 
            P161,   8, 
            P162,   8, 
            P163,   8, 
            IS00,   8, 
            IS01,   8, 
            IS02,   8, 
            IS03,   8, 
            IS04,   8, 
            IS05,   8, 
            IS06,   8, 
            IS07,   8, 
            IS08,   8, 
            IS09,   8, 
            IS10,   8, 
            IS11,   8, 
            IS12,   8, 
            IS13,   8, 
            IS14,   8, 
            IS15,   8, 
            IS16,   8, 
            IS17,   8, 
            IS18,   8, 
            IS19,   8, 
            IS20,   8, 
            IS21,   8, 
            IS22,   8, 
            IS23,   8, 
            IS24,   8, 
            IS25,   8, 
            IS26,   8, 
            IS27,   8, 
            IS28,   8, 
            IS29,   8, 
            IS30,   8, 
            IS31,   8, 
            IS32,   8, 
            IS33,   8, 
            IS34,   8, 
            IS35,   8, 
            IS36,   8, 
            IS37,   8, 
            IS38,   8, 
            IS39,   8, 
            IS40,   8, 
            IS41,   8, 
            IS42,   8, 
            IS43,   8, 
            IS44,   8, 
            IS45,   8, 
            IS46,   8, 
            IS47,   8, 
            IS48,   8, 
            IS49,   8, 
            IS50,   8, 
            IS51,   8, 
            IS52,   8, 
            IS53,   8, 
            IS54,   8, 
            IS55,   8, 
            IS56,   8, 
            IS57,   8, 
            IS58,   8, 
            IS59,   8, 
            IS60,   8, 
            IS61,   8, 
            IS62,   8, 
            IS63,   8, 
            MXP1,   8, 
            BSFQ,   16, 
            RPEF,   8
        }

        OperationRegion (BGNV, SystemMemory, 0xFFFF0000, 0xAA55)
        Field (BGNV, AnyAcc, Lock, Preserve)
        {
            BGMA,   64, 
            BGMS,   8, 
            BGIA,   8
        }
    }

    Scope (\_SB.PR00)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (CPDC, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Local3 = Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                           // ....
                }
            Concatenate (Local3, TEMP, Local2)
            Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2))
        }

        Method (COSC, 4, NotSerialized)
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Local0 = ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */
            CreateDWordField (Local0, Zero, EID0)
            CreateDWordField (Local0, 0x04, EID1)
            CreateDWordField (Local0, 0x08, EID2)
            CreateDWordField (Local0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            Return (Arg3)
        }

        Method (GCAP, 1, Serialized)
        {
            CreateDWordField (Arg0, Zero, STS0)
            CreateDWordField (Arg0, 0x04, CAP0)
            If (((STS0 == 0x06) || (STS0 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS0 & One))
            {
                CAP0 &= 0x3BFF
                Return (Zero)
            }

            PF00 = ((PF00 & 0x7FFFFFFF) | CAP0) /* \_SB_.PR00.GCAP.CAP0 */
            If ((OSYS >= 0x07DF))
            {
                If ((\_SB.OSCP & 0x20))
                {
                    If (!(\_SB.OSCP & 0x40))
                    {
                        HWPV = Zero
                    }
                }

                If ((\_SB.OSCP & 0x40))
                {
                    HWPV = 0x02
                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PR01)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST01)
            CreateDWordField (Arg0, 0x04, CP01)
            If (((ST01 == 0x06) || (ST01 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST01 & One))
            {
                CP01 &= 0x3BFF
                Return (Zero)
            }

            PF01 = ((PF01 & 0x7FFFFFFF) | CP01) /* \_SB_.PR01.GCAP.CP01 */
            PF00 = PF01 /* \PF01 */
        }
    }

    If (CondRefOf (\_SB.PR02))
    {
        Scope (\_SB.PR02)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST02)
                CreateDWordField (Arg0, 0x04, CP02)
                If (((ST02 == 0x06) || (ST02 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST02 & One))
                {
                    CP02 &= 0x3BFF
                    Return (Zero)
                }

                PF02 = ((PF02 & 0x7FFFFFFF) | CP02) /* \_SB_.PR02.GCAP.CP02 */
                PF00 = PF02 /* \PF02 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR03))
    {
        Scope (\_SB.PR03)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST03)
                CreateDWordField (Arg0, 0x04, CP03)
                If (((ST03 == 0x06) || (ST03 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST03 & One))
                {
                    CP03 &= 0x3BFF
                    Return (Zero)
                }

                PF03 = ((PF03 & 0x7FFFFFFF) | CP03) /* \_SB_.PR03.GCAP.CP03 */
                PF00 = PF03 /* \PF03 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR04))
    {
        Scope (\_SB.PR04)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST04)
                CreateDWordField (Arg0, 0x04, CP04)
                If (((ST04 == 0x06) || (ST04 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST04 & One))
                {
                    CP04 &= 0x3BFF
                    Return (Zero)
                }

                PF04 = ((PF04 & 0x7FFFFFFF) | CP04) /* \_SB_.PR04.GCAP.CP04 */
                PF00 = PF04 /* \PF04 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR05))
    {
        Scope (\_SB.PR05)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST05)
                CreateDWordField (Arg0, 0x04, CP05)
                If (((ST05 == 0x06) || (ST05 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST05 & One))
                {
                    CP05 &= 0x3BFF
                    Return (Zero)
                }

                PF05 = ((PF05 & 0x7FFFFFFF) | CP05) /* \_SB_.PR05.GCAP.CP05 */
                PF00 = PF05 /* \PF05 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR06))
    {
        Scope (\_SB.PR06)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST06)
                CreateDWordField (Arg0, 0x04, CP06)
                If (((ST06 == 0x06) || (ST06 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST06 & One))
                {
                    CP06 &= 0x3BFF
                    Return (Zero)
                }

                PF06 = ((PF06 & 0x7FFFFFFF) | CP06) /* \_SB_.PR06.GCAP.CP06 */
                PF00 = PF06 /* \PF06 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR07))
    {
        Scope (\_SB.PR07)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST07)
                CreateDWordField (Arg0, 0x04, CP07)
                If (((ST07 == 0x06) || (ST07 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST07 & One))
                {
                    CP07 &= 0x3BFF
                    Return (Zero)
                }

                PF07 = ((PF07 & 0x7FFFFFFF) | CP07) /* \_SB_.PR07.GCAP.CP07 */
                PF00 = PF07 /* \PF07 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR08))
    {
        Scope (\_SB.PR08)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST08)
                CreateDWordField (Arg0, 0x04, CP08)
                If (((ST08 == 0x06) || (ST08 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST08 & One))
                {
                    CP08 &= 0x3BFF
                    Return (Zero)
                }

                PF08 = ((PF08 & 0x7FFFFFFF) | CP08) /* \_SB_.PR08.GCAP.CP08 */
                PF00 = PF08 /* \PF08 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR09))
    {
        Scope (\_SB.PR09)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST09)
                CreateDWordField (Arg0, 0x04, CP09)
                If (((ST09 == 0x06) || (ST09 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST09 & One))
                {
                    CP09 &= 0x3BFF
                    Return (Zero)
                }

                PF09 = ((PF09 & 0x7FFFFFFF) | CP09) /* \_SB_.PR09.GCAP.CP09 */
                PF00 = PF09 /* \PF09 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR10))
    {
        Scope (\_SB.PR10)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST10)
                CreateDWordField (Arg0, 0x04, CP10)
                If (((ST10 == 0x06) || (ST10 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST10 & One))
                {
                    CP10 &= 0x3BFF
                    Return (Zero)
                }

                PF10 = ((PF10 & 0x7FFFFFFF) | CP10) /* \_SB_.PR10.GCAP.CP10 */
                PF00 = PF10 /* \PF10 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR11))
    {
        Scope (\_SB.PR11)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST11)
                CreateDWordField (Arg0, 0x04, CP11)
                If (((ST11 == 0x06) || (ST11 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST11 & One))
                {
                    CP11 &= 0x3BFF
                    Return (Zero)
                }

                PF11 = ((PF11 & 0x7FFFFFFF) | CP11) /* \_SB_.PR11.GCAP.CP11 */
                PF00 = PF11 /* \PF11 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR12))
    {
        Scope (\_SB.PR12)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST12)
                CreateDWordField (Arg0, 0x04, CP12)
                If (((ST12 == 0x06) || (ST12 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST12 & One))
                {
                    CP12 &= 0x3BFF
                    Return (Zero)
                }

                PF12 = ((PF12 & 0x7FFFFFFF) | CP12) /* \_SB_.PR12.GCAP.CP12 */
                PF00 = PF12 /* \PF12 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR13))
    {
        Scope (\_SB.PR13)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST13)
                CreateDWordField (Arg0, 0x04, CP13)
                If (((ST13 == 0x06) || (ST13 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST13 & One))
                {
                    CP13 &= 0x3BFF
                    Return (Zero)
                }

                PF13 = ((PF13 & 0x7FFFFFFF) | CP13) /* \_SB_.PR13.GCAP.CP13 */
                PF00 = PF13 /* \PF13 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR14))
    {
        Scope (\_SB.PR14)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST14)
                CreateDWordField (Arg0, 0x04, CP14)
                If (((ST14 == 0x06) || (ST14 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST14 & One))
                {
                    CP14 &= 0x3BFF
                    Return (Zero)
                }

                PF14 = ((PF14 & 0x7FFFFFFF) | CP14) /* \_SB_.PR14.GCAP.CP14 */
                PF00 = PF14 /* \PF14 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR15))
    {
        Scope (\_SB.PR15)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST15)
                CreateDWordField (Arg0, 0x04, CP15)
                If (((ST15 == 0x06) || (ST15 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST15 & One))
                {
                    CP15 &= 0x3BFF
                    Return (Zero)
                }

                PF15 = ((PF15 & 0x7FFFFFFF) | CP15) /* \_SB_.PR15.GCAP.CP15 */
                PF00 = PF15 /* \PF15 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR16))
    {
        Scope (\_SB.PR16)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST16)
                CreateDWordField (Arg0, 0x04, CP16)
                If (((ST16 == 0x06) || (ST16 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST16 & One))
                {
                    CP16 &= 0x3BFF
                    Return (Zero)
                }

                PF16 = ((PF16 & 0x7FFFFFFF) | CP16) /* \_SB_.PR16.GCAP.CP16 */
                PF00 = PF16 /* \PF16 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR17))
    {
        Scope (\_SB.PR17)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST17)
                CreateDWordField (Arg0, 0x04, CP17)
                If (((ST17 == 0x06) || (ST17 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST17 & One))
                {
                    CP17 &= 0x3BFF
                    Return (Zero)
                }

                PF17 = ((PF17 & 0x7FFFFFFF) | CP17) /* \_SB_.PR17.GCAP.CP17 */
                PF00 = PF17 /* \PF17 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR18))
    {
        Scope (\_SB.PR18)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST18)
                CreateDWordField (Arg0, 0x04, CP18)
                If (((ST18 == 0x06) || (ST18 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST18 & One))
                {
                    CP18 &= 0x3BFF
                    Return (Zero)
                }

                PF18 = ((PF18 & 0x7FFFFFFF) | CP18) /* \_SB_.PR18.GCAP.CP18 */
                PF00 = PF18 /* \PF18 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR19))
    {
        Scope (\_SB.PR19)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST19)
                CreateDWordField (Arg0, 0x04, CP19)
                If (((ST19 == 0x06) || (ST19 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST19 & One))
                {
                    CP19 &= 0x3BFF
                    Return (Zero)
                }

                PF19 = ((PF19 & 0x7FFFFFFF) | CP19) /* \_SB_.PR19.GCAP.CP19 */
                PF00 = PF19 /* \PF19 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR20))
    {
        Scope (\_SB.PR20)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST20)
                CreateDWordField (Arg0, 0x04, CP20)
                If (((ST20 == 0x06) || (ST20 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST20 & One))
                {
                    CP20 &= 0x3BFF
                    Return (Zero)
                }

                PF20 = ((PF20 & 0x7FFFFFFF) | CP20) /* \_SB_.PR20.GCAP.CP20 */
                PF00 = PF20 /* \PF20 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR21))
    {
        Scope (\_SB.PR21)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST21)
                CreateDWordField (Arg0, 0x04, CP21)
                If (((ST21 == 0x06) || (ST21 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST21 & One))
                {
                    CP21 &= 0x3BFF
                    Return (Zero)
                }

                PF21 = ((PF21 & 0x7FFFFFFF) | CP21) /* \_SB_.PR21.GCAP.CP21 */
                PF00 = PF21 /* \PF21 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR22))
    {
        Scope (\_SB.PR22)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST22)
                CreateDWordField (Arg0, 0x04, CP22)
                If (((ST22 == 0x06) || (ST22 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST22 & One))
                {
                    CP22 &= 0x3BFF
                    Return (Zero)
                }

                PF22 = ((PF22 & 0x7FFFFFFF) | CP22) /* \_SB_.PR22.GCAP.CP22 */
                PF00 = PF22 /* \PF22 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR23))
    {
        Scope (\_SB.PR23)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST23)
                CreateDWordField (Arg0, 0x04, CP23)
                If (((ST23 == 0x06) || (ST23 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST23 & One))
                {
                    CP23 &= 0x3BFF
                    Return (Zero)
                }

                PF23 = ((PF23 & 0x7FFFFFFF) | CP23) /* \_SB_.PR23.GCAP.CP23 */
                PF00 = PF23 /* \PF23 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR24))
    {
        Scope (\_SB.PR24)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST24)
                CreateDWordField (Arg0, 0x04, CP24)
                If (((ST24 == 0x06) || (ST24 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST24 & One))
                {
                    CP24 &= 0x3BFF
                    Return (Zero)
                }

                PF24 = ((PF24 & 0x7FFFFFFF) | CP24) /* \_SB_.PR24.GCAP.CP24 */
                PF00 = PF24 /* \PF24 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR25))
    {
        Scope (\_SB.PR25)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST25)
                CreateDWordField (Arg0, 0x04, CP25)
                If (((ST25 == 0x06) || (ST25 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST25 & One))
                {
                    CP25 &= 0x3BFF
                    Return (Zero)
                }

                PF25 = ((PF25 & 0x7FFFFFFF) | CP25) /* \_SB_.PR25.GCAP.CP25 */
                PF00 = PF25 /* \PF25 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR26))
    {
        Scope (\_SB.PR26)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST26)
                CreateDWordField (Arg0, 0x04, CP26)
                If (((ST26 == 0x06) || (ST26 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST26 & One))
                {
                    CP26 &= 0x3BFF
                    Return (Zero)
                }

                PF26 = ((PF26 & 0x7FFFFFFF) | CP26) /* \_SB_.PR26.GCAP.CP26 */
                PF00 = PF26 /* \PF26 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR27))
    {
        Scope (\_SB.PR27)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST27)
                CreateDWordField (Arg0, 0x04, CP27)
                If (((ST27 == 0x06) || (ST27 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST27 & One))
                {
                    CP27 &= 0x3BFF
                    Return (Zero)
                }

                PF27 = ((PF27 & 0x7FFFFFFF) | CP27) /* \_SB_.PR27.GCAP.CP27 */
                PF00 = PF27 /* \PF27 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR28))
    {
        Scope (\_SB.PR28)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST28)
                CreateDWordField (Arg0, 0x04, CP28)
                If (((ST28 == 0x06) || (ST28 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST28 & One))
                {
                    CP28 &= 0x3BFF
                    Return (Zero)
                }

                PF28 = ((PF28 & 0x7FFFFFFF) | CP28) /* \_SB_.PR28.GCAP.CP28 */
                PF00 = PF28 /* \PF28 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR29))
    {
        Scope (\_SB.PR29)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST29)
                CreateDWordField (Arg0, 0x04, CP29)
                If (((ST29 == 0x06) || (ST29 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST29 & One))
                {
                    CP29 &= 0x3BFF
                    Return (Zero)
                }

                PF29 = ((PF29 & 0x7FFFFFFF) | CP29) /* \_SB_.PR29.GCAP.CP29 */
                PF00 = PF29 /* \PF29 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR30))
    {
        Scope (\_SB.PR30)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST30)
                CreateDWordField (Arg0, 0x04, CP30)
                If (((ST30 == 0x06) || (ST30 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST30 & One))
                {
                    CP30 &= 0x3BFF
                    Return (Zero)
                }

                PF30 = ((PF30 & 0x7FFFFFFF) | CP30) /* \_SB_.PR30.GCAP.CP30 */
                PF00 = PF30 /* \PF30 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR31))
    {
        Scope (\_SB.PR31)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST31)
                CreateDWordField (Arg0, 0x04, CP31)
                If (((ST31 == 0x06) || (ST31 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST31 & One))
                {
                    CP31 &= 0x3BFF
                    Return (Zero)
                }

                PF31 = ((PF31 & 0x7FFFFFFF) | CP31) /* \_SB_.PR31.GCAP.CP31 */
                PF00 = PF31 /* \PF31 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR32))
    {
        Scope (\_SB.PR32)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST32)
                CreateDWordField (Arg0, 0x04, CP32)
                If (((ST32 == 0x06) || (ST32 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST32 & One))
                {
                    CP32 &= 0x3BFF
                    Return (Zero)
                }

                PF32 = ((PF32 & 0x7FFFFFFF) | CP32) /* \_SB_.PR32.GCAP.CP32 */
                PF00 = PF32 /* \PF32 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR33))
    {
        Scope (\_SB.PR33)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST33)
                CreateDWordField (Arg0, 0x04, CP33)
                If (((ST33 == 0x06) || (ST33 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST33 & One))
                {
                    CP33 &= 0x3BFF
                    Return (Zero)
                }

                PF33 = ((PF33 & 0x7FFFFFFF) | CP33) /* \_SB_.PR33.GCAP.CP33 */
                PF00 = PF33 /* \PF33 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR34))
    {
        Scope (\_SB.PR34)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST34)
                CreateDWordField (Arg0, 0x04, CP34)
                If (((ST34 == 0x06) || (ST34 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST34 & One))
                {
                    CP34 &= 0x3BFF
                    Return (Zero)
                }

                PF34 = ((PF34 & 0x7FFFFFFF) | CP34) /* \_SB_.PR34.GCAP.CP34 */
                PF00 = PF34 /* \PF34 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR35))
    {
        Scope (\_SB.PR35)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST35)
                CreateDWordField (Arg0, 0x04, CP35)
                If (((ST35 == 0x06) || (ST35 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST35 & One))
                {
                    CP35 &= 0x3BFF
                    Return (Zero)
                }

                PF35 = ((PF35 & 0x7FFFFFFF) | CP35) /* \_SB_.PR35.GCAP.CP35 */
                PF00 = PF35 /* \PF35 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR36))
    {
        Scope (\_SB.PR36)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST36)
                CreateDWordField (Arg0, 0x04, CP36)
                If (((ST36 == 0x06) || (ST36 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST36 & One))
                {
                    CP36 &= 0x3BFF
                    Return (Zero)
                }

                PF36 = ((PF36 & 0x7FFFFFFF) | CP36) /* \_SB_.PR36.GCAP.CP36 */
                PF00 = PF36 /* \PF36 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR37))
    {
        Scope (\_SB.PR37)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST37)
                CreateDWordField (Arg0, 0x04, CP37)
                If (((ST37 == 0x06) || (ST37 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST37 & One))
                {
                    CP37 &= 0x3BFF
                    Return (Zero)
                }

                PF37 = ((PF37 & 0x7FFFFFFF) | CP37) /* \_SB_.PR37.GCAP.CP37 */
                PF00 = PF37 /* \PF37 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR38))
    {
        Scope (\_SB.PR38)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST38)
                CreateDWordField (Arg0, 0x04, CP38)
                If (((ST38 == 0x06) || (ST38 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST38 & One))
                {
                    CP38 &= 0x3BFF
                    Return (Zero)
                }

                PF38 = ((PF38 & 0x7FFFFFFF) | CP38) /* \_SB_.PR38.GCAP.CP38 */
                PF00 = PF38 /* \PF38 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR39))
    {
        Scope (\_SB.PR39)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST39)
                CreateDWordField (Arg0, 0x04, CP39)
                If (((ST39 == 0x06) || (ST39 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST39 & One))
                {
                    CP39 &= 0x3BFF
                    Return (Zero)
                }

                PF39 = ((PF39 & 0x7FFFFFFF) | CP39) /* \_SB_.PR39.GCAP.CP39 */
                PF00 = PF39 /* \PF39 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR40))
    {
        Scope (\_SB.PR40)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST40)
                CreateDWordField (Arg0, 0x04, CP40)
                If (((ST40 == 0x06) || (ST40 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST40 & One))
                {
                    CP40 &= 0x3BFF
                    Return (Zero)
                }

                PF40 = ((PF40 & 0x7FFFFFFF) | CP40) /* \_SB_.PR40.GCAP.CP40 */
                PF00 = PF40 /* \PF40 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR41))
    {
        Scope (\_SB.PR41)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST41)
                CreateDWordField (Arg0, 0x04, CP41)
                If (((ST41 == 0x06) || (ST41 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST41 & One))
                {
                    CP41 &= 0x3BFF
                    Return (Zero)
                }

                PF41 = ((PF41 & 0x7FFFFFFF) | CP41) /* \_SB_.PR41.GCAP.CP41 */
                PF00 = PF41 /* \PF41 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR42))
    {
        Scope (\_SB.PR42)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST42)
                CreateDWordField (Arg0, 0x04, CP42)
                If (((ST42 == 0x06) || (ST42 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST42 & One))
                {
                    CP42 &= 0x3BFF
                    Return (Zero)
                }

                PF42 = ((PF42 & 0x7FFFFFFF) | CP42) /* \_SB_.PR42.GCAP.CP42 */
                PF00 = PF42 /* \PF42 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR43))
    {
        Scope (\_SB.PR43)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST43)
                CreateDWordField (Arg0, 0x04, CP43)
                If (((ST43 == 0x06) || (ST43 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST43 & One))
                {
                    CP43 &= 0x3BFF
                    Return (Zero)
                }

                PF43 = ((PF43 & 0x7FFFFFFF) | CP43) /* \_SB_.PR43.GCAP.CP43 */
                PF00 = PF43 /* \PF43 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR44))
    {
        Scope (\_SB.PR44)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST44)
                CreateDWordField (Arg0, 0x04, CP44)
                If (((ST44 == 0x06) || (ST44 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST44 & One))
                {
                    CP44 &= 0x3BFF
                    Return (Zero)
                }

                PF44 = ((PF44 & 0x7FFFFFFF) | CP44) /* \_SB_.PR44.GCAP.CP44 */
                PF00 = PF44 /* \PF44 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR45))
    {
        Scope (\_SB.PR45)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST45)
                CreateDWordField (Arg0, 0x04, CP45)
                If (((ST45 == 0x06) || (ST45 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST45 & One))
                {
                    CP45 &= 0x3BFF
                    Return (Zero)
                }

                PF45 = ((PF45 & 0x7FFFFFFF) | CP45) /* \_SB_.PR45.GCAP.CP45 */
                PF00 = PF45 /* \PF45 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR46))
    {
        Scope (\_SB.PR46)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST46)
                CreateDWordField (Arg0, 0x04, CP46)
                If (((ST46 == 0x06) || (ST46 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST46 & One))
                {
                    CP46 &= 0x3BFF
                    Return (Zero)
                }

                PF46 = ((PF46 & 0x7FFFFFFF) | CP46) /* \_SB_.PR46.GCAP.CP46 */
                PF00 = PF46 /* \PF46 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR47))
    {
        Scope (\_SB.PR47)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST47)
                CreateDWordField (Arg0, 0x04, CP47)
                If (((ST47 == 0x06) || (ST47 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST47 & One))
                {
                    CP47 &= 0x3BFF
                    Return (Zero)
                }

                PF47 = ((PF47 & 0x7FFFFFFF) | CP47) /* \_SB_.PR47.GCAP.CP47 */
                PF00 = PF47 /* \PF47 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR48))
    {
        Scope (\_SB.PR48)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST48)
                CreateDWordField (Arg0, 0x04, CP48)
                If (((ST48 == 0x06) || (ST48 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST48 & One))
                {
                    CP48 &= 0x3BFF
                    Return (Zero)
                }

                PF48 = ((PF48 & 0x7FFFFFFF) | CP48) /* \_SB_.PR48.GCAP.CP48 */
                PF00 = PF48 /* \PF48 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR49))
    {
        Scope (\_SB.PR49)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST49)
                CreateDWordField (Arg0, 0x04, CP49)
                If (((ST49 == 0x06) || (ST49 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST49 & One))
                {
                    CP49 &= 0x3BFF
                    Return (Zero)
                }

                PF49 = ((PF49 & 0x7FFFFFFF) | CP49) /* \_SB_.PR49.GCAP.CP49 */
                PF00 = PF49 /* \PF49 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR50))
    {
        Scope (\_SB.PR50)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST50)
                CreateDWordField (Arg0, 0x04, CP50)
                If (((ST50 == 0x06) || (ST50 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST50 & One))
                {
                    CP50 &= 0x3BFF
                    Return (Zero)
                }

                PF50 = ((PF50 & 0x7FFFFFFF) | CP50) /* \_SB_.PR50.GCAP.CP50 */
                PF00 = PF50 /* \PF50 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR51))
    {
        Scope (\_SB.PR51)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST51)
                CreateDWordField (Arg0, 0x04, CP51)
                If (((ST51 == 0x06) || (ST51 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST51 & One))
                {
                    CP51 &= 0x3BFF
                    Return (Zero)
                }

                PF51 = ((PF51 & 0x7FFFFFFF) | CP51) /* \_SB_.PR51.GCAP.CP51 */
                PF00 = PF51 /* \PF51 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR52))
    {
        Scope (\_SB.PR52)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST52)
                CreateDWordField (Arg0, 0x04, CP52)
                If (((ST52 == 0x06) || (ST52 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST52 & One))
                {
                    CP52 &= 0x3BFF
                    Return (Zero)
                }

                PF52 = ((PF52 & 0x7FFFFFFF) | CP52) /* \_SB_.PR52.GCAP.CP52 */
                PF00 = PF52 /* \PF52 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR53))
    {
        Scope (\_SB.PR53)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST53)
                CreateDWordField (Arg0, 0x04, CP53)
                If (((ST53 == 0x06) || (ST53 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST53 & One))
                {
                    CP53 &= 0x3BFF
                    Return (Zero)
                }

                PF53 = ((PF53 & 0x7FFFFFFF) | CP53) /* \_SB_.PR53.GCAP.CP53 */
                PF00 = PF53 /* \PF53 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR54))
    {
        Scope (\_SB.PR54)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST54)
                CreateDWordField (Arg0, 0x04, CP54)
                If (((ST54 == 0x06) || (ST54 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST54 & One))
                {
                    CP54 &= 0x3BFF
                    Return (Zero)
                }

                PF54 = ((PF54 & 0x7FFFFFFF) | CP54) /* \_SB_.PR54.GCAP.CP54 */
                PF00 = PF54 /* \PF54 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR55))
    {
        Scope (\_SB.PR55)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST55)
                CreateDWordField (Arg0, 0x04, CP55)
                If (((ST55 == 0x06) || (ST55 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST55 & One))
                {
                    CP55 &= 0x3BFF
                    Return (Zero)
                }

                PF55 = ((PF55 & 0x7FFFFFFF) | CP55) /* \_SB_.PR55.GCAP.CP55 */
                PF00 = PF55 /* \PF55 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR56))
    {
        Scope (\_SB.PR56)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST56)
                CreateDWordField (Arg0, 0x04, CP56)
                If (((ST56 == 0x06) || (ST56 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST56 & One))
                {
                    CP56 &= 0x3BFF
                    Return (Zero)
                }

                PF56 = ((PF56 & 0x7FFFFFFF) | CP56) /* \_SB_.PR56.GCAP.CP56 */
                PF00 = PF56 /* \PF56 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR57))
    {
        Scope (\_SB.PR57)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST57)
                CreateDWordField (Arg0, 0x04, CP57)
                If (((ST57 == 0x06) || (ST57 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST57 & One))
                {
                    CP57 &= 0x3BFF
                    Return (Zero)
                }

                PF57 = ((PF57 & 0x7FFFFFFF) | CP57) /* \_SB_.PR57.GCAP.CP57 */
                PF00 = PF57 /* \PF57 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR58))
    {
        Scope (\_SB.PR58)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST58)
                CreateDWordField (Arg0, 0x04, CP58)
                If (((ST58 == 0x06) || (ST58 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST58 & One))
                {
                    CP58 &= 0x3BFF
                    Return (Zero)
                }

                PF58 = ((PF58 & 0x7FFFFFFF) | CP58) /* \_SB_.PR58.GCAP.CP58 */
                PF00 = PF58 /* \PF58 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR59))
    {
        Scope (\_SB.PR59)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST59)
                CreateDWordField (Arg0, 0x04, CP59)
                If (((ST59 == 0x06) || (ST59 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST59 & One))
                {
                    CP59 &= 0x3BFF
                    Return (Zero)
                }

                PF59 = ((PF59 & 0x7FFFFFFF) | CP59) /* \_SB_.PR59.GCAP.CP59 */
                PF00 = PF59 /* \PF59 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR60))
    {
        Scope (\_SB.PR60)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST60)
                CreateDWordField (Arg0, 0x04, CP60)
                If (((ST60 == 0x06) || (ST60 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST60 & One))
                {
                    CP60 &= 0x3BFF
                    Return (Zero)
                }

                PF60 = ((PF60 & 0x7FFFFFFF) | CP60) /* \_SB_.PR60.GCAP.CP60 */
                PF00 = PF60 /* \PF60 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR61))
    {
        Scope (\_SB.PR61)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST61)
                CreateDWordField (Arg0, 0x04, CP61)
                If (((ST61 == 0x06) || (ST61 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST61 & One))
                {
                    CP61 &= 0x3BFF
                    Return (Zero)
                }

                PF61 = ((PF61 & 0x7FFFFFFF) | CP61) /* \_SB_.PR61.GCAP.CP61 */
                PF00 = PF61 /* \PF61 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR62))
    {
        Scope (\_SB.PR62)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST62)
                CreateDWordField (Arg0, 0x04, CP62)
                If (((ST62 == 0x06) || (ST62 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST62 & One))
                {
                    CP62 &= 0x3BFF
                    Return (Zero)
                }

                PF62 = ((PF62 & 0x7FFFFFFF) | CP62) /* \_SB_.PR62.GCAP.CP62 */
                PF00 = PF62 /* \PF62 */
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PR63))
    {
        Scope (\_SB.PR63)
        {
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                Local0 = \_SB.PR00.CPDC (Arg0)
                GCAP (Local0)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
                GCAP (Local0)
                Return (Local0)
            }

            Method (GCAP, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ST63)
                CreateDWordField (Arg0, 0x04, CP63)
                If (((ST63 == 0x06) || (ST63 == 0x0A)))
                {
                    Return (Zero)
                }

                If ((ST63 & One))
                {
                    CP63 &= 0x3BFF
                    Return (Zero)
                }

                PF63 = ((PF63 & 0x7FFFFFFF) | CP63) /* \_SB_.PR63.GCAP.CP63 */
                PF00 = PF63 /* \PF63 */
                Return (Zero)
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "INTEL", "St00Ssdt", 0x00001000)
{
    External (_SB_.PC00.HDAS.IDA_.SNDW, DeviceObj)

    Scope (\_SB.PC00.HDAS.IDA.SNDW)
    {
        Device (SWD0)
        {
            Name (_ADR, 0x000030025D071101)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0F)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "intel-autonomous-clock-stop", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "INTEL ", "IgfxSsdt", 0x00003000)
{
    External (_SB_.GGOV, MethodObj)    // 1 Arguments
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.GFX0, DeviceObj)
    External (_SB_.PC00.GFX0.DSEN, UnknownObj)
    External (_SB_.PC00.GFX0.EDMX, UnknownObj)
    External (_SB_.PC00.GFX0.HDOS, MethodObj)    // 0 Arguments
    External (_SB_.PC00.GFX0.HNOT, MethodObj)    // 1 Arguments
    External (_SB_.PC00.GFX0.OSYS, IntObj)
    External (_SB_.PC00.LPCB.H_EC.ECWT, MethodObj)    // 2 Arguments
    External (_SB_.PC00.LPCB.H_EC.LID0, DeviceObj)
    External (_SB_.PC00.LPCB.H_EC.LSTE, UnknownObj)
    External (_SB_.PC00.MC__, DeviceObj)
    External (_SB_.PC00.PC2M, MethodObj)    // 2 Arguments
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (ADBG, MethodObj)    // 1 Arguments
    External (ASLB, UnknownObj)
    External (BRTL, UnknownObj)
    External (DID1, UnknownObj)
    External (DID2, UnknownObj)
    External (DID3, UnknownObj)
    External (DID4, UnknownObj)
    External (DID5, UnknownObj)
    External (DID6, UnknownObj)
    External (DID7, UnknownObj)
    External (DID8, UnknownObj)
    External (DID9, UnknownObj)
    External (DIDA, UnknownObj)
    External (DIDB, UnknownObj)
    External (DIDC, UnknownObj)
    External (DIDD, UnknownObj)
    External (DIDE, UnknownObj)
    External (DIDF, UnknownObj)
    External (DIDX, UnknownObj)
    External (DIDY, UnknownObj)
    External (ECON, IntObj)
    External (EDPV, UnknownObj)
    External (HGDT, UnknownObj)
    External (IPTP, UnknownObj)
    External (LIDS, UnknownObj)
    External (NDID, UnknownObj)
    External (NXD1, UnknownObj)
    External (NXD2, UnknownObj)
    External (NXD3, UnknownObj)
    External (NXD4, UnknownObj)
    External (NXD5, UnknownObj)
    External (NXD6, UnknownObj)
    External (NXD7, UnknownObj)
    External (NXD8, UnknownObj)
    External (NXDX, UnknownObj)
    External (NXDY, UnknownObj)
    External (PBCL, MethodObj)    // 0 Arguments
    External (PLD1, MethodObj)    // 0 Arguments
    External (PLD2, MethodObj)    // 0 Arguments

    Scope (\_SB.PC00.GFX0)
    {
        Name (DPLD, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x20, 0x03, 0xD0, 0x07,  // .... ...
                /* 0008 */  0x41, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01,  // A.......
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            }
        })
        Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
        {
            DSEN = (Arg0 & 0x07)
            If (((Arg0 & 0x03) == Zero))
            {
                If (CondRefOf (HDOS))
                {
                    HDOS ()
                }
            }
        }

        Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
        {
            NDID = 0x02
            If ((DIDL != Zero))
            {
                DID1 = SDDL (DIDL)
            }

            If ((DDL2 != Zero))
            {
                DID2 = SDDL (DDL2)
            }

            If ((DDL3 != Zero))
            {
                DID3 = SDDL (DDL3)
            }

            If ((DDL4 != Zero))
            {
                DID4 = SDDL (DDL4)
            }

            If ((DDL5 != Zero))
            {
                DID5 = SDDL (DDL5)
            }

            If ((DDL6 != Zero))
            {
                DID6 = SDDL (DDL6)
            }

            If ((DDL7 != Zero))
            {
                DID7 = SDDL (DDL7)
            }

            If ((DDL8 != Zero))
            {
                DID8 = SDDL (DDL8)
            }

            If ((DDL9 != Zero))
            {
                DID9 = SDDL (DDL9)
            }

            If ((DD10 != Zero))
            {
                DIDA = SDDL (DD10)
            }

            If ((DD11 != Zero))
            {
                DIDB = SDDL (DD11)
            }

            If ((DD12 != Zero))
            {
                DIDC = SDDL (DD12)
            }

            If ((DD13 != Zero))
            {
                DIDD = SDDL (DD13)
            }

            If ((DD14 != Zero))
            {
                DIDE = SDDL (DD14)
            }

            If ((DD15 != Zero))
            {
                DIDF = SDDL (DD15)
            }

            If ((NDID == One))
            {
                Name (TMP1, Package (0x01)
                {
                    0xFFFFFFFF
                })
                If ((IPTP == One))
                {
                    TMP1 [Zero] = 0x00023480
                }
                Else
                {
                    TMP1 [Zero] = (0x00010000 | DID1)
                }

                Return (TMP1) /* \_SB_.PC00.GFX0._DOD.TMP1 */
            }

            If ((NDID == 0x02))
            {
                Name (TMP2, Package (0x02)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP2 [Zero] = (0x00010000 | DID1)
                If ((IPTP == One))
                {
                    TMP2 [One] = 0x00023480
                }
                Else
                {
                    TMP2 [One] = (0x00010000 | DID2)
                }

                Return (TMP2) /* \_SB_.PC00.GFX0._DOD.TMP2 */
            }

            If ((NDID == 0x03))
            {
                Name (TMP3, Package (0x03)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP3 [Zero] = (0x00010000 | DID1)
                TMP3 [One] = (0x00010000 | DID2)
                If ((IPTP == One))
                {
                    TMP3 [0x02] = 0x00023480
                }
                Else
                {
                    TMP3 [0x02] = (0x00010000 | DID3)
                }

                Return (TMP3) /* \_SB_.PC00.GFX0._DOD.TMP3 */
            }

            If ((NDID == 0x04))
            {
                Name (TMP4, Package (0x04)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP4 [Zero] = (0x00010000 | DID1)
                TMP4 [One] = (0x00010000 | DID2)
                TMP4 [0x02] = (0x00010000 | DID3)
                If ((IPTP == One))
                {
                    TMP4 [0x03] = 0x00023480
                }
                Else
                {
                    TMP4 [0x03] = (0x00010000 | DID4)
                }

                Return (TMP4) /* \_SB_.PC00.GFX0._DOD.TMP4 */
            }

            If ((NDID == 0x05))
            {
                Name (TMP5, Package (0x05)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP5 [Zero] = (0x00010000 | DID1)
                TMP5 [One] = (0x00010000 | DID2)
                TMP5 [0x02] = (0x00010000 | DID3)
                TMP5 [0x03] = (0x00010000 | DID4)
                If ((IPTP == One))
                {
                    TMP5 [0x04] = 0x00023480
                }
                Else
                {
                    TMP5 [0x04] = (0x00010000 | DID5)
                }

                Return (TMP5) /* \_SB_.PC00.GFX0._DOD.TMP5 */
            }

            If ((NDID == 0x06))
            {
                Name (TMP6, Package (0x06)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP6 [Zero] = (0x00010000 | DID1)
                TMP6 [One] = (0x00010000 | DID2)
                TMP6 [0x02] = (0x00010000 | DID3)
                TMP6 [0x03] = (0x00010000 | DID4)
                TMP6 [0x04] = (0x00010000 | DID5)
                If ((IPTP == One))
                {
                    TMP6 [0x05] = 0x00023480
                }
                Else
                {
                    TMP6 [0x05] = (0x00010000 | DID6)
                }

                Return (TMP6) /* \_SB_.PC00.GFX0._DOD.TMP6 */
            }

            If ((NDID == 0x07))
            {
                Name (TMP7, Package (0x07)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP7 [Zero] = (0x00010000 | DID1)
                TMP7 [One] = (0x00010000 | DID2)
                TMP7 [0x02] = (0x00010000 | DID3)
                TMP7 [0x03] = (0x00010000 | DID4)
                TMP7 [0x04] = (0x00010000 | DID5)
                TMP7 [0x05] = (0x00010000 | DID6)
                If ((IPTP == One))
                {
                    TMP7 [0x06] = 0x00023480
                }
                Else
                {
                    TMP7 [0x06] = (0x00010000 | DID7)
                }

                Return (TMP7) /* \_SB_.PC00.GFX0._DOD.TMP7 */
            }

            If ((NDID == 0x08))
            {
                Name (TMP8, Package (0x08)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP8 [Zero] = (0x00010000 | DID1)
                TMP8 [One] = (0x00010000 | DID2)
                TMP8 [0x02] = (0x00010000 | DID3)
                TMP8 [0x03] = (0x00010000 | DID4)
                TMP8 [0x04] = (0x00010000 | DID5)
                TMP8 [0x05] = (0x00010000 | DID6)
                TMP8 [0x06] = (0x00010000 | DID7)
                If ((IPTP == One))
                {
                    TMP8 [0x07] = 0x00023480
                }
                Else
                {
                    TMP8 [0x07] = (0x00010000 | DID8)
                }

                Return (TMP8) /* \_SB_.PC00.GFX0._DOD.TMP8 */
            }

            If ((NDID == 0x09))
            {
                Name (TMP9, Package (0x09)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP9 [Zero] = (0x00010000 | DID1)
                TMP9 [One] = (0x00010000 | DID2)
                TMP9 [0x02] = (0x00010000 | DID3)
                TMP9 [0x03] = (0x00010000 | DID4)
                TMP9 [0x04] = (0x00010000 | DID5)
                TMP9 [0x05] = (0x00010000 | DID6)
                TMP9 [0x06] = (0x00010000 | DID7)
                TMP9 [0x07] = (0x00010000 | DID8)
                If ((IPTP == One))
                {
                    TMP9 [0x08] = 0x00023480
                }
                Else
                {
                    TMP9 [0x08] = (0x00010000 | DID9)
                }

                Return (TMP9) /* \_SB_.PC00.GFX0._DOD.TMP9 */
            }

            If ((NDID == 0x0A))
            {
                Name (TMPA, Package (0x0A)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPA [Zero] = (0x00010000 | DID1)
                TMPA [One] = (0x00010000 | DID2)
                TMPA [0x02] = (0x00010000 | DID3)
                TMPA [0x03] = (0x00010000 | DID4)
                TMPA [0x04] = (0x00010000 | DID5)
                TMPA [0x05] = (0x00010000 | DID6)
                TMPA [0x06] = (0x00010000 | DID7)
                TMPA [0x07] = (0x00010000 | DID8)
                TMPA [0x08] = (0x00010000 | DID9)
                If ((IPTP == One))
                {
                    TMPA [0x09] = 0x00023480
                }
                Else
                {
                    TMPA [0x09] = (0x00010000 | DIDA)
                }

                Return (TMPA) /* \_SB_.PC00.GFX0._DOD.TMPA */
            }

            If ((NDID == 0x0B))
            {
                Name (TMPB, Package (0x0B)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPB [Zero] = (0x00010000 | DID1)
                TMPB [One] = (0x00010000 | DID2)
                TMPB [0x02] = (0x00010000 | DID3)
                TMPB [0x03] = (0x00010000 | DID4)
                TMPB [0x04] = (0x00010000 | DID5)
                TMPB [0x05] = (0x00010000 | DID6)
                TMPB [0x06] = (0x00010000 | DID7)
                TMPB [0x07] = (0x00010000 | DID8)
                TMPB [0x08] = (0x00010000 | DID9)
                TMPB [0x09] = (0x00010000 | DIDA)
                If ((IPTP == One))
                {
                    TMPB [0x0A] = 0x00023480
                }
                Else
                {
                    TMPB [0x0A] = (0x00010000 | DIDB)
                }

                Return (TMPB) /* \_SB_.PC00.GFX0._DOD.TMPB */
            }

            If ((NDID == 0x0C))
            {
                Name (TMPC, Package (0x0C)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPC [Zero] = (0x00010000 | DID1)
                TMPC [One] = (0x00010000 | DID2)
                TMPC [0x02] = (0x00010000 | DID3)
                TMPC [0x03] = (0x00010000 | DID4)
                TMPC [0x04] = (0x00010000 | DID5)
                TMPC [0x05] = (0x00010000 | DID6)
                TMPC [0x06] = (0x00010000 | DID7)
                TMPC [0x07] = (0x00010000 | DID8)
                TMPC [0x08] = (0x00010000 | DID9)
                TMPC [0x09] = (0x00010000 | DIDA)
                TMPC [0x0A] = (0x00010000 | DIDB)
                If ((IPTP == One))
                {
                    TMPC [0x0B] = 0x00023480
                }
                Else
                {
                    TMPC [0x0B] = (0x00010000 | DIDC)
                }

                Return (TMPC) /* \_SB_.PC00.GFX0._DOD.TMPC */
            }

            If ((NDID == 0x0D))
            {
                Name (TMPD, Package (0x0D)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPD [Zero] = (0x00010000 | DID1)
                TMPD [One] = (0x00010000 | DID2)
                TMPD [0x02] = (0x00010000 | DID3)
                TMPD [0x03] = (0x00010000 | DID4)
                TMPD [0x04] = (0x00010000 | DID5)
                TMPD [0x05] = (0x00010000 | DID6)
                TMPD [0x06] = (0x00010000 | DID7)
                TMPD [0x07] = (0x00010000 | DID8)
                TMPD [0x08] = (0x00010000 | DID9)
                TMPD [0x09] = (0x00010000 | DIDA)
                TMPD [0x0A] = (0x00010000 | DIDB)
                TMPD [0x0B] = (0x00010000 | DIDC)
                If ((IPTP == One))
                {
                    TMPD [0x0C] = 0x00023480
                }
                Else
                {
                    TMPD [0x0C] = (0x00010000 | DIDD)
                }

                Return (TMPD) /* \_SB_.PC00.GFX0._DOD.TMPD */
            }

            If ((NDID == 0x0E))
            {
                Name (TMPE, Package (0x0E)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPE [Zero] = (0x00010000 | DID1)
                TMPE [One] = (0x00010000 | DID2)
                TMPE [0x02] = (0x00010000 | DID3)
                TMPE [0x03] = (0x00010000 | DID4)
                TMPE [0x04] = (0x00010000 | DID5)
                TMPE [0x05] = (0x00010000 | DID6)
                TMPE [0x06] = (0x00010000 | DID7)
                TMPE [0x07] = (0x00010000 | DID8)
                TMPE [0x08] = (0x00010000 | DID9)
                TMPE [0x09] = (0x00010000 | DIDA)
                TMPE [0x0A] = (0x00010000 | DIDB)
                TMPE [0x0B] = (0x00010000 | DIDC)
                TMPE [0x0C] = (0x00010000 | DIDD)
                If ((IPTP == One))
                {
                    TMPE [0x0D] = 0x00023480
                }
                Else
                {
                    TMPE [0x0D] = (0x00010000 | DIDE)
                }

                Return (TMPE) /* \_SB_.PC00.GFX0._DOD.TMPE */
            }

            If ((NDID == 0x0F))
            {
                Name (TMPF, Package (0x0F)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPF [Zero] = (0x00010000 | DID1)
                TMPF [One] = (0x00010000 | DID2)
                TMPF [0x02] = (0x00010000 | DID3)
                TMPF [0x03] = (0x00010000 | DID4)
                TMPF [0x04] = (0x00010000 | DID5)
                TMPF [0x05] = (0x00010000 | DID6)
                TMPF [0x06] = (0x00010000 | DID7)
                TMPF [0x07] = (0x00010000 | DID8)
                TMPF [0x08] = (0x00010000 | DID9)
                TMPF [0x09] = (0x00010000 | DIDA)
                TMPF [0x0A] = (0x00010000 | DIDB)
                TMPF [0x0B] = (0x00010000 | DIDC)
                TMPF [0x0C] = (0x00010000 | DIDD)
                TMPF [0x0D] = (0x00010000 | DIDE)
                If ((IPTP == One))
                {
                    TMPF [0x0E] = 0x00023480
                }
                Else
                {
                    TMPF [0x0E] = (0x00010000 | DIDF)
                }

                Return (TMPF) /* \_SB_.PC00.GFX0._DOD.TMPF */
            }

            If ((NDID == 0x10))
            {
                Name (TMPG, Package (0x10)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPG [Zero] = (0x00010000 | DID1)
                TMPG [One] = (0x00010000 | DID2)
                TMPG [0x02] = (0x00010000 | DID3)
                TMPG [0x03] = (0x00010000 | DID4)
                TMPG [0x04] = (0x00010000 | DID5)
                TMPG [0x05] = (0x00010000 | DID6)
                TMPG [0x06] = (0x00010000 | DID7)
                TMPG [0x07] = (0x00010000 | DID8)
                TMPG [0x08] = (0x00010000 | DID9)
                TMPG [0x09] = (0x00010000 | DIDA)
                TMPG [0x0A] = (0x00010000 | DIDB)
                TMPG [0x0B] = (0x00010000 | DIDC)
                TMPG [0x0C] = (0x00010000 | DIDD)
                TMPG [0x0D] = (0x00010000 | DIDE)
                TMPG [0x0E] = (0x00010000 | DIDF)
                TMPG [0x0F] = 0x00023480
                Return (TMPG) /* \_SB_.PC00.GFX0._DOD.TMPG */
            }

            Return (Package (0x01)
            {
                0x0400
            })
        }

        Device (DD01)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID1) == 0x0400))
                {
                    EDPV = One
                    NXDX = NXD1 /* External reference */
                    DIDX = DID1 /* External reference */
                    Return (One)
                }

                If ((DID1 == Zero))
                {
                    Return (One)
                }
                Else
                {
                    Return ((0xFFFF & DID1))
                }
            }
        }

        Device (DD02)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID2) == 0x0400))
                {
                    If (((0x0F & DID2) == One))
                    {
                        EDPV = 0x02
                        NXDY = NXD2 /* External reference */
                        DIDY = DID2 /* External reference */
                        Return (0x02)
                    }

                    EDPV = 0x02
                    NXDX = NXD2 /* External reference */
                    DIDX = DID2 /* External reference */
                    Return (0x02)
                }

                If ((DID2 == Zero))
                {
                    Return (0x02)
                }
                Else
                {
                    Return ((0xFFFF & DID2))
                }
            }
        }

        Device (DD03)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID3) == 0x0400))
                {
                    EDPV = 0x03
                    NXDX = NXD3 /* External reference */
                    DIDX = DID3 /* External reference */
                    Return (0x03)
                }

                If ((DID3 == Zero))
                {
                    Return (0x03)
                }
                Else
                {
                    Return ((0xFFFF & DID3))
                }
            }
        }

        Device (DD04)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID4) == 0x0400))
                {
                    EDPV = 0x04
                    NXDX = NXD4 /* External reference */
                    DIDX = DID4 /* External reference */
                    Return (0x04)
                }

                If ((DID4 == Zero))
                {
                    Return (0x04)
                }
                Else
                {
                    Return ((0xFFFF & DID4))
                }
            }
        }

        Device (DD05)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID5) == 0x0400))
                {
                    EDPV = 0x05
                    NXDX = NXD5 /* External reference */
                    DIDX = DID5 /* External reference */
                    Return (0x05)
                }

                If ((DID5 == Zero))
                {
                    Return (0x05)
                }
                Else
                {
                    Return ((0xFFFF & DID5))
                }
            }
        }

        Device (DD06)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID6) == 0x0400))
                {
                    EDPV = 0x06
                    NXDX = NXD6 /* External reference */
                    DIDX = DID6 /* External reference */
                    Return (0x06)
                }

                If ((DID6 == Zero))
                {
                    Return (0x06)
                }
                Else
                {
                    Return ((0xFFFF & DID6))
                }
            }
        }

        Device (DD07)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID7) == 0x0400))
                {
                    EDPV = 0x07
                    NXDX = NXD7 /* External reference */
                    DIDX = DID7 /* External reference */
                    Return (0x07)
                }

                If ((DID7 == Zero))
                {
                    Return (0x07)
                }
                Else
                {
                    Return ((0xFFFF & DID7))
                }
            }
        }

        Device (DD08)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID8) == 0x0400))
                {
                    EDPV = 0x08
                    NXDX = NXD8 /* External reference */
                    DIDX = DID8 /* External reference */
                    Return (0x08)
                }

                If ((DID8 == Zero))
                {
                    Return (0x08)
                }
                Else
                {
                    Return ((0xFFFF & DID8))
                }
            }
        }

        Device (DD09)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID9) == 0x0400))
                {
                    EDPV = 0x09
                    NXDX = NXD8 /* External reference */
                    DIDX = DID9 /* External reference */
                    Return (0x09)
                }

                If ((DID9 == Zero))
                {
                    Return (0x09)
                }
                Else
                {
                    Return ((0xFFFF & DID9))
                }
            }
        }

        Device (DD0A)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDA) == 0x0400))
                {
                    EDPV = 0x0A
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDA /* External reference */
                    Return (0x0A)
                }

                If ((DIDA == Zero))
                {
                    Return (0x0A)
                }
                Else
                {
                    Return ((0xFFFF & DIDA))
                }
            }
        }

        Device (DD0B)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDB) == 0x0400))
                {
                    EDPV = 0x0B
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDB /* External reference */
                    Return (0x0B)
                }

                If ((DIDB == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return ((0xFFFF & DIDB))
                }
            }
        }

        Device (DD0C)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDC) == 0x0400))
                {
                    EDPV = 0x0C
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDC /* External reference */
                    Return (0x0C)
                }

                If ((DIDC == Zero))
                {
                    Return (0x0C)
                }
                Else
                {
                    Return ((0xFFFF & DIDC))
                }
            }
        }

        Device (DD0D)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDD) == 0x0400))
                {
                    EDPV = 0x0D
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDD /* External reference */
                    Return (0x0D)
                }

                If ((DIDD == Zero))
                {
                    Return (0x0D)
                }
                Else
                {
                    Return ((0xFFFF & DIDD))
                }
            }
        }

        Device (DD0E)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDE) == 0x0400))
                {
                    EDPV = 0x0E
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDE /* External reference */
                    Return (0x0E)
                }

                If ((DIDE == Zero))
                {
                    Return (0x0E)
                }
                Else
                {
                    Return ((0xFFFF & DIDE))
                }
            }
        }

        Device (DD0F)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDF) == 0x0400))
                {
                    EDPV = 0x0F
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDF /* External reference */
                    Return (0x0F)
                }

                If ((DIDF == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return ((0xFFFF & DIDF))
                }
            }
        }

        Device (DD1F)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If ((EDPV == Zero))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return ((0xFFFF & DIDX))
                }
            }

            Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
            {
                If (CondRefOf (\PBCL))
                {
                    Return (PBCL ())
                }
                Else
                {
                    Return (Package (0x67)
                    {
                        0x50, 
                        0x32, 
                        Zero, 
                        One, 
                        0x02, 
                        0x03, 
                        0x04, 
                        0x05, 
                        0x06, 
                        0x07, 
                        0x08, 
                        0x09, 
                        0x0A, 
                        0x0B, 
                        0x0C, 
                        0x0D, 
                        0x0E, 
                        0x0F, 
                        0x10, 
                        0x11, 
                        0x12, 
                        0x13, 
                        0x14, 
                        0x15, 
                        0x16, 
                        0x17, 
                        0x18, 
                        0x19, 
                        0x1A, 
                        0x1B, 
                        0x1C, 
                        0x1D, 
                        0x1E, 
                        0x1F, 
                        0x20, 
                        0x21, 
                        0x22, 
                        0x23, 
                        0x24, 
                        0x25, 
                        0x26, 
                        0x27, 
                        0x28, 
                        0x29, 
                        0x2A, 
                        0x2B, 
                        0x2C, 
                        0x2D, 
                        0x2E, 
                        0x2F, 
                        0x30, 
                        0x31, 
                        0x32, 
                        0x33, 
                        0x34, 
                        0x35, 
                        0x36, 
                        0x37, 
                        0x38, 
                        0x39, 
                        0x3A, 
                        0x3B, 
                        0x3C, 
                        0x3D, 
                        0x3E, 
                        0x3F, 
                        0x40, 
                        0x41, 
                        0x42, 
                        0x43, 
                        0x44, 
                        0x45, 
                        0x46, 
                        0x47, 
                        0x48, 
                        0x49, 
                        0x4A, 
                        0x4B, 
                        0x4C, 
                        0x4D, 
                        0x4E, 
                        0x4F, 
                        0x50, 
                        0x51, 
                        0x52, 
                        0x53, 
                        0x54, 
                        0x55, 
                        0x56, 
                        0x57, 
                        0x58, 
                        0x59, 
                        0x5A, 
                        0x5B, 
                        0x5C, 
                        0x5D, 
                        0x5E, 
                        0x5F, 
                        0x60, 
                        0x61, 
                        0x62, 
                        0x63, 
                        0x64
                    })
                }
            }

            Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
            {
                If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                {
                    \_SB.PC00.GFX0.AINT (One, Arg0)
                    BRTL = Arg0
                }
            }

            Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
            {
                Return (BRTL) /* External reference */
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If (CondRefOf (\PLD1))
                {
                    Return (PLD1 ())
                }
                Else
                {
                    Return (DPLD) /* \_SB_.PC00.GFX0.DPLD */
                }
            }
        }

        Device (DD2F)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If ((EDPV == Zero))
                {
                    Return (0x1F)
                }

                If ((EDPV == One))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return ((0xFFFF & DIDY))
                }
            }

            Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
            {
                If (CondRefOf (\PBCL))
                {
                    Return (PBCL ())
                }
                Else
                {
                    Return (Package (0x67)
                    {
                        0x50, 
                        0x32, 
                        Zero, 
                        One, 
                        0x02, 
                        0x03, 
                        0x04, 
                        0x05, 
                        0x06, 
                        0x07, 
                        0x08, 
                        0x09, 
                        0x0A, 
                        0x0B, 
                        0x0C, 
                        0x0D, 
                        0x0E, 
                        0x0F, 
                        0x10, 
                        0x11, 
                        0x12, 
                        0x13, 
                        0x14, 
                        0x15, 
                        0x16, 
                        0x17, 
                        0x18, 
                        0x19, 
                        0x1A, 
                        0x1B, 
                        0x1C, 
                        0x1D, 
                        0x1E, 
                        0x1F, 
                        0x20, 
                        0x21, 
                        0x22, 
                        0x23, 
                        0x24, 
                        0x25, 
                        0x26, 
                        0x27, 
                        0x28, 
                        0x29, 
                        0x2A, 
                        0x2B, 
                        0x2C, 
                        0x2D, 
                        0x2E, 
                        0x2F, 
                        0x30, 
                        0x31, 
                        0x32, 
                        0x33, 
                        0x34, 
                        0x35, 
                        0x36, 
                        0x37, 
                        0x38, 
                        0x39, 
                        0x3A, 
                        0x3B, 
                        0x3C, 
                        0x3D, 
                        0x3E, 
                        0x3F, 
                        0x40, 
                        0x41, 
                        0x42, 
                        0x43, 
                        0x44, 
                        0x45, 
                        0x46, 
                        0x47, 
                        0x48, 
                        0x49, 
                        0x4A, 
                        0x4B, 
                        0x4C, 
                        0x4D, 
                        0x4E, 
                        0x4F, 
                        0x50, 
                        0x51, 
                        0x52, 
                        0x53, 
                        0x54, 
                        0x55, 
                        0x56, 
                        0x57, 
                        0x58, 
                        0x59, 
                        0x5A, 
                        0x5B, 
                        0x5C, 
                        0x5D, 
                        0x5E, 
                        0x5F, 
                        0x60, 
                        0x61, 
                        0x62, 
                        0x63, 
                        0x64
                    })
                }
            }

            Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
            {
                If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                {
                    \_SB.PC00.GFX0.AINT (One, Arg0)
                    BRTL = Arg0
                }
            }

            Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
            {
                Return (BRTL) /* External reference */
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If (CondRefOf (\PLD2))
                {
                    Return (PLD2 ())
                }
                Else
                {
                    Return (DPLD) /* \_SB_.PC00.GFX0.DPLD */
                }
            }
        }

        Method (SDDL, 1, NotSerialized)
        {
            NDID++
            Local0 = (Arg0 & 0x0F0F)
            Local1 = (0x80000000 | Local0)
            If ((DIDL == Local0))
            {
                Return (Local1)
            }

            If ((DDL2 == Local0))
            {
                Return (Local1)
            }

            If ((DDL3 == Local0))
            {
                Return (Local1)
            }

            If ((DDL4 == Local0))
            {
                Return (Local1)
            }

            If ((DDL5 == Local0))
            {
                Return (Local1)
            }

            If ((DDL6 == Local0))
            {
                Return (Local1)
            }

            If ((DDL7 == Local0))
            {
                Return (Local1)
            }

            If ((DDL8 == Local0))
            {
                Return (Local1)
            }

            If ((DDL9 == Local0))
            {
                Return (Local1)
            }

            If ((DD10 == Local0))
            {
                Return (Local1)
            }

            If ((DD11 == Local0))
            {
                Return (Local1)
            }

            If ((DD12 == Local0))
            {
                Return (Local1)
            }

            If ((DD13 == Local0))
            {
                Return (Local1)
            }

            If ((DD14 == Local0))
            {
                Return (Local1)
            }

            If ((DD15 == Local0))
            {
                Return (Local1)
            }

            Return (Zero)
        }

        OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
        Field (IGDP, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            ASLE,   8, 
            Offset (0xA8), 
            Offset (0xBC), 
            ASLS,   32
        }

        OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
        Field (IGDM, AnyAcc, NoLock, Preserve)
        {
            SIGN,   128, 
            SIZE,   32, 
            OVER,   32, 
            SVER,   256, 
            VVER,   128, 
            GVER,   128, 
            MBOX,   32, 
            DMOD,   32, 
            PCON,   32, 
            DVER,   64, 
            Offset (0x100), 
            DRDY,   32, 
            CSTS,   32, 
            CEVT,   32, 
            Offset (0x120), 
            DIDL,   32, 
            DDL2,   32, 
            DDL3,   32, 
            DDL4,   32, 
            DDL5,   32, 
            DDL6,   32, 
            DDL7,   32, 
            DDL8,   32, 
            CPDL,   32, 
            CPL2,   32, 
            CPL3,   32, 
            CPL4,   32, 
            CPL5,   32, 
            CPL6,   32, 
            CPL7,   32, 
            CPL8,   32, 
            CADL,   32, 
            CAL2,   32, 
            CAL3,   32, 
            CAL4,   32, 
            CAL5,   32, 
            CAL6,   32, 
            CAL7,   32, 
            CAL8,   32, 
            NADL,   32, 
            NDL2,   32, 
            NDL3,   32, 
            NDL4,   32, 
            NDL5,   32, 
            NDL6,   32, 
            NDL7,   32, 
            NDL8,   32, 
            ASLP,   32, 
            TIDX,   32, 
            CHPD,   32, 
            CLID,   32, 
            CDCK,   32, 
            SXSW,   32, 
            EVTS,   32, 
            CNOT,   32, 
            NRDY,   32, 
            DDL9,   32, 
            DD10,   32, 
            DD11,   32, 
            DD12,   32, 
            DD13,   32, 
            DD14,   32, 
            DD15,   32, 
            Offset (0x200), 
            BCL1,   32, 
            BCL2,   32, 
            CBL1,   32, 
            CBL2,   32, 
            BCM1,   960, 
            BCM2,   960, 
            ARDY,   32, 
            ASLC,   32, 
            TCHE,   32, 
            ALSI,   32, 
            BCLP,   32, 
            PFIT,   32, 
            CBLV,   32, 
            BCLM,   320, 
            CPFM,   32, 
            EPFM,   32, 
            PLUT,   592, 
            PFMB,   32, 
            CCDV,   32, 
            PCFT,   32, 
            SROT,   32, 
            IUER,   32, 
            FDSS,   64, 
            FDSP,   32, 
            STAT,   32, 
            RVDA,   64, 
            RVDS,   32, 
            Offset (0x400), 
            RVBT,   49152, 
            PHED,   32, 
            BDDC,   2048
        }

        Method (PDRD, 0, NotSerialized)
        {
            Return (!DRDY)
        }

        Method (PSTS, 0, NotSerialized)
        {
            If ((CSTS > 0x02))
            {
                Sleep (ASLP)
            }

            Return ((CSTS == 0x03))
        }

        Method (GNOT, 2, NotSerialized)
        {
            If (PDRD ())
            {
                Return (One)
            }

            CEVT = Arg0
            CSTS = 0x03
            If ((Arg1 == Zero))
            {
                Notify (\_SB.PC00.GFX0, Arg1)
            }

            If (CondRefOf (HNOT))
            {
                HNOT (Arg0)
            }
            Else
            {
                Notify (\_SB.PC00.GFX0, 0x80) // Status Change
            }

            Return (Zero)
        }

        Method (GLID, 1, NotSerialized)
        {
            If ((Arg0 == One))
            {
                CLID = 0x03
            }
            Else
            {
                CLID = Arg0
            }

            If (GNOT (0x02, Zero))
            {
                CLID |= 0x80000000
                Return (One)
            }

            Return (Zero)
        }

        Method (GDCK, 1, NotSerialized)
        {
            CDCK = Arg0
            Return (GNOT (0x04, Zero))
        }

        Method (IUEH, 1, Serialized)
        {
            IUER &= 0xC0
            IUER ^= (One << Arg0)
            If ((Arg0 <= 0x04))
            {
                Return (AINT (0x05, Zero))
            }
            Else
            {
                Return (AINT (Arg0, Zero))
            }
        }

        Method (AINT, 2, NotSerialized)
        {
            If (((Arg0 >= 0x05) && (Arg0 <= 0x07)))
            {
                ASLE = One
                Local2 = Zero
                While ((Local2 < 0xFA))
                {
                    Sleep (0x04)
                    Local2++
                }

                Return (Zero)
            }

            If ((Arg0 == One))
            {
                BCL1 = ((Arg1 * 0xFF) / 0x64)
                BCL1 |= 0x80000000
            }

            ASLE = One
            Return (Zero)
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3e5b41c6-eb1d-4260-9d15-c71fbadae414") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "iGfx Supported Functions Bitmap "
                            ADBG ("iGFX Empty Dongle SKU supported")
                            Local0 = One
                            If ((EDMX != Zero))
                            {
                                ADBG ("Display Mux Supported")
                                Local0 |= 0x00200000
                            }

                            Local0 |= 0x00400000
                            ADBG (Concatenate ("IGFX DSM Function Support = ", ToHexString (Local0)))
                            Return (Local0)
                        }
                    }
                    Case (0x15)
                    {
                        Name (DGDB, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                        })
                        CreateDWordField (DGDB, Zero, DGDF)
                        CreateByteField (DGDB, 0x04, DGSF)
                        Local0 = One
                        ADBG ("IGD eDP _DSM (21)")
                        If (((DerefOf (Arg3 [Zero]) & One) == Zero))
                        {
                            ADBG ("Get Current Disp Mux Status")
                            \_SB.GGOV (EDMX)
                            Local0 = Zero
                        }
                        Else
                        {
                            ADBG ("Set Disp Mux Status")
                            If (((DerefOf (Arg3 [Zero]) & 0x02) == Zero))
                            {
                                ADBG ("Set Disp Mux to iGfx")
                                \_SB.SGOV (EDMX, Zero)
                                Local0 = Zero
                            }
                            Else
                            {
                                ADBG ("Set Disp Mux to dGfx")
                                \_SB.SGOV (EDMX, One)
                                Local0 = Zero
                            }
                        }

                        DGDF = (\_SB.GGOV (EDMX) << One)
                        DGSF = Local0
                        ADBG (Concatenate ("ExitResult :: ", ToHexString (DGSF)))
                        ADBG (Concatenate ("Current Mux :: ", ToHexString (DGDF)))
                        Return (DGDB) /* \_SB_.PC00.GFX0._DSM.DGDB */
                    }
                    Case (0x16)
                    {
                        Switch (ToInteger (Arg3))
                        {
                            Case (Zero)
                            {
                                If (CondRefOf (\_SB.PC00.LPCB.H_EC.LSTE))
                                {
                                    \_SB.PC00.LPCB.H_EC.ECWT (Zero, RefOf (\_SB.PC00.LPCB.H_EC.LSTE))
                                    LIDS = Zero
                                    \_SB.PC00.GFX0.CLID = Zero
                                    ADBG ("Notify LID0")
                                    Notify (\_SB.PC00.LPCB.H_EC.LID0, 0x80) // Status Change
                                    ADBG ("OS Notified")
                                    Return (Zero)
                                }
                                Else
                                {
                                    ADBG ("Lid close failed")
                                }
                            }
                            Case (One)
                            {
                                If (CondRefOf (\_SB.PC00.LPCB.H_EC.LSTE))
                                {
                                    \_SB.PC00.LPCB.H_EC.ECWT (One, RefOf (\_SB.PC00.LPCB.H_EC.LSTE))
                                    LIDS = One
                                    \_SB.PC00.GFX0.CLID = 0x03
                                    ADBG ("Notify LID0")
                                    Notify (\_SB.PC00.LPCB.H_EC.LID0, 0x80) // Status Change
                                    ADBG ("OS Notified")
                                    Return (Zero)
                                }
                                Else
                                {
                                    ADBG ("Lid open failed")
                                }
                            }
                            Default
                            {
                                Return (One)
                            }

                        }
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
        {
            Return (0x03)
        }

        Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
        {
            Return (0x03)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
        }

        Method (GFPS, 0, Serialized)
        {
            OperationRegion (PXCS, SystemMemory, \_SB.PC00.PC2M (0x00020000, Zero), 0x0100)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0xD4), 
                D3HT,   2
            }

            Return (D3HT) /* \_SB_.PC00.GFX0.GFPS.D3HT */
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApPsd", 0x00003000)
{
    External (_SB_.CFGD, FieldUnitObj)
    External (_SB_.PR00.GPSD, MethodObj)    // 2 Arguments
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)
    External (_SB_.PR24, DeviceObj)
    External (_SB_.PR25, DeviceObj)
    External (_SB_.PR26, DeviceObj)
    External (_SB_.PR27, DeviceObj)
    External (_SB_.PR28, DeviceObj)
    External (_SB_.PR29, DeviceObj)
    External (_SB_.PR30, DeviceObj)
    External (_SB_.PR31, DeviceObj)
    External (_SB_.PR32, DeviceObj)
    External (_SB_.PR33, DeviceObj)
    External (_SB_.PR34, DeviceObj)
    External (_SB_.PR35, DeviceObj)
    External (_SB_.PR36, DeviceObj)
    External (_SB_.PR37, DeviceObj)
    External (_SB_.PR38, DeviceObj)
    External (_SB_.PR39, DeviceObj)
    External (_SB_.PR40, DeviceObj)
    External (_SB_.PR41, DeviceObj)
    External (_SB_.PR42, DeviceObj)
    External (_SB_.PR43, DeviceObj)
    External (_SB_.PR44, DeviceObj)
    External (_SB_.PR45, DeviceObj)
    External (_SB_.PR46, DeviceObj)
    External (_SB_.PR47, DeviceObj)
    External (_SB_.PR48, DeviceObj)
    External (_SB_.PR49, DeviceObj)
    External (_SB_.PR50, DeviceObj)
    External (_SB_.PR51, DeviceObj)
    External (_SB_.PR52, DeviceObj)
    External (_SB_.PR53, DeviceObj)
    External (_SB_.PR54, DeviceObj)
    External (_SB_.PR55, DeviceObj)
    External (_SB_.PR56, DeviceObj)
    External (_SB_.PR57, DeviceObj)
    External (_SB_.PR58, DeviceObj)
    External (_SB_.PR59, DeviceObj)
    External (_SB_.PR60, DeviceObj)
    External (_SB_.PR61, DeviceObj)
    External (_SB_.PR62, DeviceObj)
    External (_SB_.PR63, DeviceObj)
    External (CM01, UnknownObj)
    External (CM02, UnknownObj)
    External (CM03, UnknownObj)
    External (CM04, UnknownObj)
    External (CM05, UnknownObj)
    External (CM06, UnknownObj)
    External (CM07, UnknownObj)
    External (CM08, UnknownObj)
    External (CM09, UnknownObj)
    External (CM10, UnknownObj)
    External (CM11, UnknownObj)
    External (CM12, UnknownObj)
    External (CM13, UnknownObj)
    External (CM14, UnknownObj)
    External (CM15, UnknownObj)
    External (CM16, UnknownObj)
    External (CM17, UnknownObj)
    External (CM18, UnknownObj)
    External (CM19, UnknownObj)
    External (CM20, UnknownObj)
    External (CM21, UnknownObj)
    External (CM22, UnknownObj)
    External (CM23, UnknownObj)
    External (CM24, UnknownObj)
    External (CM25, UnknownObj)
    External (CM26, UnknownObj)
    External (CM27, UnknownObj)
    External (CM28, UnknownObj)
    External (CM29, UnknownObj)
    External (CM30, UnknownObj)
    External (CM31, UnknownObj)
    External (CM32, UnknownObj)
    External (CM33, UnknownObj)
    External (CM34, UnknownObj)
    External (CM35, UnknownObj)
    External (CM36, UnknownObj)
    External (CM37, UnknownObj)
    External (CM38, UnknownObj)
    External (CM39, UnknownObj)
    External (CM40, UnknownObj)
    External (CM41, UnknownObj)
    External (CM42, UnknownObj)
    External (CM43, UnknownObj)
    External (CM44, UnknownObj)
    External (CM45, UnknownObj)
    External (CM46, UnknownObj)
    External (CM47, UnknownObj)
    External (CM48, UnknownObj)
    External (CM49, UnknownObj)
    External (CM50, UnknownObj)
    External (CM51, UnknownObj)
    External (CM52, UnknownObj)
    External (CM53, UnknownObj)
    External (CM54, UnknownObj)
    External (CM55, UnknownObj)
    External (CM56, UnknownObj)
    External (CM57, UnknownObj)
    External (CM58, UnknownObj)
    External (CM59, UnknownObj)
    External (CM60, UnknownObj)
    External (CM61, UnknownObj)
    External (CM62, UnknownObj)
    External (CM63, UnknownObj)
    External (PF00, IntObj)
    External (TCNT, FieldUnitObj)

    If (CondRefOf (\_SB.PR01))
    {
        Scope (\_SB.PR01)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (One, CM01))
            }
        }
    }

    If (CondRefOf (\_SB.PR02))
    {
        Scope (\_SB.PR02)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x02, CM02))
            }
        }
    }

    If (CondRefOf (\_SB.PR03))
    {
        Scope (\_SB.PR03)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x03, CM03))
            }
        }
    }

    If (CondRefOf (\_SB.PR04))
    {
        Scope (\_SB.PR04)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x04, CM04))
            }
        }
    }

    If (CondRefOf (\_SB.PR05))
    {
        Scope (\_SB.PR05)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x05, CM05))
            }
        }
    }

    If (CondRefOf (\_SB.PR06))
    {
        Scope (\_SB.PR06)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x06, CM06))
            }
        }
    }

    If (CondRefOf (\_SB.PR07))
    {
        Scope (\_SB.PR07)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x07, CM07))
            }
        }
    }

    If (CondRefOf (\_SB.PR08))
    {
        Scope (\_SB.PR08)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x08, CM08))
            }
        }
    }

    If (CondRefOf (\_SB.PR09))
    {
        Scope (\_SB.PR09)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x09, CM09))
            }
        }
    }

    If (CondRefOf (\_SB.PR10))
    {
        Scope (\_SB.PR10)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x0A, CM10))
            }
        }
    }

    If (CondRefOf (\_SB.PR11))
    {
        Scope (\_SB.PR11)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x0B, CM11))
            }
        }
    }

    If (CondRefOf (\_SB.PR12))
    {
        Scope (\_SB.PR12)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x0C, CM12))
            }
        }
    }

    If (CondRefOf (\_SB.PR13))
    {
        Scope (\_SB.PR13)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x0D, CM13))
            }
        }
    }

    If (CondRefOf (\_SB.PR14))
    {
        Scope (\_SB.PR14)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x0E, CM14))
            }
        }
    }

    If (CondRefOf (\_SB.PR15))
    {
        Scope (\_SB.PR15)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x0F, CM15))
            }
        }
    }

    If (CondRefOf (\_SB.PR16))
    {
        Scope (\_SB.PR16)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x10, CM16))
            }
        }
    }

    If (CondRefOf (\_SB.PR17))
    {
        Scope (\_SB.PR17)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x11, CM17))
            }
        }
    }

    If (CondRefOf (\_SB.PR18))
    {
        Scope (\_SB.PR18)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x12, CM18))
            }
        }
    }

    If (CondRefOf (\_SB.PR19))
    {
        Scope (\_SB.PR19)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x13, CM19))
            }
        }
    }

    If (CondRefOf (\_SB.PR20))
    {
        Scope (\_SB.PR20)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x14, CM20))
            }
        }
    }

    If (CondRefOf (\_SB.PR21))
    {
        Scope (\_SB.PR21)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x15, CM21))
            }
        }
    }

    If (CondRefOf (\_SB.PR22))
    {
        Scope (\_SB.PR22)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x16, CM22))
            }
        }
    }

    If (CondRefOf (\_SB.PR23))
    {
        Scope (\_SB.PR23)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x17, CM23))
            }
        }
    }

    If (CondRefOf (\_SB.PR24))
    {
        Scope (\_SB.PR24)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x18, CM24))
            }
        }
    }

    If (CondRefOf (\_SB.PR25))
    {
        Scope (\_SB.PR25)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x19, CM25))
            }
        }
    }

    If (CondRefOf (\_SB.PR26))
    {
        Scope (\_SB.PR26)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x1A, CM26))
            }
        }
    }

    If (CondRefOf (\_SB.PR27))
    {
        Scope (\_SB.PR27)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x1B, CM27))
            }
        }
    }

    If (CondRefOf (\_SB.PR28))
    {
        Scope (\_SB.PR28)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x1C, CM28))
            }
        }
    }

    If (CondRefOf (\_SB.PR29))
    {
        Scope (\_SB.PR29)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x1D, CM29))
            }
        }
    }

    If (CondRefOf (\_SB.PR30))
    {
        Scope (\_SB.PR30)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x1E, CM30))
            }
        }
    }

    If (CondRefOf (\_SB.PR31))
    {
        Scope (\_SB.PR31)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x1F, CM31))
            }
        }
    }

    If (CondRefOf (\_SB.PR32))
    {
        Scope (\_SB.PR32)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x20, CM32))
            }
        }
    }

    If (CondRefOf (\_SB.PR33))
    {
        Scope (\_SB.PR33)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x21, CM33))
            }
        }
    }

    If (CondRefOf (\_SB.PR34))
    {
        Scope (\_SB.PR34)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x22, CM34))
            }
        }
    }

    If (CondRefOf (\_SB.PR35))
    {
        Scope (\_SB.PR35)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x23, CM35))
            }
        }
    }

    If (CondRefOf (\_SB.PR36))
    {
        Scope (\_SB.PR36)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x24, CM36))
            }
        }
    }

    If (CondRefOf (\_SB.PR37))
    {
        Scope (\_SB.PR37)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x25, CM37))
            }
        }
    }

    If (CondRefOf (\_SB.PR38))
    {
        Scope (\_SB.PR38)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x26, CM38))
            }
        }
    }

    If (CondRefOf (\_SB.PR39))
    {
        Scope (\_SB.PR39)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x27, CM39))
            }
        }
    }

    If (CondRefOf (\_SB.PR40))
    {
        Scope (\_SB.PR40)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x28, CM40))
            }
        }
    }

    If (CondRefOf (\_SB.PR41))
    {
        Scope (\_SB.PR41)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x29, CM41))
            }
        }
    }

    If (CondRefOf (\_SB.PR42))
    {
        Scope (\_SB.PR42)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x2A, CM42))
            }
        }
    }

    If (CondRefOf (\_SB.PR43))
    {
        Scope (\_SB.PR43)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x2B, CM43))
            }
        }
    }

    If (CondRefOf (\_SB.PR44))
    {
        Scope (\_SB.PR44)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x2C, CM44))
            }
        }
    }

    If (CondRefOf (\_SB.PR45))
    {
        Scope (\_SB.PR45)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x2D, CM45))
            }
        }
    }

    If (CondRefOf (\_SB.PR46))
    {
        Scope (\_SB.PR46)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x2E, CM46))
            }
        }
    }

    If (CondRefOf (\_SB.PR47))
    {
        Scope (\_SB.PR47)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x2F, CM47))
            }
        }
    }

    If (CondRefOf (\_SB.PR48))
    {
        Scope (\_SB.PR48)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x30, CM48))
            }
        }
    }

    If (CondRefOf (\_SB.PR49))
    {
        Scope (\_SB.PR49)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x31, CM49))
            }
        }
    }

    If (CondRefOf (\_SB.PR50))
    {
        Scope (\_SB.PR50)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x32, CM50))
            }
        }
    }

    If (CondRefOf (\_SB.PR51))
    {
        Scope (\_SB.PR51)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x33, CM51))
            }
        }
    }

    If (CondRefOf (\_SB.PR52))
    {
        Scope (\_SB.PR52)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x34, CM52))
            }
        }
    }

    If (CondRefOf (\_SB.PR53))
    {
        Scope (\_SB.PR53)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x35, CM53))
            }
        }
    }

    If (CondRefOf (\_SB.PR54))
    {
        Scope (\_SB.PR54)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x36, CM54))
            }
        }
    }

    If (CondRefOf (\_SB.PR55))
    {
        Scope (\_SB.PR55)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x37, CM55))
            }
        }
    }

    If (CondRefOf (\_SB.PR56))
    {
        Scope (\_SB.PR56)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x38, CM56))
            }
        }
    }

    If (CondRefOf (\_SB.PR57))
    {
        Scope (\_SB.PR57)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x39, CM57))
            }
        }
    }

    If (CondRefOf (\_SB.PR58))
    {
        Scope (\_SB.PR58)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x3A, CM58))
            }
        }
    }

    If (CondRefOf (\_SB.PR59))
    {
        Scope (\_SB.PR59)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x3B, CM59))
            }
        }
    }

    If (CondRefOf (\_SB.PR60))
    {
        Scope (\_SB.PR60)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x3C, CM60))
            }
        }
    }

    If (CondRefOf (\_SB.PR61))
    {
        Scope (\_SB.PR61)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x3D, CM61))
            }
        }
    }

    If (CondRefOf (\_SB.PR62))
    {
        Scope (\_SB.PR62)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x3E, CM62))
            }
        }
    }

    If (CondRefOf (\_SB.PR63))
    {
        Scope (\_SB.PR63)
        {
            Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
            {
                Return (\_SB.PR00.GPSD (0x3F, CM63))
            }
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 2, "SocGpe", "SocGpe ", 0x00003000)
{
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.GFX0, DeviceObj)
    External (_SB_.PC00.IMNG, MethodObj)    // 1 Arguments
    External (_SB_.PC00.MC__, DeviceObj)
    External (_SB_.PC00.MC__.D1F0, FieldUnitObj)
    External (_SB_.PC00.MC__.D1F1, FieldUnitObj)
    External (_SB_.PC00.MC__.D6F0, FieldUnitObj)
    External (_SB_.PC00.RP01, DeviceObj)
    External (_SB_.PC00.RP01.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP01.L0SE, FieldUnitObj)
    External (_SB_.PC00.RP01.PDCX, FieldUnitObj)
    External (_SB_.PC00.RP01.PDSX, FieldUnitObj)
    External (_SB_.PC00.RP01.VDID, FieldUnitObj)
    External (_SB_.PC00.RP02, DeviceObj)
    External (_SB_.PC00.RP02.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP02.L0SE, FieldUnitObj)
    External (_SB_.PC00.RP02.PDCX, FieldUnitObj)
    External (_SB_.PC00.RP02.PDSX, FieldUnitObj)
    External (_SB_.PC00.RP02.VDID, FieldUnitObj)
    External (_SB_.PC00.RP03, DeviceObj)
    External (_SB_.PC00.RP03.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP03.L0SE, FieldUnitObj)
    External (_SB_.PC00.RP03.PDCX, FieldUnitObj)
    External (_SB_.PC00.RP03.PDSX, FieldUnitObj)
    External (_SB_.PC00.RP03.VDID, FieldUnitObj)
    External (_SB_.PC00.RP04, DeviceObj)
    External (_SB_.PC00.RP04.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP04.L0SE, FieldUnitObj)
    External (_SB_.PC00.RP04.PDCX, FieldUnitObj)
    External (_SB_.PC00.RP04.PDSX, FieldUnitObj)
    External (_SB_.PC00.RP04.VDID, FieldUnitObj)
    External (_SB_.PC00.RP05, DeviceObj)
    External (_SB_.PC00.RP05.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP05.L0SE, FieldUnitObj)
    External (_SB_.PC00.RP05.PDCX, FieldUnitObj)
    External (_SB_.PC00.RP05.PDSX, FieldUnitObj)
    External (_SB_.PC00.RP05.VDID, FieldUnitObj)
    External (_SB_.PC00.RP06, DeviceObj)
    External (_SB_.PC00.RP06.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP06.L0SE, FieldUnitObj)
    External (_SB_.PC00.RP06.PDCX, FieldUnitObj)
    External (_SB_.PC00.RP06.PDSX, FieldUnitObj)
    External (_SB_.PC00.RP06.VDID, FieldUnitObj)
    External (_SB_.PC00.RP07, DeviceObj)
    External (_SB_.PC00.RP07.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP07.L0SE, FieldUnitObj)
    External (_SB_.PC00.RP07.PDCX, FieldUnitObj)
    External (_SB_.PC00.RP07.PDSX, FieldUnitObj)
    External (_SB_.PC00.RP07.VDID, FieldUnitObj)
    External (_SB_.PC00.RP08, DeviceObj)
    External (_SB_.PC00.RP08.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP08.L0SE, FieldUnitObj)
    External (_SB_.PC00.RP08.PDCX, FieldUnitObj)
    External (_SB_.PC00.RP08.PDSX, FieldUnitObj)
    External (_SB_.PC00.RP08.VDID, FieldUnitObj)
    External (_SB_.PC00.RP09, DeviceObj)
    External (_SB_.PC00.RP09.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP09.L0SE, FieldUnitObj)
    External (_SB_.PC00.RP09.PDCX, FieldUnitObj)
    External (_SB_.PC00.RP09.PDSX, FieldUnitObj)
    External (_SB_.PC00.RP09.VDID, FieldUnitObj)
    External (_SB_.PC00.RP10, DeviceObj)
    External (_SB_.PC00.RP10.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP10.L0SE, FieldUnitObj)
    External (_SB_.PC00.RP10.PDCX, FieldUnitObj)
    External (_SB_.PC00.RP10.PDSX, FieldUnitObj)
    External (_SB_.PC00.RP10.VDID, FieldUnitObj)
    External (_SB_.PC00.RP11, DeviceObj)
    External (_SB_.PC00.RP11.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP11.L0SE, FieldUnitObj)
    External (_SB_.PC00.RP11.PDCX, FieldUnitObj)
    External (_SB_.PC00.RP11.PDSX, FieldUnitObj)
    External (_SB_.PC00.RP11.VDID, FieldUnitObj)
    External (_SB_.PC00.RP12, DeviceObj)
    External (_SB_.PC00.RP12.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.HPSX, FieldUnitObj)
    External (_SB_.PC00.RP12.L0SE, FieldUnitObj)
    External (_SB_.PC00.RP12.PDCX, FieldUnitObj)
    External (_SB_.PC00.RP12.PDSX, FieldUnitObj)
    External (_SB_.PC00.RP12.VDID, FieldUnitObj)
    External (_SB_.PC00.TDM0, DeviceObj)
    External (_SB_.PC00.TDM1, DeviceObj)
    External (_SB_.PC00.TRP0, DeviceObj)
    External (_SB_.PC00.TRP0.CRPM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP0.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP0.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP0.LTRC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP1, DeviceObj)
    External (_SB_.PC00.TRP1.CRPM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP1.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP1.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP1.LTRC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP2, DeviceObj)
    External (_SB_.PC00.TRP2.CRPM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP2.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP2.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP2.LTRC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP3, DeviceObj)
    External (_SB_.PC00.TRP3.CRPM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP3.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP3.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP3.LTRC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TXHC, DeviceObj)
    External (_SB_.PC01, DeviceObj)
    External (ADBG, MethodObj)    // 1 Arguments
    External (GP1E, IntObj)
    External (PCHS, FieldUnitObj)
    External (PCHX, IntObj)
    External (PGRT, FieldUnitObj)

    Scope (\_GPE)
    {
        Method (SL61, 0, NotSerialized)
        {
            If (CondRefOf (GP1E))
            {
                If ((GP1E == Zero))
                {
                    If (CondRefOf (\_SB.PC00.TXHC))
                    {
                        Local0 = Zero
                        Local1 = \_SB.PC00.TRP0.CRPM ()
                        If ((Local1 != 0xFF))
                        {
                            Local0 |= Local1
                        }

                        Local1 = \_SB.PC00.TRP1.CRPM ()
                        If ((Local1 != 0xFF))
                        {
                            Local0 |= Local1
                        }

                        Local1 = \_SB.PC00.TRP2.CRPM ()
                        If ((Local1 != 0xFF))
                        {
                            Local0 |= Local1
                        }

                        Local1 = \_SB.PC00.TRP3.CRPM ()
                        If ((Local1 != 0xFF))
                        {
                            Local0 |= Local1
                        }

                        If ((Local0 != Zero))
                        {
                            ADBG ("D3 100ms delay as one of iTBT RP is in D3 state")
                            Sleep (0x64)
                            \_SB.PC00.TRP0.HPEV ()
                            \_SB.PC00.TRP1.HPEV ()
                            \_SB.PC00.TRP2.HPEV ()
                            \_SB.PC00.TRP3.HPEV ()
                        }

                        \_SB.PC00.TRP0.LTRC ()
                        \_SB.PC00.TRP1.LTRC ()
                        \_SB.PC00.TRP2.LTRC ()
                        \_SB.PC00.TRP3.LTRC ()
                    }

                    If (CondRefOf (\_SB.PC00.RP01))
                    {
                        If (((\_SB.PC00.RP01.VDID != 0xFFFFFFFF) && \_SB.PC00.RP01.HPSX))
                        {
                            If (\_SB.PC00.RP01.PDCX)
                            {
                                \_SB.PC00.RP01.PDCX = One
                                \_SB.PC00.RP01.HPSX = One
                                If (!\_SB.PC00.RP01.PDSX)
                                {
                                    \_SB.PC00.RP01.L0SE = Zero
                                }

                                Notify (\_SB.PC00.RP01, Zero) // Bus Check
                            }
                            Else
                            {
                                \_SB.PC00.RP01.HPSX = One
                            }
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP02))
                    {
                        If (((\_SB.PC00.RP02.VDID != 0xFFFFFFFF) && \_SB.PC00.RP02.HPSX))
                        {
                            If (\_SB.PC00.RP02.PDCX)
                            {
                                \_SB.PC00.RP02.PDCX = One
                                \_SB.PC00.RP02.HPSX = One
                                If (!\_SB.PC00.RP02.PDSX)
                                {
                                    \_SB.PC00.RP02.L0SE = Zero
                                }

                                Notify (\_SB.PC00.RP02, Zero) // Bus Check
                            }
                            Else
                            {
                                \_SB.PC00.RP02.HPSX = One
                            }
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP03))
                    {
                        If (((\_SB.PC00.RP03.VDID != 0xFFFFFFFF) && \_SB.PC00.RP03.HPSX))
                        {
                            If (\_SB.PC00.RP03.PDCX)
                            {
                                \_SB.PC00.RP03.PDCX = One
                                \_SB.PC00.RP03.HPSX = One
                                If (!\_SB.PC00.RP03.PDSX)
                                {
                                    \_SB.PC00.RP03.L0SE = Zero
                                }

                                Notify (\_SB.PC00.RP03, Zero) // Bus Check
                            }
                            Else
                            {
                                \_SB.PC00.RP03.HPSX = One
                            }
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP04))
                    {
                        If (((\_SB.PC00.RP04.VDID != 0xFFFFFFFF) && \_SB.PC00.RP04.HPSX))
                        {
                            If (\_SB.PC00.RP04.PDCX)
                            {
                                \_SB.PC00.RP04.PDCX = One
                                \_SB.PC00.RP04.HPSX = One
                                If (!\_SB.PC00.RP04.PDSX)
                                {
                                    \_SB.PC00.RP04.L0SE = Zero
                                }

                                Notify (\_SB.PC00.RP04, Zero) // Bus Check
                            }
                            Else
                            {
                                \_SB.PC00.RP04.HPSX = One
                            }
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP05))
                    {
                        If (((\_SB.PC00.RP05.VDID != 0xFFFFFFFF) && \_SB.PC00.RP05.HPSX))
                        {
                            If (\_SB.PC00.RP05.PDCX)
                            {
                                \_SB.PC00.RP05.PDCX = One
                                \_SB.PC00.RP05.HPSX = One
                                If (!\_SB.PC00.RP05.PDSX)
                                {
                                    \_SB.PC00.RP05.L0SE = Zero
                                }

                                Notify (\_SB.PC00.RP05, Zero) // Bus Check
                            }
                            Else
                            {
                                \_SB.PC00.RP05.HPSX = One
                            }
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP06))
                    {
                        If (((\_SB.PC00.RP06.VDID != 0xFFFFFFFF) && \_SB.PC00.RP06.HPSX))
                        {
                            If (\_SB.PC00.RP06.PDCX)
                            {
                                \_SB.PC00.RP06.PDCX = One
                                \_SB.PC00.RP06.HPSX = One
                                If (!\_SB.PC00.RP06.PDSX)
                                {
                                    \_SB.PC00.RP06.L0SE = Zero
                                }

                                Notify (\_SB.PC00.RP06, Zero) // Bus Check
                            }
                            Else
                            {
                                \_SB.PC00.RP06.HPSX = One
                            }
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP07))
                    {
                        If (((\_SB.PC00.RP07.VDID != 0xFFFFFFFF) && \_SB.PC00.RP07.HPSX))
                        {
                            If (\_SB.PC00.RP07.PDCX)
                            {
                                \_SB.PC00.RP07.PDCX = One
                                \_SB.PC00.RP07.HPSX = One
                                If (!\_SB.PC00.RP07.PDSX)
                                {
                                    \_SB.PC00.RP07.L0SE = Zero
                                }

                                Notify (\_SB.PC00.RP07, Zero) // Bus Check
                            }
                            Else
                            {
                                \_SB.PC00.RP07.HPSX = One
                            }
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP08))
                    {
                        If (((\_SB.PC00.RP08.VDID != 0xFFFFFFFF) && \_SB.PC00.RP08.HPSX))
                        {
                            If (\_SB.PC00.RP08.PDCX)
                            {
                                \_SB.PC00.RP08.PDCX = One
                                \_SB.PC00.RP08.HPSX = One
                                If (!\_SB.PC00.RP08.PDSX)
                                {
                                    \_SB.PC00.RP08.L0SE = Zero
                                }

                                Notify (\_SB.PC00.RP08, Zero) // Bus Check
                            }
                            Else
                            {
                                \_SB.PC00.RP08.HPSX = One
                            }
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP09))
                    {
                        If (((\_SB.PC00.RP09.VDID != 0xFFFFFFFF) && \_SB.PC00.RP09.HPSX))
                        {
                            If (\_SB.PC00.RP09.PDCX)
                            {
                                \_SB.PC00.RP09.PDCX = One
                                \_SB.PC00.RP09.HPSX = One
                                If (!\_SB.PC00.RP09.PDSX)
                                {
                                    \_SB.PC00.RP09.L0SE = Zero
                                }

                                Notify (\_SB.PC00.RP09, Zero) // Bus Check
                            }
                            Else
                            {
                                \_SB.PC00.RP09.HPSX = One
                            }
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP10))
                    {
                        If (((\_SB.PC00.RP10.VDID != 0xFFFFFFFF) && \_SB.PC00.RP10.HPSX))
                        {
                            If (\_SB.PC00.RP10.PDCX)
                            {
                                \_SB.PC00.RP10.PDCX = One
                                \_SB.PC00.RP10.HPSX = One
                                If (!\_SB.PC00.RP10.PDSX)
                                {
                                    \_SB.PC00.RP10.L0SE = Zero
                                }

                                Notify (\_SB.PC00.RP10, Zero) // Bus Check
                            }
                            Else
                            {
                                \_SB.PC00.RP10.HPSX = One
                            }
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP11))
                    {
                        If (((\_SB.PC00.RP11.VDID != 0xFFFFFFFF) && \_SB.PC00.RP11.HPSX))
                        {
                            If (\_SB.PC00.RP11.PDCX)
                            {
                                \_SB.PC00.RP11.PDCX = One
                                \_SB.PC00.RP11.HPSX = One
                                If (!\_SB.PC00.RP11.PDSX)
                                {
                                    \_SB.PC00.RP11.L0SE = Zero
                                }

                                Notify (\_SB.PC00.RP11, Zero) // Bus Check
                            }
                            Else
                            {
                                \_SB.PC00.RP11.HPSX = One
                            }
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP12))
                    {
                        If (((\_SB.PC00.RP12.VDID != 0xFFFFFFFF) && \_SB.PC00.RP12.HPSX))
                        {
                            If (\_SB.PC00.RP12.PDCX)
                            {
                                \_SB.PC00.RP12.PDCX = One
                                \_SB.PC00.RP12.HPSX = One
                                If (!\_SB.PC00.RP12.PDSX)
                                {
                                    \_SB.PC00.RP12.L0SE = Zero
                                }

                                Notify (\_SB.PC00.RP12, Zero) // Bus Check
                            }
                            Else
                            {
                                \_SB.PC00.RP12.HPSX = One
                            }
                        }
                    }
                }
            }
        }

        Method (SL69, 0, NotSerialized)
        {
            If (CondRefOf (\_SB.PC00.TXHC))
            {
                If ((\_SB.PC00.TRP0.HPME () == One))
                {
                    ADBG ("Wake TBT RP0 and DMA")
                    Notify (\_SB.PC00.TDM0, 0x02) // Device Wake
                    Notify (\_SB.PC00.TRP0, 0x02) // Device Wake
                }

                If ((\_SB.PC00.TRP1.HPME () == One))
                {
                    ADBG ("Wake TBT RP1 and DMA")
                    Notify (\_SB.PC00.TDM0, 0x02) // Device Wake
                    Notify (\_SB.PC00.TRP1, 0x02) // Device Wake
                }

                If ((\_SB.PC00.TRP2.HPME () == One))
                {
                    ADBG ("Wake TBT RP2 and DMA")
                    Notify (\_SB.PC00.TDM1, 0x02) // Device Wake
                    Notify (\_SB.PC00.TRP2, 0x02) // Device Wake
                }

                If ((\_SB.PC00.TRP3.HPME () == One))
                {
                    ADBG ("Wake TBT RP3 and DMA")
                    Notify (\_SB.PC00.TDM1, 0x02) // Device Wake
                    Notify (\_SB.PC00.TRP3, 0x02) // Device Wake
                }
            }

            If (CondRefOf (GP1E))
            {
                If ((GP1E == Zero))
                {
                    \_SB.PC00.RP01.HPME ()
                    \_SB.PC00.RP02.HPME ()
                    \_SB.PC00.RP03.HPME ()
                    \_SB.PC00.RP04.HPME ()
                    \_SB.PC00.RP05.HPME ()
                    \_SB.PC00.RP06.HPME ()
                    \_SB.PC00.RP07.HPME ()
                    \_SB.PC00.RP08.HPME ()
                    \_SB.PC00.RP09.HPME ()
                    \_SB.PC00.RP10.HPME ()
                    \_SB.PC00.RP11.HPME ()
                    \_SB.PC00.RP12.HPME ()
                }
            }
        }

        Method (SL6F, 0, NotSerialized)
        {
            If ((PGRT == One)){}
        }

        Method (SL71, 0, NotSerialized)
        {
            If (CondRefOf (\_SB.PC00.IMNG))
            {
                ADBG ("SL71 - Check if iGfx is in D3 and notify iGfx")
                \_SB.PC00.IMNG (0x71)
            }
        }

        Method (SLA7, 0, NotSerialized)
        {
            If (CondRefOf (\_SB.PC00.TXHC))
            {
                ADBG ("SLA7 - Check HPCX and notify OS first")
                Local0 = Zero
                Local1 = \_SB.PC00.TRP0.CRPM ()
                If ((Local1 != 0xFF))
                {
                    Local0 |= Local1
                }

                Local1 = \_SB.PC00.TRP1.CRPM ()
                If ((Local1 != 0xFF))
                {
                    Local0 |= Local1
                }

                Local1 = \_SB.PC00.TRP2.CRPM ()
                If ((Local1 != 0xFF))
                {
                    Local0 |= Local1
                }

                Local1 = \_SB.PC00.TRP3.CRPM ()
                If ((Local1 != 0xFF))
                {
                    Local0 |= Local1
                }

                If ((Local0 != Zero))
                {
                    ADBG ("D3 100ms delay as one of iTBT RP is in D3 state")
                    Sleep (0x64)
                    \_SB.PC00.TRP0.HPEV ()
                    \_SB.PC00.TRP1.HPEV ()
                    \_SB.PC00.TRP2.HPEV ()
                    \_SB.PC00.TRP3.HPEV ()
                }

                \_SB.PC00.TRP0.LTRC ()
                \_SB.PC00.TRP1.LTRC ()
                \_SB.PC00.TRP2.LTRC ()
                \_SB.PC00.TRP3.LTRC ()
            }
        }

        Method (SLC7, 0, NotSerialized)
        {
            If (CondRefOf (\_SB.PC00.TXHC))
            {
                If ((\_SB.PC00.TRP0.HPME () == One))
                {
                    ADBG ("Wake TBT RP0 and DMA")
                    Notify (\_SB.PC00.TDM0, 0x02) // Device Wake
                    Notify (\_SB.PC00.TRP0, 0x02) // Device Wake
                }

                If ((\_SB.PC00.TRP1.HPME () == One))
                {
                    ADBG ("Wake TBT RP1 and DMA")
                    Notify (\_SB.PC00.TDM0, 0x02) // Device Wake
                    Notify (\_SB.PC00.TRP1, 0x02) // Device Wake
                }

                If ((\_SB.PC00.TRP2.HPME () == One))
                {
                    ADBG ("Wake TBT RP2 and DMA")
                    Notify (\_SB.PC00.TDM1, 0x02) // Device Wake
                    Notify (\_SB.PC00.TRP2, 0x02) // Device Wake
                }

                If ((\_SB.PC00.TRP3.HPME () == One))
                {
                    ADBG ("Wake TBT RP3 and DMA")
                    Notify (\_SB.PC00.TDM1, 0x02) // Device Wake
                    Notify (\_SB.PC00.TRP3, 0x02) // Device Wake
                }
            }

            \_SB.PC00.RP10.HPME ()
            \_SB.PC00.RP11.HPME ()
            \_SB.PC00.RP12.HPME ()
        }

        Method (SLA0, 0, NotSerialized)
        {
            Sleep (0x64)
            If (CondRefOf (\_SB.PC00.RP01))
            {
                If (((\_SB.PC00.RP01.VDID != 0xFFFFFFFF) && \_SB.PC00.RP01.HPSX))
                {
                    If (\_SB.PC00.RP01.PDCX)
                    {
                        \_SB.PC00.RP01.PDCX = One
                        \_SB.PC00.RP01.HPSX = One
                        If (!\_SB.PC00.RP01.PDSX)
                        {
                            \_SB.PC00.RP01.L0SE = Zero
                        }

                        Notify (\_SB.PC00.RP01, Zero) // Bus Check
                    }
                    Else
                    {
                        \_SB.PC00.RP01.HPSX = One
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.RP02))
            {
                If (((\_SB.PC00.RP02.VDID != 0xFFFFFFFF) && \_SB.PC00.RP02.HPSX))
                {
                    If (\_SB.PC00.RP02.PDCX)
                    {
                        \_SB.PC00.RP02.PDCX = One
                        \_SB.PC00.RP02.HPSX = One
                        If (!\_SB.PC00.RP02.PDSX)
                        {
                            \_SB.PC00.RP02.L0SE = Zero
                        }

                        Notify (\_SB.PC00.RP02, Zero) // Bus Check
                    }
                    Else
                    {
                        \_SB.PC00.RP02.HPSX = One
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.RP03))
            {
                If (((\_SB.PC00.RP03.VDID != 0xFFFFFFFF) && \_SB.PC00.RP03.HPSX))
                {
                    If (\_SB.PC00.RP03.PDCX)
                    {
                        \_SB.PC00.RP03.PDCX = One
                        \_SB.PC00.RP03.HPSX = One
                        If (!\_SB.PC00.RP03.PDSX)
                        {
                            \_SB.PC00.RP03.L0SE = Zero
                        }

                        Notify (\_SB.PC00.RP03, Zero) // Bus Check
                    }
                    Else
                    {
                        \_SB.PC00.RP03.HPSX = One
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.RP04))
            {
                If (((\_SB.PC00.RP04.VDID != 0xFFFFFFFF) && \_SB.PC00.RP04.HPSX))
                {
                    If (\_SB.PC00.RP04.PDCX)
                    {
                        \_SB.PC00.RP04.PDCX = One
                        \_SB.PC00.RP04.HPSX = One
                        If (!\_SB.PC00.RP04.PDSX)
                        {
                            \_SB.PC00.RP04.L0SE = Zero
                        }

                        Notify (\_SB.PC00.RP04, Zero) // Bus Check
                    }
                    Else
                    {
                        \_SB.PC00.RP04.HPSX = One
                    }
                }
            }
        }

        Method (SLA1, 0, NotSerialized)
        {
            Sleep (0x64)
            If (CondRefOf (\_SB.PC00.RP05))
            {
                If (((\_SB.PC00.RP05.VDID != 0xFFFFFFFF) && \_SB.PC00.RP05.HPSX))
                {
                    If (\_SB.PC00.RP05.PDCX)
                    {
                        \_SB.PC00.RP05.PDCX = One
                        \_SB.PC00.RP05.HPSX = One
                        If (!\_SB.PC00.RP05.PDSX)
                        {
                            \_SB.PC00.RP05.L0SE = Zero
                        }

                        Notify (\_SB.PC00.RP05, Zero) // Bus Check
                    }
                    Else
                    {
                        \_SB.PC00.RP05.HPSX = One
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.RP06))
            {
                If (((\_SB.PC00.RP06.VDID != 0xFFFFFFFF) && \_SB.PC00.RP06.HPSX))
                {
                    If (\_SB.PC00.RP06.PDCX)
                    {
                        \_SB.PC00.RP06.PDCX = One
                        \_SB.PC00.RP06.HPSX = One
                        If (!\_SB.PC00.RP06.PDSX)
                        {
                            \_SB.PC00.RP06.L0SE = Zero
                        }

                        Notify (\_SB.PC00.RP06, Zero) // Bus Check
                    }
                    Else
                    {
                        \_SB.PC00.RP06.HPSX = One
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.RP07))
            {
                If (((\_SB.PC00.RP07.VDID != 0xFFFFFFFF) && \_SB.PC00.RP07.HPSX))
                {
                    If (\_SB.PC00.RP07.PDCX)
                    {
                        \_SB.PC00.RP07.PDCX = One
                        \_SB.PC00.RP07.HPSX = One
                        If (!\_SB.PC00.RP07.PDSX)
                        {
                            \_SB.PC00.RP07.L0SE = Zero
                        }

                        Notify (\_SB.PC00.RP07, Zero) // Bus Check
                    }
                    Else
                    {
                        \_SB.PC00.RP07.HPSX = One
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.RP08))
            {
                If (((\_SB.PC00.RP08.VDID != 0xFFFFFFFF) && \_SB.PC00.RP08.HPSX))
                {
                    If (\_SB.PC00.RP08.PDCX)
                    {
                        \_SB.PC00.RP08.PDCX = One
                        \_SB.PC00.RP08.HPSX = One
                        If (!\_SB.PC00.RP08.PDSX)
                        {
                            \_SB.PC00.RP08.L0SE = Zero
                        }

                        Notify (\_SB.PC00.RP08, Zero) // Bus Check
                    }
                    Else
                    {
                        \_SB.PC00.RP08.HPSX = One
                    }
                }
            }
        }

        Method (SLA2, 0, NotSerialized)
        {
            Sleep (0x64)
            If (CondRefOf (\_SB.PC00.RP09))
            {
                If (((\_SB.PC00.RP09.VDID != 0xFFFFFFFF) && \_SB.PC00.RP09.HPSX))
                {
                    If (\_SB.PC00.RP09.PDCX)
                    {
                        \_SB.PC00.RP09.PDCX = One
                        \_SB.PC00.RP09.HPSX = One
                        If (!\_SB.PC00.RP09.PDSX)
                        {
                            \_SB.PC00.RP09.L0SE = Zero
                        }

                        Notify (\_SB.PC00.RP09, Zero) // Bus Check
                    }
                    Else
                    {
                        \_SB.PC00.RP09.HPSX = One
                    }
                }
            }
        }

        Method (SLC0, 0, NotSerialized)
        {
            \_SB.PC00.RP01.HPME ()
            \_SB.PC00.RP02.HPME ()
            \_SB.PC00.RP03.HPME ()
            \_SB.PC00.RP04.HPME ()
        }

        Method (SLC1, 0, NotSerialized)
        {
            \_SB.PC00.RP05.HPME ()
            \_SB.PC00.RP06.HPME ()
            \_SB.PC00.RP07.HPME ()
            \_SB.PC00.RP08.HPME ()
        }

        Method (SLC2, 0, NotSerialized)
        {
            \_SB.PC00.RP09.HPME ()
        }
    }
}



TPM2
----
[000h 0000 004h]                   Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004 004h]                Table Length : 0000004C
[008h 0008 001h]                    Revision : 04
[009h 0009 001h]                    Checksum : 36
[00Ah 0010 006h]                      Oem ID : "MSI_NB"
[010h 0016 008h]                Oem Table ID : "MEGABOOK"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 002h]              Platform Class : 0000
[026h 0038 002h]                    Reserved : 0000
[028h 0040 008h]             Control Address : 00000000FED40040
[030h 0048 004h]                Start Method : 07 [Command Response Buffer]

[034h 0052 00Ch]           Method Parameters : 00 00 00 00 00 00 00 00 00 00 00 00
[040h 0064 004h]          Minimum Log Length : 00010000
[044h 0068 008h]                 Log Address : 0000000065834000

Raw Table Data: Length 76 (0x4C)

    0000: 54 50 4D 32 4C 00 00 00 04 36 4D 53 49 5F 4E 42  // TPM2L....6MSI_NB
    0010: 4D 45 47 41 42 4F 4F 4B 01 00 00 00 41 4D 49 20  // MEGABOOK....AMI 
    0020: 00 00 00 00 00 00 00 00 40 00 D4 FE 00 00 00 00  // ........@.......
    0030: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 01 00 00 40 83 65 00 00 00 00              // .....@.e....


UEFI1
-----
[000h 0000 004h]                   Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004 004h]                Table Length : 0000005C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : E5
[00Ah 0010 006h]                      Oem ID : "INTEL"
[010h 0016 008h]                Oem Table ID : "RstVmdV"
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 010h]             UUID Identifier : E4DD92E0-AC7D-11DF-94E2-0800200C9A66
[034h 0052 002h]                 Data Offset : 0036

Raw Table Data: Length 92 (0x5C)

    0000: 55 45 46 49 5C 00 00 00 01 E5 49 4E 54 45 4C 00  // UEFI\.....INTEL.
    0010: 52 73 74 56 6D 64 56 00 00 00 00 00 49 4E 54 4C  // RstVmdV.....INTL
    0020: 00 00 00 00 E0 92 DD E4 7D AC DF 11 94 E2 08 00  // ........}.......
    0030: 20 0C 9A 66 36 00 24 56 45 52 02 02 14 00 01 00  //  ..f6.$VER......
    0040: 00 00 77 16 26 2C 37 00 7E 00 06 00 20 00 02 04  // ..w.&,7.~... ...
    0050: 37 00 00 AF 25 00 00 02 3B CE 00 00              // 7...%...;...


UEFI2
-----
[000h 0000 004h]                   Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004 004h]                Table Length : 00000048
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 6C
[00Ah 0010 006h]                      Oem ID : "MSI_NB"
[010h 0016 008h]                Oem Table ID : "MEGABOOK"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 01000013

[024h 0036 010h]             UUID Identifier : BAEDB05D-F2CE-485B-B454-C251870CDEFC
[034h 0052 002h]                 Data Offset : 0036

Raw Table Data: Length 72 (0x48)

    0000: 55 45 46 49 48 00 00 00 01 6C 4D 53 49 5F 4E 42  // UEFIH....lMSI_NB
    0010: 4D 45 47 41 42 4F 4F 4B 09 20 07 01 41 4D 49 20  // MEGABOOK. ..AMI 
    0020: 13 00 00 01 5D B0 ED BA CE F2 5B 48 B4 54 C2 51  // ....].....[H.T.Q
    0030: 87 0C DE FC 36 00 02 00 98 3F C2 68 00 00 00 00  // ....6....?.h....
    0040: D9 00 00 00 18 00 00 00                          // ........


UEFI3
-----
[000h 0000 004h]                   Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004 004h]                Table Length : 0000063A
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 4B
[00Ah 0010 006h]                      Oem ID : "INTEL"
[010h 0016 008h]                Oem Table ID : "RstVmdE"
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 00000000

[024h 0036 010h]             UUID Identifier : B73C1974-784D-4991-9692-6776E38AAA82
[034h 0052 002h]                 Data Offset : 0036

Raw Table Data: Length 1594 (0x63A)

    0000: 55 45 46 49 3A 06 00 00 01 4B 49 4E 54 45 4C 00  // UEFI:....KINTEL.
    0010: 52 73 74 56 6D 64 45 00 00 00 00 00 49 4E 54 4C  // RstVmdE.....INTL
    0020: 00 00 00 00 74 19 3C B7 4D 78 91 49 96 92 67 76  // ....t.<.Mx.I..gv
    0030: E3 8A AA 82 36 00 00 00 00 00 00 00 00 00 00 00  // ....6...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0530: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0630: 00 00 00 00 00 00 00 00 00 00                    // ..........


WSMT
----
[000h 0000 004h]                   Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 2C
[00Ah 0010 006h]                      Oem ID : "MSI_NB"
[010h 0016 008h]                Oem Table ID : "MEGABOOK"
[018h 0024 004h]                Oem Revision : 01072009
[01Ch 0028 004h]             Asl Compiler ID : "AMI "
[020h 0032 004h]       Asl Compiler Revision : 00010013

[024h 0036 004h]            Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 2C 4D 53 49 5F 4E 42  // WSMT(....,MSI_NB
    0010: 4D 45 47 41 42 4F 4F 4B 09 20 07 01 41 4D 49 20  // MEGABOOK. ..AMI 
    0020: 13 00 01 00 07 00 00 00                          // ........


