
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20221020
Copyright (c) 2000 - 2022 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00001B5F  0x02  "CpuRef"  "CpuSsdt "  0x00003000  "INTL"   0x20160527
 02)  MCFG  0x0000003C  0x01  "HPQOEM"  "85B9    "  0x00000001  "HP  "   0x00000001
 03)  APIC  0x0000012C  0x03  "HPQOEM"  "85B9    "  0x00000001  "HP  "   0x00000001
 04)  SLIC  0x00000176  0x01  "HPQOEM"  "SLIC-BPC"  0x00000001  "HP  "   0x00000001
 05)  SSDT  0x000002D7  0x01  "HP    "  "NVTEC   "  0x00000001  "INTL"   0x20160527
 06)  SSDT  0x0000013B  0x01  "HP    "  "HPNBCONV"  0x00001000  "INTL"   0x20160527
 07)  TPM2  0x00000034  0x04  "INTEL "  "CFL-ULT "  0x20170001  "INTL"   0x20160422
 08)  SSDT  0x000000F4  0x02  "PmRef "  "Cpu0Psd "  0x00003000  "INTL"   0x20160527
 09)  SSDT  0x00013C70  0x02  "HP    "  "HPTBT   "  0x00001000  "INTL"   0x20160527
 10)  SSDT  0x00001CD6  0x01  "HP    "  "TABLETPC"  0x00001000  "INTL"   0x20160527
 11)  SSDT  0x00000069  0x01  "HP    "  "HPCAHWID"  0x00001000  "INTL"   0x20160527
 12)  NHLT  0x000017F1  0x00  "INTEL "  "CFL-ULT "  0x20170001  "INTL"   0x20160422
 13)  SSDT  0x000003CE  0x02  "INTEL "  "Tpm2Tabl"  0x00001000  "INTL"   0x20160527
 14)  UEFI  0x00000042  0x01  "INTEL "  "CFL-ULT "  0x20170001  "INTL"   0x20160422
 15)  DSDT  0x0002753F  0x02  "HPQOEM"  "85B9    "  0x00000000  "INTL"   0x20160527
 16)  SSDT  0x00001575  0x02  "HP    "  "UcsiAcpi"  0x00000001  "INTL"   0x20160527
 17)  SSDT  0x0000010F  0x01  "HP    "  "PECNBSDT"  0x00001000  "INTL"   0x20160527
 18)  SSDT  0x00003904  0x02  "DptfTa"  "DptfTabl"  0x00001000  "INTL"   0x20160527
 19)  WSMT  0x00000028  0x01  "INTEL "  "CFL-ULT "  0x20170001  "INTL"   0x20160422
 20)  LPIT  0x0000005C  0x01  "INTEL "  "CFL-ULT "  0x20170001  "INTL"   0x20160422
 21)  SSDT  0x000009CF  0x02  "CtdpB "  "CtdpB   "  0x00001000  "INTL"   0x20160527
 22)  SSDT  0x00001377  0x01  "HP    "  "HPINNBWL"  0x00001000  "INTL"   0x20160527
 23)  SSDT  0x00000746  0x02  "HPQOEM"  "PtidDevc"  0x00001000  "INTL"   0x20160527
 24)  SSDT  0x0000012A  0x02  "HP    "  "ShmTable"  0x00000001  "INTL"   0x20160527
 25)  SSDT  0x000002D6  0x01  "HP    "  "INTTPL  "  0x00001000  "INTL"   0x20160527
 26)  DMAR  0x000000C8  0x01  "INTEL "  "WHL     "  0x00000002  "INTL"   0x01000013
 27)  FACP  0x00000114  0x06  "HPQOEM"  "SLIC-BPC"  0x00000000  "HP  "   0x00000001
 28)  FPDT  0x00000044  0x01  "INTEL "  "CFL-ULT "  0x20170001  "INTL"   0x20160422
 29)  SSDT  0x00001334  0x01  "HP    "  "PSENWSAR"  0x00001000  "INTL"   0x20160527
 30)  SSDT  0x00000821  0x01  "HP    "  "HPINWWAN"  0x00001000  "INTL"   0x20160527
 31)  SSDT  0x000002F9  0x02  "HP    "  "PwrCtlEv"  0x00000001  "INTL"   0x20160527
 32)  MSDM  0x00000055  0x03  "HPQOEM"  "SLIC-BPC"  0x00000000  "HP  "   0x00000001
 33)  SSDT  0x0000678C  0x01  "HPQOEM"  "MS-SSDT "  0x00003000  "INTL"   0x20160527
 34)  RTMA  0x0000009E  0x01  "HP    "  "_HBMART_"  0x00001000  "HP  "   0x00000001
 35)  OEML  0x00000028  0x03  "INTEL "  "CFL-ULT "  0x20170001  "INTL"   0x20160422
 36)  SSDT  0x000000FB  0x02  "HP    "  "UcsiCntr"  0x00000001  "INTL"   0x20160527
 37)  SSDT  0x00000115  0x01  "HP    "  "HPSANIMD"  0x00001000  "INTL"   0x20160527
 38)  SSDT  0x00003125  0x02  "SaSsdt"  "SaSsdt  "  0x00003000  "INTL"   0x20160527
 39)  HPET  0x00000038  0x01  "HPQOEM"  "85B9    "  0x00000001  "HP  "   0x00000001
 40)  SSDT  0x0000CE82  0x02  "AcpiRe"  "PLT_RTD3"  0x00001000  "INTL"   0x20160527
 41)  SSDT  0x00000032  0x01  "HP    "  "HPCONDEV"  0x00001000  "INTL"   0x20160527
 42)  FACS  0x00000040  0x02
 43)  BGRT  0x00000038  0x01  "INTEL "  "CFL-ULT "  0x20170001  "INTL"   0x20160422
 44)  SSDT  0x000007F3  0x02  "HPQOEM"  "HP_XHC_P"  0x00000000  "INTL"   0x20160527
 45)  WSMT  0x00000028  0x01  "HPQOEM"  "85B9    "  0x00000001  "HP  "   0x00000001
 46)  SSDT  0x000004FD  0x02  "PmRef "  "Cpu0Ist "  0x00003000  "INTL"   0x20160527
 47)  SSDT  0x00000AB0  0x02  "PmRef "  "ApPsd   "  0x00003000  "INTL"   0x20160527
 48)  SSDT  0x000005FC  0x02  "PmRef "  "ApIst   "  0x00003000  "INTL"   0x20160527
 49)  SSDT  0x00000400  0x02  "PmRef "  "Cpu0Cst "  0x00003001  "INTL"   0x20160527
 50)  SSDT  0x0000030A  0x02  "PmRef "  "ApCst   "  0x00003000  "INTL"   0x20160527

Found 50 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 0000012C
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 16
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "85B9    "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "HP  "
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 01
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 02
[037h 0055 001h]               Local Apic ID : 02
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 00 [Processor Local APIC]
[03Dh 0061 001h]                      Length : 08
[03Eh 0062 001h]                Processor ID : 03
[03Fh 0063 001h]               Local Apic ID : 04
[040h 0064 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068 001h]               Subtable Type : 00 [Processor Local APIC]
[045h 0069 001h]                      Length : 08
[046h 0070 001h]                Processor ID : 04
[047h 0071 001h]               Local Apic ID : 06
[048h 0072 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076 001h]               Subtable Type : 00 [Processor Local APIC]
[04Dh 0077 001h]                      Length : 08
[04Eh 0078 001h]                Processor ID : 05
[04Fh 0079 001h]               Local Apic ID : 01
[050h 0080 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084 001h]               Subtable Type : 00 [Processor Local APIC]
[055h 0085 001h]                      Length : 08
[056h 0086 001h]                Processor ID : 06
[057h 0087 001h]               Local Apic ID : 03
[058h 0088 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092 001h]               Subtable Type : 00 [Processor Local APIC]
[05Dh 0093 001h]                      Length : 08
[05Eh 0094 001h]                Processor ID : 07
[05Fh 0095 001h]               Local Apic ID : 05
[060h 0096 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100 001h]               Subtable Type : 00 [Processor Local APIC]
[065h 0101 001h]                      Length : 08
[066h 0102 001h]                Processor ID : 08
[067h 0103 001h]               Local Apic ID : 07
[068h 0104 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108 001h]               Subtable Type : 00 [Processor Local APIC]
[06Dh 0109 001h]                      Length : 08
[06Eh 0110 001h]                Processor ID : 09
[06Fh 0111 001h]               Local Apic ID : FF
[070h 0112 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[074h 0116 001h]               Subtable Type : 00 [Processor Local APIC]
[075h 0117 001h]                      Length : 08
[076h 0118 001h]                Processor ID : 0A
[077h 0119 001h]               Local Apic ID : FF
[078h 0120 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[07Ch 0124 001h]               Subtable Type : 00 [Processor Local APIC]
[07Dh 0125 001h]                      Length : 08
[07Eh 0126 001h]                Processor ID : 0B
[07Fh 0127 001h]               Local Apic ID : FF
[080h 0128 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[084h 0132 001h]               Subtable Type : 00 [Processor Local APIC]
[085h 0133 001h]                      Length : 08
[086h 0134 001h]                Processor ID : 0C
[087h 0135 001h]               Local Apic ID : FF
[088h 0136 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[08Ch 0140 001h]               Subtable Type : 00 [Processor Local APIC]
[08Dh 0141 001h]                      Length : 08
[08Eh 0142 001h]                Processor ID : 0D
[08Fh 0143 001h]               Local Apic ID : FF
[090h 0144 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[094h 0148 001h]               Subtable Type : 00 [Processor Local APIC]
[095h 0149 001h]                      Length : 08
[096h 0150 001h]                Processor ID : 0E
[097h 0151 001h]               Local Apic ID : FF
[098h 0152 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[09Ch 0156 001h]               Subtable Type : 00 [Processor Local APIC]
[09Dh 0157 001h]                      Length : 08
[09Eh 0158 001h]                Processor ID : 0F
[09Fh 0159 001h]               Local Apic ID : FF
[0A0h 0160 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0A4h 0164 001h]               Subtable Type : 00 [Processor Local APIC]
[0A5h 0165 001h]                      Length : 08
[0A6h 0166 001h]                Processor ID : 10
[0A7h 0167 001h]               Local Apic ID : FF
[0A8h 0168 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ACh 0172 001h]               Subtable Type : 01 [I/O APIC]
[0ADh 0173 001h]                      Length : 0C
[0AEh 0174 001h]                 I/O Apic ID : 02
[0AFh 0175 001h]                    Reserved : 00
[0B0h 0176 004h]                     Address : FEC00000
[0B4h 0180 004h]                   Interrupt : 00000000

[0B8h 0184 001h]               Subtable Type : 02 [Interrupt Source Override]
[0B9h 0185 001h]                      Length : 0A
[0BAh 0186 001h]                         Bus : 00
[0BBh 0187 001h]                      Source : 00
[0BCh 0188 004h]                   Interrupt : 00000002
[0C0h 0192 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[0C2h 0194 001h]               Subtable Type : 02 [Interrupt Source Override]
[0C3h 0195 001h]                      Length : 0A
[0C4h 0196 001h]                         Bus : 00
[0C5h 0197 001h]                      Source : 09
[0C6h 0198 004h]                   Interrupt : 00000009
[0CAh 0202 002h]       Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[0CCh 0204 001h]               Subtable Type : 04 [Local APIC NMI]
[0CDh 0205 001h]                      Length : 06
[0CEh 0206 001h]                Processor ID : 01
[0CFh 0207 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0D1h 0209 001h]        Interrupt Input LINT : 01

[0D2h 0210 001h]               Subtable Type : 04 [Local APIC NMI]
[0D3h 0211 001h]                      Length : 06
[0D4h 0212 001h]                Processor ID : 02
[0D5h 0213 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0D7h 0215 001h]        Interrupt Input LINT : 01

[0D8h 0216 001h]               Subtable Type : 04 [Local APIC NMI]
[0D9h 0217 001h]                      Length : 06
[0DAh 0218 001h]                Processor ID : 03
[0DBh 0219 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0DDh 0221 001h]        Interrupt Input LINT : 01

[0DEh 0222 001h]               Subtable Type : 04 [Local APIC NMI]
[0DFh 0223 001h]                      Length : 06
[0E0h 0224 001h]                Processor ID : 04
[0E1h 0225 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E3h 0227 001h]        Interrupt Input LINT : 01

[0E4h 0228 001h]               Subtable Type : 04 [Local APIC NMI]
[0E5h 0229 001h]                      Length : 06
[0E6h 0230 001h]                Processor ID : 05
[0E7h 0231 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E9h 0233 001h]        Interrupt Input LINT : 01

[0EAh 0234 001h]               Subtable Type : 04 [Local APIC NMI]
[0EBh 0235 001h]                      Length : 06
[0ECh 0236 001h]                Processor ID : 06
[0EDh 0237 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0EFh 0239 001h]        Interrupt Input LINT : 01

[0F0h 0240 001h]               Subtable Type : 04 [Local APIC NMI]
[0F1h 0241 001h]                      Length : 06
[0F2h 0242 001h]                Processor ID : 07
[0F3h 0243 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0F5h 0245 001h]        Interrupt Input LINT : 01

[0F6h 0246 001h]               Subtable Type : 04 [Local APIC NMI]
[0F7h 0247 001h]                      Length : 06
[0F8h 0248 001h]                Processor ID : 08
[0F9h 0249 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0FBh 0251 001h]        Interrupt Input LINT : 01

[0FCh 0252 001h]               Subtable Type : 04 [Local APIC NMI]
[0FDh 0253 001h]                      Length : 06
[0FEh 0254 001h]                Processor ID : 09
[0FFh 0255 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[101h 0257 001h]        Interrupt Input LINT : 01

[102h 0258 001h]               Subtable Type : 04 [Local APIC NMI]
[103h 0259 001h]                      Length : 06
[104h 0260 001h]                Processor ID : 0A
[105h 0261 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[107h 0263 001h]        Interrupt Input LINT : 01

[108h 0264 001h]               Subtable Type : 04 [Local APIC NMI]
[109h 0265 001h]                      Length : 06
[10Ah 0266 001h]                Processor ID : 0B
[10Bh 0267 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[10Dh 0269 001h]        Interrupt Input LINT : 01

[10Eh 0270 001h]               Subtable Type : 04 [Local APIC NMI]
[10Fh 0271 001h]                      Length : 06
[110h 0272 001h]                Processor ID : 0C
[111h 0273 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[113h 0275 001h]        Interrupt Input LINT : 01

[114h 0276 001h]               Subtable Type : 04 [Local APIC NMI]
[115h 0277 001h]                      Length : 06
[116h 0278 001h]                Processor ID : 0D
[117h 0279 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[119h 0281 001h]        Interrupt Input LINT : 01

[11Ah 0282 001h]               Subtable Type : 04 [Local APIC NMI]
[11Bh 0283 001h]                      Length : 06
[11Ch 0284 001h]                Processor ID : 0E
[11Dh 0285 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[11Fh 0287 001h]        Interrupt Input LINT : 01

[120h 0288 001h]               Subtable Type : 04 [Local APIC NMI]
[121h 0289 001h]                      Length : 06
[122h 0290 001h]                Processor ID : 0F
[123h 0291 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[125h 0293 001h]        Interrupt Input LINT : 01

[126h 0294 001h]               Subtable Type : 04 [Local APIC NMI]
[127h 0295 001h]                      Length : 06
[128h 0296 001h]                Processor ID : 10
[129h 0297 002h]       Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[12Bh 0299 001h]        Interrupt Input LINT : 01

Raw Table Data: Length 300 (0x12C)

    0000: 41 50 49 43 2C 01 00 00 03 16 48 50 51 4F 45 4D  // APIC,.....HPQOEM
    0010: 38 35 42 39 20 20 20 20 01 00 00 00 48 50 20 20  // 85B9    ....HP  
    0020: 01 00 00 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 03 04  // ................
    0040: 01 00 00 00 00 08 04 06 01 00 00 00 00 08 05 01  // ................
    0050: 01 00 00 00 00 08 06 03 01 00 00 00 00 08 07 05  // ................
    0060: 01 00 00 00 00 08 08 07 01 00 00 00 00 08 09 FF  // ................
    0070: 00 00 00 00 00 08 0A FF 00 00 00 00 00 08 0B FF  // ................
    0080: 00 00 00 00 00 08 0C FF 00 00 00 00 00 08 0D FF  // ................
    0090: 00 00 00 00 00 08 0E FF 00 00 00 00 00 08 0F FF  // ................
    00A0: 00 00 00 00 00 08 10 FF 00 00 00 00 01 0C 02 00  // ................
    00B0: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    00C0: 00 00 02 0A 00 09 09 00 00 00 0D 00 04 06 01 05  // ................
    00D0: 00 01 04 06 02 05 00 01 04 06 03 05 00 01 04 06  // ................
    00E0: 04 05 00 01 04 06 05 05 00 01 04 06 06 05 00 01  // ................
    00F0: 04 06 07 05 00 01 04 06 08 05 00 01 04 06 09 05  // ................
    0100: 00 01 04 06 0A 05 00 01 04 06 0B 05 00 01 04 06  // ................
    0110: 0C 05 00 01 04 06 0D 05 00 01 04 06 0E 05 00 01  // ................
    0120: 04 06 0F 05 00 01 04 06 10 05 00 01              // ............


BGRT
----
[000h 0000 004h]                   Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 12
[00Ah 0010 006h]                      Oem ID : "INTEL "
[010h 0016 008h]                Oem Table ID : "CFL-ULT"
[018h 0024 004h]                Oem Revision : 20170001
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 20160422

[024h 0036 002h]                     Version : 0001
[026h 0038 001h]      Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039 001h]                  Image Type : 00
[028h 0040 008h]               Image Address : 0000000091A16000
[030h 0048 004h]               Image OffsetX : 0000019C
[034h 0052 004h]               Image OffsetY : 000000F7

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 12 49 4E 54 45 4C 20  // BGRT8.....INTEL 
    0010: 43 46 4C 2D 55 4C 54 00 01 00 17 20 49 4E 54 4C  // CFL-ULT.... INTL
    0020: 22 04 16 20 01 00 01 00 00 60 A1 91 00 00 00 00  // ".. .....`......
    0030: 9C 01 00 00 F7 00 00 00                          // ........


DMAR
----
[000h 0000 004h]                   Signature : "DMAR"    [DMA Remapping Table]
[004h 0004 004h]                Table Length : 000000C8
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : E4
[00Ah 0010 006h]                      Oem ID : "INTEL "
[010h 0016 008h]                Oem Table ID : "WHL     "
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 01000013

[024h 0036 001h]          Host Address Width : 26
[025h 0037 001h]                       Flags : 01
[026h 0038 00Ah]                    Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050 002h]                      Length : 0018

[034h 0052 001h]                       Flags : 00
[035h 0053 001h]                    Reserved : 00
[036h 0054 002h]          PCI Segment Number : 0000
[038h 0056 008h]       Register Base Address : 00000000FED90000

[040h 0064 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[041h 0065 001h]                Entry Length : 08
[042h 0066 002h]                    Reserved : 0000
[044h 0068 001h]              Enumeration ID : 00
[045h 0069 001h]              PCI Bus Number : 00

[046h 0070 002h]                    PCI Path : 02,00


[048h 0072 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[04Ah 0074 002h]                      Length : 0020

[04Ch 0076 001h]                       Flags : 01
[04Dh 0077 001h]                    Reserved : 00
[04Eh 0078 002h]          PCI Segment Number : 0000
[050h 0080 008h]       Register Base Address : 00000000FED91000

[058h 0088 001h]           Device Scope Type : 03 [IOAPIC Device]
[059h 0089 001h]                Entry Length : 08
[05Ah 0090 002h]                    Reserved : 0000
[05Ch 0092 001h]              Enumeration ID : 02
[05Dh 0093 001h]              PCI Bus Number : 00

[05Eh 0094 002h]                    PCI Path : 1E,07


[060h 0096 001h]           Device Scope Type : 04 [Message-capable HPET Device]
[061h 0097 001h]                Entry Length : 08
[062h 0098 002h]                    Reserved : 0000
[064h 0100 001h]              Enumeration ID : 00
[065h 0101 001h]              PCI Bus Number : 00

[066h 0102 002h]                    PCI Path : 1E,06


[068h 0104 002h]               Subtable Type : 0001 [Reserved Memory Region]
[06Ah 0106 002h]                      Length : 0020

[06Ch 0108 002h]                    Reserved : 0000
[06Eh 0110 002h]          PCI Segment Number : 0000
[070h 0112 008h]                Base Address : 00000000977F5000
[078h 0120 008h]         End Address (limit) : 0000000097814FFF

[080h 0128 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[081h 0129 001h]                Entry Length : 08
[082h 0130 002h]                    Reserved : 0000
[084h 0132 001h]              Enumeration ID : 00
[085h 0133 001h]              PCI Bus Number : 00

[086h 0134 002h]                    PCI Path : 14,00


[088h 0136 002h]               Subtable Type : 0001 [Reserved Memory Region]
[08Ah 0138 002h]                      Length : 0020

[08Ch 0140 002h]                    Reserved : 0000
[08Eh 0142 002h]          PCI Segment Number : 0000
[090h 0144 008h]                Base Address : 000000009C000000
[098h 0152 008h]         End Address (limit) : 000000009E7FFFFF

[0A0h 0160 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[0A1h 0161 001h]                Entry Length : 08
[0A2h 0162 002h]                    Reserved : 0000
[0A4h 0164 001h]              Enumeration ID : 00
[0A5h 0165 001h]              PCI Bus Number : 00

[0A6h 0166 002h]                    PCI Path : 02,00


[0A8h 0168 002h]               Subtable Type : 0001 [Reserved Memory Region]
[0AAh 0170 002h]                      Length : 0020

[0ACh 0172 002h]                    Reserved : 0000
[0AEh 0174 002h]          PCI Segment Number : 0000
[0B0h 0176 008h]                Base Address : 0000000097846000
[0B8h 0184 008h]         End Address (limit) : 00000000978C5FFF

[0C0h 0192 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[0C1h 0193 001h]                Entry Length : 08
[0C2h 0194 002h]                    Reserved : 0000
[0C4h 0196 001h]              Enumeration ID : 00
[0C5h 0197 001h]              PCI Bus Number : 00

[0C6h 0198 002h]                    PCI Path : 16,07


Raw Table Data: Length 200 (0xC8)

    0000: 44 4D 41 52 C8 00 00 00 01 E4 49 4E 54 45 4C 20  // DMAR......INTEL 
    0010: 57 48 4C 20 20 20 20 20 02 00 00 00 49 4E 54 4C  // WHL     ....INTL
    0020: 13 00 00 01 26 01 00 00 00 00 00 00 00 00 00 00  // ....&...........
    0030: 00 00 18 00 00 00 00 00 00 00 D9 FE 00 00 00 00  // ................
    0040: 01 08 00 00 00 00 02 00 00 00 20 00 01 00 00 00  // .......... .....
    0050: 00 10 D9 FE 00 00 00 00 03 08 00 00 02 00 1E 07  // ................
    0060: 04 08 00 00 00 00 1E 06 01 00 20 00 00 00 00 00  // .......... .....
    0070: 00 50 7F 97 00 00 00 00 FF 4F 81 97 00 00 00 00  // .P.......O......
    0080: 01 08 00 00 00 00 14 00 01 00 20 00 00 00 00 00  // .......... .....
    0090: 00 00 00 9C 00 00 00 00 FF FF 7F 9E 00 00 00 00  // ................
    00A0: 01 08 00 00 00 00 02 00 01 00 20 00 00 00 00 00  // .......... .....
    00B0: 00 60 84 97 00 00 00 00 FF 5F 8C 97 00 00 00 00  // .`......._......
    00C0: 01 08 00 00 00 00 16 07                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "HPQOEM", "85B9    ", 0x00000000)
{
    External (_GPE.G001, MethodObj)    // 1 Arguments
    External (_GPE.G014, MethodObj)    // 0 Arguments
    External (_GPE.HLVT, MethodObj)    // 0 Arguments
    External (_GPE.TINI, MethodObj)    // 3 Arguments
    External (_SB_.BGIA, UnknownObj)
    External (_SB_.BGMA, UnknownObj)
    External (_SB_.BGMS, UnknownObj)
    External (_SB_.CFGD, UnknownObj)
    External (_SB_.CFHP, MethodObj)    // 0 Arguments
    External (_SB_.CPPC, IntObj)
    External (_SB_.DSAE, UnknownObj)
    External (_SB_.DTS1, UnknownObj)
    External (_SB_.DTS2, UnknownObj)
    External (_SB_.DTS3, UnknownObj)
    External (_SB_.DTS4, UnknownObj)
    External (_SB_.DTSE, UnknownObj)
    External (_SB_.DTSF, UnknownObj)
    External (_SB_.ELNG, UnknownObj)
    External (_SB_.EMNA, UnknownObj)
    External (_SB_.EPCS, UnknownObj)
    External (_SB_.G0A6, MethodObj)    // 1 Arguments
    External (_SB_.G0A7, MethodObj)    // 1 Arguments
    External (_SB_.G0AD, MethodObj)    // 0 Arguments
    External (_SB_.GGOV, MethodObj)    // 1 Arguments
    External (_SB_.HIDD, DeviceObj)
    External (_SB_.HIDD._STA, MethodObj)    // 0 Arguments
    External (_SB_.HIDD.HPEM, MethodObj)    // 1 Arguments
    External (_SB_.IETM, DeviceObj)
    External (_SB_.IETM.CCOF, MethodObj)    // 0 Arguments
    External (_SB_.IETM.CCON, MethodObj)    // 0 Arguments
    External (_SB_.IETM.DOSS, UnknownObj)
    External (_SB_.IETM.ODVP, MethodObj)    // 0 Arguments
    External (_SB_.PCCD.PENB, IntObj)
    External (_SB_.PCI0.CTCD, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.CTCN, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.G0A0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.G0C1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GFX0, DeviceObj)
    External (_SB_.PCI0.GFX0.AINT, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GFX0.ALSI, UnknownObj)
    External (_SB_.PCI0.GFX0.BCLP, UnknownObj)
    External (_SB_.PCI0.GFX0.CBLV, UnknownObj)
    External (_SB_.PCI0.GFX0.CDCK, UnknownObj)
    External (_SB_.PCI0.GFX0.CDDS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GFX0.CLID, UnknownObj)
    External (_SB_.PCI0.GFX0.G030, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GFX0.GDCK, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GFX0.GHDS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GFX0.GIVD, IntObj)
    External (_SB_.PCI0.GFX0.GLID, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GFX0.GSCI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GFX0.GSSE, UnknownObj)
    External (_SB_.PCI0.GFX0.STAT, UnknownObj)
    External (_SB_.PCI0.GFX0.TCHE, UnknownObj)
    External (_SB_.PCI0.HDAS.PPMS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.HDAS.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.HDAS.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.HIDW, MethodObj)    // 4 Arguments
    External (_SB_.PCI0.HIWC, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.I2C1.INC1, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPCB.EC0_.BCSC, UnknownObj)
    External (_SB_.PCI0.LPCB.EC0_.EC10, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPCB.EC0_.EC12, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPCB.EC0_.EC13, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPCB.EC0_.PSCF, UnknownObj)
    External (_SB_.PCI0.LPCB.EC0_.UDTS, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.LPCB.EC0_.UPBT, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.LPCB.H_EC.XDAT, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PAUD.PUAM, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PEG0, DeviceObj)
    External (_SB_.PCI0.PEG0.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PEG1, DeviceObj)
    External (_SB_.PCI0.PEG1.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PEG2, DeviceObj)
    External (_SB_.PCI0.PEG2.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP01.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP01.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP01.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP01.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP01.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP01.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP02.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP02.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP02.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP02.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP02.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP02.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP03.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP03.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP03.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP03.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP03.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP03.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP04.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP04.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP04.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP04.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP04.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP04.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP05.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP05.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP05.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP05.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP05.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP05.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP05.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP06.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP06.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP06.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP06.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP06.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP06.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP07.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP07.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP07.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP07.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP07.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP07.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP07.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP07.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP08.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP08.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP08.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP08.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP08.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP08.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP09.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP09.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP09.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP09.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP09.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP09.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP09.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP09.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP10.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP10.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP10.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP10.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP10.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP10.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP11.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP11.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP11.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP11.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP11.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP11.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP11.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP11.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP12.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP12.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP12.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP12.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP12.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP12.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP13.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP13.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP13.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP13.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP13.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP13.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP13.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP13.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP14.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP14.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP14.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP14.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP14.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP14.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP15.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP15.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP15.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP15.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP15.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP15.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP15.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP15.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP16.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP16.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP16.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP16.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP16.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP16.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP17.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP17.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP17.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP17.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP17.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP17.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP17.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP17.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP18.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP18.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP18.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP18.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP18.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP18.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP19.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP19.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP19.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP19.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP19.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP19.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP19.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP19.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP20.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP20.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP20.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP20.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP20.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP20.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP21.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP21.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP21.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP21.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP21.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP21.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP21.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP22.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP22.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP22.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP22.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP22.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP23.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP23.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP23.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP23.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP23.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP23.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP23.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP24.NFRP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP24.PINI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP24.PPBA, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.RP24.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP24.UPRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.SAT0.PRT0.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT0.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT0.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT1.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT1.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT1.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT2.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT2.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT2.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT3.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT3.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT3.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT4.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT4.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT4.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT5.GPEH, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT5.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT5.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.SATC, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.SAT0.SATD, MethodObj)    // 4 Arguments
    External (_SB_.PCI0.XDCI.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XDCI.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XHC_.DUAM, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XHC_.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XHC_.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XHC_.RHUB.INIR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XHC_.RHUB.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XHC_.RHUB.PS2X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XHC_.RHUB.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PDTS, UnknownObj)
    External (_SB_.PKGA, UnknownObj)
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR00.LPSS, PkgObj)
    External (_SB_.PR00.TPSS, PkgObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.TPM_.PTS_, MethodObj)    // 1 Arguments
    External (_SB_.TRPD, UnknownObj)
    External (_SB_.TRPF, UnknownObj)
    External (_SB_.VMOF, MethodObj)    // 0 Arguments
    External (_SB_.VMON, MethodObj)    // 0 Arguments
    External (_TZ_.BOTT, MethodObj)    // 0 Arguments
    External (_TZ_.RETD, MethodObj)    // 0 Arguments
    External (ALSE, UnknownObj)
    External (BGIA, IntObj)
    External (BGMA, IntObj)
    External (BGMS, IntObj)
    External (CPDL, UnknownObj)
    External (CPL2, UnknownObj)
    External (CPL3, UnknownObj)
    External (CPL4, UnknownObj)
    External (CPL5, UnknownObj)
    External (CPL6, UnknownObj)
    External (CPL7, UnknownObj)
    External (CPL8, UnknownObj)
    External (CTCL, UnknownObj)
    External (D1F0, FieldUnitObj)
    External (D1F1, FieldUnitObj)
    External (D1F2, FieldUnitObj)
    External (DFEN, UnknownObj)    // Conflicts with a later declaration
    External (EC14, FieldUnitObj)
    External (EC15, FieldUnitObj)
    External (ECNT, MethodObj)    // 1 Arguments
    External (ELNG, IntObj)
    External (EMNA, IntObj)
    External (GFX0.BCLP, UnknownObj)
    External (GFX0.CLID, UnknownObj)
    External (GFX0.CPDL, UnknownObj)
    External (GFX0.CPL2, UnknownObj)
    External (GFX0.CPL3, UnknownObj)
    External (GFX0.CPL4, UnknownObj)
    External (GFX0.CPL5, UnknownObj)
    External (GFX0.CPL6, UnknownObj)
    External (GFX0.CPL7, UnknownObj)
    External (GFX0.CPL8, UnknownObj)
    External (GFX0.DD1F, DeviceObj)
    External (GFX0.GIVD, UnknownObj)
    External (GFX0.NADL, UnknownObj)
    External (GFX0.NDL2, UnknownObj)
    External (GFX0.NDL3, UnknownObj)
    External (GFX0.NDL4, UnknownObj)
    External (GFX0.NDL5, UnknownObj)
    External (GFX0.NDL6, UnknownObj)
    External (GFX0.NDL7, UnknownObj)
    External (GFX0.NDL8, UnknownObj)
    External (GIVD, UnknownObj)
    External (GSMI, UnknownObj)
    External (LHIH, UnknownObj)
    External (LLOW, UnknownObj)
    External (M32B, UnknownObj)
    External (M32L, UnknownObj)
    External (M64B, UnknownObj)
    External (M64L, UnknownObj)
    External (MDBG, MethodObj)    // 1 Arguments
    External (NADL, IntObj)
    External (NDL2, IntObj)
    External (NDL3, IntObj)
    External (NDL4, IntObj)
    External (NDL5, IntObj)
    External (NDL6, IntObj)
    External (NDL7, IntObj)
    External (NDL8, IntObj)
    External (ODV7, UnknownObj)    // Conflicts with a later declaration
    External (PC00, IntObj)
    External (PC01, UnknownObj)
    External (PC02, UnknownObj)
    External (PC03, UnknownObj)
    External (PC04, UnknownObj)
    External (PC05, UnknownObj)
    External (PC06, UnknownObj)
    External (PC07, UnknownObj)
    External (PC08, UnknownObj)
    External (PC09, UnknownObj)
    External (PC10, UnknownObj)
    External (PC11, UnknownObj)
    External (PC12, UnknownObj)
    External (PC13, UnknownObj)
    External (PC14, UnknownObj)
    External (PC15, UnknownObj)
    External (PCRR, MethodObj)    // 2 Arguments
    External (PCRW, MethodObj)    // 3 Arguments
    External (PL1E, UnknownObj)    // Conflicts with a later declaration
    External (PL2E, UnknownObj)
    External (PMST.PMC4, FieldUnitObj)
    External (PPL1, UnknownObj)    // Conflicts with a later declaration
    External (PPL2, UnknownObj)
    External (RPN0, FieldUnitObj)
    External (RPN1, FieldUnitObj)
    External (RPS0, FieldUnitObj)
    External (RPS1, FieldUnitObj)
    External (RPT0, FieldUnitObj)
    External (RPT1, FieldUnitObj)
    External (RTBT, IntObj)
    External (SEN1, DeviceObj)
    External (SEN2, DeviceObj)
    External (SGMD, UnknownObj)
    External (SZMD, IntObj)
    External (TBPE, IntObj)
    External (TBSE, FieldUnitObj)
    External (TBTS, FieldUnitObj)
    External (TOFF, IntObj)
    External (TPM_._STA, UnknownObj)
    External (TRD3, IntObj)
    External (XBAS, UnknownObj)

    OperationRegion (HPSA, SystemMemory, 0x97B20000, 0x00000008)
    Field (HPSA, AnyAcc, Lock, Preserve)
    {
        SFG1,   4, 
        SFG2,   4, 
        Offset (0x04), 
        LPDP,   16, 
        OSIF,   8, 
        PRDT,   8
    }

    Name (GOSI, 0xFF)
    Method (GTOS, 0, Serialized)
    {
        If ((GOSI == 0xFF))
        {
            GOSI = Zero
            If (CondRefOf (\_OSI))
            {
                If (_OSI ("Linux"))
                {
                    GOSI = One
                }

                If (_OSI ("Windows 2001"))
                {
                    GOSI = 0x04
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    GOSI = 0x04
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    GOSI = 0x05
                }

                If (_OSI ("Windows 2006"))
                {
                    GOSI = 0x06
                }

                If (_OSI ("Windows 2009"))
                {
                    GOSI = 0x07
                }

                If (_OSI ("Windows 2012"))
                {
                    GOSI = 0x08
                }

                If (_OSI ("Windows 2013"))
                {
                    GOSI = 0x09
                }

                If (_OSI ("Windows 2015"))
                {
                    GOSI = 0x0A
                }

                If (_OSI ("Windows 2016"))
                {
                    GOSI = 0x0B
                }

                If (_OSI ("Windows 2017"))
                {
                    GOSI = 0x0C
                }
            }

            OSIF = GOSI /* \GOSI */
        }

        Return (GOSI) /* \GOSI */
    }

    Method (B2I4, 3, Serialized)
    {
        Name (INTE, 0xFFFFFFFF)
        INTE &= Zero
        Local2 = Arg2
        If ((Local2 > 0x04))
        {
            Local2 = 0x04
        }

        Local1 = (Arg1 * 0x08)
        Local3 = (Local2 * 0x08)
        CreateField (Arg0, Local1, Local3, TINT)
        INTE = TINT /* \B2I4.TINT */
        Return (INTE) /* \B2I4.INTE */
    }

    Name (B2SD, "                                                                                                                                                                                                                                                               ")
    Name
    Method (B2ST, 2, Serialized)
    {
        If ((Arg1 > Zero))
        {
            Local0 = Buffer (Arg1){}
            Local0 = Arg0
            If ((Arg1 > 0x0100))
            {
                B2S4 = Local0
                Local1 = B2S4 /* \B2S4 */
            }
            Else
            {
                B2SD = Local0
                Local1 = B2SD /* \B2SD */
            }
        }
        Else
        {
            B2SD = Arg0
            Local1 = B2SD /* \B2SD */
        }

        Return (Local1)
    }

    Method (CPBF, 5, Serialized)
    {
        Local7 = Zero
        Local1 = DerefOf (Arg1)
        Local3 = DerefOf (Arg3)
        If ((((Local1 + Arg4) <= SizeOf (Arg0)) && (
            (Local3 + Arg4) <= SizeOf (Arg2))))
        {
            CreateField (Arg0, (Local1 * 0x08), (Arg4 * 0x08), DEST)
            CreateField (Arg2, (Local3 * 0x08), (Arg4 * 0x08), SRCE)
            DEST = SRCE /* \CPBF.SRCE */
            Local7 = One
            Local1 += Arg4
            Local3 += Arg4
            Arg1 = Local1
            Arg3 = Local3
        }

        Return (Local7)
    }

    OperationRegion (HPMA, SystemMemory, 0x97B0C000, 0x0000005C)
    Field (HPMA, AnyAcc, Lock, Preserve)
    {
        RVD2,   4, 
        LEGF,   1, 
        KCDB,   1, 
        KLDB,   1, 
        TPMX,   1, 
        FOAL,   1, 
        AEDA,   1, 
        ALSF,   1, 
        HSED,   1, 
        HDEN,   1, 
        MDEN,   1, 
        ICPT,   1, 
        PMCS,   1, 
        RVD1,   3, 
        ITPS,   1, 
        FCIN,   1, 
        RSVD,   11, 
        TBDO,   8, 
        TBRB,   32, 
        TJMX,   8, 
        TRCN,   8, 
        LOTR,   160, 
        HITR,   160, 
        DTCD,   32, 
        SMHO,   32, 
        IVPS,   8, 
        BLPS,   8, 
        UR0B,   32, 
        AC10,   32, 
        AC11,   32, 
        AC12,   32, 
        CFAP,   8, 
        CFIG,   32, 
        CFPG,   32, 
        AMFR,   32, 
        SNMT,   8, 
        SZMD,   8
    }

    OperationRegion (HPEC, SystemMemory, 0x97B1C000, 0x00000004)
    Field (HPEC, AnyAcc, Lock, Preserve)
    {
        EC14,   16, 
        EC15,   16
    }

    OperationRegion (HPGF, SystemMemory, 0x97B19000, 0x0000026C)
    Field (HPGF, AnyAcc, Lock, Preserve)
    {
        G03E,   2048, 
        G07D,   32, 
        G07E,   8, 
        G07F,   8, 
        G080,   8, 
        G081,   8, 
        G082,   88, 
        G083,   216, 
        G084,   200, 
        G085,   400, 
        G086,   16, 
        G087,   16, 
        G088,   8, 
        G089,   88, 
        G08A,   176, 
        G08B,   32, 
        G08C,   32, 
        G08D,   8, 
        G08E,   8, 
        G08F,   16, 
        G090,   16, 
        G091,   16, 
        G092,   16, 
        G093,   8, 
        G045,   8, 
        G094,   8, 
        G03F,   32, 
        G040,   8, 
        G041,   32, 
        G042,   32, 
        G043,   32, 
        G044,   32, 
        G046,   8, 
        G047,   8, 
        G048,   32, 
        G049,   8, 
        G04A,   8, 
        G04B,   32, 
        G04C,   8, 
        G04D,   8, 
        G04E,   32, 
        G04F,   8, 
        G050,   8, 
        G051,   32, 
        G052,   8, 
        G076,   32, 
        G077,   32, 
        G078,   32, 
        G079,   224, 
        G095,   32, 
        G096,   32, 
        G053,   8, 
        G054,   32, 
        G055,   8, 
        G056,   8, 
        G057,   32, 
        G058,   8, 
        G059,   8, 
        G05A,   32, 
        G05B,   8, 
        G05C,   8, 
        G05D,   32, 
        G05E,   8, 
        G05F,   8, 
        G060,   8, 
        G064,   8, 
        G065,   8, 
        G066,   8, 
        G061,   32, 
        G062,   32, 
        G067,   32, 
        G068,   32, 
        G069,   8, 
        G06A,   8, 
        G06B,   8, 
        G06C,   8, 
        G06D,   32, 
        G063,   8, 
        G06E,   8, 
        G06F,   8, 
        G070,   8, 
        G071,   8, 
        G072,   8, 
        G073,   16, 
        G074,   32, 
        G07A,   32, 
        G07B,   32, 
        G07C,   32, 
        G0BD,   16, 
        G0B7,   8, 
        G0C2,   8, 
        G0C3,   8, 
        G0C4,   32, 
        G0C5,   8, 
        G0C6,   8, 
        G0C7,   8, 
        G0C8,   8
    }

    OperationRegion (HPTR, SystemMemory, 0x97B1D000, 0x000000E0)
    Field (HPTR, AnyAcc, Lock, Preserve)
    {
        TH00,   32, 
        TH01,   32, 
        TH02,   32, 
        TH03,   32, 
        DGPV,   8, 
        DFEN,   8, 
        APLH,   8, 
        APLL,   8, 
        APLD,   8, 
        NPLH,   8, 
        NPLL,   8, 
        NPLD,   8, 
        NGTH,   8, 
        NGTL,   8, 
        NGTN,   8, 
        TDPS,   8, 
        PLD2,   16, 
        PLD4,   16, 
        PDC2,   16, 
        PDC4,   16, 
        MXDP,   8, 
        ODV6,   8, 
        ODV7,   8, 
        ODV8,   8, 
        ODV9,   8, 
        ODVA,   8, 
        ODVB,   8, 
        ODVC,   8, 
        ODVD,   8, 
        ODVE,   8, 
        ODVF,   8, 
        NTGP,   8, 
        DDC1,   8, 
        DDC2,   8, 
        DDC3,   8, 
        DDC4,   8, 
        DDC5,   8, 
        T035,   8, 
        T036,   8, 
        T037,   8, 
        T038,   8, 
        T039,   8, 
        T03A,   8, 
        T03B,   8, 
        T03C,   8, 
        T03D,   8, 
        T03E,   8, 
        DDCF,   8, 
        PV01,   32, 
        PV02,   32, 
        PV03,   32, 
        PV04,   32, 
        PV05,   16, 
        PV06,   16, 
        PV07,   16, 
        PV08,   16, 
        PV09,   16, 
        PV0A,   16, 
        PV0B,   16, 
        PV0C,   16, 
        PV0D,   16, 
        PV0E,   16, 
        PV0F,   16, 
        PV10,   16, 
        PV11,   32, 
        PV12,   32, 
        PV13,   32, 
        PV14,   32, 
        PV15,   32, 
        PV16,   32, 
        PV17,   32, 
        PV18,   32, 
        PV19,   32, 
        PV1A,   32, 
        PV1B,   16, 
        PV1C,   32, 
        PV1D,   8, 
        PV1E,   8, 
        PV1F,   8, 
        PV20,   8, 
        PV21,   8, 
        PV22,   8, 
        PV23,   8, 
        T09D,   8, 
        T09E,   8, 
        T09F,   8, 
        P101,   32, 
        P102,   32, 
        P103,   32, 
        P104,   32, 
        P105,   32, 
        P106,   32, 
        P107,   32, 
        P108,   32, 
        P109,   32, 
        P110,   32, 
        P111,   32, 
        P112,   32, 
        P113,   32, 
        P114,   32, 
        P115,   32, 
        P116,   32
    }

    OperationRegion (HPTT, SystemMemory, 0x97B17000, 0x00000008)
    Field (HPTT, AnyAcc, Lock, Preserve)
    {
        TBP1,   32, 
        TBP2,   32
    }

    Scope (\)
    {
        PowerResource (PIN, 0x00, 0x0000)
        {
            Method (STA, 1, Serialized)
            {
                If ((\_SB.GGOV (DerefOf (Arg0 [Zero])) == DerefOf (Arg0 [One]
                    )))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (ON, 1, Serialized)
            {
                ADBG (Concatenate ("PINH GPIO=", ToHexString (DerefOf (Arg0 [Zero]))))
                \_SB.SGOV (DerefOf (Arg0 [Zero]), DerefOf (Arg0 [One]))
            }

            Method (OFF, 1, Serialized)
            {
                ADBG (Concatenate ("PINL GPIO=", ToHexString (DerefOf (Arg0 [Zero]))))
                \_SB.SGOV (DerefOf (Arg0 [Zero]), ~DerefOf (Arg0 [One])
                    )
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
            }
        }
    }

    OperationRegion (HPCD, SystemMemory, 0x97B1E000, 0x000000FF)
    Field (HPCD, AnyAcc, Lock, Preserve)
    {
        CDP1,   32, 
        CDP2,   32, 
        WDDA,   896, 
        WFLS,   8, 
        WLID,   8, 
        BTID,   8, 
        WWID,   8, 
        W2ID,   8, 
        GSID,   8, 
        WGID,   8, 
        WRD1,   16, 
        WRD2,   16, 
        WTXE,   8, 
        WTX0,   8, 
        WTX1,   8, 
        WTX2,   8, 
        WTX3,   8, 
        WTX4,   8, 
        WTX5,   8, 
        WTX6,   8, 
        WTX7,   8, 
        WTX8,   8, 
        WTX9,   8, 
        WGEN,   8, 
        WGR1,   8, 
        WGR2,   8, 
        WGR3,   8, 
        WGR4,   8, 
        DSDG,   8, 
        DWRS,   8, 
        DWNS,   8, 
        DS21,   8, 
        DS22,   8, 
        DS23,   8, 
        DS24,   8, 
        DS25,   8, 
        DS26,   8, 
        DS27,   8, 
        DS28,   8, 
        DS29,   8, 
        DS2A,   8, 
        DS31,   8, 
        DS32,   8, 
        DS33,   8, 
        DS34,   8, 
        DS35,   8, 
        DS36,   8, 
        DS37,   8, 
        DS38,   8, 
        DS39,   8, 
        DS3A,   8, 
        DS41,   8, 
        DS42,   8, 
        DS43,   8, 
        DS44,   8, 
        DS45,   8, 
        DS46,   8, 
        DS47,   8, 
        DS48,   8, 
        DS49,   8, 
        DS4A,   8, 
        DSCS,   32, 
        NF2M,   8, 
        NF2A,   8, 
        NF2B,   8, 
        NF5M,   8, 
        NF5A,   8, 
        NF5B,   8, 
        NJ2M,   8, 
        NJ2A,   8, 
        NJ2B,   8, 
        NJ5M,   8, 
        NJ5A,   8, 
        NJ5B,   8, 
        NR2M,   8, 
        NR2A,   8, 
        NR2B,   8, 
        NR5M,   8, 
        NR5A,   8, 
        NR5B,   8, 
        WOWA,   8, 
        WWIG,   8, 
        UGPS,   8, 
        WWBR,   32, 
        WPPE,   32, 
        WPWK,   32, 
        WCLN,   16, 
        CDKP,   192, 
        RFGN,   32, 
        RFCR,   32, 
        WPWN,   32
    }

    OperationRegion (HPWM, SystemMemory, 0x97AF9000, 0x00009018)
    Field (HPWM, AnyAcc, NoLock, Preserve)
    {
        PWOT,   32, 
        PWOI,   32, 
        PUWB,   294912, 
        PUWS,   32, 
        STIC,   16, 
        INIC,   16, 
        ENIC,   16, 
        OLIC,   16, 
        PWIC,   16, 
        BUIC,   16
    }

    Field (HPWM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        PWBL,   8000
    }

    Field (HPWM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        PWBM,   3200
    }

    Field (HPWM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        PWBS,   1200
    }

    Device (_SB.WMIB)
    {
        Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
        Name (_UID, One)  // _UID: Unique ID
        Mutex (PUMX, 0x00)
        Name (WDG, Buffer (0xF0)
        {
            /* 0000 */  0xE3, 0x08, 0x8D, 0x98, 0xF4, 0x68, 0x35, 0x4C,  // .....h5L
            /* 0008 */  0xAF, 0x3E, 0x6A, 0x1B, 0x81, 0x06, 0xF8, 0x3C,  // .>j....<
            /* 0010 */  0x53, 0x54, 0x00, 0x00, 0x3D, 0xDE, 0x32, 0x82,  // ST..=.2.
            /* 0018 */  0x3D, 0x66, 0x27, 0x43, 0xA8, 0xF4, 0xE2, 0x93,  // =f'C....
            /* 0020 */  0xAD, 0xB9, 0xBF, 0x05, 0x49, 0x4E, 0x00, 0x00,  // ....IN..
            /* 0028 */  0x49, 0x4B, 0x11, 0x2D, 0xFB, 0x2D, 0x30, 0x41,  // IK.-.-0A
            /* 0030 */  0xB8, 0xFE, 0x4A, 0x3C, 0x09, 0xE7, 0x51, 0x33,  // ..J<..Q3
            /* 0038 */  0x45, 0x4E, 0x00, 0x00, 0x46, 0x97, 0xEA, 0x14,  // EN..F...
            /* 0040 */  0x1F, 0xCE, 0x98, 0x40, 0xA0, 0xE0, 0x70, 0x45,  // ...@..pE
            /* 0048 */  0xCB, 0x4D, 0xA7, 0x45, 0x4F, 0x4C, 0x00, 0x00,  // .M.EOL..
            /* 0050 */  0x28, 0x20, 0x2F, 0x32, 0x84, 0x0F, 0x01, 0x49,  // ( /2...I
            /* 0058 */  0x98, 0x8E, 0x01, 0x51, 0x76, 0x04, 0x9E, 0x2D,  // ...Qv..-
            /* 0060 */  0x50, 0x57, 0x00, 0x00, 0xB6, 0x63, 0x4E, 0xDF,  // PW...cN.
            /* 0068 */  0xBC, 0x3B, 0x58, 0x48, 0x97, 0x37, 0xC7, 0x4F,  // .;XH.7.O
            /* 0070 */  0x82, 0xF8, 0x21, 0xF3, 0x42, 0x55, 0x00, 0x00,  // ..!.BU..
            /* 0078 */  0x2D, 0x7C, 0x22, 0x41, 0xE1, 0x80, 0x3F, 0x42,  // -|"A..?B
            /* 0080 */  0x8B, 0x8E, 0x87, 0xE3, 0x27, 0x55, 0xA0, 0xEB,  // ....'U..
            /* 0088 */  0x50, 0x45, 0x02, 0x00, 0x36, 0x64, 0x1F, 0x8F,  // PE..6d..
            /* 0090 */  0x42, 0x9F, 0xC8, 0x42, 0xBA, 0xDC, 0x0E, 0x94,  // B..B....
            /* 0098 */  0x24, 0xF2, 0x0C, 0x9A, 0x53, 0x53, 0x00, 0x00,  // $...SS..
            /* 00A0 */  0xEB, 0x91, 0x4C, 0x1F, 0x5C, 0xDC, 0x0B, 0x46,  // ..L.\..F
            /* 00A8 */  0x95, 0x1D, 0xC7, 0xCB, 0x9B, 0x4B, 0x8D, 0x5E,  // .....K.^
            /* 00B0 */  0x42, 0x53, 0x01, 0x02, 0x61, 0xA6, 0x91, 0x73,  // BS..a..s
            /* 00B8 */  0x3A, 0x22, 0xDB, 0x47, 0xA7, 0x7A, 0x7B, 0xE8,  // :".G.z{.
            /* 00C0 */  0x4C, 0x60, 0x82, 0x2D, 0x55, 0x49, 0x01, 0x02,  // L`.-UI..
            /* 00C8 */  0x18, 0x43, 0x81, 0x2B, 0xE8, 0x4B, 0x07, 0x47,  // .C.+.K.G
            /* 00D0 */  0x9D, 0x84, 0xA1, 0x90, 0xA8, 0x59, 0xB5, 0xD0,  // .....Y..
            /* 00D8 */  0x80, 0x00, 0x01, 0x08, 0x21, 0x12, 0x90, 0x05,  // ....!...
            /* 00E0 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
            /* 00E8 */  0xC9, 0x06, 0x29, 0x10, 0x5A, 0x5A, 0x01, 0x00   // ..).ZZ..
        })
        Name (WDUN, Ones)
        Method (_WDG, 0, Serialized)
        {
            If (WDUN)
            {
                Acquire (PUMX, 0xFFFF)
                WDUN = Zero
                GSWS (0x04F3)
                UWIC (Zero, STIC)
                UWIC (One, INIC)
                UWIC (0x02, ENIC)
                UWIC (0x03, OLIC)
                If ((PWIC == Zero))
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = PWIC /* \PWIC */
                }

                UWIC (0x04, Local0)
                UWIC (0x05, BUIC)
                UWIC (0x06, SizeOf (CBWE))
                UWIC (0x07, WSSC)
                Release (PUMX)
            }

            Return (WDG) /* \_SB_.WMIB.WDG_ */
        }

        Method (UWIC, 2, Serialized)
        {
            Local0 = (Arg0 * 0x14)
            Local0 += 0x12
            WDG [Local0] = Arg1
        }

        Name (WQZZ, Buffer (0x1CF5)
        {
            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
            /* 0008 */  0xE5, 0x1C, 0x00, 0x00, 0x18, 0x96, 0x00, 0x00,  // ........
            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
            /* 0018 */  0x28, 0xB9, 0x86, 0x00, 0x01, 0x06, 0x18, 0x42,  // (......B
            /* 0020 */  0x10, 0x3D, 0x10, 0x92, 0x64, 0x82, 0x42, 0x04,  // .=..d.B.
            /* 0028 */  0x12, 0x01, 0x61, 0x18, 0x14, 0x01, 0x01, 0x92,  // ..a.....
            /* 0030 */  0x0B, 0x0E, 0x45, 0x82, 0x42, 0xF5, 0x27, 0x90,  // ..E.B.'.
            /* 0038 */  0x1C, 0x10, 0x99, 0x14, 0xA0, 0x5B, 0x80, 0x73,  // .....[.s
            /* 0040 */  0x01, 0xD2, 0x05, 0x18, 0x06, 0x91, 0x63, 0x01,  // ......c.
            /* 0048 */  0x96, 0x05, 0xE8, 0x44, 0x91, 0x6D, 0x10, 0x11,  // ...D.m..
            /* 0050 */  0x18, 0x2B, 0x41, 0x07, 0x10, 0x02, 0xF5, 0x00,  // .+A.....
            /* 0058 */  0x3C, 0x0A, 0xEE, 0x1A, 0x50, 0xE6, 0x47, 0x40,  // <...P.G@
            /* 0060 */  0x20, 0x0A, 0x82, 0x43, 0xC9, 0x80, 0x90, 0x72,  //  ..C...r
            /* 0068 */  0x38, 0x4D, 0xA0, 0xE4, 0x91, 0x50, 0x88, 0xC2,  // 8M...P..
            /* 0070 */  0x46, 0x83, 0x12, 0x02, 0x21, 0x87, 0x93, 0x91,  // F...!...
            /* 0078 */  0x4D, 0x01, 0x52, 0x05, 0x98, 0x15, 0x20, 0x54,  // M.R... T
            /* 0080 */  0x80, 0x45, 0x20, 0x8D, 0xC7, 0xD0, 0x4D, 0xCF,  // .E ...M.
            /* 0088 */  0x47, 0x9E, 0x21, 0x89, 0xFC, 0x41, 0xA0, 0x46,  // G.!..A.F
            /* 0090 */  0x66, 0x68, 0x1B, 0x9C, 0x96, 0x30, 0x43, 0xD6,  // fh...0C.
            /* 0098 */  0x3E, 0x2C, 0x2A, 0x16, 0x42, 0x0A, 0x20, 0x34,  // >,*.B. 4
            /* 00A0 */  0x1E, 0xF0, 0x2B, 0x14, 0xE0, 0x1B, 0x41, 0xB2,  // ..+...A.
            /* 00A8 */  0xB1, 0xC9, 0x80, 0x12, 0x0C, 0x34, 0x70, 0xF4,  // .....4p.
            /* 00B0 */  0x28, 0x3C, 0x68, 0x5C, 0x80, 0x41, 0x53, 0x51,  // (<h\.ASQ
            /* 00B8 */  0x20, 0x94, 0xC0, 0x52, 0x20, 0xE4, 0x15, 0x51,  //  ..R ..Q
            /* 00C0 */  0xF3, 0x2A, 0x11, 0x55, 0x47, 0x00, 0x8F, 0x24,  // .*.UG..$
            /* 00C8 */  0xCA, 0x63, 0x01, 0x1B, 0x37, 0xF0, 0x59, 0x85,  // .c..7.Y.
            /* 00D0 */  0x81, 0xFD, 0xFF, 0x1F, 0x18, 0x17, 0x03, 0xA2,  // ........
            /* 00D8 */  0xB1, 0x1C, 0x45, 0xD0, 0x03, 0x0F, 0x6A, 0xE1,  // ..E...j.
            /* 00E0 */  0x33, 0x27, 0x93, 0x3C, 0x46, 0x47, 0x85, 0x90,  // 3'.<FG..
            /* 00E8 */  0x04, 0x08, 0xCD, 0x21, 0x34, 0x46, 0x12, 0x84,  // ...!4F..
            /* 00F0 */  0x9C, 0x8E, 0x02, 0x05, 0x17, 0x3E, 0xCC, 0xF1,  // .....>..
            /* 00F8 */  0x19, 0xE7, 0xF8, 0x0C, 0xCF, 0x47, 0xDB, 0xFA,  // .....G..
            /* 0100 */  0xAC, 0x85, 0x10, 0x10, 0x8F, 0x73, 0x7C, 0x6C,  // .....s|l
            /* 0108 */  0xC0, 0xE0, 0x38, 0x18, 0x00, 0x87, 0x01, 0xE3,  // ..8.....
            /* 0110 */  0x13, 0x0D, 0x58, 0x4E, 0x06, 0x8C, 0x1A, 0x8F,  // ..XN....
            /* 0118 */  0xA1, 0x4F, 0x8B, 0x21, 0x1E, 0x5F, 0xD8, 0xB7,  // .O.!._..
            /* 0120 */  0x0A, 0x13, 0x54, 0x0F, 0x2A, 0x0B, 0x43, 0x03,  // ..T.*.C.
            /* 0128 */  0x0D, 0xA0, 0x87, 0x06, 0x5F, 0xE4, 0xD0, 0x4C,  // ...._..L
            /* 0130 */  0xE9, 0x21, 0x50, 0xAD, 0x78, 0x9A, 0xF7, 0x91,  // .!P.x...
            /* 0138 */  0xC7, 0x3C, 0xB7, 0x28, 0x6F, 0x03, 0xCF, 0x01,  // .<.(o...
            /* 0140 */  0xFC, 0xB4, 0xE0, 0xE1, 0xF8, 0x58, 0xE0, 0x71,  // .....X.q
            /* 0148 */  0xDA, 0x18, 0x84, 0x94, 0x41, 0xC8, 0x19, 0x84,  // ....A...
            /* 0150 */  0xA4, 0x41, 0x28, 0xD9, 0x10, 0x50, 0x83, 0xF5,  // .A(..P..
            /* 0158 */  0x10, 0x30, 0x53, 0x4D, 0xE0, 0x24, 0x23, 0x40,  // .0SM.$#@
            /* 0160 */  0x65, 0x80, 0x90, 0xD5, 0xE9, 0xEA, 0x2C, 0x12,  // e.....,.
            /* 0168 */  0xE2, 0x34, 0x7B, 0x3F, 0x16, 0x90, 0xB1, 0x3E,  // .4{?...>
            /* 0170 */  0x18, 0x58, 0xB3, 0x80, 0xFF, 0xFF, 0x08, 0xCF,  // .X......
            /* 0178 */  0x35, 0xF6, 0x99, 0x3D, 0x1D, 0x60, 0x56, 0x11,  // 5..=.`V.
            /* 0180 */  0xAE, 0xE8, 0x1B, 0x06, 0x41, 0x7B, 0xB6, 0xF0,  // ....A{..
            /* 0188 */  0x35, 0x23, 0x60, 0xB8, 0x08, 0xE1, 0xD8, 0x1D,  // 5#`.....
            /* 0190 */  0xE0, 0x24, 0x3D, 0x92, 0x08, 0x2F, 0x08, 0xEC,  // .$=../..
            /* 0198 */  0xC4, 0x10, 0xE4, 0x6D, 0xC5, 0x93, 0x37, 0xAC,  // ...m..7.
            /* 01A0 */  0xA7, 0xDC, 0x27, 0x94, 0x40, 0x83, 0x19, 0xDB,  // ..'.@...
            /* 01A8 */  0x97, 0x01, 0x36, 0x2A, 0x5F, 0x0C, 0xE0, 0xCF,  // ..6*_...
            /* 01B0 */  0x24, 0xAC, 0x91, 0x4F, 0xF4, 0x50, 0x4D, 0x30,  // $..O.PM0
            /* 01B8 */  0xF9, 0xC5, 0x00, 0xCA, 0x2C, 0x7C, 0x3D, 0xF1,  // ....,|=.
            /* 01C0 */  0x15, 0xC1, 0xA8, 0x2F, 0x06, 0x2C, 0xE5, 0xC5,  // .../.,..
            /* 01C8 */  0x00, 0x54, 0x37, 0x0C, 0x5F, 0x0C, 0xE0, 0xCB,  // .T7._...
            /* 01D0 */  0xBD, 0x18, 0x80, 0x42, 0xDC, 0x3D, 0x80, 0x7A,  // ...B.=.z
            /* 01D8 */  0x80, 0x90, 0xAC, 0x71, 0x52, 0x6B, 0x37, 0x03,  // ...qRk7.
            /* 01E0 */  0x72, 0x36, 0x60, 0x30, 0x9E, 0x61, 0x18, 0x63,  // r6`0.a.c
            /* 01E8 */  0x84, 0xF1, 0x28, 0xC3, 0x98, 0x60, 0xEE, 0xDB,  // ..(..`..
            /* 01F0 */  0x01, 0xF4, 0x9C, 0xC3, 0x40, 0x25, 0xBC, 0x1D,  // ....@%..
            /* 01F8 */  0x40, 0x39, 0x07, 0x74, 0x79, 0x34, 0xA1, 0xA7,  // @9.ty4..
            /* 0200 */  0x80, 0xA7, 0x03, 0xCF, 0xEE, 0x8D, 0xC0, 0xBE,  // ........
            /* 0208 */  0xC6, 0x2A, 0x98, 0x40, 0x11, 0x1F, 0x34, 0xF8,  // .*.@..4.
            /* 0210 */  0xD4, 0xA2, 0xF8, 0x54, 0xE0, 0xB5, 0xD4, 0x08,  // ...T....
            /* 0218 */  0x27, 0x9C, 0x33, 0xF1, 0x54, 0x0D, 0x67, 0xA0,  // '.3.T.g.
            /* 0220 */  0xAA, 0xE1, 0x10, 0xFF, 0x7F, 0x38, 0xEC, 0xA9,  // .....8..
            /* 0228 */  0xE0, 0x35, 0x80, 0x41, 0xBC, 0xB1, 0x9C, 0x96,  // .5.A....
            /* 0230 */  0x11, 0x61, 0x1C, 0x52, 0x1E, 0x19, 0x6C, 0x0B,  // .a.R..l.
            /* 0238 */  0x87, 0x40, 0x86, 0x79, 0x27, 0x60, 0x90, 0x15,  // .@.y'`..
            /* 0240 */  0x9F, 0x77, 0x08, 0xF0, 0x2B, 0x42, 0x9C, 0x08,  // .w..+B..
            /* 0248 */  0xEF, 0x0C, 0xEC, 0xB2, 0x00, 0xBE, 0x48, 0x97,  // ......H.
            /* 0250 */  0x05, 0x34, 0xB4, 0x4F, 0x32, 0xBE, 0x20, 0x18,  // .4.O2. .
            /* 0258 */  0xF6, 0xC4, 0x59, 0x80, 0xBB, 0x02, 0xA8, 0x40,  // ..Y....@
            /* 0260 */  0x7D, 0x57, 0x80, 0x7F, 0x21, 0x78, 0x57, 0x00,  // }W..!xW.
            /* 0268 */  0xC3, 0xBC, 0x7C, 0x2B, 0xE0, 0x9A, 0x0E, 0x25,  // ..|+...%
            /* 0270 */  0xE8, 0x33, 0x89, 0xAF, 0x0B, 0xB8, 0x29, 0xB2,  // .3....).
            /* 0278 */  0x54, 0x47, 0x05, 0xE8, 0x29, 0x26, 0x81, 0xD2,  // TG..)&..
            /* 0280 */  0x7F, 0x54, 0x80, 0x34, 0xC3, 0x27, 0x92, 0xD7,  // .T.4.'..
            /* 0288 */  0x00, 0x9F, 0x16, 0xF8, 0x59, 0x88, 0x5D, 0x47,  // ....Y.]G
            /* 0290 */  0x70, 0x57, 0x12, 0x86, 0xF2, 0x6C, 0xE0, 0x4B,  // pW...l.K
            /* 0298 */  0x16, 0x3F, 0x1C, 0xC0, 0x00, 0xF7, 0x2C, 0x0E,  // .?....,.
            /* 02A0 */  0x31, 0x42, 0x6C, 0x76, 0xE0, 0x7A, 0x35, 0x78,  // 1Blv.z5x
            /* 02A8 */  0x2F, 0xF0, 0x85, 0x88, 0xFF, 0xFF, 0x4F, 0x06,  // /.....O.
            /* 02B0 */  0xE0, 0x13, 0x08, 0x8C, 0x3E, 0x1A, 0xD8, 0xAF,  // ....>...
            /* 02B8 */  0x00, 0x84, 0xE0, 0x65, 0x8E, 0x43, 0x73, 0x89,  // ...e.Cs.
            /* 02C0 */  0xF0, 0xA4, 0x63, 0xF8, 0x48, 0xCF, 0x2C, 0x7C,  // ..c.H.,|
            /* 02C8 */  0x06, 0xA7, 0xE5, 0x11, 0x98, 0xC0, 0x07, 0x1E,  // ........
            /* 02D0 */  0x32, 0x00, 0x7A, 0xCE, 0xF1, 0x00, 0xF8, 0x31,  // 2.z....1
            /* 02D8 */  0x22, 0xFE, 0xE1, 0x84, 0x0D, 0x1C, 0x3E, 0xCA,  // ".....>.
            /* 02E0 */  0x39, 0x1C, 0x8F, 0xAF, 0x24, 0x11, 0xEA, 0x82,  // 9...$...
            /* 02E8 */  0xD0, 0x21, 0xC2, 0x08, 0x07, 0x10, 0xE5, 0xBC,  // .!......
            /* 02F0 */  0xDF, 0x14, 0x4C, 0xE0, 0xE3, 0x80, 0x0F, 0x0C,  // ..L.....
            /* 02F8 */  0xFC, 0x14, 0xE7, 0x21, 0xC1, 0x98, 0x72, 0x14,  // ...!..r.
            /* 0300 */  0x7B, 0x9C, 0x14, 0x19, 0x1E, 0x3B, 0x35, 0x78,  // {....;5x
            /* 0308 */  0x3C, 0x1C, 0x1A, 0x87, 0xF8, 0x40, 0x70, 0xAE,  // <....@p.
            /* 0310 */  0x56, 0x3A, 0x43, 0xE4, 0x29, 0xC2, 0x93, 0x3A,  // V:C.)..:
            /* 0318 */  0xC2, 0x03, 0xC4, 0x0E, 0x80, 0xCB, 0x7B, 0x55,  // ......{U
            /* 0320 */  0x19, 0xC8, 0x3F, 0x04, 0x09, 0x82, 0x41, 0x5D,  // ..?...A]
            /* 0328 */  0x64, 0x7C, 0xD2, 0xC3, 0x0F, 0x81, 0x1D, 0x26,  // d|.....&
            /* 0330 */  0xD8, 0x39, 0xC9, 0x70, 0xFC, 0x00, 0xE0, 0x51,  // .9.p...Q
            /* 0338 */  0xBD, 0xE1, 0xBC, 0x74, 0x79, 0x98, 0x3E, 0x22,  // ...ty.>"
            /* 0340 */  0x84, 0x64, 0x47, 0x31, 0xDC, 0xA9, 0xC2, 0x57,  // .dG1...W
            /* 0348 */  0x05, 0x5F, 0x45, 0x8C, 0xF8, 0xB0, 0xE2, 0x53,  // ._E....S
            /* 0350 */  0x83, 0xA1, 0x60, 0x1C, 0x06, 0x30, 0x37, 0x42,  // ..`..07B
            /* 0358 */  0xDF, 0x13, 0x0C, 0xF5, 0x9E, 0x74, 0x18, 0x8F,  // .....t..
            /* 0360 */  0x84, 0x26, 0xF0, 0xA5, 0xE1, 0x28, 0x30, 0x47,  // .&...(0G
            /* 0368 */  0x0E, 0xDF, 0x96, 0x0C, 0xEF, 0xFF, 0x3F, 0x81,  // ......?.
            /* 0370 */  0xDD, 0x9F, 0x13, 0x84, 0xFF, 0x94, 0xF3, 0x7E,  // .......~
            /* 0378 */  0xF1, 0x16, 0xF0, 0xA8, 0x10, 0x23, 0xCA, 0x83,  // .....#..
            /* 0380 */  0x4A, 0x94, 0x48, 0xA7, 0x1B, 0x85, 0x79, 0xBB,  // J.H...y.
            /* 0388 */  0x39, 0x08, 0x22, 0x4A, 0x73, 0x73, 0x13, 0x52,  // 9."Jss.R
            /* 0390 */  0xA0, 0x28, 0x47, 0x1E, 0x33, 0x4E, 0xAC, 0x20,  // .(G.3N. 
            /* 0398 */  0x81, 0xDE, 0x37, 0xA2, 0x84, 0x8D, 0x11, 0x2E,  // ..7.....
            /* 03A0 */  0x50, 0xFB, 0xC7, 0x04, 0x36, 0x64, 0x7A, 0x56,  // P...6dzV
            /* 03A8 */  0xC0, 0x9D, 0x1D, 0xE0, 0x4E, 0x8F, 0x9F, 0x1E,  // ....N...
            /* 03B0 */  0x00, 0x27, 0x40, 0x4F, 0x0F, 0x60, 0x3B, 0x6F,  // .'@O.`;o
            /* 03B8 */  0xC0, 0x3D, 0x10, 0x20, 0xBE, 0x2B, 0x06, 0xA2,  // .=. .+..
            /* 03C0 */  0xC1, 0xAF, 0x2C, 0x14, 0x8E, 0x87, 0xBE, 0x59,  // ..,....Y
            /* 03C8 */  0xD1, 0x63, 0x09, 0xEE, 0x70, 0xE0, 0x23, 0x83,  // .c..p.#.
            /* 03D0 */  0x0F, 0x90, 0xB8, 0xA1, 0xF8, 0x50, 0x81, 0x3C,  // .....P.<
            /* 03D8 */  0x0B, 0x80, 0x62, 0xF4, 0x6C, 0x04, 0xEC, 0x06,  // ..b.l...
            /* 03E0 */  0xF3, 0xD2, 0xF2, 0xDE, 0xE0, 0xFF, 0xFF, 0x1C,  // ........
            /* 03E8 */  0x7C, 0x4A, 0xC1, 0x1D, 0x04, 0xC0, 0x77, 0x0C,  // |J....w.
            /* 03F0 */  0x00, 0xEF, 0x60, 0xB8, 0xAC, 0x31, 0xA3, 0x84,  // ..`..1..
            /* 03F8 */  0xC0, 0x68, 0xCC, 0xB8, 0x43, 0x08, 0x3F, 0x11,  // .h..C.?.
            /* 0400 */  0xE0, 0xC6, 0xEC, 0x71, 0x7B, 0xCC, 0xB8, 0xE3,  // ...q{...
            /* 0408 */  0x2C, 0x1F, 0xD5, 0x53, 0x46, 0x28, 0x1F, 0x38,  // ,..SF(.8
            /* 0410 */  0xD8, 0x39, 0xE3, 0x8D, 0x80, 0x0F, 0x1D, 0x78,  // .9.....x
            /* 0418 */  0x1C, 0x60, 0x70, 0x47, 0x0A, 0x30, 0x5E, 0x0E,  // .`pG.0^.
            /* 0420 */  0xD8, 0xD8, 0xC1, 0x1D, 0x84, 0x9C, 0x02, 0x59,  // .......Y
            /* 0428 */  0x3A, 0x8C, 0xC6, 0x8E, 0x93, 0x0D, 0xA4, 0x63,  // :......c
            /* 0430 */  0x8C, 0x0F, 0xB9, 0x1E, 0x3B, 0x6E, 0xB0, 0x1E,  // ....;n..
            /* 0438 */  0x3B, 0xEE, 0xF8, 0x82, 0xFF, 0xFF, 0x1F, 0x5F,  // ;......_
            /* 0440 */  0xE0, 0x8F, 0x81, 0x8B, 0x1F, 0x06, 0xFA, 0xE6,  // ........
            /* 0448 */  0xE7, 0xD1, 0x19, 0xDC, 0xC3, 0xF6, 0x09, 0x26,  // .......&
            /* 0450 */  0xC6, 0x1B, 0x4C, 0x88, 0x47, 0x96, 0x97, 0x96,  // ..L.G...
            /* 0458 */  0x08, 0x0F, 0x2D, 0xBE, 0xB9, 0xBC, 0xB4, 0xF8,  // ..-.....
            /* 0460 */  0x16, 0x63, 0x94, 0x10, 0x11, 0x0E, 0x26, 0xCE,  // .c....&.
            /* 0468 */  0x13, 0x8C, 0x11, 0x0E, 0x3C, 0x8A, 0x21, 0x22,  // ....<.!"
            /* 0470 */  0x9C, 0x40, 0x88, 0x93, 0x3E, 0xD9, 0x20, 0xE1,  // .@..>. .
            /* 0478 */  0x63, 0x84, 0x8D, 0x16, 0xE5, 0x09, 0x86, 0x8D,  // c.......
            /* 0480 */  0x85, 0x9F, 0x57, 0x3C, 0x78, 0x7E, 0x5A, 0xF3,  // ..W<x~Z.
            /* 0488 */  0x5D, 0xD0, 0x93, 0x39, 0xC7, 0x87, 0x2C, 0x4F,  // ]..9..,O
            /* 0490 */  0xED, 0x71, 0xD2, 0x87, 0x59, 0xDC, 0xA0, 0x1E,  // .q..Y...
            /* 0498 */  0x1C, 0xD9, 0x5D, 0xC7, 0xC7, 0x6B, 0xEC, 0x29,  // ..]..k.)
            /* 04A0 */  0xC8, 0x43, 0xE0, 0x27, 0x02, 0x5F, 0x10, 0x3D,  // .C.'._.=
            /* 04A8 */  0x59, 0xDF, 0xF5, 0xD8, 0xBD, 0xCC, 0x18, 0xD5,  // Y.......
            /* 04B0 */  0x4F, 0x01, 0x75, 0x4C, 0x39, 0x83, 0x57, 0x08,  // O.uL9.W.
            /* 04B8 */  0x76, 0xCF, 0xF3, 0x21, 0xDB, 0x77, 0x49, 0x36,  // v..!.wI6
            /* 04C0 */  0x0A, 0xDC, 0x21, 0xC1, 0x67, 0x24, 0x7E, 0xAA,  // ..!.g$~.
            /* 04C8 */  0xF0, 0x30, 0x3C, 0x0A, 0x18, 0x33, 0x78, 0x47,  // .0<..3xG
            /* 04D0 */  0x38, 0xB4, 0x10, 0x07, 0xFC, 0xBE, 0xCB, 0x86,  // 8.......
            /* 04D8 */  0x1A, 0xE3, 0xF4, 0x7C, 0xFE, 0x60, 0x83, 0x80,  // ...|.`..
            /* 04E0 */  0x0F, 0x75, 0xA8, 0x1E, 0xE6, 0x51, 0xBD, 0x14,  // .u...Q..
            /* 04E8 */  0x32, 0x9C, 0xB3, 0x83, 0x3B, 0x08, 0xEC, 0xF1,  // 2...;...
            /* 04F0 */  0xC3, 0x83, 0xE0, 0x37, 0x4B, 0x3E, 0x08, 0x76,  // ...7K>.v
            /* 04F8 */  0xBE, 0x79, 0x83, 0x33, 0xC8, 0x31, 0xFC, 0xFF,  // .y.3.1..
            /* 0500 */  0x8F, 0x01, 0xEE, 0x99, 0xCA, 0x47, 0x13, 0xC4,  // .....G..
            /* 0508 */  0x11, 0x10, 0x7D, 0xFE, 0xF0, 0x18, 0xDE, 0xE4,  // ..}.....
            /* 0510 */  0xF8, 0x70, 0xB0, 0x47, 0x0F, 0xDC, 0x49, 0x04,  // .p.G..I.
            /* 0518 */  0xEE, 0xB1, 0xEB, 0xA0, 0x7D, 0x8D, 0xF3, 0x45,  // ....}..E
            /* 0520 */  0x0B, 0xC6, 0x7D, 0xEF, 0x59, 0x04, 0xFC, 0x18,  // ..}.Y...
            /* 0528 */  0x8F, 0x2D, 0xE0, 0x38, 0x94, 0x80, 0x3B, 0xD8,  // .-.8..;.
            /* 0530 */  0x71, 0x8D, 0x43, 0x28, 0x0A, 0x8C, 0x0E, 0x25,  // q.C(...%
            /* 0538 */  0xB8, 0x18, 0x40, 0x82, 0x71, 0x8C, 0x33, 0x1A,  // ..@.q.3.
            /* 0540 */  0xFA, 0x12, 0xE9, 0x43, 0x1A, 0x9C, 0x41, 0xC3,  // ...C..A.
            /* 0548 */  0x9E, 0xE7, 0x13, 0x0A, 0xB7, 0x27, 0x40, 0xD1,  // .....'@.
            /* 0550 */  0x09, 0x05, 0x64, 0xB8, 0xCF, 0x20, 0xD8, 0x13,  // ..d.. ..
            /* 0558 */  0x02, 0x3F, 0x83, 0xF0, 0xFF, 0x3F, 0xF4, 0x71,  // .?...?.q
            /* 0560 */  0xBF, 0x37, 0xFA, 0xD4, 0xC8, 0xE6, 0xFE, 0x10,  // .7......
            /* 0568 */  0x70, 0x02, 0xE7, 0xCE, 0x4E, 0xCD, 0xB8, 0x33,  // p...N..3
            /* 0570 */  0x03, 0xF6, 0xFC, 0xE1, 0x21, 0xF0, 0x73, 0x81,  // ....!.s.
            /* 0578 */  0x87, 0xEF, 0x21, 0xE0, 0x07, 0xFF, 0xC0, 0x6C,  // ..!....l
            /* 0580 */  0x70, 0x30, 0x9E, 0x22, 0x7C, 0xED, 0xE0, 0xE0,  // p0."|...
            /* 0588 */  0xFC, 0x34, 0x60, 0x70, 0xFE, 0x0A, 0xF5, 0x79,  // .4`p...y
            /* 0590 */  0x9E, 0x81, 0x63, 0x4F, 0xBD, 0xBE, 0x77, 0x78,  // ..cO..wx
            /* 0598 */  0xBE, 0x3E, 0x54, 0xE0, 0x6F, 0x7A, 0x3E, 0x54,  // .>T.oz>T
            /* 05A0 */  0x80, 0xE3, 0xF0, 0xC0, 0x0F, 0x2B, 0x6C, 0x08,  // .....+l.
            /* 05A8 */  0x8F, 0x02, 0xF8, 0x53, 0x8B, 0x8F, 0x7F, 0x71,  // ...S...q
            /* 05B0 */  0x9E, 0x22, 0xD8, 0x6D, 0x04, 0x7B, 0xB8, 0x00,  // .".m.{..
            /* 05B8 */  0x1C, 0x45, 0x3B, 0x8B, 0xA1, 0xC2, 0x9C, 0xC5,  // .E;.....
            /* 05C0 */  0xE8, 0xFF, 0xFF, 0x1C, 0x85, 0x38, 0x8B, 0xD1,  // .....8..
            /* 05C8 */  0xC3, 0x05, 0xE0, 0x42, 0xF0, 0xF1, 0x00, 0x34,  // ...B...4
            /* 05D0 */  0x07, 0x81, 0xC7, 0x05, 0x5F, 0x08, 0x8E, 0xE4,  // ...._...
            /* 05D8 */  0x40, 0x9E, 0x0E, 0x00, 0x9F, 0xF2, 0x48, 0xE8,  // @.....H.
            /* 05E0 */  0xF9, 0xC8, 0x82, 0x60, 0x50, 0xE7, 0x03, 0x9F,  // ...`P...
            /* 05E8 */  0x50, 0x7C, 0xEC, 0xE0, 0x67, 0x03, 0xDF, 0xC8,  // P|..g...
            /* 05F0 */  0x3D, 0x54, 0x7E, 0x6A, 0xF6, 0x49, 0x9B, 0x07,  // =T~j.I..
            /* 05F8 */  0xFF, 0x49, 0xCB, 0x06, 0x8C, 0x02, 0x0D, 0x03,  // .I......
            /* 0600 */  0x35, 0x22, 0x1F, 0x91, 0xFC, 0xFF, 0x3F, 0xB7,  // 5"....?.
            /* 0608 */  0xE1, 0x02, 0x0C, 0x8D, 0x9E, 0xC3, 0x61, 0x1C,  // ......a.
            /* 0610 */  0x70, 0x7D, 0x0E, 0xC7, 0x0E, 0xC8, 0xE7, 0x70,  // p}.....p
            /* 0618 */  0xF8, 0xE7, 0x68, 0xF8, 0x63, 0x63, 0xA7, 0x7B,  // ..h.cc.{
            /* 0620 */  0x3E, 0x30, 0x58, 0xD7, 0x6F, 0xCC, 0xC0, 0xC0,  // >0X.o...
            /* 0628 */  0xF6, 0x2D, 0xF2, 0xC0, 0x80, 0x23, 0xEA, 0xD9,  // .-...#..
            /* 0630 */  0xF8, 0x0A, 0xE1, 0x81, 0x81, 0x0D, 0xD0, 0x03,  // ........
            /* 0638 */  0x03, 0x3E, 0xB1, 0x20, 0xE4, 0x64, 0x60, 0xA8,  // .>. .d`.
            /* 0640 */  0x53, 0x86, 0x91, 0x63, 0x3E, 0x71, 0x78, 0x18,  // S..c>qx.
            /* 0648 */  0x3E, 0x54, 0x44, 0x7D, 0x06, 0x78, 0xC4, 0x63,  // >TD}.x.c
            /* 0650 */  0x63, 0xE3, 0xFF, 0xFF, 0xB1, 0x81, 0xE3, 0xD8,  // c.......
            /* 0658 */  0xE2, 0xB1, 0x81, 0xFF, 0x08, 0x8F, 0x1F, 0x1B,  // ........
            /* 0660 */  0x9C, 0xB1, 0x3C, 0x9A, 0xF8, 0x32, 0x73, 0x64,  // ..<..2sd
            /* 0668 */  0xA7, 0x71, 0x66, 0xAF, 0x21, 0x3E, 0xDA, 0x3D,  // .qf.!>.=
            /* 0670 */  0x7E, 0x7B, 0x6C, 0xE0, 0xB2, 0x30, 0x36, 0xA0,  // ~{l..06.
            /* 0678 */  0x14, 0x72, 0x6C, 0xE8, 0x43, 0x8A, 0x4F, 0x01,  // .rl.C.O.
            /* 0680 */  0x36, 0x8E, 0x4A, 0xE6, 0xE1, 0xE3, 0x95, 0x4F,  // 6.J....O
            /* 0688 */  0x0C, 0x47, 0x17, 0xE4, 0x0D, 0xDD, 0x97, 0x0B,  // .G......
            /* 0690 */  0x1F, 0x69, 0x0C, 0xE6, 0x4B, 0x8B, 0xCF, 0xA0,  // .i..K...
            /* 0698 */  0x7C, 0x88, 0xE0, 0xD2, 0x30, 0x44, 0xA0, 0x14,  // |...0D..
            /* 06A0 */  0x6A, 0x88, 0xE8, 0xF1, 0xF8, 0xFF, 0x7F, 0x99,  // j.......
            /* 06A8 */  0x39, 0x44, 0x36, 0x34, 0xF0, 0x7E, 0x63, 0x34,  // 9D64.~c4
            /* 06B0 */  0x34, 0x20, 0x14, 0x6E, 0x68, 0xE8, 0xC3, 0x9A,  // 4 .nh...
            /* 06B8 */  0x0F, 0x01, 0x0C, 0xC2, 0xB7, 0x01, 0x76, 0x15,  // ......v.
            /* 06C0 */  0xF0, 0x55, 0xC8, 0x03, 0x7C, 0x12, 0x65, 0xC3,  // .U..|.e.
            /* 06C8 */  0x03, 0xDF, 0xA0, 0x3C, 0x3C, 0xE0, 0x13, 0x1E,  // ...<<...
            /* 06D0 */  0xD8, 0xAB, 0xF0, 0xF0, 0xE8, 0x59, 0xC9, 0xC3,  // .....Y..
            /* 06D8 */  0x83, 0x07, 0xF2, 0x18, 0xC1, 0xCE, 0x21, 0x1E,  // ......!.
            /* 06E0 */  0x1C, 0x38, 0x4C, 0x0C, 0x0E, 0x14, 0x47, 0x7F,  // .8L...G.
            /* 06E8 */  0xDC, 0x10, 0xD8, 0x65, 0xD6, 0x13, 0xE7, 0x57,  // ...e...W
            /* 06F0 */  0x16, 0x0F, 0x0A, 0xC6, 0xFF, 0xFF, 0x08, 0x00,  // ........
            /* 06F8 */  0xE7, 0x38, 0x03, 0xBE, 0x60, 0x87, 0x03, 0xF4,  // .8..`...
            /* 0700 */  0x31, 0x91, 0x8D, 0xE1, 0x21, 0xE2, 0xC1, 0xD5,  // 1...!...
            /* 0708 */  0x03, 0xF1, 0xB5, 0xE3, 0xB5, 0x18, 0x77, 0x34,  // ......w4
            /* 0710 */  0x00, 0x97, 0x8A, 0xA3, 0x01, 0x50, 0x3A, 0xD8,  // .....P:.
            /* 0718 */  0x82, 0xE3, 0x9E, 0xE6, 0xA3, 0x1D, 0x66, 0x8E,  // ......f.
            /* 0720 */  0x1E, 0xC0, 0xF3, 0x9B, 0x47, 0xCB, 0xCF, 0x6F,  // ....G..o
            /* 0728 */  0x80, 0xA3, 0xA0, 0x07, 0x5B, 0x3A, 0x70, 0x47,  // ....[:pG
            /* 0730 */  0x83, 0x41, 0x9D, 0xDF, 0x70, 0xFF, 0xFF, 0xF3,  // .A..p...
            /* 0738 */  0x1B, 0xFC, 0x08, 0xE0, 0x3A, 0xD3, 0xF8, 0xFC,  // ....:...
            /* 0740 */  0x02, 0x67, 0xA8, 0x07, 0xED, 0x6B, 0x82, 0x67,  // .g...k.g
            /* 0748 */  0xED, 0x1B, 0x17, 0x3B, 0x27, 0x80, 0x6B, 0x40,  // ...;'.k@
            /* 0750 */  0x3E, 0xE9, 0x00, 0x47, 0xE0, 0x93, 0x78, 0xC0,  // >..G..x.
            /* 0758 */  0x3F, 0x34, 0x30, 0x0F, 0xCB, 0x43, 0x03, 0x3E,  // ?40..C.>
            /* 0760 */  0x47, 0x03, 0xDC, 0x89, 0x02, 0x3C, 0xB7, 0x11,  // G....<..
            /* 0768 */  0xDC, 0x81, 0x02, 0x78, 0xFC, 0xFF, 0x0F, 0x14,  // ...x....
            /* 0770 */  0xC0, 0xE9, 0x88, 0xEF, 0x71, 0x71, 0x68, 0x1C,  // ....qqh.
            /* 0778 */  0xE2, 0x43, 0xDA, 0x39, 0xFB, 0xFC, 0x75, 0xA6,  // .C.9..u.
            /* 0780 */  0xB8, 0xB3, 0x08, 0x18, 0xC6, 0xC0, 0xE5, 0x2F,  // ......./
            /* 0788 */  0x89, 0x8A, 0x78, 0x60, 0x48, 0x30, 0x0C, 0xEA,  // ..x`H0..
            /* 0790 */  0x04, 0xE4, 0xA1, 0xF8, 0x60, 0xC0, 0x81, 0x7D,  // ....`..}
            /* 0798 */  0x44, 0x60, 0xE7, 0x02, 0x76, 0x80, 0x32, 0x1C,  // D`..v.2.
            /* 07A0 */  0x3F, 0x0B, 0xF8, 0x94, 0xF0, 0x50, 0x73, 0x1C,  // ?....Ps.
            /* 07A8 */  0x8F, 0x9B, 0xBE, 0x9B, 0x19, 0x92, 0x5D, 0x0D,  // ......].
            /* 07B0 */  0x9E, 0x7F, 0xB0, 0xA7, 0x5D, 0x38, 0x47, 0x5C,  // ....]8G\
            /* 07B8 */  0x70, 0x11, 0xF8, 0xAC, 0xE3, 0x51, 0xF0, 0xD3,  // p....Q..
            /* 07C0 */  0x83, 0xE7, 0xF8, 0xC6, 0xE0, 0xD3, 0x03, 0x73,  // .......s
            /* 07C8 */  0x2F, 0xC0, 0xDC, 0xA1, 0x5B, 0x08, 0xC7, 0xF4,  // /...[...
            /* 07D0 */  0xFA, 0x10, 0xE3, 0xA8, 0x1F, 0x1B, 0xDA, 0x12,  // ........
            /* 07D8 */  0xA0, 0x0D, 0x45, 0x77, 0x80, 0x97, 0x81, 0x28,  // ..Ew...(
            /* 07E0 */  0x21, 0x8E, 0x20, 0x52, 0x6B, 0x28, 0x9A, 0x79,  // !. Rk(.y
            /* 07E8 */  0xA4, 0x28, 0x01, 0xE3, 0x19, 0xA6, 0xB1, 0xC9,  // .(......
            /* 07F0 */  0x08, 0x32, 0x46, 0xE8, 0x38, 0xC1, 0xA2, 0x44,  // .2F.8..D
            /* 07F8 */  0x7B, 0x05, 0x68, 0x7F, 0x10, 0x44, 0xEC, 0xD1,  // {.h..D..
            /* 0800 */  0x84, 0x46, 0x3A, 0x59, 0xA2, 0x87, 0xED, 0x63,  // .F:Y...c
            /* 0808 */  0x36, 0xFE, 0xB4, 0x8A, 0xFB, 0xFF, 0x5F, 0x55,  // 6....._U
            /* 0810 */  0xFC, 0x05, 0xF0, 0x01, 0x00, 0xEF, 0x12, 0x50,  // .......P
            /* 0818 */  0x57, 0x47, 0x8F, 0xDB, 0xE7, 0x0D, 0xF0, 0x5F,  // WG....._
            /* 0820 */  0x2F, 0xB0, 0x47, 0x04, 0x0D, 0x02, 0x35, 0x32,  // /.G...52
            /* 0828 */  0x43, 0x7B, 0x9C, 0x6F, 0x33, 0x86, 0x7C, 0x72,  // C{.o3.|r
            /* 0830 */  0xF2, 0x20, 0xC9, 0x09, 0x15, 0x68, 0x0C, 0xFE,  // . ...h..
            /* 0838 */  0x69, 0xC3, 0xD7, 0x76, 0xCF, 0xD7, 0x27, 0x2F,  // i..v..'/
            /* 0840 */  0xEC, 0x71, 0x04, 0xEE, 0x35, 0x81, 0x1F, 0x48,  // .q..5..H
            /* 0848 */  0x00, 0x67, 0x40, 0x0F, 0x24, 0x60, 0xFA, 0xFF,  // .g@.$`..
            /* 0850 */  0x1F, 0x48, 0xE0, 0x0C, 0x15, 0x37, 0x04, 0x1E,  // .H...7..
            /* 0858 */  0x61, 0x45, 0xF4, 0x30, 0x60, 0xD1, 0x30, 0xA8,  // aE.0`.0.
            /* 0860 */  0x33, 0x14, 0xB8, 0xC4, 0x81, 0xEB, 0xF0, 0xE8,  // 3.......
            /* 0868 */  0xF3, 0x2A, 0x9C, 0x41, 0x9D, 0x76, 0xEF, 0x17,  // .*.A.v..
            /* 0870 */  0x10, 0x72, 0x39, 0xF0, 0xA0, 0xCF, 0xE7, 0x49,  // .r9....I
            /* 0878 */  0x81, 0x1D, 0xA2, 0x80, 0xFF, 0xD8, 0xE0, 0xDC,  // ........
            /* 0880 */  0x00, 0x9E, 0x6C, 0x23, 0x1C, 0x1B, 0xD8, 0x4F,  // ..l#...O
            /* 0888 */  0x51, 0xC0, 0xE9, 0xBC, 0x05, 0xE7, 0x5A, 0xC3,  // Q.....Z.
            /* 0890 */  0x6E, 0xE0, 0xB8, 0xA1, 0x61, 0xFF, 0xFF, 0x43,  // n...a..C
            /* 0898 */  0x83, 0x7F, 0x7C, 0xF7, 0x81, 0x10, 0x30, 0x70,  // ..|...0p
            /* 08A0 */  0x10, 0xE2, 0x97, 0x8A, 0x67, 0x22, 0x7E, 0xE0,  // ....g"~.
            /* 08A8 */  0x02, 0x9C, 0x9F, 0x48, 0xF8, 0x69, 0xCB, 0x27,  // ...H.i.'
            /* 08B0 */  0x12, 0x7E, 0xE0, 0x02, 0xFF, 0xFF, 0xFF, 0xC0,  // .~......
            /* 08B8 */  0x05, 0xCC, 0xEF, 0x57, 0xEF, 0x0C, 0x2F, 0x0D,  // ...W../.
            /* 08C0 */  0x9E, 0xD3, 0xFB, 0x96, 0x31, 0x5E, 0xB4, 0x8C,  // ....1^..
            /* 08C8 */  0x10, 0x85, 0xDD, 0x06, 0xA2, 0xD9, 0xDB, 0x81,  // ........
            /* 08D0 */  0x8B, 0x9C, 0xBA, 0x38, 0x66, 0xA4, 0xA7, 0xAF,  // ...8f...
            /* 08D8 */  0x60, 0x91, 0x22, 0x1E, 0x4E, 0x94, 0x10, 0xC1,  // `.".N...
            /* 08E0 */  0x5E, 0x27, 0x9E, 0xBC, 0x1E, 0xB8, 0x98, 0xE0,  // ^'......
            /* 08E8 */  0x03, 0x17, 0xD0, 0x71, 0x7D, 0xE0, 0x02, 0xB4,  // ...q}...
            /* 08F0 */  0x9E, 0x9B, 0x70, 0xC0, 0xFE, 0xFF, 0x1F, 0xB8,  // ..p.....
            /* 08F8 */  0xC0, 0x74, 0x22, 0x01, 0x5C, 0x8F, 0x15, 0xC6,  // .t".\...
            /* 0900 */  0x18, 0x78, 0x98, 0xE3, 0x08, 0x3F, 0x54, 0xE2,  // .x...?T.
            /* 0908 */  0xE0, 0xA8, 0xF4, 0x83, 0x16, 0x3D, 0x74, 0xFB,  // .....=t.
            /* 0910 */  0x44, 0x81, 0x9F, 0xCB, 0x33, 0xB7, 0xEF, 0x07,  // D...3...
            /* 0918 */  0x3E, 0x14, 0x81, 0xFD, 0xA4, 0x05, 0x1C, 0x0E,  // >.......
            /* 0920 */  0xE8, 0xB8, 0xFF, 0x3F, 0x81, 0x03, 0x1D, 0x9F,  // ...?....
            /* 0928 */  0xD0, 0xA3, 0xF0, 0xA1, 0x1D, 0x77, 0xCC, 0x02,  // .....w..
            /* 0930 */  0xFE, 0x91, 0x81, 0xBD, 0x0A, 0x0F, 0x8C, 0xB2,  // ........
            /* 0938 */  0x18, 0xF5, 0x0D, 0xE2, 0x10, 0xDF, 0xEF, 0x7D,  // .......}
            /* 0940 */  0x96, 0x7B, 0xCF, 0xF0, 0x25, 0x00, 0x73, 0xD3,  // .{..%.s.
            /* 0948 */  0xF7, 0x89, 0x80, 0x1D, 0x7B, 0x7C, 0xD2, 0x02,  // ....{|..
            /* 0950 */  0x4E, 0x43, 0x60, 0xF7, 0x1F, 0xCF, 0x9C, 0x0F,  // NC`.....
            /* 0958 */  0xE1, 0x6C, 0x3C, 0x7A, 0xDC, 0x89, 0x00, 0x7C,  // .l<z...|
            /* 0960 */  0xC7, 0x12, 0xF0, 0x9C, 0x2C, 0x30, 0x33, 0x08,  // ....,03.
            /* 0968 */  0xFF, 0xF4, 0xC1, 0x8E, 0x82, 0x3E, 0xBF, 0x78,  // .....>.x
            /* 0970 */  0xD2, 0x2F, 0x2A, 0x3E, 0x96, 0x80, 0xED, 0xFF,  // ./*>....
            /* 0978 */  0x7F, 0xEE, 0x02, 0x3C, 0x46, 0x39, 0x74, 0xA1,  // ...<F9t.
            /* 0980 */  0xC4, 0x9F, 0xBB, 0x00, 0x81, 0xB7, 0x2E, 0xDF,  // ........
            /* 0988 */  0x94, 0x23, 0xBC, 0x08, 0x9C, 0x41, 0x88, 0x67,  // .#...A.g
            /* 0990 */  0xAD, 0xF7, 0xAD, 0x48, 0xBE, 0x03, 0xC4, 0x79,  // ...H...y
            /* 0998 */  0xEE, 0x32, 0xD8, 0x6B, 0xC7, 0x83, 0x44, 0x94,  // .2.k..D.
            /* 09A0 */  0x67, 0x66, 0x43, 0x3D, 0x37, 0x1B, 0xEA, 0xE4,  // gfC=7...
            /* 09A8 */  0x9F, 0x99, 0x8D, 0x15, 0x36, 0xD0, 0xE3, 0xD7,  // ....6...
            /* 09B0 */  0x5B, 0x57, 0x48, 0x23, 0x3C, 0x77, 0x31, 0xE1,  // [WH#<w1.
            /* 09B8 */  0xE7, 0x2E, 0xA8, 0xFF, 0xFF, 0x73, 0x17, 0xC0,  // .....s..
            /* 09C0 */  0x85, 0xA3, 0x02, 0xEE, 0xDC, 0x05, 0xB6, 0x33,  // .......3
            /* 09C8 */  0x09, 0x60, 0xED, 0x08, 0xE0, 0xFF, 0xFF, 0x99,  // .`......
            /* 09D0 */  0x04, 0xCC, 0xA3, 0x85, 0x79, 0xF6, 0x40, 0x1C,  // ....y.@.
            /* 09D8 */  0xBC, 0x50, 0xE1, 0x1F, 0x07, 0x86, 0x43, 0x05,  // .P....C.
            /* 09E0 */  0x3F, 0x55, 0xD0, 0xF3, 0x14, 0x70, 0x39, 0x30,  // ?U...p90
            /* 09E8 */  0x03, 0x27, 0x21, 0x27, 0x18, 0x9D, 0xA7, 0x70,  // .'!'...p
            /* 09F0 */  0xE3, 0x31, 0xE8, 0xD3, 0x83, 0xAF, 0x04, 0xFC,  // .1......
            /* 09F8 */  0x30, 0xC5, 0x42, 0x43, 0xC8, 0xC2, 0xC9, 0x0B,  // 0.BC....
            /* 0A00 */  0x68, 0x1D, 0xA6, 0xC0, 0x71, 0x65, 0x09, 0x8C,  // h...qe..
            /* 0A08 */  0xBD, 0x1D, 0xBC, 0xCB, 0x79, 0x12, 0x8F, 0x26,  // ....y..&
            /* 0A10 */  0xC7, 0x19, 0xE2, 0xDD, 0xDA, 0x04, 0x0F, 0x06,  // ........
            /* 0A18 */  0x91, 0xDE, 0x6B, 0xD8, 0x00, 0xA3, 0xBF, 0x44,  // ..k....D
            /* 0A20 */  0x98, 0xE0, 0xFF, 0xFF, 0x68, 0x05, 0x0C, 0x21,  // ....h..!
            /* 0A28 */  0xCE, 0x86, 0x9F, 0x2E, 0x8C, 0x79, 0x3A, 0xFC,  // .....y:.
            /* 0A30 */  0x68, 0x05, 0xB0, 0xF0, 0xFF, 0x7F, 0xB4, 0x02,  // h.......
            /* 0A38 */  0xFB, 0xC5, 0xCA, 0x63, 0x3E, 0xE3, 0xB7, 0xA9,  // ...c>...
            /* 0A40 */  0xA7, 0xA9, 0x28, 0xEF, 0xC7, 0xAF, 0x54, 0xEF,  // ..(...T.
            /* 0A48 */  0x06, 0xC6, 0x7A, 0x08, 0x78, 0xAA, 0xF2, 0x9D,  // ..z.x...
            /* 0A50 */  0xCA, 0xC7, 0x8A, 0x27, 0x64, 0xA3, 0xC4, 0x7A,  // ...'d..z
            /* 0A58 */  0xB9, 0x32, 0x66, 0x8C, 0x60, 0xEF, 0x55, 0x31,  // .2f.`.U1
            /* 0A60 */  0x1F, 0xB3, 0x3C, 0xC2, 0x68, 0xC1, 0x7D, 0x42,  // ..<.h.}B
            /* 0A68 */  0xE6, 0x47, 0x2B, 0x80, 0x61, 0x67, 0x12, 0x18,  // .G+.ag..
            /* 0A70 */  0xFF, 0xFF, 0x33, 0x09, 0xE0, 0xE8, 0x68, 0x05,  // ..3...h.
            /* 0A78 */  0xF6, 0xD1, 0xC2, 0x1C, 0x05, 0x8F, 0xFA, 0x1E,  // ........
            /* 0A80 */  0x31, 0x10, 0x0D, 0x07, 0x83, 0x3A, 0xC2, 0x12,  // 1....:..
            /* 0A88 */  0x20, 0x99, 0x00, 0x51, 0xA8, 0xA3, 0x15, 0xFA,  //  ..Q....
            /* 0A90 */  0x20, 0xE2, 0x61, 0x3F, 0x34, 0x78, 0x12, 0xA7,  //  .a?4x..
            /* 0A98 */  0xEA, 0x5B, 0xC3, 0x51, 0x3C, 0x01, 0xF8, 0x70,  // .[.Q<..p
            /* 0AA0 */  0x05, 0xFC, 0x87, 0x06, 0x6B, 0x12, 0xC5, 0x0F,  // ....k...
            /* 0AA8 */  0x0D, 0xDA, 0xFF, 0xFF, 0x94, 0x0C, 0xBC, 0x8F,  // ........
            /* 0AB0 */  0x6B, 0xC0, 0xE5, 0x80, 0x0C, 0xBE, 0x81, 0x81,  // k.......
            /* 0AB8 */  0xE3, 0x90, 0xE6, 0xE3, 0x1A, 0xEE, 0x40, 0xE4,  // ......@.
            /* 0AC0 */  0x81, 0xC5, 0x7C, 0x05, 0x8B, 0xF0, 0x08, 0xE6,  // ..|.....
            /* 0AC8 */  0x6B, 0x06, 0x3B, 0xF1, 0xF9, 0xB4, 0x12, 0x28,  // k.;....(
            /* 0AD0 */  0xCA, 0x6B, 0x0B, 0x3F, 0x4E, 0x83, 0x4B, 0xC7,  // .k.?N.K.
            /* 0AD8 */  0x71, 0x1A, 0x50, 0xF0, 0xFF, 0x3F, 0x12, 0xC0,  // q.P..?..
            /* 0AE0 */  0x99, 0x85, 0x2F, 0x58, 0xEC, 0x48, 0x00, 0x36,  // ../X.H.6
            /* 0AE8 */  0x1F, 0x47, 0x02, 0xA0, 0x34, 0x0C, 0x1F, 0xE6,  // .G..4...
            /* 0AF0 */  0xC0, 0x06, 0x73, 0x30, 0xAF, 0xED, 0xF6, 0x7E,  // ..s0...~
            /* 0AF8 */  0xD8, 0xA3, 0x47, 0x39, 0xC0, 0x7A, 0x84, 0x73,  // ..G9.z.s
            /* 0B00 */  0x1C, 0x4A, 0xF4, 0x51, 0x0E, 0xEA, 0xFF, 0xFF,  // .J.Q....
            /* 0B08 */  0x28, 0x07, 0x58, 0xBA, 0x33, 0x18, 0xE1, 0xFC,  // (.X.3...
            /* 0B10 */  0x43, 0x3C, 0x40, 0x84, 0x78, 0x8A, 0x33, 0x48,  // C<@.x.3H
            /* 0B18 */  0x9C, 0x20, 0x2F, 0x03, 0x8F, 0x72, 0xBE, 0xC9,  // . /..r..
            /* 0B20 */  0xC5, 0x79, 0x9A, 0x8B, 0xF2, 0x2E, 0x67, 0x84,  // .y....g.
            /* 0B28 */  0x87, 0x6E, 0x03, 0xF9, 0xC4, 0xED, 0x7B, 0xDC,  // .n....{.
            /* 0B30 */  0x53, 0xDD, 0xCB, 0x9C, 0x6F, 0xDD, 0xBE, 0x80,  // S...o...
            /* 0B38 */  0xFB, 0x28, 0xC7, 0x04, 0x1F, 0xE5, 0x00, 0x2A,  // .(.....*
            /* 0B40 */  0xFC, 0xFF, 0x8F, 0x72, 0x70, 0xCF, 0xAA, 0xE0,  // ...rp...
            /* 0B48 */  0x39, 0xCA, 0xC1, 0x38, 0x91, 0x00, 0xAE, 0xC7,  // 9..8....
            /* 0B50 */  0x0A, 0x63, 0x0C, 0x5C, 0xDD, 0xA3, 0xC7, 0xA7,  // .c.\....
            /* 0B58 */  0x22, 0x2A, 0xEA, 0x3C, 0x22, 0x18, 0xCE, 0xE2,  // "*.<"...
            /* 0B60 */  0x43, 0x90, 0xCF, 0x06, 0xFC, 0x04, 0xE2, 0x11,  // C.......
            /* 0B68 */  0x54, 0x3C, 0x4E, 0x7A, 0xEA, 0xF0, 0xC1, 0x8E,  // T<Nz....
            /* 0B70 */  0x9D, 0x0E, 0x1C, 0x7E, 0x90, 0xF4, 0xB4, 0x08,  // ...~....
            /* 0B78 */  0x9E, 0x73, 0x0B, 0xBC, 0xDB, 0x08, 0x9C, 0x53,  // .s.....S
            /* 0B80 */  0x81, 0xFF, 0xFF, 0xA7, 0x02, 0xC0, 0x4B, 0xFE,  // ......K.
            /* 0B88 */  0x57, 0x9A, 0xA0, 0x1D, 0xE0, 0x15, 0x2E, 0x1B,  // W.......
            /* 0B90 */  0x47, 0x32, 0xCA, 0xE1, 0x98, 0x0F, 0x1C, 0x4D,  // G2.....M
            /* 0B98 */  0x93, 0x9D, 0x78, 0x60, 0xC6, 0x82, 0xD4, 0x49,  // ..x`...I
            /* 0BA0 */  0xC0, 0xA7, 0x0E, 0x07, 0x82, 0x91, 0x76, 0x12,  // ......v.
            /* 0BA8 */  0x8D, 0xC6, 0x70, 0x56, 0x0B, 0x23, 0x38, 0x83,  // ..pV.#8.
            /* 0BB0 */  0xF8, 0xCC, 0xE3, 0x5C, 0x27, 0x16, 0xB4, 0x0A,  // ...\'...
            /* 0BB8 */  0x10, 0x9D, 0x56, 0x30, 0x41, 0xEE, 0x68, 0x74,  // ..V0A.ht
            /* 0BC0 */  0xDE, 0xBE, 0x1B, 0xF0, 0xEB, 0x8B, 0xC7, 0x62,  // .......b
            /* 0BC8 */  0x60, 0xDF, 0xBA, 0xC0, 0x31, 0x17, 0xAB, 0x01,  // `...1...
            /* 0BD0 */  0x45, 0x0D, 0xC0, 0x68, 0x98, 0x53, 0xC0, 0xC3,  // E..h.S..
            /* 0BD8 */  0x19, 0xB8, 0xEE, 0x71, 0x9E, 0x1B, 0xEE, 0xA6,  // ...q....
            /* 0BE0 */  0x62, 0xAD, 0x53, 0xD1, 0xE9, 0xE4, 0x7D, 0xE0,  // b.S...}.
            /* 0BE8 */  0xE0, 0xC0, 0xFA, 0xFF, 0x1F, 0x1C, 0x8C, 0xD9,  // ........
            /* 0BF0 */  0x7B, 0x70, 0xB0, 0xD0, 0x3C, 0x38, 0xB0, 0x65,  // {p..<8.e
            /* 0BF8 */  0x1B, 0x1C, 0x5A, 0xC9, 0x5D, 0x84, 0x1C, 0x3E,  // ..Z.]..>
            /* 0C00 */  0xF0, 0xB3, 0x03, 0x0E, 0x80, 0x9E, 0x1D, 0x2C,  // .......,
            /* 0C08 */  0x24, 0xCF, 0x0E, 0x6C, 0xFA, 0xCE, 0x22, 0xA0,  // $..l..".
            /* 0C10 */  0x00, 0xF2, 0xBD, 0xC3, 0xE7, 0x96, 0x67, 0x0F,  // ......g.
            /* 0C18 */  0x36, 0x86, 0x47, 0x17, 0xA3, 0x19, 0x9D, 0x6B,  // 6.G....k
            /* 0C20 */  0xBA, 0x4D, 0xA0, 0x54, 0xDC, 0x26, 0x28, 0x88,  // .M.T.&(.
            /* 0C28 */  0x6F, 0x00, 0x4E, 0x48, 0xA3, 0xDB, 0x20, 0x6E,  // o.NH.. n
            /* 0C30 */  0x26, 0xC6, 0x7F, 0xC4, 0xF0, 0x11, 0xE1, 0x90,  // &.......
            /* 0C38 */  0xCE, 0xD6, 0x04, 0xF3, 0x40, 0xEA, 0xBD, 0xA1,  // ....@...
            /* 0C40 */  0xBB, 0x14, 0x84, 0xD9, 0x87, 0x7C, 0x70, 0xF1,  // .....|p.
            /* 0C48 */  0x34, 0x7C, 0xBD, 0x21, 0xF7, 0x0E, 0x3A, 0x6D,  // 4|.!..:m
            /* 0C50 */  0x9F, 0x19, 0x30, 0xA7, 0x55, 0x5F, 0x2D, 0x13,  // ..0.U_-.
            /* 0C58 */  0x58, 0xD6, 0x55, 0x82, 0x7A, 0xB8, 0x80, 0xD0,  // X.U.z...
            /* 0C60 */  0x0B, 0x8D, 0xAF, 0x5D, 0x09, 0x1E, 0x04, 0x7D,  // ...]...}
            /* 0C68 */  0x0C, 0xFB, 0xFF, 0xBF, 0x97, 0xB0, 0xB3, 0x57,  // .......W
            /* 0C70 */  0x82, 0x57, 0xAF, 0x04, 0xF3, 0x0E, 0x02, 0x35,  // .W.....5
            /* 0C78 */  0x2A, 0x0F, 0x02, 0x73, 0x94, 0x34, 0xC1, 0x7C,  // *..s.4.|
            /* 0C80 */  0x63, 0x40, 0x25, 0xBB, 0x74, 0xD2, 0x33, 0xCC,  // c@%.t.3.
            /* 0C88 */  0x3B, 0x8C, 0x2F, 0x09, 0xBE, 0x7E, 0xF8, 0xDC,  // ;./..~..
            /* 0C90 */  0xE2, 0x05, 0xBC, 0x7A, 0xC2, 0x20, 0x78, 0x06,  // ...z. x.
            /* 0C98 */  0x7A, 0x75, 0x31, 0x54, 0x9C, 0xC0, 0xAF, 0x02,  // zu1T....
            /* 0CA0 */  0x6F, 0x34, 0x21, 0x82, 0x19, 0xF6, 0xF0, 0x43,  // o4!....C
            /* 0CA8 */  0xBE, 0xC5, 0xF8, 0xF8, 0xE6, 0x1B, 0x40, 0xAC,  // ......@.
            /* 0CB0 */  0xD7, 0x11, 0x8F, 0x94, 0x1F, 0x5B, 0x0E, 0x28,  // .....[.(
            /* 0CB8 */  0xD2, 0x4B, 0x95, 0x27, 0xE0, 0xB3, 0x8C, 0x4F,  // .K.'...O
            /* 0CC0 */  0x5B, 0x27, 0xE5, 0x6B, 0x9B, 0xD1, 0x5F, 0x21,  // ['.k.._!
            /* 0CC8 */  0x7C, 0xF8, 0x31, 0xB2, 0xCF, 0x39, 0xEC, 0xDC,  // |.1..9..
            /* 0CD0 */  0xC5, 0x06, 0xC5, 0x11, 0x1F, 0x18, 0x5E, 0x6A,  // ......^j
            /* 0CD8 */  0x3C, 0x15, 0x76, 0x05, 0x60, 0x07, 0x07, 0x7E,  // <.v.`..~
            /* 0CE0 */  0x05, 0xF0, 0xC1, 0x81, 0x1D, 0x8B, 0x30, 0xC7,  // ......0.
            /* 0CE8 */  0x4A, 0x70, 0x9D, 0x6C, 0x7C, 0x72, 0x00, 0x33,  // Jp.l|r.3
            /* 0CF0 */  0x3C, 0xE6, 0x40, 0xEA, 0xF3, 0x86, 0x6F, 0x06,  // <.@...o.
            /* 0CF8 */  0x1E, 0x17, 0x3F, 0x72, 0xF8, 0xA8, 0xCA, 0xB0,  // ..?r....
            /* 0D00 */  0x4F, 0xD3, 0x47, 0xA3, 0x17, 0x59, 0x9F, 0x5E,  // O.G..Y.^
            /* 0D08 */  0x30, 0xB0, 0xBE, 0x34, 0x70, 0x58, 0xA3, 0x85,  // 0..4pX..
            /* 0D10 */  0x7D, 0x0C, 0x38, 0x73, 0x5F, 0x88, 0x70, 0x87,  // }.8s_.p.
            /* 0D18 */  0x3A, 0xB0, 0xFC, 0xFF, 0x01, 0xF1, 0xB7, 0x92,  // :.......
            /* 0D20 */  0x47, 0x0E, 0x4F, 0xC0, 0x80, 0x2C, 0xF7, 0xBA,  // G.O..,..
            /* 0D28 */  0x74, 0x20, 0xE2, 0xE7, 0x46, 0xAB, 0x3B, 0x10,  // t ..F.;.
            /* 0D30 */  0x21, 0x30, 0x9E, 0xF6, 0x1E, 0x3F, 0x3C, 0x1B,  // !0...?<.
            /* 0D38 */  0x1F, 0x05, 0x7C, 0x8C, 0xF2, 0xCC, 0xCF, 0x28,  // ..|....(
            /* 0D40 */  0xD2, 0x2B, 0x83, 0xB5, 0x9C, 0x88, 0x50, 0x2A,  // .+....P*
            /* 0D48 */  0x60, 0x14, 0x98, 0x46, 0x77, 0x0E, 0x1E, 0x11,  // `..Fw...
            /* 0D50 */  0x46, 0x70, 0x06, 0xF1, 0x68, 0x7D, 0x73, 0x01,  // Fp..h}s.
            /* 0D58 */  0xA6, 0x67, 0x22, 0xE0, 0x12, 0x72, 0x76, 0xE8,  // .g"..rv.
            /* 0D60 */  0x8B, 0x33, 0x9B, 0xB6, 0x71, 0xDF, 0x00, 0x7D,  // .3..q..}
            /* 0D68 */  0xF8, 0xF4, 0xC4, 0x4F, 0x1B, 0xC6, 0xC9, 0x08,  // ...O....
            /* 0D70 */  0xB0, 0xF1, 0xFF, 0xBF, 0xEB, 0x00, 0xFC, 0xFF,  // ........
            /* 0D78 */  0xFF, 0xDF, 0x75, 0x00, 0x3B, 0xF7, 0x07, 0xDF,  // ..u.;...
            /* 0D80 */  0x75, 0x80, 0x6B, 0x88, 0x55, 0xE9, 0xAE, 0xC3,  // u.k.U...
            /* 0D88 */  0x0F, 0x00, 0x8E, 0xBA, 0x20, 0xDD, 0x0A, 0x22,  // .... .."
            /* 0D90 */  0x1E, 0x82, 0x07, 0xF9, 0x28, 0x60, 0xD8, 0xB3,  // ....(`..
            /* 0D98 */  0x7C, 0x1C, 0xF6, 0x70, 0x4C, 0x30, 0xDC, 0x55,  // |..pL0.U
            /* 0DA0 */  0x83, 0x0E, 0xCD, 0xB1, 0x28, 0x24, 0xE4, 0xA6,  // ....($..
            /* 0DA8 */  0x83, 0x8A, 0x7E, 0x7F, 0xA0, 0x20, 0x06, 0xF4,  // ..~.. ..
            /* 0DB0 */  0x55, 0x12, 0xB0, 0xF2, 0xFF, 0xBF, 0xB5, 0x00,  // U.......
            /* 0DB8 */  0xBB, 0x30, 0x83, 0x46, 0xC9, 0xBF, 0x2D, 0x51,  // .0.F..-Q
            /* 0DC0 */  0x10, 0x0F, 0xDA, 0xD2, 0x6E, 0x2D, 0xA0, 0x38,  // ....n-.8
            /* 0DC8 */  0x04, 0xF8, 0xD6, 0x02, 0x5F, 0xDE, 0xAD, 0x05,  // ...._...
            /* 0DD0 */  0x14, 0xB7, 0x00, 0x1F, 0x0D, 0xF8, 0x71, 0xC1,  // ......q.
            /* 0DD8 */  0x07, 0x0E, 0xDF, 0x58, 0x7C, 0x37, 0x26, 0x17,  // ...X|7&.
            /* 0DE0 */  0x16, 0xA8, 0xE3, 0xE7, 0xE0, 0xBE, 0xC6, 0xBF,  // ........
            /* 0DE8 */  0xB0, 0xC0, 0x38, 0x99, 0x80, 0xE3, 0x48, 0x02,  // ..8...H.
            /* 0DF0 */  0xD8, 0xF9, 0xFF, 0x1F, 0x49, 0xC0, 0x02, 0xE9,  // ....I...
            /* 0DF8 */  0x23, 0x09, 0x70, 0x8D, 0xB4, 0x2A, 0x2A, 0xE2,  // #.p..**.
            /* 0E00 */  0x3D, 0xA0, 0x53, 0x89, 0x61, 0xF8, 0xE8, 0x7C,  // =.S.a..|
            /* 0E08 */  0x66, 0xC0, 0x5F, 0x39, 0x18, 0x38, 0x3B, 0x91,  // f._9.8;.
            /* 0E10 */  0x19, 0x8E, 0x0F, 0xDC, 0xE3, 0x7B, 0x21, 0x3B,  // .....{!;
            /* 0E18 */  0xAD, 0x87, 0x02, 0xDF, 0xC9, 0x0C, 0xC9, 0xAE,  // ........
            /* 0E20 */  0xE0, 0xB8, 0xC3, 0x83, 0xC7, 0xFE, 0x50, 0xE4,  // ......P.
            /* 0E28 */  0x1B, 0xC2, 0x0B, 0x82, 0x2F, 0x07, 0x0C, 0x0A,  // ..../...
            /* 0E30 */  0xC6, 0x2D, 0x1C, 0x73, 0x04, 0x87, 0x43, 0x70,  // .-.s..Cp
            /* 0E38 */  0xC6, 0x47, 0x81, 0x19, 0xA4, 0x2F, 0x20, 0xAF,  // .G.../ .
            /* 0E40 */  0x07, 0x1E, 0x2C, 0x73, 0x7F, 0xA0, 0xD2, 0x09,  // ..,s....
            /* 0E48 */  0xE6, 0x71, 0xEA, 0xC9, 0xA0, 0x39, 0x14, 0x9D,  // .q...9..
            /* 0E50 */  0x09, 0x4E, 0xA1, 0xAD, 0x61, 0x09, 0xE7, 0x81,  // .N..a...
            /* 0E58 */  0x22, 0x44, 0x94, 0x60, 0xAF, 0x54, 0x6F, 0x0C,  // "D.`.To.
            /* 0E60 */  0xCF, 0xEB, 0x51, 0xE2, 0x45, 0x0A, 0x18, 0x2D,  // ..Q.E..-
            /* 0E68 */  0x4A, 0xB0, 0xDE, 0x20, 0x04, 0x1A, 0x29, 0x44,  // J.. ..)D
            /* 0E70 */  0xC0, 0x10, 0xAF, 0x13, 0xB1, 0xC2, 0x45, 0x6F,  // ......Eo
            /* 0E78 */  0x7F, 0x10, 0x24, 0xC0, 0x9B, 0x42, 0xD7, 0x14,  // ..$..B..
            /* 0E80 */  0x47, 0x3A, 0xC4, 0xA0, 0x87, 0xED, 0x3B, 0x39,  // G:....;9
            /* 0E88 */  0x9F, 0x56, 0x90, 0xE3, 0xF2, 0x41, 0x06, 0x43,  // .V...A.C
            /* 0E90 */  0xF0, 0xF0, 0xE1, 0x2F, 0x80, 0x0F, 0x00, 0xD8,  // .../....
            /* 0E98 */  0xFF, 0x3F, 0x41, 0xD7, 0x80, 0x9A, 0xF9, 0xE3,  // .?A.....
            /* 0EA0 */  0x01, 0x58, 0x0E, 0x17, 0xF0, 0x07, 0xFE, 0x04,  // .X......
            /* 0EA8 */  0x83, 0x3B, 0xAB, 0x68, 0x10, 0xA8, 0x93, 0x0A,  // .;.h....
            /* 0EB0 */  0x3F, 0x5D, 0xF9, 0x6E, 0xEE, 0x1B, 0x90, 0x09,  // ?].n....
            /* 0EB8 */  0x2C, 0xF6, 0x20, 0x42, 0xC7, 0x03, 0xFE, 0xA1,  // ,. B....
            /* 0EC0 */  0xBF, 0xD6, 0xFB, 0x50, 0xE1, 0xF9, 0xFA, 0x72,  // ...P...r
            /* 0EC8 */  0xEF, 0xCB, 0x3F, 0x58, 0xAE, 0x09, 0xFC, 0xFA,  // ..?X....
            /* 0ED0 */  0x0F, 0x78, 0x14, 0x3C, 0x2E, 0x14, 0x34, 0x0E,  // .x.<..4.
            /* 0ED8 */  0xF1, 0xA9, 0xEE, 0xD4, 0x7D, 0x66, 0x39, 0x61,  // ....}f9a
            /* 0EE0 */  0xDC, 0xFF, 0x7F, 0xC4, 0x6C, 0xBC, 0xE0, 0x3A,  // ....l..:
            /* 0EE8 */  0x7F, 0x20, 0xDE, 0x24, 0x3E, 0x96, 0xD0, 0xF0,  // . .$>...
            /* 0EF0 */  0x27, 0x13, 0x40, 0xE0, 0x8C, 0x9E, 0x4C, 0x3C,  // '.@...L<
            /* 0EF8 */  0xEF, 0x77, 0x92, 0x67, 0xA1, 0x43, 0x88, 0xF1,  // .w.g.C..
            /* 0F00 */  0x46, 0x12, 0xC4, 0x08, 0x4F, 0x26, 0xEC, 0x42,  // F...O&.B
            /* 0F08 */  0xF2, 0x40, 0x12, 0xE2, 0xC9, 0xC4, 0xD7, 0x92,  // .@......
            /* 0F10 */  0x60, 0x21, 0x9E, 0x4C, 0x18, 0x58, 0xE8, 0x58,  // `!.L.X.X
            /* 0F18 */  0xAF, 0x45, 0x31, 0xD8, 0x4D, 0xC5, 0x70, 0x4F,  // .E1.M.pO
            /* 0F20 */  0x26, 0x2C, 0xF8, 0x23, 0x43, 0xB7, 0x47, 0x9F,  // &,.#C.G.
            /* 0F28 */  0x4C, 0x00, 0x43, 0xFF, 0xFF, 0x93, 0x09, 0xB0,  // L.C.....
            /* 0F30 */  0x3F, 0x52, 0xF9, 0xC4, 0x86, 0x1B, 0x85, 0x0F,  // ?R......
            /* 0F38 */  0x16, 0x11, 0xD9, 0x59, 0x87, 0x0C, 0x9A, 0xDE,  // ...Y....
            /* 0F40 */  0xF7, 0xC0, 0x61, 0x64, 0x60, 0x40, 0xE1, 0x30,  // ..ad`@.0
            /* 0F48 */  0x86, 0x3F, 0xC7, 0x91, 0x13, 0x0C, 0x28, 0xCE,  // .?....(.
            /* 0F50 */  0x13, 0x98, 0x93, 0xC8, 0x73, 0xC2, 0x8B, 0x05,  // ....s...
            /* 0F58 */  0x3B, 0xB9, 0x00, 0x6E, 0xAE, 0xC0, 0x04, 0x87,  // ;..n....
            /* 0F60 */  0xFC, 0xFF, 0x4F, 0x2E, 0xE0, 0x3C, 0x97, 0xC3,  // ..O..<..
            /* 0F68 */  0x18, 0x03, 0xD7, 0xFF, 0xCA, 0xF4, 0x31, 0x8F,  // ......1.
            /* 0F70 */  0x4A, 0x7A, 0xFE, 0x19, 0x86, 0xB2, 0xF8, 0x84,  // Jz......
            /* 0F78 */  0xE0, 0x73, 0x01, 0x3F, 0x21, 0x78, 0x04, 0x6F,  // .s.?!x.o
            /* 0F80 */  0x5B, 0xC7, 0xC9, 0x4E, 0x26, 0xBE, 0x6E, 0xF8,  // [..N&.n.
            /* 0F88 */  0x64, 0xC0, 0x0E, 0x9F, 0x1E, 0xA4, 0x47, 0x86,  // d.....G.
            /* 0F90 */  0x3B, 0x0F, 0x80, 0xED, 0xC0, 0x02, 0xEB, 0x50,  // ;......P
            /* 0F98 */  0x00, 0xB8, 0xD1, 0x68, 0x62, 0xE4, 0x4C, 0x1F,  // ...hb.L.
            /* 0FA0 */  0x88, 0x0E, 0xB4, 0x9C, 0xC3, 0x29, 0x16, 0xA7,  // .....)..
            /* 0FA8 */  0x1B, 0xA6, 0x0F, 0x3E, 0xBE, 0x9B, 0x9C, 0xCA,  // ...>....
            /* 0FB0 */  0xA9, 0xE2, 0x4F, 0x94, 0x56, 0x0D, 0xA9, 0x93,  // ..O.V...
            /* 0FB8 */  0x25, 0xD7, 0x0B, 0xA3, 0x68, 0x0F, 0x22, 0x9D,  // %...h.".
            /* 0FC0 */  0x46, 0x79, 0x18, 0x18, 0xC1, 0x19, 0xC4, 0x87,  // Fy......
            /* 0FC8 */  0x1A, 0x67, 0x3B, 0xD4, 0xA0, 0x95, 0x08, 0xF8,  // .g;.....
            /* 0FD0 */  0xFF, 0x5F, 0xAD, 0x3D, 0x06, 0x76, 0xA6, 0x05,  // ._.=.v..
            /* 0FD8 */  0xCC, 0x5C, 0x7F, 0x7D, 0x73, 0xC1, 0xBD, 0x24,  // .\.}s..$
            /* 0FE0 */  0x7C, 0x73, 0xC1, 0xCC, 0x0D, 0x38, 0x8C, 0xDF,  // |s...8..
            /* 0FE8 */  0x73, 0x83, 0x85, 0xE6, 0xB9, 0xC1, 0xBF, 0xBD,  // s.......
            /* 0FF0 */  0x60, 0xA3, 0xCD, 0x0D, 0x8D, 0xCC, 0xE6, 0xF6,  // `.......
            /* 0FF8 */  0x1C, 0x10, 0xE1, 0x15, 0xC1, 0x87, 0x0F, 0x8F,  // ........
            /* 1000 */  0x0E, 0x38, 0x00, 0x7A, 0x74, 0xB0, 0x90, 0x3C,  // .8.zt..<
            /* 1008 */  0x3A, 0xF0, 0xFC, 0xFF, 0x47, 0xC7, 0xD2, 0x8D,  // :...G...
            /* 1010 */  0x0E, 0xAD, 0x05, 0x44, 0x2E, 0x4F, 0x53, 0xE4,  // ...D.OS.
            /* 1018 */  0x64, 0x72, 0x7A, 0x4F, 0xB9, 0xBE, 0xB2, 0x7A,  // drzO...z
            /* 1020 */  0x7A, 0xC0, 0x63, 0x00, 0x9E, 0x1E, 0x2C, 0x34,  // z.c...,4
            /* 1028 */  0x4F, 0x0F, 0x6C, 0x11, 0x2F, 0x19, 0xE8, 0xDB,  // O.l./...
            /* 1030 */  0x87, 0x91, 0x5F, 0xA0, 0x7D, 0x5E, 0x32, 0xA8,  // .._.}^2.
            /* 1038 */  0xEF, 0x36, 0x30, 0x46, 0x08, 0x1C, 0x6E, 0xD5,  // .60F..n.
            /* 1040 */  0x1E, 0x21, 0x2C, 0x34, 0x1F, 0x34, 0xC0, 0x16,  // .!,4.4..
            /* 1048 */  0x6F, 0x84, 0xE8, 0x61, 0xF9, 0x4E, 0x72, 0x7E,  // o..a.Nr~
            /* 1050 */  0x27, 0x77, 0x7C, 0xC0, 0x0A, 0xD8, 0xE3, 0xE3,  // 'w|.....
            /* 1058 */  0xFF, 0xFF, 0xF1, 0x61, 0x51, 0x7C, 0x74, 0x07,  // ...aQ|t.
            /* 1060 */  0xCE, 0x99, 0xB6, 0xA4, 0xD3, 0x0D, 0x4F, 0x01,  // ......O.
            /* 1068 */  0xA3, 0x93, 0x8B, 0x41, 0x7C, 0x1F, 0xB1, 0x42,  // ...A|..B
            /* 1070 */  0x10, 0x1D, 0xDD, 0xE1, 0xEB, 0x81, 0xD4, 0xD1,  // ........
            /* 1078 */  0x1D, 0xFE, 0x95, 0xDD, 0x47, 0x77, 0xF8, 0xA3,  // ....Gw..
            /* 1080 */  0x3B, 0x1E, 0x66, 0xE3, 0x58, 0x44, 0xCF, 0x57,  // ;.f.XD.W
            /* 1088 */  0x3E, 0x26, 0x26, 0x78, 0x95, 0xF0, 0x61, 0xE2,  // >&&x..a.
            /* 1090 */  0x39, 0x89, 0x1D, 0xDF, 0x7D, 0x70, 0x4C, 0xF0,  // 9...}pL.
            /* 1098 */  0xC0, 0xF8, 0xD4, 0xCE, 0x4E, 0x8D, 0x21, 0x8D,  // ....N.!.
            /* 10A0 */  0xCA, 0x60, 0x0D, 0xF1, 0xFC, 0xC6, 0xF4, 0xAD,  // .`......
            /* 10A8 */  0x4F, 0xE7, 0x78, 0xB8, 0x7A, 0x00, 0x35, 0x16,  // O.x.z.5.
            /* 10B0 */  0xAE, 0x04, 0x46, 0xE7, 0x78, 0xFC, 0x85, 0xE1,  // ..F.x...
            /* 10B8 */  0x75, 0xCA, 0x0B, 0x08, 0xE6, 0x79, 0x45, 0x78,  // u....yEx
            /* 10C0 */  0x61, 0xF0, 0x49, 0x9C, 0x9F, 0x8E, 0x1E, 0xA9,  // a.I.....
            /* 10C8 */  0x0C, 0x15, 0x27, 0xF0, 0x2B, 0xC1, 0x9B, 0x56,  // ..'.+..V
            /* 10D0 */  0x88, 0x60, 0x86, 0x7D, 0x0C, 0x78, 0xDC, 0x30,  // .`.}.x.0
            /* 10D8 */  0xAA, 0x4F, 0xA0, 0xC6, 0x7A, 0x48, 0xF2, 0x88,  // .O..zH..
            /* 10E0 */  0xF9, 0x6D, 0xEA, 0x80, 0x22, 0x3D, 0xFD, 0x78,  // .m.."=.x
            /* 10E8 */  0x02, 0xBE, 0xDE, 0xF3, 0xFF, 0xFF, 0xF5, 0x1E,  // ........
            /* 10F0 */  0xEE, 0x8D, 0xD1, 0x83, 0xE2, 0x88, 0x0F, 0x0E,  // ........
            /* 10F8 */  0x0F, 0x21, 0x9E, 0x0A, 0xBB, 0x3D, 0x61, 0xC0,  // .!...=a.
            /* 1100 */  0x8E, 0xC0, 0x47, 0x41, 0x7E, 0x78, 0x09, 0x14,  // ..GA~x..
            /* 1108 */  0xA5, 0x78, 0x4C, 0xDD, 0x1C, 0x3C, 0x43, 0x83,  // .xL..<C.
            /* 1110 */  0x62, 0xE0, 0x0F, 0x92, 0xCD, 0x2E, 0xAE, 0xB1,  // b.......
            /* 1118 */  0x7C, 0x2F, 0x31, 0x22, 0x76, 0x40, 0x0C, 0x25,  // |/1"v@.%
            /* 1120 */  0xD2, 0x09, 0x54, 0x8F, 0x42, 0xE6, 0xE0, 0x11,  // ..T.B...
            /* 1128 */  0x79, 0x36, 0x9E, 0x0E, 0x3B, 0x75, 0xE0, 0x27,  // y6..;u.'
            /* 1130 */  0xE1, 0x33, 0x93, 0xEF, 0xAF, 0x1E, 0x90, 0x87,  // .3......
            /* 1138 */  0xC2, 0xA7, 0xC8, 0x80, 0xE1, 0xC0, 0xBC, 0x04,  // ........
            /* 1140 */  0x30, 0x68, 0x0F, 0x9F, 0xA1, 0xBF, 0x16, 0x19,  // 0h......
            /* 1148 */  0x9D, 0x9F, 0x76, 0x4E, 0xC7, 0xE7, 0x4D, 0x1F,  // ..vN..M.
            /* 1150 */  0x35, 0x7C, 0x0F, 0xC0, 0x9C, 0xC8, 0x7C, 0x02,  // 5|....|.
            /* 1158 */  0xF0, 0x89, 0x8D, 0x01, 0x3D, 0xF9, 0x1B, 0xD5,  // ....=...
            /* 1160 */  0xF7, 0x52, 0x76, 0xF5, 0xC1, 0x20, 0x9D, 0x46,  // .Rv.. .F
            /* 1168 */  0x94, 0x48, 0xAF, 0x03, 0xFC, 0x76, 0xC6, 0xC1,  // .H...v..
            /* 1170 */  0x02, 0x1D, 0x2B, 0x9F, 0x4C, 0x3C, 0x4F, 0xD8,  // ..+.L<O.
            /* 1178 */  0x23, 0x85, 0x73, 0xC5, 0x60, 0x07, 0x13, 0x7E,  // #.s.`..~
            /* 1180 */  0xC5, 0xF0, 0xC1, 0x84, 0x5D, 0x02, 0x31, 0x37,  // ....].17
            /* 1188 */  0x4C, 0x70, 0x5D, 0x31, 0x7C, 0x32, 0x81, 0xF7,  // Lp]1|2..
            /* 1190 */  0xFF, 0x3F, 0x99, 0x80, 0x01, 0x1E, 0x73, 0x37,  // .?....s7
            /* 1198 */  0xF5, 0x79, 0xC6, 0xB2, 0xC6, 0x85, 0x3A, 0xD2,  // .y....:.
            /* 11A0 */  0xF8, 0x24, 0xF3, 0x7C, 0x6C, 0xEC, 0x87, 0x01,  // .$.|l...
            /* 11A8 */  0x4F, 0xFA, 0x30, 0x9F, 0x9D, 0x7C, 0x55, 0xE3,  // O.0..|U.
            /* 11B0 */  0xB0, 0xBE, 0x94, 0x70, 0x58, 0xA3, 0x85, 0x7D,  // ...pX..}
            /* 11B8 */  0x1D, 0x30, 0xEC, 0x03, 0x20, 0xEE, 0x9A, 0x0B,  // .0.. ...
            /* 11C0 */  0x16, 0x40, 0xFC, 0x25, 0xE1, 0xC1, 0xC0, 0x13,  // .@.%....
            /* 11C8 */  0x30, 0x20, 0x8B, 0x73, 0xA3, 0x46, 0x05, 0xB8,  // 0 .s.F..
            /* 11D0 */  0x54, 0x03, 0x02, 0xAF, 0xD2, 0x3E, 0xC7, 0xBC,  // T....>..
            /* 11D8 */  0xC3, 0x3C, 0x14, 0xBC, 0xCB, 0x44, 0x08, 0xF2,  // .<...D..
            /* 11E0 */  0x34, 0xFD, 0x8E, 0x10, 0x21, 0x54, 0xA0, 0x97,  // 4...!T..
            /* 11E8 */  0x6A, 0xE3, 0x05, 0x7D, 0x99, 0x88, 0x12, 0x27,  // j..}...'
            /* 11F0 */  0x4A, 0x84, 0x50, 0xC6, 0x38, 0x97, 0xA7, 0x83,  // J.P.8...
            /* 11F8 */  0x97, 0x9A, 0x70, 0x8F, 0x09, 0x81, 0x9F, 0x1C,  // ..p.....
            /* 1200 */  0x9E, 0xAA, 0x8D, 0x70, 0x8C, 0x2F, 0xD5, 0x4C,  // ...p./.L
            /* 1208 */  0xFC, 0x45, 0x46, 0xF7, 0x24, 0x5F, 0xAA, 0xF1,  // .EF.$_..
            /* 1210 */  0xFF, 0xFF, 0x4B, 0x35, 0xC0, 0x87, 0x61, 0xF8,  // ..K5..a.
            /* 1218 */  0x36, 0x0B, 0x8E, 0x6B, 0x02, 0xBF, 0xCF, 0x02,  // 6..k....
            /* 1220 */  0xFE, 0xFE, 0xFF, 0xE7, 0x16, 0x4F, 0xE3, 0x9D,  // .....O..
            /* 1228 */  0x19, 0xDC, 0xC3, 0x85, 0x3D, 0x0C, 0xAE, 0xE9,  // ....=...
            /* 1230 */  0x9A, 0xAB, 0xF3, 0x0D, 0x57, 0x01, 0x83, 0xBA,  // ....W...
            /* 1238 */  0x36, 0x83, 0x2B, 0xED, 0x1A, 0x04, 0xEA, 0x23,  // 6.+....#
            /* 1240 */  0x8D, 0x4F, 0x18, 0xB8, 0xE3, 0x82, 0x4F, 0x17,  // .O....O.
            /* 1248 */  0xB8, 0xDB, 0x3B, 0xCC, 0x4B, 0x8A, 0xCF, 0x7C,  // ..;.K..|
            /* 1250 */  0x98, 0x9B, 0x83, 0x07, 0xE4, 0x13, 0x04, 0xF8,  // ........
            /* 1258 */  0x2F, 0x7D, 0xD8, 0x55, 0xB0, 0x43, 0x22, 0xFE,  // /}.U.C".
            /* 1260 */  0xFE, 0x65, 0xD0, 0x73, 0x0C, 0xEA, 0x03, 0xCF,  // .e.s....
            /* 1268 */  0x2B, 0x86, 0xAF, 0x09, 0x0F, 0x13, 0x8E, 0x7A,  // +......z
            /* 1270 */  0x0A, 0xA2, 0x63, 0x03, 0xC7, 0x61, 0x03, 0x1C,  // ..c..a..
            /* 1278 */  0x47, 0x1B, 0xDC, 0x31, 0xC7, 0xE7, 0x10, 0x1C,  // G..1....
            /* 1280 */  0xDC, 0x7B, 0x81, 0x87, 0xE1, 0x7B, 0x8E, 0x47,  // .{...{.G
            /* 1288 */  0xC4, 0xFE, 0xFF, 0x23, 0xF2, 0xF8, 0x1F, 0x22,  // ...#..."
            /* 1290 */  0x5E, 0x38, 0x22, 0x04, 0xC4, 0x9F, 0xA9, 0xF8,  // ^8".....
            /* 1298 */  0x80, 0xC1, 0x97, 0x67, 0xC0, 0xBA, 0x1C, 0xE2,  // ...g....
            /* 12A0 */  0x06, 0xEC, 0x21, 0x3D, 0x5C, 0x18, 0xF5, 0x89,  // ..!=\...
            /* 12A8 */  0xCC, 0xE8, 0xAF, 0x2F, 0xCF, 0x77, 0x26, 0xB0,  // .../.w&.
            /* 12B0 */  0x72, 0x58, 0x5D, 0x0F, 0x3D, 0x60, 0x70, 0x00,  // rX].=`p.
            /* 12B8 */  0x7A, 0xC0, 0xF0, 0xCF, 0x16, 0x6F, 0x8A, 0x60,  // z....o.`
            /* 12C0 */  0xB8, 0x68, 0xFA, 0xB8, 0xE0, 0x43, 0x8F, 0x15,  // .h...C..
            /* 12C8 */  0xDD, 0x14, 0xD1, 0xF7, 0x44, 0x1F, 0x11, 0xB1,  // ....D...
            /* 12D0 */  0x77, 0x09, 0x72, 0x44, 0x84, 0x7A, 0x97, 0xF0,  // w.rD.z..
            /* 12D8 */  0x1C, 0xF8, 0x21, 0x8F, 0x0D, 0xF5, 0xBD, 0xE7,  // ..!.....
            /* 12E0 */  0x19, 0xCE, 0x07, 0xAB, 0xF7, 0x00, 0x9F, 0x3C,  // .......<
            /* 12E8 */  0x1E, 0xDD, 0xD8, 0xA9, 0x90, 0x1D, 0xB7, 0x3C,  // .......<
            /* 12F0 */  0x5E, 0x9F, 0x33, 0x7C, 0xC1, 0x64, 0x43, 0x36,  // ^.3|.dC6
            /* 12F8 */  0xD8, 0xAB, 0x86, 0xCF, 0x5F, 0x3E, 0x10, 0xE2,  // ...._>..
            /* 1300 */  0x0E, 0x51, 0xBE, 0xFA, 0xF1, 0x43, 0x08, 0x3B,  // .Q...C.;
            /* 1308 */  0x91, 0x1C, 0xF5, 0xFB, 0x9B, 0x4F, 0x28, 0x27,  // .....O('
            /* 1310 */  0x74, 0x20, 0xBE, 0xB3, 0x81, 0xF3, 0x60, 0xED,  // t ....`.
            /* 1318 */  0x7B, 0x05, 0xE6, 0xFF, 0x7F, 0xF9, 0x65, 0x23,  // {.....e#
            /* 1320 */  0xC3, 0x1C, 0x0D, 0x60, 0x5D, 0x42, 0xC0, 0x75,  // ...`]B.u
            /* 1328 */  0xC7, 0xF0, 0x25, 0x04, 0xF8, 0x04, 0xBD, 0x44,  // ..%....D
            /* 1330 */  0xA0, 0xAF, 0x19, 0x1E, 0xDD, 0x23, 0x00, 0xE6,  // .....#..
            /* 1338 */  0x8A, 0xC1, 0x8E, 0x05, 0x3E, 0x6C, 0xF8, 0x1A,  // ....>l..
            /* 1340 */  0xC0, 0xEE, 0x05, 0x0E, 0x73, 0x8F, 0x00, 0x15,  // ....s...
            /* 1348 */  0xA8, 0x87, 0x07, 0x5F, 0xED, 0x3D, 0x02, 0x14,  // ..._.=..
            /* 1350 */  0xE7, 0x56, 0x1F, 0x1A, 0x3C, 0x50, 0xAB, 0x3A,  // .V..<P.:
            /* 1358 */  0xC1, 0x42, 0x39, 0xC0, 0xF2, 0xD3, 0x2B, 0xBF,  // .B9...+.
            /* 1360 */  0x15, 0xB0, 0x7C, 0x37, 0x09, 0xE8, 0x79, 0x66,  // ..|7..yf
            /* 1368 */  0x81, 0x4A, 0x72, 0x93, 0x80, 0x0E, 0xF3, 0x7C,  // .Jr....|
            /* 1370 */  0xFE, 0x32, 0xC3, 0xE6, 0x7F, 0xE0, 0xBE, 0x7E,  // .2.....~
            /* 1378 */  0x62, 0x06, 0x69, 0x94, 0xB7, 0x3C, 0x9F, 0xC1,  // b.i..<..
            /* 1380 */  0xF8, 0xFF, 0xFF, 0x0C, 0xE1, 0x63, 0x2B, 0x3B,  // .....c+;
            /* 1388 */  0x53, 0xF0, 0x13, 0x2C, 0xEE, 0x0E, 0x60, 0x94,  // S..,..`.
            /* 1390 */  0x67, 0x4F, 0x4F, 0x80, 0x9D, 0x6A, 0x8D, 0xFC,  // gOO..j..
            /* 1398 */  0x8E, 0xEF, 0x4B, 0x84, 0xEF, 0x45, 0x98, 0x13,  // ..K..E..
            /* 13A0 */  0x05, 0xF8, 0x4E, 0x21, 0x3E, 0x24, 0xE0, 0xCE,  // ..N!>$..
            /* 13A8 */  0x02, 0x1E, 0xCB, 0xD3, 0x2A, 0xBB, 0x20, 0x81,  // ....*. .
            /* 13B0 */  0xEF, 0x38, 0xE2, 0xC3, 0x04, 0xF8, 0x07, 0x86,  // .8......
            /* 13B8 */  0x8F, 0x7C, 0x27, 0x40, 0x9D, 0x3C, 0x38, 0xEA,  // .|'@.<8.
            /* 13C0 */  0xD9, 0x3E, 0xC2, 0x1A, 0xF5, 0xBD, 0xEA, 0xE1,  // .>......
            /* 13C8 */  0xCD, 0x57, 0x09, 0x7E, 0x31, 0xE0, 0xC1, 0xAE,  // .W.~1...
            /* 13D0 */  0x48, 0xA0, 0xF2, 0x30, 0x3A, 0xD0, 0x0D, 0x01,  // H..0:...
            /* 13D8 */  0x33, 0x73, 0x3E, 0x84, 0xB3, 0xF1, 0xE8, 0x71,  // 3s>....q
            /* 13E0 */  0xA7, 0x10, 0xF0, 0x0D, 0xCE, 0xC0, 0xFF, 0xFF,  // ........
            /* 13E8 */  0x57, 0x46, 0xEC, 0xF5, 0x1F, 0x3B, 0x51, 0xCC,  // WF...;Q.
            /* 13F0 */  0xA9, 0x00, 0x7C, 0xC3, 0xF0, 0x89, 0x05, 0xF8,  // ..|.....
            /* 13F8 */  0xDC, 0x70, 0xC1, 0x71, 0xAD, 0xC3, 0x9E, 0x71,  // .p.q...q
            /* 1400 */  0x70, 0x17, 0x42, 0xC0, 0xCE, 0xB0, 0x78, 0x88,  // p.B...x.
            /* 1408 */  0x8F, 0x8A, 0xCF, 0x08, 0x54, 0x36, 0x0C, 0xEA,  // ....T6..
            /* 1410 */  0xE6, 0x07, 0x2E, 0x79, 0x97, 0x5D, 0x7A, 0xC6,  // ...y.]z.
            /* 1418 */  0xF7, 0xE0, 0xC1, 0xF0, 0xFF, 0x1F, 0x3C, 0xF6,  // ......<.
            /* 1420 */  0xB0, 0xC0, 0xA7, 0x8F, 0x1D, 0x3F, 0x60, 0x67,  // .....?`g
            /* 1428 */  0xA8, 0xB8, 0xFB, 0x25, 0x18, 0xA7, 0x8A, 0x1D,  // ...%....
            /* 1430 */  0x02, 0x0F, 0xBC, 0x22, 0x2A, 0xF5, 0x0C, 0xA0,  // ..."*...
            /* 1438 */  0x88, 0x30, 0xA8, 0x93, 0x93, 0xAF, 0xD0, 0x80,  // .0......
            /* 1440 */  0x93, 0x11, 0xE3, 0xEE, 0x92, 0x70, 0xA7, 0xFC,  // .....p..
            /* 1448 */  0x5A, 0xEF, 0x1B, 0x8E, 0xEF, 0x25, 0xA7, 0xCB,  // Z....%..
            /* 1450 */  0xFE, 0xFF, 0xD3, 0x65, 0x38, 0x0F, 0x28, 0xFC,  // ...e8.(.
            /* 1458 */  0x56, 0x0D, 0xE3, 0x2C, 0xF0, 0x08, 0xF0, 0x3E,  // V..,...>
            /* 1460 */  0xCF, 0x6F, 0xD5, 0x6F, 0xD1, 0x2F, 0x04, 0x4F,  // .o.o./.O
            /* 1468 */  0x57, 0x21, 0x5E, 0xB0, 0x9E, 0x0D, 0xDE, 0x7D,  // W!^....}
            /* 1470 */  0x62, 0x3C, 0x4E, 0x3F, 0x59, 0xC7, 0x09, 0xF3,  // b<N?Y...
            /* 1478 */  0xF8, 0xF3, 0x56, 0x6D, 0x8C, 0xA3, 0x89, 0x18,  // ..Vm....
            /* 1480 */  0xE5, 0xDC, 0x1E, 0x06, 0x22, 0x9F, 0x4B, 0x94,  // ....".K.
            /* 1488 */  0xF7, 0x8B, 0x17, 0x82, 0x88, 0xD1, 0x0C, 0x11,  // ........
            /* 1490 */  0x34, 0x46, 0xA0, 0x58, 0x81, 0xE2, 0xBD, 0x55,  // 4F.X...U
            /* 1498 */  0x33, 0xE1, 0xB7, 0x6A, 0x40, 0xCD, 0x81, 0x06,  // 3..j@...
            /* 14A0 */  0x7F, 0xAB, 0x06, 0xEE, 0xA7, 0x07, 0xDC, 0xAD,  // ........
            /* 14A8 */  0x1A, 0x6C, 0xA7, 0x14, 0xF8, 0xFF, 0xFF, 0x53,  // .l.....S
            /* 14B0 */  0x0A, 0x60, 0xE5, 0x46, 0x8E, 0x3B, 0xA5, 0x80,  // .`.F.;..
            /* 14B8 */  0x73, 0xB4, 0xF0, 0x46, 0xC1, 0xD5, 0xBD, 0x26,  // s..F...&
            /* 14C0 */  0x7C, 0x0E, 0xA2, 0x7A, 0x60, 0x50, 0x47, 0x21,  // |..z`PG!
            /* 14C8 */  0x70, 0xE5, 0x7E, 0xB3, 0x68, 0x10, 0x96, 0x78,  // p.~.h..x
            /* 14D0 */  0xAE, 0x44, 0x43, 0x7B, 0x4A, 0x6F, 0x22, 0x1E,  // .DC{Jo".
            /* 14D8 */  0xCF, 0x9B, 0xA1, 0xEF, 0x0D, 0xA1, 0x9F, 0xCD,  // ........
            /* 14E0 */  0x2C, 0xE7, 0x4C, 0x09, 0xAA, 0x87, 0xB7, 0x4F,  // ,.L....O
            /* 14E8 */  0x10, 0xF0, 0x2F, 0x25, 0x3E, 0x53, 0xC2, 0xE7,  // ../%>S..
            /* 14F0 */  0xF3, 0x28, 0x3D, 0x18, 0x43, 0xFA, 0x48, 0xC9,  // .(=.C.H.
            /* 14F8 */  0x41, 0x9E, 0x48, 0x1E, 0x2E, 0xD8, 0xFF, 0xFF,  // A.H.....
            /* 1500 */  0x36, 0x09, 0xFB, 0x8C, 0x72, 0x00, 0x18, 0x59,  // 6...r..Y
            /* 1508 */  0x37, 0x49, 0xF4, 0x41, 0x92, 0x63, 0xC4, 0xF5,  // 7I.A.c..
            /* 1510 */  0xAD, 0xD1, 0xF7, 0x61, 0x1F, 0x09, 0xCE, 0xE7,  // ...a....
            /* 1518 */  0x61, 0x10, 0x8C, 0x67, 0x3A, 0x8F, 0x9A, 0x1F,  // a..g:...
            /* 1520 */  0x58, 0xF8, 0xF8, 0x39, 0xF8, 0xFB, 0xC1, 0xD3,  // X..9....
            /* 1528 */  0xA5, 0x0F, 0x3B, 0x21, 0x1E, 0x7C, 0xF8, 0x99,  // ..;!.|..
            /* 1530 */  0x0E, 0x5C, 0x2A, 0xCE, 0x74, 0x40, 0xE2, 0x04,  // .\*.t@..
            /* 1538 */  0x0C, 0xE3, 0xB4, 0x80, 0x1B, 0x88, 0xCF, 0x7F,  // ........
            /* 1540 */  0xD8, 0x29, 0x9F, 0x08, 0x3B, 0xC0, 0x60, 0x46,  // .)..;.`F
            /* 1548 */  0x07, 0xAE, 0xB1, 0xF9, 0x94, 0x09, 0x7C, 0x34,  // ......|4
            /* 1550 */  0x3C, 0x6B, 0x74, 0xB4, 0xC0, 0xCF, 0xEC, 0xFF,  // <kt.....
            /* 1558 */  0xFF, 0xE8, 0xC1, 0x8E, 0x16, 0xB8, 0xBC, 0x47,  // .......G
            /* 1560 */  0x0B, 0x50, 0x0D, 0xCB, 0x43, 0x83, 0x7F, 0x73,  // .P..C..s
            /* 1568 */  0x79, 0xB4, 0x00, 0xC3, 0x51, 0x82, 0x9F, 0x0D,  // y...Q...
            /* 1570 */  0x7C, 0x94, 0xF0, 0xE9, 0x17, 0x7F, 0x82, 0xF1,  // |.......
            /* 1578 */  0xF1, 0x97, 0x7B, 0x03, 0xA6, 0x17, 0x0C, 0x2B,  // ..{....+
            /* 1580 */  0xA0, 0xD6, 0x01, 0x03, 0x6E, 0xE2, 0x61, 0xA0,  // ....n.a.
            /* 1588 */  0xB2, 0x1E, 0x70, 0xE9, 0x54, 0x9F, 0x8D, 0x3C,  // ..p.T..<
            /* 1590 */  0xF2, 0x67, 0x08, 0xB3, 0x1F, 0xD1, 0x6B, 0x99,  // .g....k.
            /* 1598 */  0x8F, 0x39, 0x3E, 0x9C, 0x18, 0x25, 0xA0, 0xCF,  // .9>..%..
            /* 15A0 */  0xBE, 0x0C, 0x10, 0x73, 0xEE, 0x37, 0x46, 0x40,  // ...s.7F@
            /* 15A8 */  0x58, 0x17, 0x19, 0x63, 0xC3, 0x42, 0x3A, 0xA4,  // X..c.B:.
            /* 15B0 */  0xE7, 0x4F, 0x86, 0xC5, 0x6F, 0x36, 0x41, 0x9F,  // .O..o6A.
            /* 15B8 */  0x1C, 0x8C, 0x84, 0xB9, 0x03, 0xF8, 0x70, 0x65,  // ......pe
            /* 15C0 */  0x20, 0x7E, 0x12, 0x78, 0x07, 0xF1, 0x0D, 0xEB,  //  ~.x....
            /* 15C8 */  0x14, 0x70, 0x67, 0x61, 0x76, 0x37, 0x32, 0x14,  // .pgav72.
            /* 15D0 */  0xBF, 0x28, 0xBC, 0x08, 0xF8, 0xCA, 0xC1, 0x6E,  // .(.....n
            /* 15D8 */  0x0C, 0xE0, 0xC3, 0x0A, 0x8C, 0xFD, 0xFF, 0xDF,  // ........
            /* 15E0 */  0x1A, 0xC1, 0x30, 0xFA, 0xE7, 0x24, 0x76, 0xE6,  // ..0..$v.
            /* 15E8 */  0xF2, 0x54, 0x5F, 0x1B, 0x01, 0xFF, 0xA1, 0xEF,  // .T_.....
            /* 15F0 */  0x8C, 0xA8, 0x98, 0xD7, 0x46, 0x40, 0xE1, 0xFF,  // ....F@..
            /* 15F8 */  0xFF, 0xDA, 0x08, 0xBC, 0xEE, 0x26, 0xAF, 0x8D,  // .....&..
            /* 1600 */  0x60, 0x17, 0x7F, 0x6D, 0x04, 0x68, 0x72, 0xF5,  // `..m.hr.
            /* 1608 */  0xC3, 0x5D, 0x1B, 0xC1, 0x76, 0x4C, 0x61, 0xFF,  // .]..vLa.
            /* 1610 */  0xFF, 0x63, 0x0A, 0xE0, 0xEC, 0x12, 0x45, 0x8E,  // .c....E.
            /* 1618 */  0x29, 0x20, 0x1E, 0x2E, 0xEC, 0x0B, 0x33, 0xE2,  // ) ....3.
            /* 1620 */  0x65, 0x40, 0x0F, 0x05, 0x8E, 0x08, 0x83, 0xBA,  // e@......
            /* 1628 */  0x38, 0x82, 0x2B, 0x0A, 0xA5, 0x40, 0x7D, 0xC2,  // 8.+..@}.
            /* 1630 */  0x00, 0xDC, 0xFC, 0xFF, 0x4F, 0x18, 0x3C, 0xD0,  // ....O.<.
            /* 1638 */  0xC8, 0xD0, 0xA3, 0xF0, 0xA8, 0x70, 0xF7, 0x3B,  // .....p.;
            /* 1640 */  0xF0, 0xDC, 0x59, 0x3C, 0x72, 0x0F, 0x0C, 0xF8,  // ..Y<r...
            /* 1648 */  0xC4, 0x1A, 0x18, 0xFA, 0x8C, 0x03, 0x77, 0x6C,  // ......wl
            /* 1650 */  0xE0, 0x3A, 0x95, 0x00, 0x87, 0xB1, 0xE1, 0xEF,  // .:......
            /* 1658 */  0x8D, 0x1E, 0x1B, 0x6E, 0x20, 0x3E, 0x4A, 0x3C,  // ...n >J<
            /* 1660 */  0xAF, 0xB1, 0xB3, 0x02, 0x0E, 0xFC, 0xEC, 0x5E,  // .......^
            /* 1668 */  0x8D, 0xF8, 0xE8, 0xC0, 0x05, 0xE8, 0xD1, 0x01,  // ........
            /* 1670 */  0x8F, 0xFF, 0xFF, 0x41, 0x00, 0xEE, 0xE8, 0x70,  // ...A...p
            /* 1678 */  0x07, 0x27, 0xCC, 0xD8, 0xC0, 0x26, 0x61, 0x6C,  // .'...&al
            /* 1680 */  0x40, 0x29, 0xDF, 0x65, 0x18, 0x0A, 0xF4, 0x2B,  // @).e...+
            /* 1688 */  0x26, 0x43, 0x7C, 0x45, 0xF1, 0xCD, 0xC3, 0x04,  // &C|E....
            /* 1690 */  0xB3, 0x5C, 0x31, 0x41, 0x33, 0x34, 0x83, 0x7A,  // .\1A34.z
            /* 1698 */  0x68, 0xF0, 0xCF, 0x7F, 0xE4, 0x8A, 0x09, 0xFD,  // h.......
            /* 16A0 */  0x7E, 0xE9, 0x03, 0x87, 0xCF, 0x57, 0x66, 0xF5,  // ~....Wf.
            /* 16A8 */  0x15, 0x13, 0xCE, 0xD9, 0x27, 0x42, 0x02, 0x67,  // ....'B.g
            /* 16B0 */  0xBC, 0x0F, 0x43, 0xCF, 0x34, 0x06, 0x54, 0x9A,  // ..C.4.T.
            /* 16B8 */  0x4B, 0x2F, 0x3D, 0xB1, 0x84, 0x38, 0xD1, 0xDE,  // K/=..8..
            /* 16C0 */  0x4F, 0x67, 0xF4, 0xB0, 0xE1, 0x63, 0xAF, 0x67,  // Og...c.g
            /* 16C8 */  0xFB, 0x68, 0xE0, 0x41, 0xFA, 0xC4, 0xC1, 0xEE,  // .h.A....
            /* 16D0 */  0xC4, 0xBE, 0x20, 0x3D, 0xC7, 0x18, 0xED, 0x3D,  // .. =...=
            /* 16D8 */  0xC2, 0xE7, 0x9D, 0x67, 0x4A, 0x23, 0x84, 0x63,  // ...gJ#.c
            /* 16E0 */  0x27, 0x38, 0x8F, 0xC4, 0x97, 0x4C, 0xFF, 0xFF,  // '8...L..
            /* 16E8 */  0xE7, 0xE9, 0x13, 0x0F, 0xF6, 0xE8, 0xC3, 0x8F,  // ........
            /* 16F0 */  0x6C, 0x0C, 0xDB, 0xD7, 0x01, 0x36, 0x2A, 0xDF,  // l....6*.
            /* 16F8 */  0x72, 0x8D, 0x6D, 0xD0, 0xC7, 0x2C, 0x4F, 0x9B,  // r.m..,O.
            /* 1700 */  0x5D, 0x28, 0xC1, 0x27, 0xE9, 0x48, 0x8B, 0xBE,  // ](.'.H..
            /* 1708 */  0xF6, 0x19, 0xF5, 0x81, 0xD4, 0x37, 0x61, 0x5F,  // .....7a_
            /* 1710 */  0x81, 0x9E, 0xB3, 0x3C, 0x1D, 0x4F, 0xC4, 0xB7,  // ...<.O..
            /* 1718 */  0x05, 0xA3, 0xBF, 0x23, 0xB0, 0xD8, 0x77, 0x04,  // ...#..w.
            /* 1720 */  0x50, 0xDD, 0x07, 0xF8, 0x1D, 0x01, 0xEE, 0x54,  // P......T
            /* 1728 */  0xDE, 0x11, 0xC0, 0xA0, 0xEF, 0x42, 0x40, 0x07,  // .....B@.
            /* 1730 */  0xEA, 0xF9, 0x79, 0xAC, 0x3E, 0xD2, 0xFA, 0x92,  // ..y.>...
            /* 1738 */  0xF0, 0x98, 0xC0, 0x60, 0x7C, 0xBD, 0x33, 0x86,  // ...`|.3.
            /* 1740 */  0x61, 0x3C, 0xD2, 0x30, 0x3E, 0x28, 0x70, 0x15,  // a<.0>(p.
            /* 1748 */  0xF7, 0x5A, 0xE8, 0xA9, 0xE7, 0x81, 0xCA, 0x7B,  // .Z.....{
            /* 1750 */  0x50, 0x80, 0x72, 0x23, 0xE8, 0xF2, 0x28, 0x8E,  // P.r#..(.
            /* 1758 */  0x1A, 0x9F, 0x4F, 0x03, 0xF6, 0x35, 0x59, 0xDD,  // ..O..5Y.
            /* 1760 */  0x57, 0x7D, 0x39, 0xF6, 0xA5, 0x83, 0xDD, 0x65,  // W}9....e
            /* 1768 */  0xD9, 0xDD, 0x90, 0xDD, 0xBD, 0xC2, 0xBD, 0xDC,  // ........
            /* 1770 */  0xFA, 0xD0, 0xE0, 0xEB, 0x82, 0xC7, 0x68, 0xD5,  // ......h.
            /* 1778 */  0x70, 0xD0, 0xAE, 0x06, 0x41, 0xFE, 0xFF, 0x0F,  // p...A...
            /* 1780 */  0x02, 0x3E, 0x72, 0x79, 0x5A, 0x46, 0x84, 0x71,  // .>ryZF.q
            /* 1788 */  0xF8, 0x65, 0x67, 0xC3, 0x38, 0xBE, 0xE9, 0xFA,  // .eg.8...
            /* 1790 */  0x54, 0xC0, 0x0E, 0x5B, 0xBE, 0x19, 0x18, 0xF8,  // T..[....
            /* 1798 */  0x41, 0xE1, 0x65, 0xDB, 0xC7, 0x07, 0x36, 0xB4,  // A.e...6.
            /* 17A0 */  0xB7, 0x05, 0x4F, 0x20, 0xD6, 0x9B, 0x03, 0x8C,  // ..O ....
            /* 17A8 */  0x93, 0x03, 0xF8, 0xB4, 0x3F, 0x14, 0x74, 0x10,  // ....?.t.
            /* 17B0 */  0xC7, 0x9F, 0x1C, 0x60, 0x1C, 0x16, 0x0C, 0x11,  // ...`....
            /* 17B8 */  0xFE, 0x1D, 0x80, 0x29, 0x84, 0xD6, 0xC1, 0x01,  // ...)....
            /* 17C0 */  0x3C, 0x1E, 0x0E, 0x0E, 0xA0, 0xB8, 0xF4, 0x90,  // <.......
            /* 17C8 */  0x83, 0x03, 0xF4, 0x10, 0x17, 0x04, 0x6A, 0xE5,  // ......j.
            /* 17D0 */  0xC6, 0x48, 0x8F, 0xD7, 0xE0, 0x39, 0x40, 0x70,  // .H...9@p
            /* 17D8 */  0x58, 0x43, 0xC4, 0x35, 0x46, 0x60, 0x63, 0x44,  // XC.5F`cD
            /* 17E0 */  0xF6, 0x31, 0x82, 0x61, 0xC4, 0x36, 0x46, 0x70,  // .1.a.6Fp
            /* 17E8 */  0x63, 0x44, 0xF7, 0x31, 0x82, 0xA1, 0x17, 0x8F,  // cD.1....
            /* 17F0 */  0x23, 0x8C, 0x08, 0xBE, 0x4A, 0x70, 0x2D, 0xA7,  // #...Jp-.
            /* 17F8 */  0x10, 0x5D, 0x25, 0xE0, 0x66, 0x5F, 0x99, 0x86,  // .]%.f_..
            /* 1800 */  0xC6, 0x53, 0x93, 0xE8, 0x2A, 0x81, 0xF9, 0xFF,  // .S..*...
            /* 1808 */  0x5F, 0x25, 0xF8, 0x45, 0xDA, 0x27, 0x59, 0x76,  // _%.E.'Yv
            /* 1810 */  0x9B, 0x80, 0x75, 0x73, 0xF1, 0x8D, 0xC8, 0xC7,  // ..us....
            /* 1818 */  0x17, 0xDC, 0x11, 0x86, 0x9D, 0xF4, 0x7D, 0xD6,  // ......}.
            /* 1820 */  0xC4, 0x9C, 0x20, 0x60, 0x9C, 0x1C, 0x70, 0x87,  // .. `..p.
            /* 1828 */  0x08, 0x70, 0x1D, 0x14, 0x18, 0xCA, 0x03, 0x0D,  // .p......
            /* 1830 */  0x47, 0x62, 0x70, 0xAF, 0x03, 0x11, 0x22, 0xC1,  // Gbp...".
            /* 1838 */  0x98, 0x14, 0xBB, 0x05, 0xFA, 0x78, 0xC3, 0xCE,  // .....x..
            /* 1840 */  0x13, 0x1E, 0x96, 0x6F, 0x18, 0xFC, 0xD2, 0xE3,  // ...o....
            /* 1848 */  0x2B, 0x38, 0x3B, 0x19, 0xF2, 0x8B, 0xE3, 0x43,  // +8;....C
            /* 1850 */  0x84, 0x51, 0xA2, 0xB1, 0x93, 0x43, 0x84, 0x93,  // .Q...C..
            /* 1858 */  0x7B, 0x0A, 0xF1, 0x99, 0xC3, 0x67, 0x38, 0xCC,  // {....g8.
            /* 1860 */  0x0D, 0xF2, 0xB8, 0x0E, 0xCA, 0xD7, 0x4B, 0x36,  // ......K6
            /* 1868 */  0x6C, 0xE3, 0x18, 0xF6, 0x39, 0xC8, 0x33, 0xF0,  // l...9.3.
            /* 1870 */  0x58, 0x62, 0x1F, 0x90, 0x21, 0xD9, 0xB0, 0xD8,  // Xb..!...
            /* 1878 */  0x10, 0x8D, 0xE7, 0xF3, 0x0D, 0xC3, 0x89, 0xE5,  // ........
            /* 1880 */  0x71, 0x62, 0x27, 0xC3, 0xB0, 0xCF, 0xD6, 0xD3,  // qb'.....
            /* 1888 */  0xE0, 0x07, 0x0D, 0xDF, 0x09, 0xDE, 0xD6, 0x31,  // .......1
            /* 1890 */  0xC7, 0x01, 0xDF, 0x42, 0x60, 0xDF, 0x14, 0x1E,  // ...B`...
            /* 1898 */  0x8F, 0x8C, 0xF2, 0x9E, 0xC2, 0x6E, 0x23, 0x60,  // .....n#`
            /* 18A0 */  0xFD, 0xFF, 0xDF, 0x46, 0x70, 0x47, 0xCF, 0xE7,  // ...FpG..
            /* 18A8 */  0x76, 0xF0, 0x40, 0xBC, 0xB3, 0x19, 0xFD, 0x79,  // v.@....y
            /* 18B0 */  0xEA, 0x9C, 0xD9, 0x1C, 0x8E, 0xC6, 0x63, 0xF0,  // ......c.
            /* 18B8 */  0x61, 0xC2, 0xE7, 0x57, 0xC0, 0xCD, 0xB0, 0xB8,  // a..W....
            /* 18C0 */  0xEC, 0xE7, 0xA2, 0x81, 0x7C, 0xE7, 0x90, 0x50,  // ....|..P
            /* 18C8 */  0x18, 0xD4, 0xE1, 0xCE, 0x47, 0x74, 0xC0, 0xC9,  // ....Gt..
            /* 18D0 */  0x79, 0x1C, 0xF6, 0x94, 0xDF, 0x60, 0x8C, 0xF0,  // y....`..
            /* 18D8 */  0xEC, 0x12, 0x38, 0xC6, 0x49, 0xBC, 0x88, 0xBC,  // ..8.I...
            /* 18E0 */  0xB8, 0x18, 0x3D, 0xD6, 0xF3, 0x38, 0xBB, 0x28,  // ..=..8.(
            /* 18E8 */  0x1C, 0x43, 0x28, 0x9F, 0x31, 0x42, 0xC4, 0x8A,  // .C(.1B..
            /* 18F0 */  0x62, 0xD4, 0x20, 0x8F, 0x0B, 0xFE, 0xFF, 0x83,  // b. .....
            /* 18F8 */  0x3C, 0xCB, 0x44, 0x38, 0x94, 0xB8, 0xC6, 0x7B,  // <.D8...{
            /* 1900 */  0x1E, 0x67, 0x22, 0x87, 0x4C, 0x0F, 0x7B, 0xE4,  // .g".L.{.
            /* 1908 */  0x1C, 0x0D, 0xB2, 0x63, 0x03, 0x60, 0xEE, 0x74,  // ...c.`.t
            /* 1910 */  0x80, 0x3B, 0x45, 0x83, 0x69, 0xB0, 0xB0, 0x07,  // .;E.i...
            /* 1918 */  0xC1, 0x15, 0xDA, 0xF4, 0xA9, 0xD1, 0xA8, 0x55,  // .......U
            /* 1920 */  0x83, 0x32, 0x35, 0xCA, 0x34, 0xA8, 0xD5, 0xA7,  // .25.4...
            /* 1928 */  0x52, 0x63, 0xC6, 0xA4, 0x1C, 0x04, 0x74, 0x80,  // Rc....t.
            /* 1930 */  0xF2, 0x6F, 0xC2, 0x31, 0x40, 0xE8, 0x5D, 0xCA,  // .o.1@.].
            /* 1938 */  0xA3, 0xF3, 0x89, 0xC2, 0x40, 0x16, 0x05, 0x22,  // ....@.."
            /* 1940 */  0x20, 0x07, 0x00, 0xA2, 0xA1, 0x40, 0x68, 0x48,  //  ....@hH
            /* 1948 */  0x30, 0x2A, 0x8B, 0x46, 0x40, 0x0E, 0x00, 0x42,  // 0*.F@..B
            /* 1950 */  0x43, 0x81, 0xD0, 0x90, 0x14, 0x3A, 0x97, 0x12,  // C....:..
            /* 1958 */  0x0A, 0x01, 0x59, 0x28, 0x08, 0x15, 0x0E, 0x42,  // ..Y(...B
            /* 1960 */  0xC3, 0x81, 0x50, 0xD5, 0x0F, 0x05, 0x81, 0xFA,  // ..P.....
            /* 1968 */  0xFF, 0x9F, 0x12, 0x44, 0x40, 0x4E, 0x0E, 0x42,  // ...D@N.B
            /* 1970 */  0x75, 0x7F, 0xC0, 0x04, 0x62, 0xB9, 0x1F, 0x40,  // u...b..@
            /* 1978 */  0x01, 0x3A, 0x1C, 0x88, 0x80, 0x1C, 0x18, 0x84,  // .:......
            /* 1980 */  0x7E, 0xBF, 0x0C, 0x62, 0xAD, 0x20, 0x74, 0xA5,  // ~..b. t.
            /* 1988 */  0x06, 0xB5, 0x14, 0x2D, 0x40, 0x4C, 0x1E, 0x08,  // ...-@L..
            /* 1990 */  0x95, 0x0B, 0x22, 0x30, 0x47, 0x03, 0xA2, 0x71,  // .."0G..q
            /* 1998 */  0x41, 0x68, 0x7C, 0x30, 0x2A, 0xD5, 0x0B, 0x10,  // Ah|0*...
            /* 19A0 */  0x93, 0x0F, 0x42, 0xE3, 0x80, 0xE8, 0x74, 0x40,  // ..B...t@
            /* 19A8 */  0x9E, 0x0D, 0x1A, 0x30, 0x01, 0xA1, 0x22, 0x41,  // ...0.."A
            /* 19B0 */  0x04, 0xE6, 0x58, 0x40, 0x34, 0x2A, 0x08, 0x8D,  // ..X@4*..
            /* 19B8 */  0x0E, 0x46, 0xA5, 0x9B, 0x19, 0x00, 0x05, 0xA1,  // .F......
            /* 19C0 */  0xF1, 0x40, 0x74, 0xFE, 0x26, 0x6A, 0x80, 0x98,  // .@t.&j..
            /* 19C8 */  0x44, 0x10, 0x2A, 0x19, 0x44, 0x60, 0x8E, 0x0A,  // D.*.D`..
            /* 19D0 */  0x44, 0xE3, 0x83, 0x50, 0x39, 0x6E, 0xC0, 0x58,  // D..P9n.X
            /* 19D8 */  0x04, 0x10, 0x1D, 0x09, 0x08, 0x08, 0x8D, 0x09,  // ........
            /* 19E0 */  0x42, 0xA5, 0xBC, 0x19, 0x04, 0x68, 0xF9, 0x20,  // B....h. 
            /* 19E8 */  0x02, 0x72, 0x24, 0x10, 0x1A, 0x11, 0x8C, 0x8A,  // .r$.....
            /* 19F0 */  0xD5, 0x73, 0x24, 0xA0, 0x20, 0x34, 0x10, 0x88,  // .s$. 4..
            /* 19F8 */  0x86, 0x48, 0xFC, 0x0C, 0x91, 0x82, 0x50, 0x91,  // .H....P.
            /* 1A00 */  0x20, 0x02, 0xB3, 0x44, 0x45, 0x20, 0x2C, 0x20,  //  ..DE , 
            /* 1A08 */  0x08, 0x0D, 0xF5, 0x88, 0x11, 0xA0, 0x83, 0x82,  // ........
            /* 1A10 */  0xD0, 0xE0, 0x20, 0x1A, 0x38, 0xB1, 0x34, 0x70,  // .. .8.4p
            /* 1A18 */  0x0A, 0x42, 0xE3, 0x80, 0x08, 0xCC, 0xF1, 0x81,  // .B......
            /* 1A20 */  0xA8, 0x24, 0x4D, 0x03, 0xA5, 0x20, 0x1A, 0x06,  // .$M.. ..
            /* 1A28 */  0x31, 0x35, 0x0C, 0x0A, 0x42, 0x63, 0xB8, 0x02,  // 15..Bc..
            /* 1A30 */  0x64, 0xD1, 0x40, 0x68, 0x54, 0x10, 0x1D, 0x1F,  // d.@hT...
            /* 1A38 */  0xC8, 0xC3, 0x56, 0x40, 0x96, 0x0A, 0x42, 0xFF,  // ..V@..B.
            /* 1A40 */  0xFF, 0xD2, 0x41, 0x04, 0xE6, 0xC0, 0x40, 0x54,  // ..A...@T
            /* 1A48 */  0xC4, 0xBB, 0xE5, 0xF0, 0x18, 0x08, 0x15, 0x0B,  // ........
            /* 1A50 */  0x22, 0x40, 0x0B, 0x7E, 0x43, 0x09, 0xC4, 0x71,  // "@.~C..q
            /* 1A58 */  0x41, 0x68, 0xA8, 0xCF, 0x93, 0x86, 0x47, 0x40,  // Ah....G@
            /* 1A60 */  0x68, 0x70, 0x10, 0x81, 0x59, 0xE8, 0x0F, 0x4F,  // hp..Y..O
            /* 1A68 */  0x40, 0x16, 0x0F, 0x42, 0xC3, 0x80, 0xD0, 0x90,  // @..B....
            /* 1A70 */  0x20, 0xF4, 0x5D, 0xE2, 0xA3, 0x06, 0xF9, 0xE5,  //  .].....
            /* 1A78 */  0xE9, 0x38, 0x40, 0x40, 0xA8, 0xD8, 0x5F, 0x9F,  // .8@@.._.
            /* 1A80 */  0x8E, 0x00, 0x04, 0x84, 0x06, 0x02, 0xD1, 0x11,  // ........
            /* 1A88 */  0x80, 0xA8, 0x1B, 0x14, 0x05, 0xA1, 0x22, 0x41,  // ......"A
            /* 1A90 */  0x04, 0xE6, 0x40, 0x40, 0x34, 0x24, 0x08, 0x0D,  // ..@@4$..
            /* 1A98 */  0x0D, 0x46, 0xC5, 0xBA, 0x1B, 0x02, 0x05, 0xA1,  // .F......
            /* 1AA0 */  0x81, 0x40, 0x68, 0x50, 0x10, 0x1D, 0x3B, 0x88,  // .@hP..;.
            /* 1AA8 */  0xBC, 0x63, 0x07, 0x05, 0xA1, 0xC2, 0x41, 0x04,  // .c....A.
            /* 1AB0 */  0x66, 0xE1, 0xFE, 0x40, 0x58, 0x6C, 0x10, 0xAA,  // f..@Xl..
            /* 1AB8 */  0xE9, 0xAF, 0x12, 0x90, 0xE8, 0x03, 0xA1, 0x9A,  // ........
            /* 1AC0 */  0x41, 0x64, 0x64, 0x18, 0x06, 0x11, 0xA0, 0xB3,  // Add.....
            /* 1AC8 */  0x82, 0xD1, 0xDC, 0x20, 0x54, 0xCB, 0x97, 0x48,  // ... T..H
            /* 1AD0 */  0x80, 0x16, 0x06, 0xA2, 0x03, 0x01, 0x01, 0xD1,  // ........
            /* 1AD8 */  0xE1, 0x81, 0x80, 0xD0, 0x98, 0x80, 0x34, 0x33,  // ......43
            /* 1AE0 */  0x20, 0x4D, 0xF4, 0xD2, 0x11, 0x98, 0xF3, 0x81,  //  M......
            /* 1AE8 */  0x50, 0x1D, 0x9F, 0x9A, 0x20, 0x24, 0x36, 0x88,  // P... $6.
            /* 1AF0 */  0x40, 0x2D, 0xE2, 0x5D, 0x13, 0x94, 0x84, 0x00,  // @-.]....
            /* 1AF8 */  0xD1, 0x11, 0x81, 0x80, 0xD0, 0xC0, 0x20, 0xF4,  // ...... .
            /* 1B00 */  0x6D, 0x66, 0x10, 0x27, 0x03, 0xA1, 0x29, 0x41,  // mf.'..)A
            /* 1B08 */  0x68, 0x72, 0x10, 0x0D, 0xC0, 0x32, 0x1E, 0x57,  // hr...2.W
            /* 1B10 */  0x1A, 0x80, 0xD5, 0x83, 0x08, 0xCC, 0x49, 0x40,  // ......I@
            /* 1B18 */  0x68, 0x3A, 0x10, 0x01, 0x3A, 0x2A, 0x20, 0xFD,  // h:..:* .
            /* 1B20 */  0xFF, 0x07, 0x51, 0x79, 0xDC, 0xA0, 0x20, 0x34,  // ..Qy.. 4
            /* 1B28 */  0x3E, 0x08, 0x4D, 0xFB, 0x62, 0x14, 0xA8, 0xB3,  // >.M.b...
            /* 1B30 */  0x83, 0x08, 0xD4, 0xDA, 0xDF, 0x3B, 0xC1, 0x48,  // .....;.H
            /* 1B38 */  0x22, 0x10, 0x9A, 0x13, 0x84, 0xE6, 0x06, 0xA1,  // ".......
            /* 1B40 */  0x41, 0x1E, 0x48, 0x8F, 0x34, 0x0C, 0x84, 0x06,  // A.H.4...
            /* 1B48 */  0x05, 0xD1, 0x00, 0x9C, 0x1A, 0x44, 0x03, 0x70,  // .....D.p
            /* 1B50 */  0xA6, 0x97, 0x52, 0x30, 0x92, 0x10, 0x84, 0xE6,  // ..R0....
            /* 1B58 */  0x07, 0xA1, 0x8A, 0x5F, 0x47, 0x41, 0x89, 0x7E,  // ..._GA.~
            /* 1B60 */  0x10, 0x81, 0x3A, 0x3F, 0x88, 0xC0, 0xAC, 0xEA,  // ..:?....
            /* 1B68 */  0x3D, 0xA5, 0xA3, 0x0C, 0x01, 0xA1, 0xDA, 0x41,  // =......A
            /* 1B70 */  0xA8, 0xAE, 0x27, 0x51, 0x50, 0x92, 0x0A, 0x84,  // ..'QP...
            /* 1B78 */  0x26, 0xFD, 0x17, 0x05, 0x21, 0x3A, 0xDF, 0x7C,  // &...!:.|
            /* 1B80 */  0x87, 0xC2, 0x40, 0x34, 0x30, 0x02, 0x42, 0x73,  // ..@40.Bs
            /* 1B88 */  0x83, 0x51, 0x69, 0x6A, 0x8F, 0x35, 0x14, 0x44,  // .Qij.5.D
            /* 1B90 */  0x83, 0xB1, 0x76, 0x10, 0x81, 0x39, 0x31, 0x18,  // ..v..91.
            /* 1B98 */  0x55, 0xE1, 0x16, 0x8C, 0x49, 0x02, 0x11, 0x98,  // U...I...
            /* 1BA0 */  0xB3, 0x80, 0xE8, 0x60, 0x40, 0xC0, 0x68, 0x58,  // ...`@.hX
            /* 1BA8 */  0x30, 0x2A, 0xF4, 0x43, 0xF5, 0xA0, 0xC1, 0x40,  // 0*.C...@
            /* 1BB0 */  0x04, 0xE6, 0x24, 0x20, 0x3A, 0xF0, 0x10, 0xBB,  // ..$ :...
            /* 1BB8 */  0x07, 0x1E, 0x0A, 0x22, 0x30, 0x6B, 0x05, 0x11,  // ..."0k..
            /* 1BC0 */  0x98, 0x83, 0x82, 0xD1, 0xF0, 0x60, 0x54, 0x89,  // .....`T.
            /* 1BC8 */  0x5E, 0x30, 0x96, 0x1A, 0x44, 0x60, 0x56, 0xFB,  // ^0..D`V.
            /* 1BD0 */  0x82, 0x7A, 0xF4, 0x60, 0x3F, 0xA8, 0x80, 0x24,  // .z.`?..$
            /* 1BD8 */  0x1A, 0x88, 0x06, 0x47, 0xFE, 0xD5, 0x02, 0xB3,  // ...G....
            /* 1BE0 */  0x60, 0x10, 0x1A, 0x03, 0x84, 0xC6, 0x02, 0xA1,  // `.......
            /* 1BE8 */  0x92, 0x1F, 0x8A, 0x3A, 0x9E, 0x10, 0x10, 0x1A,  // ...:....
            /* 1BF0 */  0xF7, 0x43, 0x15, 0x8C, 0x48, 0xF8, 0x75, 0xEA,  // .C..H.u.
            /* 1BF8 */  0xE0, 0x42, 0x40, 0x74, 0x80, 0x20, 0x40, 0x34,  // .B@t. @4
            /* 1C00 */  0x18, 0x08, 0x0D, 0x0A, 0xC8, 0xDF, 0x64, 0x02,  // ......d.
            /* 1C08 */  0xF4, 0xFF, 0x3F, 0x04, 0x88, 0x00, 0x09, 0x08,  // ..?.....
            /* 1C10 */  0x0D, 0x0A, 0x42, 0x15, 0x3D, 0xEB, 0x1E, 0x0E,  // ..B.=...
            /* 1C18 */  0x18, 0x88, 0x40, 0xAD, 0xEB, 0x05, 0xFD, 0x50,  // ..@....P
            /* 1C20 */  0xC0, 0x40, 0xA8, 0x76, 0x10, 0x81, 0x39, 0x33,  // .@.v..93
            /* 1C28 */  0x10, 0xD5, 0xF1, 0x87, 0x7D, 0x30, 0x60, 0x20,  // ....}0` 
            /* 1C30 */  0x34, 0x04, 0x08, 0xD5, 0xF8, 0xBC, 0x13, 0xA8,  // 4.......
            /* 1C38 */  0xF3, 0x80, 0x08, 0xC8, 0x19, 0x41, 0x68, 0x66,  // .....Ahf
            /* 1C40 */  0x30, 0xAA, 0xF4, 0xF5, 0x15, 0x88, 0xA8, 0x07,  // 0.......
            /* 1C48 */  0xA1, 0x69, 0x40, 0x68, 0x4A, 0x10, 0x01, 0x5A,  // .i@hJ..Z
            /* 1C50 */  0xD9, 0x8B, 0x54, 0x43, 0x27, 0x20, 0x54, 0x3D,  // ..TC' T=
            /* 1C58 */  0x88, 0xC0, 0x9C, 0xFE, 0x07, 0xA8, 0x63, 0x05,  // ......c.
            /* 1C60 */  0x79, 0x8A, 0x09, 0xC4, 0xCA, 0xFF, 0x6C, 0x07,  // y.....l.
            /* 1C68 */  0xC0, 0x40, 0x68, 0x3A, 0x10, 0x9A, 0x1F, 0x84,  // .@h:....
            /* 1C70 */  0x6A, 0x7D, 0x96, 0x05, 0x25, 0xF9, 0x40, 0x34,  // j}..%.@4
            /* 1C78 */  0x20, 0x02, 0x42, 0x35, 0x7C, 0x46, 0x0F, 0x80,  //  .B5|F..
            /* 1C80 */  0x81, 0x68, 0x00, 0x04, 0x84, 0xA6, 0x03, 0xA3,  // .h......
            /* 1C88 */  0x6A, 0xDE, 0xC2, 0x81, 0x88, 0x42, 0x10, 0xAA,  // j....B..
            /* 1C90 */  0x18, 0x84, 0xE6, 0x03, 0xA1, 0x01, 0xDF, 0xF5,  // ........
            /* 1C98 */  0x3A, 0x30, 0x90, 0xEF, 0x9F, 0x0E, 0x21, 0x04,  // :0....!.
            /* 1CA0 */  0x84, 0xC6, 0xF1, 0x7F, 0x18, 0xA3, 0x20, 0x34,  // ...... 4
            /* 1CA8 */  0x2C, 0x88, 0xC0, 0x2C, 0x2C, 0xC0, 0x31, 0x88,  // ,..,,.1.
            /* 1CB0 */  0x82, 0x50, 0xF1, 0x20, 0x3A, 0x20, 0x10, 0x20,  // .P. : . 
            /* 1CB8 */  0x2A, 0xA1, 0xC0, 0xC1, 0x80, 0x82, 0x68, 0x10,  // *.....h.
            /* 1CC0 */  0x04, 0x88, 0x86, 0x03, 0xA1, 0x61, 0xC1, 0xA8,  // .....a..
            /* 1CC8 */  0xBC, 0x04, 0x47, 0x06, 0x0A, 0x42, 0x23, 0x80,  // ..G..B#.
            /* 1CD0 */  0x08, 0xCC, 0x91, 0x81, 0xA8, 0x8C, 0x06, 0xC3,  // ........
            /* 1CD8 */  0xA3, 0x11, 0xC0, 0x58, 0x32, 0x10, 0x1D, 0x53,  // ...X2..S
            /* 1CE0 */  0x08, 0x08, 0xD5, 0x9C, 0x01, 0x8C, 0xFD, 0xFF,  // ........
            /* 1CE8 */  0x93, 0x82, 0x08, 0xC8, 0xE9, 0x41, 0x68, 0xDC,  // .....Ah.
            /* 1CF0 */  0x12, 0x60, 0xEC, 0xFF, 0x0F                     // .`...
        })
        Name (WDST, Buffer (0x2C)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (WDIN, Buffer (0x30)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (WDEN, Buffer (0x2C)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (WDLI, Buffer (0x28)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (WDPA, Buffer (0x34)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (WDBU, Buffer (0x38)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (QPUW, 3, Serialized)
        {
            Local7 = 0x04
            If ((Arg1 < Arg2))
            {
                PWOT = Arg0
                PWOI = Arg1
                PUWS = 0x04
                GSWS (0x01F3)
                Local7 = PUWS /* \PUWS */
                If ((Local7 == Zero))
                {
                    Local1 = PWOI /* \PWOI */
                    If ((Local1 < 0x96))
                    {
                        Local0 = PWBS /* \PWBS */
                    }
                    ElseIf ((Local1 < 0x0190))
                    {
                        Local0 = PWBM /* \PWBM */
                    }
                    ElseIf ((Local1 < 0x03E8))
                    {
                        Local0 = PWBL /* \PWBL */
                    }
                    Else
                    {
                        Local0 = PUWB /* \PUWB */
                    }
                }
            }

            If ((Local7 != Zero))
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Local0 = WDST /* \_SB_.WMIB.WDST */
                    }
                    Case (One)
                    {
                        Local0 = WDIN /* \_SB_.WMIB.WDIN */
                    }
                    Case (0x02)
                    {
                        Local0 = WDEN /* \_SB_.WMIB.WDEN */
                    }
                    Case (0x03)
                    {
                        Local0 = WDLI /* \_SB_.WMIB.WDLI */
                    }
                    Case (0x04)
                    {
                        Local0 = WDPA /* \_SB_.WMIB.WDPA */
                    }
                    Case (0x05)
                    {
                        Local0 = WDBU /* \_SB_.WMIB.WDBU */
                    }
                    Default
                    {
                        Local0 = WDEN /* \_SB_.WMIB.WDEN */
                    }

                }
            }

            Return (Local0)
        }

        Method (WQST, 1, Serialized)
        {
            Return (QPUW (Zero, Arg0, STIC))
        }

        Method (WQIN, 1, Serialized)
        {
            Return (QPUW (One, Arg0, INIC))
        }

        Method (WQEN, 1, Serialized)
        {
            Return (QPUW (0x02, Arg0, ENIC))
        }

        Method (WQOL, 1, Serialized)
        {
            Return (QPUW (0x03, Arg0, OLIC))
        }

        Method (WQPW, 1, Serialized)
        {
            Return (QPUW (0x04, Arg0, PWIC))
        }

        Method (WQBU, 1, Serialized)
        {
            Return (QPUW (0x05, Arg0, BUIC))
        }

        Name (TBFS, Buffer (0x96){})
        Name (TBFM, Buffer (0x0190){})
        Name (TBFL, Buffer (0x03E8){})
        Name (TBUF, Buffer (0x9000){})
        Method (SHBE, 4, Serialized)
        {
            Local6 = SizeOf (Arg2)
            Local0 = DerefOf (Arg3)
            If (((Local0 + 0x04) < Local6))
            {
                Arg2 [Local0] = Arg0
                Local0++
                Arg2 [Local0] = 0x82
                Local0++
                CreateWordField (Arg2, Local0, SSIZ)
                SSIZ = Arg1
                Local0 += 0x02
                If (((Local0 + Arg1) < Local6))
                {
                    Local7 = Zero
                }

                Arg3 = Local0
            }
            Else
            {
                Local7 = 0x04
            }

            Return (Local7)
        }

        Method (WSTB, 4, Serialized)
        {
            Local0 = Zero
            Local1 = SizeOf (Arg0)
            Local2 = Zero
            Local7 = SHBE (0x30, One, Arg1, RefOf (Local2))
            Local3 = Zero
            While (((Local7 == Zero) && (Local0 < Local1)))
            {
                Local5 = DerefOf (Arg0 [Local0])
                Local0++
                Local5 += (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local6 = (Local5 + 0x02)
                Local7 = SHBE (0x1E, Local6, Arg1, RefOf (Local2))
                If ((Local7 == Zero))
                {
                    If ((CPBF (Arg1, RefOf (Local2), Arg0, RefOf (Local0), Local5) == One))
                    {
                        Arg1 [Local2] = Zero
                        Local2++
                        Arg1 [Local2] = Zero
                        Local2++
                        Local3++
                    }
                    Else
                    {
                        Local7 = 0x04
                    }
                }
            }

            If ((Local7 == Zero))
            {
                If (((Local3 >= Arg2) && (Local3 <= Arg3)))
                {
                    CreateWordField (Arg1, 0x02, BSIZ)
                    BSIZ = (Local2 - 0x04)
                }
                Else
                {
                    Local7 = 0x05
                }
            }

            Return (Local7)
        }

        Name (BNSD, Package (0x01)
        {
            ""
        })
        Method (BSNS, 1, Serialized)
        {
            Local0 = Zero
            CreateWordField (Arg0, Local0, SSIZ)
            Local0 += 0x02
            Local2 = ((0x02 + SSIZ) + 0x02)
            Local1 = Buffer (Local2){}
            Local3 = 0x02
            If ((CPBF (Local1, RefOf (Local3), Arg0, RefOf (Local0), SSIZ) == One))
            {
                CreateWordField (Local1, Local3, UNUL)
                UNUL = Zero
                CreateWordField (Local1, Zero, USIZ)
                USIZ = (SSIZ + 0x02)
            }

            BNSD [Zero] = Local1
        }

        Method (BGNS, 0, Serialized)
        {
            Return (DerefOf (BNSD [Zero]))
        }

        Method (WSBS, 1, Serialized)
        {
            Acquire (PUMX, 0xFFFF)
            Local7 = 0x04
            Local6 = (SizeOf (Arg0) + 0x10)
            If ((Local6 < SizeOf (TBFS)))
            {
                Local7 = WSTB (Arg0, TBFS, 0x02, 0x03)
                If ((Local7 == Zero))
                {
                    PWBS = TBFS /* \_SB_.WMIB.TBFS */
                }
            }
            ElseIf ((Local6 < SizeOf (TBFL)))
            {
                Local7 = WSTB (Arg0, TBFL, 0x02, 0x03)
                If ((Local7 == Zero))
                {
                    PWBL = TBFL /* \_SB_.WMIB.TBFL */
                }
            }
            ElseIf ((Local6 <= SizeOf (TBUF)))
            {
                Local7 = WSTB (Arg0, TBUF, 0x02, 0x03)
                If ((Local7 == Zero))
                {
                    PUWB = TBUF /* \_SB_.WMIB.TBUF */
                }
            }

            If ((Local7 == Zero))
            {
                BSNS (Arg0)
                PUWS = 0x04
                GSWS (0x02F3)
                Local7 = PUWS /* \PUWS */
                If ((Local6 < SizeOf (TBFS)))
                {
                    TBFS = PWBS /* \PWBS */
                }
                ElseIf ((Local6 < SizeOf (TBFL)))
                {
                    TBFL = PWBL /* \PWBL */
                }
                Else
                {
                    TBUF = PUWB /* \PUWB */
                }

                If ((Local7 == Zero))
                {
                    GBME (Zero)
                }
                ElseIf ((Local7 == 0x06))
                {
                    GBME (One)
                }
            }

            Release (PUMX)
            Return (Local7)
        }

        Method (WSSD, 1, Serialized)
        {
            Acquire (PUMX, 0xFFFF)
            Local7 = WSTB (Arg0, TBUF, 0x02, 0x02)
            PUWB = TBUF /* \_SB_.WMIB.TBUF */
            If ((Local7 == Zero))
            {
                PUWS = 0x04
                GSWS (0x03F3)
                Local7 = PUWS /* \PUWS */
                TBUF = PUWB /* \PUWB */
                If ((Local7 == Zero))
                {
                    GBME (Zero)
                }
                ElseIf ((Local7 == 0x06))
                {
                    GBME (One)
                }
            }

            Release (PUMX)
            Return (Local7)
        }

        Method (WFTE, 1, Serialized)
        {
            Local7 = 0x04
            Return (Local7)
        }

        Method (WMBS, 3, Serialized)
        {
            Local7 = One
            If ((Arg1 == One))
            {
                Local7 = WSBS (Arg2)
            }
            ElseIf ((Arg1 == 0x02))
            {
                Local7 = WSSD (Arg2)
            }
            ElseIf ((Arg1 == 0x03))
            {
                Local7 = WFTE (Arg2)
            }

            Return (Local7)
        }

        Method (WMUI, 3, Serialized)
        {
            Local7 = One
            If ((Arg1 == One))
            {
                Acquire (PUMX, 0xFFFF)
                Local7 = WSTB (Arg0, TBUF, 0x06, 0x06)
                PUWB = TBUF /* \_SB_.WMIB.TBUF */
                If ((Local7 == Zero))
                {
                    PUWS = 0x04
                    Local7 = PUWS /* \PUWS */
                }

                Release (PUMX)
            }

            Return (Local7)
        }

        Name (CBWE, Package (0x02)
        {
            Package (0x05)
            {
                Unicode ("4BIOS Configuration Change"), 
                "BIOS Settings", 
                0x04, 
                0x05, 
                0x02
            }, 

            Package (0x05)
            {
                "BIOS Configuration Security", 
                "An attempt has been made to Access BIOS features unsuccessfully", 
                0x04, 
                0x0A, 
                0x06
            }
        })
        Name (UKEV, Package (0x05)
        {
            "Unknown Event", 
            "Unknown event type", 
            Zero, 
            Zero, 
            Zero
        })
        Mutex (BEMX, 0x00)
        Name (BEID, 0xFF)
        Method (_WED, 1, Serialized)  // _Wxx: Wake Event, xx=0x00-0xFF
        {
            Acquire (BEMX, 0xFFFF)
            Local0 = BEID /* \_SB_.WMIB.BEID */
            BEID = 0xFF
            Release (BEMX)
            Switch (ToInteger (Local0))
            {
                Case (Zero)
                {
                    DerefOf (CBWE [Local0]) [One] = BGNS ()
                    Local1 = DerefOf (CBWE [Local0])
                }
                Case (One)
                {
                    Local1 = DerefOf (CBWE [Local0])
                }
                Default
                {
                    Local1 = UKEV /* \_SB_.WMIB.UKEV */
                }

            }

            Return (Local1)
        }

        Method (GBME, 1, Serialized)
        {
            Acquire (BEMX, 0xFFFF)
            BEID = Arg0
            Release (BEMX)
            Notify (WMIB, 0x80) // Status Change
        }

        Name (PEVT, Package (0x07)
        {
            "", 
            "", 
            "root\\wmi", 
            "HPBIOS_BIOSEvent", 
            Zero, 
            Zero, 
            Zero
        })
        Method (WQPE, 1, Serialized)
        {
            PEVT [Zero] = DerefOf (DerefOf (CBWE [Arg0]) [
                Zero])
            PEVT [One] = DerefOf (DerefOf (CBWE [Arg0]) [
                One])
            PEVT [0x04] = DerefOf (DerefOf (CBWE [Arg0]) [
                0x02])
            PEVT [0x05] = DerefOf (DerefOf (CBWE [Arg0]) [
                0x03])
            PEVT [0x06] = DerefOf (DerefOf (CBWE [Arg0]) [
                0x04])
            Return (PEVT) /* \_SB_.WMIB.PEVT */
        }

        OperationRegion (HWSS, SystemMemory, 0x97B0D000, 0x00000802)
        Field (HWSS, AnyAcc, Lock, Preserve)
        {
            WSSC,   16, 
            WSSB,   16384
        }

        Name (SENS, Package (0x08)
        {
            "BIOS Post Error", 
            " ", 
            One, 
            "BIOS Post Error", 
            One, 
            One, 
            "Post Error Occurred", 
            "Post Error Occurred"
        })
        Method (WQSS, 1, Serialized)
        {
            Local7 = Zero
            Local5 = Zero
            Local0 = WSSB /* \_SB_.WMIB.WSSB */
            While (((Local5 < 0x0800) && (Local7 < Arg0)))
            {
                Local1 = (DerefOf (Local0 [Local5]) + 0x02)
                Local5 += Local1
                Local7++
            }

            If (((Local5 < 0x0800) && (Local7 == Arg0)))
            {
                Local3 = DerefOf (Local0 [Local5])
                Local2 = Buffer (Local3){}
                Local5++
                Local6 = Zero
                While (((Local5 < 0x0800) && (Local6 < Local3)))
                {
                    Local2 [Local6] = DerefOf (Local0 [Local5])
                    Local6++
                    Local5++
                }

                SENS [One] = B2ST (Local2, Local3)
                SENS [0x04] = DerefOf (Local0 [Local5])
            }
            Else
            {
                SENS [One] = "Unknown Error"
                SENS [0x04] = Zero
            }

            Return (SENS) /* \_SB_.WMIB.SENS */
        }
    }

    OperationRegion (HPWV, SystemMemory, 0x97AF7000, 0x0000107C)
    Field (HPWV, AnyAcc, Lock, Preserve)
    {
        SNIN,   32, 
        COMD,   32, 
        CMTP,   32, 
        DASI,   32, 
        DASO,   32, 
        PVWB,   33536, 
        PVWS,   32, 
        RTCD,   32
    }

    Device (_SB.WMIV)
    {
        Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
        Name (_UID, 0x02)  // _UID: Unique ID
        Name (BORN, Buffer (0x08){})
        Method (FBCD, 3, Serialized)
        {
            Local2 = Package (0x01)
                {
                    0x04
                }
            CreateByteField (Arg2, Zero, FCIP)
            If ((Arg0 == Zero))
            {
                Switch (FCIP)
                {
                    Case (0x08)
                    {
                        Local6 = 0x11
                    }
                    Case (0x0A)
                    {
                        Local6 = 0x02
                    }
                    Default
                    {
                        Local6 = One
                    }

                }

                Local2 = FSEC (Arg2, Local6, FCIP)
            }

            If ((Arg0 == One))
            {
                Local2 = FGIF (FCIP)
            }

            If ((Arg0 == 0x02))
            {
                Local2 = FGAE (FCIP)
            }

            If ((Arg0 == 0x03))
            {
                Local2 = FGAU (FCIP)
            }

            If ((Arg0 == 0x04))
            {
                Local2 = FGFS ()
            }

            If ((Arg0 == 0x05))
            {
                Local2 = FBPS (Arg2)
            }

            If ((Arg0 == 0x06))
            {
                Local2 = FGLW ()
            }

            Return (Local2)
        }

        Method (FSEC, 3, Serialized)
        {
            If ((FGLC () != Zero))
            {
                Return (Package (0x01)
                {
                    0x40
                })
            }

            Switch (Arg2)
            {
                Case (Zero)
                {
                    ^^PCI0.LPCB.EC0.FBCM = Arg2
                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
                Case (One)
                {
                    ^^PCI0.LPCB.EC0.FBCM = Arg2
                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
                Case (0x02)
                {
                    ^^PCI0.LPCB.EC0.FBCM = Arg2
                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
                Case (0x08)
                {
                    ^^PCI0.LPCB.EC0.FBCM = Arg2
                    Local2 = One
                    Local3 = One
                    While ((Local3 != Arg1))
                    {
                        ^^PCI0.LPCB.EC0.FBID = DerefOf (Arg0 [Local2])
                        Local2++
                        Local3++
                    }

                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
                Case (0x0A)
                {
                    ^^PCI0.LPCB.EC0.FBCM = Arg2
                    Local2 = One
                    Local3 = One
                    While ((Local3 != Arg1))
                    {
                        ^^PCI0.LPCB.EC0.FBID = DerefOf (Arg0 [Local2])
                        Local2++
                        Local3++
                    }

                    Return (Package (0x01)
                    {
                        Zero
                    })
                }
                Default
                {
                    Return (Package (0x01)
                    {
                        0x06
                    })
                }

            }
        }

        Method (FGIF, 1, Serialized)
        {
            If ((FGLC () != Zero))
            {
                Return (Package (0x01)
                {
                    0x40
                })
            }

            Switch (Arg0)
            {
                Case (Zero)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x04){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = Zero
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local1 = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                    DerefOf (Local0 [One]) [Zero] = Local1
                    Return (Local0)
                }
                Case (One)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = One
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x20))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x02)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x02
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x20))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x03)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x03
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x20))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x04)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x04
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x20))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x05)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x05
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x20))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x08)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x1000){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x08
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x1000))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x09)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x1000){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x09
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x1000))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x0A)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x80){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x0A
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x02)
                        {
                            0x41, 
                            Zero
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x06))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x0B)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x04){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x0B
                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != One))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x0C)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x04){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x0C
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != One))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Case (0x0F)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x04){}
                        }
                    ^^PCI0.LPCB.EC0.FBGI = 0x0F
                    If ((FLCC () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            0x41
                        })
                    }

                    Local3 = Zero
                    Local2 = Zero
                    While ((Local3 != 0x04))
                    {
                        DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBGI /* \_SB_.PCI0.LPCB.EC0_.FBGI */
                        Local2++
                        Local3++
                    }

                    Return (Local0)
                }
                Default
                {
                    Return (Package (0x01)
                    {
                        0x06
                    })
                }

            }
        }

        Method (FGAE, 1, Serialized)
        {
            If ((FGLC () != Zero))
            {
                Return (Package (0x01)
                {
                    0x40
                })
            }

            If ((Arg0 < 0x0100))
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x80){}
                    }
                ^^PCI0.LPCB.EC0.FBAE = Arg0
                If ((FLCC () == Zero))
                {
                    Return (Package (0x01)
                    {
                        0x41
                    })
                }

                Local3 = Zero
                Local2 = Zero
                While ((Local3 != 0x10))
                {
                    DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FBAE /* \_SB_.PCI0.LPCB.EC0_.FBAE */
                    Local2++
                    Local3++
                }

                Return (Local0)
            }
            Else
            {
                Return (Package (0x01)
                {
                    0x06
                })
            }
        }

        Method (FGAU, 1, Serialized)
        {
            If ((FGLC () != Zero))
            {
                Return (Package (0x01)
                {
                    0x40
                })
            }

            If ((Arg0 < 0x0100))
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x80){}
                    }
                ^^PCI0.LPCB.EC0.FUAE = Arg0
                If ((FLCC () == Zero))
                {
                    Return (Package (0x01)
                    {
                        0x41
                    })
                }

                Local3 = Zero
                Local2 = Zero
                While ((Local3 != 0x10))
                {
                    DerefOf (Local0 [One]) [Local2] = ^^PCI0.LPCB.EC0.FUAE /* \_SB_.PCI0.LPCB.EC0_.FUAE */
                    Local2++
                    Local3++
                }

                Return (Local0)
            }
            Else
            {
                Return (Package (0x01)
                {
                    0x06
                })
            }
        }

        Method (FGFS, 0, NotSerialized)
        {
            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04){}
                }
            DerefOf (Local0 [One]) [Zero] = ^^PCI0.LPCB.EC0.FBCB /* \_SB_.PCI0.LPCB.EC0_.FBCB */
            DerefOf (Local0 [One]) [One] = ^^PCI0.LPCB.EC0.FBW1 /* \_SB_.PCI0.LPCB.EC0_.FBW1 */
            DerefOf (Local0 [One]) [0x02] = ^^PCI0.LPCB.EC0.FBW2 /* \_SB_.PCI0.LPCB.EC0_.FBW2 */
            Return (Local0)
        }

        Method (FGLC, 0, NotSerialized)
        {
            Local0 = ^^PCI0.LPCB.EC0.FBCM /* \_SB_.PCI0.LPCB.EC0_.FBCM */
            Return (Local0)
        }

        Method (FGLW, 0, NotSerialized)
        {
            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04){}
                }
            DerefOf (Local0 [One]) [Zero] = ^^PCI0.LPCB.EC0.FBCM /* \_SB_.PCI0.LPCB.EC0_.FBCM */
            Return (Local0)
        }

        Method (FLCC, 0, NotSerialized)
        {
            Local0 = Zero
            While (((Local0 != 0x64) & (FGLC () == One)))
            {
                Sleep (0x64)
                Local0++
            }

            If ((Local0 >= 0x64))
            {
                Return (Zero)
            }
            Else
            {
                Return (One)
            }
        }

        Method (FBPS, 1, Serialized)
        {
            If ((FGLC () != Zero))
            {
                Return (Package (0x01)
                {
                    0x40
                })
            }

            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04){}
                }
            ^^PCI0.LPCB.EC0.FRPS = DerefOf (Arg0 [Zero])
            ^^PCI0.LPCB.EC0.FRPS = DerefOf (Arg0 [One])
            ^^PCI0.LPCB.EC0.FRPS = DerefOf (Arg0 [0x02])
            ^^PCI0.LPCB.EC0.FRPS = DerefOf (Arg0 [0x03])
            If ((FLCC () == Zero))
            {
                Return (Package (0x01)
                {
                    0x41
                })
            }

            DerefOf (Local0 [One]) [Zero] = ^^PCI0.LPCB.EC0.FRPS /* \_SB_.PCI0.LPCB.EC0_.FRPS */
            Return (Local0)
        }

        Method (HVWC, 4, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (One)
                {
                    Local2 = VRBC (Arg1, Arg2, Arg3)
                }
                Case (0x02)
                {
                    Local2 = VWBC (Arg1, Arg2, Arg3)
                }
                Case (0x00020006)
                {
                    Local2 = FBCD (Arg1, Arg2, Arg3)
                }
                Default
                {
                    Local2 = Package (0x01)
                        {
                            0x03
                        }
                }

            }

            Return (Local2)
        }

        Method (VRBC, 3, Serialized)
        {
            Return (Package (0x01)
            {
                0x04
            })
        }

        Method (VWBC, 3, Serialized)
        {
            Return (Package (0x01)
            {
                0x04
            })
        }

        Name (THCT, Buffer (0x06)
        {
             0x01, 0x01, 0x03, 0x01, 0x01, 0x02               // ......
        })
        Name (PRFI, Buffer (0x06)
        {
             0x00, 0x08, 0x0C, 0x14, 0x18, 0x1C               // ......
        })
        Name (TSTM, Zero)
        Name (TSTV, Package (0x06)
        {
            Buffer (One)
            {
                 0xFF                                             // .
            }, 

            Buffer (One)
            {
                 0xFF                                             // .
            }, 

            Buffer (0x03)
            {
                 0xFF, 0xFF, 0xFF                                 // ...
            }, 

            Buffer (One)
            {
                 0xFF                                             // .
            }, 

            Buffer (One)
            {
                 0xFF                                             // .
            }, 

            Buffer (0x02)
            {
                 0xFF, 0xFF                                       // ..
            }
        })
        Name (CSD0, Zero)
        Name (CSD1, Zero)
        Name (CSD2, Zero)
        Name (CSD3, Zero)
        Method (SBBC, 1, NotSerialized)
        {
            Local1 = ToInteger (DerefOf (Arg0 [Zero]))
            If (Local1){}
            Return (Package (0x01)
            {
                0x04
            })
        }

        Method (WGBI, 1, NotSerialized)
        {
            If ((Arg0 < SizeOf (NBTI)))
            {
                Return (^^PCI0.LPCB.EC0.GBTI (Arg0))
            }
            Else
            {
                Return (Package (0x02)
                {
                    0x06, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                })
            }
        }

        Method (GSAS, 0, NotSerialized)
        {
            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                }
            Local1 = ^^PCI0.LPCB.EC0.GPID ()
            Local1 += One
            DerefOf (Local0 [One]) [Zero] = Local1
            Return (Local0)
        }

        Method (HWWB, 0, NotSerialized)
        {
            Local0 = BT0P /* \_SB_.BT0P */
            If ((Local0 != 0x1F))
            {
                Local0 = Zero
            }

            SSMI (0xEA3A, Zero, Local0, Zero, Zero)
            GVWE (0x05, Zero)
        }

        Method (STMM, 1, NotSerialized)
        {
            Debug = "SetThermalStatus"
            Debug = Arg0
            CreateByteField (Arg0, Zero, IDTA)
            If (((IDTA >= 0x10) && (IDTA <= 0x15))){}
            Local0 = Package (0x01)
                {
                    Zero
                }
            If (((IDTA >= 0x20) && (IDTA <= 0x24)))
            {
                Local7 = (IDTA - 0x20)
                Local1 = DerefOf (Arg0 [One])
                Local2 = DerefOf (Arg0 [0x02])
                If (^^PCI0.LPCB.EC0.ECRG)
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    If (((Local7 < 0x03) || (Local7 == 0x04)))
                    {
                        ^^PCI0.LPCB.EC0.CRZN = (One + Local7)
                        If ((Local2 == 0xFF))
                        {
                            Local2 = Zero
                        }

                        ^^PCI0.LPCB.EC0.TEMP = Local2
                        If ((Local7 == 0x02))
                        {
                            Local2 = DerefOf (Arg0 [0x03])
                            ^^PCI0.LPCB.EC0.CRZN = 0x04
                            If ((Local2 == 0xFF))
                            {
                                Local2 = Zero
                            }

                            ^^PCI0.LPCB.EC0.TEMP = Local2
                        }
                    }
                    Else
                    {
                        If ((Local2 != 0xFF))
                        {
                            Local2 = \_TZ.CTCT (Local2)
                        }

                        ^^PCI0.LPCB.EC0.FTGC = Local2
                    }

                    Release (^^PCI0.LPCB.EC0.ECMX)
                }

                Local6 = Zero
                While ((Local6 < Local1))
                {
                    DerefOf (TSTV [Local7]) [Local6] = DerefOf (Arg0 [
                        (Local6 + 0x02)])
                    Local6++
                }

                TSTM = One
                Return (Package (0x01)
                {
                    Zero
                })
            }

            If ((IDTA == 0x30))
            {
                Local1 = DerefOf (Arg0 [One])
                Local2 = DerefOf (Arg0 [0x02])
                If ((Local1 > One))
                {
                    Local3 = DerefOf (Arg0 [0x04])
                }

                If (^^PCI0.LPCB.EC0.ECRG)
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    ^^PCI0.LPCB.EC0.FTGC = Local2
                    If ((Local1 > One))
                    {
                        ^^PCI0.LPCB.EC0.FT2C = Local3
                    }

                    Release (^^PCI0.LPCB.EC0.ECMX)
                }

                Return (Package (0x01)
                {
                    Zero
                })
            }

            If ((IDTA == 0xAA))
            {
                Local1 = Zero
                While ((Local1 < SizeOf (TSTV)))
                {
                    Local2 = Zero
                    Local3 = DerefOf (THCT [Local1])
                    While ((Local2 < Local3))
                    {
                        DerefOf (TSTV [Local1]) [Local2] = 0xFF
                        Local2++
                    }

                    Local1++
                }

                If (^^PCI0.LPCB.EC0.ECRG)
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    Local1 = One
                    While ((Local1 <= 0x05))
                    {
                        ^^PCI0.LPCB.EC0.CRZN = Local1
                        ^^PCI0.LPCB.EC0.TEMP = Zero
                        Local1++
                    }

                    ^^PCI0.LPCB.EC0.FTGC = 0xFF
                    Release (^^PCI0.LPCB.EC0.ECMX)
                }

                TSTM = Zero
                Return (Local0)
            }

            Return (Package (0x01)
            {
                0x06
            })
        }

        Method (GTMS, 1, NotSerialized)
        {
            Debug = "GetThermalStatus"
            Debug = Arg0
            Local6 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x80){}
                }
            CreateByteField (Arg0, Zero, IDTA)
            If (((IDTA >= Zero) && (IDTA <= 0x04)))
            {
                Local2 = DerefOf (THCT [IDTA])
                DerefOf (Local6 [One]) [Zero] = Local2
                If ((Local2 == Zero))
                {
                    Return (Local6)
                }

                If (((IDTA < 0x03) || (IDTA == 0x04)))
                {
                    If (^^PCI0.LPCB.EC0.ECRG)
                    {
                        Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                        ^^PCI0.LPCB.EC0.CRZN = (One + IDTA)
                        DerefOf (Local6 [One]) [One] = ^^PCI0.LPCB.EC0.DTMP /* \_SB_.PCI0.LPCB.EC0_.DTMP */
                        If ((IDTA == 0x02))
                        {
                            ^^PCI0.LPCB.EC0.CRZN = 0x04
                            DerefOf (Local6 [One]) [0x02] = ^^PCI0.LPCB.EC0.DTMP /* \_SB_.PCI0.LPCB.EC0_.DTMP */
                        }

                        Release (^^PCI0.LPCB.EC0.ECMX)
                    }

                    If ((IDTA == 0x02))
                    {
                        DerefOf (Local6 [One]) [0x03] = PCHT /* \PCHT */
                    }
                }

                If ((IDTA == 0x03))
                {
                    Local1 = \_TZ.GFSD ()
                    DerefOf (Local6 [One]) [One] = Local1
                }

                Return (Local6)
            }

            If ((IDTA == 0x06))
            {
                If (TRCN)
                {
                    Local1 = One
                }
                Else
                {
                    Local1 = Zero
                }

                TRCN = Zero
                DerefOf (Local6 [One]) [Zero] = One
                DerefOf (Local6 [One]) [One] = Local1
                Return (Local6)
            }

            If ((IDTA == 0x07))
            {
                Local2 = Zero
                Local1 = \_TZ.GFVE (One)
                DerefOf (Local6 [One]) [0x02] = Local1
                If ((Local1 > Zero))
                {
                    Local2 = One
                    DerefOf (Local6 [One]) [0x02] = Local1
                }

                Local1 = \_TZ.GFVE (0x02)
                If ((Local1 > Zero))
                {
                    Local2 = 0x02
                    DerefOf (Local6 [One]) [0x04] = Local1
                }

                DerefOf (Local6 [One]) [Zero] = Local2
                Return (Local6)
            }

            If ((IDTA == 0x08))
            {
                Local2 = Zero
                Local1 = \_TZ.GTFV (One)
                DerefOf (Local6 [One]) [0x02] = Local1
                If ((Local1 > Zero))
                {
                    Local2 = One
                    DerefOf (Local6 [One]) [0x02] = Local1
                }

                Local1 = \_TZ.GTFV (0x02)
                If ((Local1 > Zero))
                {
                    Local2 = 0x02
                    DerefOf (Local6 [One]) [0x04] = Local1
                }

                DerefOf (Local6 [One]) [Zero] = Local2
                Return (Local6)
            }

            If ((IDTA == 0x09))
            {
                Local1 = \_TZ.GCGC ()
                CreateByteField (Local1, Zero, GGCL)
                CreateByteField (Local1, One, GGCH)
                DerefOf (Local6 [One]) [Zero] = One
                DerefOf (Local6 [One]) [0x02] = GGCL /* \_SB_.WMIV.GTMS.GGCL */
                DerefOf (Local6 [One]) [0x03] = GGCH /* \_SB_.WMIV.GTMS.GGCH */
                Return (Local6)
            }

            If ((IDTA == 0x0A))
            {
                If (^^PCI0.LPCB.EC0.ECRG)
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    ^^PCI0.LPCB.EC0.CRZN = 0x06
                    DerefOf (Local6 [One]) [One] = ^^PCI0.LPCB.EC0.DTMP /* \_SB_.PCI0.LPCB.EC0_.DTMP */
                    Release (^^PCI0.LPCB.EC0.ECMX)
                    DerefOf (Local6 [One]) [Zero] = One
                }

                Return (Local6)
            }

            If (((IDTA >= 0x10) && (IDTA <= 0x15)))
            {
                CreateField (Arg0, 0x18, 0x03E8, GTSD)
                Local1 = GTSD /* \_SB_.WMIV.GTMS.GTSD */
                Local7 = (IDTA - 0x10)
                Local2 = DerefOf (THCT [Local7])
                DerefOf (Local6 [One]) [Zero] = Local2
                Local4 = DerefOf (PRFI [Local7])
                Local3 = Zero
                While ((Local3 < Local2))
                {
                    DerefOf (Local6 [One]) [(Local3 + One)] = 
                        DerefOf (Local1 [(Local3 + Local4)])
                    Local3++
                }

                Return (Local6)
            }

            If (((IDTA >= 0x20) && (IDTA <= 0x25)))
            {
                Local7 = (IDTA - 0x20)
                Local2 = DerefOf (THCT [Local7])
                DerefOf (Local6 [One]) [Zero] = Local2
                Local3 = Zero
                While ((Local3 < Local2))
                {
                    DerefOf (Local6 [One]) [(Local3 + One)] = 
                        DerefOf (DerefOf (TSTV [Local7]) [Local3])
                    Local3++
                }

                Return (Local6)
            }

            If ((IDTA == 0xAA))
            {
                DerefOf (Local6 [One]) [Zero] = TSTM /* \_SB_.WMIV.TSTM */
                Return (Local6)
            }

            Return (Package (0x02)
            {
                0x06, 
                Zero
            })
        }

        Method (STCS, 1, NotSerialized)
        {
            CreateByteField (Arg0, One, CSD1)
            If ((CSD1 == One))
            {
                If ((DPTF == One))
                {
                    ^^IETM.CCON ()
                }
                Else
                {
                    ODV1 = One
                    If (CondRefOf (\_SB.PCI0.LPCB.EC0.UDTS))
                    {
                        ^^PCI0.LPCB.EC0.UDTS (Zero, Zero)
                    }
                }
            }

            If ((CSD1 == Zero))
            {
                If ((DPTF == One))
                {
                    ^^IETM.CCOF ()
                }
                Else
                {
                    ODV1 = Zero
                    If (CondRefOf (\_SB.PCI0.LPCB.EC0.UDTS))
                    {
                        ^^PCI0.LPCB.EC0.UDTS (Zero, Zero)
                    }
                }
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (GAAT, 0, NotSerialized)
        {
            Local6 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                }
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            Local1 = ^^PCI0.LPCB.EC0.ACIX /* \_SB_.PCI0.LPCB.EC0_.ACIX */
            Local2 = ^^PCI0.LPCB.EC0.AAPI /* \_SB_.PCI0.LPCB.EC0_.AAPI */
            Release (^^PCI0.LPCB.EC0.ECMX)
            Local5 = Zero
            Local3 = 0x07
            Local4 = (Local1 & Local3)
            If ((Local3 == Local4))
            {
                If ((Local2 <= 0x03))
                {
                    Local5 = One
                }
                ElseIf ((Local2 == 0x04))
                {
                    Local5 = 0x02
                }
                ElseIf ((Local2 == 0x05))
                {
                    Local5 = 0x04
                }
            }

            If ((Local5 != Zero))
            {
                DerefOf (Local6 [One]) [Zero] = Local5
            }

            Return (Local6)
        }

        Method (CPMC, 0, NotSerialized)
        {
            If ((PMCS == One))
            {
                If (^^PCI0.LPCB.EC0.ECRG)
                {
                    ^^PCI0.LPCB.EC0.S0FL = Zero
                    Return (Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                }
            }

            Return (Package (0x02)
            {
                0x0D, 
                Zero
            })
        }

        Method (WGBC, 0, NotSerialized)
        {
            Return (^^PCI0.LPCB.EC0.GBTC ())
        }

        Method (WSBC, 3, NotSerialized)
        {
            Return (^^PCI0.LPCB.EC0.SBTC (Arg0, Arg1, Arg2))
        }

        Method (EC00, 4, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (One)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (0x48)
                        {
                            Local2 = EC01 ()
                        }
                        Default
                        {
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Case (0x02)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (0x48)
                        {
                            Local2 = EC02 (Arg3)
                        }
                        Case (0x4F)
                        {
                            Local2 = SSLC (Arg3)
                        }
                        Default
                        {
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Case (0x00020011)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (Zero)
                        {
                            Local2 = GESI (Arg2)
                        }
                        Case (One)
                        {
                            Local2 = SRWN (Arg3)
                        }
                        Default
                        {
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Case (0x0002000B)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (One)
                        {
                            Local2 = GUCM (Arg3)
                        }
                        Case (0x02)
                        {
                            Local2 = SUCU (Arg3)
                        }
                        Case (0x03)
                        {
                            Local2 = GUCS (Arg3)
                        }
                        Case (0x04)
                        {
                            Local2 = GUCD (Arg3)
                        }
                        Default
                        {
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Default
                {
                    Local2 = Package (0x01)
                        {
                            0x03
                        }
                }

            }

            Return (Local2)
        }

        Method (EC01, 0, Serialized)
        {
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (^^PCI0.LPCB.EC0.ECRG)
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                DerefOf (Local0 [One]) [Zero] = ^^PCI0.LPCB.EC0.LIDN /* \_SB_.PCI0.LPCB.EC0_.LIDN */
                DerefOf (Local0 [One]) [One] = ^^PCI0.LPCB.EC0.LIDS /* \_SB_.PCI0.LPCB.EC0_.LIDS */
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (EC02, 1, Serialized)
        {
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (^^PCI0.LPCB.EC0.ECRG)
            {
                Local0 = Package (0x01)
                    {
                        0x06
                    }
                CreateByteField (Arg0, Zero, SLNS)
                If (((SLNS == Zero) || (SLNS == One)))
                {
                    ^^PCI0.LPCB.EC0.LIDN = SLNS /* \_SB_.WMIV.EC02.SLNS */
                    Local0 [Zero] = Zero
                }
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (GESI, 1, Serialized)
        {
            If ((ToInteger (Arg0) == Zero))
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                If (^^PCI0.LPCB.EC0.ECRG)
                {
                    DerefOf (Local0 [One]) [Zero] = ^^PCI0.LPCB.EC0.ESID /* \_SB_.PCI0.LPCB.EC0_.ESID */
                }

                Release (^^PCI0.LPCB.EC0.ECMX)
                Return (Local0)
            }

            Return (Package (0x02)
            {
                0x06, 
                Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                           // ....
                }
            })
        }

        Method (SRWN, 1, Serialized)
        {
            Local0 = Package (0x01)
                {
                    0x06
                }
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (^^PCI0.LPCB.EC0.ECRG)
            {
                CreateByteField (Arg0, Zero, RKTM)
                ^^PCI0.LPCB.EC0.RWTM = RKTM /* \_SB_.WMIV.SRWN.RKTM */
                Local0 [Zero] = Zero
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (IUIP, 0, Serialized)
        {
            Local0 = Zero
            Local1 = Zero
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            While (One)
            {
                Local0 = ^^PCI0.LPCB.EC0.UCCS /* \_SB_.PCI0.LPCB.EC0_.UCCS */
                If ((Local0 == Zero))
                {
                    Local1++
                    If ((Local1 >= 0x012C))
                    {
                        Break
                    }
                }
                Else
                {
                    Break
                }

                Sleep (0x0A)
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (GUCM, 1, Serialized)
        {
            Debug = "GetUSBTypeCMessage"
            Debug = Arg0
            Local6 = Package (0x02)
                {
                    0x0D, 
                    Buffer (0x80){}
                }
            CreateByteField (Arg0, Zero, IDTA)
            If ((IUIP () != Zero))
            {
                Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                ^^PCI0.LPCB.EC0.UCPN = IDTA /* \_SB_.WMIV.GUCM.IDTA */
                ^^PCI0.LPCB.EC0.UCHC = 0x05
                Release (^^PCI0.LPCB.EC0.ECMX)
                Sleep (0x0A)
                If ((IUIP () == One))
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    Local3 = ^^PCI0.LPCB.EC0.UCHS /* \_SB_.PCI0.LPCB.EC0_.UCHS */
                    If ((Local3 == Zero))
                    {
                        Local6 [Zero] = 0x50
                    }
                    ElseIf ((Local3 <= 0x80))
                    {
                        Local4 = Zero
                        While ((Local4 < Local3))
                        {
                            DerefOf (Local6 [One]) [Local4] = ^^PCI0.LPCB.EC0.UCDB /* \_SB_.PCI0.LPCB.EC0_.UCDB */
                            Local4++
                        }

                        Local6 [Zero] = Zero
                    }

                    Release (^^PCI0.LPCB.EC0.ECMX)
                }
            }

            Return (Local6)
        }

        Method (SUCU, 1, Serialized)
        {
            Debug = "SetUSBTypeCFwUpdateStatus"
            Debug = Arg0
            Local4 = Package (0x01)
                {
                    0x0D
                }
            CreateByteField (Arg0, Zero, IDTA)
            CreateByteField (Arg0, One, UPST)
            If ((UPST == One))
            {
                If ((IUIP () != Zero))
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    ^^PCI0.LPCB.EC0.UCPN = IDTA /* \_SB_.WMIV.SUCU.IDTA */
                    ^^PCI0.LPCB.EC0.UCHC = 0x08
                    Sleep (0x0A)
                    If ((^^PCI0.LPCB.EC0.UCCS == One))
                    {
                        Local4 [Zero] = Zero
                    }

                    Release (^^PCI0.LPCB.EC0.ECMX)
                }
            }

            Return (Local4)
        }

        Method (GUCS, 1, Serialized)
        {
            Debug = "GetUSBTypeCStatus"
            Debug = Arg0
            Local6 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04){}
                }
            CreateByteField (Arg0, Zero, IDTA)
            Local1 = IUIP ()
            If ((Local1 != Zero))
            {
                Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                ^^PCI0.LPCB.EC0.UCHS = One
                Sleep (0x0A)
                Local0 = IDTA /* \_SB_.WMIV.GUCS.IDTA */
                ^^PCI0.LPCB.EC0.UCDB = Local0
                Sleep (0x0A)
                ^^PCI0.LPCB.EC0.UCHC = 0x11
                Sleep (0x0A)
                Local2 = IUIP ()
                If ((Local2 == One))
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    Local3 = ^^PCI0.LPCB.EC0.UCHS /* \_SB_.PCI0.LPCB.EC0_.UCHS */
                    Sleep (0x0A)
                    Release (^^PCI0.LPCB.EC0.ECMX)
                    If ((Local3 <= 0x04))
                    {
                        Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                        Local4 = Zero
                        While (One)
                        {
                            If ((Local4 >= Local3))
                            {
                                Break
                            }
                            Else
                            {
                                DerefOf (Local6 [One]) [Local4] = ^^PCI0.LPCB.EC0.UCDB /* \_SB_.PCI0.LPCB.EC0_.UCDB */
                                Sleep (0x0A)
                                Local4++
                            }
                        }

                        Release (^^PCI0.LPCB.EC0.ECMX)
                        Return (Local6)
                    }
                    Else
                    {
                        Debug = "GetUSBTypeCStatus Return Length Failed."
                    }
                }
                ElseIf ((Local2 == 0x02))
                {
                    Debug = "GetUSBTypeCStatus Cmd Failed. Port Index is out of range."
                    Local6 [Zero] = 0x06
                    Return (Local6)
                }
            }
            Else
            {
                Debug = "GetUSBTypeCStatus Fail. USBC Command still in Progress."
            }

            Return (Package (0x02)
            {
                0x06, 
                Zero
            })
        }

        Method (GUCD, 1, Serialized)
        {
            Debug = "GetUSBTypeCDockId"
            Debug = Arg0
            Local6 = Package (0x02)
                {
                    0x0D, 
                    Buffer (0x04){}
                }
            CreateByteField (Arg0, Zero, IDTA)
            If ((IUIP () != Zero))
            {
                Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                ^^PCI0.LPCB.EC0.UCPN = IDTA /* \_SB_.WMIV.GUCD.IDTA */
                ^^PCI0.LPCB.EC0.UCHC = 0x12
                Release (^^PCI0.LPCB.EC0.ECMX)
                Sleep (0x0A)
                If ((IUIP () == One))
                {
                    Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    Local3 = ^^PCI0.LPCB.EC0.UCHS /* \_SB_.PCI0.LPCB.EC0_.UCHS */
                    If ((Local3 == Zero))
                    {
                        Local6 [Zero] = 0x50
                    }
                    ElseIf ((Local3 <= 0x04))
                    {
                        Local4 = Zero
                        While ((Local4 < Local3))
                        {
                            DerefOf (Local6 [One]) [Local4] = ^^PCI0.LPCB.EC0.UCDB /* \_SB_.PCI0.LPCB.EC0_.UCDB */
                            Local4++
                        }

                        Local6 [Zero] = Zero
                    }

                    Release (^^PCI0.LPCB.EC0.ECMX)
                }
            }

            Return (Local6)
        }

        Method (SSLC, 1, Serialized)
        {
            GVWE (0x19, 0x06)
            Local3 = Package (0x01)
                {
                    Zero
                }
            Return (Local3)
        }

        Name (ROAE, Zero)
        Method (HVWP, 4, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (One)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (0x04)
                        {
                            Local2 = WGDS ()
                        }
                        Case (0x07)
                        {
                            If (Arg2)
                            {
                                Local3 = ToInteger (DerefOf (Arg3 [Zero]))
                                Local2 = WGBI (Local3)
                            }
                        }
                        Case (0x09)
                        {
                            Local2 = GHKS ()
                        }
                        Case (0x0A)
                        {
                            Local2 = GHKF (Arg3)
                        }
                        Case (0x0F)
                        {
                            Local2 = GSAS ()
                        }
                        Case (0x1B)
                        {
                            If ((^^WLBU._STA () != 0x0F))
                            {
                                Local2 = WGWS ()
                            }
                            Else
                            {
                                Local2 = Package (0x01)
                                    {
                                        0x04
                                    }
                            }
                        }
                        Case (0x28)
                        {
                            Local2 = GTMS (Arg3)
                        }
                        Case (0x2B)
                        {
                            Local2 = WGBC ()
                        }
                        Case (0x30)
                        {
                            Local2 = GEID ()
                        }
                        Case (0x3E)
                        {
                            Local2 = GPPS ()
                        }
                        Case (0x42)
                        {
                            Local2 = GAAT ()
                        }
                        Case (0x45)
                        {
                            Local2 = GECP (Arg2, Arg3)
                        }
                        Default
                        {
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Case (0x02)
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (0x06)
                        {
                            Local2 = SBBC (Arg3)
                        }
                        Case (0x09)
                        {
                            Local2 = SHKS (Arg3)
                        }
                        Case (0x0A)
                        {
                            Local2 = SHKF (Arg3)
                        }
                        Case (0x1B)
                        {
                            GVWE (0x05, Zero)
                            Local2 = Package (0x01)
                                {
                                    Zero
                                }
                        }
                        Case (0x25)
                        {
                            Local2 = CPMC ()
                        }
                        Case (0x28)
                        {
                            Local2 = STMM (Arg3)
                        }
                        Case (0x2B)
                        {
                            Local2 = WSBC (Arg1, Arg2, Arg3)
                        }
                        Case (0x2C)
                        {
                            Local2 = STCS (Arg3)
                        }
                        Case (0x36)
                        {
                            If ((^^PCI0.LPCB.EC0.PSCF == One))
                            {
                                GVWE (0x0F, 0x02)
                            }

                            Local2 = Package (0x01)
                                {
                                    Zero
                                }
                        }
                        Case (0x37)
                        {
                            If ((^^PCI0.LPCB.EC0.PSCF == One))
                            {
                                GVWE (0x10, 0x02)
                            }

                            If ((^^PCI0.LPCB.EC0.BCSC == One))
                            {
                                GVWE (0x10, Zero)
                            }

                            ^^PCI0.LPCB.EC0.BCSC = Zero
                            Local2 = Package (0x01)
                                {
                                    Zero
                                }
                        }
                        Case (0x38)
                        {
                            If ((^^PCI0.LPCB.EC0.PSCF == One))
                            {
                                GVWE (0x0F, 0x04)
                            }

                            Local2 = Package (0x01)
                                {
                                    Zero
                                }
                        }
                        Case (0x29)
                        {
                            HWWB ()
                            Local2 = Package (0x01)
                                {
                                    Zero
                                }
                        }
                        Case (0x3E)
                        {
                            Local2 = SPPA (Arg3)
                        }
                        Case (0x3F)
                        {
                            Local2 = STPB (Arg3)
                        }
                        Case (0x45)
                        {
                            Local2 = SECP (Arg2, Arg3)
                        }
                        Default
                        {
                            Local2 = Package (0x01)
                                {
                                    0x04
                                }
                        }

                    }
                }
                Default
                {
                    Local2 = Package (0x01)
                        {
                            0x03
                        }
                }

            }

            Local0 = DerefOf (Local2 [Zero])
            If (((Local0 == 0x03) || (Local0 == 0x04)))
            {
                Local2 = EC00 (Arg0, Arg1, Arg2, Arg3)
            }

            Return (Local2)
        }

        Method (GHKS, 0, Serialized)
        {
            Local2 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                }
            DerefOf (Local2 [One]) [Zero] = ^^PCI0.LPCB.EC0.GSHK ()
            Return (Local2)
        }

        Method (SHKS, 1, Serialized)
        {
            CreateDWordField (Arg0, Zero, DWRD)
            ^^PCI0.LPCB.EC0.SSHK (DWRD)
            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (GHKF, 1, Serialized)
        {
            CreateWordField (Arg0, Zero, WIID)
            Local2 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                }
            CreateWordField (DerefOf (Local2 [One]), Zero, WRD0)
            WRD0 = WIID /* \_SB_.WMIV.GHKF.WIID */
            If ((WIID == 0x01AE)){}
            If ((WIID == 0x01A9)){}
            If (((WIID == 0x01B6) || (WIID == 0x01B7)))
            {
                If ((WIID == 0x01B6))
                {
                    ODGW (0x87)
                    \_GPE.G001 (0x87)
                }
                ElseIf ((WIID == 0x01B7))
                {
                    ODGW (0x86)
                    \_GPE.G001 (0x86)
                }

                DerefOf (Local2 [One]) [0x02] = G093 /* \G093 */
                DerefOf (Local2 [One]) [0x03] = (G080 - One
                    )
            }

            Debug = Local2
            Return (Local2)
        }

        Method (GEID, 0, NotSerialized)
        {
            Local1 = G03E /* \G03E */
            Local2 = Package (0x02)
                {
                    Zero, 
                    Zero
                }
            Local2 [One] = Local1
            Return (Local2)
        }

        Method (WGWS, 0, Serialized)
        {
            Local1 = WDDA /* \WDDA */
            Local2 = Package (0x02)
                {
                    Zero, 
                    Zero
                }
            Local2 [One] = Local1
            Return (Local2)
        }

        Method (WGDS, 0, Serialized)
        {
            Local0 = Package (0x02)
                {
                    Zero, 
                    Buffer (One)
                    {
                         0x00                                             // .
                    }
                }
            If (DCKD ())
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (One)
                        {
                             0x01                                             // .
                        }
                    }
            }

            Local1 = DerefOf (DerefOf (Local0 [One]) [Zero])
            If ((^^PCI0.LPCB.EC0.GBNT (^^PCI0.LPCB.EC0.VBPS, 0x06) == Zero))
            {
                Local1 |= 0x04
            }
            Else
            {
                Local1 &= 0xFFFFFFFFFFFFFFFB
            }

            If ((^^PCI0.LPCB.EC0.PORI == Zero))
            {
                Local1 |= ROAE /* \_SB_.WMIV.ROAE */
            }

            If (((^^PCI0.LPCB.EC0.PORI == One) || (^^PCI0.LPCB.EC0.PORI == 0x03)))
            {
                Local1 |= 0x02
                ROAE = 0x02
            }

            If (((^^PCI0.LPCB.EC0.PORI == 0x02) || (^^PCI0.LPCB.EC0.PORI == 0x04)))
            {
                Local1 &= 0xFFFFFFFFFFFFFFFD
                ROAE = Zero
            }

            Local1 |= 0x08
            DerefOf (Local0 [One]) [Zero] = Local1
            Local3 = Zero
            If ((^^PCI0.LPCB.EC0.PORI == 0x02))
            {
                Local3 |= 0x10
            }

            If ((^^PCI0.LPCB.EC0.PORI == 0x03))
            {
                Local3 |= 0x20
            }

            If ((^^PCI0.LPCB.EC0.PORI == 0x04))
            {
                Local3 |= 0x30
            }

            Local1 |= Local3
            DerefOf (Local0 [One]) [Zero] = Local1
            Return (Local0)
        }

        Method (GPPS, 0, Serialized)
        {
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (^^PCI0.LPCB.EC0.ECRG)
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    }
                ^^PCI0.LPCB.EC0.PPCM = One
                ^^PCI0.LPCB.EC0.PPDS = One
                Local1 = ^^PCI0.LPCB.EC0.PPDT /* \_SB_.PCI0.LPCB.EC0_.PPDT */
                DerefOf (Local0 [One]) [Zero] = Local1
                ^^PCI0.LPCB.EC0.PPCM = 0x03
                ^^PCI0.LPCB.EC0.PPDS = One
                Local1 = ^^PCI0.LPCB.EC0.PPDT /* \_SB_.PCI0.LPCB.EC0_.PPDT */
                DerefOf (Local0 [One]) [One] = Local1
                DerefOf (Local0 [One]) [0x02] = ^^PCI0.LPCB.EC0.PPUI /* \_SB_.PCI0.LPCB.EC0_.PPUI */
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (SPPA, 1, Serialized)
        {
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (^^PCI0.LPCB.EC0.ECRG)
            {
                Local0 = Package (0x01)
                    {
                        0x06
                    }
                CreateByteField (Arg0, Zero, PPST)
                CreateByteField (Arg0, One, PPVP)
                If (((((((((PPST == 0xFF) || (
                    PPST == 0xFE)) || (PPST == 0xFD)) || (PPST == Zero)) || (PPST == 0xFC)) || (PPST == 
                    0xFB)) || (PPST == 0xF0)) || (PPST == 0xF9)))
                {
                    If ((((PPVP == 0xFF) || (PPVP == 0xFE)) || (PPVP == Zero)))
                    {
                        ^^PCI0.LPCB.EC0.PPCM = 0x02
                        ^^PCI0.LPCB.EC0.PPDS = One
                        ^^PCI0.LPCB.EC0.PPDT = PPST /* \_SB_.WMIV.SPPA.PPST */
                        ^^PCI0.LPCB.EC0.PPCM = One
                        ^^PCI0.LPCB.EC0.PPDS = One
                        Local1 = ^^PCI0.LPCB.EC0.PPDT /* \_SB_.PCI0.LPCB.EC0_.PPDT */
                        If (((((((Local1 == 0xFE) || (Local1 == 0xFC)) || 
                            (Local1 == 0xF0)) || (Local1 == 0xF9)) || (Local1 == 0xF8)) || (Local1 == 0xF7)))
                        {
                            If ((PPVP == 0xFF))
                            {
                                ^^PCI0.LPCB.EC0.PPCM = 0x04
                                ^^PCI0.LPCB.EC0.PPDS = Zero
                            }

                            If ((PPVP == 0xFE))
                            {
                                ^^PCI0.LPCB.EC0.PPCM = 0x05
                                ^^PCI0.LPCB.EC0.PPDS = Zero
                            }
                        }

                        Local0 [Zero] = Zero
                    }
                }
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (STPB, 1, Serialized)
        {
            CreateDWordField (Arg0, Zero, BRID)
            If (^^PCI0.LPCB.EC0.ECRG)
            {
                Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
                ^^PCI0.LPCB.EC0.BRIM = BRID /* \_SB_.WMIV.STPB.BRID */
                Release (^^PCI0.LPCB.EC0.ECMX)
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (GECP, 2, Serialized)
        {
            CreateByteField (Arg1, Zero, ECOF)
            CreateByteField (Arg1, One, SIZE)
            If ((SIZE > 0x80))
            {
                Return (Package (0x01)
                {
                    0x06
                })
            }

            OperationRegion (MBER, EmbeddedControl, ECOF, One)
            Field (MBER, ByteAcc, NoLock, Preserve)
            {
                OFST,   8
            }

            Local1 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x80){}
                }
            Local0 = Zero
            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            While ((Local0 < SIZE))
            {
                DerefOf (Local1 [One]) [Local0] = OFST /* \_SB_.WMIV.GECP.OFST */
                Local0++
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Local1)
        }

        Method (SECP, 2, Serialized)
        {
            CreateByteField (Arg1, Zero, ECOF)
            CreateByteField (Arg1, One, SIZE)
            If ((SIZE > 0x80))
            {
                Return (Package (0x01)
                {
                    0x06
                })
            }

            OperationRegion (MBER, EmbeddedControl, ECOF, One)
            Field (MBER, ByteAcc, NoLock, Preserve)
            {
                OFST,   8
            }

            Acquire (^^PCI0.LPCB.EC0.ECMX, 0xFFFF)
            Local0 = Zero
            While ((Local0 < SIZE))
            {
                OFST = DerefOf (Arg1 [(Local0 + 0x02)])
                Local0++
            }

            Release (^^PCI0.LPCB.EC0.ECMX)
            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (SHKF, 1, NotSerialized)
        {
            CreateWordField (Arg0, Zero, WIID)
            Local2 = Package (0x02)
                {
                    Zero, 
                    Buffer (0x04)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    }
                }
            CreateWordField (DerefOf (Local2 [One]), Zero, WRD0)
            WRD0 = WIID /* \_SB_.WMIV.SHKF.WIID */
            If ((WIID == 0x01B6))
            {
                ODGW (0x87)
                \_GPE.G001 (0x87)
            }
            ElseIf ((WIID == 0x01B7))
            {
                ODGW (0x86)
                \_GPE.G001 (0x86)
            }
            Else
            {
                DerefOf (Local2 [Zero]) [Zero] = 0x04
            }

            Return (Local2)
        }

        Name (WQZZ, Buffer (0x086F)
        {
            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
            /* 0008 */  0x5F, 0x08, 0x00, 0x00, 0xBE, 0x3A, 0x00, 0x00,  // _....:..
            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
            /* 0018 */  0x98, 0x58, 0x9C, 0x00, 0x01, 0x06, 0x18, 0x42,  // .X.....B
            /* 0020 */  0x10, 0x13, 0x10, 0x12, 0xE0, 0x81, 0xC2, 0x04,  // ........
            /* 0028 */  0x43, 0x43, 0x28, 0xB2, 0x06, 0x18, 0x8C, 0x04,  // CC(.....
            /* 0030 */  0x08, 0xC9, 0x81, 0x90, 0x0B, 0x26, 0x26, 0x40,  // .....&&@
            /* 0038 */  0x04, 0x84, 0xBC, 0x0A, 0xB0, 0x29, 0xC0, 0x24,  // .....).$
            /* 0040 */  0x88, 0xFA, 0xF7, 0x87, 0x28, 0x09, 0x0E, 0x25,  // ....(..%
            /* 0048 */  0x04, 0x42, 0x12, 0x05, 0x98, 0x17, 0xA0, 0x5B,  // .B.....[
            /* 0050 */  0x80, 0x61, 0x01, 0xB6, 0x05, 0x98, 0x16, 0xE0,  // .a......
            /* 0058 */  0x18, 0x92, 0x4A, 0x03, 0xA7, 0x04, 0x96, 0x02,  // ..J.....
            /* 0060 */  0x21, 0xA1, 0x02, 0x94, 0x0B, 0xF0, 0x2D, 0x40,  // !.....-@
            /* 0068 */  0x3B, 0xA2, 0x24, 0x0B, 0xB0, 0x0C, 0x23, 0x02,  // ;.$...#.
            /* 0070 */  0x8F, 0x22, 0xB2, 0xD1, 0x38, 0x41, 0xD9, 0xD0,  // ."..8A..
            /* 0078 */  0x28, 0x19, 0x10, 0xF2, 0x2C, 0xC0, 0x3A, 0x30,  // (...,.:0
            /* 0080 */  0x21, 0xB0, 0x7B, 0x01, 0xD6, 0x04, 0x98, 0x9B,  // !.{.....
            /* 0088 */  0x85, 0x8C, 0xCD, 0x45, 0x10, 0x0D, 0x62, 0xC8,  // ...E..b.
            /* 0090 */  0x96, 0x00, 0x87, 0x48, 0x82, 0x89, 0x11, 0x25,  // ...H...%
            /* 0098 */  0x58, 0xBC, 0x8A, 0x87, 0x21, 0x94, 0x1B, 0x0D,  // X...!...
            /* 00A0 */  0x15, 0xA9, 0x32, 0x14, 0x59, 0x44, 0x91, 0x42,  // ..2.YD.B
            /* 00A8 */  0x01, 0xCE, 0x04, 0x08, 0xC3, 0x95, 0x46, 0x50,  // ......FP
            /* 00B0 */  0x21, 0xC4, 0x8A, 0x14, 0xAB, 0xFD, 0x41, 0x90,  // !.....A.
            /* 00B8 */  0xF8, 0x16, 0x20, 0xAA, 0x00, 0x51, 0xA4, 0xD1,  // .. ..Q..
            /* 00C0 */  0xA0, 0x86, 0x97, 0xE0, 0x70, 0x3D, 0xD4, 0x73,  // ....p=.s
            /* 00C8 */  0xEC, 0x5C, 0x80, 0xF4, 0x49, 0x0A, 0xE4, 0x20,  // .\..I.. 
            /* 00D0 */  0xCF, 0xA2, 0xCE, 0x71, 0x12, 0x90, 0x04, 0xC6,  // ...q....
            /* 00D8 */  0x4A, 0xD0, 0xC1, 0xC0, 0xA1, 0xB8, 0x06, 0xD4,  // J.......
            /* 00E0 */  0x8C, 0x8F, 0x97, 0x09, 0x82, 0x43, 0x0D, 0xD1,  // .....C..
            /* 00E8 */  0x03, 0x0D, 0x77, 0x02, 0x87, 0xC8, 0x00, 0x3D,  // ..w....=
            /* 00F0 */  0xA9, 0xA3, 0xC1, 0x1C, 0x00, 0x3C, 0xB8, 0x93,  // .....<..
            /* 00F8 */  0x79, 0x0F, 0x28, 0x55, 0x80, 0xD9, 0x31, 0x6B,  // y.(U..1k
            /* 0100 */  0x60, 0x09, 0x8E, 0xC7, 0xD0, 0xA7, 0x7B, 0x3E,  // `.....{>
            /* 0108 */  0x27, 0x9C, 0xC0, 0xF2, 0x07, 0x81, 0x1A, 0x99,  // '.......
            /* 0110 */  0xA1, 0x3D, 0xCA, 0xD3, 0x8A, 0x19, 0xF2, 0xF0,  // .=......
            /* 0118 */  0x0F, 0x8B, 0x89, 0x85, 0x90, 0x02, 0x08, 0x8D,  // ........
            /* 0120 */  0x07, 0xDE, 0xFF, 0x7F, 0x3C, 0xE0, 0xB9, 0x01,  // ....<...
            /* 0128 */  0x3C, 0x13, 0x44, 0x78, 0x25, 0x88, 0xED, 0x01,  // <.Dx%...
            /* 0130 */  0x25, 0x18, 0x16, 0x42, 0x46, 0x56, 0xE1, 0xF1,  // %..BFV..
            /* 0138 */  0xD0, 0x51, 0xD8, 0xE9, 0x70, 0x34, 0xAD, 0x78,  // .Q..p4.x
            /* 0140 */  0x26, 0x18, 0x0E, 0x42, 0x5F, 0x00, 0x09, 0x10,  // &..B_...
            /* 0148 */  0x35, 0x6C, 0x7A, 0x58, 0xE0, 0xE7, 0x04, 0x76,  // 5lzX...v
            /* 0150 */  0x33, 0x38, 0x83, 0x47, 0x00, 0x8F, 0xE4, 0x84,  // 38.G....
            /* 0158 */  0x7C, 0x9C, 0xF0, 0xC0, 0xE0, 0x03, 0xE2, 0xBD,  // |.......
            /* 0160 */  0x4F, 0x99, 0x8C, 0xE0, 0x4C, 0x0D, 0xE8, 0xE3,  // O...L...
            /* 0168 */  0x80, 0x87, 0xC2, 0x87, 0xE8, 0xF1, 0x9D, 0xF2,  // ........
            /* 0170 */  0xF1, 0xFA, 0x74, 0x61, 0x59, 0xE3, 0x84, 0x7E,  // ..taY..~
            /* 0178 */  0x87, 0xF0, 0xEC, 0x8E, 0xE1, 0x8F, 0x43, 0x02,  // ......C.
            /* 0180 */  0x22, 0x42, 0xC8, 0xC9, 0x29, 0x00, 0x0D, 0x7C,  // "B..)..|
            /* 0188 */  0xBA, 0x67, 0x17, 0xE1, 0x74, 0x3D, 0x29, 0x07,  // .g..t=).
            /* 0190 */  0x1A, 0x06, 0x1D, 0x27, 0x38, 0xCE, 0x03, 0xE0,  // ...'8...
            /* 0198 */  0x18, 0x27, 0xFC, 0x73, 0x01, 0xFC, 0x01, 0xF2,  // .'.s....
            /* 01A0 */  0x53, 0xC6, 0x2B, 0x46, 0x02, 0xC7, 0x1C, 0x21,  // S.+F...!
            /* 01A8 */  0x5A, 0xCC, 0x08, 0x21, 0xC0, 0x3F, 0x55, 0x14,  // Z..!.?U.
            /* 01B0 */  0x3E, 0x10, 0xF2, 0xFF, 0x1F, 0x23, 0xB8, 0x00,  // >....#..
            /* 01B8 */  0x3D, 0x46, 0xE0, 0x1B, 0x70, 0x8C, 0xE8, 0xA3,  // =F..p...
            /* 01C0 */  0x04, 0x57, 0x7F, 0xD0, 0xA0, 0x03, 0x04, 0x17,  // .W......
            /* 01C8 */  0xA8, 0x07, 0x08, 0x7C, 0xA3, 0x1F, 0x3D, 0xD0,  // ...|..=.
            /* 01D0 */  0xE3, 0xB2, 0xE8, 0xF3, 0x80, 0x8C, 0x9F, 0x68,  // .......h
            /* 01D8 */  0x34, 0x2F, 0x7E, 0x3A, 0xE0, 0x87, 0x0F, 0xF0,  // 4/~:....
            /* 01E0 */  0x80, 0x7A, 0x48, 0x38, 0x50, 0xCC, 0xB4, 0x39,  // .zH8P..9
            /* 01E8 */  0xE8, 0xB3, 0xCB, 0xA1, 0x63, 0x87, 0x0B, 0xEF,  // ....c...
            /* 01F0 */  0xFF, 0x3F, 0x5C, 0xF0, 0x9C, 0x40, 0xC0, 0x25,  // .?\..@.%
            /* 01F8 */  0x0F, 0x16, 0x3D, 0x5C, 0xFB, 0x15, 0x80, 0x10,  // ..=\....
            /* 0200 */  0xBA, 0xCC, 0x5B, 0x89, 0x66, 0x15, 0xE1, 0x88,  // ..[.f...
            /* 0208 */  0x61, 0x9C, 0x83, 0x4C, 0x60, 0x91, 0xF0, 0xA8,  // a..L`...
            /* 0210 */  0xE3, 0x85, 0xE1, 0xF9, 0x59, 0x28, 0xFA, 0xC1,  // ....Y(..
            /* 0218 */  0x9C, 0x4A, 0xF8, 0x83, 0x89, 0x72, 0x0A, 0x47,  // .J...r.G
            /* 0220 */  0x63, 0xB9, 0x08, 0xD2, 0x05, 0xA1, 0xA3, 0x93,  // c.......
            /* 0228 */  0x11, 0xCE, 0x20, 0xCA, 0xD9, 0x9D, 0xB1, 0x09,  // .. .....
            /* 0230 */  0x7C, 0x94, 0xF2, 0x11, 0x80, 0x9F, 0x5B, 0x3C,  // |.....[<
            /* 0238 */  0x22, 0x18, 0xE7, 0xA5, 0x28, 0xF6, 0x38, 0x27,  // "...(.8'
            /* 0240 */  0x42, 0x50, 0xE0, 0x70, 0x50, 0x41, 0x9E, 0x0E,  // BP.pPA..
            /* 0248 */  0x3E, 0x6D, 0x51, 0xE9, 0x30, 0xA8, 0x03, 0x17,  // >mQ.0...
            /* 0250 */  0x60, 0x65, 0x12, 0x11, 0x9E, 0x25, 0x6A, 0x83,  // `e...%j.
            /* 0258 */  0xD0, 0xA9, 0xE1, 0x6D, 0xE2, 0x6D, 0xCB, 0xB7,  // ...m.m..
            /* 0260 */  0x80, 0x38, 0xA7, 0xD9, 0xDB, 0x81, 0x8B, 0x60,  // .8.....`
            /* 0268 */  0x44, 0xA8, 0x19, 0x8A, 0x9C, 0xB4, 0x22, 0xC6,  // D.....".
            /* 0270 */  0x88, 0xF2, 0xB8, 0x65, 0x94, 0xB7, 0xAD, 0x17,  // ...e....
            /* 0278 */  0x80, 0x78, 0x27, 0xF6, 0xFF, 0x7F, 0xDE, 0x32,  // .x'....2
            /* 0280 */  0x46, 0xF0, 0xC8, 0x0F, 0x5C, 0x2C, 0xC6, 0xEA,  // F...\,..
            /* 0288 */  0xF5, 0x5F, 0xF3, 0x81, 0x0B, 0xE0, 0xF9, 0xFF,  // ._......
            /* 0290 */  0xFF, 0x7C, 0x82, 0x0F, 0x7A, 0x18, 0x42, 0x0F,  // .|..z.B.
            /* 0298 */  0xC3, 0x53, 0x39, 0x97, 0x4A, 0xA7, 0x22, 0xC4,  // .S9.J.".
            /* 02A0 */  0xA8, 0x61, 0xA2, 0x3E, 0x43, 0xF9, 0x6E, 0xE1,  // .a.>C.n.
            /* 02A8 */  0x03, 0x11, 0xF8, 0xCE, 0x5C, 0xC0, 0xF9, 0x98,  // ....\...
            /* 02B0 */  0x82, 0x3B, 0xD3, 0x80, 0xC7, 0xE7, 0x0C, 0x04,  // .;......
            /* 02B8 */  0x72, 0x2A, 0x3E, 0xD4, 0x00, 0x16, 0x44, 0x3F,  // r*>...D?
            /* 02C0 */  0x21, 0x7C, 0xA2, 0xA1, 0x32, 0x61, 0x50, 0x87,  // !|..2aP.
            /* 02C8 */  0x1A, 0xE0, 0xF0, 0xFF, 0x3F, 0xD4, 0x00, 0xA3,  // ....?...
            /* 02D0 */  0x2B, 0xCC, 0xD3, 0xE8, 0x39, 0x3F, 0xCB, 0xF8,  // +...9?..
            /* 02D8 */  0x54, 0xE3, 0x43, 0xA9, 0x71, 0x0C, 0xF1, 0x32,  // T.C.q..2
            /* 02E0 */  0xF3, 0x50, 0xE3, 0x63, 0xC1, 0x2B, 0xA9, 0x0F,  // .P.c.+..
            /* 02E8 */  0x35, 0x86, 0x8A, 0xF3, 0x50, 0xE3, 0xE1, 0x06,  // 5...P...
            /* 02F0 */  0x8A, 0xFA, 0x66, 0xF3, 0x6C, 0x63, 0xF4, 0xF8,  // ..f.lc..
            /* 02F8 */  0xBE, 0xA1, 0x1A, 0xE2, 0xA1, 0x86, 0x49, 0x5E,  // ......I^
            /* 0300 */  0xA9, 0xC6, 0xE2, 0x43, 0x0D, 0xC0, 0xAB, 0xFF,  // ...C....
            /* 0308 */  0xFF, 0xA1, 0x06, 0xE0, 0xDB, 0xD1, 0x00, 0xCE,  // ........
            /* 0310 */  0x91, 0x11, 0x77, 0x34, 0x00, 0xD7, 0xA1, 0x14,  // ..w4....
            /* 0318 */  0x38, 0xFC, 0xFF, 0x8F, 0x06, 0xC0, 0xE3, 0x28,  // 8......(
            /* 0320 */  0x04, 0xE6, 0x0B, 0x8D, 0x8F, 0x42, 0x80, 0x05,  // .....B..
            /* 0328 */  0xD9, 0xE7, 0x20, 0x94, 0xD0, 0xA3, 0x10, 0x20,  // .. .... 
            /* 0330 */  0xE8, 0xF6, 0xF3, 0x14, 0xF1, 0xEC, 0xE3, 0xCB,  // ........
            /* 0338 */  0xCF, 0x03, 0x41, 0x84, 0xD7, 0x7C, 0x9F, 0x82,  // ..A..|..
            /* 0340 */  0x7C, 0xC8, 0xF7, 0x51, 0x88, 0xC1, 0x18, 0xCA,  // |..Q....
            /* 0348 */  0xD7, 0x20, 0x1F, 0x85, 0x18, 0xD4, 0x6B, 0x90,  // . ....k.
            /* 0350 */  0xEF, 0xFB, 0x06, 0x79, 0xBC, 0x08, 0x12, 0x3B,  // ...y...;
            /* 0358 */  0xCA, 0xFF, 0x3F, 0xD0, 0xA3, 0x10, 0x13, 0x7D,  // ..?....}
            /* 0360 */  0x14, 0x02, 0x68, 0xFF, 0xFF, 0x3F, 0x0A, 0x01,  // ..h..?..
            /* 0368 */  0xFC, 0x0B, 0x70, 0x34, 0x00, 0xDD, 0xB4, 0x1E,  // ..p4....
            /* 0370 */  0x85, 0xC0, 0x7B, 0x67, 0x39, 0xED, 0x13, 0xF0,  // ..{g9...
            /* 0378 */  0x59, 0x08, 0xFB, 0xFF, 0x3F, 0x0B, 0x01, 0x2C,  // Y...?..,
            /* 0380 */  0x39, 0x0A, 0x1D, 0xC5, 0x59, 0xBE, 0x0A, 0x3D,  // 9...Y..=
            /* 0388 */  0x01, 0xBC, 0x00, 0xC4, 0x08, 0xF3, 0x0E, 0xF4,  // ........
            /* 0390 */  0x92, 0xC9, 0xEE, 0xE2, 0xC6, 0x79, 0x72, 0x39,  // .....yr9
            /* 0398 */  0x8B, 0x27, 0x71, 0x5F, 0x82, 0x7C, 0xA0, 0x78,  // .'q_.|.x
            /* 03A0 */  0x16, 0x32, 0xD4, 0xE9, 0x06, 0x7D, 0x23, 0xF7,  // .2...}#.
            /* 03A8 */  0xC0, 0x62, 0xC6, 0x0F, 0xF1, 0x3C, 0x64, 0x88,  // .b...<d.
            /* 03B0 */  0x67, 0x21, 0xC0, 0xC8, 0xFF, 0xFF, 0x2C, 0x04,  // g!....,.
            /* 03B8 */  0xF0, 0xFF, 0xFF, 0x7F, 0x16, 0x02, 0x5C, 0xBF,  // ......\.
            /* 03C0 */  0x00, 0x7C, 0x16, 0x02, 0x9E, 0x27, 0x80, 0x07,  // .|...'..
            /* 03C8 */  0x6D, 0x9F, 0x85, 0x00, 0x43, 0xFF, 0xFF, 0xB3,  // m...C...
            /* 03D0 */  0x10, 0x60, 0xE4, 0x70, 0x79, 0xFE, 0xAF, 0x40,  // .`.py..@
            /* 03D8 */  0xC7, 0xF2, 0x1E, 0xE1, 0x59, 0x9F, 0xE4, 0xEB,  // ....Y...
            /* 03E0 */  0xA5, 0x67, 0xFA, 0x50, 0xF0, 0x2C, 0xC4, 0xB0,  // .g.P.,..
            /* 03E8 */  0x0E, 0xC3, 0x67, 0x21, 0x06, 0xF1, 0xA2, 0x69,  // ..g!...i
            /* 03F0 */  0x88, 0x17, 0x4E, 0x1F, 0x06, 0x18, 0xF0, 0x2B,  // ..N....+
            /* 03F8 */  0xA7, 0x81, 0x82, 0x04, 0x7A, 0x16, 0x02, 0x58,  // ....z..X
            /* 0400 */  0xF2, 0xFF, 0x3F, 0x0B, 0x01, 0xFC, 0xFF, 0xFF,  // ..?.....
            /* 0408 */  0x9F, 0x85, 0x80, 0xD8, 0x1A, 0x75, 0x16, 0x02,  // .....u..
            /* 0410 */  0x96, 0xB7, 0x95, 0x67, 0x6C, 0x9F, 0x56, 0x9E,  // ...gl.V.
            /* 0418 */  0x85, 0x00, 0x0B, 0xB9, 0x8C, 0x1C, 0x84, 0x30,  // .......0
            /* 0420 */  0x11, 0x1F, 0x0E, 0x3E, 0x66, 0x02, 0x7A, 0xFE,  // ...>f.z.
            /* 0428 */  0xFF, 0x53, 0x7C, 0x71, 0x37, 0xC6, 0x13, 0xC0,  // .S|q7...
            /* 0430 */  0x8B, 0xC4, 0x63, 0x26, 0x3B, 0x6A, 0x1A, 0xE6,  // ..c&;j..
            /* 0438 */  0x59, 0xC8, 0x78, 0x67, 0xF1, 0x1A, 0xF0, 0x04,  // Y.xg....
            /* 0440 */  0xEF, 0xC9, 0x3F, 0x0B, 0x31, 0xB0, 0xC3, 0x0A,  // ..?.1...
            /* 0448 */  0xF6, 0x28, 0x64, 0x50, 0x83, 0xC7, 0x0E, 0x11,  // .(dP....
            /* 0450 */  0x26, 0xD0, 0xB3, 0x10, 0x8B, 0xFB, 0x5C, 0xD1,  // &.....\.
            /* 0458 */  0x79, 0xC2, 0x67, 0x21, 0xC0, 0xC9, 0xD5, 0xE0,  // y.g!....
            /* 0460 */  0x59, 0x08, 0x30, 0x71, 0xD8, 0xF0, 0x59, 0x03,  // Y.0q..Y.
            /* 0468 */  0x3C, 0xC3, 0xF7, 0xA8, 0xCE, 0xE1, 0xF1, 0x18,  // <.......
            /* 0470 */  0x78, 0xFD, 0xFF, 0x0F, 0x1A, 0xE0, 0xC9, 0xAA,  // x.......
            /* 0478 */  0xE3, 0x9C, 0xC0, 0x72, 0x2F, 0x5A, 0x36, 0x0E,  // ...r/Z6.
            /* 0480 */  0x34, 0x74, 0x44, 0x56, 0x07, 0xA4, 0xB1, 0x61,  // 4tDV...a
            /* 0488 */  0x2E, 0x25, 0x91, 0x4F, 0x8E, 0x8D, 0xDA, 0x8A,  // .%.O....
            /* 0490 */  0xE0, 0x74, 0x66, 0xF2, 0x09, 0xC0, 0x5A, 0x28,  // .tf...Z(
            /* 0498 */  0xA4, 0x80, 0x46, 0x63, 0x31, 0xBC, 0x33, 0x1F,  // ..Fc1.3.
            /* 04A0 */  0x9D, 0x28, 0x88, 0x01, 0x7D, 0x1C, 0xB2, 0x8D,  // .(..}...
            /* 04A8 */  0x43, 0x01, 0x6A, 0x2F, 0x9A, 0x02, 0x39, 0xE7,  // C.j/..9.
            /* 04B0 */  0x60, 0xF4, 0xCF, 0x8E, 0xCE, 0xC6, 0x77, 0x02,  // `.....w.
            /* 04B8 */  0xAE, 0x01, 0x42, 0xA7, 0x04, 0x43, 0x5B, 0xCD,  // ..B..C[.
            /* 04C0 */  0x2C, 0x51, 0x60, 0xC6, 0x7F, 0x8A, 0x31, 0x81,  // ,Q`...1.
            /* 04C8 */  0xCF, 0x31, 0xF8, 0x83, 0x01, 0x7E, 0xE0, 0x2F,  // .1...~./
            /* 04D0 */  0x06, 0x55, 0xDF, 0x0B, 0x74, 0x5F, 0xB0, 0xBA,  // .U..t_..
            /* 04D8 */  0x9B, 0x0C, 0x84, 0x19, 0x99, 0xA0, 0xBE, 0xD3,  // ........
            /* 04E0 */  0x01, 0x28, 0x80, 0x7C, 0x21, 0xF0, 0x39, 0xEA,  // .(.|!.9.
            /* 04E8 */  0xA1, 0x80, 0x4D, 0x24, 0x44, 0x98, 0x68, 0x46,  // ..M$D.hF
            /* 04F0 */  0x47, 0x4C, 0x18, 0x15, 0x7D, 0xC2, 0x14, 0xC4,  // GL..}...
            /* 04F8 */  0x13, 0x76, 0xAC, 0x09, 0xA3, 0x67, 0xE2, 0x8B,  // .v...g..
            /* 0500 */  0x0E, 0x1B, 0x31, 0x26, 0xC4, 0xD5, 0x03, 0xDA,  // ..1&....
            /* 0508 */  0x04, 0x83, 0xFA, 0x52, 0x04, 0x6B, 0xC8, 0x7C,  // ...R.k.|
            /* 0510 */  0x2C, 0xBE, 0x40, 0xE0, 0xA6, 0xCC, 0xFE, 0xFF,  // ,.@.....
            /* 0518 */  0x53, 0x06, 0xD7, 0x9C, 0xD8, 0x35, 0xC1, 0x97,  // S....5..
            /* 0520 */  0x1D, 0xDC, 0x9C, 0xC1, 0x08, 0x8F, 0xB9, 0x8B,  // ........
            /* 0528 */  0xF1, 0xAB, 0x93, 0x47, 0xC7, 0x0F, 0x0A, 0xBE,  // ...G....
            /* 0530 */  0xE1, 0x30, 0xEC, 0x27, 0x33, 0xCF, 0xE8, 0xBD,  // .0.'3...
            /* 0538 */  0xCC, 0xD7, 0x38, 0x0C, 0xAC, 0xC7, 0xCB, 0x61,  // ..8....a
            /* 0540 */  0x8D, 0x16, 0xF6, 0xD0, 0xDE, 0x43, 0x7C, 0x88,  // .....C|.
            /* 0548 */  0xF1, 0x79, 0xC2, 0x18, 0x61, 0x7D, 0x7B, 0x01,  // .y..a}{.
            /* 0550 */  0xC7, 0x3D, 0x0B, 0xFE, 0x5D, 0x03, 0x3C, 0x97,  // .=..].<.
            /* 0558 */  0x10, 0xDF, 0x35, 0x00, 0x6B, 0xFF, 0xFF, 0xBB,  // ..5.k...
            /* 0560 */  0x06, 0xC0, 0x8F, 0x6B, 0x82, 0xEF, 0x1A, 0xC0,  // ...k....
            /* 0568 */  0x7B, 0xE8, 0xBE, 0x6B, 0x00, 0xBF, 0xFF, 0xFF,  // {..k....
            /* 0570 */  0x5D, 0x03, 0x97, 0xFD, 0xAE, 0x81, 0x3A, 0x06,  // ].....:.
            /* 0578 */  0x58, 0xE1, 0x5D, 0x03, 0xDA, 0x95, 0xED, 0x7D,  // X.]....}
            /* 0580 */  0xED, 0x09, 0xCB, 0x9A, 0x2E, 0x1B, 0x28, 0x35,  // ......(5
            /* 0588 */  0x97, 0x0D, 0x80, 0x04, 0x52, 0x26, 0x8C, 0x0A,  // ....R&..
            /* 0590 */  0x3F, 0x61, 0x0A, 0xE2, 0x09, 0x3B, 0xD8, 0x65,  // ?a...;.e
            /* 0598 */  0x03, 0x14, 0x31, 0x2E, 0x1B, 0xA0, 0x1F, 0xDB,  // ..1.....
            /* 05A0 */  0x29, 0x83, 0xEF, 0xFF, 0x7F, 0xBE, 0x87, 0x73,  // )......s
            /* 05A8 */  0x4F, 0x60, 0xB7, 0x0D, 0xE0, 0x0D, 0xE9, 0xDB,  // O`......
            /* 05B0 */  0x06, 0x70, 0xCD, 0x7F, 0xDB, 0x40, 0x71, 0x58,  // .p...@qX
            /* 05B8 */  0xE5, 0x6D, 0x03, 0xE2, 0x49, 0x9E, 0x11, 0x58,  // .m..I..X
            /* 05C0 */  0xD5, 0x75, 0x03, 0xA5, 0xE7, 0xBA, 0x01, 0xC8,  // .u......
            /* 05C8 */  0xFB, 0xFF, 0x5F, 0x37, 0x80, 0x87, 0x98, 0x09,  // .._7....
            /* 05D0 */  0xA3, 0xE2, 0x4F, 0x98, 0x82, 0x78, 0xC2, 0x8E,  // ..O..x..
            /* 05D8 */  0x76, 0xDD, 0x00, 0x45, 0x90, 0xEB, 0x06, 0xE8,  // v..E....
            /* 05E0 */  0xE7, 0xF5, 0xBA, 0x01, 0x1C, 0x2E, 0x0A, 0x98,  // ........
            /* 05E8 */  0xFB, 0x06, 0xF0, 0x86, 0xE5, 0xF7, 0x0D, 0xE0,  // ........
            /* 05F0 */  0xF9, 0xFF, 0xBF, 0x6F, 0x80, 0xE7, 0x26, 0x8E,  // ...o..&.
            /* 05F8 */  0xB9, 0x6F, 0x00, 0x6C, 0xFE, 0xFF, 0x5F, 0xF5,  // .o.l.._.
            /* 0600 */  0x70, 0x17, 0x05, 0xCC, 0x7D, 0x03, 0x78, 0x5F,  // p...}.x_
            /* 0608 */  0xA4, 0x7D, 0xDF, 0x00, 0xAE, 0xD2, 0xD6, 0xEF,  // .}......
            /* 0610 */  0xC1, 0xD1, 0x13, 0x82, 0xC7, 0x87, 0xBB, 0x5F,  // ......._
            /* 0618 */  0x7A, 0x7C, 0xBE, 0x9B, 0x83, 0x63, 0x90, 0xC7,  // z|...c..
            /* 0620 */  0x78, 0x68, 0x07, 0xFC, 0xFA, 0xEE, 0x89, 0xF9,  // xh......
            /* 0628 */  0x6E, 0x0E, 0xFC, 0xCF, 0x04, 0xC7, 0x83, 0x81,  // n.......
            /* 0630 */  0xC6, 0x21, 0xB6, 0x7A, 0x69, 0x20, 0x47, 0x83,  // .!.zi G.
            /* 0638 */  0xF8, 0xFC, 0xFF, 0x0F, 0xCD, 0xE0, 0x8C, 0x55,  // .......U
            /* 0640 */  0xFC, 0xC9, 0x1F, 0xE1, 0x1C, 0x43, 0x67, 0x87,  // .....Cg.
            /* 0648 */  0x83, 0xC4, 0x0E, 0x82, 0x07, 0x5B, 0xB5, 0x09,  // .....[..
            /* 0650 */  0x14, 0x1A, 0x42, 0x51, 0x60, 0x50, 0x2C, 0x3E,  // ..BQ`P,>
            /* 0658 */  0x60, 0xE0, 0x87, 0xCD, 0xCE, 0x02, 0x4C, 0x12,  // `.....L.
            /* 0660 */  0x1C, 0xEA, 0x08, 0xE0, 0xFB, 0x44, 0xF3, 0xE3,  // .....D..
            /* 0668 */  0xD0, 0xDD, 0xE0, 0x50, 0x3D, 0x96, 0x87, 0x02,  // ...P=...
            /* 0670 */  0x7A, 0x06, 0xC4, 0x1D, 0x33, 0xC8, 0xA4, 0x3D,  // z...3..=
            /* 0678 */  0xA3, 0x88, 0x4F, 0x09, 0xA7, 0x14, 0x26, 0x81,  // ..O...&.
            /* 0680 */  0xCF, 0x0F, 0x0C, 0x8D, 0x13, 0xBC, 0x36, 0x84,  // ......6.
            /* 0688 */  0xC6, 0x9C, 0x14, 0xEC, 0xF9, 0x8E, 0x21, 0x60,  // ......!`
            /* 0690 */  0x13, 0xD8, 0xFD, 0x25, 0x43, 0xD6, 0x06, 0xAE,  // ...%C...
            /* 0698 */  0x5B, 0x92, 0x21, 0x7A, 0xC3, 0x91, 0x2D, 0x14,  // [.!z..-.
            /* 06A0 */  0x4D, 0x27, 0xCA, 0xFB, 0x46, 0x14, 0x3B, 0x43,  // M'..F.;C
            /* 06A8 */  0x10, 0x46, 0x94, 0x60, 0x41, 0x1E, 0x15, 0x62,  // .F.`A..b
            /* 06B0 */  0x45, 0x79, 0x29, 0x30, 0x42, 0xC4, 0x10, 0xAF,  // Ey)0B...
            /* 06B8 */  0x1C, 0x81, 0x4E, 0x38, 0x7C, 0x90, 0xC7, 0xA6,  // ..N8|...
            /* 06C0 */  0x38, 0xED, 0x0F, 0x82, 0xC4, 0x7A, 0x12, 0x68,  // 8....z.h
            /* 06C8 */  0x2C, 0x8E, 0x34, 0x1A, 0xD4, 0x39, 0xC0, 0xC3,  // ,.4..9..
            /* 06D0 */  0xF5, 0x21, 0xC6, 0xC3, 0x7F, 0x08, 0x31, 0xC8,  // .!....1.
            /* 06D8 */  0x41, 0x9E, 0xDB, 0xA3, 0xC2, 0x71, 0xFA, 0x2A,  // A....q.*
            /* 06E0 */  0x61, 0x82, 0x17, 0x00, 0x1F, 0x54, 0xE0, 0xB8,  // a....T..
            /* 06E8 */  0x06, 0xD4, 0x8C, 0x9F, 0x31, 0xC0, 0x72, 0x1C,  // ....1.r.
            /* 06F0 */  0xF7, 0x49, 0x05, 0xEE, 0x78, 0x7C, 0x3F, 0x60,  // .I..x|?`
            /* 06F8 */  0x13, 0x4E, 0x60, 0xF9, 0x83, 0x40, 0x1D, 0x67,  // .N`..@.g
            /* 0700 */  0xF8, 0x3C, 0x5F, 0x58, 0x0C, 0xF9, 0x98, 0x60,  // .<_X...`
            /* 0708 */  0x02, 0x8B, 0x15, 0xF0, 0xFF, 0x3F, 0xD9, 0xB0,  // .....?..
            /* 0710 */  0xF1, 0x80, 0xFF, 0x1E, 0xF3, 0x78, 0xE1, 0x93,  // .....x..
            /* 0718 */  0x89, 0xE7, 0x6B, 0x82, 0x11, 0x21, 0xE4, 0x64,  // ..k..!.d
            /* 0720 */  0x3C, 0xE8, 0x3B, 0x04, 0xE6, 0x7A, 0xC3, 0xCE,  // <.;..z..
            /* 0728 */  0x2D, 0x5C, 0xD4, 0x41, 0x03, 0x75, 0x5A, 0xF0,  // -\.A.uZ.
            /* 0730 */  0x41, 0x81, 0xDD, 0x8C, 0x30, 0xC7, 0x75, 0x7E,  // A...0.u~
            /* 0738 */  0x56, 0x01, 0xFF, 0x08, 0xE1, 0xDF, 0x1E, 0x3C,  // V......<
            /* 0740 */  0x2F, 0x5F, 0x19, 0x5E, 0x1D, 0x12, 0x38, 0xE4,  // /_.^..8.
            /* 0748 */  0x08, 0xD1, 0xE3, 0xF2, 0x08, 0x31, 0xE7, 0x23,  // .....1.#
            /* 0750 */  0xCC, 0x10, 0xC1, 0x75, 0x16, 0x00, 0xC7, 0x10,  // ...u....
            /* 0758 */  0x81, 0xCF, 0x01, 0x07, 0xF6, 0xFF, 0xFF, 0xC2,  // ........
            /* 0760 */  0xC2, 0x2E, 0x4D, 0x7C, 0xA0, 0x3E, 0xE0, 0x00,  // ..M|.>..
            /* 0768 */  0x0E, 0xAE, 0x69, 0xB8, 0x03, 0x0E, 0x38, 0xCE,  // ..i...8.
            /* 0770 */  0x02, 0xEC, 0x70, 0x03, 0x4B, 0xA1, 0x4D, 0x9F,  // ..p.K.M.
            /* 0778 */  0x1A, 0x8D, 0x5A, 0x35, 0x28, 0x53, 0xA3, 0x4C,  // ..Z5(S.L
            /* 0780 */  0x83, 0x5A, 0x7D, 0x2A, 0x35, 0x66, 0xEC, 0xAC,  // .Z}*5f..
            /* 0788 */  0xF2, 0x28, 0xAC, 0x47, 0x84, 0x46, 0x65, 0x11,  // .(.G.Fe.
            /* 0790 */  0x8F, 0x02, 0x81, 0x38, 0x32, 0x08, 0x8D, 0x44,  // ...82..D
            /* 0798 */  0x21, 0x10, 0x0B, 0x7F, 0x24, 0x08, 0xC4, 0xC2,  // !...$...
            /* 07A0 */  0x1E, 0x55, 0x02, 0xB1, 0xA8, 0xE7, 0x9C, 0x40,  // .U.....@
            /* 07A8 */  0x1C, 0x63, 0x15, 0x02, 0x27, 0x26, 0xC0, 0x29,  // .c..'&.)
            /* 07B0 */  0x08, 0x0D, 0xA6, 0xE2, 0xA0, 0x42, 0x9F, 0x6A,  // .....B.j
            /* 07B8 */  0x02, 0x71, 0x18, 0x10, 0x2A, 0xFD, 0xAF, 0x27,  // .q..*..'
            /* 07C0 */  0x10, 0x0B, 0xF4, 0x01, 0x48, 0x1F, 0x04, 0x02,  // ....H...
            /* 07C8 */  0x71, 0x04, 0x25, 0xA3, 0xA6, 0x0F, 0x09, 0x81,  // q.%.....
            /* 07D0 */  0x38, 0x2E, 0x08, 0x0D, 0xF5, 0x7C, 0x10, 0x20,  // 8....|. 
            /* 07D8 */  0xB1, 0x02, 0xC2, 0x82, 0x7B, 0x01, 0x61, 0xB2,  // ....{.a.
            /* 07E0 */  0x1F, 0x04, 0x02, 0xB1, 0x48, 0x33, 0x20, 0x4C,  // ....H3 L
            /* 07E8 */  0xCA, 0xAB, 0x4F, 0x80, 0x04, 0x84, 0xCA, 0xB5,  // ..O.....
            /* 07F0 */  0x03, 0xC2, 0xC2, 0x82, 0xD0, 0x68, 0x7A, 0x40,  // .....hz@
            /* 07F8 */  0x58, 0x00, 0x3F, 0x80, 0xF4, 0x15, 0x21, 0x10,  // X.?...!.
            /* 0800 */  0x87, 0x54, 0x04, 0xC2, 0x24, 0x3A, 0x02, 0x61,  // .T..$:.a
            /* 0808 */  0x29, 0x25, 0xFD, 0xFF, 0x21, 0x1A, 0x19, 0xA2,  // )%..!...
            /* 0810 */  0x41, 0x04, 0xE4, 0xA4, 0x96, 0x80, 0x58, 0x6E,  // A.....Xn
            /* 0818 */  0x10, 0x01, 0x39, 0x9C, 0x27, 0x20, 0x96, 0x14,  // ..9.' ..
            /* 0820 */  0x44, 0x40, 0x0E, 0xF8, 0xD2, 0x10, 0x90, 0xE3,  // D@......
            /* 0828 */  0x82, 0x08, 0xC8, 0xA9, 0x54, 0x01, 0xB1, 0x88,  // ....T...
            /* 0830 */  0x20, 0x02, 0x72, 0x32, 0x57, 0x40, 0x2C, 0x27,  //  .r2W@,'
            /* 0838 */  0x88, 0x0E, 0x01, 0xE4, 0x11, 0x14, 0x88, 0xE4,  // ........
            /* 0840 */  0x03, 0x11, 0x90, 0x63, 0xBD, 0x1C, 0x02, 0x91,  // ...c....
            /* 0848 */  0x90, 0x20, 0x02, 0x72, 0xA2, 0x37, 0x86, 0x80,  // . .r.7..
            /* 0850 */  0x1C, 0x0F, 0x44, 0x83, 0x20, 0x5F, 0xA1, 0x40,  // ..D. _.@
            /* 0858 */  0x24, 0x23, 0x88, 0x80, 0xC8, 0xFB, 0x28, 0x08,  // $#....(.
            /* 0860 */  0xD1, 0xF4, 0xAB, 0x13, 0x88, 0x53, 0x83, 0xD0,  // .....S..
            /* 0868 */  0x64, 0xDF, 0xA2, 0x20, 0xE4, 0xFF, 0x0F         // d.. ...
        })
        Name (ZOBF, Buffer (0x1060){})
        Name (_WDG, Buffer (0x3C)
        {
            /* 0000 */  0x34, 0xF0, 0xB7, 0x5F, 0x63, 0x2C, 0xE9, 0x45,  // 4.._c,.E
            /* 0008 */  0xBE, 0x91, 0x3D, 0x44, 0xE2, 0xC7, 0x07, 0xE4,  // ..=D....
            /* 0010 */  0x50, 0x56, 0x01, 0x02, 0x79, 0x42, 0xF2, 0x95,  // PV..yB..
            /* 0018 */  0x7B, 0x4D, 0x34, 0x43, 0x93, 0x87, 0xAC, 0xCD,  // {M4C....
            /* 0020 */  0xC6, 0x7E, 0xF6, 0x1C, 0x81, 0x00, 0x01, 0x08,  // .~......
            /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
            /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
            /* 0038 */  0x5A, 0x5A, 0x01, 0x00                           // ZZ..
        })
        Method (WVPI, 3, Serialized)
        {
            CreateDWordField (Arg2, Zero, FSNI)
            CreateDWordField (Arg2, 0x04, FCOM)
            CreateDWordField (Arg2, 0x08, FCMT)
            CreateDWordField (Arg2, 0x0C, FDAS)
            Local0 = Zero
            RTCD = 0x03
            Local1 = Package (0x02)
                {
                    Zero, 
                    Zero
                }
            If ((FDAS > 0x1060))
            {
                RTCD = 0x05
                Local1 [Zero] = One
            }
            Else
            {
                Name (PVSZ, Package (0x05)
                {
                    Zero, 
                    0x04, 
                    0x80, 
                    0x0400, 
                    0x1000
                })
                Local0 = Zero
                If (((Arg1 >= One) && (Arg1 <= 0x05)))
                {
                    Local0 = DerefOf (PVSZ [(Arg1 - One)])
                }

                DASO = Local0
                SNIN = FSNI /* \_SB_.WMIV.WVPI.FSNI */
                COMD = FCOM /* \_SB_.WMIV.WVPI.FCOM */
                CMTP = FCMT /* \_SB_.WMIV.WVPI.FCMT */
                DASI = FDAS /* \_SB_.WMIV.WVPI.FDAS */
                If ((FDAS > Zero))
                {
                    CreateField (Arg2, 0x80, (FDAS * 0x08), FDAI)
                    PVWB = FDAI /* \_SB_.WMIV.WVPI.FDAI */
                }

                Local1 [One] = Local0
            }

            Return (Local1)
        }

        Method (HVWA, 0, Serialized)
        {
            Local2 = HVWC (COMD, CMTP, DASI, PVWB)
            Local0 = DerefOf (Local2 [Zero])
            If (((Local0 == 0x03) || (Local0 == 0x04)))
            {
                Local2 = HVWP (COMD, CMTP, DASI, PVWB)
            }

            Return (Local2)
        }

        Method (WVPO, 2, Serialized)
        {
            Local1 = Buffer ((0x08 + Arg0)){}
            CreateDWordField (Local1, Zero, FSNO)
            CreateDWordField (Local1, 0x04, FRTC)
            If ((ObjectType (Arg1) == 0x04))
            {
                FRTC = DerefOf (Arg1 [Zero])
                Local0 = Zero
                If ((SizeOf (Arg1) == 0x02))
                {
                    Local2 = DerefOf (Arg1 [One])
                    Local0 = SizeOf (Local2)
                }
            }
            Else
            {
                FRTC = RTCD /* \RTCD */
                Local0 = DASO /* \DASO */
            }

            If ((Local0 > Arg0))
            {
                FRTC = 0x05
            }
            ElseIf (((Local0 > Zero) && (Local0 <= 0x1060)))
            {
                CreateField (Local1, 0x40, (Local0 * 0x08), FDAO)
                If ((ObjectType (Arg1) == 0x04))
                {
                    FDAO = Local2
                }
                Else
                {
                    Local2 = PVWB /* \PVWB */
                    CreateField (Local2, Zero, (Local0 * 0x08), FDAI)
                    FDAO = FDAI /* \_SB_.WMIV.WVPO.FDAI */
                }
            }

            If ((Zero == (FRTC & 0xFFFF)))
            {
                FSNO = 0x53534150
            }
            Else
            {
                FSNO = 0x4C494146
            }

            Return (Local1)
        }

        Method (WVCM, 0, Serialized)
        {
            SNIN = Zero
            COMD = Zero
            CMTP = Zero
            DASI = Zero
            DASO = Zero
            PVWB = ZOBF /* \_SB_.WMIV.ZOBF */
            PVWS = Zero
            RTCD = Zero
        }

        Method (WMPV, 3, Serialized)
        {
            Local4 = WVPI (Arg0, Arg1, Arg2)
            Local0 = DerefOf (Local4 [Zero])
            Local3 = DerefOf (Local4 [One])
            If ((Local0 == Zero))
            {
                PVWS = 0x03
                GSWS (0x80F3)
                If ((PVWS == 0x03))
                {
                    Local2 = HVWA ()
                }
                ElseIf ((PVWS == 0x05))
                {
                    Local6 = HVWA ()
                    If ((0x00010000 != DerefOf (Local6 [Zero])))
                    {
                        Local2 = Local6
                    }
                }
                Else
                {
                    Local5 = Zero
                    While (((PVWS == 0x04) && (Local5 < 0x8000)))
                    {
                        Sleep (0x19)
                        PVWS = 0x03
                        GSWS (0x80F3)
                        Local5++
                    }
                }
            }

            Local1 = WVPO (Local3, Local2)
            If ((Local0 == Zero))
            {
                WVCM ()
            }

            Return (Local1)
        }

        Name (VEI1, Zero)
        Name (VED1, Zero)
        Name (VEI2, Zero)
        Name (VED2, Zero)
        Name (VEVI, Zero)
        Mutex (VEMX, 0x00)
        Method (_WED, 1, Serialized)  // _Wxx: Wake Event, xx=0x00-0xFF
        {
            Local0 = Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            CreateDWordField (Local0, Zero, EVID)
            CreateDWordField (Local0, 0x04, EVDA)
            EVID = VEI1 /* \_SB_.WMIV.VEI1 */
            EVDA = VED1 /* \_SB_.WMIV.VED1 */
            Acquire (VEMX, 0xFFFF)
            If ((VEI2 != Zero))
            {
                VEI1 = VEI2 /* \_SB_.WMIV.VEI2 */
                VED1 = VED2 /* \_SB_.WMIV.VED2 */
                VEI2 = Zero
                VED2 = Zero
                If ((VEVI == Zero))
                {
                    VEVI = One
                    Notify (WMIV, 0x81) // Information Change
                }
            }
            Else
            {
                VEI1 = Zero
                VED1 = Zero
            }

            Release (VEMX)
            Return (Local0)
        }

        Method (GVWE, 2, Serialized)
        {
            Acquire (VEMX, 0xFFFF)
            If ((VEI1 == Zero))
            {
                VEI1 = Arg0
                VED1 = Arg1
            }
            Else
            {
                VEI2 = Arg0
                VED2 = Arg1
            }

            Release (VEMX)
            Notify (WMIV, 0x81) // Information Change
        }
    }

    OperationRegion (HPCF, SystemMemory, 0x97B1F000, 0x0000005C)
    Field (HPCF, AnyAcc, Lock, Preserve)
    {
        SPPB,   8, 
        PPPB,   8, 
        ILUX,   8, 
        NFCS,   8, 
        USWE,   8, 
        EAX,    32, 
        EBX,    32, 
        ECX,    32, 
        EDX,    32, 
        REFS,   32, 
        SSCI,   8, 
        WOLE,   8, 
        WMIF,   8, 
        WMIT,   8, 
        WMIH,   8, 
        DFUE,   8, 
        TPLE,   8, 
        THHA,   16, 
        TPSA,   16, 
        SMAE,   8, 
        PFKB,   8, 
        CABS,   8, 
        IWRS,   8, 
        IMCM,   8, 
        CAIO,   16, 
        CAIR,   16, 
        CBIO,   16, 
        CBIR,   16, 
        CCIO,   16, 
        CCIR,   16, 
        CDIO,   16, 
        CDIR,   16, 
        LRES,   8, 
        OSTS,   8, 
        OSTP,   8, 
        SLPT,   8, 
        VPOM,   8, 
        XMEM,   64, 
        CPPD,   8, 
        HPID,   32, 
        WVPM,   8, 
        GPLT,   8, 
        GPLV,   32, 
        P2KW,   8, 
        P2MW,   8, 
        CDTE,   8, 
        PPBE,   8, 
        PPBM,   8, 
        PPBL,   8, 
        FDRS,   8, 
        APL3,   8, 
        PPAE,   8, 
        PPVB,   8, 
        PPFP,   8
    }

    OperationRegion (HPIL, SystemMemory, 0x97B1A000, 0x00000001)
    Field (HPIL, AnyAcc, Lock, Preserve)
    {
        VPOS,   8
    }

    Scope (_SB)
    {
        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x70), 
            POLB,   8, 
            POHB,   8, 
            Offset (0x79), 
            S3LB,   8, 
            S3HB,   8
        }

        Method (CPTS, 1, Serialized)
        {
            ODGW (Arg0)
            POLB = Arg0
            POHB = Zero
        }

        Method (CWAK, 1, Serialized)
        {
            ODGW ((0xF0 | Arg0))
            POLB = (0xF0 | Arg0)
            POHB = Zero
            If ((Arg0 == 0x03))
            {
                S3LB = (0xF0 | Arg0)
                S3HB = Zero
            }
        }
    }

    OperationRegion (HPSN, SystemMemory, 0x97B1B000, 0x00000008)
    Field (HPSN, AnyAcc, Lock, Preserve)
    {
        IOTS,   8, 
        IOTE,   8, 
        IRDS,   8, 
        TGRP,   8, 
        TGID,   32
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    OperationRegion (GNVS, SystemMemory, 0x97B0A000, 0x07E6)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        PWRS,   8, 
        DBGS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
        REVN,   8, 
        APIC,   8, 
        TCNT,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        C67L,   8, 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        W381,   8, 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        MEFE,   8, 
        DSTS,   8, 
        MORD,   8, 
        TCGP,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        IDEM,   8, 
        PLID,   8, 
        BTYP,   8, 
        OSCC,   8, 
        NEXP,   8, 
        SBV1,   8, 
        SBV2,   8, 
        ECON,   8, 
        DSEN,   8, 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        VFN2,   8, 
        VFN3,   8, 
        VFN4,   8, 
        VFN5,   8, 
        VFN6,   8, 
        VFN7,   8, 
        VFN8,   8, 
        VFN9,   8, 
        ATMC,   8, 
        PTMC,   8, 
        PNHM,   32, 
        TBAL,   32, 
        TBAH,   32, 
        TSOD,   8, 
        PFLV,   8, 
        BREV,   8, 
        PDTS,   8, 
        PKGA,   8, 
        PAMT,   8, 
        AC0F,   8, 
        AC1F,   8, 
        DTS3,   8, 
        DTS4,   8, 
        XTUB,   32, 
        XTUS,   32, 
        XMPB,   32, 
        DDRF,   8, 
        RTD3,   8, 
        PEP0,   8, 
        DPTF,   8, 
        DCFE,   16, 
        SADE,   8, 
        SACT,   8, 
        SAHT,   8, 
        CPUS,   8, 
        CTDP,   8, 
        FND1,   8, 
        AMBD,   8, 
        AMAT,   8, 
        AMPT,   8, 
        AMCT,   8, 
        AMHT,   8, 
        SKDE,   8, 
        SKAT,   8, 
        SKPT,   8, 
        SKCT,   8, 
        SKHT,   8, 
        EFDE,   8, 
        EFAT,   8, 
        EFPT,   8, 
        EFCT,   8, 
        EFHT,   8, 
        VRDE,   8, 
        VRAT,   8, 
        VRPT,   8, 
        VRCT,   8, 
        VRHT,   8, 
        DPAP,   8, 
        DPPP,   8, 
        DPCP,   8, 
        PIDE,   8, 
        TRTV,   8, 
        LPOE,   8, 
        LPOP,   8, 
        LPOS,   8, 
        LPOW,   8, 
        LPER,   8, 
        PPSZ,   32, 
        DISE,   8, 
        BGMA,   64, 
        BGMS,   8, 
        BGIA,   16, 
        IRMC,   8, 
        CHEN,   8, 
        S0ID,   8, 
        CTDB,   8, 
        DKSM,   8, 
        Offset (0x1F4), 
        WRFD,   8, 
        WRAT,   8, 
        WRPT,   8, 
        WRCT,   8, 
        WRHT,   8, 
        PWRE,   8, 
        Offset (0x1FC), 
        PPPR,   16, 
        PBPE,   8, 
        VSPE,   8, 
        RFIM,   8, 
        Offset (0x203), 
        XHPR,   8, 
        GBSX,   8, 
        IUBE,   8, 
        IUCE,   8, 
        IUDE,   8, 
        ECNO,   8, 
        AUDD,   16, 
        IC0D,   16, 
        IC1D,   16, 
        IC1S,   16, 
        VRRD,   16, 
        PSCP,   8, 
        RCG0,   16, 
        RCG1,   16, 
        ECDB,   8, 
        P2ME,   8, 
        P2MK,   8, 
        WIRC,   8, 
        WGRC,   8, 
        WWRC,   8, 
        SSH0,   16, 
        SSL0,   16, 
        SSD0,   16, 
        FMH0,   16, 
        FML0,   16, 
        FMD0,   16, 
        FPH0,   16, 
        FPL0,   16, 
        FPD0,   16, 
        HMH0,   16, 
        HML0,   16, 
        HMD0,   16, 
        Offset (0x23D), 
        SSH1,   16, 
        SSL1,   16, 
        SSD1,   16, 
        FMH1,   16, 
        FML1,   16, 
        FMD1,   16, 
        FPH1,   16, 
        FPL1,   16, 
        FPD1,   16, 
        HMH1,   16, 
        HML1,   16, 
        HMD1,   16, 
        Offset (0x256), 
        SSH2,   16, 
        SSL2,   16, 
        SSD2,   16, 
        FMH2,   16, 
        FML2,   16, 
        FMD2,   16, 
        FPH2,   16, 
        FPL2,   16, 
        FPD2,   16, 
        HMH2,   16, 
        HML2,   16, 
        HMD2,   16, 
        Offset (0x26F), 
        SSH3,   16, 
        SSL3,   16, 
        SSD3,   16, 
        FMH3,   16, 
        FML3,   16, 
        FMD3,   16, 
        FPH3,   16, 
        FPL3,   16, 
        FPD3,   16, 
        HMH3,   16, 
        HML3,   16, 
        HMD3,   16, 
        Offset (0x288), 
        SSH4,   16, 
        SSL4,   16, 
        SSD4,   16, 
        FMH4,   16, 
        FML4,   16, 
        FMD4,   16, 
        FPH4,   16, 
        FPL4,   16, 
        FPD4,   16, 
        HMH4,   16, 
        HML4,   16, 
        HMD4,   16, 
        Offset (0x2A1), 
        SSH5,   16, 
        SSL5,   16, 
        SSD5,   16, 
        FMH5,   16, 
        FML5,   16, 
        FMD5,   16, 
        FPH5,   16, 
        FPL5,   16, 
        FPD5,   16, 
        HMH5,   16, 
        HML5,   16, 
        HMD5,   16, 
        Offset (0x2BA), 
        M0C0,   16, 
        M1C0,   16, 
        M0C1,   16, 
        M1C1,   16, 
        M0C2,   16, 
        M1C2,   16, 
        M0C3,   16, 
        M1C3,   16, 
        M0C4,   16, 
        M1C4,   16, 
        M0C5,   16, 
        M1C5,   16, 
        M0C6,   16, 
        M1C6,   16, 
        M0C7,   16, 
        M1C7,   16, 
        M0C8,   16, 
        M1C8,   16, 
        Offset (0x2DF), 
        M0C9,   16, 
        M1C9,   16, 
        M0CA,   16, 
        M1CA,   16, 
        M0CB,   16, 
        M1CB,   16, 
        Offset (0x2EC), 
        GIRQ,   32, 
        DMTP,   8, 
        DMTD,   8, 
        DMSH,   8, 
        SHSB,   8, 
        PLCS,   8, 
        PLVL,   16, 
        WWSD,   8, 
        CVSD,   8, 
        SSDD,   8, 
        INLD,   8, 
        IFAT,   8, 
        IFPT,   8, 
        IFCT,   8, 
        IFHT,   8, 
        USBH,   8, 
        BCV4,   8, 
        WTV0,   8, 
        WTV1,   8, 
        APFU,   8, 
        Offset (0x30A), 
        PEPC,   32, 
        PB1E,   8, 
        GNID,   8, 
        WAND,   8, 
        WWAT,   8, 
        WWPT,   8, 
        WWCT,   8, 
        WWHT,   8, 
        Offset (0x327), 
        MPL0,   16, 
        CHGE,   8, 
        SAC3,   8, 
        AMC3,   8, 
        SKC3,   8, 
        EFC3,   8, 
        VRC3,   8, 
        WLC3,   8, 
        IFC3,   8, 
        WWC3,   8, 
        WGC3,   8, 
        SPST,   8, 
        CA2D,   8, 
        ECLP,   8, 
        SSP1,   8, 
        SSP2,   8, 
        SSP3,   8, 
        SSP4,   8, 
        SSP5,   8, 
        SGE1,   8, 
        SAT1,   8, 
        SPT1,   8, 
        SCT1,   8, 
        SC31,   8, 
        SHT1,   8, 
        SGE2,   8, 
        SAT2,   8, 
        SPT2,   8, 
        SCT2,   8, 
        SC32,   8, 
        SHT2,   8, 
        VSP1,   8, 
        V1AT,   8, 
        V1PV,   8, 
        V1CR,   8, 
        V1C3,   8, 
        V1HT,   8, 
        VSP2,   8, 
        V2AT,   8, 
        V2PV,   8, 
        V2CR,   8, 
        V2C3,   8, 
        V2HT,   8, 
        S1DE,   8, 
        S1AT,   8, 
        S1PT,   8, 
        S1CT,   8, 
        S1HT,   8, 
        S2DE,   8, 
        S2AT,   8, 
        S2PT,   8, 
        S2CT,   8, 
        S2HT,   8, 
        S3DE,   8, 
        S3AT,   8, 
        S3PT,   8, 
        S3CT,   8, 
        S3HT,   8, 
        S4DE,   8, 
        S4AT,   8, 
        S4PT,   8, 
        S4CT,   8, 
        S4HT,   8, 
        S5DE,   8, 
        S5AT,   8, 
        S5PT,   8, 
        S5CT,   8, 
        S5HT,   8, 
        S1S3,   8, 
        S2S3,   8, 
        S3S3,   8, 
        S4S3,   8, 
        S5S3,   8, 
        BATR,   8, 
        Offset (0x378), 
        PSME,   8, 
        PDT1,   8, 
        PLM1,   32, 
        PTW1,   32, 
        PDT2,   8, 
        PLM2,   32, 
        PTW2,   32, 
        DDT1,   8, 
        DDP1,   8, 
        DLI1,   16, 
        DPL1,   16, 
        DTW1,   32, 
        DMI1,   16, 
        DMA1,   16, 
        DMT1,   16, 
        DDT2,   8, 
        DDP2,   8, 
        DLI2,   16, 
        DPL2,   16, 
        DTW2,   32, 
        DMI2,   16, 
        DMA2,   16, 
        DMT2,   16, 
        WIFE,   8, 
        DOM1,   8, 
        LIM1,   16, 
        TIM1,   32, 
        DOM2,   8, 
        LIM2,   16, 
        TIM2,   32, 
        DOM3,   8, 
        LIM3,   16, 
        TIM3,   32, 
        TRD0,   8, 
        TRL0,   8, 
        TRD1,   8, 
        TRL1,   8, 
        WDM1,   8, 
        CID1,   16, 
        WDM2,   8, 
        CID2,   16, 
        Offset (0x3FA), 
        APPE,   8, 
        MPL1,   16, 
        MPL2,   16, 
        SDS0,   8, 
        SDS1,   8, 
        SDS2,   8, 
        SDS3,   8, 
        SDS4,   8, 
        SDS5,   8, 
        SDS6,   8, 
        SDS7,   8, 
        SDS8,   8, 
        SDS9,   8, 
        SDSA,   8, 
        WTVX,   8, 
        WITX,   8, 
        GPTD,   8, 
        GDBT,   16, 
        UTKX,   8, 
        SPTD,   8, 
        Offset (0x429), 
        ATLB,   32, 
        SDM0,   8, 
        SDM1,   8, 
        SDM2,   8, 
        SDM3,   8, 
        SDM4,   8, 
        SDM5,   8, 
        SDM6,   8, 
        SDM7,   8, 
        SDM8,   8, 
        SDM9,   8, 
        SDMA,   8, 
        SDMB,   8, 
        Offset (0x43B), 
        USTP,   8, 
        Offset (0x465), 
        GFPS,   32, 
        GFPI,   32, 
        GNSC,   8, 
        GGNR,   32, 
        GBTK,   32, 
        GBTI,   32, 
        GPDI,   32, 
        GPLI,   32, 
        DBUS,   8, 
        CL00,   8, 
        CL01,   8, 
        CL02,   8, 
        CL03,   8, 
        L0EN,   8, 
        L1EN,   8, 
        L2EN,   8, 
        L3EN,   8, 
        CDIV,   8, 
        C0VE,   8, 
        C0TP,   8, 
        C0CV,   8, 
        C0IC,   32, 
        C0GP,   8, 
        C0IB,   8, 
        C0IA,   16, 
        C0P0,   8, 
        C0P1,   8, 
        C0P2,   8, 
        C0P3,   8, 
        C0G0,   8, 
        C0G1,   8, 
        C0G2,   8, 
        C0G3,   8, 
        C0F0,   8, 
        C0F1,   8, 
        C0F2,   8, 
        C0F3,   8, 
        C0A0,   8, 
        C0A1,   8, 
        C0A2,   8, 
        C0A3,   8, 
        C0I0,   8, 
        C0I1,   8, 
        C0I2,   8, 
        C0I3,   8, 
        C0PL,   8, 
        C0W0,   8, 
        C0W1,   8, 
        C0W2,   8, 
        C0W3,   8, 
        C0SP,   8, 
        C0W4,   8, 
        C0W5,   8, 
        C0CS,   8, 
        C1VE,   8, 
        C1TP,   8, 
        C1CV,   8, 
        C1IC,   32, 
        C1GP,   8, 
        C1IB,   8, 
        C1IA,   16, 
        C1P0,   8, 
        C1P1,   8, 
        C1P2,   8, 
        C1P3,   8, 
        C1G0,   8, 
        C1G1,   8, 
        C1G2,   8, 
        C1G3,   8, 
        C1F0,   8, 
        C1F1,   8, 
        C1F2,   8, 
        C1F3,   8, 
        C1A0,   8, 
        C1A1,   8, 
        C1A2,   8, 
        C1A3,   8, 
        C1I0,   8, 
        C1I1,   8, 
        C1I2,   8, 
        C1I3,   8, 
        C1PL,   8, 
        C1W0,   8, 
        C1W1,   8, 
        C1W2,   8, 
        C1W3,   8, 
        C1SP,   8, 
        C1W4,   8, 
        C1W5,   8, 
        C1CS,   8, 
        C2VE,   8, 
        C2TP,   8, 
        C2CV,   8, 
        C2IC,   32, 
        C2GP,   8, 
        C2IB,   8, 
        C2IA,   16, 
        C2P0,   8, 
        C2P1,   8, 
        C2P2,   8, 
        C2P3,   8, 
        C2G0,   8, 
        C2G1,   8, 
        C2G2,   8, 
        C2G3,   8, 
        C2F0,   8, 
        C2F1,   8, 
        C2F2,   8, 
        C2F3,   8, 
        C2A0,   8, 
        C2A1,   8, 
        C2A2,   8, 
        C2A3,   8, 
        C2I0,   8, 
        C2I1,   8, 
        C2I2,   8, 
        C2I3,   8, 
        C2PL,   8, 
        C2W0,   8, 
        C2W1,   8, 
        C2W2,   8, 
        C2W3,   8, 
        C2SP,   8, 
        C2W4,   8, 
        C2W5,   8, 
        C2CS,   8, 
        C3VE,   8, 
        C3TP,   8, 
        C3CV,   8, 
        C3IC,   32, 
        C3GP,   8, 
        C3IB,   8, 
        C3IA,   16, 
        C3P0,   8, 
        C3P1,   8, 
        C3P2,   8, 
        C3P3,   8, 
        C3G0,   8, 
        C3G1,   8, 
        C3G2,   8, 
        C3G3,   8, 
        C3F0,   8, 
        C3F1,   8, 
        C3F2,   8, 
        C3F3,   8, 
        C3A0,   8, 
        C3A1,   8, 
        C3A2,   8, 
        C3A3,   8, 
        C3I0,   8, 
        C3I1,   8, 
        C3I2,   8, 
        C3I3,   8, 
        C3PL,   8, 
        C3W0,   8, 
        C3W1,   8, 
        C3W2,   8, 
        C3W3,   8, 
        C3SP,   8, 
        C3W4,   8, 
        C3W5,   8, 
        C3CS,   8, 
        L0SM,   8, 
        L0H0,   8, 
        L0H1,   8, 
        L0H2,   8, 
        L0H3,   8, 
        L0H4,   8, 
        L0H5,   8, 
        L0H6,   8, 
        L0H7,   8, 
        L0H8,   8, 
        L0PL,   8, 
        L0M0,   8, 
        L0M1,   8, 
        L0M2,   8, 
        L0M3,   8, 
        L0M4,   8, 
        L0M5,   8, 
        L0M6,   8, 
        L0M7,   8, 
        L0M8,   8, 
        L0M9,   8, 
        L0MA,   8, 
        L0MB,   8, 
        L0MC,   8, 
        L0MD,   8, 
        L0ME,   8, 
        L0MF,   8, 
        L0DI,   8, 
        L0BS,   8, 
        L0A0,   16, 
        L0A1,   16, 
        L0A2,   16, 
        L0A3,   16, 
        L0A4,   16, 
        L0A5,   16, 
        L0A6,   16, 
        L0A7,   16, 
        L0A8,   16, 
        L0A9,   16, 
        L0AA,   16, 
        L0AB,   16, 
        L0D0,   8, 
        L0D1,   8, 
        L0D2,   8, 
        L0D3,   8, 
        L0D4,   8, 
        L0D5,   8, 
        L0D6,   8, 
        L0D7,   8, 
        L0D8,   8, 
        L0D9,   8, 
        L0DA,   8, 
        L0DB,   8, 
        L0DV,   8, 
        L0CV,   8, 
        L0LU,   8, 
        L0NL,   8, 
        L0EE,   8, 
        L0VC,   8, 
        L0FS,   8, 
        L0LE,   8, 
        L0DG,   8, 
        L0CK,   32, 
        L0CL,   8, 
        L0PP,   8, 
        L0VR,   8, 
        L1SM,   8, 
        L1H0,   8, 
        L1H1,   8, 
        L1H2,   8, 
        L1H3,   8, 
        L1H4,   8, 
        L1H5,   8, 
        L1H6,   8, 
        L1H7,   8, 
        L1H8,   8, 
        L1PL,   8, 
        L1M0,   8, 
        L1M1,   8, 
        L1M2,   8, 
        L1M3,   8, 
        L1M4,   8, 
        L1M5,   8, 
        L1M6,   8, 
        L1M7,   8, 
        L1M8,   8, 
        L1M9,   8, 
        L1MA,   8, 
        L1MB,   8, 
        L1MC,   8, 
        L1MD,   8, 
        L1ME,   8, 
        L1MF,   8, 
        L1DI,   8, 
        L1BS,   8, 
        L1A0,   16, 
        L1A1,   16, 
        L1A2,   16, 
        L1A3,   16, 
        L1A4,   16, 
        L1A5,   16, 
        L1A6,   16, 
        L1A7,   16, 
        L1A8,   16, 
        L1A9,   16, 
        L1AA,   16, 
        L1AB,   16, 
        L1D0,   8, 
        L1D1,   8, 
        L1D2,   8, 
        L1D3,   8, 
        L1D4,   8, 
        L1D5,   8, 
        L1D6,   8, 
        L1D7,   8, 
        L1D8,   8, 
        L1D9,   8, 
        L1DA,   8, 
        L1DB,   8, 
        L1DV,   8, 
        L1CV,   8, 
        L1LU,   8, 
        L1NL,   8, 
        L1EE,   8, 
        L1VC,   8, 
        L1FS,   8, 
        L1LE,   8, 
        L1DG,   8, 
        L1CK,   32, 
        L1CL,   8, 
        L1PP,   8, 
        L1VR,   8, 
        L2SM,   8, 
        L2H0,   8, 
        L2H1,   8, 
        L2H2,   8, 
        L2H3,   8, 
        L2H4,   8, 
        L2H5,   8, 
        L2H6,   8, 
        L2H7,   8, 
        L2H8,   8, 
        L2PL,   8, 
        L2M0,   8, 
        L2M1,   8, 
        L2M2,   8, 
        L2M3,   8, 
        L2M4,   8, 
        L2M5,   8, 
        L2M6,   8, 
        L2M7,   8, 
        L2M8,   8, 
        L2M9,   8, 
        L2MA,   8, 
        L2MB,   8, 
        L2MC,   8, 
        L2MD,   8, 
        L2ME,   8, 
        L2MF,   8, 
        L2DI,   8, 
        L2BS,   8, 
        L2A0,   16, 
        L2A1,   16, 
        L2A2,   16, 
        L2A3,   16, 
        L2A4,   16, 
        L2A5,   16, 
        L2A6,   16, 
        L2A7,   16, 
        L2A8,   16, 
        L2A9,   16, 
        L2AA,   16, 
        L2AB,   16, 
        L2D0,   8, 
        L2D1,   8, 
        L2D2,   8, 
        L2D3,   8, 
        L2D4,   8, 
        L2D5,   8, 
        L2D6,   8, 
        L2D7,   8, 
        L2D8,   8, 
        L2D9,   8, 
        L2DA,   8, 
        L2DB,   8, 
        L2DV,   8, 
        L2CV,   8, 
        L2LU,   8, 
        L2NL,   8, 
        L2EE,   8, 
        L2VC,   8, 
        L2FS,   8, 
        L2LE,   8, 
        L2DG,   8, 
        L2CK,   32, 
        L2CL,   8, 
        L2PP,   8, 
        L2VR,   8, 
        L3SM,   8, 
        L3H0,   8, 
        L3H1,   8, 
        L3H2,   8, 
        L3H3,   8, 
        L3H4,   8, 
        L3H5,   8, 
        L3H6,   8, 
        L3H7,   8, 
        L3H8,   8, 
        L3PL,   8, 
        L3M0,   8, 
        L3M1,   8, 
        L3M2,   8, 
        L3M3,   8, 
        L3M4,   8, 
        L3M5,   8, 
        L3M6,   8, 
        L3M7,   8, 
        L3M8,   8, 
        L3M9,   8, 
        L3MA,   8, 
        L3MB,   8, 
        L3MC,   8, 
        L3MD,   8, 
        L3ME,   8, 
        L3MF,   8, 
        L3DI,   8, 
        L3BS,   8, 
        L3A0,   16, 
        L3A1,   16, 
        L3A2,   16, 
        L3A3,   16, 
        L3A4,   16, 
        L3A5,   16, 
        L3A6,   16, 
        L3A7,   16, 
        L3A8,   16, 
        L3A9,   16, 
        L3AA,   16, 
        L3AB,   16, 
        L3D0,   8, 
        L3D1,   8, 
        L3D2,   8, 
        L3D3,   8, 
        L3D4,   8, 
        L3D5,   8, 
        L3D6,   8, 
        L3D7,   8, 
        L3D8,   8, 
        L3D9,   8, 
        L3DA,   8, 
        L3DB,   8, 
        L3DV,   8, 
        L3CV,   8, 
        L3LU,   8, 
        L3NL,   8, 
        L3EE,   8, 
        L3VC,   8, 
        L3FS,   8, 
        L3LE,   8, 
        L3DG,   8, 
        L3CK,   32, 
        L3CL,   8, 
        L3PP,   8, 
        L3VR,   8, 
        Offset (0x672), 
        ECR1,   8, 
        I2SC,   8, 
        I2SI,   32, 
        I2SB,   8, 
        ODV0,   8, 
        ODV1,   8, 
        ODV2,   8, 
        ODV3,   8, 
        ODV4,   8, 
        ODV5,   8, 
        UBCB,   32, 
        Offset (0x688), 
        WIFC,   8, 
        Offset (0x690), 
        TPLT,   8, 
        TPLM,   8, 
        TPLB,   8, 
        TPLH,   16, 
        TPLS,   8, 
        TPDT,   8, 
        TPDM,   8, 
        TPDB,   8, 
        TPDH,   16, 
        TPDS,   8, 
        FPTT,   8, 
        FPTM,   8, 
        ADPM,   32, 
        AG1L,   64, 
        AG1H,   64, 
        AG2L,   64, 
        AG2H,   64, 
        AG3L,   64, 
        AG3H,   64, 
        HEFE,   8, 
        XDCE,   8, 
        STXE,   8, 
        ST10,   8, 
        ST11,   8, 
        ST12,   8, 
        ST13,   8, 
        ST14,   8, 
        ST15,   8, 
        ST16,   8, 
        ST17,   8, 
        ST18,   8, 
        ST19,   8, 
        ENVM,   8, 
        DHSP,   16, 
        DSSP,   16, 
        DSTP,   8, 
        WRFE,   8, 
        WRC1,   8, 
        WRC2,   8, 
        WRC3,   8, 
        WRC4,   8, 
        AWVI,   32, 
        STDE,   8, 
        STRS,   8, 
        ST20,   8, 
        ST21,   8, 
        ST22,   8, 
        ST23,   8, 
        ST24,   8, 
        ST25,   8, 
        ST26,   8, 
        ST27,   8, 
        ST28,   8, 
        ST29,   8, 
        ST30,   8, 
        ST31,   8, 
        ST32,   8, 
        ST33,   8, 
        ST34,   8, 
        ST35,   8, 
        ST36,   8, 
        ST37,   8, 
        ST38,   8, 
        ST39,   8, 
        ST40,   8, 
        ST41,   8, 
        ST42,   8, 
        ST43,   8, 
        ST44,   8, 
        ST45,   8, 
        ST46,   8, 
        ST47,   8, 
        ST48,   8, 
        ST49,   8, 
        SD11,   8, 
        SD12,   8, 
        SD13,   8, 
        SD14,   8, 
        SD15,   8, 
        SD16,   8, 
        SD21,   8, 
        SD22,   8, 
        SD23,   8, 
        SD24,   8, 
        SD25,   8, 
        SD26,   8, 
        SD31,   8, 
        SD32,   8, 
        SD33,   8, 
        SD34,   8, 
        SD35,   8, 
        SD36,   8, 
        Offset (0x732), 
        SDAA,   8, 
        SDAB,   8, 
        BTSE,   8, 
        BTBR,   8, 
        BED2,   8, 
        BED3,   8, 
        BTLE,   8, 
        Offset (0x73D), 
        COEM,   8, 
        RTVM,   8, 
        USTC,   8, 
        UTCE,   8, 
        HEB1,   32, 
        BATP,   8, 
        TSDB,   8, 
        Offset (0x749), 
        RBY1,   8, 
        RBY2,   8, 
        SCSS,   8, 
        NCTC,   8, 
        NCTI,   8, 
        NCTH,   8, 
        HSIO,   8, 
        ZPOD,   8, 
        RGBC,   8, 
        DPTC,   8, 
        SRSP,   32, 
        CEDS,   8, 
        EHK3,   8, 
        EHK4,   8, 
        EHK5,   8, 
        EHK6,   8, 
        EHK7,   8, 
        EHK8,   8, 
        VBVP,   8, 
        VBVD,   8, 
        VBHB,   8, 
        VBRL,   8, 
        SMSS,   8, 
        ADAS,   8, 
        PPBG,   32, 
        AEAB,   8, 
        AHDB,   8, 
        DPLL,   8, 
        DPHL,   8, 
        PWIG,   8, 
        AUPL,   32, 
        Offset (0x77D), 
        WTSP,   8, 
        ELPM,   32, 
        ELPS,   32, 
        WGWS,   8, 
        UCSI,   8, 
        UCG1,   32, 
        UCG2,   32, 
        UCG3,   32, 
        UCG4,   32, 
        Offset (0x7A7), 
        SRLD,   8, 
        TTUP,   8, 
        TP1T,   8, 
        TP1P,   8, 
        TP1D,   8, 
        TP2T,   8, 
        TP2P,   8, 
        TP2D,   8, 
        TP3T,   8, 
        TP3P,   8, 
        TP3D,   8, 
        TP4T,   8, 
        TP4P,   8, 
        TP4D,   8, 
        TP5T,   8, 
        TP5P,   8, 
        TP5D,   8, 
        TP6T,   8, 
        TP6P,   8, 
        TP6D,   8, 
        UDGF,   8, 
        UDUP,   8, 
        DBGF,   8, 
        DBUP,   8, 
        XSMI,   32, 
        GSEN,   8, 
        ATDV,   8, 
        BTL2,   8, 
        BTLL,   8, 
        POME,   8, 
        WRTO,   8, 
        PRST,   32, 
        WPRP,   8, 
        PUIS,   8, 
        WDCT,   16, 
        WLCT,   16, 
        WDC2,   16, 
        WMXS,   16, 
        WMNS,   16, 
        ESPC,   8, 
        UCRT,   8, 
        TJM1,   8, 
        STAS,   8, 
        SXI1,   8, 
        SXI2,   8, 
        SXP1,   8, 
        SXP2,   8, 
        WLGP,   32, 
        WLRP,   8
    }

    OperationRegion (NNVS, SystemMemory, 0x97825000, 0x0002)
    Field (NNVS, AnyAcc, Lock, Preserve)
    {
        NREV,   8, 
        TADW,   8
    }

    Scope (_SB)
    {
        Name (PD00, Package (0x25)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x0B
            }
        })
        Name (AR00, Package (0x35)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x10
            }
        })
        Name (PD04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0A
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0A
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0A
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_SEG, Zero)  // _SEG: PCI Segment
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00 ())
                }

                Return (PD00 ())
            }

            OperationRegion (HBUS, PCI_Config, Zero, 0x0100)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                Offset (0x48), 
                MHEN,   1, 
                    ,   14, 
                MHBR,   17, 
                Offset (0x50), 
                GCLK,   1, 
                Offset (0x54), 
                D0EN,   1, 
                D1F2,   1, 
                D1F1,   1, 
                D1F0,   1, 
                Offset (0x60), 
                PXEN,   1, 
                PXSZ,   2, 
                    ,   23, 
                PXBR,   6, 
                Offset (0x68), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                Offset (0x70), 
                    ,   20, 
                MEBR,   12, 
                Offset (0x80), 
                PMLK,   1, 
                    ,   3, 
                PM0H,   2, 
                Offset (0x81), 
                PM1L,   2, 
                    ,   2, 
                PM1H,   2, 
                Offset (0x82), 
                PM2L,   2, 
                    ,   2, 
                PM2H,   2, 
                Offset (0x83), 
                PM3L,   2, 
                    ,   2, 
                PM3H,   2, 
                Offset (0x84), 
                PM4L,   2, 
                    ,   2, 
                PM4H,   2, 
                Offset (0x85), 
                PM5L,   2, 
                    ,   2, 
                PM5H,   2, 
                Offset (0x86), 
                PM6L,   2, 
                    ,   2, 
                PM6H,   2, 
                Offset (0x87), 
                Offset (0xA8), 
                    ,   20, 
                TUUD,   19, 
                Offset (0xBC), 
                    ,   20, 
                TLUD,   12, 
                Offset (0xC8), 
                    ,   7, 
                HTSE,   1
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, _Y00)
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xDFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xE0000000,         // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000010000, // Range Minimum
                    0x000000000001FFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000010000, // Length
                    ,, _Y0F, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFC800000,         // Range Minimum
                    0xFE7FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x02000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Device (SRRE)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, "SARESV")  // _UID: Unique ID
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((TLUD >= 0x0404))
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x40000000,         // Address Base
                            0x00400000,         // Address Length
                            )
                    })
                    If ((TLUD >= 0x0404))
                    {
                        Return (BUF0) /* \_SB_.PCI0.SRRE._CRS.BUF0 */
                    }
                    Else
                    {
                        Return (Buffer (Zero){})
                    }
                }
            }

            Name (EP_B, Zero)
            Name (MH_B, Zero)
            Name (PC_B, Zero)
            Name (PC_L, Zero)
            Name (DM_B, Zero)
            Method (GEPB, 0, Serialized)
            {
                If ((EP_B == Zero))
                {
                    EP_B = (EPBR << 0x0C)
                }

                Return (EP_B) /* \_SB_.PCI0.EP_B */
            }

            Method (GMHB, 0, Serialized)
            {
                If ((MH_B == Zero))
                {
                    MH_B = (MHBR << 0x0F)
                }

                Return (MH_B) /* \_SB_.PCI0.MH_B */
            }

            Method (GPCB, 0, Serialized)
            {
                If ((PC_B == Zero))
                {
                    PC_B = (PXBR << 0x1A)
                }

                Return (PC_B) /* \_SB_.PCI0.PC_B */
            }

            Method (GPCL, 0, Serialized)
            {
                If ((PC_L == Zero))
                {
                    PC_L = (0x10000000 >> PXSZ) /* \_SB_.PCI0.PXSZ */
                }

                Return (PC_L) /* \_SB_.PCI0.PC_L */
            }

            Method (GDMB, 0, Serialized)
            {
                If ((DM_B == Zero))
                {
                    DM_B = (DIBR << 0x0C)
                }

                Return (DM_B) /* \_SB_.PCI0.DM_B */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Local0 = GPCL ()
                CreateWordField (BUF0, \_SB.PCI0._Y00._MAX, PBMX)  // _MAX: Maximum Base Address
                PBMX = ((Local0 >> 0x14) - 0x02)
                CreateWordField (BUF0, \_SB.PCI0._Y00._LEN, PBLN)  // _LEN: Length
                PBLN = ((Local0 >> 0x14) - One)
                If (PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y01._LEN, C0LN)  // _LEN: Length
                    C0LN = Zero
                }

                If ((PM1L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y01._RW, C0RW)  // _RW_: Read-Write Status
                    C0RW = Zero
                }

                If (PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y02._LEN, C4LN)  // _LEN: Length
                    C4LN = Zero
                }

                If ((PM1H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y02._RW, C4RW)  // _RW_: Read-Write Status
                    C4RW = Zero
                }

                If (PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y03._LEN, C8LN)  // _LEN: Length
                    C8LN = Zero
                }

                If ((PM2L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y03._RW, C8RW)  // _RW_: Read-Write Status
                    C8RW = Zero
                }

                If (PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y04._LEN, CCLN)  // _LEN: Length
                    CCLN = Zero
                }

                If ((PM2H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y04._RW, CCRW)  // _RW_: Read-Write Status
                    CCRW = Zero
                }

                If (PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y05._LEN, D0LN)  // _LEN: Length
                    D0LN = Zero
                }

                If ((PM3L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y05._RW, D0RW)  // _RW_: Read-Write Status
                    D0RW = Zero
                }

                If (PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y06._LEN, D4LN)  // _LEN: Length
                    D4LN = Zero
                }

                If ((PM3H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y06._RW, D4RW)  // _RW_: Read-Write Status
                    D4RW = Zero
                }

                If (PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y07._LEN, D8LN)  // _LEN: Length
                    D8LN = Zero
                }

                If ((PM4L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y07._RW, D8RW)  // _RW_: Read-Write Status
                    D8RW = Zero
                }

                If (PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y08._LEN, DCLN)  // _LEN: Length
                    DCLN = Zero
                }

                If ((PM4H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y08._RW, DCRW)  // _RW_: Read-Write Status
                    DCRW = Zero
                }

                If (PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y09._LEN, E0LN)  // _LEN: Length
                    E0LN = Zero
                }

                If ((PM5L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y09._RW, E0RW)  // _RW_: Read-Write Status
                    E0RW = Zero
                }

                If (PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0A._LEN, E4LN)  // _LEN: Length
                    E4LN = Zero
                }

                If ((PM5H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0A._RW, E4RW)  // _RW_: Read-Write Status
                    E4RW = Zero
                }

                If (PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0B._LEN, E8LN)  // _LEN: Length
                    E8LN = Zero
                }

                If ((PM6L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0B._RW, E8RW)  // _RW_: Read-Write Status
                    E8RW = Zero
                }

                If (PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0C._LEN, ECLN)  // _LEN: Length
                    ECLN = Zero
                }

                If ((PM6H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0C._RW, ECRW)  // _RW_: Read-Write Status
                    ECRW = Zero
                }

                If (PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0D._LEN, F0LN)  // _LEN: Length
                    F0LN = Zero
                }

                If ((PM0H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0D._RW, F0RW)  // _RW_: Read-Write Status
                    F0RW = Zero
                }

                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._LEN, M1LN)  // _LEN: Length
                M1LN = M32L /* External reference */
                M1MN = M32B /* External reference */
                M1MX = ((M1MN + M1LN) - One)
                If ((M64L == Zero))
                {
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._LEN, MSLN)  // _LEN: Length
                    MSLN = Zero
                }
                Else
                {
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._LEN, M2LN)  // _LEN: Length
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._MIN, M2MN)  // _MIN: Minimum Base Address
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._MAX, M2MX)  // _MAX: Maximum Base Address
                    M2LN = M64L /* External reference */
                    M2MN = M64B /* External reference */
                    M2MX = ((M2MN + M2LN) - One)
                }

                Return (BUF0) /* \_SB_.PCI0.BUF0 */
            }

            Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Name (XCNT, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg3
                CreateDWordField (Local0, Zero, CDW1)
                CreateDWordField (Local0, 0x04, CDW2)
                CreateDWordField (Local0, 0x08, CDW3)
                If ((Arg0 == GUID))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (!NEXP)
                    {
                        CTRL &= 0xFFFFFFF8
                    }

                    If (CondRefOf (TBTS))
                    {
                        If ((TBTS == One))
                        {
                            CTRL &= 0xFFFFFFF7
                        }
                    }

                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One))
                        {
                            NHPG ()
                        }

                        If ((CTRL & 0x04))
                        {
                            NPME ()
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    OSCC = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Local0)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Local0)
                }
            }

            Scope (\_SB.PCI0)
            {
                Method (AR00, 0, NotSerialized)
                {
                    Return (^^AR00) /* \_SB_.AR00 */
                }

                Method (PD00, 0, NotSerialized)
                {
                    Return (^^PD00) /* \_SB_.PD00 */
                }

                Method (AR02, 0, NotSerialized)
                {
                    Return (^^AR02) /* \_SB_.AR02 */
                }

                Method (PD02, 0, NotSerialized)
                {
                    Return (^^PD02) /* \_SB_.PD02 */
                }

                Method (AR04, 0, NotSerialized)
                {
                    Return (^^AR04) /* \_SB_.AR04 */
                }

                Method (PD04, 0, NotSerialized)
                {
                    Return (^^PD04) /* \_SB_.PD04 */
                }

                Method (AR05, 0, NotSerialized)
                {
                    Return (^^AR05) /* \_SB_.AR05 */
                }

                Method (PD05, 0, NotSerialized)
                {
                    Return (^^PD05) /* \_SB_.PD05 */
                }

                Method (AR06, 0, NotSerialized)
                {
                    Return (^^AR06) /* \_SB_.AR06 */
                }

                Method (PD06, 0, NotSerialized)
                {
                    Return (^^PD06) /* \_SB_.PD06 */
                }

                Method (AR07, 0, NotSerialized)
                {
                    Return (^^AR07) /* \_SB_.AR07 */
                }

                Method (PD07, 0, NotSerialized)
                {
                    Return (^^PD07) /* \_SB_.PD07 */
                }

                Method (AR08, 0, NotSerialized)
                {
                    Return (^^AR08) /* \_SB_.AR08 */
                }

                Method (PD08, 0, NotSerialized)
                {
                    Return (^^PD08) /* \_SB_.PD08 */
                }

                Method (AR09, 0, NotSerialized)
                {
                    Return (^^AR09) /* \_SB_.AR09 */
                }

                Method (PD09, 0, NotSerialized)
                {
                    Return (^^PD09) /* \_SB_.PD09 */
                }

                Method (AR0A, 0, NotSerialized)
                {
                    Return (^^AR0A) /* \_SB_.AR0A */
                }

                Method (PD0A, 0, NotSerialized)
                {
                    Return (^^PD0A) /* \_SB_.PD0A */
                }

                Method (AR0B, 0, NotSerialized)
                {
                    Return (^^AR0B) /* \_SB_.AR0B */
                }

                Method (PD0B, 0, NotSerialized)
                {
                    Return (^^PD0B) /* \_SB_.PD0B */
                }

                Device (PEG1)
                {
                    Name (_ADR, 0x00010001)  // _ADR: Address
                    Device (PEGP)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }
                }

                Device (PEG2)
                {
                    Name (_ADR, 0x00010002)  // _ADR: Address
                    Device (PEGP)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }
                }

                Device (B0D4)
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Name (_ADR, 0x00040000)  // _ADR: Address
                }

                Device (IPU0)
                {
                    Name (_ADR, 0x00050000)  // _ADR: Address
                }
            }

            Event (^G027)
            Event (^G009)
            Device (GFX0)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (PCIG, PCI_Config, Zero, 0x02)
                Field (PCIG, WordAcc, NoLock, Preserve)
                {
                    GVID,   16
                }

                Name (DODC, Zero)
                Name (INIM, Zero)
                Name (G019, Package (0x09)
                {
                    0x0400, 
                    0x0100, 
                    0x0200, 
                    0x0300, 
                    0x0301, 
                    0x0302, 
                    0x0303, 
                    0x0304, 
                    0x0305
                })
                Name (DSPR, Buffer (0x09)
                {
                    /* 0000 */  0x00, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x01,  // ........
                    /* 0008 */  0x02                                             // .
                })
                Name (DODS, Package (0x09)
                {
                    Package (0x01)
                    {
                        0xFFFFFFFF
                    }, 

                    Package (0x01)
                    {
                        0xFFFFFFFF
                    }, 

                    Package (0x02)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    }, 

                    Package (0x03)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    }, 

                    Package (0x04)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    }, 

                    Package (0x05)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    }, 

                    Package (0x06)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    }, 

                    Package (0x07)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    }, 

                    Package (0x08)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    }
                })
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    INIM = One
                    G026 ()
                    G08F = Zero
                    G090 = Zero
                    G091 = Zero
                }

                Method (HDOS, 1, NotSerialized)
                {
                    Local0 = (G08E & 0xF8)
                    Local1 = (G08E & 0x87)
                    G08E = (Local0 | Arg0)
                    If (CondRefOf (^G007))
                    {
                        G007 (Arg0, Local1)
                    }
                }

                Method (HDOD, 0, NotSerialized)
                {
                    Local1 = One
                    If ((TCHE & 0x02))
                    {
                        Local1 = 0x03
                    }

                    G08D |= Local1
                }

                Method (G021, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F0F)
                    If ((Zero == Local0))
                    {
                        Return (Zero)
                    }

                    If ((CPDL == Local0))
                    {
                        Return (One)
                    }

                    If ((CPL2 == Local0))
                    {
                        Return (One)
                    }

                    If ((CPL3 == Local0))
                    {
                        Return (One)
                    }

                    If ((CPL4 == Local0))
                    {
                        Return (One)
                    }

                    If ((CPL5 == Local0))
                    {
                        Return (One)
                    }

                    If ((CPL6 == Local0))
                    {
                        Return (One)
                    }

                    If ((CPL7 == Local0))
                    {
                        Return (One)
                    }

                    If ((CPL8 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (G025, 2, Serialized)
                {
                    If ((Arg0 == Zero))
                    {
                        Local1 = NADL /* External reference */
                        NADL = Arg1
                    }

                    If ((Arg0 == One))
                    {
                        Local1 = NDL2 /* External reference */
                        NDL2 = Arg1
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local1 = NDL3 /* External reference */
                        NDL3 = Arg1
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local1 = NDL4 /* External reference */
                        NDL4 = Arg1
                    }

                    If ((Arg0 == 0x04))
                    {
                        Local1 = NDL5 /* External reference */
                        NDL5 = Arg1
                    }

                    If ((Arg0 == 0x05))
                    {
                        Local1 = NDL6 /* External reference */
                        NDL6 = Arg1
                    }

                    If ((Arg0 == 0x06))
                    {
                        Local1 = NDL7 /* External reference */
                        NDL7 = Arg1
                    }

                    If ((Arg0 == 0x07))
                    {
                        Local1 = NDL8 /* External reference */
                        NDL8 = Arg1
                    }

                    Return (Local1)
                }

                Method (G024, 0, Serialized)
                {
                    Local1 = Zero
                    While ((Local1 < SizeOf (G019)))
                    {
                        Local0 = (One << Local1)
                        Local2 = DerefOf (G019 [Local1])
                        If (G021 (Local2))
                        {
                            G090 |= Local0
                        }
                        Else
                        {
                            G090 &= ~Local0
                        }

                        If ((CDDS (Local2) == 0x1F))
                        {
                            G08F |= Local0
                        }
                        Else
                        {
                            G08F &= ~Local0
                        }

                        Local1++
                    }
                }

                Method (G023, 0, Serialized)
                {
                    Local1 = G091 /* \G091 */
                    Local0 = Zero
                    Local2 = Zero
                    While (((Local0 < SizeOf (DSPR)) && Local1))
                    {
                        Local3 = DerefOf (DSPR [Local0])
                        Local4 = (One << Local3)
                        If ((Local1 & Local4))
                        {
                            Local5 = DerefOf (G019 [Local3])
                            G025 (Local2, Local5)
                            Local2++
                            Local1 &= ~Local4
                        }

                        If ((Local2 >= 0x02))
                        {
                            Break
                        }

                        Local0++
                    }

                    G091 ^= Local1
                    Local1 = One
                    While (((Local2 < 0x08) && Local1))
                    {
                        Local1 = G025 (Local2, Zero)
                        Local2++
                    }
                }

                Method (G02D, 1, Serialized)
                {
                    If (Arg0){}
                    G024 ()
                    If ((G08F == One))
                    {
                        G091 = (G090 | One)
                    }
                    ElseIf ((G08F & One))
                    {
                        G091 = (G090 & 0xFFFFFFFFFFFFFFFE)
                    }
                    Else
                    {
                        G091 = One
                    }

                    G023 ()
                    Signal (G009)
                    GHDS (Zero)
                    Return (One)
                }

                Method (G026, 0, NotSerialized)
                {
                    If ((GIVD == Zero))
                    {
                        Local0 = DCKD ()
                        GDCK (Local0)
                    }

                    Return (Zero)
                }

                Method (G01B, 1, Serialized)
                {
                    If (Arg0)
                    {
                        G024 ()
                    }
                    Else
                    {
                        Local0 = Wait (G009, 0x0500)
                        If ((Local0 != Zero)){}
                    }
                }

                Method (G01D, 0, Serialized)
                {
                    G023 ()
                    GHDS (Zero)
                }

                Method (G01F, 0, Serialized)
                {
                    If (((G08D & 0x02) == Zero))
                    {
                        If ((TCHE & 0x02))
                        {
                            G08D |= 0x02
                        }
                    }

                    Local3 = (G08D & 0x02)
                    If (Local3)
                    {
                        Local1 = G02B ()
                        Local1 |= 0x80000000
                        AINT (One, Local1)
                    }

                    Return (Local3)
                }

                Scope (\_GPE)
                {
                    Method (_L66, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                    {
                        If ((\_SB.PCI0.GFX0.GIVD == Zero))
                        {
                            If ((\_SB.PCI0.GFX0.GSSE && !GSMI))
                            {
                                \_SB.PCI0.GFX0.GSCI ()
                            }
                            Else
                            {
                                SCIS = One
                            }
                        }
                    }

                    Name (G010, 0xFF)
                    Method (G011, 1, NotSerialized)
                    {
                        If ((\_SB.PCI0.GFX0.GIVD == Zero))
                        {
                            If ((Arg0 || (G090 != G010)))
                            {
                                G010 = G090 /* \G090 */
                                If ((GTOS () >= 0x04))
                                {
                                    Notify (\_SB.PCI0, Zero) // Bus Check
                                }
                                Else
                                {
                                    Notify (\_SB.PCI0.GFX0, Zero) // Bus Check
                                }

                                Sleep (0x02EE)
                            }
                        }
                    }

                    Method (G00C, 3, Serialized)
                    {
                        If ((G045 != Zero))
                        {
                            Return (One)
                        }

                        If (\_SB.PCI0.GFX0.GIVD)
                        {
                            Return (One)
                        }

                        Switch (ToInteger (Arg2))
                        {
                            Case (One)
                            {
                                If ((Arg0 & 0x80))
                                {
                                    Notify (\_SB.PCI0.GFX0.DD1F, Arg0)
                                }
                                ElseIf (((G08E & 0x44) == Zero))
                                {
                                    \_SB.PCI0.GFX0.G01F ()
                                }
                            }
                            Case (0x02)
                            {
                                \_SB.PCI0.GFX0.G005 (One)
                                If (((G08E & 0x03) == Zero))
                                {
                                    If ((G08D & One))
                                    {
                                        \_SB.PCI0.GFX0.G026 ()
                                    }
                                    Else
                                    {
                                        \_SB.SSMI (0xEA74, 0x06, Zero, Zero, Zero)
                                        G011 (Zero)
                                        Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
                                    }
                                }
                            }
                            Case (0x03)
                            {
                                \_SB.PCI0.GFX0.CLID = \_SB.LID._LID ()
                                If (((GTOS () < 0x06) || ((G08E & 0x03) == Zero)))
                                {
                                    If ((G08D & One))
                                    {
                                        If (\_SB.PCI0.GFX0.GLID (\_SB.LID._LID ()))
                                        {
                                            \_SB.PCI0.GFX0.CLID |= 0x80000000 /* External reference */
                                        }
                                    }
                                    Else
                                    {
                                        \_SB.SSMI (0xEA74, 0x05, Zero, Zero, Zero)
                                        G011 (One)
                                        Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
                                        If ((GTOS () < 0x06))
                                        {
                                            G00E = Zero
                                        }
                                    }
                                }
                            }
                            Case (0x04)
                            {
                                If (((G08E & 0x03) == Zero))
                                {
                                    If ((G08D & One))
                                    {
                                        \_SB.PCI0.GFX0.G02D (Zero)
                                    }
                                    Else
                                    {
                                        G011 (Zero)
                                        Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If (((Arg0 == One) && (Arg1 == Zero))){}
                            }
                            Case (0x06)
                            {
                                If ((G08D & One))
                                {
                                    \_SB.PCI0.GFX0.G01D ()
                                }
                                Else
                                {
                                    G011 (Zero)
                                    Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
                                }
                            }
                            Case (0x07)
                            {
                                \_SB.PCI0.GFX0.G01B (Arg0)
                            }
                            Case (0x08)
                            {
                                If ((Arg0 == 0x04))
                                {
                                    \_SB.PCI0.GFX0.GLID (\_SB.LID._LID ())
                                    \_SB.PCI0.GFX0.G026 ()
                                }

                                If ((Arg0 >= 0x03))
                                {
                                    If (((G08E & 0x44) == Zero))
                                    {
                                        Local0 = \_SB.G02B ()
                                        \_SB.PCI0.GFX0.BCLP = (Local0 | 0x80000000)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (((G08E & 0x04) == Zero))
                                {
                                    \_SB.PCI0.GFX0.G01F ()
                                }
                            }
                            Case (0x0A)
                            {
                                If (CondRefOf (\_SB.PCI0.GFX0.G030))
                                {
                                    \_SB.PCI0.GFX0.G030 ()
                                }
                            }

                        }

                        Return (Zero)
                    }
                }

                Scope (\_GPE)
                {
                    Method (G001, 1, Serialized)
                    {
                        Local1 = One
                        If (Local1)
                        {
                            Local1 = G00C (Arg0, Zero, One)
                        }
                    }

                    Method (G012, 0, Serialized)
                    {
                        Signal (\_SB.G009)
                        Local1 = One
                        If (Local1)
                        {
                            Local1 = G00C (Zero, Zero, 0x04)
                        }
                    }

                    Method (G013, 0, Serialized)
                    {
                        Local1 = One
                        If (Local1)
                        {
                            Local1 = G00C (Zero, Zero, 0x02)
                        }
                    }

                    Name (G00E, One)
                    Method (G014, 0, Serialized)
                    {
                        G00E = One
                        G06C = 0x77
                        Local1 = One
                        If (Local1)
                        {
                            Local1 = G00C (Zero, Zero, 0x03)
                        }

                        Return (G00E) /* \_GPE.G00E */
                    }

                    Method (G015, 2, Serialized)
                    {
                        Local1 = One
                        If (Local1)
                        {
                            Local1 = G00C (Arg0, Arg1, 0x05)
                        }
                    }

                    Method (G016, 0, Serialized)
                    {
                        Local1 = One
                        If (Local1)
                        {
                            Local1 = G00C (Zero, Zero, 0x0A)
                        }
                    }
                }

                Scope (\_SB)
                {
                    Method (G004, 1, Serialized)
                    {
                        If ((G08D & 0x04))
                        {
                            Return (0xFFFF)
                        }
                        Else
                        {
                            If (((G08E & 0x03) == Zero))
                            {
                                G091 = Arg0
                                Local1 = One
                                If (Local1)
                                {
                                    Local1 = \_GPE.G00C (Arg0, Zero, 0x06)
                                }
                            }

                            Return (Zero)
                        }

                        Return (Zero)
                    }

                    Method (G003, 1, Serialized)
                    {
                        If (((G08D & 0x04) && Arg0))
                        {
                            Return (0xFFFF)
                        }
                        Else
                        {
                            If ((G08D & One))
                            {
                                If ((Arg0 == Zero))
                                {
                                    Local0 = Wait (G009, 0x0500)
                                    If ((Local0 != Zero)){}
                                }

                                Local1 = One
                                If (Local1)
                                {
                                    Local1 = \_GPE.G00C (Arg0, Zero, 0x07)
                                }
                            }
                            ElseIf (Arg0)
                            {
                                SSMI (0xEA74, 0x02, Zero, Zero, Zero)
                            }

                            Return (G090) /* \G090 */
                        }
                    }

                    Method (G002, 1, Serialized)
                    {
                        Local1 = One
                        If (Local1)
                        {
                            Local1 = \_GPE.G00C (Arg0, Zero, 0x08)
                        }
                    }

                    Method (G09F, 0, NotSerialized)
                    {
                        Local1 = One
                        If (Local1)
                        {
                            Local1 = \_GPE.G00C (Zero, Zero, 0x09)
                        }
                    }
                }

                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If ((INIM == One))
                    {
                        GLID (^^^LID._LID ())
                        INIM = Zero
                    }
                }

                Device (DD1F)
                {
                    Method (_BCL, 0, Serialized)  // _BCL: Brightness Control Levels
                    {
                        If ((ILUX == One))
                        {
                            Return (BCL ())
                        }
                        ElseIf ((GTOS () <= 0x07))
                        {
                            Return (BCL ())
                        }
                        Else
                        {
                            Return (Package (0x67)
                            {
                                0x50, 
                                0x32, 
                                Zero, 
                                One, 
                                0x02, 
                                0x03, 
                                0x04, 
                                0x05, 
                                0x06, 
                                0x07, 
                                0x08, 
                                0x09, 
                                0x0A, 
                                0x0B, 
                                0x0C, 
                                0x0D, 
                                0x0E, 
                                0x0F, 
                                0x10, 
                                0x11, 
                                0x12, 
                                0x13, 
                                0x14, 
                                0x15, 
                                0x16, 
                                0x17, 
                                0x18, 
                                0x19, 
                                0x1A, 
                                0x1B, 
                                0x1C, 
                                0x1D, 
                                0x1E, 
                                0x1F, 
                                0x20, 
                                0x21, 
                                0x22, 
                                0x23, 
                                0x24, 
                                0x25, 
                                0x26, 
                                0x27, 
                                0x28, 
                                0x29, 
                                0x2A, 
                                0x2B, 
                                0x2C, 
                                0x2D, 
                                0x2E, 
                                0x2F, 
                                0x30, 
                                0x31, 
                                0x32, 
                                0x33, 
                                0x34, 
                                0x35, 
                                0x36, 
                                0x37, 
                                0x38, 
                                0x39, 
                                0x3A, 
                                0x3B, 
                                0x3C, 
                                0x3D, 
                                0x3E, 
                                0x3F, 
                                0x40, 
                                0x41, 
                                0x42, 
                                0x43, 
                                0x45, 
                                0x45, 
                                0x46, 
                                0x47, 
                                0x48, 
                                0x49, 
                                0x4A, 
                                0x4B, 
                                0x4C, 
                                0x4D, 
                                0x4E, 
                                0x4F, 
                                0x50, 
                                0x51, 
                                0x52, 
                                0x53, 
                                0x54, 
                                0x55, 
                                0x56, 
                                0x57, 
                                0x58, 
                                0x59, 
                                0x5A, 
                                0x5B, 
                                0x5C, 
                                0x5D, 
                                0x5E, 
                                0x5F, 
                                0x60, 
                                0x61, 
                                0x62, 
                                0x63, 
                                0x64
                            })
                        }
                    }

                    Method (_BCM, 1, Serialized)  // _BCM: Brightness Control Method
                    {
                        Local0 = BCM (Arg0)
                        If (Local0)
                        {
                            If ((G045 == Zero))
                            {
                                If (CondRefOf (\_SB.PCI0.GFX0.G01F))
                                {
                                    If ((G01F () == Zero)){}
                                }
                            }
                            Else
                            {
                            }

                            Signal (G027)
                        }
                    }

                    Method (_BQC, 0, Serialized)  // _BQC: Brightness Query Current
                    {
                        Return (BQC ())
                    }
                }

                Name (G006, 0xFF)
                Method (G005, 1, Serialized)
                {
                    If ((Arg0 && (G006 == 0xFF)))
                    {
                        Local0 = 0x07
                        If (DCKD ())
                        {
                            Local0 |= 0x08
                        }

                        G006 = Local0
                    }

                    Return (G006) /* \_SB_.PCI0.GFX0.G006 */
                }

                Method (G007, 2, NotSerialized)
                {
                }
            }

            Device (PEG0)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Device (PEGP)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }
        }

        Name (NBTI, Package (0x02)
        {
            Package (0x0D)
            {
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                Zero, 
                Zero, 
                0x64, 
                0x64, 
                "Primary", 
                "100000", 
                "LIon", 
                "Hewlett-Packard"
            }, 

            Package (0x0D)
            {
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                Zero, 
                Zero, 
                0x64, 
                0x64, 
                "Travel", 
                "100000", 
                "LIon", 
                "Hewlett-Packard"
            }
        })
        Name (NBST, Package (0x02)
        {
            Package (0x04)
            {
                Zero, 
                Zero, 
                0x0FA0, 
                0x04B0
            }, 

            Package (0x04)
            {
                Zero, 
                Zero, 
                0x0FA0, 
                0x04B0
            }
        })
        Name (NDBS, Package (0x04)
        {
            Zero, 
            Zero, 
            0x0FA0, 
            0x04B0
        })
        Name (ACST, One)
        Name (SMAR, Zero)
        Name (BT0P, 0x0F)
        Method (BTIF, 1, Serialized)
        {
            Local0 = ^PCI0.LPCB.EC0.BTIF (Arg0)
            If ((Local0 == 0xFF))
            {
                Return (Package (0x0D)
                {
                    Zero, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    One, 
                    0xFFFFFFFF, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    "", 
                    "", 
                    "", 
                    Zero
                })
            }
            Else
            {
                Return (DerefOf (NBTI [Arg0]))
            }
        }

        Method (BTST, 1, Serialized)
        {
            Local0 = ^PCI0.LPCB.EC0.BTST (Arg0, One)
            Return (DerefOf (NBST [Arg0]))
        }

        Device (BAT0)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = ^^PCI0.LPCB.EC0.BSTA (One)
                If ((BT0P ^ Local0))
                {
                    BT0P = Local0
                    Local1 = Local0
                    If ((Local1 != 0x1F))
                    {
                        Local1 = Zero
                    }

                    SSMI (0xEA3A, Zero, Local1, Zero, Zero)
                }

                Return (Local0)
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                Return (BTIF (Zero))
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                Return (BTST (Zero))
            }

            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
        }

        Device (BAT1)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                Return (BTIF (One))
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                Return (BTST (One))
            }

            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
        }

        Device (AC)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                Local0 = ^^PCI0.LPCB.EC0.GACS ()
                PWRS = Local0
                Local1 = ^^PCI0.LPCB.EC0.GPID ()
                If ((Local0 ^ ACST)){}
                If (((Local0 && !ACST) || (Local1 && !SMAR)))
                {
                    ^^WMIV.GVWE (0x03, Zero)
                }

                ACST = Local0
                SMAR = Local1
                Return (Local0)
            }
        }

        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
        }

        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Local0 = One
                If (CondRefOf (\_SB.PCI0.LPCB.EC0.EC10))
                {
                    Local0 = ^^PCI0.LPCB.EC0.EC10 ()
                }

                Return (Local0)
            }
        }

        Mutex (LDPS, 0x00)
        Mutex (LEXD, 0x00)
        Name (EDDA, Zero)
        OperationRegion (LDPT, SystemIO, 0x80, One)
        Field (LDPT, ByteAcc, NoLock, Preserve)
        {
            LPDG,   8
        }

        OperationRegion (LDBP, SystemIO, 0x024E, 0x02)
        Field (LDBP, ByteAcc, NoLock, Preserve)
        {
            LLPD,   8, 
            LUPD,   8
        }

        Method (ODBB, 2, Serialized)
        {
            Acquire (LDPS, 0xFFFF)
            LLPD = (Arg0 & 0xFF)
            If ((Arg1 >= 0x02))
            {
                LUPD = ((Arg0 >> 0x08) & 0xFF)
            }

            Release (LDPS)
            Acquire (LDPS, 0xFFFF)
            LPDG = (Arg0 & 0xFF)
            Release (LDPS)
            Return (Zero)
        }

        Method (ODBG, 1, NotSerialized)
        {
            ODBB (Arg0, One)
            Return (Zero)
        }

        Method (ODG1, 1, NotSerialized)
        {
            Acquire (LDPS, 0xFFFF)
            LUPD = Arg0
            Release (LDPS)
            Return (Zero)
        }

        Method (ODGW, 1, NotSerialized)
        {
            ODBB (Arg0, 0x02)
            Return (Zero)
        }

        Method (ODGD, 1, NotSerialized)
        {
            ODBB (Arg0, 0x03)
            Return (Zero)
        }

        Method (EODB, 0, Serialized)
        {
            Acquire (LEXD, 0xFFFF)
            ODBG (EDDA)
            Release (LEXD)
        }

        Method (EODW, 0, Serialized)
        {
            Acquire (LEXD, 0xFFFF)
            ODGW (EDDA)
            Release (LEXD)
        }

        Method (EODD, 0, Serialized)
        {
            Acquire (LEXD, 0xFFFF)
            ODGD (EDDA)
            Release (LEXD)
        }

        Device (HTAM)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0xF3000005)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Return (ResourceTemplate ()
                {
                    Memory32Fixed (ReadOnly,
                        0xFED40000,         // Address Base
                        0x00005000,         // Address Length
                        )
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CondRefOf (\_SB.TPM._STA))
                {
                    Local0 = Zero
                }
                Else
                {
                    Local0 = 0x0F
                }

                Return (Local0)
            }
        }

        Scope (\_SB)
        {
            Device (PWRB)
            {
                Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0B)
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (AWAC)
        {
            Name (_HID, "ACPI000E" /* Time and Alarm Device */)  // _HID: Hardware ID
            Name (WAST, Zero)
            Name (WTTR, Zero)
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x72, 0x04))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((STAS == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_GCP, 0, NotSerialized)  // _GCP: Get Capabilities
            {
                Return (0xB7)
            }

            OperationRegion (RTCM, SystemCMOS, Zero, 0x3F)
            Field (RTCM, ByteAcc, Lock, Preserve)
            {
                SEC,    8, 
                Offset (0x02), 
                MIN,    8, 
                Offset (0x04), 
                HOR,    8, 
                Offset (0x07), 
                DAY,    8, 
                MON,    8, 
                YEAR,   8, 
                Offset (0x32), 
                CNTY,   8
            }

            Method (_GRT, 0, NotSerialized)  // _GRT: Get Real Time
            {
                Local0 = Buffer (0x10){}
                CreateWordField (Local0, Zero, Y)
                CreateByteField (Local0, 0x02, M)
                CreateByteField (Local0, 0x03, D)
                CreateByteField (Local0, 0x04, H)
                CreateByteField (Local0, 0x05, MIN1)
                CreateByteField (Local0, 0x06, S)
                CreateByteField (Local0, 0x07, V)
                CreateWordField (Local0, 0x0A, TZ)
                CreateByteField (Local0, 0x0C, DL)
                FromBCD (YEAR, Local5)
                FromBCD (CNTY, Local6)
                Y = ((Local6 * 0x64) + Local5)
                FromBCD (MON, M) /* \_SB_.AWAC._GRT.M___ */
                FromBCD (DAY, D) /* \_SB_.AWAC._GRT.D___ */
                FromBCD (HOR, H) /* \_SB_.AWAC._GRT.H___ */
                FromBCD (MIN, MIN1) /* \_SB_.AWAC._GRT.MIN1 */
                FromBCD (SEC, S) /* \_SB_.AWAC._GRT.S___ */
                TZ = 0x07FF
                DL = Zero
                V = One
                Return (Local0)
            }

            Method (_SRT, 1, NotSerialized)  // _SRT: Set Real Time
            {
                CreateWordField (Arg0, Zero, Y)
                CreateByteField (Arg0, 0x02, M)
                CreateByteField (Arg0, 0x03, D)
                CreateByteField (Arg0, 0x04, H)
                CreateByteField (Arg0, 0x05, MIN1)
                CreateByteField (Arg0, 0x06, S)
                Divide (Y, 0x64, Local5, Local4)
                ToBCD (Local4, CNTY) /* \_SB_.AWAC.CNTY */
                ToBCD (Local5, YEAR) /* \_SB_.AWAC.YEAR */
                ToBCD (M, MON) /* \_SB_.AWAC.MON_ */
                ToBCD (D, DAY) /* \_SB_.AWAC.DAY_ */
                ToBCD (H, HOR) /* \_SB_.AWAC.HOR_ */
                ToBCD (MIN1, MIN) /* \_SB_.AWAC.MIN_ */
                ToBCD (S, SEC) /* \_SB_.AWAC.SEC_ */
                Return (Zero)
            }

            Method (_GWS, 1, Serialized)  // _GWS: Get Wake Status
            {
                Local0 = Zero
                If ((Arg0 == Zero))
                {
                    If (((ACWA == 0xFFFFFFFF) && (One & WTTR)))
                    {
                        Local0 |= One
                        WTTR ^= One /* \_SB_.AWAC.WTTR */
                    }
                }
                ElseIf (((DCWA == 0xFFFFFFFF) && (0x02 & WTTR)))
                {
                    Local0 |= One
                    WTTR ^= 0x02 /* \_SB_.AWAC.WTTR */
                }

                If (WAST)
                {
                    Local0 |= 0x02
                    WAST = Zero
                }

                Return (Local0)
            }

            Method (_CWS, 1, NotSerialized)  // _CWS: Clear Wake Alarm Status
            {
                Return (Zero)
            }

            Method (_STP, 2, NotSerialized)  // _STP: Set Expired Timer Wake Policy
            {
                If ((Arg0 == Zero))
                {
                    ACET = Arg1
                }
                Else
                {
                    DCET = Arg1
                }

                Return (Zero)
            }

            Method (_STV, 2, Serialized)  // _STV: Set Timer Value
            {
                If ((Arg0 == Zero))
                {
                    ACWA = Arg1
                    WTTR |= One /* \_SB_.AWAC.WTTR */
                }
                Else
                {
                    DCWA = Arg1
                    WTTR |= 0x02 /* \_SB_.AWAC.WTTR */
                }

                Return (Zero)
            }

            Method (_TIP, 1, NotSerialized)  // _TIP: Expired Timer Wake Policy
            {
                If ((Arg0 == Zero))
                {
                    Return (ACET) /* \ACET */
                }
                Else
                {
                    Return (DCET) /* \DCET */
                }
            }

            Method (_TIV, 1, NotSerialized)  // _TIV: Timer Values
            {
                If ((Arg0 == Zero))
                {
                    Return (ACWA) /* \ACWA */
                }
                Else
                {
                    Return (DCWA) /* \DCWA */
                }
            }
        }
    }

    If ((ECR1 == One))
    {
        Scope (_SB.PCI0)
        {
            Name (PCIG, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */)
            Method (PCID, 4, Serialized)
            {
                If ((Arg0 == PCIG))
                {
                    If ((Arg1 >= 0x03))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0x01, 0x03                                       // ..
                            })
                        }

                        If ((Arg2 == 0x08))
                        {
                            Return (One)
                        }

                        If ((Arg2 == 0x09))
                        {
                            Return (Package (0x05)
                            {
                                0xC350, 
                                Ones, 
                                Ones, 
                                0xC350, 
                                Ones
                            })
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (PCIC, 1, Serialized)
        {
            If ((ECR1 == One))
            {
                If ((Arg0 == PCIG))
                {
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (IICB, 2, Serialized)
        {
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Name (IIC0, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                            0x00, ResourceConsumer, _Y10, Exclusive,
                            )
                    })
                    CreateWordField (IIC0, \_SB.PCI0.IICB._Y10._ADR, DAD0)  // _ADR: Address
                    DAD0 = Arg0
                    Return (IIC0) /* \_SB_.PCI0.IICB.IIC0 */
                }
                Case (One)
                {
                    Name (IIC1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                            0x00, ResourceConsumer, _Y11, Exclusive,
                            )
                    })
                    CreateWordField (IIC1, \_SB.PCI0.IICB._Y11._ADR, DAD1)  // _ADR: Address
                    DAD1 = Arg0
                    Return (IIC1) /* \_SB_.PCI0.IICB.IIC1 */
                }
                Case (0x02)
                {
                    Name (IIC2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                            0x00, ResourceConsumer, _Y12, Exclusive,
                            )
                    })
                    CreateWordField (IIC2, \_SB.PCI0.IICB._Y12._ADR, DAD2)  // _ADR: Address
                    DAD2 = Arg0
                    Return (IIC2) /* \_SB_.PCI0.IICB.IIC2 */
                }
                Case (0x03)
                {
                    Name (IIC3, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C3",
                            0x00, ResourceConsumer, _Y13, Exclusive,
                            )
                    })
                    CreateWordField (IIC3, \_SB.PCI0.IICB._Y13._ADR, DAD3)  // _ADR: Address
                    DAD3 = Arg0
                    Return (IIC3) /* \_SB_.PCI0.IICB.IIC3 */
                }
                Case (0x04)
                {
                    Name (IIC4, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                            0x00, ResourceConsumer, _Y14, Exclusive,
                            )
                    })
                    CreateWordField (IIC4, \_SB.PCI0.IICB._Y14._ADR, DAD4)  // _ADR: Address
                    DAD4 = Arg0
                    Return (IIC4) /* \_SB_.PCI0.IICB.IIC4 */
                }
                Case (0x05)
                {
                    Name (IIC5, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C5",
                            0x00, ResourceConsumer, _Y15, Exclusive,
                            )
                    })
                    CreateWordField (IIC5, \_SB.PCI0.IICB._Y15._ADR, DAD5)  // _ADR: Address
                    DAD5 = Arg0
                    Return (IIC5) /* \_SB_.PCI0.IICB.IIC5 */
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Method (INTB, 3, Serialized)
        {
            Name (INTR, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y16)
                {
                    0x00000000,
                }
            })
            CreateDWordField (INTR, \_SB.PCI0.INTB._Y16._INT, NUMI)  // _INT: Interrupts
            NUMI = INUM (Arg0)
            CreateBitField (INTR, \_SB.PCI0.INTB._Y16._HE, LEVI)  // _HE_: High-Edge
            LEVI = Arg1
            CreateBitField (INTR, \_SB.PCI0.INTB._Y16._LL, ACTI)  // _LL_: Low Level
            ACTI = Arg2
            Return (INTR) /* \_SB_.PCI0.INTB.INTR */
        }
    }

    Name (PNVB, 0x97B22298)
    Name (PNVL, 0x028F)
    OperationRegion (PNVA, SystemMemory, PNVB, PNVL)
    Field (PNVA, AnyAcc, Lock, Preserve)
    {
        PCHS,   16, 
        PCHG,   16, 
        PSTP,   16, 
        RPA1,   32, 
        RPA2,   32, 
        RPA3,   32, 
        RPA4,   32, 
        RPA5,   32, 
        RPA6,   32, 
        RPA7,   32, 
        RPA8,   32, 
        RPA9,   32, 
        RPAA,   32, 
        RPAB,   32, 
        RPAC,   32, 
        RPAD,   32, 
        RPAE,   32, 
        RPAF,   32, 
        RPAG,   32, 
        RPAH,   32, 
        RPAI,   32, 
        RPAJ,   32, 
        RPAK,   32, 
        RPAL,   32, 
        RPAM,   32, 
        RPAN,   32, 
        RPAO,   32, 
        NHLA,   64, 
        NHLL,   32, 
        ADFM,   32, 
        SWQ0,   8, 
        SWQ1,   8, 
        SWQ2,   8, 
        SWQ3,   8, 
        DSPM,   32, 
        SBRG,   32, 
        GEI0,   8, 
        GEI1,   8, 
        GEI2,   8, 
        GED0,   8, 
        GED1,   8, 
        GED2,   8, 
        PML1,   16, 
        PML2,   16, 
        PML3,   16, 
        PML4,   16, 
        PML5,   16, 
        PML6,   16, 
        PML7,   16, 
        PML8,   16, 
        PML9,   16, 
        PMLA,   16, 
        PMLB,   16, 
        PMLC,   16, 
        PMLD,   16, 
        PMLE,   16, 
        PMLF,   16, 
        PMLG,   16, 
        PMLH,   16, 
        PMLI,   16, 
        PMLJ,   16, 
        PMLK,   16, 
        PMLL,   16, 
        PMLM,   16, 
        PMLN,   16, 
        PMLO,   16, 
        PNL1,   16, 
        PNL2,   16, 
        PNL3,   16, 
        PNL4,   16, 
        PNL5,   16, 
        PNL6,   16, 
        PNL7,   16, 
        PNL8,   16, 
        PNL9,   16, 
        PNLA,   16, 
        PNLB,   16, 
        PNLC,   16, 
        PNLD,   16, 
        PNLE,   16, 
        PNLF,   16, 
        PNLG,   16, 
        PNLH,   16, 
        PNLI,   16, 
        PNLJ,   16, 
        PNLK,   16, 
        PNLL,   16, 
        PNLM,   16, 
        PNLN,   16, 
        PNLO,   16, 
        XHPC,   8, 
        XRPC,   8, 
        XSPC,   8, 
        XSPA,   8, 
        HPTB,   32, 
        HPTE,   8, 
        SMD0,   8, 
        SMD1,   8, 
        SMD2,   8, 
        SMD3,   8, 
        SMD4,   8, 
        SMD5,   8, 
        SMD6,   8, 
        SMD7,   8, 
        SMD8,   8, 
        SMD9,   8, 
        SMDA,   8, 
        SMDB,   8, 
        SIR0,   8, 
        SIR1,   8, 
        SIR2,   8, 
        SIR3,   8, 
        SIR4,   8, 
        SIR5,   8, 
        SIR6,   8, 
        SIR7,   8, 
        SIR8,   8, 
        SIR9,   8, 
        SIRA,   8, 
        SIRB,   8, 
        SB00,   64, 
        SB01,   64, 
        SB02,   64, 
        SB03,   64, 
        SB04,   64, 
        SB05,   64, 
        SB06,   64, 
        SB07,   64, 
        SB08,   64, 
        SB09,   64, 
        SB0A,   64, 
        SB0B,   64, 
        SB10,   64, 
        SB11,   64, 
        SB12,   64, 
        SB13,   64, 
        SB14,   64, 
        SB15,   64, 
        SB16,   64, 
        SB17,   64, 
        SB18,   64, 
        SB19,   64, 
        SB1A,   64, 
        SB1B,   64, 
        SGIR,   8, 
        GPHD,   8, 
        NIT1,   8, 
        NIT2,   8, 
        NIT3,   8, 
        NPM1,   8, 
        NPM2,   8, 
        NPM3,   8, 
        NPC1,   8, 
        NPC2,   8, 
        NPC3,   8, 
        NL11,   16, 
        NL12,   16, 
        NL13,   16, 
        ND21,   8, 
        ND22,   8, 
        ND23,   8, 
        ND11,   32, 
        ND12,   32, 
        ND13,   32, 
        NLR1,   16, 
        NLR2,   16, 
        NLR3,   16, 
        NLD1,   32, 
        NLD2,   32, 
        NLD3,   32, 
        NEA1,   16, 
        NEA2,   16, 
        NEA3,   16, 
        NEB1,   16, 
        NEB2,   16, 
        NEB3,   16, 
        NEC1,   16, 
        NEC2,   16, 
        NEC3,   16, 
        NRA1,   16, 
        NRA2,   16, 
        NRA3,   16, 
        NMB1,   32, 
        NMB2,   32, 
        NMB3,   32, 
        NMV1,   32, 
        NMV2,   32, 
        NMV3,   32, 
        NPB1,   32, 
        NPB2,   32, 
        NPB3,   32, 
        NPV1,   32, 
        NPV2,   32, 
        NPV3,   32, 
        NRP1,   32, 
        NRP2,   32, 
        NRP3,   32, 
        EMH4,   8, 
        EMDS,   8, 
        CSKU,   8, 
        ITA0,   16, 
        ITA1,   16, 
        ITA2,   16, 
        ITA3,   16, 
        ITS0,   8, 
        ITS1,   8, 
        ITS2,   8, 
        ITS3,   8, 
        PMBS,   16, 
        PWRM,   32, 
        CNVI,   8, 
        RMRC,   32, 
        VMRC,   8, 
        VM70,   8, 
        VM75,   8, 
        PTHM,   8, 
        PSON,   8, 
        TWMB,   32, 
        LTR1,   8, 
        LTR2,   8, 
        LTR3,   8, 
        LTR4,   8, 
        LTR5,   8, 
        LTR6,   8, 
        LTR7,   8, 
        LTR8,   8, 
        LTR9,   8, 
        LTRA,   8, 
        LTRB,   8, 
        LTRC,   8, 
        LTRD,   8, 
        LTRE,   8, 
        LTRF,   8, 
        LTRG,   8, 
        LTRH,   8, 
        LTRI,   8, 
        LTRJ,   8, 
        LTRK,   8, 
        LTRL,   8, 
        LTRM,   8, 
        LTRN,   8, 
        LTRO,   8, 
        GBES,   8, 
        SPPR,   8, 
        SDPH,   8, 
        EMCE,   8, 
        SDCE,   8
    }

    Scope (_SB)
    {
        OperationRegion (ICLK, SystemMemory, (SBRG + 0x00AD8000), 0x82)
        Field (ICLK, AnyAcc, Lock, Preserve)
        {
            CLK1,   8, 
            Offset (0x80), 
            CLK2,   8
        }

        Method (NCLK, 0, NotSerialized)
        {
            Return (0x02)
        }

        Method (CLKC, 2, Serialized)
        {
            Switch (Arg0)
            {
                Case (Zero)
                {
                    Local0 = CLK1 /* \_SB_.CLK1 */
                    CLK1 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                }
                Case (One)
                {
                    Local0 = CLK2 /* \_SB_.CLK2 */
                    CLK2 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                }

            }
        }

        Method (CLKF, 2, Serialized)
        {
            Switch (Arg0)
            {
                Case (Zero)
                {
                    Local0 = CLK1 /* \_SB_.CLK1 */
                    CLK1 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                }
                Case (One)
                {
                    Local0 = CLK2 /* \_SB_.CLK2 */
                    CLK2 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                }

            }
        }
    }

    Scope (_SB)
    {
        Name (GPCL, Package (0x0F)
        {
            Package (0x07)
            {
                0x006E0000, 
                0x19, 
                0x0600, 
                0xB0, 
                0x20, 
                0x0140, 
                Zero
            }, 

            Package (0x07)
            {
                0x006E0000, 
                0x1A, 
                0x0790, 
                0xB4, 
                0x30, 
                0x0144, 
                0x20
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x18, 
                0x0600, 
                0xB0, 
                0x20, 
                0x0140, 
                0x0100
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x18, 
                0x0600, 
                0xB0, 
                0x20, 
                0x0140, 
                0x60
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x18, 
                0x0780, 
                0xB4, 
                0x2C, 
                0x0144, 
                0x0120
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x18, 
                0x0790, 
                0xB4, 
                0x30, 
                0x0144, 
                0x80
            }, 

            Package (0x07)
            {
                0x006E0000, 
                0x08, 
                0x0930, 
                0xB8, 
                0x40, 
                0x0148, 
                0x40
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x18, 
                0x0910, 
                0xB8, 
                0x3C, 
                0x0148, 
                0xA0
            }, 

            Package (0x07)
            {
                0x006C0000, 
                0x10, 
                0x0600, 
                0xB0, 
                0x20, 
                0x0140, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x28, 
                0x0A90, 
                0xBC, 
                0x48, 
                0x014C, 
                0xC0
            }, 

            Package (0x07)
            {
                0x006E0000, 
                0x09, 
                0x09B0, 
                0xBC, 
                0x44, 
                0x014C, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x08, 
                0x0600, 
                0xB0, 
                0x20, 
                0x0140, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x0B, 
                0x0680, 
                0xB4, 
                0x24, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x09, 
                0x0900, 
                0xB8, 
                0x38, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x06, 
                0x0990, 
                0xBC, 
                0x40, 
                0x014C, 
                0xFFFF
            }
        })
        Name (GPCH, Package (0x11)
        {
            Package (0x07)
            {
                0x006E0000, 
                0x19, 
                0x0600, 
                0xC0, 
                0x20, 
                0x0140, 
                Zero
            }, 

            Package (0x07)
            {
                0x006E0000, 
                0x1A, 
                0x0790, 
                0xC4, 
                0x30, 
                0x0144, 
                0x20
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x18, 
                0x0600, 
                0xC0, 
                0x20, 
                0x0140, 
                0x40
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x18, 
                0x0780, 
                0xC4, 
                0x2C, 
                0x0144, 
                0x60
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x0D, 
                0x0900, 
                0xC8, 
                0x38, 
                0x0148, 
                0x0100
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x18, 
                0x09D0, 
                0xCC, 
                0x40, 
                0x014C, 
                0x0120
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x08, 
                0x0900, 
                0xC8, 
                0x38, 
                0x0148, 
                0x80
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x18, 
                0x0780, 
                0xC4, 
                0x2C, 
                0x0144, 
                0xE0
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x12, 
                0x0740, 
                0xC8, 
                0x30, 
                0x0148, 
                0x0140
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x0C, 
                0x0860, 
                0xCC, 
                0x3C, 
                0x014C, 
                0x0160
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x18, 
                0x0600, 
                0xC0, 
                0x20, 
                0x0140, 
                0xC0
            }, 

            Package (0x07)
            {
                0x006C0000, 
                0x10, 
                0x0600, 
                0xB0, 
                0x20, 
                0x0140, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x28, 
                0x0A00, 
                0xD0, 
                0x40, 
                0xFFFF, 
                0xA0
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x09, 
                0x0B50, 
                0xD0, 
                0x4C, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x08, 
                0x0980, 
                0xCC, 
                0x3C, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x0B, 
                0x0600, 
                0xC0, 
                0x20, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x09, 
                0x06B0, 
                0xC4, 
                0x28, 
                0xFFFF, 
                0xFFFF
            }
        })
        Name (RXEV, Package (0x0D)
        {
            Buffer (0x19){}, 
            Buffer (0x1A){}, 
            Buffer (0x18){}, 
            Buffer (0x18){}, 
            Buffer (0x18){}, 
            Buffer (0x18){}, 
            Buffer (0x08){}, 
            Buffer (0x18){}, 
            Buffer (0x12){}, 
            Buffer (0x28){}, 
            Buffer (0x18){}, 
            Buffer (0x10){}, 
            Buffer (0x28){}
        })
    }

    Scope (_SB)
    {
        Method (GINF, 2, NotSerialized)
        {
            If ((PCHS == PCHL))
            {
                Return (DerefOf (DerefOf (GPCL [Arg0]) [Arg1]))
            }
            Else
            {
                Return (DerefOf (DerefOf (GPCH [Arg0]) [Arg1]))
            }
        }

        Method (GMXG, 0, NotSerialized)
        {
            If ((PCHS == PCHL))
            {
                Return (0x0F)
            }
            Else
            {
                Return (0x11)
            }
        }

        Method (GADR, 2, NotSerialized)
        {
            Local0 = (GINF (Arg0, Zero) + SBRG)
            Local1 = GINF (Arg0, Arg1)
            Return ((Local0 + Local1))
        }

        Method (GNUM, 1, NotSerialized)
        {
            Local0 = GNMB (Arg0)
            Local1 = GGRP (Arg0)
            Return ((GINF (Local1, 0x06) + Local0))
        }

        Method (INUM, 1, NotSerialized)
        {
            Return ((GPC1 (Arg0) & 0x7F))
        }

        Method (GGRP, 1, Serialized)
        {
            Local0 = ((Arg0 & 0x00FF0000) >> 0x10)
            Return (Local0)
        }

        Method (GNMB, 1, Serialized)
        {
            Return ((Arg0 & 0xFFFF))
        }

        Method (GGPE, 1, NotSerialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (Local1 >> 0x05)
            If (!((((GEI0 == Local0) && (GED0 == Local2)) | (
                (GEI1 == Local0) && (GED1 == Local2))) | ((GEI2 == Local0) && (GED2 == 
                Local2))))
            {
                Return (0x6F)
            }
            Else
            {
                If (((GEI0 == Local0) && (GED0 == Local2)))
                {
                    Local3 = Zero
                }
                ElseIf (((GEI1 == Local0) && (GED1 == Local2)))
                {
                    Local3 = One
                }
                ElseIf (((GEI2 == Local0) && (GED2 == Local2)))
                {
                    Local3 = 0x02
                }
                Else
                {
                    BreakPoint
                    Return (Zero)
                }

                Return ((((Local3 - Local2) * 0x20) + Local1))
            }
        }

        Method (GPC0, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP) /* \_SB_.GPC0.TEMP */
        }

        Method (SPC0, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            TEMP = Arg1
        }

        Method (GPC1, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x10)) + 
                0x04)
            OperationRegion (PDW1, SystemMemory, Local2, 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP) /* \_SB_.GPC1.TEMP */
        }

        Method (SPC1, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x10)) + 
                0x04)
            OperationRegion (PDW1, SystemMemory, Local2, 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            TEMP = Arg1
        }

        Method (SRXO, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   28, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GGIV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   1, 
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGIV.TEMP */
        }

        Method (GGOV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGOV.TEMP */
        }

        Method (SGOV, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GGII, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   23, 
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGII.TEMP */
        }

        Method (SGII, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   23, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GPMV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   3, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GPMV.TEMP */
        }

        Method (SPMV, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   3, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GHPO, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local3 = (GADR (Local0, 0x03) + ((Local1 >> 0x05) * 0x04))
            Local4 = (Local1 & 0x1F)
            OperationRegion (PREG, SystemMemory, Local3, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (((TEMP >> Local4) & One))
        }

        Method (SHPO, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local3 = (GADR (Local0, 0x03) + ((Local1 >> 0x05) * 0x04))
            Local4 = (Local1 & 0x1F)
            OperationRegion (PREG, SystemMemory, Local3, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            If (Arg1)
            {
                TEMP |= (One << Local4)
            }
            Else
            {
                TEMP &= ~(One << Local4)
            }
        }

        Method (GGPO, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x04) + ((Local1 >> 0x03) * 0x04
                ))
            OperationRegion (PREG, SystemMemory, Local2, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (((TEMP >> ((Local1 & 0x07) * 0x04)) & 
                0x03))
        }

        Method (SGRA, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   20, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (SGWP, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x10)) + 
                0x04)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   4, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (CAGS, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local4 = (Local1 >> 0x05)
            If (!((((GEI0 == Local0) && (GED0 == Local4)) | (
                (GEI1 == Local0) && (GED1 == Local4))) | ((GEI2 == Local0) && (GED2 == 
                Local4))))
            {
                Local3 = GADR (Local0, 0x05)
                If (((Local3 & 0xFFFF) != 0xFFFF))
                {
                    OperationRegion (GPPX, SystemMemory, (Local3 + (Local4 * 0x04)), 0x04)
                    Field (GPPX, AnyAcc, NoLock, Preserve)
                    {
                        STSX,   32
                    }

                    Local2 = (One << (Local1 % 0x20))
                    STSX = Local2
                }
            }
        }

        Method (ISME, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local4 = (Local1 >> 0x05)
            If (!!((((GEI0 == Local0) && (GED0 == Local4)) | 
                ((GEI1 == Local0) && (GED1 == Local4))) | ((GEI2 == Local0) && (
                GED2 == Local4))))
            {
                Return (Zero)
            }

            If (((GADR (Local0, 0x05) & 0xFFFF) == 0xFFFF))
            {
                Return (Zero)
            }

            Local2 = (GADR (Local0, 0x05) + (Local4 * 0x04))
            Local3 = (Local1 & 0x1F)
            OperationRegion (GPPX, SystemMemory, Local2, 0x24)
            Field (GPPX, AnyAcc, NoLock, Preserve)
            {
                STSX,   32, 
                Offset (0x20), 
                GENX,   32
            }

            Return ((((STSX & GENX) >> Local3) & One))
        }

        Method (DIPI, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   9, 
                RDIS,   1, 
                    ,   15, 
                RCFG,   2, 
                Offset (0x04)
            }

            If ((RCFG != 0x02))
            {
                DerefOf (RXEV [Local0]) [Local1] = RCFG /* \_SB_.DIPI.RCFG */
                RCFG = 0x02
                RDIS = One
            }
        }

        Method (UIPI, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   9, 
                RDIS,   1, 
                    ,   15, 
                RCFG,   2, 
                Offset (0x04)
            }

            Local3 = DerefOf (DerefOf (RXEV [Local0]) [Local1])
            If ((Local3 != 0x02))
            {
                RDIS = Zero
                RCFG = Local3
            }
        }
    }

    Scope (_SB)
    {
        Method (PSD3, 1, Serialized)
        {
            Switch ((Zero + Arg0--))
            {
                Case (Zero)
                {
                    RAA0 = One
                    While ((APA0 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (One)
                {
                    RAA1 = One
                    While ((APA1 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x02)
                {
                    RAA2 = One
                    While ((APA2 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x03)
                {
                    RAA3 = One
                    While ((APA3 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x04)
                {
                    RPB0 = One
                    While ((APB0 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x05)
                {
                    RPB1 = One
                    While ((APB1 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x06)
                {
                    RPB2 = One
                    While ((APB2 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x07)
                {
                    RPB3 = One
                    While ((APB3 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x08)
                {
                    RPC0 = One
                    While ((APC0 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x09)
                {
                    RPC1 = One
                    While ((APC1 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0A)
                {
                    RPC2 = One
                    While ((APC2 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0B)
                {
                    RPC3 = One
                    While ((APC3 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0C)
                {
                    RPD0 = One
                    While ((APD0 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0D)
                {
                    RPD1 = One
                    While ((APD1 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0E)
                {
                    RPD2 = One
                    While ((APD2 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0F)
                {
                    RPD3 = One
                    While ((APD3 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x10)
                {
                    RPE0 = One
                    While ((APE0 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x11)
                {
                    RPE1 = One
                    While ((APE1 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x12)
                {
                    RPE2 = One
                    While ((APE2 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x13)
                {
                    RPE3 = One
                    While ((APE3 == Zero))
                    {
                        Stall (0x0A)
                    }
                }

            }
        }

        Method (PSD0, 1, Serialized)
        {
            Switch ((Zero + Arg0--))
            {
                Case (Zero)
                {
                    RAA0 = Zero
                    While ((APA0 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (One)
                {
                    RAA1 = Zero
                    While ((APA1 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x02)
                {
                    RAA2 = Zero
                    While ((APA2 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x03)
                {
                    RAA3 = Zero
                    While ((APA3 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x04)
                {
                    RPB0 = Zero
                    While ((APB0 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x05)
                {
                    RPB1 = Zero
                    While ((APB1 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x06)
                {
                    RPB2 = Zero
                    While ((APB2 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x07)
                {
                    RPB3 = Zero
                    While ((APB3 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x08)
                {
                    RPC0 = Zero
                    While ((APC0 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x09)
                {
                    RPC1 = Zero
                    While ((APC1 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0A)
                {
                    RPC2 = Zero
                    While ((APC2 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0B)
                {
                    RPC3 = Zero
                    While ((APC3 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0C)
                {
                    RPD0 = Zero
                    While ((APD0 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0D)
                {
                    RPD1 = Zero
                    While ((APD1 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0E)
                {
                    RPD2 = Zero
                    While ((APD2 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0F)
                {
                    RPD3 = Zero
                    While ((APD3 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x10)
                {
                    RPE0 = Zero
                    While ((APE0 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x11)
                {
                    RPE1 = Zero
                    While ((APE1 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x12)
                {
                    RPE2 = Zero
                    While ((APE2 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x13)
                {
                    RPE3 = Zero
                    While ((APE3 == One))
                    {
                        Stall (0x0A)
                    }
                }

            }
        }

        Method (CSD3, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x14)
                {
                    RSAT = One
                    While ((ASAT == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x15)
                {
                    RGBE = One
                    While ((AGBE == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x16)
                {
                    RXHC = One
                    While ((AXHC == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x17)
                {
                    RXDC = One
                    While ((AXDC == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x18)
                {
                    RUFS = One
                    While ((AUFS == Zero))
                    {
                        Stall (0x0A)
                    }
                }

            }
        }

        Method (CSD0, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x14)
                {
                    RSAT = Zero
                    While ((ASAT == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x15)
                {
                    RGBE = Zero
                    While ((AGBE == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x16)
                {
                    RXHC = Zero
                    While ((AXHC == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x17)
                {
                    RXDC = Zero
                    While ((AXDC == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x18)
                {
                    RUFS = Zero
                    While ((AUFS == One))
                    {
                        Stall (0x0A)
                    }
                }

            }
        }
    }

    Scope (\)
    {
        Method (THEN, 0, Serialized)
        {
            OperationRegion (THBA, SystemMemory, 0xFE200000, 0x10)
            Field (THBA, DWordAcc, NoLock, Preserve)
            {
                DO00,   32
            }

            Return ((DO00 != 0xFFFFFFFF))
        }

        Method (THDA, 2, Serialized)
        {
            Local0 = 0xFE200000
            Local0 += (0x40 * (0x80 * (Arg0 - 0x10)))
            Local0 += (0x40 * Arg1)
            Return (Local0)
        }

        Method (STRD, 3, Serialized)
        {
            If (((Arg1 + Arg2) > SizeOf (Arg0)))
            {
                Return (Zero)
            }

            ToBuffer (Arg0, Local3)
            Local0 = Zero
            Local1 = Zero
            While ((Local1 < Arg2))
            {
                Local2 = DerefOf (Local3 [(Arg1 + Local1)])
                Local0 += (Local2 << (0x08 * Local1))
                Local1++
            }

            Return (Local0)
        }

        Method (THDS, 1, Serialized)
        {
            If (!THEN ())
            {
                Return (Zero)
            }

            Concatenate (Arg0, "\n", Local2)
            Local0 = SizeOf (Local2)
            Local1 = THDA (0x48, 0x0E)
            OperationRegion (THBA, SystemMemory, Local1, 0x40)
            Field (THBA, QWordAcc, NoLock, Preserve)
            {
                QO00,   64
            }

            Field (THBA, DWordAcc, NoLock, Preserve)
            {
                DO00,   32, 
                Offset (0x10), 
                DO10,   32, 
                Offset (0x30), 
                DO30,   32
            }

            Field (THBA, WordAcc, NoLock, Preserve)
            {
                WO00,   16
            }

            Field (THBA, ByteAcc, NoLock, Preserve)
            {
                BO00,   8
            }

            DO10 = 0x01000242
            WO00 = Local0
            Local6 = Zero
            Local7 = Local0
            While ((Local7 >= 0x08))
            {
                QO00 = STRD (Local2, Local6, 0x08)
                Local6 += 0x08
                Local7 -= 0x08
            }

            If ((Local7 >= 0x04))
            {
                DO00 = STRD (Local2, Local6, 0x04)
                Local6 += 0x04
                Local7 -= 0x04
            }

            If ((Local7 >= 0x02))
            {
                WO00 = STRD (Local2, Local6, 0x02)
                Local6 += 0x02
                Local7 -= 0x02
            }

            If ((Local7 >= One))
            {
                BO00 = STRD (Local2, Local6, One)
                Local6 += One
                Local7 -= One
            }

            DO30 = Zero
        }

        Method (THDH, 1, Serialized)
        {
            THDS (ToHexString (Arg0))
        }

        Method (THDD, 1, Serialized)
        {
            THDS (ToDecimalString (Arg0))
        }
    }

    Name (PCHH, One)
    Name (PCHL, 0x02)
    Scope (_SB.PCI0)
    {
        Name (TEMP, Zero)
        Device (PRRE)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "PCHRESV")  // _UID: Unique ID
            Name (_STA, 0x03)  // _STA: Status
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFD000000,         // Address Base
                        0x006A0000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y18)
                    Memory32Fixed (ReadWrite,
                        0xFD6F0000,         // Address Base
                        0x00910000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE000000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE200000,         // Address Base
                        0x00600000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFF000000,         // Address Base
                        0x01000000,         // Address Length
                        )
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y17)
                })
                CreateWordField (BUF0, \_SB.PCI0.PRRE._CRS._Y17._MIN, AMIN)  // _MIN: Minimum Base Address
                CreateWordField (BUF0, \_SB.PCI0.PRRE._CRS._Y17._MAX, AMAX)  // _MAX: Maximum Base Address
                AMIN = PMBS /* \PMBS */
                AMAX = PMBS /* \PMBS */
                CreateDWordField (BUF0, \_SB.PCI0.PRRE._CRS._Y18._BAS, GBAS)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.PCI0.PRRE._CRS._Y18._LEN, GLEN)  // _LEN: Length
                If ((PCHS == PCHH))
                {
                    GBAS = (SBRG + 0x006C0000)
                    GLEN = 0x00010000
                }
                Else
                {
                    GBAS = (SBRG + 0x006B0000)
                    GLEN = 0x00020000
                }

                Name (BUF1, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00400000,         // Address Length
                        _Y19)
                })
                CreateDWordField (BUF1, \_SB.PCI0.PRRE._CRS._Y19._BAS, HDBA)  // _BAS: Base Address
                HDBA = DSPM /* \DSPM */
                If (((PCHS == PCHL) && (PSTP < 0x10)))
                {
                    Return (ConcatenateResTemplate (BUF0, BUF1))
                }

                Return (BUF0) /* \_SB_.PCI0.PRRE._CRS.BUF0 */
            }
        }

        Device (IOTR)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "IoTraps")  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y1A)
                })
                Name (BUF1, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y1B)
                })
                Name (BUF2, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y1C)
                })
                Name (BUF3, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y1D)
                })
                CreateWordField (BUF0, \_SB.PCI0.IOTR._CRS._Y1A._MIN, AMI0)  // _MIN: Minimum Base Address
                CreateWordField (BUF0, \_SB.PCI0.IOTR._CRS._Y1A._MAX, AMA0)  // _MAX: Maximum Base Address
                CreateWordField (BUF1, \_SB.PCI0.IOTR._CRS._Y1B._MIN, AMI1)  // _MIN: Minimum Base Address
                CreateWordField (BUF1, \_SB.PCI0.IOTR._CRS._Y1B._MAX, AMA1)  // _MAX: Maximum Base Address
                CreateWordField (BUF2, \_SB.PCI0.IOTR._CRS._Y1C._MIN, AMI2)  // _MIN: Minimum Base Address
                CreateWordField (BUF2, \_SB.PCI0.IOTR._CRS._Y1C._MAX, AMA2)  // _MAX: Maximum Base Address
                CreateWordField (BUF3, \_SB.PCI0.IOTR._CRS._Y1D._MIN, AMI3)  // _MIN: Minimum Base Address
                CreateWordField (BUF3, \_SB.PCI0.IOTR._CRS._Y1D._MAX, AMA3)  // _MAX: Maximum Base Address
                AMI0 = ITA0 /* \ITA0 */
                AMA0 = ITA0 /* \ITA0 */
                AMI1 = ITA1 /* \ITA1 */
                AMA1 = ITA1 /* \ITA1 */
                AMI2 = ITA2 /* \ITA2 */
                AMA2 = ITA2 /* \ITA2 */
                AMI3 = ITA3 /* \ITA3 */
                AMA3 = ITA3 /* \ITA3 */
                If ((ITS0 == One))
                {
                    ConcatenateResTemplate (Local0, BUF0, Local1)
                    Local0 = Local1
                }

                If ((ITS1 == One))
                {
                    ConcatenateResTemplate (Local0, BUF1, Local1)
                    Local0 = Local1
                }

                If ((ITS2 == One))
                {
                    ConcatenateResTemplate (Local0, BUF2, Local1)
                    Local0 = Local1
                }

                If ((ITS3 == One))
                {
                    ConcatenateResTemplate (Local0, BUF3, Local1)
                    Local0 = Local1
                }

                Return (Local0)
            }
        }

        Device (LPCB)
        {
            Name (_ADR, 0x001F0000)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            OperationRegion (LPC, PCI_Config, Zero, 0x0100)
            Field (LPC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                CDID,   16, 
                Offset (0x08), 
                CRID,   8, 
                Offset (0x80), 
                IOD0,   8, 
                IOD1,   8, 
                Offset (0xA0), 
                    ,   9, 
                PRBL,   1, 
                Offset (0xDC), 
                    ,   2, 
                ESPI,   1
            }
        }

        Device (SBUS)
        {
            Name (_ADR, 0x001F0004)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            OperationRegion (SMBP, PCI_Config, Zero, 0xC0)
            Field (SMBP, DWordAcc, NoLock, Preserve)
            {
                Offset (0x20), 
                    ,   5, 
                SBAR,   11, 
                Offset (0x40), 
                    ,   2, 
                I2CE,   1
            }

            OperationRegion (SMBI, SystemIO, (SBAR << 0x05), 0x10)
            Field (SMBI, ByteAcc, NoLock, Preserve)
            {
                HSTS,   8, 
                Offset (0x02), 
                HCON,   8, 
                HCOM,   8, 
                TXSA,   8, 
                DAT0,   8, 
                DAT1,   8, 
                HBDR,   8, 
                PECR,   8, 
                RXSA,   8, 
                SDAT,   16
            }

            Method (SSXB, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRXB, 1, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCON = 0x44
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                }

                Return (0xFFFF)
            }

            Method (SWRB, 3, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT0 = Arg2
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRDB, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                }

                Return (0xFFFF)
            }

            Method (SWRW, 3, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT1 = (Arg2 & 0xFF)
                DAT0 = ((Arg2 >> 0x08) & 0xFF)
                HCON = 0x4C
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRDW, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x4C
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (((DAT0 << 0x08) | DAT1))
                }

                Return (0xFFFFFFFF)
            }

            Method (SBLW, 4, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Arg3
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT0 = SizeOf (Arg2)
                Local1 = Zero
                HBDR = DerefOf (Arg2 [Zero])
                HCON = 0x54
                While ((SizeOf (Arg2) > Local1))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    HSTS = 0x80
                    Local1++
                    If ((SizeOf (Arg2) > Local1))
                    {
                        HBDR = DerefOf (Arg2 [Local1])
                    }
                }

                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SBLR, 3, Serialized)
            {
                Name (TBUF, Buffer (0x0100){})
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Arg2
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x54
                Local0 = 0x0FA0
                While ((!(HSTS & 0x80) && Local0))
                {
                    Local0--
                    Stall (0x32)
                }

                If (!Local0)
                {
                    KILL ()
                    Return (Zero)
                }

                TBUF [Zero] = DAT0 /* \_SB_.PCI0.SBUS.DAT0 */
                HSTS = 0x80
                Local1 = One
                While ((Local1 < DerefOf (TBUF [Zero])))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    TBUF [Local1] = HBDR /* \_SB_.PCI0.SBUS.HBDR */
                    HSTS = 0x80
                    Local1++
                }

                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (TBUF) /* \_SB_.PCI0.SBUS.SBLR.TBUF */
                }

                Return (Zero)
            }

            Method (STRT, 0, Serialized)
            {
                Local0 = 0xC8
                While (Local0)
                {
                    If ((HSTS & 0x40))
                    {
                        Local0--
                        Sleep (One)
                        If ((Local0 == Zero))
                        {
                            Return (One)
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & One))
                    {
                        Local0--
                        Stall (0x32)
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (One)
            }

            Method (COMP, 0, Serialized)
            {
                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Local0--
                        Stall (0x32)
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                }

                Return (Zero)
            }

            Method (KILL, 0, Serialized)
            {
                HCON |= 0x02
                HSTS |= 0xFF
            }
        }
    }

    Scope (\)
    {
        Method (IPCW, 7, Serialized)
        {
            IBF0 = Arg3
            IBF1 = Arg4
            IBF2 = Arg5
            IBF3 = Arg6
            Local0 = Arg0
            Local0 += (Arg1 << 0x0C)
            Local0 += (Arg2 << 0x10)
            CMDR = Local0
            Local0 = Zero
            While (One)
            {
                If ((!IBSY || (IERR == One)))
                {
                    Break
                }

                If ((Local0 > 0x0A))
                {
                    ADBG ("IPC Busy TO")
                    Break
                }

                Sleep (One)
                Local0++
            }

            If ((IERR == One))
            {
                ADBG ("IPC Error:")
                ADBG (IERC)
                ADBG (Arg0)
                ADBG (Arg1)
                ADBG (Arg2)
                ADBG (Arg3)
                ADBG (Arg4)
                ADBG (Arg5)
                ADBG (Arg6)
            }
        }

        Method (SPCO, 2, Serialized)
        {
            Local0 = (One << Arg0)
            Local1 = (Arg1 << Arg0)
            IPCW (0xA8, Zero, 0x08, Local0, Local1, Zero, Zero)
        }

        Method (PCRR, 2, Serialized)
        {
            Local0 = ((Arg0 << 0x10) + Arg1)
            Local0 += SBRG
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            Return (DAT0) /* \PCRR.DAT0 */
        }

        Method (PCRW, 3, Serialized)
        {
            Local0 = ((Arg0 << 0x10) + Arg1)
            Local0 += SBRG
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            DAT0 = Arg2
        }

        Method (PCRO, 3, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = (Local0 | Arg2)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCRA, 3, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = (Local0 & Arg2)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCAO, 4, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = ((Local0 & Arg2) | Arg3)
            PCRW (Arg0, Arg1, Local1)
        }

        Name (TCBV, Zero)
        Method (TCBS, 0, NotSerialized)
        {
            If ((TCBV == Zero))
            {
                Local0 = PCRR (0x88, 0x2778)
                TCBV = (Local0 & 0xFFE0)
            }

            Return (TCBV) /* \TCBV */
        }

        OperationRegion (PMIO, SystemIO, PMBS, 0x80)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x01), 
            PBSS,   1, 
            Offset (0x40), 
                ,   17, 
            GPEC,   1, 
            Offset (0x64), 
                ,   9, 
            SCIS,   1, 
            Offset (0x66)
        }

        OperationRegion (TCBA, SystemIO, TCBS (), 0x10)
        Field (TCBA, ByteAcc, NoLock, Preserve)
        {
            Offset (0x04), 
                ,   9, 
            CPSC,   1
        }

        OperationRegion (PWMR, SystemMemory, PWRM, 0x1E30)
        Field (PWMR, DWordAcc, NoLock, Preserve)
        {
            CMDR,   32, 
            IBSY,   1, 
            IERR,   1, 
                ,   1, 
                ,   1, 
            Offset (0x05), 
            Offset (0x06), 
            IERC,   8, 
            Offset (0x08), 
            Offset (0x80), 
            IBF0,   32, 
            IBF1,   32, 
            IBF2,   32, 
            IBF3,   32, 
            IRBF,   32, 
            Offset (0x10D0), 
            RAA0,   1, 
            RAA1,   1, 
            RAA2,   1, 
            RAA3,   1, 
            RPB0,   1, 
            RPB1,   1, 
            RPB2,   1, 
            RPB3,   1, 
            RPC0,   1, 
            RPC1,   1, 
            RPC2,   1, 
            RPC3,   1, 
            RSAT,   1, 
            RGBE,   1, 
            RXHC,   1, 
            RXDC,   1, 
            RUFS,   1, 
            RPD0,   1, 
            RPD1,   1, 
            RPD2,   1, 
            RPD3,   1, 
            RPE0,   1, 
            RPE1,   1, 
            RPE2,   1, 
            RPE3,   1, 
            RDMI,   1, 
            Offset (0x10D4), 
            APA0,   1, 
            APA1,   1, 
            APA2,   1, 
            APA3,   1, 
            APB0,   1, 
            APB1,   1, 
            APB2,   1, 
            APB3,   1, 
            APC0,   1, 
            APC1,   1, 
            APC2,   1, 
            APC3,   1, 
            ASAT,   1, 
            AGBE,   1, 
            AXHC,   1, 
            AXDC,   1, 
            AUFS,   1, 
            APD0,   1, 
            APD1,   1, 
            APD2,   1, 
            APD3,   1, 
            APE0,   1, 
            APE1,   1, 
            APE2,   1, 
            APE3,   1, 
            ADMI,   1, 
            Offset (0x1800), 
            ACWA,   32, 
            DCWA,   32, 
            ACET,   32, 
            DCET,   32, 
            Offset (0x18E8), 
            PMC4,   31, 
            CECE,   1, 
            Offset (0x1B1C), 
                ,   22, 
            XSQD,   1, 
            Offset (0x1E20), 
            GBED,   1, 
            Offset (0x1E28), 
                ,   22, 
            SCFD,   1
        }

        Method (PSOC, 1, Serialized)
        {
            If (PSON)
            {
                If (Arg0)
                {
                    ADBG ("PS_ON Enable")
                    CECE = One
                }
                Else
                {
                    ADBG ("PS_ON Disable")
                    CECE = Zero
                }
            }
        }

        Method (PSOS, 0, NotSerialized)
        {
            If (CECE)
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    If ((GBES != Zero))
    {
        Scope (_SB.PCI0)
        {
            Device (GLAN)
            {
                Name (_ADR, 0x001F0006)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                OperationRegion (GLBA, PCI_Config, Zero, 0x0100)
                Field (GLBA, AnyAcc, NoLock, Preserve)
                {
                    DVID,   16
                }

                Field (GLBA, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xCC), 
                    Offset (0xCD), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x6D, 0x04))
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    PMEE = Arg0
                }

                Method (GPEH, 0, NotSerialized)
                {
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If ((PMEE && PMES))
                    {
                        PMES = One
                        Notify (GLAN, 0x02) // Device Wake
                    }
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (XHC)
        {
            Name (_ADR, 0x00140000)  // _ADR: Address
            OperationRegion (XPRT, PCI_Config, Zero, 0x0100)
            Field (XPRT, AnyAcc, NoLock, Preserve)
            {
                DVID,   16, 
                Offset (0x10), 
                XADL,   32, 
                XADH,   32, 
                Offset (0xA2), 
                    ,   2, 
                D3HE,   1
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG ("XHCI _DSM")
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x03)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x03)
            }

            Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
            {
                Return (0x03)
            }

            Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
            {
                Return (0x03)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Local0 = Package (0x02)
                    {
                        Zero, 
                        Zero
                    }
                Local0 [Zero] = 0x6D
                If ((USWE == One))
                {
                    Local0 [One] = 0x03
                }

                Return (Local0)
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (CondRefOf (\_SB.PCI0.XHC.RHUB.INIR))
                {
                    ^RHUB.INIR ()
                }
            }

            Method (USRA, 0, Serialized)
            {
                If ((PCHS == PCHH))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (SSPA, 0, Serialized)
            {
                If ((PCHS == PCHH))
                {
                    Return (0x11)
                }
                Else
                {
                    Return (0x0D)
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PCI0.XHC.PS0X))
                {
                    PS0X ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PCI0.XHC.PS3X))
                {
                    PS3X ()
                }
            }

            Method (CUID, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PCI0.XHC.RHUB.PS0X))
                    {
                        CSD0 (0x16)
                        PS0X ()
                    }
                }

                Method (_PS2, 0, Serialized)  // _PS2: Power State 2
                {
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PCI0.XHC.RHUB.PS2X))
                    {
                        PS2X ()
                        CSD3 (0x16)
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PCI0.XHC.RHUB.PS3X))
                    {
                        PS3X ()
                        CSD3 (0x16)
                    }
                }

                Device (HS01)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (HS02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (HS03)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }

                Device (HS04)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (HS05)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (HS06)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (HS07)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }

                Device (HS08)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                }

                Device (HS09)
                {
                    Name (_ADR, 0x09)  // _ADR: Address
                }

                Device (HS10)
                {
                    Name (_ADR, 0x0A)  // _ADR: Address
                }

                Device (USR1)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((USRA () + Zero))
                    }
                }

                Device (USR2)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((USRA () + One))
                    }
                }

                Device (SS01)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + Zero))
                    }
                }

                Device (SS02)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + One))
                    }
                }

                Device (SS03)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x02))
                    }
                }

                Device (SS04)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x03))
                    }
                }

                Device (SS05)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x04))
                    }
                }

                Device (SS06)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x05))
                    }
                }
            }
        }
    }

    If ((PCHS == PCHH))
    {
        Scope (_SB.PCI0.XHC.RHUB)
        {
            Device (HS11)
            {
                Name (_ADR, 0x0B)  // _ADR: Address
            }

            Device (HS12)
            {
                Name (_ADR, 0x0C)  // _ADR: Address
            }

            Device (HS13)
            {
                Name (_ADR, 0x0D)  // _ADR: Address
            }

            Device (HS14)
            {
                Name (_ADR, 0x0E)  // _ADR: Address
            }

            Device (SS07)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x06))
                }
            }

            Device (SS08)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x07))
                }
            }

            Device (SS09)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x08))
                }
            }

            Device (SS10)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x09))
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (XDCI)
        {
            Name (_ADR, 0x00140001)  // _ADR: Address
            OperationRegion (XDCR, PCI_Config, Zero, 0x0100)
            Field (XDCR, WordAcc, NoLock, Preserve)
            {
                Offset (0x84), 
                Offset (0x85), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            PowerResource (USBC, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }
            }

            OperationRegion (OTGD, SystemMemory, (GPCB () + 0x000A1000), 0x0100)
            Field (OTGD, DWordAcc, NoLock, Preserve)
            {
                DVID,   16, 
                Offset (0x04), 
                PDBM,   16, 
                Offset (0x10), 
                XDCB,   64
            }

            Field (OTGD, ByteAcc, NoLock, Preserve)
            {
                Offset (0x84), 
                D0I3,   2
            }

            Method (XDBA, 0, NotSerialized)
            {
                Return ((XDCB & 0xFFFFFFFFFFFFFF00))
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("732b85d5-b7a7-4a1b-9ba0-4bbd00ffd511") /* Unknown UUID */))
                {
                    If ((Arg1 == One))
                    {
                        Method (SPPS, 2, Serialized)
                        {
                            OperationRegion (XDBW, SystemMemory, XDBA (), 0x00110000)
                            Field (XDBW, WordAcc, NoLock, Preserve)
                            {
                                Offset (0x10F810), 
                                Offset (0x10F811), 
                                U2CP,   2, 
                                U3CP,   2, 
                                Offset (0x10F818), 
                                PUPS,   2, 
                                    ,   1, 
                                PURC,   1, 
                                Offset (0x10F81A), 
                                Offset (0x10F81C), 
                                    ,   3, 
                                UXPE,   2, 
                                Offset (0x10F81E)
                            }

                            Local1 = Arg0
                            Local2 = Arg1
                            If ((Local1 == Zero))
                            {
                                UXPE = Zero
                                Local0 = Zero
                                While ((Local0 < 0x0A))
                                {
                                    Stall (0x64)
                                    Local0++
                                }

                                PUPS = Zero
                                Local0 = Zero
                                While ((Local0 < 0x07D0))
                                {
                                    Stall (0x64)
                                    If (((U2CP == Zero) && (U3CP == Zero)))
                                    {
                                        Break
                                    }

                                    Local0++
                                }

                                If ((U2CP != Zero)){}
                                If ((U3CP != Zero)){}
                                Return (Zero)
                            }

                            If ((Local1 == 0x03))
                            {
                                If ((U2CP != Zero)){}
                                If ((U3CP != Zero)){}
                                PUPS = 0x03
                                Local0 = Zero
                                While ((Local0 < 0x07D0))
                                {
                                    Stall (0x64)
                                    If (((U2CP == 0x03) && (U3CP == 0x03)))
                                    {
                                        Break
                                    }

                                    Local0++
                                }

                                If ((U2CP != 0x03)){}
                                If ((U3CP != 0x03)){}
                                UXPE = Local2
                                Return (Zero)
                            }

                            Return (Zero)
                        }

                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0xB3                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (One)
                            }
                            Case (0x04)
                            {
                                Local1 = DerefOf (Arg3 [Zero])
                                SPPS (Local1, Zero)
                            }
                            Case (0x05)
                            {
                                If (CondRefOf (\_SB.PCI0.LPCB.H_EC.XDAT))
                                {
                                    If ((^^LPCB.H_EC.XDAT () == One))
                                    {
                                        Notify (XDCI, 0x80) // Status Change
                                    }
                                    Else
                                    {
                                        Notify (XDCI, 0x81) // Information Change
                                    }
                                }

                                Return (Zero)
                            }
                            Case (0x07)
                            {
                                OperationRegion (XD22, SystemMemory, XDBA (), 0x00110000)
                                Field (XD22, WordAcc, NoLock, Preserve)
                                {
                                    Offset (0x10F818), 
                                    P2PS,   2, 
                                    Offset (0x10F81A)
                                }

                                Local0 = P2PS /* \_SB_.PCI0.XDCI._DSM.P2PS */
                                Return (Local0)
                            }

                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Name (_DDN, "CNL PCH XDCI controller")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("CNL PCH XDCI controller"))  // _STR: Description String
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PCI0.XDCI.PS3X))
                {
                    Local2 = XDCB /* \_SB_.PCI0.XDCI.XDCB */
                    Local1 = PDBM /* \_SB_.PCI0.XDCI.PDBM */
                    PDBM &= 0xFFFFFFFFFFFFFFF9
                    XDCB = TWMB /* \TWMB */
                    PDBM = (Local1 | 0x02)
                    OperationRegion (GENR, SystemMemory, (TWMB + 0x0010F81C), 0x04)
                    Field (GENR, WordAcc, NoLock, Preserve)
                    {
                            ,   2, 
                        CPME,   1, 
                        U3EN,   1, 
                        U2EN,   1
                    }

                    CPME = One
                    U2EN = One
                    U3EN = One
                    PDBM &= 0xFFFFFFFFFFFFFFFD
                    XDCB = Local2
                    PDBM = Local1
                    PS3X ()
                    CSD3 (0x17)
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PCI0.XDCI.PS0X))
                {
                    Local2 = XDCB /* \_SB_.PCI0.XDCI.XDCB */
                    Local1 = PDBM /* \_SB_.PCI0.XDCI.PDBM */
                    PDBM &= 0xFFFFFFFFFFFFFFF9
                    XDCB = TWMB /* \TWMB */
                    PDBM = (Local1 | 0x02)
                    OperationRegion (GENR, SystemMemory, (TWMB + 0x0010F81C), 0x04)
                    Field (GENR, WordAcc, NoLock, Preserve)
                    {
                            ,   2, 
                        CPME,   1, 
                        U3EN,   1, 
                        U2EN,   1
                    }

                    CPME = Zero
                    U2EN = Zero
                    U3EN = Zero
                    PDBM &= 0xFFFFFFFFFFFFFFFD
                    XDCB = Local2
                    PDBM = Local1
                    PS0X ()
                    CSD0 (0x17)
                }
            }

            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
            {
                Return (Package (0x01)
                {
                    USBC
                })
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((PMES == One))
                {
                    Notify (XDCI, 0x02) // Device Wake
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (HDAS)
        {
            Name (_ADR, 0x001F0003)  // _ADR: Address
            OperationRegion (HDAR, PCI_Config, Zero, 0x0100)
            Field (HDAR, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x54), 
                Offset (0x55), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (VMRC)
                {
                    If (CondRefOf (\_SB.VMOF))
                    {
                        VMOF ()
                        XSQD = One
                    }
                }

                If (CondRefOf (\_SB.PCI0.HDAS.PS0X))
                {
                    PS0X ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (VMRC)
                {
                    If (CondRefOf (\_SB.VMON))
                    {
                        VMON ()
                        XSQD = Zero
                    }
                }

                If (CondRefOf (\_SB.PCI0.HDAS.PS3X))
                {
                    PS3X ()
                }
            }

            Name (NBUF, ResourceTemplate ()
            {
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadOnly,
                    0x0000000000000001, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y1E, AddressRangeACPI, TypeStatic)
            })
            Name (DBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00400000,         // Address Length
                    _Y1F)
            })
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                ADBG ("HDAS _INI")
                CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y1E._MIN, NBAS)  // _MIN: Minimum Base Address
                CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y1E._MAX, NMAS)  // _MAX: Maximum Base Address
                CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y1E._LEN, NLEN)  // _LEN: Length
                NBAS = NHLA /* \NHLA */
                NMAS = (NHLA + (NHLL - One))
                NLEN = NHLL /* \NHLL */
                CreateDWordField (DBUF, \_SB.PCI0.HDAS._Y1F._BAS, HDBA)  // _BAS: Base Address
                HDBA = DSPM /* \DSPM */
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "nhlt-version", 
                        "1.8-0"
                    }
                }
            })
            Method (GPEH, 0, NotSerialized)
            {
                If ((PMES == One))
                {
                    Notify (HDAS, 0x02) // Device Wake
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG ("HDAS _DSM")
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("a69f886e-6ceb-4594-a41f-7b5dce24c553") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            If (((PCHS == PCHL) && (PSTP < 0x10)))
                            {
                                Return (Buffer (One)
                                {
                                     0x1F                                             // .
                                })
                            }

                            Return (Buffer (One)
                            {
                                 0x0F                                             // .
                            })
                        }
                        Case (One)
                        {
                            ADBG ("_DSM Fun 1 NHLT")
                            Return (NBUF) /* \_SB_.PCI0.HDAS.NBUF */
                        }
                        Case (0x02)
                        {
                            ADBG ("_DSM Fun 2 FMSK")
                            Return (ADFM) /* \ADFM */
                        }
                        Case (0x03)
                        {
                            ADBG ("_DSM Fun 3 PPMS")
                            If ((Arg3 == ToUUID ("ec774fa9-28d3-424a-90e4-69f984f1eeb7") /* Unknown UUID */))
                            {
                                Return ((ADPM & 0x0100))
                            }

                            If ((Arg3 == ToUUID ("d46f9d72-81a4-47fd-b301-8e39d17c0981") /* Unknown UUID */))
                            {
                                Return ((ADPM & 0x0200))
                            }

                            If ((Arg3 == ToUUID ("f3578986-4400-4adf-ae7e-cd433cd3f26e") /* Unknown UUID */))
                            {
                                Return ((ADPM & 0x0400))
                            }

                            If (CondRefOf (\_SB.PCI0.HDAS.PPMS))
                            {
                                Return (PPMS (Arg3))
                            }

                            Return (Zero)
                        }
                        Case (0x04)
                        {
                            ADBG ("_DSM Fun 4 DBUF")
                            Return (DBUF) /* \_SB_.PCI0.HDAS.DBUF */
                        }
                        Default
                        {
                            ADBG ("_DSM Fun NOK")
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }

                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                ADBG ("_DSM UUID NOK")
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Scope (HDAS)
        {
            Device (SNDW)
            {
                Name (_ADR, 0x40000000)  // _ADR: Address
                Name (_CID, Package (0x02)  // _CID: Compatible ID
                {
                    "PRP00001", 
                    "PNP0A05" /* Generic Container Device */
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0B)
                }

                Method (QCFG, 2, NotSerialized)
                {
                    DerefOf (DerefOf (Arg0 [One]) [Zero]) [One]
                         = Arg1
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    ADBG ("SNDW _INI")
                    QCFG (LNK0, SWQ0)
                    QCFG (LNK1, SWQ1)
                    QCFG (LNK2, SWQ2)
                    QCFG (LNK3, SWQ3)
                }

                Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x02)
                    {
                        Package (0x02)
                        {
                            "mipi-sdw-sw-interface-revision", 
                            0x00010000
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-master-count", 
                            0x04
                        }
                    }, 

                    ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                    Package (0x04)
                    {
                        Package (0x02)
                        {
                            "mipi-sdw-link-0-subproperties", 
                            "LNK0"
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-link-1-subproperties", 
                            "LNK1"
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-link-2-subproperties", 
                            "LNK2"
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-link-3-subproperties", 
                            "LNK3"
                        }
                    }
                })
                Name (LNK0, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0A)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x016E3600
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x005B8D80
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x7D
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x02
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
                Name (LNK1, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0A)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x016E3600
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x005B8D80
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x7D
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x02
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
                Name (LNK2, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0A)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x016E3600
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x005B8D80
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x7D
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x02
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
                Name (LNK3, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0A)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x016E3600
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x005B8D80
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x7D
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x02
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
            }
        }

        Device (RP01)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA1 != Zero))
                {
                    Return (RPA1) /* \RPA1 */
                }
                Else
                {
                    Return (0x001C0000)
                }
            }

            Name (SLOT, One)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTR1 /* \LTR1 */
                    LMSL = PML1 /* \PML1 */
                    LNSL = PNL1 /* \PNL1 */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP01._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP01.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP01.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP02)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA2 != Zero))
                {
                    Return (RPA2) /* \RPA2 */
                }
                Else
                {
                    Return (0x001C0001)
                }
            }

            Name (SLOT, 0x02)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTR2 /* \LTR2 */
                    LMSL = PML2 /* \PML2 */
                    LNSL = PNL2 /* \PNL2 */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP02._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP02.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP02.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP03)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA3 != Zero))
                {
                    Return (RPA3) /* \RPA3 */
                }
                Else
                {
                    Return (0x001C0002)
                }
            }

            Name (SLOT, 0x03)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTR3 /* \LTR3 */
                    LMSL = PML3 /* \PML3 */
                    LNSL = PNL3 /* \PNL3 */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP03._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP03.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP03.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP04)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA4 != Zero))
                {
                    Return (RPA4) /* \RPA4 */
                }
                Else
                {
                    Return (0x001C0003)
                }
            }

            Name (SLOT, 0x04)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTR4 /* \LTR4 */
                    LMSL = PML4 /* \PML4 */
                    LNSL = PNL4 /* \PNL4 */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP04._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP04.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP04.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP05)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA5 != Zero))
                {
                    Return (RPA5) /* \RPA5 */
                }
                Else
                {
                    Return (0x001C0004)
                }
            }

            Name (SLOT, 0x05)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTR5 /* \LTR5 */
                    LMSL = PML5 /* \PML5 */
                    LNSL = PNL5 /* \PNL5 */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP05._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP05.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (WOLE)
                {
                    Return (GPRW (0x69, 0x04))
                }
                Else
                {
                    Return (GPRW (0x69, Zero))
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP06)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA6 != Zero))
                {
                    Return (RPA6) /* \RPA6 */
                }
                Else
                {
                    Return (0x001C0005)
                }
            }

            Name (SLOT, 0x06)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTR6 /* \LTR6 */
                    LMSL = PML6 /* \PML6 */
                    LNSL = PNL6 /* \PNL6 */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP06._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP06.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP06.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP07)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA7 != Zero))
                {
                    Return (RPA7) /* \RPA7 */
                }
                Else
                {
                    Return (0x001C0006)
                }
            }

            Name (SLOT, 0x07)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTR7 /* \LTR7 */
                    LMSL = PML7 /* \PML7 */
                    LNSL = PNL7 /* \PNL7 */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP07._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP07.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP07.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP08)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA8 != Zero))
                {
                    Return (RPA8) /* \RPA8 */
                }
                Else
                {
                    Return (0x001C0007)
                }
            }

            Name (SLOT, 0x08)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTR8 /* \LTR8 */
                    LMSL = PML8 /* \PML8 */
                    LNSL = PNL8 /* \PNL8 */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP08._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP08.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP08.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP09)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA9 != Zero))
                {
                    Return (RPA9) /* \RPA9 */
                }
                Else
                {
                    Return (0x001D0000)
                }
            }

            Name (SLOT, 0x09)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTR9 /* \LTR9 */
                    LMSL = PML9 /* \PML9 */
                    LNSL = PNL9 /* \PNL9 */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP09._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP09.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP09.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP10)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAA != Zero))
                {
                    Return (RPAA) /* \RPAA */
                }
                Else
                {
                    Return (0x001D0001)
                }
            }

            Name (SLOT, 0x0A)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTRA /* \LTRA */
                    LMSL = PMLA /* \PMLA */
                    LNSL = PNLA /* \PNLA */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP10._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP10.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP10.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP11)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAB != Zero))
                {
                    Return (RPAB) /* \RPAB */
                }
                Else
                {
                    Return (0x001D0002)
                }
            }

            Name (SLOT, 0x0B)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTRB /* \LTRB */
                    LMSL = PMLB /* \PMLB */
                    LNSL = PNLB /* \PNLB */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP11._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP11.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP11.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP12)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAC != Zero))
                {
                    Return (RPAC) /* \RPAC */
                }
                Else
                {
                    Return (0x001D0003)
                }
            }

            Name (SLOT, 0x0C)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTRC /* \LTRC */
                    LMSL = PMLC /* \PMLC */
                    LNSL = PNLC /* \PNLC */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP12._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP12.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP12.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP13)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAD != Zero))
                {
                    Return (RPAD) /* \RPAD */
                }
                Else
                {
                    Return (0x001D0004)
                }
            }

            Name (SLOT, 0x0D)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTRD /* \LTRD */
                    LMSL = PMLD /* \PMLD */
                    LNSL = PNLD /* \PNLD */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP13._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP13.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP13.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP14)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAE != Zero))
                {
                    Return (RPAE) /* \RPAE */
                }
                Else
                {
                    Return (0x001D0005)
                }
            }

            Name (SLOT, 0x0E)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTRE /* \LTRE */
                    LMSL = PMLE /* \PMLE */
                    LNSL = PNLE /* \PNLE */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP14._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP14.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP14.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP15)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAF != Zero))
                {
                    Return (RPAF) /* \RPAF */
                }
                Else
                {
                    Return (0x001D0006)
                }
            }

            Name (SLOT, 0x0F)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTRF /* \LTRF */
                    LMSL = PMLF /* \PMLF */
                    LNSL = PNLF /* \PNLF */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP15._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP15.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP15.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP16)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAG != Zero))
                {
                    Return (RPAG) /* \RPAG */
                }
                Else
                {
                    Return (0x001D0007)
                }
            }

            Name (SLOT, 0x10)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTRG /* \LTRG */
                    LMSL = PMLG /* \PMLG */
                    LNSL = PNLG /* \PNLG */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP16._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP16.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP16.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP17)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAH != Zero))
                {
                    Return (RPAH) /* \RPAH */
                }
                Else
                {
                    Return (0x001B0000)
                }
            }

            Name (SLOT, 0x11)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTRH /* \LTRH */
                    LMSL = PMLH /* \PMLH */
                    LNSL = PNLH /* \PNLH */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP17._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP17.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP17.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP18)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAI != Zero))
                {
                    Return (RPAI) /* \RPAI */
                }
                Else
                {
                    Return (0x001B0001)
                }
            }

            Name (SLOT, 0x12)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTRI /* \LTRI */
                    LMSL = PMLI /* \PMLI */
                    LNSL = PNLI /* \PNLI */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP18._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP18.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP18.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP19)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAJ != Zero))
                {
                    Return (RPAJ) /* \RPAJ */
                }
                Else
                {
                    Return (0x001B0002)
                }
            }

            Name (SLOT, 0x13)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTRJ /* \LTRJ */
                    LMSL = PMLJ /* \PMLJ */
                    LNSL = PNLJ /* \PNLJ */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP19._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP19.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP19.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP20)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAK != Zero))
                {
                    Return (RPAK) /* \RPAK */
                }
                Else
                {
                    Return (0x001B0003)
                }
            }

            Name (SLOT, 0x14)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTRK /* \LTRK */
                    LMSL = PMLK /* \_SB_.PCI0.PMLK */
                    LNSL = PNLK /* \PNLK */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP20._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP20.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP20.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP21)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAL != Zero))
                {
                    Return (RPAL) /* \RPAL */
                }
                Else
                {
                    Return (0x001B0004)
                }
            }

            Name (SLOT, 0x15)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTRL /* \LTRL */
                    LMSL = PMLL /* \PMLL */
                    LNSL = PNLL /* \PNLL */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP21._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP21.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP21.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP22)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAM != Zero))
                {
                    Return (RPAM) /* \RPAM */
                }
                Else
                {
                    Return (0x001B0005)
                }
            }

            Name (SLOT, 0x16)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTRM /* \LTRM */
                    LMSL = PMLM /* \PMLM */
                    LNSL = PNLM /* \PNLM */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP22._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP22.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP22.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP23)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAN != Zero))
                {
                    Return (RPAN) /* \RPAN */
                }
                Else
                {
                    Return (0x001B0006)
                }
            }

            Name (SLOT, 0x17)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTRN /* \LTRN */
                    LMSL = PMLN /* \PMLN */
                    LNSL = PNLN /* \PNLN */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP23._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP23.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP23.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP24)
        {
            Name (LTRZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAO != Zero))
                {
                    Return (RPAO) /* \RPAO */
                }
                Else
                {
                    Return (0x001B0007)
                }
            }

            Name (SLOT, 0x18)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (PRES ())
                {
                    LTRZ = LTRO /* \LTRO */
                    LMSL = PMLO /* \PMLO */
                    LNSL = PNLO /* \PNLO */
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                    ,   7, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB7 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB7 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (PRES, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            If ((Arg1 >= 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    FUNA = One
                                }

                                If (CondRefOf (UPRD))
                                {
                                    FUNB = One
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP24._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP24.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                {
                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "StorageD3Enable", 
                            Zero
                        }
                    }
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PCI0.RP24.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (SAT0)
        {
            Name (_ADR, 0x00170000)  // _ADR: Address
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "StorageD3Enable", 
                        Zero
                    }
                }
            })
            OperationRegion (SATR, PCI_Config, Zero, 0x0100)
            Field (SATR, WordAcc, NoLock, Preserve)
            {
                Offset (0x74), 
                Offset (0x75), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }
                ElseIf ((Arg0 == ToUUID ("9cd9cddd-8845-4afd-8392-31c4eb87cabd") /* Unknown UUID */))
                {
                    Return (D3AS (Arg1, Arg2, Arg3))
                }
                ElseIf ((CondRefOf (SATC) && CondRefOf (SATD)))
                {
                    If (SATC (Arg0))
                    {
                        Return (SATD (Arg0, Arg1, Arg2, Arg3))
                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG ("SATA0 Ctrlr D0")
                If ((PCHS == PCHL))
                {
                    If (!SCFD)
                    {
                        CSD0 (0x14)
                    }
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG ("SATA0 Ctrlr D3")
                If ((PCHS == PCHL))
                {
                    CSD3 (0x14)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((PMES == One))
                {
                    Notify (SAT0, 0x02) // Device Wake
                }
            }

            Device (PRT0)
            {
                Name (_ADR, 0xFFFF)  // _ADR: Address
                Name (IDAS, 0xFF)
                Name (IDDC, 0xFF)
                Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                {
                    CreateByteField (Arg0, 0x0100, BFAS)
                    ToInteger (BFAS, IDAS) /* \_SB_.PCI0.SAT0.PRT0.IDAS */
                    CreateByteField (Arg0, 0xA7, BFDC)
                    ToInteger (BFDC, IDDC) /* \_SB_.PCI0.SAT0.PRT0.IDDC */
                    Return (Zero)
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    If ((((IDAS & One) == One) && ((IDDC & 0x08
                        ) == 0x08)))
                    {
                        Return (Buffer (0x0E)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5, 0xC1,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1               // ......
                        })
                    }

                    If (((IDAS & One) == One))
                    {
                        Return (Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5         // .......
                        })
                    }

                    If (((IDDC & 0x08) == 0x08))
                    {
                        Return (Buffer (0x07)
                        {
                             0xC1, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1         // .......
                        })
                    }

                    Return (Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                    })
                }

                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & One))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT1)
            {
                Name (_ADR, 0x0001FFFF)  // _ADR: Address
                Name (IDAS, 0xFF)
                Name (IDDC, 0xFF)
                Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                {
                    CreateByteField (Arg0, 0x0100, BFAS)
                    ToInteger (BFAS, IDAS) /* \_SB_.PCI0.SAT0.PRT1.IDAS */
                    CreateByteField (Arg0, 0xA7, BFDC)
                    ToInteger (BFDC, IDDC) /* \_SB_.PCI0.SAT0.PRT1.IDDC */
                    Return (Zero)
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    If ((((IDAS & One) == One) && ((IDDC & 0x08
                        ) == 0x08)))
                    {
                        Return (Buffer (0x0E)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5, 0xC1,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1               // ......
                        })
                    }

                    If (((IDAS & One) == One))
                    {
                        Return (Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5         // .......
                        })
                    }

                    If (((IDDC & 0x08) == 0x08))
                    {
                        Return (Buffer (0x07)
                        {
                             0xC1, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1         // .......
                        })
                    }

                    Return (Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                    })
                }

                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x0002FFFF)  // _ADR: Address
                Name (IDAS, 0xFF)
                Name (IDDC, 0xFF)
                Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                {
                    CreateByteField (Arg0, 0x0100, BFAS)
                    ToInteger (BFAS, IDAS) /* \_SB_.PCI0.SAT0.PRT2.IDAS */
                    CreateByteField (Arg0, 0xA7, BFDC)
                    ToInteger (BFDC, IDDC) /* \_SB_.PCI0.SAT0.PRT2.IDDC */
                    Return (Zero)
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    If ((((IDAS & One) == One) && ((IDDC & 0x08
                        ) == 0x08)))
                    {
                        Return (Buffer (0x0E)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5, 0xC1,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1               // ......
                        })
                    }

                    If (((IDAS & One) == One))
                    {
                        Return (Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5         // .......
                        })
                    }

                    If (((IDDC & 0x08) == 0x08))
                    {
                        Return (Buffer (0x07)
                        {
                             0xC1, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1         // .......
                        })
                    }

                    Return (Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                    })
                }

                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x04))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x0003FFFF)  // _ADR: Address
                Name (IDAS, 0xFF)
                Name (IDDC, 0xFF)
                Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                {
                    CreateByteField (Arg0, 0x0100, BFAS)
                    ToInteger (BFAS, IDAS) /* \_SB_.PCI0.SAT0.PRT3.IDAS */
                    CreateByteField (Arg0, 0xA7, BFDC)
                    ToInteger (BFDC, IDDC) /* \_SB_.PCI0.SAT0.PRT3.IDDC */
                    Return (Zero)
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    If ((((IDAS & One) == One) && ((IDDC & 0x08
                        ) == 0x08)))
                    {
                        Return (Buffer (0x0E)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5, 0xC1,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1               // ......
                        })
                    }

                    If (((IDAS & One) == One))
                    {
                        Return (Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5         // .......
                        })
                    }

                    If (((IDDC & 0x08) == 0x08))
                    {
                        Return (Buffer (0x07)
                        {
                             0xC1, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1         // .......
                        })
                    }

                    Return (Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                    })
                }

                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x08))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x0004FFFF)  // _ADR: Address
                Name (IDAS, 0xFF)
                Name (IDDC, 0xFF)
                Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                {
                    CreateByteField (Arg0, 0x0100, BFAS)
                    ToInteger (BFAS, IDAS) /* \_SB_.PCI0.SAT0.PRT4.IDAS */
                    CreateByteField (Arg0, 0xA7, BFDC)
                    ToInteger (BFDC, IDDC) /* \_SB_.PCI0.SAT0.PRT4.IDDC */
                    Return (Zero)
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    If ((((IDAS & One) == One) && ((IDDC & 0x08
                        ) == 0x08)))
                    {
                        Return (Buffer (0x0E)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5, 0xC1,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1               // ......
                        })
                    }

                    If (((IDAS & One) == One))
                    {
                        Return (Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5         // .......
                        })
                    }

                    If (((IDDC & 0x08) == 0x08))
                    {
                        Return (Buffer (0x07)
                        {
                             0xC1, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1         // .......
                        })
                    }

                    Return (Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                    })
                }

                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x10))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT5)
            {
                Name (_ADR, 0x0005FFFF)  // _ADR: Address
                Name (IDAS, 0xFF)
                Name (IDDC, 0xFF)
                Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                {
                    CreateByteField (Arg0, 0x0100, BFAS)
                    ToInteger (BFAS, IDAS) /* \_SB_.PCI0.SAT0.PRT5.IDAS */
                    CreateByteField (Arg0, 0xA7, BFDC)
                    ToInteger (BFDC, IDDC) /* \_SB_.PCI0.SAT0.PRT5.IDDC */
                    Return (Zero)
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    If ((((IDAS & One) == One) && ((IDDC & 0x08
                        ) == 0x08)))
                    {
                        Return (Buffer (0x0E)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5, 0xC1,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1               // ......
                        })
                    }

                    If (((IDAS & One) == One))
                    {
                        Return (Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF5         // .......
                        })
                    }

                    If (((IDDC & 0x08) == 0x08))
                    {
                        Return (Buffer (0x07)
                        {
                             0xC1, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xB1         // .......
                        })
                    }

                    Return (Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                    })
                }

                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x20))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (NVM1)
            {
                Name (_ADR, 0x00C1FFFF)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    NITV = NIT1 /* \NIT1 */
                    NPMV = NPM1 /* \NPM1 */
                    NPCV = NPC1 /* \NPC1 */
                    NL1V = NL11 /* \NL11 */
                    ND2V = ND21 /* \ND21 */
                    ND1V = ND11 /* \ND11 */
                    NLRV = NLR1 /* \NLR1 */
                    NLDV = NLD1 /* \NLD1 */
                    NEAV = NEA1 /* \NEA1 */
                    NEBV = NEB1 /* \NEB1 */
                    NECV = NEC1 /* \NEC1 */
                    NRAV = NRA1 /* \NRA1 */
                    NMBV = NMB1 /* \NMB1 */
                    NMVV = NMV1 /* \NMV1 */
                    NPBV = NPB1 /* \NPB1 */
                    NPVV = NPV1 /* \NPV1 */
                    NRPN = NRP1 /* \NRP1 */
                    NCRN = Zero
                }

                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Name (NRPN, Zero)
                Name (MXIE, Zero)
                Name (ID3C, Zero)
                Name (ID3H, Zero)
                Name (CSAV, Zero)
                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("_PS3r:", ToHexString (_ADR)))
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD3 ()
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("_PS0r:", ToHexString (_ADR)))
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD0 ()
                }

                Method (RL23, 0, NotSerialized)
                {
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x04, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x04))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFFF, 0x08, One)
                }

                Method (RLA, 0, NotSerialized)
                {
                    RDCA (NCRN, 0x0420, 0xBFFFFFFF, Zero, One)
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x08, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x08))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0420, 0xFFFFFFFF, 0x40000000, One)
                    Local0 = Zero
                    While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFF7, Zero, One)
                }

                Method (RPON, 0, Serialized)
                {
                    ADBG (Concatenate ("RPONs: ", ToHexString (_ADR)))
                    If ((ID3C == Zero))
                    {
                        ADBG ("RPON: no D3C")
                        Return (Zero)
                    }

                    RSON (NRPN)
                    RLA ()
                    Sleep (0x64)
                    ID3C = Zero
                    ADBG (Concatenate ("RPONe: ", ToHexString (_ADR)))
                }

                Method (RPOF, 0, Serialized)
                {
                    ADBG (Concatenate ("RPOFs: ", ToHexString (_ADR)))
                    If ((ID3H == Zero))
                    {
                        ADBG ("RPOF: No D3H")
                        BreakPoint
                        Return (Zero)
                    }

                    If (!D3CS (NRPN))
                    {
                        Return (Zero)
                    }

                    RL23 ()
                    RSOF (NRPN)
                    ID3C = One
                }

                Method (SAVC, 0, Serialized)
                {
                    ADBG (Concatenate ("SAVC:", ToHexString (_ADR)))
                    PCMD = RDCA (NCRN, 0x04, Zero, Zero, 0x02)
                    If ((NITV == One))
                    {
                        PRBI = 0x24
                        PRBD = RDCA (NCRN, 0x24, Zero, Zero, 0x02)
                    }
                    ElseIf ((NITV == 0x02))
                    {
                        PRBI = 0x10
                        PRBD = RDCA (NCRN, 0x10, Zero, Zero, 0x02)
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        MXIE = RDCA (NCRN, TCSO, Zero, Zero, 0x02)
                    }

                    CSAV = One
                }

                Method (NVD3, 0, Serialized)
                {
                    ADBG (Concatenate ("NVD3:", ToHexString (_ADR)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == One))
                    {
                        ADBG ("Skip in D3")
                        Return (Zero)
                    }

                    SAVC ()
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, 0x03, 0x03)
                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, 0x03, One)
                    ID3H = One
                    Return (Zero)
                }

                Method (NVD0, 0, Serialized)
                {
                    ADBG (Concatenate ("NVD0:", ToHexString (_ADR)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == Zero))
                    {
                        ADBG ("Remap already in D0")
                        Return (Zero)
                    }

                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, Zero, One)
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, Zero, 0x03)
                    If ((CSAV == One))
                    {
                        CNRS ()
                        If ((NITV == 0x02))
                        {
                            OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                            Field (MCRC, AnyAcc, NoLock, Preserve)
                            {
                                SCSO,   8, 
                                Offset (0x02), 
                                TCSO,   8, 
                                    ,   7, 
                                RE,     1
                            }

                            RDCA (NCRN, TCSO, 0xFFFFFFFF, (MXIE & 0x80000000), 0x03)
                            ADBG ("NVD0:  MSIXe")
                        }
                    }
                    Else
                    {
                        ADBG ("Skip remap restore")
                    }

                    ID3H = Zero
                    Return (Zero)
                }

                Method (CNRS, 0, Serialized)
                {
                    ADBG (Concatenate ("CNRSs ", ToDecimalString (Timer)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    If ((NL1V != Zero))
                    {
                        RDCA (NCRN, (NL1V + 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0x0F, (ND1V & 0xFFFFFFF0), 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If ((NLRV != Zero))
                    {
                        RDCA (NCRN, (NLRV + 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFEBF, (NEAV & 0xFFFC), 0x03)
                    RDCA (NCRN, (NPCV + 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, (NPCV + 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (((NEAV & 0x40) == 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        ADBG (Concatenate ("CNRSw ", ToDecimalString (Timer)))
                        While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    ADBG (Concatenate ("CNRSx ", ToDecimalString (Timer)))
                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFFFC, (NEAV & 0x03), 0x03)
                    If ((NMVV != Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If ((NPVV != Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }

                    ADBG (Concatenate ("CNRSe ", ToDecimalString (Timer)))
                }
            }

            Device (NVM2)
            {
                Name (_ADR, 0x00C2FFFF)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    NITV = NIT2 /* \NIT2 */
                    NPMV = NPM2 /* \NPM2 */
                    NPCV = NPC2 /* \NPC2 */
                    NL1V = NL12 /* \NL12 */
                    ND2V = ND22 /* \ND22 */
                    ND1V = ND12 /* \ND12 */
                    NLRV = NLR2 /* \NLR2 */
                    NLDV = NLD2 /* \NLD2 */
                    NEAV = NEA2 /* \NEA2 */
                    NEBV = NEB2 /* \NEB2 */
                    NECV = NEC2 /* \NEC2 */
                    NRAV = NRA2 /* \NRA2 */
                    NMBV = NMB2 /* \NMB2 */
                    NMVV = NMV2 /* \NMV2 */
                    NPBV = NPB2 /* \NPB2 */
                    NPVV = NPV2 /* \NPV2 */
                    NRPN = NRP2 /* \NRP2 */
                    NCRN = One
                }

                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Name (NRPN, Zero)
                Name (MXIE, Zero)
                Name (ID3C, Zero)
                Name (ID3H, Zero)
                Name (CSAV, Zero)
                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("_PS3r:", ToHexString (_ADR)))
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD3 ()
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("_PS0r:", ToHexString (_ADR)))
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD0 ()
                }

                Method (RL23, 0, NotSerialized)
                {
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x04, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x04))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFFF, 0x08, One)
                }

                Method (RLA, 0, NotSerialized)
                {
                    RDCA (NCRN, 0x0420, 0xBFFFFFFF, Zero, One)
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x08, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x08))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0420, 0xFFFFFFFF, 0x40000000, One)
                    Local0 = Zero
                    While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFF7, Zero, One)
                }

                Method (RPON, 0, Serialized)
                {
                    ADBG (Concatenate ("RPONs: ", ToHexString (_ADR)))
                    If ((ID3C == Zero))
                    {
                        ADBG ("RPON: no D3C")
                        Return (Zero)
                    }

                    RSON (NRPN)
                    RLA ()
                    Sleep (0x64)
                    ID3C = Zero
                    ADBG (Concatenate ("RPONe: ", ToHexString (_ADR)))
                }

                Method (RPOF, 0, Serialized)
                {
                    ADBG (Concatenate ("RPOFs: ", ToHexString (_ADR)))
                    If ((ID3H == Zero))
                    {
                        ADBG ("RPOF: No D3H")
                        BreakPoint
                        Return (Zero)
                    }

                    If (!D3CS (NRPN))
                    {
                        Return (Zero)
                    }

                    RL23 ()
                    RSOF (NRPN)
                    ID3C = One
                }

                Method (SAVC, 0, Serialized)
                {
                    ADBG (Concatenate ("SAVC:", ToHexString (_ADR)))
                    PCMD = RDCA (NCRN, 0x04, Zero, Zero, 0x02)
                    If ((NITV == One))
                    {
                        PRBI = 0x24
                        PRBD = RDCA (NCRN, 0x24, Zero, Zero, 0x02)
                    }
                    ElseIf ((NITV == 0x02))
                    {
                        PRBI = 0x10
                        PRBD = RDCA (NCRN, 0x10, Zero, Zero, 0x02)
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        MXIE = RDCA (NCRN, TCSO, Zero, Zero, 0x02)
                    }

                    CSAV = One
                }

                Method (NVD3, 0, Serialized)
                {
                    ADBG (Concatenate ("NVD3:", ToHexString (_ADR)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == One))
                    {
                        ADBG ("Skip in D3")
                        Return (Zero)
                    }

                    SAVC ()
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, 0x03, 0x03)
                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, 0x03, One)
                    ID3H = One
                    Return (Zero)
                }

                Method (NVD0, 0, Serialized)
                {
                    ADBG (Concatenate ("NVD0:", ToHexString (_ADR)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == Zero))
                    {
                        ADBG ("Remap already in D0")
                        Return (Zero)
                    }

                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, Zero, One)
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, Zero, 0x03)
                    If ((CSAV == One))
                    {
                        CNRS ()
                        If ((NITV == 0x02))
                        {
                            OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                            Field (MCRC, AnyAcc, NoLock, Preserve)
                            {
                                SCSO,   8, 
                                Offset (0x02), 
                                TCSO,   8, 
                                    ,   7, 
                                RE,     1
                            }

                            RDCA (NCRN, TCSO, 0xFFFFFFFF, (MXIE & 0x80000000), 0x03)
                            ADBG ("NVD0:  MSIXe")
                        }
                    }
                    Else
                    {
                        ADBG ("Skip remap restore")
                    }

                    ID3H = Zero
                    Return (Zero)
                }

                Method (CNRS, 0, Serialized)
                {
                    ADBG (Concatenate ("CNRSs ", ToDecimalString (Timer)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    If ((NL1V != Zero))
                    {
                        RDCA (NCRN, (NL1V + 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0x0F, (ND1V & 0xFFFFFFF0), 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If ((NLRV != Zero))
                    {
                        RDCA (NCRN, (NLRV + 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFEBF, (NEAV & 0xFFFC), 0x03)
                    RDCA (NCRN, (NPCV + 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, (NPCV + 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (((NEAV & 0x40) == 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        ADBG (Concatenate ("CNRSw ", ToDecimalString (Timer)))
                        While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    ADBG (Concatenate ("CNRSx ", ToDecimalString (Timer)))
                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFFFC, (NEAV & 0x03), 0x03)
                    If ((NMVV != Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If ((NPVV != Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }

                    ADBG (Concatenate ("CNRSe ", ToDecimalString (Timer)))
                }
            }

            Device (NVM3)
            {
                Name (_ADR, 0x00C3FFFF)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    NITV = NIT3 /* \NIT3 */
                    NPMV = NPM3 /* \NPM3 */
                    NPCV = NPC3 /* \NPC3 */
                    NL1V = NL13 /* \NL13 */
                    ND2V = ND23 /* \ND23 */
                    ND1V = ND13 /* \ND13 */
                    NLRV = NLR3 /* \NLR3 */
                    NLDV = NLD3 /* \NLD3 */
                    NEAV = NEA3 /* \NEA3 */
                    NEBV = NEB3 /* \NEB3 */
                    NECV = NEC3 /* \NEC3 */
                    NRAV = NRA3 /* \NRA3 */
                    NMBV = NMB3 /* \NMB3 */
                    NMVV = NMV3 /* \NMV3 */
                    NPBV = NPB3 /* \NPB3 */
                    NPVV = NPV3 /* \NPV3 */
                    NRPN = NRP3 /* \NRP3 */
                    NCRN = 0x02
                }

                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Name (NRPN, Zero)
                Name (MXIE, Zero)
                Name (ID3C, Zero)
                Name (ID3H, Zero)
                Name (CSAV, Zero)
                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("_PS3r:", ToHexString (_ADR)))
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD3 ()
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("_PS0r:", ToHexString (_ADR)))
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD0 ()
                }

                Method (RL23, 0, NotSerialized)
                {
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x04, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x04))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFFF, 0x08, One)
                }

                Method (RLA, 0, NotSerialized)
                {
                    RDCA (NCRN, 0x0420, 0xBFFFFFFF, Zero, One)
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x08, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x08))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0420, 0xFFFFFFFF, 0x40000000, One)
                    Local0 = Zero
                    While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFF7, Zero, One)
                }

                Method (RPON, 0, Serialized)
                {
                    ADBG (Concatenate ("RPONs: ", ToHexString (_ADR)))
                    If ((ID3C == Zero))
                    {
                        ADBG ("RPON: no D3C")
                        Return (Zero)
                    }

                    RSON (NRPN)
                    RLA ()
                    Sleep (0x64)
                    ID3C = Zero
                    ADBG (Concatenate ("RPONe: ", ToHexString (_ADR)))
                }

                Method (RPOF, 0, Serialized)
                {
                    ADBG (Concatenate ("RPOFs: ", ToHexString (_ADR)))
                    If ((ID3H == Zero))
                    {
                        ADBG ("RPOF: No D3H")
                        BreakPoint
                        Return (Zero)
                    }

                    If (!D3CS (NRPN))
                    {
                        Return (Zero)
                    }

                    RL23 ()
                    RSOF (NRPN)
                    ID3C = One
                }

                Method (SAVC, 0, Serialized)
                {
                    ADBG (Concatenate ("SAVC:", ToHexString (_ADR)))
                    PCMD = RDCA (NCRN, 0x04, Zero, Zero, 0x02)
                    If ((NITV == One))
                    {
                        PRBI = 0x24
                        PRBD = RDCA (NCRN, 0x24, Zero, Zero, 0x02)
                    }
                    ElseIf ((NITV == 0x02))
                    {
                        PRBI = 0x10
                        PRBD = RDCA (NCRN, 0x10, Zero, Zero, 0x02)
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        MXIE = RDCA (NCRN, TCSO, Zero, Zero, 0x02)
                    }

                    CSAV = One
                }

                Method (NVD3, 0, Serialized)
                {
                    ADBG (Concatenate ("NVD3:", ToHexString (_ADR)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == One))
                    {
                        ADBG ("Skip in D3")
                        Return (Zero)
                    }

                    SAVC ()
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, 0x03, 0x03)
                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, 0x03, One)
                    ID3H = One
                    Return (Zero)
                }

                Method (NVD0, 0, Serialized)
                {
                    ADBG (Concatenate ("NVD0:", ToHexString (_ADR)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == Zero))
                    {
                        ADBG ("Remap already in D0")
                        Return (Zero)
                    }

                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, Zero, One)
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, Zero, 0x03)
                    If ((CSAV == One))
                    {
                        CNRS ()
                        If ((NITV == 0x02))
                        {
                            OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                            Field (MCRC, AnyAcc, NoLock, Preserve)
                            {
                                SCSO,   8, 
                                Offset (0x02), 
                                TCSO,   8, 
                                    ,   7, 
                                RE,     1
                            }

                            RDCA (NCRN, TCSO, 0xFFFFFFFF, (MXIE & 0x80000000), 0x03)
                            ADBG ("NVD0:  MSIXe")
                        }
                    }
                    Else
                    {
                        ADBG ("Skip remap restore")
                    }

                    ID3H = Zero
                    Return (Zero)
                }

                Method (CNRS, 0, Serialized)
                {
                    ADBG (Concatenate ("CNRSs ", ToDecimalString (Timer)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    If ((NL1V != Zero))
                    {
                        RDCA (NCRN, (NL1V + 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0x0F, (ND1V & 0xFFFFFFF0), 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If ((NLRV != Zero))
                    {
                        RDCA (NCRN, (NLRV + 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFEBF, (NEAV & 0xFFFC), 0x03)
                    RDCA (NCRN, (NPCV + 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, (NPCV + 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (((NEAV & 0x40) == 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        ADBG (Concatenate ("CNRSw ", ToDecimalString (Timer)))
                        While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    ADBG (Concatenate ("CNRSx ", ToDecimalString (Timer)))
                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFFFC, (NEAV & 0x03), 0x03)
                    If ((NMVV != Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If ((NPVV != Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }

                    ADBG (Concatenate ("CNRSe ", ToDecimalString (Timer)))
                }
            }

            Method (RDCA, 5, Serialized)
            {
                OperationRegion (RPAL, SystemMemory, (GPCB () + (0x000B8100 + Arg1)), 0x04)
                Field (RPAL, DWordAcc, Lock, Preserve)
                {
                    RPCD,   32
                }

                OperationRegion (EPAC, SystemMemory, (GPCB () + 0x000B8308), 0x08)
                Field (EPAC, DWordAcc, Lock, Preserve)
                {
                    CAIR,   32, 
                    CADR,   32
                }

                OperationRegion (NCRG, SystemMemory, (GPCB () + 0x000B8FC0), 0x04)
                Field (NCRG, DWordAcc, Lock, Preserve)
                {
                    CRGC,   32
                }

                If ((Arg0 > 0x02))
                {
                    Return (Zero)
                }
                Else
                {
                    CRGC = Arg0
                }

                Switch (ToInteger (Arg4))
                {
                    Case (Zero)
                    {
                        Return (RPCD) /* \_SB_.PCI0.SAT0.RDCA.RPCD */
                    }
                    Case (0x02)
                    {
                        CAIR = Arg1
                        Return (CADR) /* \_SB_.PCI0.SAT0.RDCA.CADR */
                    }
                    Case (One)
                    {
                        Local0 = (Arg2 & RPCD) /* \_SB_.PCI0.SAT0.RDCA.RPCD */
                        Local0 |= Arg3
                        RPCD = Local0
                    }
                    Case (0x03)
                    {
                        CAIR = Arg1
                        Local0 = (Arg2 & CADR) /* \_SB_.PCI0.SAT0.RDCA.CADR */
                        Local0 |= Arg3
                        CADR = Local0
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Zero)
            }

            Method (D3CS, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (0x04)
                    {
                        If (CondRefOf (\_SB.PCI0.RP05.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x06)
                    {
                        If (CondRefOf (\_SB.PCI0.RP07.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (\_SB.PCI0.RP09.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x0A)
                    {
                        If (CondRefOf (\_SB.PCI0.RP11.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x0C)
                    {
                        If (CondRefOf (\_SB.PCI0.RP13.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x0E)
                    {
                        If (CondRefOf (\_SB.PCI0.RP15.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x10)
                    {
                        If (CondRefOf (\_SB.PCI0.RP17.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x12)
                    {
                        If (CondRefOf (\_SB.PCI0.RP19.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x14)
                    {
                        If (CondRefOf (\_SB.PCI0.RP21.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x16)
                    {
                        If (CondRefOf (\_SB.PCI0.RP23.POFF))
                        {
                            Return (One)
                        }
                    }

                }

                Return (Zero)
            }

            Method (RSON, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (0x04)
                    {
                        If (CondRefOf (\_SB.PCI0.RP05.PON))
                        {
                            ^^RP05.PON ()
                        }
                    }
                    Case (0x06)
                    {
                        If (CondRefOf (\_SB.PCI0.RP07.PON))
                        {
                            ^^RP07.PON ()
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (\_SB.PCI0.RP09.PON))
                        {
                            ^^RP09.PON ()
                        }
                    }
                    Case (0x0A)
                    {
                        If (CondRefOf (\_SB.PCI0.RP11.PON))
                        {
                            ^^RP11.PON ()
                        }
                    }
                    Case (0x0C)
                    {
                        If (CondRefOf (\_SB.PCI0.RP13.PON))
                        {
                            ^^RP13.PON ()
                        }
                    }
                    Case (0x0E)
                    {
                        If (CondRefOf (\_SB.PCI0.RP15.PON))
                        {
                            ^^RP15.PON ()
                        }
                    }
                    Case (0x10)
                    {
                        If (CondRefOf (\_SB.PCI0.RP17.PON))
                        {
                            ^^RP17.PON ()
                        }
                    }
                    Case (0x12)
                    {
                        If (CondRefOf (\_SB.PCI0.RP19.PON))
                        {
                            ^^RP19.PON ()
                        }
                    }
                    Case (0x14)
                    {
                        If (CondRefOf (\_SB.PCI0.RP21.PON))
                        {
                            ^^RP21.PON ()
                        }
                    }
                    Case (0x16)
                    {
                        If (CondRefOf (\_SB.PCI0.RP23.PON))
                        {
                            ^^RP23.PON ()
                        }
                    }

                }
            }

            Method (RSOF, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (0x04)
                    {
                        If (CondRefOf (\_SB.PCI0.RP05.POFF))
                        {
                            ^^RP05.POFF ()
                        }
                    }
                    Case (0x06)
                    {
                        If (CondRefOf (\_SB.PCI0.RP07.POFF))
                        {
                            ^^RP07.POFF ()
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (\_SB.PCI0.RP09.POFF))
                        {
                            ^^RP09.POFF ()
                        }
                    }
                    Case (0x0A)
                    {
                        If (CondRefOf (\_SB.PCI0.RP11.POFF))
                        {
                            ^^RP11.POFF ()
                        }
                    }
                    Case (0x0C)
                    {
                        If (CondRefOf (\_SB.PCI0.RP13.POFF))
                        {
                            ^^RP13.POFF ()
                        }
                    }
                    Case (0x0E)
                    {
                        If (CondRefOf (\_SB.PCI0.RP15.POFF))
                        {
                            ^^RP15.POFF ()
                        }
                    }
                    Case (0x10)
                    {
                        If (CondRefOf (\_SB.PCI0.RP17.POFF))
                        {
                            ^^RP17.POFF ()
                        }
                    }
                    Case (0x12)
                    {
                        If (CondRefOf (\_SB.PCI0.RP19.POFF))
                        {
                            ^^RP19.POFF ()
                        }
                    }
                    Case (0x14)
                    {
                        If (CondRefOf (\_SB.PCI0.RP21.POFF))
                        {
                            ^^RP21.POFF ()
                        }
                    }
                    Case (0x16)
                    {
                        If (CondRefOf (\_SB.PCI0.RP23.POFF))
                        {
                            ^^RP23.POFF ()
                        }
                    }

                }
            }

            Name (VL0M, Zero)
            Name (VL1M, Zero)
            Name (VL2M, Zero)
            Name (VR3A, One)
            Method (IRM, 1, NotSerialized)
            {
                If ((VL0M & Arg0))
                {
                    Return (One)
                }
                ElseIf ((VL1M & Arg0))
                {
                    Return (One)
                }
                ElseIf ((VL2M & Arg0))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (PD3C, 1, NotSerialized)
            {
                Return ((!VR3A || IRM (Arg0)))
            }

            Scope (PRT0)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (One))
                }
            }

            Scope (PRT1)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x02))
                }
            }

            Scope (PRT2)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x04))
                }
            }

            Scope (PRT3)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x08))
                }
            }

            Scope (PRT4)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x10))
                }
            }

            Scope (PRT5)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x20))
                }
            }

            Scope (NVM1)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x0100))
                }
            }

            Scope (NVM2)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x0200))
                }
            }

            Scope (NVM3)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x0400))
                }
            }

            Method (RSTD, 5, Serialized)
            {
                If ((Arg0 == ToUUID ("e03e3431-e510-4fa2-abc0-2d7e901245fe") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (RBUF, Buffer (One)
                            {
                                 0x00                                             // .
                            })
                            CreateByteField (RBUF, Zero, SFUN)
                            SFUN = 0x3F
                            Return (RBUF) /* \_SB_.PCI0.SAT0.RSTD.RBUF */
                        }
                        Case (One)
                        {
                            Arg4 = DerefOf (Arg3 [Zero])
                            Local0 = DerefOf (Arg3 [Zero])
                            ADBG (Concatenate ("RSTD.SET:", ToHexString (Local0)))
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }
                        Case (0x02)
                        {
                            Local0 = DerefOf (Arg3 [Zero])
                            ADBG (Concatenate ("RSTD.ON:", ToHexString (Local0)))
                            CPON (Local0)
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }
                        Case (0x03)
                        {
                            Local0 = DerefOf (Arg3 [Zero])
                            ADBG (Concatenate ("RSTD.OFF:", ToHexString (Local0)))
                            CPOF (Local0)
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }
                        Case (0x04)
                        {
                            Name (GETM, Buffer (One)
                            {
                                 0x00                                             // .
                            })
                            CreateByteField (GETM, Zero, GMSK)
                            GMSK = Arg4
                            ADBG (Concatenate ("RSTD.GET:", ToHexString (GMSK)))
                            Return (GETM) /* \_SB_.PCI0.SAT0.RSTD.GETM */
                        }
                        Case (0x05)
                        {
                            VR3A = DerefOf (Arg3 [Zero])
                            ADBG (Concatenate ("RSTD.D3A:", ToHexString (VR3A)))
                            Return (Zero)
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                0x02
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (D3AS, 3, Serialized)
            {
                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        If ((PSON == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (CPON, 1, Serialized)
            {
                If ((CondRefOf (\_SB.PCI0.SAT0.PRT0.SPON) && (Arg0 & One)))
                {
                    ^PRT0.SPON ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.PRT1.SPON) && (Arg0 & 0x02)))
                {
                    ^PRT1.SPON ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.PRT2.SPON) && (Arg0 & 0x04)))
                {
                    ^PRT2.SPON ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.PRT3.SPON) && (Arg0 & 0x08)))
                {
                    ^PRT3.SPON ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.PRT4.SPON) && (Arg0 & 0x10)))
                {
                    ^PRT4.SPON ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.PRT5.SPON) && (Arg0 & 0x20)))
                {
                    ^PRT5.SPON ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM1.RPON) && (Arg0 & 0x0100)))
                {
                    ^NVM1.RPON ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM1.NVD0) && (Arg0 & 0x0100)))
                {
                    ^NVM1.NVD0 ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM2.RPON) && (Arg0 & 0x0200)))
                {
                    ^NVM2.RPON ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM2.NVD0) && (Arg0 & 0x0200)))
                {
                    ^NVM2.NVD0 ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM3.RPON) && (Arg0 & 0x0400)))
                {
                    ^NVM3.RPON ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM3.NVD0) && (Arg0 & 0x0400)))
                {
                    ^NVM3.NVD0 ()
                }
            }

            Method (CPOF, 1, Serialized)
            {
                If ((CondRefOf (\_SB.PCI0.SAT0.PRT0.SPOF) && (Arg0 & One)))
                {
                    ^PRT0.SPOF ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.PRT1.SPOF) && (Arg0 & 0x02)))
                {
                    ^PRT1.SPOF ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.PRT2.SPOF) && (Arg0 & 0x04)))
                {
                    ^PRT2.SPOF ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.PRT3.SPOF) && (Arg0 & 0x08)))
                {
                    ^PRT3.SPOF ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.PRT4.SPOF) && (Arg0 & 0x10)))
                {
                    ^PRT4.SPOF ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.PRT5.SPOF) && (Arg0 & 0x20)))
                {
                    ^PRT5.SPOF ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM1.NVD3) && (Arg0 & 0x0100)))
                {
                    ^NVM1.NVD3 ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM1.RPOF) && (Arg0 & 0x0100)))
                {
                    ^NVM1.RPOF ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM2.NVD3) && (Arg0 & 0x0200)))
                {
                    ^NVM2.NVD3 ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM2.RPOF) && (Arg0 & 0x0200)))
                {
                    ^NVM2.RPOF ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM3.NVD3) && (Arg0 & 0x0400)))
                {
                    ^NVM3.NVD3 ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM3.RPOF) && (Arg0 & 0x0400)))
                {
                    ^NVM3.RPOF ()
                }
            }

            Device (VOL0)
            {
                Name (_ADR, 0x0080FFFF)  // _ADR: Address
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    V0PR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    V0PR
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Return (RSTD (Arg0, Arg1, Arg2, Arg3, RefOf (VL0M)))
                }

                PowerResource (V0PR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG (Concatenate ("VOL0._ON:", ToHexString (VL0M)))
                        If (VR3A)
                        {
                            CPON (VL0M)
                            _STA = One
                        }
                        Else
                        {
                            ADBG ("Global RTD3 lock")
                        }
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG (Concatenate ("VOL0._OFF:", ToHexString (VL0M)))
                        If (VR3A)
                        {
                            CPOF (VL0M)
                            _STA = Zero
                        }
                        Else
                        {
                            ADBG ("Global RTD3 lock")
                        }
                    }
                }
            }

            Device (VOL1)
            {
                Name (_ADR, 0x0081FFFF)  // _ADR: Address
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    V1PR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    V1PR
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Return (RSTD (Arg0, Arg1, Arg2, Arg3, RefOf (VL1M)))
                }

                PowerResource (V1PR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG (Concatenate ("VOL1._ON:", ToHexString (VL1M)))
                        If (VR3A)
                        {
                            CPON (VL1M)
                            _STA = One
                        }
                        Else
                        {
                            ADBG ("Global RTD3 lock")
                        }
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG (Concatenate ("VOL1._OFF:", ToHexString (VL1M)))
                        If (VR3A)
                        {
                            CPOF (VL1M)
                            _STA = Zero
                        }
                        Else
                        {
                            ADBG ("Global RTD3 lock")
                        }
                    }
                }
            }

            Device (VOL2)
            {
                Name (_ADR, 0x0082FFFF)  // _ADR: Address
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    V2PR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    V2PR
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Return (RSTD (Arg0, Arg1, Arg2, Arg3, RefOf (VL2M)))
                }

                PowerResource (V2PR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG (Concatenate ("VOL2._ON:", ToHexString (VL2M)))
                        If (VR3A)
                        {
                            CPON (VL2M)
                            _STA = One
                        }
                        Else
                        {
                            ADBG ("Global RTD3 lock")
                        }
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG (Concatenate ("VOL2._OFF:", ToHexString (VL2M)))
                        If (VR3A)
                        {
                            CPOF (VL2M)
                            _STA = Zero
                        }
                        Else
                        {
                            ADBG ("Global RTD3 lock")
                        }
                    }
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (GPI0)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((GPHD == One))
                {
                    Return ("PNP0C02")
                }

                If ((PCHS == PCHH))
                {
                    Return ("INT3450")
                }

                Return ("INT34BB")
            }

            Name (LINK, "\\_SB.PCI0.GPI0")
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y20)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y21)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y23)
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y22)
                    {
                        0x0000000E,
                    }
                })
                Name (CBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y24)
                })
                CreateDWordField (RBUF, \_SB.PCI0.GPI0._CRS._Y20._BAS, COM0)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.GPI0._CRS._Y21._BAS, COM1)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.GPI0._CRS._Y22._INT, IRQN)  // _INT: Interrupts
                COM0 = (SBRG + 0x006E0000)
                COM1 = (SBRG + 0x006D0000)
                IRQN = SGIR /* \SGIR */
                If ((PCHS == PCHH))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.GPI0._CRS._Y23._BAS, CMH3)  // _BAS: Base Address
                    CMH3 = (SBRG + 0x006B0000)
                    CreateDWordField (CBUF, \_SB.PCI0.GPI0._CRS._Y24._BAS, CMH4)  // _BAS: Base Address
                    CMH4 = (SBRG + 0x006A0000)
                    Return (ConcatenateResTemplate (RBUF, CBUF))
                }
                Else
                {
                    CreateDWordField (RBUF, \_SB.PCI0.GPI0._CRS._Y23._BAS, CML4)  // _BAS: Base Address
                    CML4 = (SBRG + 0x006A0000)
                    Return (RBUF) /* \_SB_.PCI0.GPI0._CRS.RBUF */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((GPHD == One))
                {
                    Return (0x03)
                }

                Return (0x0F)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (LPD3, 2, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, Arg0, 0x88)
            Field (ICB1, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BAR0,   64
            }

            Field (ICB1, ByteAcc, NoLock, Preserve)
            {
                Offset (0x84), 
                PMEC,   8
            }

            PMEC = 0x03
            TEMP = PMEC /* \_SB_.PCI0.LPD3.PMEC */
            If ((Arg1 == One))
            {
                BAR0 = Zero
            }
        }

        Method (LPD0, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, (Arg0 + 0x84), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                PMEC,   32
            }

            PMEC &= 0xFFFF7FFC
            TEMP = PMEC /* \_SB_.PCI0.LPD0.PMEC */
        }

        Method (LHRV, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, (Arg0 + 0x08), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                HRV,    8
            }

            Return (HRV) /* \_SB_.PCI0.LHRV.HRV_ */
        }

        Method (GETD, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, (Arg0 + 0x84), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                PMEC,   32
            }

            Return ((PMEC & 0x03))
        }

        Method (LCRS, 3, Serialized)
        {
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y25)
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y26)
                {
                    0x00000014,
                }
            })
            CreateDWordField (RBUF, \_SB.PCI0.LCRS._Y25._BAS, BVAL)  // _BAS: Base Address
            CreateDWordField (RBUF, \_SB.PCI0.LCRS._Y25._LEN, BLEN)  // _LEN: Length
            CreateDWordField (RBUF, \_SB.PCI0.LCRS._Y26._INT, IRQN)  // _INT: Interrupts
            BVAL = Arg1
            IRQN = Arg2
            If ((Arg0 == 0x03))
            {
                BLEN = 0x08
            }

            Return (RBUF) /* \_SB_.PCI0.LCRS.RBUF */
        }

        Method (LSTA, 1, Serialized)
        {
            If (((Arg0 == Zero) || (Arg0 == 0x03)))
            {
                Return (Zero)
            }

            If (CondRefOf (OSYS))
            {
                If ((OSYS < 0x07DC))
                {
                    Return (Zero)
                }
            }

            Return (0x0F)
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SIRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_STA, 0x03)  // _STA: Status
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (ADDB, 3, Serialized)
            {
                Name (BUFF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00001000,         // Address Length
                        _Y27)
                })
                CreateDWordField (BUFF, \_SB.PCI0.SIRC.ADDB._Y27._BAS, ADDR)  // _BAS: Base Address
                CreateDWordField (BUFF, \_SB.PCI0.SIRC.ADDB._Y27._LEN, LENG)  // _LEN: Length
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If (((Arg0 == 0x02) || (Arg0 == 0x03)))
                {
                    ADDR = Arg2
                    ConcatenateResTemplate (Local0, BUFF, Local1)
                    Local0 = Local1
                }

                If ((Arg0 == 0x03))
                {
                    ADDR = (0x08 + Arg1)
                    LENG = 0x0FF8
                    ConcatenateResTemplate (Local0, BUFF, Local1)
                    Local0 = Local1
                }

                Return (Local0)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                ConcatenateResTemplate (Local0, ADDB (SMD0, SB00, SB10), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD1, SB01, SB11), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD2, SB02, SB12), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD3, SB03, SB13), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD4, SB04, SB14), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD5, SB05, SB15), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD6, SB06, SB16), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD7, SB07, SB17), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD8, SB08, SB18), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD9, SB09, SB19), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMDA, SB0A, SB1A), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMDB, SB0B, SB1B), Local1)
                Local0 = Local1
                If ((^^GPI0._STA () == Zero))
                {
                    ConcatenateResTemplate (Local0, ^^GPI0._CRS (), Local1)
                    Local0 = Local1
                }

                Return (Local0)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C0)
        {
            If ((SMD0 != One))
            {
                Name (_HID, "INT34B2")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB10))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD0, SB00, SIR0))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD0))
                }
            }

            If ((SMD0 == One))
            {
                Name (_ADR, 0x00150000)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB10))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB10)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB10, SMD0)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C1)
        {
            If ((SMD1 != One))
            {
                Name (_HID, "INT34B3")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB11))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD1, SB01, SIR1))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD1))
                }
            }

            If ((SMD1 == One))
            {
                Name (_ADR, 0x00150001)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB11))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB11)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB11, SMD1)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C2)
        {
            If ((SMD2 != One))
            {
                Name (_HID, "INT34B4")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB12))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD2, SB02, SIR2))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD2))
                }
            }

            If ((SMD2 == One))
            {
                Name (_ADR, 0x00150002)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB12))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB12)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB12, SMD2)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C3)
        {
            If ((SMD3 != One))
            {
                Name (_HID, "INT34B5")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB13))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD3, SB03, SIR3))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD3))
                }
            }

            If ((SMD3 == One))
            {
                Name (_ADR, 0x00150003)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB13))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB13)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB13, SMD3)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C4)
        {
            If ((SMD4 != One))
            {
                Name (_HID, "INT34B6")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB14))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD4, SB04, SIR4))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD4))
                }
            }

            If ((SMD4 == One))
            {
                Name (_ADR, 0x00190000)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB14))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB14)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB14, SMD4)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C5)
        {
            If ((SMD5 != One))
            {
                Name (_HID, "INT34B7")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB15))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD5, SB05, SIR5))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD5))
                }
            }

            If ((SMD5 == One))
            {
                Name (_ADR, 0x00190001)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB15))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB15)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB15, SMD5)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SPI0)
        {
            If ((SMD6 != One))
            {
                Name (_HID, "INT34B0")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB16))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD6, SB06, SIR6))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD6))
                }
            }

            If ((SMD6 == One))
            {
                Name (_ADR, 0x001E0002)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB16))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB16)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB16, SMD6)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SPI1)
        {
            If ((SMD7 != One))
            {
                Name (_HID, "INT34B1")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB17))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD7, SB07, SIR7))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD7))
                }
            }

            If ((SMD7 == One))
            {
                Name (_ADR, 0x001E0003)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB17))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB17)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB17, SMD7)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SPI2)
        {
            If ((SMD8 != One))
            {
                Name (_HID, "INT34BC")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB18))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD8, SB08, SIR8))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD8))
                }
            }

            If ((SMD8 == One))
            {
                Name (_ADR, 0x00120006)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB18))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB18)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB18, SMD8)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UA00)
        {
            If ((SMD9 != One))
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((SMD9 == 0x03))
                    {
                        Return (0x020CD041)
                    }
                    Else
                    {
                        Return ("INT34B8")
                    }
                }

                Name (_UID, "SerialIoUart0")  // _UID: Unique ID
                Name (_DDN, "SerialIoUart0")  // _DDN: DOS Device Name
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB19))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD9, SB09, SIR9))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD9))
                }
            }

            If ((SMD9 == One))
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            If ((SMD9 != 0x03))
            {
                Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                {
                    Return (GETD (SB19))
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    LPD0 (SB19)
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    LPD3 (SB19, SMD9)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UA01)
        {
            If ((SMDA != One))
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((SMDA == 0x03))
                    {
                        Return (0x020CD041)
                    }
                    Else
                    {
                        Return ("INT34B9")
                    }
                }

                Name (_UID, "SerialIoUart1")  // _UID: Unique ID
                Name (_DDN, "SerialIoUart1")  // _DDN: DOS Device Name
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB1A))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMDA, SB0A, SIRA))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMDA))
                }
            }

            If ((SMDA == One))
            {
                Name (_ADR, 0x001E0001)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            If ((SMDA != 0x03))
            {
                Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                {
                    Return (GETD (SB1A))
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    LPD0 (SB1A)
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    LPD3 (SB1A, SMDA)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UA02)
        {
            If ((SMDB != One))
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((SMDB == 0x03))
                    {
                        Return (0x020CD041)
                    }
                    Else
                    {
                        Return ("INT34BA")
                    }
                }

                Name (_UID, "SerialIoUart2")  // _UID: Unique ID
                Name (_DDN, "SerialIoUart2")  // _DDN: DOS Device Name
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB1B))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMDB, SB0B, SIRB))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMDB))
                }
            }

            If ((SMDB == One))
            {
                Name (_ADR, 0x00190002)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            If ((SMDB != 0x03))
            {
                Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                {
                    Return (GETD (SB1B))
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    LPD0 (SB1B)
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    LPD3 (SB1B, SMDB)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Name (HIDG, ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */)
        Name (TP7G, ToUUID ("ef87eb82-f951-46da-84ec-14871ac6f84b") /* Unknown UUID */)
        Method (HIDD, 5, Serialized)
        {
            If ((Arg0 == HIDG))
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == One))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Return (Arg4)
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TP7D, 6, Serialized)
        {
            If ((Arg0 == TP7G))
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == One))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Return (ConcatenateResTemplate (Arg4, Arg5))
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (I2CM, 3, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Name (IIC0, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                            0x00, ResourceConsumer, _Y28, Exclusive,
                            )
                    })
                    CreateWordField (IIC0, \_SB.PCI0.I2CM._Y28._ADR, DAD0)  // _ADR: Address
                    CreateDWordField (IIC0, \_SB.PCI0.I2CM._Y28._SPE, DSP0)  // _SPE: Speed
                    DAD0 = Arg1
                    DSP0 = Arg2
                    Return (IIC0) /* \_SB_.PCI0.I2CM.IIC0 */
                }
                Case (One)
                {
                    Name (IIC1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                            0x00, ResourceConsumer, _Y29, Exclusive,
                            )
                    })
                    CreateWordField (IIC1, \_SB.PCI0.I2CM._Y29._ADR, DAD1)  // _ADR: Address
                    CreateDWordField (IIC1, \_SB.PCI0.I2CM._Y29._SPE, DSP1)  // _SPE: Speed
                    DAD1 = Arg1
                    DSP1 = Arg2
                    Return (IIC1) /* \_SB_.PCI0.I2CM.IIC1 */
                }
                Case (0x02)
                {
                    Name (IIC2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                            0x00, ResourceConsumer, _Y2A, Exclusive,
                            )
                    })
                    CreateWordField (IIC2, \_SB.PCI0.I2CM._Y2A._ADR, DAD2)  // _ADR: Address
                    CreateDWordField (IIC2, \_SB.PCI0.I2CM._Y2A._SPE, DSP2)  // _SPE: Speed
                    DAD2 = Arg1
                    DSP2 = Arg2
                    Return (IIC2) /* \_SB_.PCI0.I2CM.IIC2 */
                }
                Case (0x03)
                {
                    Name (IIC3, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C3",
                            0x00, ResourceConsumer, _Y2B, Exclusive,
                            )
                    })
                    CreateWordField (IIC3, \_SB.PCI0.I2CM._Y2B._ADR, DAD3)  // _ADR: Address
                    CreateDWordField (IIC3, \_SB.PCI0.I2CM._Y2B._SPE, DSP3)  // _SPE: Speed
                    DAD3 = Arg1
                    DSP3 = Arg2
                    Return (IIC3) /* \_SB_.PCI0.I2CM.IIC3 */
                }
                Case (0x04)
                {
                    Name (IIC4, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                            0x00, ResourceConsumer, _Y2C, Exclusive,
                            )
                    })
                    CreateWordField (IIC4, \_SB.PCI0.I2CM._Y2C._ADR, DAD4)  // _ADR: Address
                    CreateDWordField (IIC4, \_SB.PCI0.I2CM._Y2C._SPE, DSP4)  // _SPE: Speed
                    DAD4 = Arg1
                    DSP4 = Arg2
                    Return (IIC4) /* \_SB_.PCI0.I2CM.IIC4 */
                }
                Case (0x05)
                {
                    Name (IIC5, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C5",
                            0x00, ResourceConsumer, _Y2D, Exclusive,
                            )
                    })
                    CreateWordField (IIC5, \_SB.PCI0.I2CM._Y2D._ADR, DAD5)  // _ADR: Address
                    CreateDWordField (IIC5, \_SB.PCI0.I2CM._Y2D._SPE, DSP5)  // _SPE: Speed
                    DAD5 = Arg1
                    DSP5 = Arg2
                    Return (IIC5) /* \_SB_.PCI0.I2CM.IIC5 */
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Method (SPIM, 3, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x07)
                {
                    Name (IIC7, ResourceTemplate ()
                    {
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x00989680, ClockPolarityLow,
                            ClockPhaseFirst, "\\_SB.PCI0.SPI1",
                            0x00, ResourceConsumer, _Y2E, Exclusive,
                            )
                    })
                    CreateByteField (IIC7, \_SB.PCI0.SPIM._Y2E._PHA, DPH7)  // _PHA: Clock Phase
                    CreateDWordField (IIC7, \_SB.PCI0.SPIM._Y2E._SPE, DSP7)  // _SPE: Speed
                    DPH7 = Arg1
                    DSP7 = Arg2
                    Return (IIC7) /* \_SB_.PCI0.SPIM.IIC7 */
                }
                Case (0x08)
                {
                    Name (IIC8, ResourceTemplate ()
                    {
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x00989680, ClockPolarityLow,
                            ClockPhaseFirst, "\\_SB.PCI0.SPI2",
                            0x00, ResourceConsumer, _Y2F, Exclusive,
                            )
                    })
                    CreateByteField (IIC8, \_SB.PCI0.SPIM._Y2F._PHA, DPH8)  // _PHA: Clock Phase
                    CreateDWordField (IIC8, \_SB.PCI0.SPIM._Y2F._SPE, DSP8)  // _SPE: Speed
                    DPH8 = Arg1
                    DSP8 = Arg2
                    Return (IIC8) /* \_SB_.PCI0.SPIM.IIC8 */
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Method (UCMM, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Name (UCM0, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (UCM0) /* \_SB_.PCI0.UCMM.UCM0 */
                }
                Case (One)
                {
                    Name (UCM1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (UCM1) /* \_SB_.PCI0.UCMM.UCM1 */
                }
                Case (0x02)
                {
                    Name (UCM2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (UCM2) /* \_SB_.PCI0.UCMM.UCM2 */
                }
                Case (0x03)
                {
                    Name (UCM3, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (UCM3) /* \_SB_.PCI0.UCMM.UCM3 */
                }
                Default
                {
                    Return (Zero)
                }

            }
        }
    }

    Scope (_SB.PCI0.I2C0)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            I2CN = SDS0 /* \SDS0 */
            I2CX = Zero
        }

        Device (UCMX)
        {
            Name (_HID, "INT3515")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            If (UTCE)
                            {
                                If ((Arg3 == One))
                                {
                                    PMC4 = (PMC4 & 0xFFFFFFFF7FFFFFFF)
                                }
                                Else
                                {
                                    PMC4 = (PMC4 | 0x80000000)
                                }
                            }
                        }

                    }
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y30)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y31)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y32)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                    {
                        0x00000000,
                    }
                })
                CreateDWordField (SBFI, \_SB.PCI0.I2C0.UCMX._CRS._Y30._INT, INT1)  // _INT: Interrupts
                INT1 = INUM (UCG1)
                CreateDWordField (SBFI, \_SB.PCI0.I2C0.UCMX._CRS._Y31._INT, INT2)  // _INT: Interrupts
                INT2 = INUM (UCG2)
                CreateDWordField (SBFI, \_SB.PCI0.I2C0.UCMX._CRS._Y32._INT, INT3)  // _INT: Interrupts
                INT3 = INUM (UCG3)
                Return (ConcatenateResTemplate (UCMM (I2CX), SBFI))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((UTCE == One) && (I2CN & 0x04)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0.I2C1)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            I2CN = SDS1 /* \SDS1 */
            I2CX = One
            If (CondRefOf (\_SB.PCI0.I2C1.INC1))
            {
                INC1 ()
            }
        }

        Device (UCMX)
        {
            Name (_HID, "INT3515")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            If (UTCE)
                            {
                                If ((Arg3 == One))
                                {
                                    PMC4 = (PMC4 & 0xFFFFFFFF7FFFFFFF)
                                }
                                Else
                                {
                                    PMC4 = (PMC4 | 0x80000000)
                                }
                            }
                        }

                    }
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y33)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y34)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y35)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                    {
                        0x00000000,
                    }
                })
                CreateDWordField (SBFI, \_SB.PCI0.I2C1.UCMX._CRS._Y33._INT, INT1)  // _INT: Interrupts
                INT1 = INUM (UCG1)
                CreateDWordField (SBFI, \_SB.PCI0.I2C1.UCMX._CRS._Y34._INT, INT2)  // _INT: Interrupts
                INT2 = INUM (UCG2)
                CreateDWordField (SBFI, \_SB.PCI0.I2C1.UCMX._CRS._Y35._INT, INT3)  // _INT: Interrupts
                INT3 = INUM (UCG3)
                Return (ConcatenateResTemplate (UCMM (I2CX), SBFI))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((UTCE == One) && (I2CN & 0x04)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0.I2C2)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            I2CN = SDS2 /* \SDS2 */
            I2CX = 0x02
        }

        Device (UCMX)
        {
            Name (_HID, "INT3515")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            If (UTCE)
                            {
                                If ((Arg3 == One))
                                {
                                    PMC4 = (PMC4 & 0xFFFFFFFF7FFFFFFF)
                                }
                                Else
                                {
                                    PMC4 = (PMC4 | 0x80000000)
                                }
                            }
                        }

                    }
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y36)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y37)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y38)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                    {
                        0x00000000,
                    }
                })
                CreateDWordField (SBFI, \_SB.PCI0.I2C2.UCMX._CRS._Y36._INT, INT1)  // _INT: Interrupts
                INT1 = INUM (UCG1)
                CreateDWordField (SBFI, \_SB.PCI0.I2C2.UCMX._CRS._Y37._INT, INT2)  // _INT: Interrupts
                INT2 = INUM (UCG2)
                CreateDWordField (SBFI, \_SB.PCI0.I2C2.UCMX._CRS._Y38._INT, INT3)  // _INT: Interrupts
                INT3 = INUM (UCG3)
                Return (ConcatenateResTemplate (UCMM (I2CX), SBFI))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((UTCE == One) && (I2CN & 0x04)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0.I2C3)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            I2CN = SDS3 /* \SDS3 */
            I2CX = 0x03
        }

        Device (UCMX)
        {
            Name (_HID, "INT3515")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            If (UTCE)
                            {
                                If ((Arg3 == One))
                                {
                                    PMC4 = (PMC4 & 0xFFFFFFFF7FFFFFFF)
                                }
                                Else
                                {
                                    PMC4 = (PMC4 | 0x80000000)
                                }
                            }
                        }

                    }
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y39)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y3A)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y3B)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                    {
                        0x00000000,
                    }
                })
                CreateDWordField (SBFI, \_SB.PCI0.I2C3.UCMX._CRS._Y39._INT, INT1)  // _INT: Interrupts
                INT1 = INUM (UCG1)
                CreateDWordField (SBFI, \_SB.PCI0.I2C3.UCMX._CRS._Y3A._INT, INT2)  // _INT: Interrupts
                INT2 = INUM (UCG2)
                CreateDWordField (SBFI, \_SB.PCI0.I2C3.UCMX._CRS._Y3B._INT, INT3)  // _INT: Interrupts
                INT3 = INUM (UCG3)
                Return (ConcatenateResTemplate (UCMM (I2CX), SBFI))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((UTCE == One) && (I2CN & 0x04)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0.SPI1)
    {
        Name (SPIP, Zero)
        Name (SPIX, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            SPIP = SDS7 /* \SDS7 */
            SPIX = 0x07
        }

        If ((SMD7 != Zero))
        {
            Device (FPNT)
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((FPTT == One))
                    {
                        Return ("FPC1011")
                    }

                    If ((FPTT == 0x02))
                    {
                        Return ("FPC1020")
                    }

                    If ((FPTT == 0x03))
                    {
                        Return ("VFSI6101")
                    }

                    If ((FPTT == 0x04))
                    {
                        Return ("VFSI7500")
                    }

                    If ((FPTT == 0x05))
                    {
                        Return ("EGIS0300")
                    }

                    If ((FPTT == 0x06))
                    {
                        Return ("FPC1021")
                    }

                    Return ("DUMY0000")
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    SHPO (GFPI, One)
                    SHPO (GFPS, One)
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((FPTT != Zero) && (SPIP == One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (BBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0008
                            }
                    })
                    Name (IBUF, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y3C)
                        {
                            0x00000000,
                        }
                    })
                    Name (GBUF, ResourceTemplate ()
                    {
                        GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                            "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, _Y3D,
                            )
                            {   // Pin list
                                0x0000
                            }
                    })
                    Name (UBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0000
                            }
                    })
                    CreateWordField (BBUF, 0x17, SPIN)
                    CreateWordField (GBUF, 0x17, GPIN)
                    CreateDWordField (IBUF, \_SB.PCI0.SPI1.FPNT._CRS._Y3C._INT, IPIN)  // _INT: Interrupts
                    CreateWordField (UBUF, 0x17, UPIN)
                    CreateBitField (IBUF, \_SB.PCI0.SPI1.FPNT._CRS._Y3C._LL, ILVL)  // _LL_: Low Level
                    CreateBitField (IBUF, \_SB.PCI0.SPI1.FPNT._CRS._Y3C._HE, ITRG)  // _HE_: High-Edge
                    CreateField (GBUF, \_SB.PCI0.SPI1.FPNT._CRS._Y3D._POL, 0x02, GLVL)  // _POL: Polarity
                    CreateBitField (GBUF, \_SB.PCI0.SPI1.FPNT._CRS._Y3D._MOD, GTRG)  // _MOD: Mode
                    SPIN = GNUM (GFPS)
                    GPIN = GNUM (GFPI)
                    IPIN = INUM (GFPI)
                    UPIN = GNUM (GFPI)
                    If (((FPTT == 0x02) || (FPTT == 0x06)))
                    {
                        ILVL = Zero
                        ITRG = One
                        GLVL = Zero
                        GTRG = One
                    }

                    If ((FPTT == 0x04))
                    {
                        ILVL = Zero
                        ITRG = One
                    }

                    Switch (ToInteger (FPTT))
                    {
                        Case (One)
                        {
                            Local1 = 0x00989680
                            Local0 = Zero
                        }
                        Case (0x02)
                        {
                            Local1 = 0x002DC6C0
                            Local0 = Zero
                        }
                        Case (0x03)
                        {
                            Local1 = 0x007A1200
                            Local0 = One
                        }
                        Case (0x04)
                        {
                            Local1 = 0x007A1200
                            Local0 = Zero
                        }
                        Case (0x05)
                        {
                            Local1 = 0x00F42400
                            Local0 = Zero
                        }
                        Case (0x06)
                        {
                            Local1 = 0x002DC6C0
                            Local0 = Zero
                        }
                        Default
                        {
                        }

                    }

                    If ((FPTT == One))
                    {
                        Return (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF))
                    }

                    If (((FPTT == 0x04) && (FPTM == Zero)))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, GBUF
                            )))
                    }

                    If (((FPTT == 0x04) && (FPTM != Zero)))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, IBUF
                            )))
                    }

                    If ((FPTM == Zero))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), GBUF))
                    }

                    Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), IBUF))
                }
            }
        }
    }

    Scope (_SB.PCI0.SPI2)
    {
        Name (SPIP, Zero)
        Name (SPIX, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            SPIP = SDS8 /* \SDS8 */
            SPIX = 0x08
        }

        If ((SMD8 != Zero))
        {
            Device (FPNT)
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((FPTT == One))
                    {
                        Return ("FPC1011")
                    }

                    If ((FPTT == 0x02))
                    {
                        Return ("FPC1020")
                    }

                    If ((FPTT == 0x03))
                    {
                        Return ("VFSI6101")
                    }

                    If ((FPTT == 0x04))
                    {
                        Return ("VFSI7500")
                    }

                    If ((FPTT == 0x05))
                    {
                        Return ("EGIS0300")
                    }

                    If ((FPTT == 0x06))
                    {
                        Return ("FPC1021")
                    }

                    Return ("DUMY0000")
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    SHPO (GFPI, One)
                    SHPO (GFPS, One)
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((FPTT != Zero) && (SPIP == One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (BBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0008
                            }
                    })
                    Name (IBUF, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y3E)
                        {
                            0x00000000,
                        }
                    })
                    Name (GBUF, ResourceTemplate ()
                    {
                        GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                            "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, _Y3F,
                            )
                            {   // Pin list
                                0x0000
                            }
                    })
                    Name (UBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0000
                            }
                    })
                    CreateWordField (BBUF, 0x17, SPIN)
                    CreateWordField (GBUF, 0x17, GPIN)
                    CreateDWordField (IBUF, \_SB.PCI0.SPI2.FPNT._CRS._Y3E._INT, IPIN)  // _INT: Interrupts
                    CreateWordField (UBUF, 0x17, UPIN)
                    CreateBitField (IBUF, \_SB.PCI0.SPI2.FPNT._CRS._Y3E._LL, ILVL)  // _LL_: Low Level
                    CreateBitField (IBUF, \_SB.PCI0.SPI2.FPNT._CRS._Y3E._HE, ITRG)  // _HE_: High-Edge
                    CreateField (GBUF, \_SB.PCI0.SPI2.FPNT._CRS._Y3F._POL, 0x02, GLVL)  // _POL: Polarity
                    CreateBitField (GBUF, \_SB.PCI0.SPI2.FPNT._CRS._Y3F._MOD, GTRG)  // _MOD: Mode
                    SPIN = GNUM (GFPS)
                    GPIN = GNUM (GFPI)
                    IPIN = INUM (GFPI)
                    UPIN = GNUM (GFPI)
                    If (((FPTT == 0x02) || (FPTT == 0x06)))
                    {
                        ILVL = Zero
                        ITRG = One
                        GLVL = Zero
                        GTRG = One
                    }

                    If ((FPTT == 0x04))
                    {
                        ILVL = Zero
                        ITRG = One
                    }

                    Switch (ToInteger (FPTT))
                    {
                        Case (One)
                        {
                            Local1 = 0x00989680
                            Local0 = Zero
                        }
                        Case (0x02)
                        {
                            Local1 = 0x002DC6C0
                            Local0 = Zero
                        }
                        Case (0x03)
                        {
                            Local1 = 0x007A1200
                            Local0 = One
                        }
                        Case (0x04)
                        {
                            Local1 = 0x007A1200
                            Local0 = Zero
                        }
                        Case (0x05)
                        {
                            Local1 = 0x00F42400
                            Local0 = Zero
                        }
                        Case (0x06)
                        {
                            Local1 = 0x002DC6C0
                            Local0 = Zero
                        }
                        Default
                        {
                        }

                    }

                    If ((FPTT == One))
                    {
                        Return (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF))
                    }

                    If (((FPTT == 0x04) && (FPTM == Zero)))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, GBUF
                            )))
                    }

                    If (((FPTT == 0x04) && (FPTM != Zero)))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, IBUF
                            )))
                    }

                    If ((FPTM == Zero))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), GBUF))
                    }

                    Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), IBUF))
                }
            }
        }
    }

    Method (PKG1, 1, Serialized)
    {
        Name (PKG, Package (0x01)
        {
            Zero
        })
        PKG [Zero] = Arg0
        Return (PKG) /* \PKG1.PKG_ */
    }

    Method (PKG3, 3, Serialized)
    {
        Name (PKG, Package (0x03)
        {
            Zero, 
            Zero, 
            Zero
        })
        PKG [Zero] = Arg0
        PKG [One] = Arg1
        PKG [0x02] = Arg2
        Return (PKG) /* \PKG3.PKG_ */
    }

    If (USTP)
    {
        Scope (_SB.PCI0.I2C0)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSH0, SSL0, SSD0))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMH0, FML0, FMD0))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPH0, FPL0, FPD0))
            }

            Method (HMCN, 0, NotSerialized)
            {
                Return (PKG3 (HMH0, HML0, HMD0))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C0))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C0))
            }
        }

        Scope (_SB.PCI0.I2C1)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSH1, SSL1, SSD1))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMH1, FML1, FMD1))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPH1, FPL1, FPD1))
            }

            Method (HMCN, 0, NotSerialized)
            {
                Return (PKG3 (HMH1, HML1, HMD1))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C1))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C1))
            }
        }

        Scope (_SB.PCI0.I2C2)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSH2, SSL2, SSD2))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMH2, FML2, FMD2))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPH2, FPL2, FPD2))
            }

            Method (HMCN, 0, NotSerialized)
            {
                Return (PKG3 (HMH2, HML2, HMD2))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C2))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C2))
            }
        }

        Scope (_SB.PCI0.I2C3)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSH3, SSL3, SSD3))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMH3, FML3, FMD3))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPH3, FPL3, FPD3))
            }

            Method (HMCN, 0, NotSerialized)
            {
                Return (PKG3 (HMH3, HML3, HMD3))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C3))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C3))
            }
        }

        Scope (_SB.PCI0.I2C4)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSH4, SSL4, SSD4))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMH4, FML4, FMD4))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPH4, FPL4, FPD4))
            }

            Method (HMCN, 0, NotSerialized)
            {
                Return (PKG3 (HMH4, HML4, HMD4))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C4))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C4))
            }
        }

        Scope (_SB.PCI0.I2C5)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSH5, SSL5, SSD5))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMH5, FML5, FMD5))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPH5, FPL5, FPD5))
            }

            Method (HMCN, 0, NotSerialized)
            {
                Return (PKG3 (HMH5, HML5, HMD5))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C5))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C5))
            }
        }

        Scope (_SB.PCI0.SPI0)
        {
            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C6))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C6))
            }
        }

        Scope (_SB.PCI0.SPI1)
        {
            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C7))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C7))
            }
        }

        Scope (_SB.PCI0.SPI2)
        {
            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C8))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C8))
            }
        }

        Scope (_SB.PCI0.UA00)
        {
            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C9))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C9))
            }
        }

        Scope (_SB.PCI0.UA01)
        {
            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0CA))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1CA))
            }
        }

        Scope (_SB.PCI0.UA02)
        {
            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0CB))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1CB))
            }
        }
    }

    Scope (_SB.PCI0.UA00)
    {
        Device (GPS0)
        {
            Name (_HID, "HPQC4752")  // _HID: Hardware ID
            Name (_HRV, 0x1A00)  // _HRV: Hardware Revision
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((UGPS == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (UBUF, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0xFC, LittleEndian, ParityTypeNone, FlowControlHardware,
                        0x0020, 0x0020, "\\_SB.PCI0.UA00",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0016
                        }
                })
                Return (UBUF) /* \_SB_.PCI0.UA00.GPS0._CRS.UBUF */
            }
        }
    }

    Scope (_SB.PCI0.I2C0)
    {
        Device (TPL0)
        {
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                SGOV (0x04030017, One)
                Sleep (0x05)
                SGOV (0x0402000F, Ones)
                Sleep (0x64)
                SGRA (0x0402000B, One)
                Sleep (One)
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                SGRA (0x0402000B, Zero)
                SGOV (0x0402000F, Zero)
                SGOV (0x04030017, 0xFFFFFFFFFFFFFFFE)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (DLLR, 5, Serialized)
        {
            ADBG ("SD DLL restore flow")
            Name (TEMP, Zero)
            Name (EMPB, Zero)
            EMPB = XBAS /* External reference */
            EMPB |= (Arg0 << 0x14)
            EMPB |= (Arg1 << 0x0F)
            EMPB |= (Arg2 << 0x0C)
            OperationRegion (EMPC, SystemMemory, EMPB, 0x0100)
            Field (EMPC, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                    ,   1, 
                MSE,    1, 
                Offset (0x10), 
                BAR0,   64, 
                Offset (0x84), 
                PSTA,   32
            }

            Name (OPST, Zero)
            OPST = PSTA /* \_SB_.PCI0.DLLR.PSTA */
            PSTA &= 0xFFFFFFFC
            TEMP = PSTA /* \_SB_.PCI0.DLLR.PSTA */
            Name (OMSE, Zero)
            OMSE = MSE /* \_SB_.PCI0.DLLR.MSE_ */
            MSE = Zero
            Name (OBAR, Zero)
            OBAR = BAR0 /* \_SB_.PCI0.DLLR.BAR0 */
            BAR0 = Arg3
            TEMP = BAR0 /* \_SB_.PCI0.DLLR.BAR0 */
            MSE = One
            OperationRegion (EMMI, SystemMemory, Arg3, Arg4)
            Field (EMMI, DWordAcc, NoLock, Preserve)
            {
                Offset (0x834), 
                FDLL,   8, 
                Offset (0x840), 
                ADLL,   8
            }

            Name (FDLV, Zero)
            Name (ADLV, Zero)
            FDLV = FDLL /* \_SB_.PCI0.DLLR.FDLL */
            ADLV = ADLL /* \_SB_.PCI0.DLLR.ADLL */
            ADBG (Concatenate ("Fixed DLL value ", ToHexString (FDLV)))
            ADBG (Concatenate ("Auto DLL Value ", ToHexString (ADLV)))
            If ((ADLV != Zero))
            {
                ADBG ("Auto tuning executed, restoring values")
                ADLV *= 0x02
                FDLL = ADLV /* \_SB_.PCI0.DLLR.ADLV */
            }

            MSE = Zero
            BAR0 = OBAR /* \_SB_.PCI0.DLLR.OBAR */
            MSE = OMSE /* \_SB_.PCI0.DLLR.OMSE */
            PSTA = OPST /* \_SB_.PCI0.DLLR.OPST */
            TEMP = PSTA /* \_SB_.PCI0.DLLR.PSTA */
        }

        Device (PUFS)
        {
            Name (_ADR, 0x00120005)  // _ADR: Address
            Name (_DDN, "Intel(R) UFS Controller")  // _DDN: DOS Device Name
            Device (CARD)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }
            }
        }

        Device (PEMC)
        {
            Name (_ADR, 0x001A0000)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((EMCE == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            OperationRegion (SCSR, PCI_Config, Zero, 0x0100)
            Field (SCSR, WordAcc, NoLock, Preserve)
            {
                Offset (0x84), 
                PSTA,   32, 
                Offset (0xA2), 
                    ,   2, 
                PGEN,   1
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                Stall (0x32)
                PGEN = Zero
                PCRA (0x52, 0x1C20, Zero)
                PCRA (0x52, 0x4820, Zero)
                PSTA &= 0xFFFFFFFC
                TEMP = PSTA /* \_SB_.PCI0.PEMC.PSTA */
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                DLLR (Zero, 0x1A, Zero, 0xFE0D0000, 0x00010000)
                PGEN = One
                PSTA |= 0x03
                TEMP = PSTA /* \_SB_.PCI0.PEMC.PSTA */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                ADBG (Concatenate ("EMH4=", ToDecimalString (EMH4)))
                If ((Arg0 == ToUUID ("f6c13ea5-65cd-461f-ab7a-29f7e8d5bd61") /* Unknown UUID */))
                {
                    If ((Arg1 >= Zero))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((EMH4 == One))
                                {
                                    Return (Buffer (0x02)
                                    {
                                         0x61, 0x02                                       // a.
                                    })
                                }

                                Return (Buffer (0x02)
                                {
                                     0x21, 0x02                                       // !.
                                })
                            }
                            Case (0x05)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (0x06)
                            {
                                Return (Buffer (One)
                                {
                                     0x05                                             // .
                                })
                            }
                            Case (0x09)
                            {
                                Switch (EMDS)
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x01                                             // .
                                        })
                                    }
                                    Case (0x04)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x04                                             // .
                                        })
                                    }

                                }
                            }

                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (CARD)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }
            }
        }

        Device (PSDC)
        {
            Name (_ADR, 0x00140005)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SDCE == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFI, ResourceTemplate ()
                {
                    GpioInt (Edge, ActiveBoth, SharedAndWake, PullNone, 0x2710,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                    GpioIo (Shared, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                CreateWordField (SBFI, 0x17, SDIP)
                CreateWordField (SBFI, 0x3F, SDGP)
                If ((PCHS == PCHL))
                {
                    SDIP = GNUM (0x04090027)
                    SDGP = GNUM (0x04090027)
                }
                Else
                {
                    SDIP = GNUM (0x030C0006)
                    SDGP = GNUM (0x030C0006)
                }

                Return (SBFI) /* \_SB_.PCI0.PSDC._CRS.SBFI */
            }

            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            OperationRegion (SCSR, PCI_Config, Zero, 0x0100)
            Field (SCSR, WordAcc, NoLock, Preserve)
            {
                Offset (0x84), 
                PSTA,   32, 
                Offset (0xA2), 
                    ,   2, 
                PGEN,   1
            }

            Method (SDPW, 1, Serialized)
            {
                If (!SDPH)
                {
                    Return (Zero)
                }

                Name (GPIO, Zero)
                If ((PCHS == PCHL))
                {
                    GPIO = 0x04000011
                }
                Else
                {
                    GPIO = 0x03000011
                }

                If ((Arg0 == Zero))
                {
                    SPMV (GPIO, One)
                }
                Else
                {
                    SGOV (GPIO, Zero)
                    SPMV (GPIO, Zero)
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                PGEN = Zero
                PCRA (0x53, 0x1C20, Zero)
                PCRA (0x53, 0x4820, Zero)
                PSTA &= 0xFFFFFFFC
                TEMP = PSTA /* \_SB_.PCI0.PSDC.PSTA */
                SDPW (Zero)
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                SDPW (One)
                PGEN = One
                PSTA |= 0x03
                TEMP = PSTA /* \_SB_.PCI0.PSDC.PSTA */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("f6c13ea5-65cd-461f-ab7a-29f7e8d5bd61") /* Unknown UUID */))
                {
                    If ((Arg1 >= Zero))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x19                                             // .
                                })
                            }
                            Case (0x03)
                            {
                                Sleep (0x64)
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                            Case (0x04)
                            {
                                Sleep (0x64)
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }

                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (ISHD)
        {
            Name (_ADR, 0x00130000)  // _ADR: Address
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (HECI)
        {
            Name (_ADR, 0x00160000)  // _ADR: Address
            OperationRegion (HECR, PCI_Config, Zero, 0x0100)
            Field (HECR, WordAcc, NoLock, Preserve)
            {
                Offset (0x54), 
                Offset (0x55), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((PMES == One))
                {
                    Notify (HECI, 0x02) // Device Wake
                }
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (CNVW)
        {
            Name (_ADR, 0x00140003)  // _ADR: Address
            OperationRegion (CWAR, PCI_Config, Zero, 0x0100)
            Field (CWAR, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                    ,   1, 
                WMSE,   1, 
                WBME,   1, 
                Offset (0x10), 
                WBR0,   64, 
                Offset (0x44), 
                    ,   28, 
                WFLR,   1, 
                Offset (0x48), 
                    ,   15, 
                WIFR,   1, 
                Offset (0xCC), 
                WPMS,   32
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("079ff457-64a8-44be-bd8a-6955052b9b92") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (Arg1)
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }

                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (RMRC) /* \RMRC */
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            OperationRegion (CNVR, PCI_Config, Zero, 0x0100)
            Field (CNVR, WordAcc, NoLock, Preserve)
            {
                Offset (0xCC), 
                Offset (0xCD), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((PMES == One))
                {
                    Notify (CNVW, 0x02) // Device Wake
                }
            }

            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((WFLR == One))
                    {
                        WBR0 = Zero
                        WPMS = Zero
                        WBME = Zero
                        WMSE = Zero
                        WIFR = One
                    }
                }
            }

            Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
            {
                WRST
            })
        }

        Method (CNIP, 0, NotSerialized)
        {
            If ((^CNVW.VDID != 0xFFFFFFFF))
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (SBTE, 1, Serialized)
        {
            If ((PCHS == PCHL))
            {
                Local0 = 0x04090000
            }
            Else
            {
                Local0 = 0x030C0000
            }

            SGOV (Local0, Arg0)
        }

        Method (GBTE, 0, NotSerialized)
        {
            If ((PCHS == PCHL))
            {
                Local0 = 0x04090000
            }
            Else
            {
                Local0 = 0x030C0000
            }

            Return (GGOV (Local0))
        }
    }

    If ((PTHM == 0x02))
    {
        Scope (_SB.PCI0)
        {
            Device (PCHT)
            {
                Name (_HID, "INTC1001")  // _HID: Hardware ID
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadWrite,
                        0xFE100000,         // Address Base
                        0x00100000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFC800000,         // Address Base
                        0x00800000,         // Address Length
                        )
                })
            }
        }
    }

    Scope (_SB.PCI0.LPCB)
    {
        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_GPE, 0x6E)  // _GPE: General Purpose Events
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
            })
            Mutex (ECMX, 0x00)
            Name (ECRG, Zero)
            Name (HSWK, Zero)
            OperationRegion (ERAM, EmbeddedControl, Zero, 0xFF)
            Field (ERAM, ByteAcc, NoLock, Preserve)
            {
                Offset (0x1D), 
                INDI,   8, 
                Offset (0x20), 
                DMEE,   8, 
                Offset (0xF5), 
                VBPS,   8
            }

            Method (GBNT, 2, Serialized)
            {
                Local0 = (One << Arg1)
                If (((Arg0 & Local0) == Local0))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (ECRI, 0, Serialized)
            {
                Acquire (ECMX, 0xFFFF)
                CRZN = One
                PHTP = 0x63
                Release (ECMX)
                OST = GTOS ()
                PWUP (0x07, 0xFF)
                Local0 = GBAP ()
                ITLB ()
                SBTN (Local0, 0x81)
                PRIT ()
            }

            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x03))
                {
                    ECRG = Arg1
                    If ((Arg1 == One))
                    {
                        ECRI ()
                    }
                }
            }

            OperationRegion (ECRM, EmbeddedControl, Zero, 0xFF)
            Field (ECRM, ByteAcc, NoLock, Preserve)
            {
                PMCD,   32, 
                S0FL,   8, 
                SXF0,   8, 
                SXF1,   8, 
                CPWR,   16, 
                CVLT,   16, 
                CCUR,   16, 
                DIDX,   8, 
                CIDX,   8, 
                PMCC,   8, 
                PMEP,   8, 
                Offset (0x22), 
                CRZN,   8, 
                THTA,   8, 
                HYST,   8, 
                CRIT,   8, 
                TEMP,   8, 
                TENA,   8, 
                KBBL,   8, 
                TOAD,   8, 
                PHTP,   8, 
                THEM,   8, 
                TMPO,   8, 
                AFAN,   8, 
                FRDC,   8, 
                FTGC,   8, 
                PLTP,   8, 
                Offset (0x32), 
                DTMP,   8, 
                Offset (0x35), 
                FR2C,   8, 
                FT2C,   8, 
                BCVD,   8, 
                Offset (0x3F), 
                SNMD,   8, 
                ABDI,   8, 
                ABAD,   8, 
                ABIX,   8, 
                ABDA,   8, 
                ABST,   8, 
                PORI,   8, 
                Offset (0x4C), 
                PSSB,   8, 
                Offset (0x4E), 
                SLID,   8, 
                SLDT,   8, 
                Offset (0x5E), 
                PPCM,   8, 
                PPDS,   8, 
                UCHC,   8, 
                UCHS,   8, 
                UCDB,   8, 
                UCCS,   8, 
                UCPN,   8, 
                Offset (0x70), 
                WKTR,   16, 
                S5TR,   16, 
                AS4F,   8, 
                Offset (0x78), 
                    ,   7, 
                BCML,   1, 
                BRIM,   1, 
                CCFG,   1, 
                    ,   1, 
                    ,   1, 
                EXTP,   1, 
                BKDT,   1, 
                BOTP,   1, 
                Offset (0x7B), 
                    ,   1, 
                PPUI,   1, 
                Offset (0x80), 
                ESID,   8, 
                    ,   4, 
                SLPT,   4, 
                FNSW,   1, 
                SFNC,   1, 
                ACPI,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                DETF,   1, 
                LIDS,   1, 
                TBLT,   1, 
                    ,   1, 
                LIDN,   1, 
                TBTA,   1, 
                    ,   1, 
                    ,   1, 
                Offset (0x84), 
                ADP,    1, 
                ADID,   2, 
                LCTV,   1, 
                BATP,   4, 
                BPU,    1, 
                Offset (0x86), 
                BSEL,   4, 
                Offset (0x87), 
                LB1,    8, 
                LB2,    8, 
                BDC,    16, 
                Offset (0x8D), 
                BFC,    16, 
                BRTE,   16, 
                BTC,    1, 
                Offset (0x92), 
                BME,    16, 
                BDN,    8, 
                BDV,    16, 
                BCV1,   16, 
                BST,    4, 
                Offset (0x9B), 
                BATE,   16, 
                BPR,    16, 
                BCR,    16, 
                BRC,    16, 
                BCC,    16, 
                BPV,    16, 
                BCV2,   16, 
                BCV3,   16, 
                BCV4,   16, 
                BCW,    16, 
                BATF,   16, 
                BCL,    16, 
                MAXC,   16, 
                BCG1,   8, 
                BT1I,   1, 
                BT2I,   1, 
                    ,   2, 
                BATN,   4, 
                BSTS,   16, 
                BCG2,   8, 
                Offset (0xBD), 
                BMO,    8, 
                Offset (0xBF), 
                BRCV,   8, 
                Offset (0xC1), 
                BIF,    8, 
                BRCC,   8, 
                Offset (0xC4), 
                CPSN,   8, 
                SCPS,   8, 
                Offset (0xC7), 
                MXCG,   8, 
                MNCG,   8, 
                BSN,    16, 
                BDAT,   16, 
                BMF,    8, 
                Offset (0xCF), 
                CTLB,   8, 
                Offset (0xD1), 
                BTY,    8, 
                Offset (0xD5), 
                MFAC,   8, 
                CFAN,   8, 
                PFAN,   8, 
                OCPS,   8, 
                OCPR,   8, 
                OCPE,   8, 
                TMP1,   8, 
                TMP2,   8, 
                NABT,   4, 
                BCM,    4, 
                STTI,   8, 
                STTD,   8, 
                CBT,    16, 
                Offset (0xE3), 
                OST,    4, 
                Offset (0xE4), 
                RWTM,   8, 
                TPTE,   1, 
                TBBN,   1, 
                    ,   1, 
                FCDE,   1, 
                    ,   1, 
                TP,     1, 
                Offset (0xE6), 
                SHK,    8, 
                AUDS,   1, 
                SPKR,   1, 
                Offset (0xE8), 
                PPDT,   8, 
                Offset (0xEA), 
                    ,   2, 
                WWP,    1, 
                WLP,    1, 
                    ,   1, 
                WWS3,   1, 
                WLS3,   1, 
                Offset (0xEC), 
                    ,   4, 
                PTEN,   1, 
                ERWB,   1, 
                    ,   1, 
                Offset (0xED), 
                Offset (0xEF), 
                INCH,   2, 
                IDIS,   2, 
                INAC,   1, 
                Offset (0xF3), 
                COL1,   3, 
                    ,   2, 
                LDCD,   3, 
                LEDS,   2, 
                LEDF,   6, 
                Offset (0xF6), 
                AAPI,   8, 
                ACSE,   8, 
                ACIX,   8, 
                ACPR,   16, 
                Offset (0xFD), 
                Offset (0xFF)
            }

            OperationRegion (SSRM, EmbeddedControl, 0x50, 0x0A)
            Field (SSRM, ByteAcc, NoLock, Preserve)
            {
                FBCM,   8, 
                FBGI,   8, 
                FBAE,   8, 
                FBCB,   8, 
                FBW1,   8, 
                FBW2,   8, 
                Offset (0x07), 
                FBID,   8, 
                FUAE,   8, 
                FRPS,   8
            }

            Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^WMIV.GVWE (0x00020002, Zero)
            }

            Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^WMIV.GVWE (0x00020002, 0x02)
            }

            Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^WMIV.GVWE (0x00020002, One)
            }

            Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^WMIV.GVWE (0x00020002, 0x03)
            }

            Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^WMIV.GVWE (0x00020002, 0x04)
            }

            Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^WMIV.GVWE (0x00020002, 0x05)
            }

            ThermalZone (HEPZ)
            {
                Name (HBTO, Zero)
                Name (_HOT, 0x0DCC)  // _HOT: Hot Temperature
                Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
                {
                    If (HBTO)
                    {
                        Local0 = (_HOT + 0x0A)
                        HBTO = Zero
                    }
                    Else
                    {
                        Local0 = 0x0BD8
                    }

                    Return (Local0)
                }
            }

            Method (HEP4, 2, Serialized)
            {
                ^^^^WMIV.GVWE (0x00020002, Arg0)
                Sleep (Arg1)
                ^HEPZ.HBTO = One
                Notify (HEPZ, 0x80) // Thermal Status Change
            }

            Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HEP4 (0x08, 0x3A98)
            }

            Method (_Q16, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HEP4 (0x06, 0x03E8)
            }

            Scope (\)
            {
                OperationRegion (PBST, SystemMemory, 0x97AF6000, 0x00000004)
                Field (PBST, AnyAcc, Lock, Preserve)
                {
                    PBSR,   32
                }

                Method (_PBS, 4, Serialized)
                {
                    PBSR = Arg2
                    If ((Arg2 != Zero))
                    {
                        GSWS (0x90F3)
                    }
                }
            }

            Method (^^^_PBS, 4, Serialized)
            {
                \_PBS (Arg0, Arg1, Arg2, Arg3)
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
            }

            OperationRegion (MAIO, SystemMemory, SMHO, 0xFF)
            Field (MAIO, ByteAcc, NoLock, Preserve)
            {
                Offset (0x0A), 
                    ,   7, 
                CLID,   1, 
                Offset (0x95), 
                PWM0,   8, 
                Offset (0x9D), 
                PWMC,   8
            }

            Method (KFCL, 2, NotSerialized)
            {
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    MFAC = Arg1
                    If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                    {
                        CFAN = Arg0
                    }
                }

                Release (ECMX)
            }

            Method (KSFS, 1, NotSerialized)
            {
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    CFAN = Arg0
                }

                Release (ECMX)
            }

            Method (KGFS, 0, NotSerialized)
            {
                Local0 = 0x14
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    Local0 = CFAN /* \_SB_.PCI0.LPCB.EC0_.CFAN */
                }

                Release (ECMX)
                Return (Local0)
            }

            Method (KRFS, 0, NotSerialized)
            {
                Local0 = 0x1E
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    Local0 = PFAN /* \_SB_.PCI0.LPCB.EC0_.PFAN */
                }

                Release (ECMX)
                Return (Local0)
            }

            Method (SFSD, 1, Serialized)
            {
                Local1 = (Arg0 * 0x40)
                Local0 = (Local1 / 0x64)
                Local0 = (0x40 - Local0)
                Local1 = (PWM0 & 0x80)
                If ((Local0 == 0x40))
                {
                    Local1 |= One
                }
                Else
                {
                    Local0 <<= One
                    Local1 |= Local0
                }

                PWM0 = Local1
            }

            Method (GFSD, 0, Serialized)
            {
                Local0 = (PWM0 & 0x7F)
                If ((Local0 & One))
                {
                    Local1 = Zero
                }
                Else
                {
                    Local0 >>= One
                    Local0 = (0x40 - Local0)
                    Local0 *= 0x64
                    Local1 = ((Local0 + 0x20) / 0x40)
                    Local1++
                }

                Return (Local1)
            }

            Method (GSHK, 0, Serialized)
            {
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    Local0 = SHK /* \_SB_.PCI0.LPCB.EC0_.SHK_ */
                }

                Release (ECMX)
                Return (Local0)
            }

            Method (SSHK, 1, Serialized)
            {
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    Debug = Arg0
                    SHK = Arg0
                }

                Release (ECMX)
            }

            Method (SAST, 1, Serialized)
            {
                Local0 = Zero
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    AUDS = Arg0
                    Local0 = One
                }

                Release (ECMX)
                Return (Local0)
            }

            Method (HSPW, 2, Serialized)
            {
                If ((Arg0 && Arg1)){}
            }

            Method (UHSW, 0, Serialized)
            {
            }

            Method (CHSW, 1, Serialized)
            {
                If (Arg0){}
                Local1 = Zero
                Return (Local1)
            }

            Method (HWLP, 1, NotSerialized)
            {
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    WLP = (Arg0 ^ Zero)
                }

                Release (ECMX)
            }

            Method (HWWP, 1, Serialized)
            {
                If (Arg0){}
                Acquire (ECMX, 0xFFFF)
                If (ECRG){}
                Release (ECMX)
            }

            Method (ECAB, 4, Serialized)
            {
                Local0 = 0xECAB
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    Local0 = 0xFF00
                    ABDI = Arg0
                    ABAD = Arg1
                    ABIX = Arg2
                    If (((Arg1 & One) == Zero))
                    {
                        ABDA = Arg3
                    }

                    ABST = 0xFF
                    Sleep (0x5A)
                    Local0 = 0x80
                    Local1 = 0x0B
                    While (((Local0 & 0x80) && (Local1 > Zero)))
                    {
                        Sleep (0x0A)
                        Local0 = ABST /* \_SB_.PCI0.LPCB.EC0_.ABST */
                        Local1--
                    }

                    Local0 <<= 0x08
                    If (((Local0 == Zero) && (Arg1 & One)))
                    {
                        Local1 = (ABDA & 0xFF)
                        Local0 |= Local1
                    }
                }

                Release (ECMX)
                Return (Local0)
            }

            Name (NGBF, 0xFF)
            Name (NGBT, 0xFF)
            Name (GACP, 0x07)
            Name (ACST, One)
            Name (SMAR, Zero)
            Name (NBAP, Zero)
            Name (NNBO, One)
            Name (NDCB, Zero)
            Name (NLB1, 0x0A)
            Name (NLB2, 0x05)
            Name (NLO2, 0x04)
            Mutex (BTMX, 0x00)
            Method (UPAD, 0, Serialized)
            {
                Acquire (BTMX, 0xFFFF)
                If ((GACP & One))
                {
                    GACP &= 0x06
                    Release (BTMX)
                    Local0 = One
                    Local1 = Zero
                    Acquire (ECMX, 0xFFFF)
                    If (ECRG)
                    {
                        Local0 = ADP /* \_SB_.PCI0.LPCB.EC0_.ADP_ */
                        ACSE = 0xFF
                        Local2 = ACIX /* \_SB_.PCI0.LPCB.EC0_.ACIX */
                        If ((Local2 & 0x08))
                        {
                            Local1 = One
                        }
                        ElseIf ((Local2 & 0x10))
                        {
                            Local1 = 0x04
                        }
                        ElseIf ((Local2 & 0x40))
                        {
                            Local1 = 0x02
                        }
                        ElseIf ((Local2 & 0x80))
                        {
                            Local1 = 0x03
                        }
                    }

                    Release (ECMX)
                    ACST = Local0
                    SMAR = Local1
                }
                Else
                {
                    Release (BTMX)
                }
            }

            Method (GACS, 0, Serialized)
            {
                UPAD ()
                Return (ACST) /* \_SB_.PCI0.LPCB.EC0_.ACST */
            }

            Method (GPID, 0, Serialized)
            {
                UPAD ()
                Return (SMAR) /* \_SB_.PCI0.LPCB.EC0_.SMAR */
            }

            Method (GBAP, 0, Serialized)
            {
                Acquire (BTMX, 0xFFFF)
                If ((GACP & 0x02))
                {
                    GACP &= 0x05
                    Release (BTMX)
                    Acquire (ECMX, 0xFFFF)
                    If (ECRG)
                    {
                        NBAP = BATP /* \_SB_.PCI0.LPCB.EC0_.BATP */
                    }

                    Release (ECMX)
                }
                Else
                {
                    Release (BTMX)
                }

                Return (NBAP) /* \_SB_.PCI0.LPCB.EC0_.NBAP */
            }

            Method (PWUP, 2, Serialized)
            {
                Local0 = Zero
                Acquire (BTMX, 0xFFFF)
                Local1 = (Arg0 | GACP) /* \_SB_.PCI0.LPCB.EC0_.GACP */
                GACP = (Local1 & 0x07)
                If ((GACP & 0x02))
                {
                    NGBF |= Arg1
                }

                If ((GACP & 0x04))
                {
                    If ((NGBT != 0xFF))
                    {
                        Local0 = One
                    }

                    NGBT |= Arg1
                }

                Release (BTMX)
                Return (Local0)
            }

            Method (BTDR, 1, Serialized)
            {
                If ((Arg0 == One))
                {
                    NNBO = One
                }
                ElseIf ((Arg0 == Zero))
                {
                    NNBO = Zero
                }

                Return (NNBO) /* \_SB_.PCI0.LPCB.EC0_.NNBO */
            }

            Method (BSTA, 1, Serialized)
            {
                BTDR (One)
                Local0 = GBAP ()
                Local1 = 0x0F
                If ((Local0 & Arg0))
                {
                    Local1 = 0x1F
                }

                Return (Local1)
            }

            Method (GBSS, 2, Serialized)
            {
                ToBCD (Arg0, Local0)
                Local3 = ISTR (Local0, 0x05)
                Concatenate (Local3, " ", Local4)
                Local0 = (Arg1 >> 0x09)
                Local1 = (Local0 + 0x07BC)
                ToBCD (Local1, Local0)
                Local2 = ISTR (Local0, 0x04)
                Concatenate (Local4, Local2, Local3)
                Concatenate (Local3, "/", Local4)
                Local0 = (Arg1 >> 0x05)
                Local1 = (Local0 & 0x0F)
                ToBCD (Local1, Local0)
                Local2 = ISTR (Local0, 0x02)
                Concatenate (Local4, Local2, Local3)
                Concatenate (Local3, "/", Local4)
                Local1 = (Arg1 & 0x1F)
                ToBCD (Local1, Local0)
                Local2 = ISTR (Local0, 0x02)
                Concatenate (Local4, Local2, Local3)
                Return (Local3)
            }

            Method (GBMF, 0, Serialized)
            {
                Local0 = Buffer (0x12){}
                Local3 = Zero
                Local1 = BMF /* \_SB_.PCI0.LPCB.EC0_.BMF_ */
                While (((Local3 < 0x10) && (Local1 != Zero)))
                {
                    Local0 [Local3] = Local1
                    Local3++
                    Local1 = BMF /* \_SB_.PCI0.LPCB.EC0_.BMF_ */
                }

                Return (Local0)
            }

            Method (GCTL, 1, Serialized)
            {
                If (Arg0){}
                Name (CTBF, Buffer (0x10){})
                Local3 = Zero
                Local2 = Zero
                While ((Local3 != 0x10))
                {
                    CTBF [Local2] = CTLB /* \_SB_.PCI0.LPCB.EC0_.CTLB */
                    Local2++
                    Local3++
                }

                Return (CTBF) /* \_SB_.PCI0.LPCB.EC0_.GCTL.CTBF */
            }

            Method (GDNM, 1, Serialized)
            {
                If (Arg0){}
                Name (DNBF, Buffer (0x07){})
                Local3 = Zero
                Local2 = Zero
                While ((Local3 != 0x07))
                {
                    DNBF [Local2] = BDN /* \_SB_.PCI0.LPCB.EC0_.BDN_ */
                    Local2++
                    Local3++
                }

                Return (DNBF) /* \_SB_.PCI0.LPCB.EC0_.GDNM.DNBF */
            }

            Method (GDCH, 1, Serialized)
            {
                If (Arg0){}
                Name (DCBF, Buffer (0x04){})
                Local3 = Zero
                Local2 = Zero
                While ((Local3 != 0x04))
                {
                    DCBF [Local2] = BTY /* \_SB_.PCI0.LPCB.EC0_.BTY_ */
                    Local2++
                    Local3++
                }

                Return (DCBF) /* \_SB_.PCI0.LPCB.EC0_.GDCH.DCBF */
            }

            Method (BTIF, 1, Serialized)
            {
                Local7 = (One << Arg0)
                BTDR (One)
                If ((BSTA (Local7) == 0x0F))
                {
                    Return (0xFF)
                }

                Acquire (BTMX, 0xFFFF)
                Local0 = NGBF /* \_SB_.PCI0.LPCB.EC0_.NGBF */
                Release (BTMX)
                If (((Local0 & Local7) == Zero))
                {
                    Return (Zero)
                }

                NBST [Arg0] = NDBS /* \_SB_.NDBS */
                Acquire (BTMX, 0xFFFF)
                NGBT |= Local7
                Release (BTMX)
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    BSEL = Arg0
                    Local0 = BFC /* \_SB_.PCI0.LPCB.EC0_.BFC_ */
                    DerefOf (NBTI [Arg0]) [One] = Local0
                    DerefOf (NBTI [Arg0]) [0x02] = Local0
                    DerefOf (NBTI [Arg0]) [0x04] = BDV /* \_SB_.PCI0.LPCB.EC0_.BDV_ */
                    Local0 = (BFC * NLB1) /* \_SB_.PCI0.LPCB.EC0_.NLB1 */
                    Local4 = (Local0 / 0x64)
                    DerefOf (NBTI [Arg0]) [0x05] = Local4
                    Local0 = (BFC * NLO2) /* \_SB_.PCI0.LPCB.EC0_.NLO2 */
                    Local4 = (Local0 / 0x64)
                    DerefOf (NBTI [Arg0]) [0x06] = Local4
                    Local0 = BSN /* \_SB_.PCI0.LPCB.EC0_.BSN_ */
                    Local1 = BDAT /* \_SB_.PCI0.LPCB.EC0_.BDAT */
                }

                Release (ECMX)
                Local2 = GBSS (Local0, Local1)
                DerefOf (NBTI [Arg0]) [0x0A] = Local2
                Acquire (BTMX, 0xFFFF)
                NGBF &= ~Local7
                Release (BTMX)
                Return (Zero)
            }

            Method (BTST, 2, Serialized)
            {
                Local7 = (One << Arg0)
                BTDR (One)
                If ((BSTA (Local7) == 0x0F))
                {
                    NBST [Arg0] = Package (0x04)
                        {
                            Zero, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        }
                    Return (0xFF)
                }

                Acquire (BTMX, 0xFFFF)
                If (Arg1)
                {
                    NGBT = 0xFF
                }

                Local0 = NGBT /* \_SB_.PCI0.LPCB.EC0_.NGBT */
                Release (BTMX)
                If (((Local0 & Local7) == Zero))
                {
                    Return (Zero)
                }

                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    BSEL = Arg0
                    Local0 = BST /* \_SB_.PCI0.LPCB.EC0_.BST_ */
                    Local3 = BPR /* \_SB_.PCI0.LPCB.EC0_.BPR_ */
                    DerefOf (NBST [Arg0]) [0x02] = BRC /* \_SB_.PCI0.LPCB.EC0_.BRC_ */
                    DerefOf (NBST [Arg0]) [0x03] = BPV /* \_SB_.PCI0.LPCB.EC0_.BPV_ */
                }

                Release (ECMX)
                If ((GACS () == One))
                {
                    Local0 &= 0xFFFFFFFFFFFFFFFE
                }
                Else
                {
                    Local0 &= 0xFFFFFFFFFFFFFFFD
                }

                If ((Local0 & One))
                {
                    Acquire (BTMX, 0xFFFF)
                    NDCB = Local7
                    Release (BTMX)
                }

                DerefOf (NBST [Arg0]) [Zero] = Local0
                If ((Local0 & One))
                {
                    If (((Local3 < 0x0190) || (Local3 > 0x1964)))
                    {
                        Local5 = DerefOf (DerefOf (NBST [Arg0]) [One])
                        If (((Local5 < 0x0190) || (Local5 > 0x1964)))
                        {
                            Local3 = 0x0D7A
                        }
                        Else
                        {
                            Local3 = Local5
                        }
                    }

                    Local3 = 0xFFFFFFFF
                }
                ElseIf (((Local0 & 0x02) == Zero))
                {
                    Local3 = Zero
                }

                DerefOf (NBST [Arg0]) [One] = Local3
                Acquire (BTMX, 0xFFFF)
                NGBT &= ~Local7
                Release (BTMX)
                Return (Zero)
            }

            Method (ITLB, 0, NotSerialized)
            {
                Local0 = (BFC * NLB1) /* \_SB_.PCI0.LPCB.EC0_.NLB1 */
                Local4 = (Local0 / 0x64)
                Divide ((Local4 + 0x09), 0x0A, Local0, Local1)
                Local0 = (BFC * NLB2) /* \_SB_.PCI0.LPCB.EC0_.NLB2 */
                Local4 = (Local0 / 0x64)
                Divide ((Local4 + 0x09), 0x0A, Local0, Local2)
                If (ECRG)
                {
                    LB1 = Local1
                    LB2 = Local2
                }
            }

            Method (GBTI, 1, NotSerialized)
            {
                Debug = "Enter getbattinfo"
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    If ((BATP & (One << Arg0)))
                    {
                        BSEL = Arg0
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Buffer (0x6B){}
                            }
                        DerefOf (Local0 [One]) [Zero] = BDC /* \_SB_.PCI0.LPCB.EC0_.BDC_ */
                        DerefOf (Local0 [One]) [One] = (BDC >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x02] = BFC /* \_SB_.PCI0.LPCB.EC0_.BFC_ */
                        DerefOf (Local0 [One]) [0x03] = (BFC >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x04] = BRC /* \_SB_.PCI0.LPCB.EC0_.BRC_ */
                        DerefOf (Local0 [One]) [0x05] = (BRC >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x06] = BME /* \_SB_.PCI0.LPCB.EC0_.BME_ */
                        DerefOf (Local0 [One]) [0x07] = (BME >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x08] = BCC /* \_SB_.PCI0.LPCB.EC0_.BCC_ */
                        DerefOf (Local0 [One]) [0x09] = (BCC >> 0x08
                            )
                        Local1 = CBT /* \_SB_.PCI0.LPCB.EC0_.CBT_ */
                        Local1 -= 0x0AAC
                        Divide (Local1, 0x0A, Local2, Local3)
                        DerefOf (Local0 [One]) [0x0A] = Local3
                        DerefOf (Local0 [One]) [0x0B] = (Local3 >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x0C] = BPV /* \_SB_.PCI0.LPCB.EC0_.BPV_ */
                        DerefOf (Local0 [One]) [0x0D] = (BPV >> 0x08
                            )
                        Local1 = BPR /* \_SB_.PCI0.LPCB.EC0_.BPR_ */
                        If (Local1)
                        {
                            If ((BSTS & 0x40))
                            {
                                Local1 = (~Local1 + One)
                                Local1 &= 0xFFFF
                            }
                        }

                        DerefOf (Local0 [One]) [0x0E] = Local1
                        DerefOf (Local0 [One]) [0x0F] = (Local1 >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x10] = BDV /* \_SB_.PCI0.LPCB.EC0_.BDV_ */
                        DerefOf (Local0 [One]) [0x11] = (BDV >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x12] = BSTS /* \_SB_.PCI0.LPCB.EC0_.BSTS */
                        DerefOf (Local0 [One]) [0x13] = (BSTS >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x14] = BCV1 /* \_SB_.PCI0.LPCB.EC0_.BCV1 */
                        DerefOf (Local0 [One]) [0x15] = (BCV1 >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x16] = BCV2 /* \_SB_.PCI0.LPCB.EC0_.BCV2 */
                        DerefOf (Local0 [One]) [0x17] = (BCV2 >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x18] = BCV3 /* \_SB_.PCI0.LPCB.EC0_.BCV3 */
                        DerefOf (Local0 [One]) [0x19] = (BCV3 >> 0x08
                            )
                        DerefOf (Local0 [One]) [0x1A] = BCV4 /* \_SB_.PCI0.LPCB.EC0_.BCV4 */
                        DerefOf (Local0 [One]) [0x1B] = (BCV4 >> 0x08
                            )
                        CreateField (DerefOf (Local0 [One]), 0xE0, 0x80, BTSN)
                        BTSN = GBSS (BSN, BDAT)
                        Local1 = GBMF ()
                        Local2 = SizeOf (Local1)
                        CreateField (DerefOf (Local0 [One]), 0x0160, (Local2 * 0x08), BMAN)
                        BMAN = Local1
                        Local2 += 0x2C
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x80, CLBL)
                        CLBL = GCTL (Zero)
                        Local2 += 0x11
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x38, DNAM)
                        DNAM = GDNM (Zero)
                        Local2 += 0x07
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x20, DCHE)
                        DCHE = GDCH (Zero)
                        Local2 += 0x04
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, BMAC)
                        BMAC = Zero
                        Local2 += 0x02
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, BMAD)
                        BMAD = BDAT /* \_SB_.PCI0.LPCB.EC0_.BDAT */
                        Local2 += 0x02
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, BCCU)
                        BCCU = BRCC /* \_SB_.PCI0.LPCB.EC0_.BRCC */
                        Local2 += 0x02
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, BCVO)
                        BCVO = BRCV /* \_SB_.PCI0.LPCB.EC0_.BRCV */
                        Local2 += 0x02
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, BAVC)
                        Local1 = BCR /* \_SB_.PCI0.LPCB.EC0_.BCR_ */
                        If (Local1)
                        {
                            If ((BSTS & 0x40))
                            {
                                Local1 = (~Local1 + One)
                                Local1 &= 0xFFFF
                            }
                        }

                        BAVC = Local1
                        Local2 += 0x02
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, RTTE)
                        RTTE = BRTE /* \_SB_.PCI0.LPCB.EC0_.BRTE */
                        Local2 += 0x02
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, ATTE)
                        ATTE = BATE /* \_SB_.PCI0.LPCB.EC0_.BATE */
                        Local2 += 0x02
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x10, ATTF)
                        ATTF = BATF /* \_SB_.PCI0.LPCB.EC0_.BATF */
                        Local2 += 0x02
                        CreateField (DerefOf (Local0 [One]), (Local2 * 0x08), 0x08, NOBS)
                        NOBS = BATN /* \_SB_.PCI0.LPCB.EC0_.BATN */
                    }
                    Else
                    {
                        Local0 = Package (0x01)
                            {
                                0x34
                            }
                    }
                }
                Else
                {
                    Local0 = Package (0x01)
                        {
                            0x0D
                        }
                }

                Release (ECMX)
                Return (Local0)
            }

            Method (GBTC, 0, NotSerialized)
            {
                Debug = "Enter GetBatteryControl"
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    Local0 = Package (0x02)
                        {
                            Zero, 
                            Buffer (0x04){}
                        }
                    If ((BATP & One))
                    {
                        BSEL = Zero
                        DerefOf (Local0 [One]) [Zero] = Zero
                        If ((((INAC == Zero) && (INCH == Zero)) && (IDIS == Zero)))
                        {
                            DerefOf (Local0 [One]) [Zero] = Zero
                        }
                        ElseIf (((((INAC == Zero) && (INCH == 0x02)) && (
                            IDIS == One)) && (MAXC == Zero)))
                        {
                            DerefOf (Local0 [One]) [Zero] = One
                        }
                        ElseIf (((INAC == One) && (IDIS == 0x02)))
                        {
                            DerefOf (Local0 [One]) [Zero] = 0x02
                        }
                        ElseIf (((((INAC == Zero) && (INCH == 0x02)) && (
                            IDIS == One)) && (MAXC == 0xFA)))
                        {
                            DerefOf (Local0 [One]) [Zero] = 0x03
                        }
                        ElseIf (((INAC == Zero) && (INCH == 0x03)))
                        {
                            DerefOf (Local0 [One]) [Zero] = 0x04
                        }
                    }
                    Else
                    {
                        DerefOf (Local0 [One]) [Zero] = 0xFF
                    }

                    If ((BATP & 0x02))
                    {
                        BSEL = One
                        DerefOf (Local0 [One]) [One] = Zero
                        If ((((INAC == Zero) && (INCH == Zero)) && (IDIS == Zero)))
                        {
                            DerefOf (Local0 [One]) [One] = Zero
                        }
                        ElseIf (((((INAC == Zero) && (INCH == One)) && (
                            IDIS == 0x02)) && (MAXC == Zero)))
                        {
                            DerefOf (Local0 [One]) [One] = One
                        }
                        ElseIf (((INAC == One) && (IDIS == One)))
                        {
                            DerefOf (Local0 [One]) [One] = 0x02
                        }
                        ElseIf (((((INAC == Zero) && (INCH == One)) && (
                            IDIS == 0x02)) && (MAXC == 0xFA)))
                        {
                            DerefOf (Local0 [One]) [One] = 0x03
                        }
                        ElseIf (((INAC == Zero) && (INCH == 0x03)))
                        {
                            DerefOf (Local0 [One]) [One] = 0x04
                        }
                    }
                    Else
                    {
                        DerefOf (Local0 [One]) [One] = 0xFF
                    }
                }
                Else
                {
                    Local0 = Package (0x02)
                        {
                            0x35, 
                            Zero
                        }
                }

                Release (ECMX)
                Return (Local0)
            }

            Method (SBTC, 3, NotSerialized)
            {
                Debug = "Enter SetBatteryControl"
                Debug = Arg0
                Debug = Arg1
                Debug = Arg2
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    Local0 = Arg2
                    Debug = Local0
                    Local4 = Package (0x01)
                        {
                            0x06
                        }
                    Local1 = Zero
                    Local2 = Zero
                    Local1 = DerefOf (Local0 [Zero])
                    If ((Local1 == Zero))
                    {
                        Debug = "battery 0"
                        If ((BATP & One))
                        {
                            Local2 = DerefOf (Local0 [One])
                            If ((Local2 == Zero))
                            {
                                INCH = Zero
                                IDIS = Zero
                                INAC = Zero
                                MAXC = Zero
                                PSSB = One
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }

                            If ((Local2 == One))
                            {
                                INAC = Zero
                                INCH = 0x02
                                IDIS = One
                                MAXC = Zero
                                PSSB = Zero
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }

                            If ((Local2 == 0x02))
                            {
                                INAC = One
                                INCH = One
                                IDIS = 0x02
                                PSSB = Zero
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }

                            If ((Local2 == 0x03))
                            {
                                INCH = 0x02
                                IDIS = One
                                INAC = Zero
                                MAXC = 0xFA
                                PSSB = Zero
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }

                            If ((Local2 == 0x04))
                            {
                                MAXC = 0xFA
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }

                            If ((Local2 == 0x05))
                            {
                                INAC = Zero
                                INCH = 0x03
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }
                        }
                        Else
                        {
                            Local4 = Package (0x01)
                                {
                                    0x34
                                }
                        }
                    }

                    If ((Local1 == One))
                    {
                        If ((BATP & 0x02))
                        {
                            Debug = "battery 1"
                            Local2 = DerefOf (Local0 [One])
                            If ((Local2 == Zero))
                            {
                                INCH = Zero
                                IDIS = Zero
                                INAC = Zero
                                MAXC = Zero
                                PSSB = One
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }

                            If ((Local2 == One))
                            {
                                INAC = Zero
                                INCH = One
                                IDIS = 0x02
                                MAXC = Zero
                                PSSB = Zero
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }

                            If ((Local2 == 0x02))
                            {
                                INAC = One
                                INCH = 0x02
                                IDIS = One
                                PSSB = Zero
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }

                            If ((Local2 == 0x03))
                            {
                                INCH = One
                                IDIS = 0x02
                                INAC = Zero
                                MAXC = 0xFA
                                PSSB = Zero
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }

                            If ((Local2 == 0x04))
                            {
                                INCH = Zero
                                IDIS = Zero
                                INAC = Zero
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }

                            If ((Local2 == 0x05))
                            {
                                INAC = Zero
                                INCH = 0x03
                                Local4 = Package (0x01)
                                    {
                                        Zero
                                    }
                            }
                        }
                        Else
                        {
                            Local4 = Package (0x01)
                                {
                                    0x34
                                }
                        }
                    }
                }

                Release (ECMX)
                Return (Local4)
            }

            Mutex (OTMT, 0x00)
            Name (OTLL, One)
            Name (OTSI, One)
            Name (OTRT, Zero)
            Name (OTEN, Zero)
            Name (LRPC, Zero)
            Name (MXCP, Zero)
            Name (DCCP, Zero)
            Name (TBOS, Zero)
            Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Acquire (BTMX, 0xFFFF)
                Local0 = NDCB /* \_SB_.PCI0.LPCB.EC0_.NDCB */
                Release (BTMX)
                PWUP (0x04, Local0)
                SBTN (Local0, 0x80)
            }

            Method (_Q05, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Local0 = THEM /* \_SB_.PCI0.LPCB.EC0_.THEM */
                Local1 = Local0
                Local2 = 0x08
                Local3 = (Local1 & Local2)
                If ((Local3 != Zero))
                {
                    If (CondRefOf (\_SB.PCI0.LPCB.EC0.SEN2))
                    {
                        Notify (SEN2, 0x90) // Device-Specific
                    }
                }

                Local2 = 0x04
                Local3 = (Local1 & Local2)
                If ((Local3 != Zero))
                {
                    If (CondRefOf (\_SB.PCI0.LPCB.EC0.SEN1))
                    {
                        Notify (SEN1, 0x90) // Device-Specific
                    }
                }

                \_TZ.ECTE (Local0)
            }

            Method (_Q06, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                PWUP (0x05, 0x03)
                If (CondRefOf (\_SB.PCI0.LPCB.EC0.EC12))
                {
                    EC14 = EC12 ()
                }

                If (BTDR (0x02))
                {
                    Notify (AC, 0x80) // Status Change
                }

                If (CondRefOf (\_SB.PCI0.G0BE))
                {
                    G0BE ()
                }

                If ((MXDP == One))
                {
                    ODV6 = One
                    If (CondRefOf (\_SB.IETM.ODVP))
                    {
                        ^^^^IETM.ODVP ()
                        Notify (IETM, 0x88) // Device-Specific
                    }
                }
                Else
                {
                    If ((EC14 != Zero))
                    {
                        ODV6 = One
                    }
                    Else
                    {
                        ODV6 = Zero
                    }

                    If (CondRefOf (\_SB.IETM.ODVP))
                    {
                        ^^^^IETM.ODVP ()
                        Notify (IETM, 0x88) // Device-Specific
                    }
                }
            }

            Method (_Q07, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    Local0 = UCPN /* \_SB_.PCI0.LPCB.EC0_.UCPN */
                    ^^^^WMIV.GVWE (0x00020001, Local0)
                }

                Release (ECMX)
            }

            Method (_Q08, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                PWUP (0x06, One)
                If (CondRefOf (\_SB.PCI0.LPCB.EC0.EC13))
                {
                    EC15 = EC13 ()
                }

                Local0 = GBAP ()
                If ((Local0 != 0x02))
                {
                    PWUP (0x04, 0x02)
                    If (BTDR (0x02))
                    {
                        Notify (BAT1, 0x80) // Status Change
                    }
                }

                If (BTDR (0x02))
                {
                    Notify (BAT0, 0x81) // Information Change
                }
            }

            Method (_Q0A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (CondRefOf (\_SB.PCI0.G0BF))
                {
                    G0BF ()
                }

                Notify (LID, 0x80) // Status Change
            }

            Method (_Q09, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                PWUP (0x04, One)
                If (BTDR (0x02))
                {
                    Notify (BAT0, 0x80) // Status Change
                }
            }

            Method (_Q0C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (CondRefOf (\_SB.PCI0.G0C0))
                {
                    G0C0 ()
                }
            }

            Method (_Q18, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                PWUP (0x06, 0x02)
                Local0 = GBAP ()
                If ((Local0 != One))
                {
                    PWUP (0x04, One)
                    If (BTDR (0x02))
                    {
                        Notify (BAT0, 0x80) // Status Change
                    }
                }

                If (BTDR (0x02))
                {
                    Notify (BAT1, 0x81) // Information Change
                }
            }

            Method (_Q19, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                PWUP (0x04, 0x02)
                If (BTDR (0x02))
                {
                    Notify (BAT1, 0x80) // Status Change
                }
            }

            Method (_Q1D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ADBG ("Q1D_BASE_KBD_EVENT_IN")
                ^^^^WMIV.GVWE (0x15, Zero)
                ADBG ("Q1D_BASE_KBD_EVENT_OUT")
            }

            Method (_Q24, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    PPCM = 0x03
                    PPDS = One
                    Local0 = PPDT /* \_SB_.PCI0.LPCB.EC0_.PPDT */
                    Local0 <<= 0x08
                    PPCM = One
                    PPDS = One
                    Local1 = PPDT /* \_SB_.PCI0.LPCB.EC0_.PPDT */
                    If ((Local1 == 0xFC))
                    {
                        Local1 = 0xFE
                    }

                    If ((Local1 == 0xFA))
                    {
                        ^^^^WMIV.GVWE (0x14, One)
                    }
                    Else
                    {
                        Local2 = (Local0 | Local1)
                        ^^^^WMIV.GVWE (0x14, Local2)
                    }
                }

                Release (ECMX)
            }

            Method (_Q25, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^WMIV.GVWE (0x14, 0xFD)
            }

            Method (_Q26, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    PPCM = 0x03
                    PPDS = One
                    Local0 = PPDT /* \_SB_.PCI0.LPCB.EC0_.PPDT */
                    Local0 <<= 0x08
                    ^^^^WMIV.GVWE (0x14, Local0)
                }

                Release (ECMX)
            }

            Method (_Q28, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Acquire (ECMX, 0xFFFF)
                If (ECRG)
                {
                    Local0 = 0x00FF0000
                    ^^^^WMIV.GVWE (0x14, Local0)
                }

                Release (ECMX)
            }

            Method (_Q50, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (ECRG)
                {
                    If (CondRefOf (\_SB.PCI0.CTCN))
                    {
                        CTCL = One
                        CTCN ()
                    }
                }
            }

            Method (_Q51, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (ECRG)
                {
                    If (CondRefOf (\_SB.PCI0.CTCD))
                    {
                        CTCD ()
                    }
                }
            }

            Method (SBTN, 2, Serialized)
            {
                If ((Arg0 & One))
                {
                    Notify (BAT0, Arg1)
                }

                If ((Arg0 & 0x02))
                {
                    Notify (BAT1, Arg1)
                }
            }

            Method (UDTS, 2, Serialized)
            {
                Acquire (ECMX, 0xFFFF)
                Local1 = TBTA /* \_SB_.PCI0.LPCB.EC0_.TBTA */
                Release (ECMX)
                PTAD (Local1)
                If (CondRefOf (\_SB.PCI0.LPCB.EC0.DDPL))
                {
                    DDPL ()
                }

                If (CondRefOf (\_SB.PCI0.LPCB.EC0.PT02))
                {
                    PT02 ()
                }

                If (CondRefOf (\_SB.PCI0.LPCB.EC0.PT04))
                {
                    PT04 ()
                }

                Acquire (ECMX, 0xFFFF)
                Local1 = ACIX /* \_SB_.PCI0.LPCB.EC0_.ACIX */
                Local2 = VBPS /* \_SB_.PCI0.LPCB.EC0_.VBPS */
                Release (ECMX)
                Local3 = (Local1 & 0x07)
                If ((Local3 == 0x07))
                {
                    AFAN = Zero
                }
                Else
                {
                    Local4 = 0x40
                    Local5 = (Local2 & Local4)
                    If ((Local5 > Zero))
                    {
                        AFAN = Zero
                    }
                    Else
                    {
                        AFAN = 0x02
                    }
                }
            }

            Method (PRIT, 0, NotSerialized)
            {
                Local0 = GACS ()
                PWRS = Local0
                If ((GBAP () & One))
                {
                    BT0P = 0x1F
                }

                \_TZ.ECTI (Zero)
                If (CondRefOf (\_SB.PCI0.LPCB.EC0.EC12))
                {
                    EC14 = EC12 ()
                }

                If (CondRefOf (\_SB.PCI0.LPCB.EC0.EC13))
                {
                    EC15 = EC13 ()
                }

                If ((MXDP == One))
                {
                    ODV6 = One
                    If (CondRefOf (\_SB.IETM.ODVP))
                    {
                        ^^^^IETM.ODVP ()
                        Notify (IETM, 0x88) // Device-Specific
                    }
                }
                Else
                {
                    If ((EC14 != Zero))
                    {
                        ODV6 = One
                    }
                    Else
                    {
                        ODV6 = Zero
                    }

                    If (CondRefOf (\_SB.IETM.ODVP))
                    {
                        ^^^^IETM.ODVP ()
                        Notify (IETM, 0x88) // Device-Specific
                    }
                }

                UDTS (One, Zero)
            }
        }

        Device (HPET)
        {
            Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    _Y40)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HPTE)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (HPTE)
                {
                    CreateDWordField (BUF0, \_SB.PCI0.LPCB.HPET._Y40._BAS, HPT0)  // _BAS: Base Address
                    HPT0 = HPTB /* \HPTB */
                }

                Return (BUF0) /* \_SB_.PCI0.LPCB.HPET.BUF0 */
            }
        }

        Device (IPIC)
        {
            Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0020,             // Range Minimum
                    0x0020,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0024,             // Range Minimum
                    0x0024,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0028,             // Range Minimum
                    0x0028,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x002C,             // Range Minimum
                    0x002C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0030,             // Range Minimum
                    0x0030,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0034,             // Range Minimum
                    0x0034,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0038,             // Range Minimum
                    0x0038,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x003C,             // Range Minimum
                    0x003C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A0,             // Range Minimum
                    0x00A0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A4,             // Range Minimum
                    0x00A4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A8,             // Range Minimum
                    0x00A8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00AC,             // Range Minimum
                    0x00AC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B0,             // Range Minimum
                    0x00B0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B4,             // Range Minimum
                    0x00B4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B8,             // Range Minimum
                    0x00B8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00BC,             // Range Minimum
                    0x00BC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x04D0,             // Range Minimum
                    0x04D0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IRQNoFlags ()
                    {2}
            })
        }

        Device (MATH)
        {
            Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x00F0,             // Range Minimum
                    0x00F0,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {13}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PCHS == PCHH))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (LDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x002E,             // Range Minimum
                    0x002E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x004E,             // Range Minimum
                    0x004E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0061,             // Range Minimum
                    0x0061,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0063,             // Range Minimum
                    0x0063,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0065,             // Range Minimum
                    0x0065,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0067,             // Range Minimum
                    0x0067,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0080,             // Range Minimum
                    0x0080,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0092,             // Range Minimum
                    0x0092,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x00B2,             // Range Minimum
                    0x00B2,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0680,             // Range Minimum
                    0x0680,             // Range Maximum
                    0x01,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0x164E,             // Range Minimum
                    0x164E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
            })
        }

        Device (RTC)
        {
            Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                IRQNoFlags ()
                    {8}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((STAS == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (TIMR)
        {
            Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0040,             // Range Minimum
                    0x0040,             // Range Maximum
                    0x01,               // Alignment
                    0x04,               // Length
                    )
                IO (Decode16,
                    0x0050,             // Range Minimum
                    0x0050,             // Range Maximum
                    0x10,               // Alignment
                    0x04,               // Length
                    )
                IRQNoFlags ()
                    {0}
            })
        }

        Device (CWDT)
        {
            Name (_HID, EisaId ("INT3F0D") /* ACPI Motherboard Resources */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x04,               // Alignment
                        0x04,               // Length
                        _Y41)
                })
                CreateWordField (RBUF, \_SB.PCI0.LPCB.CWDT._CRS._Y41._MIN, OMIN)  // _MIN: Minimum Base Address
                CreateWordField (RBUF, \_SB.PCI0.LPCB.CWDT._CRS._Y41._MAX, OMAX)  // _MAX: Maximum Base Address
                OMIN = (PMBS + 0x54)
                OMAX = (PMBS + 0x54)
                Return (RBUF) /* \_SB_.PCI0.LPCB.CWDT._CRS.RBUF */
            }
        }

        OperationRegion (PKBS, SystemIO, 0x60, 0x05)
        Field (PKBS, ByteAcc, Lock, Preserve)
        {
            PKBD,   8, 
            Offset (0x02), 
            Offset (0x03), 
            Offset (0x04), 
            PKBC,   8
        }

        Device (PS2K)
        {
            Name (_HID, EisaId ("HPQ8002"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0060,             // Range Minimum
                    0x0060,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0064,             // Range Minimum
                    0x0064,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {1}
            })
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                StartDependentFn (0x00, 0x00)
                {
                    FixedIO (
                        0x0060,             // Address
                        0x01,               // Length
                        )
                    FixedIO (
                        0x0064,             // Address
                        0x01,               // Length
                        )
                    IRQNoFlags ()
                        {1}
                }
                EndDependentFn ()
            })
        }

        Device (PS2M)
        {
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {12}
            })
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                StartDependentFn (0x00, 0x00)
                {
                    IRQNoFlags ()
                        {12}
                }
                EndDependentFn ()
            })
        }
    }

    Scope (_SB)
    {
        Device (WMIS)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x35, 0x64, 0x1F, 0x8F, 0x42, 0x9F, 0xC8, 0x42,  // 5d..B..B
                /* 0008 */  0xBA, 0xDC, 0x0E, 0x94, 0x24, 0xF2, 0x0C, 0x9A,  // ....$...
                /* 0010 */  0x42, 0x49, 0x07, 0x00, 0x21, 0x12, 0x90, 0x05,  // BI..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x5A, 0x5A, 0x01, 0x00   // ..).ZZ..
            })
            Method (WQBI, 1, NotSerialized)
            {
                \_TZ.WQBI (Arg0)
            }
        }
    }

    Name (ECUP, One)
    Mutex (EHLD, 0x00)
    Scope (\)
    {
        Device (CHUB)
        {
            Name (_HID, EisaId ("INT339B"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((CHEN == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37") /* Unknown UUID */))
                {
                    If ((ToInteger (Arg1) >= Zero))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Switch (ToInteger (DerefOf (Arg3 [Zero])))
                                {
                                    Case (Zero)
                                    {
                                    }

                                }
                            }

                        }

                        Return (Zero)
                    }

                    Return (Zero)
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Name (LSTA, Zero)
    Name (IDPM, Zero)
    Method (HPTS, 1, NotSerialized)
    {
        If (CondRefOf (\_SB.PCI0.G0B0))
        {
            \_SB.PCI0.G0B0 (Arg0)
        }

        \_SB.ODGW ((0x5400 | Arg0))
        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                \_SB.PCI0.LPCB.EC0.ACPI = Zero
                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }
        }
    }

    Method (HWAK, 1, NotSerialized)
    {
        \_SB.PCI0.LPCB.EC0.ITLB ()
        If (\_SB.PCI0.LPCB.EC0.ECRG)
        {
            Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
            \_SB.PCI0.LPCB.EC0.ACPI = One
            \_SB.PCI0.LPCB.EC0.OST = GTOS ()
            Release (\_SB.PCI0.LPCB.EC0.ECMX)
        }

        If ((Arg0 > 0x02))
        {
            \_TZ.RETD ()
            \_TZ.INTM (One)
            \_SB.PCI0.LPCB.EC0.UDTS (Zero, Zero)
        }

        Local2 = \_SB.PCI0.LPCB.EC0.GACS ()
        \_SB.PCI0.LPCB.EC0.PWUP (0x03, 0xFF)
        Local1 = \_SB.PCI0.LPCB.EC0.GBAP ()
        Local3 = \_SB.PCI0.LPCB.EC0.GACS ()
        PWRS = Local3
        Local3 ^= Local2
        If ((Arg0 > 0x02))
        {
            Notify (\_SB.AC, 0x80) // Status Change
            PCNT ()
        }

        If (CondRefOf (\_SB.PCI0.G0B1))
        {
            \_SB.PCI0.G0B1 (Arg0)
        }

        \_SB.WMIV.GVWE (0x17, Zero)
        \_SB.ODGW ((0x56F0 | Arg0))
    }

    Method (PCNT, 0, Serialized)
    {
        If ((TCNT > One))
        {
            If ((PC00 & 0x18))
            {
                Notify (\_SB.PR00, 0x81) // C-State Change
            }

            If ((PC01 & 0x18))
            {
                Notify (\_SB.PR01, 0x81) // C-State Change
            }

            If ((PC02 & 0x18))
            {
                Notify (\_SB.PR02, 0x81) // C-State Change
            }

            If ((PC03 & 0x18))
            {
                Notify (\_SB.PR03, 0x81) // C-State Change
            }

            If ((PC04 & 0x18))
            {
                Notify (\_SB.PR04, 0x81) // C-State Change
            }

            If ((PC05 & 0x18))
            {
                Notify (\_SB.PR05, 0x81) // C-State Change
            }

            If ((PC06 & 0x18))
            {
                Notify (\_SB.PR06, 0x81) // C-State Change
            }

            If ((PC07 & 0x18))
            {
                Notify (\_SB.PR07, 0x81) // C-State Change
            }

            If ((PC08 & 0x18))
            {
                Notify (\_SB.PR08, 0x81) // C-State Change
            }

            If ((PC09 & 0x18))
            {
                Notify (\_SB.PR09, 0x81) // C-State Change
            }

            If ((PC10 & 0x18))
            {
                Notify (\_SB.PR10, 0x81) // C-State Change
            }

            If ((PC11 & 0x18))
            {
                Notify (\_SB.PR11, 0x81) // C-State Change
            }

            If ((PC12 & 0x18))
            {
                Notify (\_SB.PR12, 0x81) // C-State Change
            }

            If ((PC13 & 0x18))
            {
                Notify (\_SB.PR13, 0x81) // C-State Change
            }

            If ((PC14 & 0x18))
            {
                Notify (\_SB.PR14, 0x81) // C-State Change
            }

            If ((PC15 & 0x18))
            {
                Notify (\_SB.PR15, 0x81) // C-State Change
            }
        }
        Else
        {
            Notify (\_SB.PR00, 0x81) // C-State Change
        }
    }

    Mutex (MUTX, 0x00)
    Mutex (OSUM, 0x00)
    Event (WFEV)
    OperationRegion (PRT0, SystemIO, 0x80, 0x02)
    Field (PRT0, WordAcc, Lock, Preserve)
    {
        P80B,   16
    }

    Name (P80T, Zero)
    Method (D8XH, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            P80T = ((P80T & 0xFF00) | Arg1)
        }

        If ((Arg0 == One))
        {
            P80T = ((P80T & 0xFF) | (Arg1 << 0x08))
        }

        P80B = P80T /* \P80T */
    }

    Method (P8XH, 2, Serialized)
    {
        If (CondRefOf (MDBG))
        {
            D8XH (Arg0, Arg1)
        }
    }

    Method (ADBG, 1, Serialized)
    {
        If (CondRefOf (MDBG))
        {
            Return (MDBG (Arg0))
        }

        Return (Zero)
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        D8XH (Zero, Arg0)
        D8XH (One, Zero)
        If ((ECUP == Zero))
        {
            ECNT (Zero)
        }

        HPTS (Arg0)
        ADBG (Concatenate ("_PTS=", ToHexString (Arg0)))
        If (CondRefOf (TBTS))
        {
            If ((TBTS == One))
            {
                TRD3 = One
                Reset (WFEV)
                If ((RTBT == One))
                {
                    TOFF = Zero
                }
            }
        }

        If ((Arg0 == 0x03))
        {
            If (CondRefOf (\_SB.DTSE))
            {
                If ((\_SB.DTSE && (TCNT > One)))
                {
                    TRAP (0x02, 0x1E)
                }
            }
        }

        If (CondRefOf (\_SB.TPM.PTS))
        {
            \_SB.TPM.PTS (Arg0)
        }

        If (CondRefOf (\_SB.CPTS))
        {
            \_SB.CPTS (Arg0)
        }
    }

    Name (RTMA, Buffer (0x20)
    {
        /* 0000 */  0x00, 0x5F, 0x52, 0x54, 0x58, 0x4D, 0x41, 0x43,  // ._RTXMAC
        /* 0008 */  0x5F, 0x23, 0x04, 0x0E, 0x3C, 0x06, 0x10, 0xAC,  // _#..<...
        /* 0010 */  0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // #.......
        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
    })
    Method (_WAK, 1, Serialized)  // _WAK: Wake
    {
        D8XH (One, 0xAB)
        ADBG ("_WAK")
        If (CondRefOf (TBTS))
        {
            If ((TBTS == One))
            {
                TRD3 = Zero
            }
        }

        HWAK (Arg0)
        Notify (\_SB.BAT0, 0x80) // Status Change
        If ((S0ID == One)){}
        If (NEXP)
        {
            If ((OSCC & One))
            {
                NHPG ()
            }

            If ((OSCC & 0x04))
            {
                NPME ()
            }
        }

        If ((Arg0 == 0x03))
        {
            If ((Zero == ACTT))
            {
                \_SB.SSMI (0xEA91, Arg0, Zero, Zero, Zero)
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If (CondRefOf (\_SB.DTSE))
            {
                If ((\_SB.DTSE && (TCNT > One)))
                {
                    TRAP (0x02, 0x14)
                }
            }

            If (CondRefOf (TBTS))
            {
                If ((TBTS == One))
                {
                    If ((RPN0 == One))
                    {
                        Acquire (OSUM, 0xFFFF)
                        \_GPE.TINI (Zero, RPS0, RPT0)
                        Release (OSUM)
                    }

                    If ((RPN1 == One))
                    {
                        Acquire (OSUM, 0xFFFF)
                        \_GPE.TINI (Zero, RPS1, RPT1)
                        Release (OSUM)
                    }
                }
            }

            If ((\_SB.PCI0.RP01.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP01, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP02.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP02, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP03.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP03, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP04.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP04, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP05.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP05, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP06.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP06, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP07.VDID != 0xFFFFFFFF))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PCI0.RP07, Zero) // Bus Check
                }
            }

            If ((\_SB.PCI0.RP08.VDID != 0xFFFFFFFF))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PCI0.RP08, Zero) // Bus Check
                }
            }

            If ((\_SB.PCI0.RP09.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP09, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP10.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP10, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP11.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP11, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP12.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP12, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP13.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP13, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP14.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP14, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP15.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP15, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP16.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP16, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP17.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP17, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP18.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP18, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP19.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP19, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP20.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP20, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP21.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP21, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP22.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP22, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP23.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP23, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP24.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP24, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP21.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP21, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP22.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP22, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP23.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP23, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP24.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP24, Zero) // Bus Check
            }

            If (CondRefOf (\_SB.PCI0.RP01.NFRP))
            {
                \_SB.PCI0.RP01.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP02.NFRP))
            {
                \_SB.PCI0.RP02.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP03.NFRP))
            {
                \_SB.PCI0.RP03.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP04.NFRP))
            {
                \_SB.PCI0.RP04.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP05.NFRP))
            {
                \_SB.PCI0.RP05.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP06.NFRP))
            {
                \_SB.PCI0.RP06.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP07.NFRP))
            {
                \_SB.PCI0.RP07.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP08.NFRP))
            {
                \_SB.PCI0.RP08.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP09.NFRP))
            {
                \_SB.PCI0.RP09.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP10.NFRP))
            {
                \_SB.PCI0.RP10.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP11.NFRP))
            {
                \_SB.PCI0.RP11.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP12.NFRP))
            {
                \_SB.PCI0.RP12.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP13.NFRP))
            {
                \_SB.PCI0.RP13.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP14.NFRP))
            {
                \_SB.PCI0.RP14.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP15.NFRP))
            {
                \_SB.PCI0.RP15.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP16.NFRP))
            {
                \_SB.PCI0.RP16.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP17.NFRP))
            {
                \_SB.PCI0.RP17.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP18.NFRP))
            {
                \_SB.PCI0.RP18.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP19.NFRP))
            {
                \_SB.PCI0.RP19.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP20.NFRP))
            {
                \_SB.PCI0.RP20.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP21.NFRP))
            {
                \_SB.PCI0.RP21.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP22.NFRP))
            {
                \_SB.PCI0.RP22.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP23.NFRP))
            {
                \_SB.PCI0.RP23.NFRP ()
            }

            If (CondRefOf (\_SB.PCI0.RP24.NFRP))
            {
                \_SB.PCI0.RP24.NFRP ()
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If (CondRefOf (TBTS))
        {
            If ((TBTS == One))
            {
                Signal (WFEV)
            }
        }

        If (CondRefOf (\_SB.CWAK))
        {
            \_SB.CWAK (Arg0)
        }

        If ((Arg0 == 0x04))
        {
            If ((CondRefOf (\_SB.AWAC) && CondRefOf (TADW)))
            {
                ADBG ("TADW")
                ADBG (TADW)
                If ((TADW == One))
                {
                    \_SB.AWAC.WAST = One
                    Notify (\_SB.AWAC, 0x02) // Device Wake
                    ADBG ("Notify AWAC of Alarm Device Wake")
                }
            }

            If (CondRefOf (TADW))
            {
                TADW = Zero
            }
        }

        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3) /* \GETB.TBF3 */
    }

    Method (PNOT, 0, Serialized)
    {
        If ((TCNT > One))
        {
            If ((PC00 & 0x08))
            {
                Notify (\_SB.PR00, 0x80) // Performance Capability Change
            }

            If ((PC01 & 0x08))
            {
                Notify (\_SB.PR01, 0x80) // Performance Capability Change
            }

            If ((PC02 & 0x08))
            {
                Notify (\_SB.PR02, 0x80) // Performance Capability Change
            }

            If ((PC03 & 0x08))
            {
                Notify (\_SB.PR03, 0x80) // Performance Capability Change
            }

            If ((PC04 & 0x08))
            {
                Notify (\_SB.PR04, 0x80) // Performance Capability Change
            }

            If ((PC05 & 0x08))
            {
                Notify (\_SB.PR05, 0x80) // Performance Capability Change
            }

            If ((PC06 & 0x08))
            {
                Notify (\_SB.PR06, 0x80) // Performance Capability Change
            }

            If ((PC07 & 0x08))
            {
                Notify (\_SB.PR07, 0x80) // Performance Capability Change
            }

            If ((PC08 & 0x08))
            {
                Notify (\_SB.PR08, 0x80) // Performance Capability Change
            }

            If ((PC09 & 0x08))
            {
                Notify (\_SB.PR09, 0x80) // Performance Capability Change
            }

            If ((PC10 & 0x08))
            {
                Notify (\_SB.PR10, 0x80) // Performance Capability Change
            }

            If ((PC11 & 0x08))
            {
                Notify (\_SB.PR11, 0x80) // Performance Capability Change
            }

            If ((PC12 & 0x08))
            {
                Notify (\_SB.PR12, 0x80) // Performance Capability Change
            }

            If ((PC13 & 0x08))
            {
                Notify (\_SB.PR13, 0x80) // Performance Capability Change
            }

            If ((PC14 & 0x08))
            {
                Notify (\_SB.PR14, 0x80) // Performance Capability Change
            }

            If ((PC15 & 0x08))
            {
                Notify (\_SB.PR15, 0x80) // Performance Capability Change
            }
        }
        Else
        {
            Notify (\_SB.PR00, 0x80) // Performance Capability Change
        }

        If ((TCNT > One))
        {
            If (((PC00 & 0x08) && (PC00 & 0x10)))
            {
                Notify (\_SB.PR00, 0x81) // C-State Change
            }

            If (((PC01 & 0x08) && (PC01 & 0x10)))
            {
                Notify (\_SB.PR01, 0x81) // C-State Change
            }

            If (((PC02 & 0x08) && (PC02 & 0x10)))
            {
                Notify (\_SB.PR02, 0x81) // C-State Change
            }

            If (((PC03 & 0x08) && (PC03 & 0x10)))
            {
                Notify (\_SB.PR03, 0x81) // C-State Change
            }

            If (((PC04 & 0x08) && (PC04 & 0x10)))
            {
                Notify (\_SB.PR04, 0x81) // C-State Change
            }

            If (((PC05 & 0x08) && (PC05 & 0x10)))
            {
                Notify (\_SB.PR05, 0x81) // C-State Change
            }

            If (((PC06 & 0x08) && (PC06 & 0x10)))
            {
                Notify (\_SB.PR06, 0x81) // C-State Change
            }

            If (((PC07 & 0x08) && (PC07 & 0x10)))
            {
                Notify (\_SB.PR07, 0x81) // C-State Change
            }

            If (((PC08 & 0x08) && (PC08 & 0x10)))
            {
                Notify (\_SB.PR08, 0x81) // C-State Change
            }

            If (((PC09 & 0x08) && (PC09 & 0x10)))
            {
                Notify (\_SB.PR09, 0x81) // C-State Change
            }

            If (((PC10 & 0x08) && (PC10 & 0x10)))
            {
                Notify (\_SB.PR10, 0x81) // C-State Change
            }

            If (((PC11 & 0x08) && (PC11 & 0x10)))
            {
                Notify (\_SB.PR11, 0x81) // C-State Change
            }

            If (((PC12 & 0x08) && (PC12 & 0x10)))
            {
                Notify (\_SB.PR12, 0x81) // C-State Change
            }

            If (((PC13 & 0x08) && (PC13 & 0x10)))
            {
                Notify (\_SB.PR13, 0x81) // C-State Change
            }

            If (((PC14 & 0x08) && (PC14 & 0x10)))
            {
                Notify (\_SB.PR14, 0x81) // C-State Change
            }

            If (((PC15 & 0x08) && (PC15 & 0x10)))
            {
                Notify (\_SB.PR15, 0x81) // C-State Change
            }
        }
        Else
        {
            Notify (\_SB.PR00, 0x81) // C-State Change
        }
    }

    OperationRegion (MBAR, SystemMemory, (\_SB.PCI0.GMHB () + 0x5000), 0x1000)
    Field (MBAR, ByteAcc, NoLock, Preserve)
    {
        Offset (0x938), 
        PWRU,   4, 
        Offset (0x9A0), 
        PPL1,   15, 
        PL1E,   1, 
        CLP1,   1
    }

    Name (CLMP, Zero)
    Name (PLEN, Zero)
    Name (PLSV, 0x8000)
    Name (CSEM, Zero)
    Method (SPL1, 0, Serialized)
    {
        Name (PPUU, Zero)
        If ((CSEM == One))
        {
            Return (Zero)
        }

        CSEM = One
        PLSV = PPL1 /* \PPL1 */
        PLEN = PL1E /* \PL1E */
        CLMP = CLP1 /* \CLP1 */
        If ((PWRU == Zero))
        {
            PPUU = One
        }
        Else
        {
            PPUU = (PWRU-- << 0x02)
        }

        Local0 = (PLVL * PPUU) /* \SPL1.PPUU */
        Local1 = (Local0 / 0x03E8)
        PPL1 = Local1
        PL1E = One
        CLP1 = One
    }

    Method (RPL1, 0, Serialized)
    {
        PPL1 = PLSV /* \PLSV */
        PL1E = PLEN /* \PLEN */
        CLP1 = CLMP /* \CLMP */
        CSEM = Zero
    }

    Name (UAMS, Zero)
    Name (GLCK, Zero)
    Method (GUAM, 1, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                If ((GLCK == One))
                {
                    GLCK = Zero
                    P8XH (Zero, 0xE1)
                    P8XH (One, 0xAB)
                    ADBG ("Exit Resiliency")
                    If (PSCP)
                    {
                        If (CondRefOf (\_SB.PR00._PPC))
                        {
                            \_SB.CPPC = Zero
                            PNOT ()
                        }
                    }

                    If (PLCS){}
                }
            }
            Case (One)
            {
                If ((GLCK == Zero))
                {
                    GLCK = One
                    P8XH (Zero, 0xE0)
                    P8XH (One, Zero)
                    ADBG ("Enter Resiliency")
                    If (PSCP)
                    {
                        If ((CondRefOf (\_SB.PR00._PSS) && CondRefOf (\_SB.PR00._PPC)))
                        {
                            If ((PC00 & 0x0400))
                            {
                                \_SB.CPPC = (SizeOf (\_SB.PR00.TPSS) - One)
                            }
                            Else
                            {
                                \_SB.CPPC = (SizeOf (\_SB.PR00.LPSS) - One)
                            }

                            PNOT ()
                        }
                    }

                    If (PLCS)
                    {
                        SPL1 ()
                    }
                }
            }
            Default
            {
                Return (Zero)
            }

        }

        UAMS = (Arg0 && !PWRS)
        P_CS ()
    }

    Method (P_CS, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.PAUD.PUAM))
        {
            \_SB.PCI0.PAUD.PUAM ()
        }

        If ((OSYS == 0x07DC))
        {
            If (CondRefOf (\_SB.PCI0.XHC.DUAM))
            {
                \_SB.PCI0.XHC.DUAM ()
            }
        }
    }

    Method (TRAP, 2, Serialized)
    {
        SMIF = Arg1
        If ((Arg0 == 0x02))
        {
            \_SB.DTSF = Arg1
            \_SB.TRPD = Zero
            Return (\_SB.DTSF) /* External reference */
        }

        If ((Arg0 == 0x04))
        {
            \_SB.TRPF = Zero
        }

        Return (SMIF) /* \SMIF */
    }

    Scope (_SB.PCI0)
    {
        Method (PTMA, 0, NotSerialized)
        {
            Return (BGMA) /* External reference */
        }

        Method (PTMS, 0, NotSerialized)
        {
            Return (BGMS) /* External reference */
        }

        Method (PTIA, 0, NotSerialized)
        {
            Return (BGIA) /* External reference */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            If (CondRefOf (TBTS))
            {
                If ((TBTS == One))
                {
                    If (CondRefOf (\_SB.PCI0.RP01.NFRP))
                    {
                        ^RP01.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP02.NFRP))
                    {
                        ^RP02.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP03.NFRP))
                    {
                        ^RP03.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP04.NFRP))
                    {
                        ^RP04.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP05.NFRP))
                    {
                        ^RP05.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP06.NFRP))
                    {
                        ^RP06.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP07.NFRP))
                    {
                        ^RP07.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP08.NFRP))
                    {
                        ^RP08.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP09.NFRP))
                    {
                        ^RP09.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP10.NFRP))
                    {
                        ^RP10.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP11.NFRP))
                    {
                        ^RP11.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP12.NFRP))
                    {
                        ^RP12.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP13.NFRP))
                    {
                        ^RP13.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP14.NFRP))
                    {
                        ^RP14.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP15.NFRP))
                    {
                        ^RP15.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP16.NFRP))
                    {
                        ^RP16.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP17.NFRP))
                    {
                        ^RP17.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP18.NFRP))
                    {
                        ^RP18.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP19.NFRP))
                    {
                        ^RP19.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP20.NFRP))
                    {
                        ^RP20.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP21.NFRP))
                    {
                        ^RP21.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP22.NFRP))
                    {
                        ^RP22.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP23.NFRP))
                    {
                        ^RP23.NFRP ()
                    }

                    If (CondRefOf (\_SB.PCI0.RP24.NFRP))
                    {
                        ^RP24.NFRP ()
                    }
                }
            }

            If (CondRefOf (TBPE))
            {
                TBPE = One
            }

            OSYS = 0x07D0
            If (CondRefOf (\_OSI, Local0))
            {
                If (_OSI ("Linux"))
                {
                    OSYS = 0x03E8
                }

                If (_OSI ("Windows 2001"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07D2
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSYS = 0x07D3
                }

                If (_OSI ("Windows 2006"))
                {
                    OSYS = 0x07D6
                }

                If (_OSI ("Windows 2009"))
                {
                    OSYS = 0x07D9
                }

                If (_OSI ("Windows 2012"))
                {
                    OSYS = 0x07DC
                }

                If (_OSI ("Windows 2013"))
                {
                    OSYS = 0x07DD
                }

                If (_OSI ("Windows 2015"))
                {
                    OSYS = 0x07DF
                }
            }

            \_TZ.BOTT ()
            \_TZ.RETD ()
            PFLV = One
            If (CondRefOf (\_SB.DTSE))
            {
                If ((DTSE >= One))
                {
                    DSAE = One
                }
            }

            If ((OSTP != GTOS ()))
            {
                GSWS (OSTS)
            }

            If (CondRefOf (TBTS))
            {
                If ((TBTS == One))
                {
                    If ((RPN0 == One))
                    {
                        Acquire (OSUM, 0xFFFF)
                        \_GPE.TINI (Zero, RPS0, RPT0)
                        Release (OSUM)
                    }

                    If ((RPN1 == One))
                    {
                        Acquire (OSUM, 0xFFFF)
                        \_GPE.TINI (Zero, RPS1, RPT1)
                        Release (OSUM)
                    }

                    Signal (WFEV)
                }
            }
        }
    }

    Scope (\)
    {
        Method (NHPG, 0, Serialized)
        {
            \_SB.PCI0.RP01.HPEX = Zero
            \_SB.PCI0.RP02.HPEX = Zero
            \_SB.PCI0.RP03.HPEX = Zero
            \_SB.PCI0.RP04.HPEX = Zero
            \_SB.PCI0.RP05.HPEX = Zero
            \_SB.PCI0.RP06.HPEX = Zero
            \_SB.PCI0.RP07.HPEX = Zero
            \_SB.PCI0.RP08.HPEX = Zero
            \_SB.PCI0.RP09.HPEX = Zero
            \_SB.PCI0.RP10.HPEX = Zero
            \_SB.PCI0.RP11.HPEX = Zero
            \_SB.PCI0.RP12.HPEX = Zero
            \_SB.PCI0.RP13.HPEX = Zero
            \_SB.PCI0.RP14.HPEX = Zero
            \_SB.PCI0.RP15.HPEX = Zero
            \_SB.PCI0.RP16.HPEX = Zero
            \_SB.PCI0.RP17.HPEX = Zero
            \_SB.PCI0.RP18.HPEX = Zero
            \_SB.PCI0.RP19.HPEX = Zero
            \_SB.PCI0.RP20.HPEX = Zero
            \_SB.PCI0.RP21.HPEX = Zero
            \_SB.PCI0.RP22.HPEX = Zero
            \_SB.PCI0.RP23.HPEX = Zero
            \_SB.PCI0.RP24.HPEX = Zero
            \_SB.PCI0.RP01.HPSX = One
            \_SB.PCI0.RP02.HPSX = One
            \_SB.PCI0.RP03.HPSX = One
            \_SB.PCI0.RP04.HPSX = One
            \_SB.PCI0.RP05.HPSX = One
            \_SB.PCI0.RP06.HPSX = One
            \_SB.PCI0.RP07.HPSX = One
            \_SB.PCI0.RP08.HPSX = One
            \_SB.PCI0.RP09.HPSX = One
            \_SB.PCI0.RP10.HPSX = One
            \_SB.PCI0.RP11.HPSX = One
            \_SB.PCI0.RP12.HPSX = One
            \_SB.PCI0.RP13.HPSX = One
            \_SB.PCI0.RP14.HPSX = One
            \_SB.PCI0.RP15.HPSX = One
            \_SB.PCI0.RP16.HPSX = One
            \_SB.PCI0.RP17.HPSX = One
            \_SB.PCI0.RP18.HPSX = One
            \_SB.PCI0.RP19.HPSX = One
            \_SB.PCI0.RP20.HPSX = One
            \_SB.PCI0.RP21.HPSX = One
            \_SB.PCI0.RP22.HPSX = One
            \_SB.PCI0.RP23.HPSX = One
            \_SB.PCI0.RP24.HPSX = One
        }

        Method (NPME, 0, Serialized)
        {
            \_SB.PCI0.RP01.PMEX = Zero
            \_SB.PCI0.RP02.PMEX = Zero
            \_SB.PCI0.RP03.PMEX = Zero
            \_SB.PCI0.RP04.PMEX = Zero
            \_SB.PCI0.RP05.PMEX = Zero
            \_SB.PCI0.RP06.PMEX = Zero
            \_SB.PCI0.RP07.PMEX = Zero
            \_SB.PCI0.RP08.PMEX = Zero
            \_SB.PCI0.RP09.PMEX = Zero
            \_SB.PCI0.RP10.PMEX = Zero
            \_SB.PCI0.RP11.PMEX = Zero
            \_SB.PCI0.RP12.PMEX = Zero
            \_SB.PCI0.RP13.PMEX = Zero
            \_SB.PCI0.RP14.PMEX = Zero
            \_SB.PCI0.RP15.PMEX = Zero
            \_SB.PCI0.RP16.PMEX = Zero
            \_SB.PCI0.RP17.PMEX = Zero
            \_SB.PCI0.RP18.PMEX = Zero
            \_SB.PCI0.RP19.PMEX = Zero
            \_SB.PCI0.RP20.PMEX = Zero
            \_SB.PCI0.RP21.PMEX = Zero
            \_SB.PCI0.RP22.PMEX = Zero
            \_SB.PCI0.RP23.PMEX = Zero
            \_SB.PCI0.RP24.PMEX = Zero
            \_SB.PCI0.RP21.PMEX = Zero
            \_SB.PCI0.RP22.PMEX = Zero
            \_SB.PCI0.RP23.PMEX = Zero
            \_SB.PCI0.RP24.PMEX = Zero
            \_SB.PCI0.RP01.PMSX = One
            \_SB.PCI0.RP02.PMSX = One
            \_SB.PCI0.RP03.PMSX = One
            \_SB.PCI0.RP04.PMSX = One
            \_SB.PCI0.RP05.PMSX = One
            \_SB.PCI0.RP06.PMSX = One
            \_SB.PCI0.RP07.PMSX = One
            \_SB.PCI0.RP08.PMSX = One
            \_SB.PCI0.RP09.PMSX = One
            \_SB.PCI0.RP10.PMSX = One
            \_SB.PCI0.RP11.PMSX = One
            \_SB.PCI0.RP12.PMSX = One
            \_SB.PCI0.RP13.PMSX = One
            \_SB.PCI0.RP14.PMSX = One
            \_SB.PCI0.RP15.PMSX = One
            \_SB.PCI0.RP16.PMSX = One
            \_SB.PCI0.RP17.PMSX = One
            \_SB.PCI0.RP18.PMSX = One
            \_SB.PCI0.RP19.PMSX = One
            \_SB.PCI0.RP20.PMSX = One
            \_SB.PCI0.RP21.PMSX = One
            \_SB.PCI0.RP22.PMSX = One
            \_SB.PCI0.RP23.PMSX = One
            \_SB.PCI0.RP24.PMSX = One
        }

        Name (PICM, Zero)
        Name (PRWP, Package (0x02)
        {
            Zero, 
            Zero
        })
        Method (GPRW, 2, NotSerialized)
        {
            PRWP [Zero] = Arg0
            Local0 = (SS1 << One)
            Local0 |= (SS2 << 0x02)
            Local0 |= (SS3 << 0x03)
            Local0 |= (SS4 << 0x04)
            If (((One << Arg1) & Local0))
            {
                PRWP [One] = Arg1
            }
            Else
            {
                Local0 >>= One
                FindSetLeftBit (Local0, PRWP [One])
            }

            Return (PRWP) /* \PRWP */
        }
    }

    Scope (_SB)
    {
        Name (OSCI, Zero)
        Name (OSCO, Zero)
        Name (OSCP, Zero)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg3, 0x08, CAP1)
            If ((S0ID == One)){}
            If ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If ((Arg1 == One))
                {
                    OSCP = CAP0 /* \_SB_._OSC.CAP0 */
                    If ((CAP0 & 0x04))
                    {
                        OSCO = 0x04
                        If (((SGMD & 0x0F) != 0x02))
                        {
                            If ((RTD3 == Zero))
                            {
                                CAP0 &= 0x3B
                                STS0 |= 0x10
                            }
                        }
                    }
                }
                Else
                {
                    STS0 &= 0xFFFFFF00
                    STS0 |= 0x0A
                }
            }
            Else
            {
                STS0 &= 0xFFFFFF00
                STS0 |= 0x06
            }

            If (!NEXP)
            {
                CAP1 &= 0xFFFFFFF8
            }

            Return (Arg3)
        }

        Device (EPC)
        {
            Name (_HID, EisaId ("INT0E0C"))  // _HID: Hardware ID
            Name (_STR, Unicode ("Enclave Page Cache 1.0"))  // _STR: Description String
            Name (_MLS, Package (0x01)  // _MLS: Multiple Language String
            {
                Package (0x02)
                {
                    "en", 
                    Unicode ("Enclave Page Cache 1.0")
                }
            })
            Name (RBUF, ResourceTemplate ()
            {
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000001, // Length
                    ,, _Y42, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateQWordField (RBUF, \_SB.EPC._Y42._MIN, EMIN)  // _MIN: Minimum Base Address
                CreateQWordField (RBUF, \_SB.EPC._Y42._MAX, EMAX)  // _MAX: Maximum Base Address
                CreateQWordField (RBUF, \_SB.EPC._Y42._LEN, ELEN)  // _LEN: Length
                EMIN = EMNA /* External reference */
                ELEN = ELNG /* External reference */
                EMAX = ((EMNA + ELNG) - One)
                Return (RBUF) /* \_SB_.EPC_.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((EPCS != Zero))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }

    If ((ENVM == One))
    {
        Scope (_SB)
        {
            Method (VMON, 0, Serialized)
            {
            }

            Method (VMOF, 0, Serialized)
            {
            }
        }
    }

    Scope (_SB)
    {
        Device (COEX)
        {
            Name (_HID, EisaId ("INT3519"))  // _HID: Hardware ID
            Name (_STR, Unicode ("CoExistence Manager"))  // _STR: Description String
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((COEM == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Name (G0B2, Zero)
    Scope (_SB.PCI0)
    {
        Method (G0B0, 1, Serialized)
        {
            If ((Arg0 == 0x03))
            {
                G0B2 = ^^LID._LID ()
            }

            If (CondRefOf (\_SB.G0A6))
            {
                G0A6 (Arg0)
            }

            If ((Arg0 == 0x05))
            {
                SSMI (0xEA74, 0x09, Zero, Zero, Zero)
            }

            If (CondRefOf (\_SB.G0AD))
            {
                G0AD ()
            }
        }

        Method (G0B1, 1, Serialized)
        {
            If ((Arg0 == 0x03))
            {
                Local0 = ^^LID._LID ()
                If ((Local0 ^ G0B2))
                {
                    ^GFX0.GLID (Local0)
                }
            }

            If ((Arg0 == 0x04))
            {
                ^GFX0.GLID (^^LID._LID ())
                If (CondRefOf (\_SB.PCI0.G0A0))
                {
                    G046 = 0x0F
                    G0A0 ()
                }

                If (CondRefOf (\_SB.PCI0.GFX0.G026))
                {
                    ^GFX0.G026 ()
                }
            }

            If (CondRefOf (\_SB.G0A7))
            {
                G0A7 (Arg0)
            }
        }

        Method (G0BE, 0, NotSerialized)
        {
            \_GPE.G001 (Zero)
        }

        Method (G0BF, 0, NotSerialized)
        {
            Local4 = \_GPE.G014 ()
        }

        Method (G0C0, 0, NotSerialized)
        {
        }

        Method (G0C1, 1, Serialized)
        {
        }
    }

    Scope (_SB)
    {
        Processor (PR00, 0x01, 0x00001810, 0x06){}
        Processor (PR01, 0x02, 0x00001810, 0x06){}
        Processor (PR02, 0x03, 0x00001810, 0x06){}
        Processor (PR03, 0x04, 0x00001810, 0x06){}
        Processor (PR04, 0x05, 0x00001810, 0x06){}
        Processor (PR05, 0x06, 0x00001810, 0x06){}
        Processor (PR06, 0x07, 0x00001810, 0x06){}
        Processor (PR07, 0x08, 0x00001810, 0x06){}
        Processor (PR08, 0x09, 0x00001810, 0x06){}
        Processor (PR09, 0x0A, 0x00001810, 0x06){}
        Processor (PR10, 0x0B, 0x00001810, 0x06){}
        Processor (PR11, 0x0C, 0x00001810, 0x06){}
        Processor (PR12, 0x0D, 0x00001810, 0x06){}
        Processor (PR13, 0x0E, 0x00001810, 0x06){}
        Processor (PR14, 0x0F, 0x00001810, 0x06){}
        Processor (PR15, 0x10, 0x00001810, 0x06){}
    }

    Scope (_SB.PR00)
    {
        Name (CPC2, Package (0x15)
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000000000CE, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000777, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000770, // Address
                    0x04,               // Access Size
                    )
            }, 

            One, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x0A,               // Bit Width
                    0x20,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            Zero
        })
        Name (CPOC, Package (0x15)
        {
            0x15, 
            0x02, 
            0xFF, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000000000CE, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000777, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000770, // Address
                    0x04,               // Access Size
                    )
            }, 

            One, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x0A,               // Bit Width
                    0x20,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            Zero
        })
    }

    Scope (_SB)
    {
        Device (PAGD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (_OSI ("Processor Aggregator Device"))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_PUR, Package (0x02)  // _PUR: Processor Utilization Request
            {
                One, 
                Zero
            })
        }
    }

    Scope (\)
    {
        OperationRegion (THMR, SystemMemory, TBRB, 0xDC)
        Field (THMR, AnyAcc, Lock, Preserve)
        {
            Offset (0x30), 
            CTV1,   16, 
            CTV2,   16, 
            Offset (0x60), 
            PTV,    8, 
            Offset (0xD8), 
            PCHT,   8, 
            MCHT,   8
        }
    }

    Scope (_TZ)
    {
        Name (TRPC, Package (0x05)
        {
            Package (0x04)
            {
                0x60, 
                0x63, 
                0x64, 
                0x80
            }, 

            Package (0x04)
            {
                0x63, 
                0x66, 
                0x66, 
                0x80
            }, 

            Package (0x04)
            {
                0x80, 
                0x80, 
                0x80, 
                0x80
            }, 

            Package (0x04)
            {
                0x80, 
                0x80, 
                0x80, 
                0x80
            }, 

            Package (0x04)
            {
                0x80, 
                0x80, 
                0x80, 
                0x80
            }
        })
        Name (TRIP, Package (0x05)
        {
            Package (0x04){}, 
            Package (0x04){}, 
            Package (0x04){}, 
            Package (0x04){}, 
            Package (0x04){}
        })
        Method (TRUP, 0, Serialized)
        {
            If ((TJMX > Zero))
            {
                Local0 = TJMX /* \TJMX */
                DerefOf (TRPC [Zero]) [0x02] = Local0
                DerefOf (TRPC [Zero]) [One] = Local0
                DerefOf (TRPC [Zero]) [Zero] = (TJMX - 0x03)
            }
        }

        Method (INTM, 1, Serialized)
        {
            Local0 = Zero
            OTHI (Arg0)
        }

        Name (WHTR, 0x1F)
        Name (OSTH, Zero)
        Name (LARE, Package (0x06){})
        Name (LARP, Package (0x06){})
        Name (CUZO, Package (0x06){})
        Name (LATR, Package (0x06){})
        Mutex (THER, 0x00)
        Name (THSC, 0x1F)
        Method (BOTT, 0, Serialized)
        {
            TRUP ()
            Local3 = SizeOf (TRPC)
            Local5 = DerefOf (TRPC [Zero])
            Local4 = SizeOf (Local5)
            Local0 = Zero
            While ((Local0 < Local3))
            {
                Local1 = Zero
                While ((Local1 < Local4))
                {
                    Local6 = DerefOf (DerefOf (TRPC [Local0]) [Local1])
                    Local7 = GETK (Local6)
                    DerefOf (TRIP [Local0]) [Local1] = Local7
                    Local1++
                }

                Local0++
            }
        }

        Method (GETK, 1, Serialized)
        {
            Local0 = (Arg0 * 0x0A)
            Local1 = (Local0 + 0x0AAC)
            Return (Local1)
        }

        Method (RETD, 0, Serialized)
        {
            Acquire (THER, 0xFFFF)
            THSC = 0x1F
            WHTR = 0x1F
            Local0 = Zero
            While ((Local0 < 0x06))
            {
                LARE [Local0] = Zero
                LARP [Local0] = Zero
                CUZO [Local0] = 0xFF
                LATR [Local0] = Zero
                Local0++
            }

            Release (THER)
        }

        Method (OTHI, 1, Serialized)
        {
            ECTI (One)
            If (Arg0)
            {
                NTHS (0x1F)
            }
        }

        Name (OTID, Zero)
        Method (ECTI, 1, Serialized)
        {
            If ((Arg0 == One))
            {
                OTID = One
            }

            If ((\_SB.PCI0.LPCB.EC0.ECRG && OTID))
            {
                THSC = 0x1F
                NTHS (0x1F)
                OTID = Zero
            }
        }

        Method (OSIT, 0, Serialized)
        {
            If ((OSTH == Zero))
            {
                INTM (Zero)
                OSTH = One
            }
        }

        Method (GETP, 2, Serialized)
        {
            Local0 = Arg1
            If ((Arg1 == One))
            {
                Local3 = DerefOf (CUZO [Arg0])
                If (((Local3 > One) && (Local3 != 0xFF)))
                {
                    Local0 = Zero
                }
            }

            Local2 = DerefOf (DerefOf (TRIP [Arg0]) [Local0])
            Return (Local2)
        }

        Method (GTTP, 5, Serialized)
        {
            Local1 = Arg2
            If (((Arg0 <= 0x05) && \_SB.PCI0.LPCB.EC0.ECRG))
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                \_SB.PCI0.LPCB.EC0.CRZN = Arg1
                Local1 = \_SB.PCI0.LPCB.EC0.TEMP
                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }

            Local2 = Local1
            If ((Local1 < Arg3))
            {
                If ((DerefOf (LARE [Arg0]) < Arg3))
                {
                    LARP [Arg0] = Arg3
                }

                Local1 = DerefOf (LARP [Arg0])
            }
            ElseIf ((Local1 > Arg4))
            {
                If ((DerefOf (LARE [Arg0]) > Arg4))
                {
                    LARP [Arg0] = Arg4
                }

                Local1 = DerefOf (LARP [Arg0])
            }

            LARE [Arg0] = Local2
            LARP [Arg0] = Local1
            Return (Local1)
        }

        Method (SETM, 3, Serialized)
        {
            Local5 = Zero
            If ((Arg0 <= 0x04))
            {
                Acquire (THER, 0xFFFF)
                Local7 = (One << Arg0)
                If (((THSC & Local7) && \_SB.PCI0.LPCB.EC0.ECRG))
                {
                    If ((DerefOf (LATR [Arg0]) && (Arg0 != 0x04)))
                    {
                        Local4 = (Arg2 + 0x02)
                    }
                    Else
                    {
                        Local4 = Arg2
                    }

                    Local2 = DerefOf (DerefOf (TRPC [Arg0]) [Zero])
                    Local0 = One
                    While ((Local0 <= 0x03))
                    {
                        Local6 = DerefOf (DerefOf (TRPC [Arg0]) [Local0])
                        If ((Local4 < Local6))
                        {
                            Break
                        }
                        Else
                        {
                            Local0++
                        }
                    }

                    If ((Local0 == One))
                    {
                        If ((Arg2 > Local2))
                        {
                            If ((DerefOf (LATR [Arg0]) > Local6))
                            {
                                Local0++
                            }
                        }
                    }

                    Local3 = DerefOf (TRPC [Arg0])
                    Local4 = SizeOf (Local3)
                    If (((Local0 != DerefOf (CUZO [Arg0])) && (Local0 < 
                        Local4)))
                    {
                        Local5 = One
                        CUZO [Arg0] = Local0
                        If ((Arg0 <= 0x05))
                        {
                            Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                            \_SB.PCI0.LPCB.EC0.CRZN = Arg1
                            If ((DerefOf (LATR [Arg0]) == Zero))
                            {
                                \_SB.PCI0.LPCB.EC0.PLTP = Local2
                            }

                            \_SB.PCI0.LPCB.EC0.PHTP = Local6
                            Release (\_SB.PCI0.LPCB.EC0.ECMX)
                        }

                        LATR [Arg0] = Local6
                    }

                    THSC &= ~Local7
                }

                Release (THER)
            }

            Return (Local5)
        }

        Method (CHOT, 1, Serialized)
        {
            If ((DTCD & 0x00020000))
            {
                Local0 = 0x0FAC
            }
            Else
            {
                Local0 = GETP (Arg0, 0x02)
            }

            Return (Local0)
        }

        ThermalZone (CPUZ)
        {
            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                Return (CHOT (Zero))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (Zero, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                OSIT ()
                Local0 = Zero
                Local0 = GTTP (Zero, One, 0x10, Zero, 0x7F)
                If (SETM (Zero, One, Local0))
                {
                    Notify (CPUZ, 0x81) // Thermal Trip Point Change
                }

                Return (GETK (Local0))
            }
        }

        ThermalZone (GFXZ)
        {
            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                Return (GETP (One, One))
            }

            Method (_PSL, 0, NotSerialized)  // _PSL: Passive List
            {
                Return (PSL ())
            }

            Name (_TSP, 0x012C)  // _TSP: Thermal Sampling Period
            Name (_TC1, One)  // _TC1: Thermal Constant 1
            Name (_TC2, 0x02)  // _TC2: Thermal Constant 2
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (One, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (One, 0x02, 0x10, Zero, 0x7F)
                If (SETM (One, 0x02, Local0))
                {
                    Notify (GFXZ, 0x81) // Thermal Trip Point Change
                }

                Return (GETK (Local0))
            }
        }

        ThermalZone (EXTZ)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (0x02, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (0x02, 0x03, 0x10, Zero, 0x7F)
                Return (GETK (Local0))
            }
        }

        ThermalZone (LOCZ)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (0x03, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (0x03, 0x04, 0x10, Zero, 0x7F)
                Return (GETK (Local0))
            }
        }

        ThermalZone (BATZ)
        {
            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                Return (GETP (0x04, One))
            }

            Method (_PSL, 0, NotSerialized)  // _PSL: Passive List
            {
                Return (PSL ())
            }

            Name (_TSP, 0x012C)  // _TSP: Thermal Sampling Period
            Name (_TC1, 0x32)  // _TC1: Thermal Constant 1
            Name (_TC2, Zero)  // _TC2: Thermal Constant 2
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (0x04, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (0x04, 0x05, Zero, Zero, 0x7F)
                If (SETM (0x04, 0x05, Local0))
                {
                    Notify (BATZ, 0x81) // Thermal Trip Point Change
                }

                Return (GETK (Local0))
            }
        }

        ThermalZone (CHGZ)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (GETP (0x05, 0x03))
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (0x05, 0x06, 0x10, Zero, 0x7F)
                Return (GETK (Local0))
            }
        }

        Method (NTHS, 1, Serialized)
        {
            If ((Arg0 & One))
            {
                Notify (CPUZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x02))
            {
                Notify (GFXZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x04))
            {
                Notify (EXTZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x08))
            {
                Notify (LOCZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x10))
            {
                Notify (BATZ, 0x80) // Thermal Status Change
            }

            If ((Arg0 & 0x20))
            {
                Notify (CHGZ, 0x80) // Thermal Status Change
            }
        }

        Method (ECTE, 1, Serialized)
        {
            Local1 = Zero
            If (Arg0)
            {
                If ((Arg0 & One))
                {
                    Local1 |= One
                }

                If ((Arg0 & 0x02))
                {
                    Local1 |= 0x02
                }

                If ((Arg0 & 0x04))
                {
                    Local1 |= 0x04
                }

                If ((Arg0 & 0x08))
                {
                    Local1 |= 0x08
                }

                If ((Arg0 & 0x10))
                {
                    Local1 |= 0x10
                }

                If ((Arg0 & 0x20))
                {
                    Local1 |= 0x20
                }
            }
            Else
            {
                Local1 |= 0x10
            }

            Acquire (THER, 0xFFFF)
            THSC |= Local1
            Release (THER)
            NTHS (Local1)
        }

        Method (GFRM, 0, Serialized)
        {
            Local0 = Zero
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                Local0 = \_SB.PCI0.LPCB.EC0.FRDC
                Release (\_SB.PCI0.LPCB.EC0.ECMX)
                If (Local0)
                {
                    Local1 = (Local0 >> One)
                    Local2 = (0x0003C000 + Local1)
                    Divide (Local2, Local0, Local1, Local0)
                }
            }

            Return (Local0)
        }

        Method (GFVE, 1, Serialized)
        {
            Local0 = Zero
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                If ((Arg0 == One))
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.FRDC
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.FR2C
                }

                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }

            Return (Local0)
        }

        Method (GTFV, 1, Serialized)
        {
            Local0 = Zero
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                If ((Arg0 == One))
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.FTGC
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.FT2C
                }

                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }

            Return (Local0)
        }

        Method (GTRM, 0, Serialized)
        {
            Local0 = Zero
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                Local0 = \_SB.PCI0.LPCB.EC0.FTGC
                Release (\_SB.PCI0.LPCB.EC0.ECMX)
                If (Local0)
                {
                    Local1 = (Local0 >> One)
                    Local2 = (0x0003C000 + Local1)
                    Divide (Local2, Local0, Local1, Local0)
                }
            }

            Return (Local0)
        }

        Method (GFSD, 0, Serialized)
        {
            Local0 = GFRM ()
            Local1 = (Local0 * 0x64)
            Divide (Local1, AMFR, Local1, Local2)
            Return (Local2)
        }

        Method (CTCT, 1, Serialized)
        {
            Local1 = (Arg0 * AMFR) /* \AMFR */
            Divide (Local1, 0x64, Local2, Local0)
            If (Local0)
            {
                Local1 = (Local0 >> One)
                Local2 = (0x0003C000 + Local1)
                Divide (Local2, Local0, Local1, Local0)
            }

            If ((Local0 > 0xF4))
            {
                Local0 = 0xF4
            }

            Return (Local0)
        }

        Method (GCGC, 0, Serialized)
        {
            Name (LTMP, Buffer (0x02){})
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                LTMP = \_SB.PCI0.LPCB.EC0.BPR
                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }

            Return (LTMP) /* \_TZ_.GCGC.LTMP */
        }

        Method (PSL, 0, Serialized)
        {
            If ((\_SB.CFGD & 0x01000000))
            {
                If ((TCNT == 0x08))
                {
                    Return (Package (0x08)
                    {
                        \_SB.PR00, 
                        \_SB.PR01, 
                        \_SB.PR02, 
                        \_SB.PR03, 
                        \_SB.PR04, 
                        \_SB.PR05, 
                        \_SB.PR06, 
                        \_SB.PR07
                    })
                }

                If ((TCNT == 0x04))
                {
                    Return (Package (0x04)
                    {
                        \_SB.PR00, 
                        \_SB.PR01, 
                        \_SB.PR02, 
                        \_SB.PR03
                    })
                }

                Return (Package (0x02)
                {
                    \_SB.PR00, 
                    \_SB.PR01
                })
            }
            Else
            {
                Return (Package (0x01)
                {
                    \_SB.PR00
                })
            }
        }

        ThermalZone (PCHZ)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (0x0FAC)
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = Zero
                Local0 = GTTP (0x05, Zero, PCHT, Zero, 0x7F)
                Return (GETK (Local0))
            }
        }

        Method (GDTP, 2, Serialized)
        {
            If ((Arg1 || DTZS ()))
            {
                Local0 = \_SB.PCI0.SBUS.SRDW (Arg0, 0x05)
                If ((Local0 == 0xFFFFFFFF))
                {
                    Local0 = Zero
                }
                ElseIf ((Local0 & 0x1000))
                {
                    Local0 = Zero
                }
                Else
                {
                    Local0 >>= 0x04
                    Local0 &= 0xFF
                }

                Return (GETK (Local0))
            }
            Else
            {
                Return (0x0AAC)
            }
        }

        Method (DTZS, 0, NotSerialized)
        {
            If ((DTCD & 0x00010000))
            {
                Return (0x0F)
            }

            Return (Zero)
        }

        ThermalZone (DM1Z)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (DTZS ())
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Return (GDTP (0x30, Zero))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (0x0FAC)
            }
        }

        ThermalZone (DM2Z)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (DTZS ())
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Return (GDTP (0x34, Zero))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (0x0FAC)
            }
        }

        Name (SEN1, Package (0x07)
        {
            Package (0x0E)
            {
                "CPU Fan", 
                "Reports fan speed", 
                0x0C, 
                "", 
                Zero, 
                0x03, 
                "Normal", 
                "Caution", 
                "Stalled", 
                "", 
                0x13, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x0E)
            {
                "GPU Fan", 
                "Reports fan2 speed", 
                0x0C, 
                "", 
                Zero, 
                0x03, 
                "Normal", 
                "Caution", 
                "Stalled", 
                "", 
                0x13, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x0E)
            {
                "CPU Temperature", 
                "Reports CPU package temperature", 
                0x02, 
                "", 
                Zero, 
                0x03, 
                "Normal", 
                "Caution", 
                "Critical", 
                "", 
                0x02, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x0E)
            {
                "Discrete Graphics Temperature", 
                "Reports discrete graphics temperature", 
                0x02, 
                "", 
                Zero, 
                0x03, 
                "Normal", 
                "Caution", 
                "Critical", 
                "", 
                0x02, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x0E)
            {
                "Remote Temperature", 
                "Reports external/remote temperature", 
                0x02, 
                "", 
                Zero, 
                0x03, 
                "Normal", 
                "Caution", 
                "Critical", 
                "", 
                0x02, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x0E)
            {
                "Local Temperature", 
                "Reports internal/local temperature", 
                0x02, 
                "", 
                Zero, 
                0x03, 
                "Normal", 
                "Caution", 
                "Critical", 
                "", 
                0x02, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x0E)
            {
                "Battery Temperature", 
                "Reports maximum temperature of all batteries", 
                0x02, 
                "", 
                Zero, 
                0x03, 
                "Normal", 
                "Caution", 
                "Critical", 
                "", 
                0x02, 
                Zero, 
                Zero, 
                Zero
            }
        })
        Method (WQBI, 1, Serialized)
        {
            DerefOf (SEN1 [Arg0]) [0x04] = 0x02
            DerefOf (SEN1 [Arg0]) [0x09] = "Normal"
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Local0 = GFRM ()
                    Local1 = GTRM ()
                    Local2 = 0x05DC
                    If (((Local0 < Local2) && (Local1 < Local2)))
                    {
                        Local0 = Zero
                    }
                    ElseIf ((Local1 > (Local0 + 0xC8)))
                    {
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x03
                        DerefOf (SEN1 [Arg0]) [0x09] = "Stalled"
                    }
                }
                Case (One)
                {
                    Local0 = GFVE (0x02)
                    If (Local0)
                    {
                        Local3 = (Local0 >> One)
                        Local4 = (0x0003C000 + Local3)
                        Divide (Local4, Local0, Local3, Local0)
                    }

                    Local1 = GTFV (0x02)
                    If (Local1)
                    {
                        Local3 = (Local1 >> One)
                        Local4 = (0x0003C000 + Local3)
                        Divide (Local4, Local1, Local3, Local1)
                    }

                    Local2 = 0x05DC
                    If (((Local0 < Local2) && (Local1 < Local2)))
                    {
                        Local0 = Zero
                    }
                    ElseIf ((Local1 > (Local0 + 0xC8)))
                    {
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x03
                        DerefOf (SEN1 [Arg0]) [0x09] = "Stalled"
                    }
                }
                Case (0x02)
                {
                    Local0 = ^CPUZ._TMP ()
                    Local1 = ^CPUZ._HOT ()
                    If ((Local0 >= Local1))
                    {
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x03
                        DerefOf (SEN1 [Arg0]) [0x09] = "Critical"
                    }
                    Else
                    {
                        Local1 -= Local0
                        If ((Local1 <= 0x32))
                        {
                            DerefOf (SEN1 [Arg0]) [0x04] = 0x03
                            DerefOf (SEN1 [Arg0]) [0x09] = "Caution"
                        }
                    }
                }
                Case (0x03)
                {
                    Local0 = ^GFXZ._TMP ()
                    Local1 = ^GFXZ._PSV ()
                    If ((Local0 >= Local1))
                    {
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x03
                        DerefOf (SEN1 [Arg0]) [0x09] = "Caution"
                    }
                }
                Case (0x04)
                {
                    Local0 = ^EXTZ._TMP ()
                }
                Case (0x05)
                {
                    Local0 = ^LOCZ._TMP ()
                }
                Case (0x06)
                {
                    Local0 = ^BATZ._TMP ()
                    Local1 = ^BATZ._PSV ()
                    If ((Local0 >= Local1))
                    {
                        DerefOf (SEN1 [Arg0]) [0x04] = 0x03
                        DerefOf (SEN1 [Arg0]) [0x09] = "Caution"
                    }
                }

            }

            If ((Arg0 > One))
            {
                Local1 = (Local0 - 0x0AAC)
                Divide (Local1, 0x0A, Local2, Local0)
            }

            DerefOf (SEN1 [Arg0]) [0x0C] = Local0
            Return (DerefOf (SEN1 [Arg0]))
        }
    }

    Scope (_SB.PCI0.LPCB.EC0)
    {
        Name (CDIX, Zero)
        Name (CDPL, 0x0F)
        Name (ODPT, Zero)
        Name (DCMD, Zero)
        Method (DDPL, 0, Serialized)
        {
            Local0 = Zero
            If ((DPTF == Zero))
            {
                Local0 = One
            }
            ElseIf ((^^^^IETM.DOSS == Zero))
            {
                Local0 = One
            }

            If ((Local0 == One))
            {
                If ((DDC1 != Zero))
                {
                    Local1 = DDC1 /* \DDC1 */
                    If ((Local1 == One))
                    {
                        CDIX = Zero
                    }
                    ElseIf ((Local1 == 0x02))
                    {
                        CDIX = One
                    }
                    ElseIf ((Local1 == 0x03))
                    {
                        CDIX = 0x02
                    }
                    Else
                    {
                        CDIX = 0x03
                    }

                    Local5 = (One << CDIX)
                    If ((ODV2 == One))
                    {
                        CDPL = (CDPL | Local5)
                    }
                    Else
                    {
                        CDPL = (CDPL & ~Local5)
                    }
                }

                If ((DDC2 != Zero))
                {
                    Local1 = DDC2 /* \DDC2 */
                    If ((Local1 == One))
                    {
                        CDIX = Zero
                    }
                    ElseIf ((Local1 == 0x02))
                    {
                        CDIX = One
                    }
                    ElseIf ((Local1 == 0x03))
                    {
                        CDIX = 0x02
                    }
                    Else
                    {
                        CDIX = 0x03
                    }

                    Acquire (ECMX, 0xFFFF)
                    Local3 = VBPS /* \_SB_.PCI0.LPCB.EC0_.VBPS */
                    Release (ECMX)
                    Local4 = 0x40
                    Local4 &= Local3
                    If ((Local4 != Zero))
                    {
                        ODPT = One
                    }
                    Else
                    {
                        ODPT = Zero
                    }

                    Local5 = (One << CDIX)
                    If ((ODPT == One))
                    {
                        CDPL = (CDPL | Local5)
                    }
                    Else
                    {
                        CDPL = (CDPL & ~Local5)
                    }
                }

                If ((DDC3 != Zero))
                {
                    Local1 = DDC3 /* \DDC3 */
                    If ((Local1 == One))
                    {
                        CDIX = Zero
                    }
                    ElseIf ((Local1 == 0x02))
                    {
                        CDIX = One
                    }
                    ElseIf ((Local1 == 0x03))
                    {
                        CDIX = 0x02
                    }
                    Else
                    {
                        CDIX = 0x03
                    }

                    Local5 = (One << CDIX)
                    If ((ODV1 == One))
                    {
                        CDPL = (CDPL | Local5)
                    }
                    Else
                    {
                        CDPL = (CDPL & ~Local5)
                    }
                }

                If ((DDC4 != Zero))
                {
                    Local1 = DDC4 /* \DDC4 */
                    If ((Local1 == One))
                    {
                        CDIX = Zero
                    }
                    ElseIf ((Local1 == 0x02))
                    {
                        CDIX = One
                    }
                    ElseIf ((Local1 == 0x03))
                    {
                        CDIX = 0x02
                    }
                    Else
                    {
                        CDIX = 0x03
                    }

                    Local5 = (One << CDIX)
                    If ((ODV5 == One))
                    {
                        CDPL = (CDPL | Local5)
                    }
                    Else
                    {
                        CDPL = (CDPL & ~Local5)
                    }
                }

                If ((DDC5 != Zero))
                {
                    Local1 = DDC5 /* \DDC5 */
                    If ((Local1 == One))
                    {
                        CDIX = Zero
                    }
                    ElseIf ((Local1 == 0x02))
                    {
                        CDIX = One
                    }
                    ElseIf ((Local1 == 0x03))
                    {
                        CDIX = 0x02
                    }
                    Else
                    {
                        CDIX = 0x03
                    }

                    Local5 = (One << CDIX)
                    DCMD = ODV6 /* \ODV6 */
                    If ((ODV6 == One))
                    {
                        CDPL = (CDPL | Local5)
                    }
                    Else
                    {
                        CDPL = (CDPL & ~Local5)
                    }
                }

                PMPP (CDPL)
            }
        }

        Method (PMPP, 1, Serialized)
        {
            Local1 = Arg0
            If ((Local1 == 0x0F))
            {
                PPL1 = P101 /* \P101 */
            }
            ElseIf ((Local1 == 0x0E))
            {
                PPL1 = P102 /* \P102 */
            }
            ElseIf ((Local1 == 0x0D))
            {
                PPL1 = P103 /* \P103 */
            }
            ElseIf ((Local1 == 0x0C))
            {
                PPL1 = P104 /* \P104 */
            }
            ElseIf ((Local1 == 0x0B))
            {
                PPL1 = P105 /* \P105 */
            }
            ElseIf ((Local1 == 0x0A))
            {
                PPL1 = P106 /* \P106 */
            }
            ElseIf ((Local1 == 0x09))
            {
                PPL1 = P107 /* \P107 */
            }
            ElseIf ((Local1 == 0x08))
            {
                PPL1 = P108 /* \P108 */
            }
            ElseIf ((Local1 == 0x07))
            {
                PPL1 = P109 /* \P109 */
            }
            ElseIf ((Local1 == 0x06))
            {
                PPL1 = P110 /* \P110 */
            }
            ElseIf ((Local1 == 0x05))
            {
                PPL1 = P111 /* \P111 */
            }
            ElseIf ((Local1 == 0x04))
            {
                PPL1 = P112 /* \P112 */
            }
            ElseIf ((Local1 == 0x03))
            {
                PPL1 = P113 /* \P113 */
            }
            ElseIf ((Local1 == 0x02))
            {
                PPL1 = P114 /* \P114 */
            }
            ElseIf ((Local1 == One))
            {
                PPL1 = P115 /* \P115 */
            }
            ElseIf ((Local1 == Zero))
            {
                PPL1 = P116 /* \P116 */
            }
        }

        Method (PT02, 0, Serialized)
        {
            If (Zero){}
            Else
            {
                PL2E = One
                If ((DCMD == One))
                {
                    PPL2 = PLD2 /* \PLD2 */
                }
                Else
                {
                    PPL2 = PDC2 /* \PDC2 */
                }
            }
        }

        Method (PT04, 0, Serialized)
        {
            If (Zero){}
            ElseIf ((DPTF == Zero))
            {
                If ((DCMD == One))
                {
                    GSWS (0xB1)
                }
                Else
                {
                    GSWS (0xB3)
                }
            }
            ElseIf (CondRefOf (\_SB.IETM.DOSS))
            {
                If ((^^^^IETM.DOSS == Zero))
                {
                    If ((DCMD == One))
                    {
                        GSWS (0xB1)
                    }
                    Else
                    {
                        GSWS (0xB3)
                    }
                }
            }
        }

        Method (PTAD, 1, Serialized)
        {
            If (Arg0)
            {
                ODV7 = One
            }
            Else
            {
                ODV7 = Zero
            }

            If (CondRefOf (\_SB.IETM.ODVP))
            {
                ^^^^IETM.ODVP ()
                Notify (IETM, 0x88) // Device-Specific
            }

            If ((DFEN == Zero))
            {
                If (CondRefOf (\_SB.PCI0.LPCB.EC0.DDPL)){}
            }
        }
    }

    Name (NIST, Package (0x10)
    {
        "0", 
        "1", 
        "2", 
        "3", 
        "4", 
        "5", 
        "6", 
        "7", 
        "8", 
        "9", 
        "A", 
        "B", 
        "C", 
        "D", 
        "E", 
        "F"
    })
    Method (ISTR, 2, NotSerialized)
    {
        Local0 = Arg0
        Local7 = ""
        Local4 = Arg1
        While ((Local4 > Zero))
        {
            Local1 = (Local0 & 0x0F)
            Local2 = DerefOf (NIST [Local1])
            Concatenate (Local2, Local7, Local3)
            Local7 = Local3
            Local0 >>= 0x04
            Local4--
        }

        Return (Local7)
    }

    Method (SRCP, 2, Serialized)
    {
        Local7 = SizeOf (Arg0)
        If ((Local7 != SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Name (ST00, Buffer (Local7){})
        Name (ST01, Buffer (Local7){})
        ST00 = Arg0
        ST01 = Arg1
        Local6 = Zero
        Local0 = One
        While (((Local6 != Local7) && Local0))
        {
            Local2 = DerefOf (ST00 [Local6])
            Local3 = DerefOf (ST01 [Local6])
            Local6++
            If ((Local2 != Local3))
            {
                Local0 = Zero
            }
        }

        Return (Local0)
    }

    Method (SRCM, 3, Serialized)
    {
        Name (ST00, Buffer (0x8C){})
        Name (ST01, Buffer (0x8C){})
        ST00 = Arg0
        ST01 = Arg1
        Local6 = Zero
        Local0 = One
        While (((Local6 != Arg2) && Local0))
        {
            Local2 = DerefOf (ST00 [Local6])
            Local3 = DerefOf (ST01 [Local6])
            Local6++
            If ((Local2 != Local3))
            {
                Local0 = Zero
            }
        }

        Return (Local0)
    }

    Name (EUPC, Package (0x04)
    {
        0xFF, 
        0xFF, 
        Zero, 
        Zero
    })
    Name (EPLD, Package (0x01)
    {
        Buffer (0x14)
        {
            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
        }
    })
    Method (GPLD, 2, Serialized)
    {
        Name (PCKG, Package (0x01)
        {
            Buffer (0x14){}
        })
        CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
        REV = One
        CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
        VISI = Arg0
        CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
        GPOS = Arg1
        Return (PCKG) /* \GPLD.PCKG */
    }

    Method (TPLD, 2, Serialized)
    {
        Name (PCKG, Package (0x01)
        {
            Buffer (0x10){}
        })
        CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
        REV = One
        CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
        VISI = Arg0
        CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
        GPOS = Arg1
        CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
        SHAP = One
        CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
        WID = 0x08
        CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
        HGT = 0x03
        Return (PCKG) /* \TPLD.PCKG */
    }

    Method (GUPC, 2, Serialized)
    {
        Name (PCKG, Package (0x04)
        {
            Zero, 
            0xFF, 
            Zero, 
            Zero
        })
        PCKG [Zero] = Arg0
        PCKG [One] = Arg1
        Return (PCKG) /* \GUPC.PCKG */
    }

    Method (TUPC, 1, Serialized)
    {
        Name (PCKG, Package (0x04)
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
        PCKG [One] = Arg0
        Return (PCKG) /* \TUPC.PCKG */
    }

    Method (CBRT, 2, Serialized)
    {
        Local6 = SizeOf (Arg0)
        Local7 = SizeOf (Arg1)
        If ((Local6 == Zero))
        {
            Local0 = Arg1
            Return (Local0)
        }

        If ((Local7 == Zero))
        {
            Local0 = Arg0
            Return (Local0)
        }

        Local1 = (Local7 + Local6)
        Local1 -= 0x02
        Local0 = Buffer (Local1){}
        Local1 = Zero
        While ((Local1 < SizeOf (Arg0)))
        {
            Local0 [Local1] = DerefOf (Arg0 [Local1])
            Local1++
        }

        Local1 -= 0x02
        Local2 = Zero
        While ((Local2 < SizeOf (Arg1)))
        {
            Local0 [Local1] = DerefOf (Arg1 [Local2])
            Local1++
            Local2++
        }

        Return (Local0)
    }

    Scope (_SB)
    {
        Device (WLBU)
        {
            Name (_HID, EisaId ("HPQ6001"))  // _HID: Hardware ID
            Name (DEPT, 0xFF)
            Method (INIT, 0, Serialized)
            {
                If ((DEPT == 0x0F))
                {
                    DEPT = 0xFF
                }
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((DEPT == 0xFF))
                {
                    Local0 = Zero
                    If ((GTOS () >= 0x08))
                    {
                        Local0 = 0x0F
                        UWLS ()
                    }

                    DEPT = Local0
                }

                Return (DEPT) /* \_SB_.WLBU.DEPT */
            }

            Method (UWLS, 0, Serialized)
            {
                Local0 = WDDA /* \WDDA */
                Local1 = DerefOf (Local0 [0x07])
                If ((WFLS & 0x02))
                {
                    WFLS &= 0xFFFFFFFFFFFFFFFD
                }

                Local1 *= 0x10
                Local1 += 0x10
                Local2 = 0x1B
                Local5 = 0x10
                Local4 = Zero
                While ((Local2 < Local1))
                {
                    Local3 = DerefOf (Local0 [Local2])
                    Local6 = DerefOf (Local0 [Local5])
                    If (((Local3 & 0x0A) != 0x0A))
                    {
                        Local0 [Local2] = (Local3 | 0x0A)
                        Local4 = One
                    }

                    If ((Local6 == Zero))
                    {
                        If (((Local3 & 0x10) != Zero))
                        {
                            Local0 [Local2] = (Local3 & 0xEF)
                            Local4 = One
                        }
                    }

                    Local2 += 0x10
                    Local5 += 0x10
                }

                If (Local4)
                {
                    WDDA = Local0
                    SSMI (0xEA84, Zero, Zero, Zero, Zero)
                }
            }

            Method (WLED, 1, Serialized)
            {
                SSMI (0xEA90, Arg0, Zero, Zero, Zero)
            }
        }
    }

    Scope (_SB)
    {
        Name (BCLI, Zero)
        Name (BCLS, Package (0x03)
        {
            Package (0x0D){}, 
            Package (0x17){}, 
            Package (0x1B){}
        })
        Name (NITS, Package (0x03)
        {
            Buffer (0x16){}, 
            Buffer (0x2A){}, 
            Buffer (0x32){}
        })
        Name (G028, Zero)
        Method (BCL, 0, Serialized)
        {
            If ((G028 == Zero))
            {
                If ((ILUX == One))
                {
                    G080 = G081 /* \G081 */
                }
                ElseIf ((GTOS () > 0x06))
                {
                    G080 = G081 /* \G081 */
                }

                Local7 = Zero
                If ((G080 >= 0x15))
                {
                    BCLI = One
                    Local7 = One
                    If ((G080 == 0x19))
                    {
                        BCLI = 0x02
                    }
                }

                Local1 = Zero
                If ((G08D & 0x10))
                {
                    Local0 = G084 /* \G084 */
                    Local5 = Zero
                    Local4 = G082 /* \G082 */
                    While ((Local1 < G080))
                    {
                        If (Local7)
                        {
                            Local3 = Local1
                        }
                        Else
                        {
                            Local3 = DerefOf (Local4 [Local1])
                        }

                        Local2 = DerefOf (Local0 [Local3])
                        Local3 = (Local2 * 0x64)
                        Local2 = ((Local3 + 0x7F) / 0xFF)
                        DerefOf (BCLS [BCLI]) [(Local1 + 0x02)] = 
                            Local2
                        If ((Local2 > Local5))
                        {
                            Local5 = Local2
                        }

                        Local1++
                    }

                    Local3 = (G080 >> One)
                    DerefOf (BCLS [BCLI]) [One] = DerefOf (DerefOf (
                        BCLS [BCLI]) [Local3])
                    DerefOf (BCLS [BCLI]) [Zero] = Local5
                }
                Else
                {
                    Local4 = G083 /* \G083 */
                    Local0 = G082 /* \G082 */
                    While ((Local1 < (G080 + 0x02)))
                    {
                        If ((Local7 || (Local1 < 0x02)))
                        {
                            Local3 = Local1
                        }
                        Else
                        {
                            Local3 = DerefOf (Local0 [(Local1 - 0x02)])
                            Local3 += 0x02
                        }

                        Local2 = DerefOf (Local4 [Local3])
                        DerefOf (BCLS [BCLI]) [Local1] = Local2
                        Local1++
                    }
                }

                Local0 = G085 /* \G085 */
                Local1 = G082 /* \G082 */
                Local2 = Zero
                While ((Local2 < G080))
                {
                    If (Local7)
                    {
                        Local3 = Local2
                    }
                    Else
                    {
                        Local3 = DerefOf (Local1 [Local2])
                    }

                    Local3 <<= One
                    Local5 = (Local2 << One)
                    Local4 = DerefOf (Local0 [Local3])
                    DerefOf (NITS [BCLI]) [Local5] = Local4
                    Local4 = DerefOf (Local0 [(Local3 + One)])
                    DerefOf (NITS [BCLI]) [(Local5 + One)] = 
                        Local4
                    Local2++
                }

                G028 = One
            }

            Return (DerefOf (BCLS [BCLI]))
        }

        Name (G029, Zero)
        Name (G02A, 0x64)
        Method (BCM, 1, Serialized)
        {
            Local0 = Zero
            If ((ILUX == One))
            {
                G08E |= 0x40
                Local0 = One
            }
            ElseIf ((GTOS () > 0x05))
            {
                G08E |= 0x40
                Local0 = One
            }

            G02A = Arg0
            Local1 = Match (DerefOf (BCLS [BCLI]), MGE, Arg0, MTR, Zero, 
                0x02)
            If ((Local1 == Ones))
            {
                Local1 = (SizeOf (DerefOf (BCLS [BCLI])) - One)
            }

            Local1 -= 0x02
            If (Local0)
            {
                G093 = Local1
            }

            G029 = One
            Return (Local0)
        }

        Method (BQC, 0, Serialized)
        {
            Local0 = G02A /* \_SB_.G02A */
            Return (Local0)
        }

        Method (HDDC, 1, Serialized)
        {
            If ((Arg0 == 0x02))
            {
                Local1 = G03E /* \G03E */
            }
            Else
            {
                Local3 = G03E /* \G03E */
                Local0 = 0x80
                Local1 = Buffer (Local0){}
                Local2 = Zero
                While ((Local2 < Local0))
                {
                    Local1 [Local2] = DerefOf (Local3 [Local2])
                    Local2++
                }
            }

            Return (Local1)
        }

        Method (G02B, 0, Serialized)
        {
            Local0 = G093 /* \G093 */
            ODGW (Local0)
            Local4 = (G080 - One)
            If ((G093 > Local4))
            {
                Local0 = Local4
            }

            If ((G093 < Zero))
            {
                Local0 = Zero
            }

            Local2 = G084 /* \G084 */
            Local5 = G082 /* \G082 */
            If ((G080 == 0x0B))
            {
                Local0 = DerefOf (Local5 [Local0])
            }

            Local1 = DerefOf (Local2 [Local0])
            ODGW (Local1)
            Return (Local1)
        }
    }

    Scope (_SB.PCI0)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00008000,         // Address Length
                    _Y43)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y44)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y45)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y46)
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00020000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFED90000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED45000,         // Address Base
                    0x0004B000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y47)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y43._BAS, MBR0)  // _BAS: Base Address
                MBR0 = GMHB ()
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y44._BAS, DBR0)  // _BAS: Base Address
                DBR0 = GDMB ()
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y45._BAS, EBR0)  // _BAS: Base Address
                EBR0 = GEPB ()
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y46._BAS, XBR0)  // _BAS: Base Address
                XBR0 = GPCB ()
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y46._LEN, XSZ0)  // _LEN: Length
                XSZ0 = GPCL ()
                If (!HPTE)
                {
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y47._BAS, HBAS)  // _BAS: Base Address
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y47._LEN, HLEN)  // _LEN: Length
                    HBAS = HPTB /* \HPTB */
                    HLEN = 0x0400
                }

                Return (BUF0) /* \_SB_.PCI0.PDRC.BUF0 */
            }
        }
    }

    Scope (\)
    {
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x30), 
                ,   5, 
            APME,   1, 
            Offset (0x34), 
                ,   5, 
            APMS,   1
        }

        Field (SPRT, ByteAcc, Lock, Preserve)
        {
            SSCP,   8, 
            SSDP,   8
        }

        Method (GSWS, 1, Serialized)
        {
            While (APMS)
            {
                Stall (One)
            }

            While ((APME != One))
            {
                APME = One
            }

            Local0 = ((Arg0 >> 0x08) & 0xFF)
            SSDP = Local0
            Stall (0x0A)
            Local1 = (Arg0 & 0xFF)
            SSCP = Local1
            Stall (0x32)
            While (APMS)
            {
                Stall (One)
            }
        }
    }

    Scope (_SB)
    {
        Mutex (MSMI, 0x00)
        Method (SSMI, 5, NotSerialized)
        {
            Acquire (MSMI, 0xFFFF)
            If (Arg4)
            {
                Acquire (_GL, 0xFFFF)
            }

            EAX = (Arg0 << 0x10)
            EBX = Arg1
            ECX = Arg2
            EDX = Arg3
            REFS = Zero
            GSWS (Arg0)
            Local0 = REFS /* \REFS */
            If (Arg4)
            {
                Release (_GL)
            }

            Release (MSMI)
            Return (Local0)
        }
    }

    Scope (_GPE)
    {
        Method (_L61, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            ADBG ("_L61")
            L01C += One
            P8XH (Zero, One)
            P8XH (One, L01C)
            If (((\_SB.PCI0.RP01.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP01.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != One) || 
                        (RPS1 != One))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP01.PDCX)
                {
                    \_SB.PCI0.RP01.PDCX = One
                    \_SB.PCI0.RP01.HPSX = One
                    If (!\_SB.PCI0.RP01.PDSX)
                    {
                        \_SB.PCI0.RP01.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != One) || 
                            (RPS1 != One))))
                        {
                            Notify (\_SB.PCI0.RP01, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP01, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP01.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP02.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP02.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x02) || 
                        (RPS1 != 0x02))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP02.PDCX)
                {
                    \_SB.PCI0.RP02.PDCX = One
                    \_SB.PCI0.RP02.HPSX = One
                    If (!\_SB.PCI0.RP02.PDSX)
                    {
                        \_SB.PCI0.RP02.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x02) || 
                            (RPS1 != 0x02))))
                        {
                            Notify (\_SB.PCI0.RP02, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP02, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP02.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP03.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP03.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x03) || 
                        (RPS1 != 0x03))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP03.PDCX)
                {
                    \_SB.PCI0.RP03.PDCX = One
                    \_SB.PCI0.RP03.HPSX = One
                    If (!\_SB.PCI0.RP03.PDSX)
                    {
                        \_SB.PCI0.RP03.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x03) || 
                            (RPS1 != 0x03))))
                        {
                            Notify (\_SB.PCI0.RP03, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP03, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP03.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP04.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP04.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x04) || 
                        (RPS1 != 0x04))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP04.PDCX)
                {
                    \_SB.PCI0.RP04.PDCX = One
                    \_SB.PCI0.RP04.HPSX = One
                    If (!\_SB.PCI0.RP04.PDSX)
                    {
                        \_SB.PCI0.RP04.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x04) || 
                            (RPS1 != 0x04))))
                        {
                            Notify (\_SB.PCI0.RP04, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP04, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP04.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP05.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP05.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x05) || 
                        (RPS1 != 0x05))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP05.PDCX)
                {
                    \_SB.PCI0.RP05.PDCX = One
                    \_SB.PCI0.RP05.HPSX = One
                    If (!\_SB.PCI0.RP05.PDSX)
                    {
                        \_SB.PCI0.RP05.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x05) || 
                            (RPS1 != 0x05))))
                        {
                            Notify (\_SB.PCI0.RP05, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP05, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP05.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP06.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP06.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x06) || 
                        (RPS1 != 0x06))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP06.PDCX)
                {
                    \_SB.PCI0.RP06.PDCX = One
                    \_SB.PCI0.RP06.HPSX = One
                    If (!\_SB.PCI0.RP06.PDSX)
                    {
                        \_SB.PCI0.RP06.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x06) || 
                            (RPS1 != 0x06))))
                        {
                            Notify (\_SB.PCI0.RP06, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP06, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP06.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP07.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP07.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x07) || 
                        (RPS1 != 0x07))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP07.PDCX)
                {
                    \_SB.PCI0.RP07.PDCX = One
                    \_SB.PCI0.RP07.HPSX = One
                    If (!\_SB.PCI0.RP07.PDSX)
                    {
                        \_SB.PCI0.RP07.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x07) || 
                            (RPS1 != 0x07))))
                        {
                            Notify (\_SB.PCI0.RP07, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP07, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP07.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP08.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP08.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x08) || 
                        (RPS1 != 0x08))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP08.PDCX)
                {
                    \_SB.PCI0.RP08.PDCX = One
                    \_SB.PCI0.RP08.HPSX = One
                    If (!\_SB.PCI0.RP08.PDSX)
                    {
                        \_SB.PCI0.RP08.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x08) || 
                            (RPS1 != 0x08))))
                        {
                            Notify (\_SB.PCI0.RP08, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP08, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP08.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP09.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP09.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x09) || 
                        (RPS1 != 0x09))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP09.PDCX)
                {
                    \_SB.PCI0.RP09.PDCX = One
                    \_SB.PCI0.RP09.HPSX = One
                    If (!\_SB.PCI0.RP09.PDSX)
                    {
                        \_SB.PCI0.RP09.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x09) || 
                            (RPS1 != 0x09))))
                        {
                            Notify (\_SB.PCI0.RP09, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP09, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP09.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP10.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP10.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x0A) || 
                        (RPS1 != 0x0A))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP10.PDCX)
                {
                    \_SB.PCI0.RP10.PDCX = One
                    \_SB.PCI0.RP10.HPSX = One
                    If (!\_SB.PCI0.RP10.PDSX)
                    {
                        \_SB.PCI0.RP10.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x0A) || 
                            (RPS1 != 0x0A))))
                        {
                            Notify (\_SB.PCI0.RP10, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP10, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP10.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP11.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP11.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x0B) || 
                        (RPS1 != 0x0B))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP11.PDCX)
                {
                    \_SB.PCI0.RP11.PDCX = One
                    \_SB.PCI0.RP11.HPSX = One
                    If (!\_SB.PCI0.RP11.PDSX)
                    {
                        \_SB.PCI0.RP11.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x0B) || 
                            (RPS1 != 0x0B))))
                        {
                            Notify (\_SB.PCI0.RP11, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP11, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP11.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP12.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP12.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x0C) || 
                        (RPS1 != 0x0C))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP12.PDCX)
                {
                    \_SB.PCI0.RP12.PDCX = One
                    \_SB.PCI0.RP12.HPSX = One
                    If (!\_SB.PCI0.RP12.PDSX)
                    {
                        \_SB.PCI0.RP12.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x0C) || 
                            (RPS1 != 0x0C))))
                        {
                            Notify (\_SB.PCI0.RP12, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP12, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP12.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP13.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP13.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x0D) || 
                        (RPS1 != 0x0D))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP13.PDCX)
                {
                    \_SB.PCI0.RP13.PDCX = One
                    \_SB.PCI0.RP13.HPSX = One
                    If (!\_SB.PCI0.RP13.PDSX)
                    {
                        \_SB.PCI0.RP13.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x0D) || 
                            (RPS1 != 0x0D))))
                        {
                            Notify (\_SB.PCI0.RP13, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP13, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP13.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP14.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP14.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x0E) || 
                        (RPS1 != 0x0E))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP14.PDCX)
                {
                    \_SB.PCI0.RP14.PDCX = One
                    \_SB.PCI0.RP14.HPSX = One
                    If (!\_SB.PCI0.RP14.PDSX)
                    {
                        \_SB.PCI0.RP14.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x0E) || 
                            (RPS1 != 0x0E))))
                        {
                            Notify (\_SB.PCI0.RP14, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP14, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP14.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP15.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP15.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x0F) || 
                        (RPS1 != 0x0F))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP15.PDCX)
                {
                    \_SB.PCI0.RP15.PDCX = One
                    \_SB.PCI0.RP15.HPSX = One
                    If (!\_SB.PCI0.RP15.PDSX)
                    {
                        \_SB.PCI0.RP15.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x0F) || 
                            (RPS1 != 0x0F))))
                        {
                            Notify (\_SB.PCI0.RP15, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP15, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP15.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP16.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP16.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x10) || 
                        (RPS1 != 0x10))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP16.PDCX)
                {
                    \_SB.PCI0.RP16.PDCX = One
                    \_SB.PCI0.RP16.HPSX = One
                    If (!\_SB.PCI0.RP16.PDSX)
                    {
                        \_SB.PCI0.RP16.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x10) || 
                            (RPS1 != 0x10))))
                        {
                            Notify (\_SB.PCI0.RP16, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP16, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP16.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP17.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP17.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x11) || 
                        (RPS1 != 0x11))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP17.PDCX)
                {
                    \_SB.PCI0.RP17.PDCX = One
                    \_SB.PCI0.RP17.HPSX = One
                    If (!\_SB.PCI0.RP17.PDSX)
                    {
                        \_SB.PCI0.RP17.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x11) || 
                            (RPS1 != 0x11))))
                        {
                            Notify (\_SB.PCI0.RP17, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP17, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP17.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP18.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP18.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x12) || 
                        (RPS1 != 0x12))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP18.PDCX)
                {
                    \_SB.PCI0.RP18.PDCX = One
                    \_SB.PCI0.RP18.HPSX = One
                    If (!\_SB.PCI0.RP18.PDSX)
                    {
                        \_SB.PCI0.RP18.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x12) || 
                            (RPS1 != 0x12))))
                        {
                            Notify (\_SB.PCI0.RP18, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP18, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP18.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP19.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP19.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x13) || 
                        (RPS1 != 0x13))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP19.PDCX)
                {
                    \_SB.PCI0.RP19.PDCX = One
                    \_SB.PCI0.RP19.HPSX = One
                    If (!\_SB.PCI0.RP19.PDSX)
                    {
                        \_SB.PCI0.RP19.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x13) || 
                            (RPS1 != 0x13))))
                        {
                            Notify (\_SB.PCI0.RP19, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP19, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP19.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP20.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP20.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x14) || 
                        (RPS1 != 0x14))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP20.PDCX)
                {
                    \_SB.PCI0.RP20.PDCX = One
                    \_SB.PCI0.RP20.HPSX = One
                    If (!\_SB.PCI0.RP20.PDSX)
                    {
                        \_SB.PCI0.RP20.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x14) || 
                            (RPS1 != 0x14))))
                        {
                            Notify (\_SB.PCI0.RP20, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP20, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP20.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP21.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP21.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x15) || 
                        (RPS1 != 0x15))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP21.PDCX)
                {
                    \_SB.PCI0.RP21.PDCX = One
                    \_SB.PCI0.RP21.HPSX = One
                    If (!\_SB.PCI0.RP21.PDSX)
                    {
                        \_SB.PCI0.RP21.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x15) || 
                            (RPS1 != 0x15))))
                        {
                            Notify (\_SB.PCI0.RP21, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP21, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP21.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP22.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP22.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x16) || 
                        (RPS1 != 0x16))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP22.PDCX)
                {
                    \_SB.PCI0.RP22.PDCX = One
                    \_SB.PCI0.RP22.HPSX = One
                    If (!\_SB.PCI0.RP22.PDSX)
                    {
                        \_SB.PCI0.RP22.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x16) || 
                            (RPS1 != 0x16))))
                        {
                            Notify (\_SB.PCI0.RP22, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP22, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP22.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP23.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP23.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x17) || 
                        (RPS1 != 0x17))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP23.PDCX)
                {
                    \_SB.PCI0.RP23.PDCX = One
                    \_SB.PCI0.RP23.HPSX = One
                    If (!\_SB.PCI0.RP23.PDSX)
                    {
                        \_SB.PCI0.RP23.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x17) || 
                            (RPS1 != 0x17))))
                        {
                            Notify (\_SB.PCI0.RP23, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP23, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP23.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP24.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP24.HPSX))
            {
                If (CondRefOf (TBTS))
                {
                    If (((TBTS != One) || ((RPS0 != 0x18) || 
                        (RPS1 != 0x18))))
                    {
                        Sleep (0x64)
                    }
                }
                Else
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP24.PDCX)
                {
                    \_SB.PCI0.RP24.PDCX = One
                    \_SB.PCI0.RP24.HPSX = One
                    If (!\_SB.PCI0.RP24.PDSX)
                    {
                        \_SB.PCI0.RP24.L0SE = Zero
                    }

                    If (CondRefOf (TBTS))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x18) || 
                            (RPS1 != 0x18))))
                        {
                            Notify (\_SB.PCI0.RP24, Zero) // Bus Check
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.RP24, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP24.HPSX = One
                }
            }

            ADBG ("End of _L61")
        }

        Method (_L62, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            GPEC = Zero
            Local0 = SSCI /* \SSCI */
            If (Local0)
            {
                SSCI = Zero
                If ((Local0 == 0x05))
                {
                    If (\_SB.WLBU._STA ())
                    {
                        If (CondRefOf (\_SB.HIDD._STA))
                        {
                            If (\_SB.HIDD._STA ())
                            {
                                \_SB.HIDD.HPEM (0x08)
                            }
                        }

                        Notify (\_SB.WLBU, 0x80) // Status Change
                    }
                    Else
                    {
                        \_SB.WMIV.GVWE (Local0, Zero)
                    }
                }

                If (CondRefOf (\_SB.PCI0.G0C1))
                {
                    \_SB.PCI0.G0C1 (Local0)
                }

                If ((Local0 == 0x0A))
                {
                    \_SB.WMIV.GVWE (0x18, Zero)
                }
            }

            If (CondRefOf (\_GPE.HLVT))
            {
                HLVT ()
            }
        }

        Method (_L69, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.RP01.HPME ()
            \_SB.PCI0.RP02.HPME ()
            \_SB.PCI0.RP03.HPME ()
            \_SB.PCI0.RP04.HPME ()
            \_SB.PCI0.RP05.HPME ()
            \_SB.PCI0.RP06.HPME ()
            \_SB.PCI0.RP07.HPME ()
            \_SB.PCI0.RP08.HPME ()
            \_SB.PCI0.RP09.HPME ()
            \_SB.PCI0.RP10.HPME ()
            \_SB.PCI0.RP11.HPME ()
            \_SB.PCI0.RP12.HPME ()
            \_SB.PCI0.RP13.HPME ()
            \_SB.PCI0.RP14.HPME ()
            \_SB.PCI0.RP15.HPME ()
            \_SB.PCI0.RP16.HPME ()
            \_SB.PCI0.RP17.HPME ()
            \_SB.PCI0.RP18.HPME ()
            \_SB.PCI0.RP19.HPME ()
            \_SB.PCI0.RP20.HPME ()
            \_SB.PCI0.RP21.HPME ()
            \_SB.PCI0.RP22.HPME ()
            \_SB.PCI0.RP23.HPME ()
            \_SB.PCI0.RP24.HPME ()
            If ((D1F0 == One))
            {
                \_SB.PCI0.PEG0.HPME ()
                Notify (\_SB.PCI0.PEG0, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEG0.PEGP, 0x02) // Device Wake
            }

            If ((D1F1 == One))
            {
                \_SB.PCI0.PEG1.HPME ()
                Notify (\_SB.PCI0.PEG1, 0x02) // Device Wake
            }

            If ((D1F2 == One))
            {
                \_SB.PCI0.PEG2.HPME ()
                Notify (\_SB.PCI0.PEG2, 0x02) // Device Wake
            }
        }

        Method (_L6F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (CondRefOf (\_SB.PCI0.RP01.GPEH))
            {
                \_SB.PCI0.RP01.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.RP02.GPEH))
            {
                \_SB.PCI0.RP02.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.RP03.GPEH))
            {
                \_SB.PCI0.RP03.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.RP04.GPEH))
            {
                \_SB.PCI0.RP04.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.RP05.GPEH))
            {
                \_SB.PCI0.RP05.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.RP06.GPEH))
            {
                \_SB.PCI0.RP06.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.RP07.GPEH))
            {
                \_SB.PCI0.RP07.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.RP08.GPEH))
            {
                \_SB.PCI0.RP08.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.RP09.GPEH))
            {
                \_SB.PCI0.RP09.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.RP10.GPEH))
            {
                \_SB.PCI0.RP10.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.RP11.GPEH))
            {
                \_SB.PCI0.RP11.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.RP12.GPEH))
            {
                \_SB.PCI0.RP12.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.RP13.GPEH))
            {
                \_SB.PCI0.RP13.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.RP14.GPEH))
            {
                \_SB.PCI0.RP14.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.RP15.GPEH))
            {
                \_SB.PCI0.RP15.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.RP16.GPEH))
            {
                \_SB.PCI0.RP16.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.RP17.GPEH))
            {
                \_SB.PCI0.RP17.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.RP18.GPEH))
            {
                \_SB.PCI0.RP18.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.RP19.GPEH))
            {
                \_SB.PCI0.RP19.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.RP20.GPEH))
            {
                \_SB.PCI0.RP20.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.SAT0.PRT0.GPEH))
            {
                \_SB.PCI0.SAT0.PRT0.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.SAT0.PRT1.GPEH))
            {
                \_SB.PCI0.SAT0.PRT1.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.SAT0.PRT2.GPEH))
            {
                \_SB.PCI0.SAT0.PRT2.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.SAT0.PRT3.GPEH))
            {
                \_SB.PCI0.SAT0.PRT3.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.SAT0.PRT4.GPEH))
            {
                \_SB.PCI0.SAT0.PRT4.GPEH ()
            }

            If (CondRefOf (\_SB.PCI0.SAT0.PRT5.GPEH))
            {
                \_SB.PCI0.SAT0.PRT5.GPEH ()
            }

            If (CondRefOf (\_SB.CFHP))
            {
                \_SB.CFHP ()
            }
        }

        Method (_L72, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (CondRefOf (\_SB.AWAC))
            {
                \_SB.AWAC.WAST = One
                Notify (\_SB.AWAC, 0x02) // Device Wake
            }
        }
    }

    Method (_SB.DCKD, 0, Serialized)
    {
        Local0 = Zero
        Return (Local0)
    }

    Method (_GPE.G031, 0, Serialized)
    {
    }

    Method (_SB.GRFS, 0, Serialized)
    {
    }

    Method (_SB.GLVR, 2, Serialized)
    {
        If (Arg1)
        {
            Local0 = GGIV (Arg0)
        }
        Else
        {
            Local0 = GGOV (Arg0)
        }

        Return (Local0)
    }

    Method (_SB.GLVW, 2, Serialized)
    {
        SGOV (Arg0, Arg1)
        Return (One)
    }

    Method (_SB.GISR, 1, Serialized)
    {
        Local0 = GPC0 (Arg0)
        Local1 = 0x08
        Local0 >>= Local1
        Local2 = (Local0 & 0x03)
        If ((Local2 == 0x03))
        {
            Return (0x07)
        }
        ElseIf ((Local2 == 0x02))
        {
            Return (0x09)
        }
        ElseIf ((Local2 == One))
        {
            Return (0x0B)
        }
        Else
        {
            Return (0x05)
        }
    }

    Method (_SB.GISW, 2, Serialized)
    {
        Local0 = GPC0 (Arg0)
        If ((Arg1 == 0x09))
        {
            Local1 = 0x0300
            Local2 = (Local0 & ~Local1)
            SPC0 (Arg0, Local2)
            Return (One)
        }
        ElseIf ((Arg1 == 0x19))
        {
            Local1 = 0x0300
            Local2 = (Local0 & ~Local1)
            Local3 = (0x00800000 | Local2)
            SPC0 (Arg0, Local3)
            Return (One)
        }
        ElseIf ((Arg1 == 0x0B))
        {
            Local2 = (0x0100 | Local0)
            SPC0 (Arg0, Local2)
            Return (One)
        }
        ElseIf ((Arg1 == 0x1B))
        {
            Local1 = 0x00800100
            Local2 = (Local0 | Local1)
            SPC0 (Arg0, Local2)
            Return (One)
        }
        ElseIf ((Arg1 == 0x05))
        {
            Local2 = (0x0200 | Local0)
            SPC0 (Arg0, Local2)
            Return (One)
        }
        ElseIf ((Arg1 == 0x07))
        {
            Local1 = 0x0300
            Local2 = (Local0 | Local1)
            SPC0 (Arg0, Local2)
            Return (One)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (_SB.GOWW, 2, Serialized)
    {
        SHPO (Arg0, Arg1)
        Return (One)
    }

    Method (_SB.GESC, 1, Serialized)
    {
        CAGS (Arg0)
        Return (One)
    }

    Method (_SB.GINR, 1, Serialized)
    {
        Local0 = GGII (Arg0)
        Return (Local0)
    }

    Method (_SB.GINW, 2, Serialized)
    {
        SGII (Arg0, Arg1)
        Return (One)
    }

    Method (PPTS, 1, Serialized)
    {
    }

    Method (_SB.PCI0.LPCB.PS2M._HID, 0, Serialized)  // _HID: Hardware ID
    {
        Local1 = 0x53078416
        Return (Local1)
    }

    Method (_SB.PCI0.LPCB.PS2M._CID, 0, Serialized)  // _CID: Compatible ID
    {
        Return (Package (0x03)
        {
            0x00012E4F, 
            0x02002E4F, 
            0x130FD041
        })
    }

    Method (_SB.THID, 0, Serialized)
    {
        Return ("WCOM4910")
    }

    Method (HIDW, 4, Serialized)
    {
        If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37") /* Unknown UUID */))
        {
            If ((Arg2 == Zero))
            {
                If ((Arg1 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((Arg2 == One))
            {
                Switch (ToInteger (DerefOf (Arg3 [Zero])))
                {
                    Case (Zero)
                    {
                        If (CondRefOf (\_SB.HIDD.HPEM))
                        {
                            \_SB.HIDD.HPEM (0x1B)
                        }
                    }
                    Case (One)
                    {
                        If (CondRefOf (\_SB.SLPB))
                        {
                            Notify (\_SB.SLPB, 0x80) // Status Change
                        }
                    }
                    Case (0x02)
                    {
                        If (CondRefOf (\_SB.PCI0.LPCB.EC0.UPBT))
                        {
                            \_SB.PCI0.LPCB.EC0.UPBT (0x07, One)
                            Notify (\_SB.HIDD, 0xCA) // Hardware-Specific
                        }
                    }
                    Case (0x03)
                    {
                        If (CondRefOf (\_SB.PCI0.LPCB.EC0.UPBT))
                        {
                            \_SB.PCI0.LPCB.EC0.UPBT (0x07, Zero)
                            Notify (\_SB.HIDD, 0xCB) // Hardware-Specific
                        }
                    }
                    Case (0x04)
                    {
                        If (CondRefOf (\_SB.SLPB))
                        {
                            Notify (\_SB.SLPB, 0x02) // Device Wake
                        }
                    }

                }

                Return (Zero)
            }
            Else
            {
                Return (Zero)
            }
        }
        Else
        {
            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Method (HIWC, 1, NotSerialized)
    {
        If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37") /* Unknown UUID */))
        {
            Return (One)
        }

        Return (Zero)
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS1)
    {
        Name (_S1, Package (0x04)  // _S1_: S1 System State
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS3)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x06, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0){}
    }

    Method (WAK, 1, NotSerialized)
    {
    }
}



FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 00000114
[008h 0008 001h]                    Revision : 06
[009h 0009 001h]                    Checksum : 3A
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "SLIC-BPC"
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : "HP  "
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 004h]                FACS Address : 97B09000
[028h 0040 004h]                DSDT Address : 97BC3000
[02Ch 0044 001h]                       Model : 00
[02Dh 0045 001h]                  PM Profile : 02 [Mobile]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B2
[034h 0052 001h]           ACPI Enable Value : F0
[035h 0053 001h]          ACPI Disable Value : F1
[036h 0054 001h]              S4BIOS Command : F2
[037h 0055 001h]             P-State Control : 00
[038h 0056 004h]    PM1A Event Block Address : 00001800
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00001804
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 00001850
[04Ch 0076 004h]      PM Timer Block Address : 00001808
[050h 0080 004h]          GPE0 Block Address : 00001860
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 20
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 10
[05Fh 0095 001h]                _CST Support : 00
[060h 0096 002h]                  C2 Latency : 0065
[062h 0098 002h]                  C3 Latency : 03E9
[064h 0100 002h]              CPU Cache Size : 0000
[066h 0102 002h]          Cache Flush Stride : 0000
[068h 0104 001h]           Duty Cycle Offset : 01
[069h 0105 001h]            Duty Cycle Width : 03
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 32
[06Dh 0109 002h]  Boot Flags (decoded below) : 0001
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 002384A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 1

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 01 [Byte Access:8]
[078h 0120 008h]                     Address : 0000000000000CF9

[080h 0128 001h]        Value to cause reset : 06
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 01
[084h 0132 008h]                FACS Address : 0000000000000000
[08Ch 0140 008h]                DSDT Address : 0000000097BC3000
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 02 [Word Access:16]
[098h 0152 008h]                     Address : 0000000000001800

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 01 [SystemIO]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 02 [Word Access:16]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000001804

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 01 [SystemIO]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 02 [Word Access:16]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200 008h]                     Address : 0000000000001850

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000001808

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 00
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224 008h]                     Address : 0000000000001860

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 01 [SystemIO]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236 008h]                     Address : 0000000000000000


[0F4h 0244 00Ch]      Sleep Control Register : [Generic Address Structure]
[0F4h 0244 001h]                    Space ID : 01 [SystemIO]
[0F5h 0245 001h]                   Bit Width : 08
[0F6h 0246 001h]                  Bit Offset : 00
[0F7h 0247 001h]        Encoded Access Width : 03 [DWord Access:32]
[0F8h 0248 008h]                     Address : 0000000000001804

[100h 0256 00Ch]       Sleep Status Register : [Generic Address Structure]
[100h 0256 001h]                    Space ID : 01 [SystemIO]
[101h 0257 001h]                   Bit Width : 08
[102h 0258 001h]                  Bit Offset : 00
[103h 0259 001h]        Encoded Access Width : 03 [DWord Access:32]
[104h 0260 008h]                     Address : 0000000000001800

[10Ch 0268 008h]               Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 3A 48 50 51 4F 45 4D  // FACP.....:HPQOEM
    0010: 53 4C 49 43 2D 42 50 43 00 00 00 00 48 50 20 20  // SLIC-BPC....HP  
    0020: 01 00 00 00 00 90 B0 97 00 30 BC 97 00 02 09 00  // .........0......
    0030: B2 00 00 00 F0 F1 F2 00 00 18 00 00 00 00 00 00  // ................
    0040: 04 18 00 00 00 00 00 00 50 18 00 00 08 18 00 00  // ........P.......
    0050: 60 18 00 00 00 00 00 00 04 02 01 04 20 00 10 00  // `........... ...
    0060: 65 00 E9 03 00 00 00 00 01 03 0D 00 32 01 00 00  // e...........2...
    0070: A5 84 23 00 01 08 00 01 F9 0C 00 00 00 00 00 00  // ..#.............
    0080: 06 00 00 01 00 00 00 00 00 00 00 00 00 30 BC 97  // .............0..
    0090: 00 00 00 00 01 20 00 02 00 18 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 18 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 50 18 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 03 08 18 00 00 00 00 00 00 01 00 00 01  // . ..............
    00E0: 60 18 00 00 00 00 00 00 01 00 00 01 00 00 00 00  // `...............
    00F0: 00 00 00 00 01 08 00 03 04 18 00 00 00 00 00 00  // ................
    0100: 01 08 00 03 00 18 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : F9219993
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 02
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 93 99 21 F9 00 00 00 00  // FACS@.....!.....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000 004h]                   Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004 004h]                Table Length : 00000044
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 33
[00Ah 0010 006h]                      Oem ID : "INTEL "
[010h 0016 008h]                Oem Table ID : "CFL-ULT"
[018h 0024 004h]                Oem Revision : 20170001
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 20160422


[024h 0036 002h]               Subtable Type : 0000
[026h 0038 001h]                      Length : 10
[027h 0039 001h]                    Revision : 01
[028h 0040 004h]                    Reserved : 00000000
[02Ch 0044 008h]    FPDT Boot Record Address : 0000000096FF6000

[034h 0052 002h]               Subtable Type : 0001
[036h 0054 001h]                      Length : 10
[037h 0055 001h]                    Revision : 01
[038h 0056 004h]                    Reserved : 00000000
[03Ch 0060 008h]         S3PT Record Address : 00000000978DC000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 33 49 4E 54 45 4C 20  // FPDTD....3INTEL 
    0010: 43 46 4C 2D 55 4C 54 00 01 00 17 20 49 4E 54 4C  // CFL-ULT.... INTL
    0020: 22 04 16 20 00 00 10 01 00 00 00 00 00 60 FF 96  // ".. .........`..
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 C0 8D 97  // ................
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 53
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "85B9    "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "HP  "
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 004h]           Hardware Block ID : 8086A201

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 40
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 0080
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 53 48 50 51 4F 45 4D  // HPET8....SHPQOEM
    0010: 38 35 42 39 20 20 20 20 01 00 00 00 48 50 20 20  // 85B9    ....HP  
    0020: 01 00 00 00 01 A2 86 80 00 40 00 00 00 00 D0 FE  // .........@......
    0030: 00 00 00 00 00 80 00 00                          // ........


LPIT
----
[000h 0000 004h]                   Signature : "LPIT"    [Low Power Idle Table]
[004h 0004 004h]                Table Length : 0000005C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 83
[00Ah 0010 006h]                      Oem ID : "INTEL "
[010h 0016 008h]                Oem Table ID : "CFL-ULT"
[018h 0024 004h]                Oem Revision : 20170001
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 20160422

[024h 0036 004h]               Subtable Type : 00000000 [Native C-state Idle Structure]
[028h 0040 004h]                      Length : 00000038
[02Ch 0044 002h]                   Unique ID : 0000
[02Eh 0046 002h]                    Reserved : 0000
[030h 0048 004h]       Flags (decoded below) : 00000000
                              State Disabled : 0
                                  No Counter : 0

[034h 0052 00Ch]               Entry Trigger : [Generic Address Structure]
[034h 0052 001h]                    Space ID : 7F [FunctionalFixedHW]
[035h 0053 001h]                   Bit Width : 01
[036h 0054 001h]                  Bit Offset : 02
[037h 0055 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[038h 0056 008h]                     Address : 0000000000000060

[040h 0064 004h]                   Residency : 00007530
[044h 0068 004h]                     Latency : 00000BB8
[048h 0072 00Ch]           Residency Counter : [Generic Address Structure]
[048h 0072 001h]                    Space ID : 00 [SystemMemory]
[049h 0073 001h]                   Bit Width : 20
[04Ah 0074 001h]                  Bit Offset : 00
[04Bh 0075 001h]        Encoded Access Width : 03 [DWord Access:32]
[04Ch 0076 008h]                     Address : 00000000FE00193C

[054h 0084 008h]           Counter Frequency : 000000000000256C


Raw Table Data: Length 92 (0x5C)

    0000: 4C 50 49 54 5C 00 00 00 01 83 49 4E 54 45 4C 20  // LPIT\.....INTEL 
    0010: 43 46 4C 2D 55 4C 54 00 01 00 17 20 49 4E 54 4C  // CFL-ULT.... INTL
    0020: 22 04 16 20 00 00 00 00 38 00 00 00 00 00 00 00  // ".. ....8.......
    0030: 00 00 00 00 7F 01 02 00 60 00 00 00 00 00 00 00  // ........`.......
    0040: 30 75 00 00 B8 0B 00 00 00 20 00 03 3C 19 00 FE  // 0u....... ..<...
    0050: 00 00 00 00 6C 25 00 00 00 00 00 00              // ....l%......


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 2B
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "85B9    "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "HP  "
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000F0000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : 7F
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 2B 48 50 51 4F 45 4D  // MCFG<....+HPQOEM
    0010: 38 35 42 39 20 20 20 20 01 00 00 00 48 50 20 20  // 85B9    ....HP  
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0  // ................
    0030: 00 00 00 00 00 00 00 7F 00 00 00 00              // ............


MSDM
----
[000h 0000 004h]                   Signature : "MSDM"    [Microsoft Data Management Table]
[004h 0004 004h]                Table Length : 00000055
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : B9
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "SLIC-BPC"
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : "HP  "
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 031h] Software Licensing Structure : 4D 53 44 4D 55 00 00 00 03 B9 48 50 51 4F 45 4D /* MSDMU.....HPQOEM */\
/* 034h 0052  16 */                            53 4C 49 43 2D 42 50 43 00 00 00 00 48 50 20 20 /* SLIC-BPC....HP   */\
/* 044h 0068  16 */                            01 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 /* ................ */\
/* 054h 0084   1 */                            00                                              /* . */\

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 B9 48 50 51 4F 45 4D  // MSDMU.....HPQOEM
    0010: 53 4C 49 43 2D 42 50 43 00 00 00 00 48 50 20 20  // SLIC-BPC....HP  
    0020: 01 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 57 4D 44 4D 4E 2D 58 50  // ........WMDMN-XP
    0040: 44 33 38 2D 47 50 57 4B 4A 2D 33 44 44 42 54 2D  // D38-GPWKJ-3DDBT-
    0050: 58 51 42 50 32                                   // XQBP2


NHLT
----
[000h 0000 004h]                   Signature : "NHLT"    [Non HD Audio Link Table]
[004h 0004 004h]                Table Length : 000017F1
[008h 0008 001h]                    Revision : 00
[009h 0009 001h]                    Checksum : 17
[00Ah 0010 006h]                      Oem ID : "INTEL "
[010h 0016 008h]                Oem Table ID : "CFL-ULT"
[018h 0024 004h]                Oem Revision : 20170001
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 20160422

    /* Main table */
[024h 0036 001h]              Endpoint Count : 01

    /* Endpoint Descriptor #1 */
[025h 0037 004h]           Descriptor Length : 000017C4
[029h 0041 001h]                   Link Type : 02 [Type PDM]
[02Ah 0042 001h]                 Instance Id : 00
[02Bh 0043 002h]                   Vendor Id : 8086
[02Dh 0045 002h]                   Device Id : AE20 [PDM DMIC]
[02Fh 0047 002h]                 Revision Id : 0001
[031h 0049 004h]                Subsystem Id : 00000001
[035h 0053 001h]                 Device Type : 01
[036h 0054 001h]                   Direction : 01 [Capture]
[037h 0055 001h]              Virtual Bus Id : 00

    /* Endpoint Device_Specific_Config table */
[038h 0056 004h]           Capabilities Size : 00000003
[03Ch 0060 001h]                Virtual Slot : 00
[03Dh 0061 001h]                 Config Type : 01 [Microphone Array]
[03Eh 0062 001h]                  Array Type : 0D [Planar L-shaped 4-element]

    /* Formats_Config table */
[03Fh 0063 001h]               Formats Count : 02

    /* Wave_Format_Extensible table #1 */
[040h 0064 002h]                  Format Tag : FFFE
[042h 0066 002h]               Channel Count : 0004
[044h 0068 004h]          Samples Per Second : 0000BB80
[048h 0072 004h]    Average Bytes Per Second : 0005DC00
[04Ch 0076 002h]             Block Alignment : 0008
[04Eh 0078 002h]             Bits Per Sample : 0010
[050h 0080 002h]           Extra Format Size : 0016
[052h 0082 002h]       Valid Bits Per Sample : 0010
[054h 0084 004h]                Channel Mask : 00000033
[058h 0088 010h]              SubFormat GUID : 00000001-0000-0010-8000-00AA00389B71
[068h 0104 004h]         Capabilities Length : 00000BA8

    /* Specific_Config table #1 */
[06Ch 0108 BA8h]                Capabilities : 01 00 00 00 10 32 FF FF 10 32 FF FF FF FF FF FF /* .....2...2...... */\
/* 07Ch 0124  16 */                            FF FF FF FF 03 00 00 00 03 00 00 00 03 00 32 00 /* ..............2. */\
/* 08Ch 0140  16 */                            03 00 32 00 03 00 00 00 01 C0 00 00 03 09 00 04 /* ..2............. */\
/* 09Ch 0156  16 */                            00 00 00 00 03 08 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 0ACh 0172  16 */                            00 00 00 00 00 00 00 00 91 00 00 00 A0 02 04 00 /* ................ */\
/* 0BCh 0188  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 0CCh 0204  16 */                            00 00 00 00 00 00 00 00 11 00 00 00 B6 03 0E 00 /* ................ */\
/* 0DCh 0220  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 0ECh 0236  16 */                            00 00 00 00 00 00 00 00 08 00 00 00 AE FF 0F 00 /* ................ */\
/* 0FCh 0252  16 */                            12 FF 0F 00 FB FD 0F 00 61 FC 0F 00 5B FA 0F 00 /* ........a...[... */\
/* 10Ch 0268  16 */                            2C F8 0F 00 43 F6 0F 00 23 F5 0F 00 47 F5 0F 00 /* ,...C...#...G... */\
/* 11Ch 0284  16 */                            F8 F6 0F 00 29 FA 0F 00 68 FE 0F 00 E2 02 00 00 /* ....)...h....... */\
/* 12Ch 0300  16 */                            8F 06 00 00 75 08 00 00 EF 07 00 00 F3 04 00 00 /* ....u........... */\
/* 13Ch 0316  16 */                            28 00 00 00 D3 FA 0F 00 8A F6 0F 00 C1 F4 0F 00 /* (............... */\
/* 14Ch 0332  16 */                            51 F6 0F 00 22 FB 0F 00 11 02 00 00 29 09 00 00 /* Q...".......)... */\
/* 15Ch 0348  16 */                            2C 0E 00 00 3E 0F 00 00 8E 0B 00 00 BB 03 00 00 /* ,...>........... */\
/* 16Ch 0364  16 */                            CB F9 0F 00 B0 F0 0F 00 71 EB 0F 00 2E EC 0F 00 /* ........q....... */\
/* 17Ch 0380  16 */                            56 F3 0F 00 53 FF 0F 00 CE 0C 00 00 9C 17 00 00 /* V...S........... */\
/* 18Ch 0396  16 */                            F8 1B 00 00 D1 17 00 00 9D 0B 00 00 79 FA 0F 00 /* ............y... */\
/* 19Ch 0412  16 */                            6D E9 0F 00 F8 DD 0F 00 53 DC 0F 00 F6 E5 0F 00 /* m.......S....... */\
/* 1ACh 0428  16 */                            D5 F8 0F 00 BB 0F 00 00 A7 23 00 00 EF 2D 00 00 /* .........#...-.. */\
/* 1BCh 0444  16 */                            6A 2A 00 00 05 19 00 00 24 FE 0F 00 99 E1 0F 00 /* j*......$....... */\
/* 1CCh 0460  16 */                            68 CC 0F 00 F7 C5 0F 00 8A D1 0F 00 E1 EC 0F 00 /* h............... */\
/* 1DCh 0476  16 */                            79 10 00 00 99 31 00 00 78 45 00 00 BC 44 00 00 /* y....1..xE...D.. */\
/* 1ECh 0492  16 */                            15 2E 00 00 1B 07 00 00 08 DB 0F 00 84 B7 0F 00 /* ................ */\
/* 1FCh 0508  16 */                            77 A8 0F 00 1A B4 0F 00 97 D8 0F 00 10 0C 00 00 /* w............... */\
/* 20Ch 0524  16 */                            3B 3F 00 00 E1 61 00 00 F6 67 00 00 B0 4D 00 00 /* ;?...a...g...M.. */\
/* 21Ch 0540  16 */                            40 19 00 00 81 D9 0F 00 CA A1 0F 00 1F 84 0F 00 /* @............... */\
/* 22Ch 0556  16 */                            6B 8B 0F 00 A8 B7 0F 00 3A FD 0F 00 E6 47 00 00 /* k.......:....G.. */\
/* 23Ch 0572  16 */                            AC 80 00 00 CF 94 00 00 EB 7B 00 00 25 3B 00 00 /* .........{..%;.. */\
/* 24Ch 0588  16 */                            4A E4 0F 00 FE 90 0F 00 2E 5B 0F 00 12 55 0F 00 /* J........[...U.. */\
/* 25Ch 0604  16 */                            2C 83 0F 00 2D DA 0F 00 A3 41 00 00 D1 9A 00 00 /* ,...-....A...... */\
/* 26Ch 0620  16 */                            C2 C9 00 00 F2 BD 00 00 E2 77 00 00 BC 09 00 00 /* .........w...... */\
/* 27Ch 0636  16 */                            AB 92 0F 00 0F 36 0F 00 0C 11 0F 00 8C 31 0F 00 /* .....6.......1.. */\
/* 28Ch 0652  16 */                            65 91 0F 00 50 17 00 00 91 9D 00 00 90 FC 00 00 /* e...P........... */\
/* 29Ch 0668  16 */                            6E 16 01 00 25 E0 00 00 89 65 00 00 C7 C6 0F 00 /* n...%....e...... */\
/* 2ACh 0684  16 */                            EA 2F 0F 00 AC CC 0E 00 FA BB 0E 00 A9 06 0F 00 /* ./.............. */\
/* 2BCh 0700  16 */                            25 9C 0F 00 2C 56 00 00 A9 02 01 00 27 71 01 00 /* %...,V......'q.. */\
/* 2CCh 0716  16 */                            2C 80 01 00 DD 26 01 00 2B 78 00 00 A6 9E 0F 00 /* ,....&..+x...... */\
/* 2DCh 0732  16 */                            F0 D1 0E 00 85 48 0E 00 8B 29 0E 00 65 82 0E 00 /* .....H...)..e... */\
/* 2ECh 0748  16 */                            A4 42 0F 00 71 3F 00 00 8C 3D 01 00 57 FF 01 00 /* .B..q?...=..W... */\
/* 2FCh 0764  16 */                            7A 53 02 00 9E 20 02 00 73 6B 01 00 CE 55 00 00 /* zS... ..sk...U.. */\
/* 30Ch 0780  16 */                            49 17 0F 00 42 F1 0D 00 2B 21 0D 00 3E D4 0C 00 /* I...B...+!..>... */\
/* 31Ch 0796  16 */                            22 1F 0D 00 0F FB 0D 00 8E 48 0F 00 D5 D6 00 00 /* "........H...... */\
/* 32Ch 0812  16 */                            C5 6D 02 00 44 D8 03 00 D5 EC 04 00 01 93 05 00 /* .m..D........... */\
/* 33Ch 0828  16 */                            ED C4 05 00 6F 8D 05 00 85 03 05 00 8D 44 04 00 /* ....o........D.. */\
/* 34Ch 0844  16 */                            82 6E 03 00 5D 9B 02 00 2D DE 01 00 11 42 01 00 /* .n..]...-....B.. */\
/* 35Ch 0860  16 */                            C9 CA 00 00 5B 76 00 00 38 3F 00 00 4A 1E 00 00 /* ....[v..8?..J... */\
/* 36Ch 0876  16 */                            93 0C 00 00 3B 04 00 00 F9 00 00 00 D6 FF 0F 00 /* ....;........... */\
/* 37Ch 0892  16 */                            17 02 00 00 5B 02 00 00 83 03 00 00 07 05 00 00 /* ....[........... */\
/* 38Ch 0908  16 */                            E2 06 00 00 16 09 00 00 A1 0B 00 00 7B 0E 00 00 /* ............{... */\
/* 39Ch 0924  16 */                            9A 11 00 00 EC 14 00 00 59 18 00 00 C7 1B 00 00 /* ........Y....... */\
/* 3ACh 0940  16 */                            15 1F 00 00 1D 22 00 00 BA 24 00 00 C3 26 00 00 /* ....."...$...&.. */\
/* 3BCh 0956  16 */                            10 28 00 00 7E 28 00 00 EC 27 00 00 40 26 00 00 /* .(..~(...'..@&.. */\
/* 3CCh 0972  16 */                            6C 23 00 00 6A 1F 00 00 40 1A 00 00 02 14 00 00 /* l#..j...@....... */\
/* 3DCh 0988  16 */                            D3 0C 00 00 E2 04 00 00 6B FC 0F 00 B7 F3 0F 00 /* ........k....... */\
/* 3ECh 1004  16 */                            17 EB 0F 00 E2 E2 0F 00 73 DB 0F 00 26 D5 0F 00 /* ........s...&... */\
/* 3FCh 1020  16 */                            4F D0 0F 00 3A CD 0F 00 27 CC 0F 00 42 CD 0F 00 /* O...:...'...B... */\
/* 40Ch 1036  16 */                            A5 D0 0F 00 4F D6 0F 00 28 DE 0F 00 FD E7 0F 00 /* ....O...(....... */\
/* 41Ch 1052  16 */                            82 F3 0F 00 4F 00 00 00 EB 0D 00 00 C8 1B 00 00 /* ....O........... */\
/* 42Ch 1068  16 */                            4E 29 00 00 DD 35 00 00 D8 40 00 00 A7 49 00 00 /* N)...5...@...I.. */\
/* 43Ch 1084  16 */                            C4 4F 00 00 BE 52 00 00 42 52 00 00 1E 4E 00 00 /* .O...R..BR...N.. */\
/* 44Ch 1100  16 */                            4A 46 00 00 E5 3A 00 00 3B 2C 00 00 C1 1A 00 00 /* JF...:..;,...... */\
/* 45Ch 1116  16 */                            14 07 00 00 F4 F1 0F 00 3B DC 0F 00 D6 C6 0F 00 /* ........;....... */\
/* 46Ch 1132  16 */                            C0 B2 0F 00 EC A0 0F 00 47 92 0F 00 A1 87 0F 00 /* ........G....... */\
/* 47Ch 1148  16 */                            AD 81 0F 00 EC 80 0F 00 B1 85 0F 00 0D 90 0F 00 /* ................ */\
/* 48Ch 1164  16 */                            DA 9F 0F 00 AA B4 0F 00 DA CD 0F 00 84 EA 0F 00 /* ................ */\
/* 49Ch 1180  16 */                            96 09 00 00 D1 29 00 00 E0 49 00 00 55 68 00 00 /* .....)...I..Uh.. */\
/* 4ACh 1196  16 */                            CF 83 00 00 F4 9A 00 00 91 AC 00 00 9E B7 00 00 /* ................ */\
/* 4BCh 1212  16 */                            55 BB 00 00 32 B7 00 00 0B AB 00 00 03 97 00 00 /* U...2........... */\
/* 4CCh 1228  16 */                            9F 7B 00 00 B2 59 00 00 67 32 00 00 29 07 00 00 /* .{...Y..g2..)... */\
/* 4DCh 1244  16 */                            A4 D9 0F 00 A8 AB 0F 00 24 7F 0F 00 02 56 0F 00 /* ........$....V.. */\
/* 4ECh 1260  16 */                            23 32 0F 00 3C 15 0F 00 CF 00 0F 00 0A F6 0E 00 /* #2..<........... */\
/* 4FCh 1276  16 */                            C9 F5 0E 00 79 00 0F 00 1E 16 0F 00 45 36 0F 00 /* ....y.......E6.. */\
/* 50Ch 1292  16 */                            0D 60 0F 00 25 92 0F 00 DE CA 0F 00 33 08 00 00 /* .`..%.......3... */\
/* 51Ch 1308  16 */                            E1 47 00 00 77 87 00 00 73 C4 00 00 56 FC 00 00 /* .G..w...s...V... */\
/* 52Ch 1324  16 */                            C0 2C 01 00 88 53 01 00 D4 6E 01 00 2B 7D 01 00 /* .,...S...n..+}.. */\
/* 53Ch 1340  16 */                            87 7D 01 00 60 6F 01 00 B9 52 01 00 1A 28 01 00 /* .}..`o...R...(.. */\
/* 54Ch 1356  16 */                            95 F0 00 00 BD AD 00 00 96 61 00 00 87 0E 00 00 /* .........a...... */\
/* 55Ch 1372  16 */                            47 B7 0F 00 C0 5E 0F 00 FC 07 0F 00 05 B6 0E 00 /* G....^.......... */\
/* 56Ch 1388  16 */                            CB 6B 0E 00 0F 2C 0E 00 44 F9 0D 00 7E D5 0D 00 /* .k...,..D...~... */\
/* 57Ch 1404  16 */                            5F C2 0D 00 0A C1 0D 00 1A D2 0D 00 9C F5 0D 00 /* _............... */\
/* 58Ch 1420  16 */                            14 2B 0E 00 7C 71 0E 00 55 C7 0E 00 AD 2A 0F 00 /* .+..|q..U....*.. */\
/* 59Ch 1436  16 */                            3A 99 0F 00 64 10 00 00 63 8D 00 00 4F 0D 01 00 /* :...d...c...O... */\
/* 5ACh 1452  16 */                            3F 8D 01 00 57 0A 02 00 E5 81 02 00 6E F1 02 00 /* ?...W.......n... */\
/* 5BCh 1468  16 */                            C1 56 03 00 05 B0 03 00 C3 FB 03 00 EA 38 04 00 /* .V...........8.. */\
/* 5CCh 1484  16 */                            D2 66 04 00 3F 85 04 00 57 94 04 00 A1 94 04 00 /* .f..?...W....... */\
/* 5DCh 1500  16 */                            F4 86 04 00 73 6C 04 00 7A 46 04 00 91 16 04 00 /* ....sl..zF...... */\
/* 5ECh 1516  16 */                            61 DE 03 00 A1 9F 03 00 0B 5C 03 00 4E 15 03 00 /* a........\..N... */\
/* 5FCh 1532  16 */                            02 CD 02 00 A2 84 02 00 80 3D 02 00 C4 F8 01 00 /* .........=...... */\
/* 60Ch 1548  16 */                            63 B7 01 00 21 7A 01 00 92 41 01 00 16 0E 01 00 /* c...!z...A...... */\
/* 61Ch 1564  16 */                            E3 DF 00 00 06 B7 00 00 68 93 00 00 D3 74 00 00 /* ........h....t.. */\
/* 62Ch 1580  16 */                            F9 5A 00 00 7C 45 00 00 EF 33 00 00 DF 25 00 00 /* .Z..|E...3...%.. */\
/* 63Ch 1596  16 */                            D6 1A 00 00 62 12 00 00 13 0C 00 00 83 07 00 00 /* ....b........... */\
/* 64Ch 1612  16 */                            57 04 00 00 D8 02 00 00 01 C0 00 00 03 09 00 04 /* W............... */\
/* 65Ch 1628  16 */                            00 00 00 00 03 08 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 66Ch 1644  16 */                            00 00 00 00 00 00 00 00 91 00 00 00 A0 02 04 00 /* ................ */\
/* 67Ch 1660  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 68Ch 1676  16 */                            00 00 00 00 00 00 00 00 11 00 00 00 B6 03 0E 00 /* ................ */\
/* 69Ch 1692  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 6ACh 1708  16 */                            00 00 00 00 00 00 00 00 08 00 00 00 AE FF 0F 00 /* ................ */\
/* 6BCh 1724  16 */                            12 FF 0F 00 FB FD 0F 00 61 FC 0F 00 5B FA 0F 00 /* ........a...[... */\
/* 6CCh 1740  16 */                            2C F8 0F 00 43 F6 0F 00 23 F5 0F 00 47 F5 0F 00 /* ,...C...#...G... */\
/* 6DCh 1756  16 */                            F8 F6 0F 00 29 FA 0F 00 68 FE 0F 00 E2 02 00 00 /* ....)...h....... */\
/* 6ECh 1772  16 */                            8F 06 00 00 75 08 00 00 EF 07 00 00 F3 04 00 00 /* ....u........... */\
/* 6FCh 1788  16 */                            28 00 00 00 D3 FA 0F 00 8A F6 0F 00 C1 F4 0F 00 /* (............... */\
/* 70Ch 1804  16 */                            51 F6 0F 00 22 FB 0F 00 11 02 00 00 29 09 00 00 /* Q...".......)... */\
/* 71Ch 1820  16 */                            2C 0E 00 00 3E 0F 00 00 8E 0B 00 00 BB 03 00 00 /* ,...>........... */\
/* 72Ch 1836  16 */                            CB F9 0F 00 B0 F0 0F 00 71 EB 0F 00 2E EC 0F 00 /* ........q....... */\
/* 73Ch 1852  16 */                            56 F3 0F 00 53 FF 0F 00 CE 0C 00 00 9C 17 00 00 /* V...S........... */\
/* 74Ch 1868  16 */                            F8 1B 00 00 D1 17 00 00 9D 0B 00 00 79 FA 0F 00 /* ............y... */\
/* 75Ch 1884  16 */                            6D E9 0F 00 F8 DD 0F 00 53 DC 0F 00 F6 E5 0F 00 /* m.......S....... */\
/* 76Ch 1900  16 */                            D5 F8 0F 00 BB 0F 00 00 A7 23 00 00 EF 2D 00 00 /* .........#...-.. */\
/* 77Ch 1916  16 */                            6A 2A 00 00 05 19 00 00 24 FE 0F 00 99 E1 0F 00 /* j*......$....... */\
/* 78Ch 1932  16 */                            68 CC 0F 00 F7 C5 0F 00 8A D1 0F 00 E1 EC 0F 00 /* h............... */\
/* 79Ch 1948  16 */                            79 10 00 00 99 31 00 00 78 45 00 00 BC 44 00 00 /* y....1..xE...D.. */\
/* 7ACh 1964  16 */                            15 2E 00 00 1B 07 00 00 08 DB 0F 00 84 B7 0F 00 /* ................ */\
/* 7BCh 1980  16 */                            77 A8 0F 00 1A B4 0F 00 97 D8 0F 00 10 0C 00 00 /* w............... */\
/* 7CCh 1996  16 */                            3B 3F 00 00 E1 61 00 00 F6 67 00 00 B0 4D 00 00 /* ;?...a...g...M.. */\
/* 7DCh 2012  16 */                            40 19 00 00 81 D9 0F 00 CA A1 0F 00 1F 84 0F 00 /* @............... */\
/* 7ECh 2028  16 */                            6B 8B 0F 00 A8 B7 0F 00 3A FD 0F 00 E6 47 00 00 /* k.......:....G.. */\
/* 7FCh 2044  16 */                            AC 80 00 00 CF 94 00 00 EB 7B 00 00 25 3B 00 00 /* .........{..%;.. */\
/* 80Ch 2060  16 */                            4A E4 0F 00 FE 90 0F 00 2E 5B 0F 00 12 55 0F 00 /* J........[...U.. */\
/* 81Ch 2076  16 */                            2C 83 0F 00 2D DA 0F 00 A3 41 00 00 D1 9A 00 00 /* ,...-....A...... */\
/* 82Ch 2092  16 */                            C2 C9 00 00 F2 BD 00 00 E2 77 00 00 BC 09 00 00 /* .........w...... */\
/* 83Ch 2108  16 */                            AB 92 0F 00 0F 36 0F 00 0C 11 0F 00 8C 31 0F 00 /* .....6.......1.. */\
/* 84Ch 2124  16 */                            65 91 0F 00 50 17 00 00 91 9D 00 00 90 FC 00 00 /* e...P........... */\
/* 85Ch 2140  16 */                            6E 16 01 00 25 E0 00 00 89 65 00 00 C7 C6 0F 00 /* n...%....e...... */\
/* 86Ch 2156  16 */                            EA 2F 0F 00 AC CC 0E 00 FA BB 0E 00 A9 06 0F 00 /* ./.............. */\
/* 87Ch 2172  16 */                            25 9C 0F 00 2C 56 00 00 A9 02 01 00 27 71 01 00 /* %...,V......'q.. */\
/* 88Ch 2188  16 */                            2C 80 01 00 DD 26 01 00 2B 78 00 00 A6 9E 0F 00 /* ,....&..+x...... */\
/* 89Ch 2204  16 */                            F0 D1 0E 00 85 48 0E 00 8B 29 0E 00 65 82 0E 00 /* .....H...)..e... */\
/* 8ACh 2220  16 */                            A4 42 0F 00 71 3F 00 00 8C 3D 01 00 57 FF 01 00 /* .B..q?...=..W... */\
/* 8BCh 2236  16 */                            7A 53 02 00 9E 20 02 00 73 6B 01 00 CE 55 00 00 /* zS... ..sk...U.. */\
/* 8CCh 2252  16 */                            49 17 0F 00 42 F1 0D 00 2B 21 0D 00 3E D4 0C 00 /* I...B...+!..>... */\
/* 8DCh 2268  16 */                            22 1F 0D 00 0F FB 0D 00 8E 48 0F 00 D5 D6 00 00 /* "........H...... */\
/* 8ECh 2284  16 */                            C5 6D 02 00 44 D8 03 00 D5 EC 04 00 01 93 05 00 /* .m..D........... */\
/* 8FCh 2300  16 */                            ED C4 05 00 6F 8D 05 00 85 03 05 00 8D 44 04 00 /* ....o........D.. */\
/* 90Ch 2316  16 */                            82 6E 03 00 5D 9B 02 00 2D DE 01 00 11 42 01 00 /* .n..]...-....B.. */\
/* 91Ch 2332  16 */                            C9 CA 00 00 5B 76 00 00 38 3F 00 00 4A 1E 00 00 /* ....[v..8?..J... */\
/* 92Ch 2348  16 */                            93 0C 00 00 3B 04 00 00 F9 00 00 00 D6 FF 0F 00 /* ....;........... */\
/* 93Ch 2364  16 */                            17 02 00 00 5B 02 00 00 83 03 00 00 07 05 00 00 /* ....[........... */\
/* 94Ch 2380  16 */                            E2 06 00 00 16 09 00 00 A1 0B 00 00 7B 0E 00 00 /* ............{... */\
/* 95Ch 2396  16 */                            9A 11 00 00 EC 14 00 00 59 18 00 00 C7 1B 00 00 /* ........Y....... */\
/* 96Ch 2412  16 */                            15 1F 00 00 1D 22 00 00 BA 24 00 00 C3 26 00 00 /* ....."...$...&.. */\
/* 97Ch 2428  16 */                            10 28 00 00 7E 28 00 00 EC 27 00 00 40 26 00 00 /* .(..~(...'..@&.. */\
/* 98Ch 2444  16 */                            6C 23 00 00 6A 1F 00 00 40 1A 00 00 02 14 00 00 /* l#..j...@....... */\
/* 99Ch 2460  16 */                            D3 0C 00 00 E2 04 00 00 6B FC 0F 00 B7 F3 0F 00 /* ........k....... */\
/* 9ACh 2476  16 */                            17 EB 0F 00 E2 E2 0F 00 73 DB 0F 00 26 D5 0F 00 /* ........s...&... */\
/* 9BCh 2492  16 */                            4F D0 0F 00 3A CD 0F 00 27 CC 0F 00 42 CD 0F 00 /* O...:...'...B... */\
/* 9CCh 2508  16 */                            A5 D0 0F 00 4F D6 0F 00 28 DE 0F 00 FD E7 0F 00 /* ....O...(....... */\
/* 9DCh 2524  16 */                            82 F3 0F 00 4F 00 00 00 EB 0D 00 00 C8 1B 00 00 /* ....O........... */\
/* 9ECh 2540  16 */                            4E 29 00 00 DD 35 00 00 D8 40 00 00 A7 49 00 00 /* N)...5...@...I.. */\
/* 9FCh 2556  16 */                            C4 4F 00 00 BE 52 00 00 42 52 00 00 1E 4E 00 00 /* .O...R..BR...N.. */\
/* A0Ch 2572  16 */                            4A 46 00 00 E5 3A 00 00 3B 2C 00 00 C1 1A 00 00 /* JF...:..;,...... */\
/* A1Ch 2588  16 */                            14 07 00 00 F4 F1 0F 00 3B DC 0F 00 D6 C6 0F 00 /* ........;....... */\
/* A2Ch 2604  16 */                            C0 B2 0F 00 EC A0 0F 00 47 92 0F 00 A1 87 0F 00 /* ........G....... */\
/* A3Ch 2620  16 */                            AD 81 0F 00 EC 80 0F 00 B1 85 0F 00 0D 90 0F 00 /* ................ */\
/* A4Ch 2636  16 */                            DA 9F 0F 00 AA B4 0F 00 DA CD 0F 00 84 EA 0F 00 /* ................ */\
/* A5Ch 2652  16 */                            96 09 00 00 D1 29 00 00 E0 49 00 00 55 68 00 00 /* .....)...I..Uh.. */\
/* A6Ch 2668  16 */                            CF 83 00 00 F4 9A 00 00 91 AC 00 00 9E B7 00 00 /* ................ */\
/* A7Ch 2684  16 */                            55 BB 00 00 32 B7 00 00 0B AB 00 00 03 97 00 00 /* U...2........... */\
/* A8Ch 2700  16 */                            9F 7B 00 00 B2 59 00 00 67 32 00 00 29 07 00 00 /* .{...Y..g2..)... */\
/* A9Ch 2716  16 */                            A4 D9 0F 00 A8 AB 0F 00 24 7F 0F 00 02 56 0F 00 /* ........$....V.. */\
/* AACh 2732  16 */                            23 32 0F 00 3C 15 0F 00 CF 00 0F 00 0A F6 0E 00 /* #2..<........... */\
/* ABCh 2748  16 */                            C9 F5 0E 00 79 00 0F 00 1E 16 0F 00 45 36 0F 00 /* ....y.......E6.. */\
/* ACCh 2764  16 */                            0D 60 0F 00 25 92 0F 00 DE CA 0F 00 33 08 00 00 /* .`..%.......3... */\
/* ADCh 2780  16 */                            E1 47 00 00 77 87 00 00 73 C4 00 00 56 FC 00 00 /* .G..w...s...V... */\
/* AECh 2796  16 */                            C0 2C 01 00 88 53 01 00 D4 6E 01 00 2B 7D 01 00 /* .,...S...n..+}.. */\
/* AFCh 2812  16 */                            87 7D 01 00 60 6F 01 00 B9 52 01 00 1A 28 01 00 /* .}..`o...R...(.. */\
/* B0Ch 2828  16 */                            95 F0 00 00 BD AD 00 00 96 61 00 00 87 0E 00 00 /* .........a...... */\
/* B1Ch 2844  16 */                            47 B7 0F 00 C0 5E 0F 00 FC 07 0F 00 05 B6 0E 00 /* G....^.......... */\
/* B2Ch 2860  16 */                            CB 6B 0E 00 0F 2C 0E 00 44 F9 0D 00 7E D5 0D 00 /* .k...,..D...~... */\
/* B3Ch 2876  16 */                            5F C2 0D 00 0A C1 0D 00 1A D2 0D 00 9C F5 0D 00 /* _............... */\
/* B4Ch 2892  16 */                            14 2B 0E 00 7C 71 0E 00 55 C7 0E 00 AD 2A 0F 00 /* .+..|q..U....*.. */\
/* B5Ch 2908  16 */                            3A 99 0F 00 64 10 00 00 63 8D 00 00 4F 0D 01 00 /* :...d...c...O... */\
/* B6Ch 2924  16 */                            3F 8D 01 00 57 0A 02 00 E5 81 02 00 6E F1 02 00 /* ?...W.......n... */\
/* B7Ch 2940  16 */                            C1 56 03 00 05 B0 03 00 C3 FB 03 00 EA 38 04 00 /* .V...........8.. */\
/* B8Ch 2956  16 */                            D2 66 04 00 3F 85 04 00 57 94 04 00 A1 94 04 00 /* .f..?...W....... */\
/* B9Ch 2972  16 */                            F4 86 04 00 73 6C 04 00 7A 46 04 00 91 16 04 00 /* ....sl..zF...... */\
/* BACh 2988  16 */                            61 DE 03 00 A1 9F 03 00 0B 5C 03 00 4E 15 03 00 /* a........\..N... */\
/* BBCh 3004  16 */                            02 CD 02 00 A2 84 02 00 80 3D 02 00 C4 F8 01 00 /* .........=...... */\
/* BCCh 3020  16 */                            63 B7 01 00 21 7A 01 00 92 41 01 00 16 0E 01 00 /* c...!z...A...... */\
/* BDCh 3036  16 */                            E3 DF 00 00 06 B7 00 00 68 93 00 00 D3 74 00 00 /* ........h....t.. */\
/* BECh 3052  16 */                            F9 5A 00 00 7C 45 00 00 EF 33 00 00 DF 25 00 00 /* .Z..|E...3...%.. */\
/* BFCh 3068  16 */                            D6 1A 00 00 62 12 00 00 13 0C 00 00 83 07 00 00 /* ....b........... */\
/* C0Ch 3084   8 */                            57 04 00 00 D8 02 00 00                         /* W....... */\

    /* Wave_Format_Extensible table #2 */
[C14h 3092 002h]                  Format Tag : FFFE
[C16h 3094 002h]               Channel Count : 0004
[C18h 3096 004h]          Samples Per Second : 0000BB80
[C1Ch 3100 004h]    Average Bytes Per Second : 0005DC00
[C20h 3104 002h]             Block Alignment : 0008
[C22h 3106 002h]             Bits Per Sample : 0020
[C24h 3108 002h]           Extra Format Size : 0016
[C26h 3110 002h]       Valid Bits Per Sample : 0020
[C28h 3112 004h]                Channel Mask : 00000033
[C2Ch 3116 010h]              SubFormat GUID : 00000001-0000-0010-8000-00AA00389B71
[C3Ch 3132 004h]         Capabilities Length : 00000BA8

    /* Specific_Config table #2 */
[C40h 3136 BA8h]                Capabilities : 01 00 00 00 10 32 FF FF 10 32 FF FF FF FF FF FF /* .....2...2...... */\
/* C50h 3152  16 */                            FF FF FF FF 03 00 00 00 03 00 00 00 03 00 3A 00 /* ..............:. */\
/* C60h 3168  16 */                            03 00 3A 00 03 00 00 00 01 C0 00 00 03 09 00 04 /* ..:............. */\
/* C70h 3184  16 */                            00 00 00 00 03 08 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* C80h 3200  16 */                            00 00 00 00 00 00 00 00 91 00 00 00 A0 02 04 00 /* ................ */\
/* C90h 3216  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* CA0h 3232  16 */                            00 00 00 00 00 00 00 00 11 00 00 00 B6 03 0E 00 /* ................ */\
/* CB0h 3248  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* CC0h 3264  16 */                            00 00 00 00 00 00 00 00 08 00 00 00 AE FF 0F 00 /* ................ */\
/* CD0h 3280  16 */                            12 FF 0F 00 FB FD 0F 00 61 FC 0F 00 5B FA 0F 00 /* ........a...[... */\
/* CE0h 3296  16 */                            2C F8 0F 00 43 F6 0F 00 23 F5 0F 00 47 F5 0F 00 /* ,...C...#...G... */\
/* CF0h 3312  16 */                            F8 F6 0F 00 29 FA 0F 00 68 FE 0F 00 E2 02 00 00 /* ....)...h....... */\
/* D00h 3328  16 */                            8F 06 00 00 75 08 00 00 EF 07 00 00 F3 04 00 00 /* ....u........... */\
/* D10h 3344  16 */                            28 00 00 00 D3 FA 0F 00 8A F6 0F 00 C1 F4 0F 00 /* (............... */\
/* D20h 3360  16 */                            51 F6 0F 00 22 FB 0F 00 11 02 00 00 29 09 00 00 /* Q...".......)... */\
/* D30h 3376  16 */                            2C 0E 00 00 3E 0F 00 00 8E 0B 00 00 BB 03 00 00 /* ,...>........... */\
/* D40h 3392  16 */                            CB F9 0F 00 B0 F0 0F 00 71 EB 0F 00 2E EC 0F 00 /* ........q....... */\
/* D50h 3408  16 */                            56 F3 0F 00 53 FF 0F 00 CE 0C 00 00 9C 17 00 00 /* V...S........... */\
/* D60h 3424  16 */                            F8 1B 00 00 D1 17 00 00 9D 0B 00 00 79 FA 0F 00 /* ............y... */\
/* D70h 3440  16 */                            6D E9 0F 00 F8 DD 0F 00 53 DC 0F 00 F6 E5 0F 00 /* m.......S....... */\
/* D80h 3456  16 */                            D5 F8 0F 00 BB 0F 00 00 A7 23 00 00 EF 2D 00 00 /* .........#...-.. */\
/* D90h 3472  16 */                            6A 2A 00 00 05 19 00 00 24 FE 0F 00 99 E1 0F 00 /* j*......$....... */\
/* DA0h 3488  16 */                            68 CC 0F 00 F7 C5 0F 00 8A D1 0F 00 E1 EC 0F 00 /* h............... */\
/* DB0h 3504  16 */                            79 10 00 00 99 31 00 00 78 45 00 00 BC 44 00 00 /* y....1..xE...D.. */\
/* DC0h 3520  16 */                            15 2E 00 00 1B 07 00 00 08 DB 0F 00 84 B7 0F 00 /* ................ */\
/* DD0h 3536  16 */                            77 A8 0F 00 1A B4 0F 00 97 D8 0F 00 10 0C 00 00 /* w............... */\
/* DE0h 3552  16 */                            3B 3F 00 00 E1 61 00 00 F6 67 00 00 B0 4D 00 00 /* ;?...a...g...M.. */\
/* DF0h 3568  16 */                            40 19 00 00 81 D9 0F 00 CA A1 0F 00 1F 84 0F 00 /* @............... */\
/* E00h 3584  16 */                            6B 8B 0F 00 A8 B7 0F 00 3A FD 0F 00 E6 47 00 00 /* k.......:....G.. */\
/* E10h 3600  16 */                            AC 80 00 00 CF 94 00 00 EB 7B 00 00 25 3B 00 00 /* .........{..%;.. */\
/* E20h 3616  16 */                            4A E4 0F 00 FE 90 0F 00 2E 5B 0F 00 12 55 0F 00 /* J........[...U.. */\
/* E30h 3632  16 */                            2C 83 0F 00 2D DA 0F 00 A3 41 00 00 D1 9A 00 00 /* ,...-....A...... */\
/* E40h 3648  16 */                            C2 C9 00 00 F2 BD 00 00 E2 77 00 00 BC 09 00 00 /* .........w...... */\
/* E50h 3664  16 */                            AB 92 0F 00 0F 36 0F 00 0C 11 0F 00 8C 31 0F 00 /* .....6.......1.. */\
/* E60h 3680  16 */                            65 91 0F 00 50 17 00 00 91 9D 00 00 90 FC 00 00 /* e...P........... */\
/* E70h 3696  16 */                            6E 16 01 00 25 E0 00 00 89 65 00 00 C7 C6 0F 00 /* n...%....e...... */\
/* E80h 3712  16 */                            EA 2F 0F 00 AC CC 0E 00 FA BB 0E 00 A9 06 0F 00 /* ./.............. */\
/* E90h 3728  16 */                            25 9C 0F 00 2C 56 00 00 A9 02 01 00 27 71 01 00 /* %...,V......'q.. */\
/* EA0h 3744  16 */                            2C 80 01 00 DD 26 01 00 2B 78 00 00 A6 9E 0F 00 /* ,....&..+x...... */\
/* EB0h 3760  16 */                            F0 D1 0E 00 85 48 0E 00 8B 29 0E 00 65 82 0E 00 /* .....H...)..e... */\
/* EC0h 3776  16 */                            A4 42 0F 00 71 3F 00 00 8C 3D 01 00 57 FF 01 00 /* .B..q?...=..W... */\
/* ED0h 3792  16 */                            7A 53 02 00 9E 20 02 00 73 6B 01 00 CE 55 00 00 /* zS... ..sk...U.. */\
/* EE0h 3808  16 */                            49 17 0F 00 42 F1 0D 00 2B 21 0D 00 3E D4 0C 00 /* I...B...+!..>... */\
/* EF0h 3824  16 */                            22 1F 0D 00 0F FB 0D 00 8E 48 0F 00 D5 D6 00 00 /* "........H...... */\
/* F00h 3840  16 */                            C5 6D 02 00 44 D8 03 00 D5 EC 04 00 01 93 05 00 /* .m..D........... */\
/* F10h 3856  16 */                            ED C4 05 00 6F 8D 05 00 85 03 05 00 8D 44 04 00 /* ....o........D.. */\
/* F20h 3872  16 */                            82 6E 03 00 5D 9B 02 00 2D DE 01 00 11 42 01 00 /* .n..]...-....B.. */\
/* F30h 3888  16 */                            C9 CA 00 00 5B 76 00 00 38 3F 00 00 4A 1E 00 00 /* ....[v..8?..J... */\
/* F40h 3904  16 */                            93 0C 00 00 3B 04 00 00 F9 00 00 00 D6 FF 0F 00 /* ....;........... */\
/* F50h 3920  16 */                            17 02 00 00 5B 02 00 00 83 03 00 00 07 05 00 00 /* ....[........... */\
/* F60h 3936  16 */                            E2 06 00 00 16 09 00 00 A1 0B 00 00 7B 0E 00 00 /* ............{... */\
/* F70h 3952  16 */                            9A 11 00 00 EC 14 00 00 59 18 00 00 C7 1B 00 00 /* ........Y....... */\
/* F80h 3968  16 */                            15 1F 00 00 1D 22 00 00 BA 24 00 00 C3 26 00 00 /* ....."...$...&.. */\
/* F90h 3984  16 */                            10 28 00 00 7E 28 00 00 EC 27 00 00 40 26 00 00 /* .(..~(...'..@&.. */\
/* FA0h 4000  16 */                            6C 23 00 00 6A 1F 00 00 40 1A 00 00 02 14 00 00 /* l#..j...@....... */\
/* FB0h 4016  16 */                            D3 0C 00 00 E2 04 00 00 6B FC 0F 00 B7 F3 0F 00 /* ........k....... */\
/* FC0h 4032  16 */                            17 EB 0F 00 E2 E2 0F 00 73 DB 0F 00 26 D5 0F 00 /* ........s...&... */\
/* FD0h 4048  16 */                            4F D0 0F 00 3A CD 0F 00 27 CC 0F 00 42 CD 0F 00 /* O...:...'...B... */\
/* FE0h 4064  16 */                            A5 D0 0F 00 4F D6 0F 00 28 DE 0F 00 FD E7 0F 00 /* ....O...(....... */\
/* FF0h 4080  16 */                            82 F3 0F 00 4F 00 00 00 EB 0D 00 00 C8 1B 00 00 /* ....O........... */\
/* 1000h 4096  16 */                            4E 29 00 00 DD 35 00 00 D8 40 00 00 A7 49 00 00 /* N)...5...@...I.. */\
/* 1010h 4112  16 */                            C4 4F 00 00 BE 52 00 00 42 52 00 00 1E 4E 00 00 /* .O...R..BR...N.. */\
/* 1020h 4128  16 */                            4A 46 00 00 E5 3A 00 00 3B 2C 00 00 C1 1A 00 00 /* JF...:..;,...... */\
/* 1030h 4144  16 */                            14 07 00 00 F4 F1 0F 00 3B DC 0F 00 D6 C6 0F 00 /* ........;....... */\
/* 1040h 4160  16 */                            C0 B2 0F 00 EC A0 0F 00 47 92 0F 00 A1 87 0F 00 /* ........G....... */\
/* 1050h 4176  16 */                            AD 81 0F 00 EC 80 0F 00 B1 85 0F 00 0D 90 0F 00 /* ................ */\
/* 1060h 4192  16 */                            DA 9F 0F 00 AA B4 0F 00 DA CD 0F 00 84 EA 0F 00 /* ................ */\
/* 1070h 4208  16 */                            96 09 00 00 D1 29 00 00 E0 49 00 00 55 68 00 00 /* .....)...I..Uh.. */\
/* 1080h 4224  16 */                            CF 83 00 00 F4 9A 00 00 91 AC 00 00 9E B7 00 00 /* ................ */\
/* 1090h 4240  16 */                            55 BB 00 00 32 B7 00 00 0B AB 00 00 03 97 00 00 /* U...2........... */\
/* 10A0h 4256  16 */                            9F 7B 00 00 B2 59 00 00 67 32 00 00 29 07 00 00 /* .{...Y..g2..)... */\
/* 10B0h 4272  16 */                            A4 D9 0F 00 A8 AB 0F 00 24 7F 0F 00 02 56 0F 00 /* ........$....V.. */\
/* 10C0h 4288  16 */                            23 32 0F 00 3C 15 0F 00 CF 00 0F 00 0A F6 0E 00 /* #2..<........... */\
/* 10D0h 4304  16 */                            C9 F5 0E 00 79 00 0F 00 1E 16 0F 00 45 36 0F 00 /* ....y.......E6.. */\
/* 10E0h 4320  16 */                            0D 60 0F 00 25 92 0F 00 DE CA 0F 00 33 08 00 00 /* .`..%.......3... */\
/* 10F0h 4336  16 */                            E1 47 00 00 77 87 00 00 73 C4 00 00 56 FC 00 00 /* .G..w...s...V... */\
/* 1100h 4352  16 */                            C0 2C 01 00 88 53 01 00 D4 6E 01 00 2B 7D 01 00 /* .,...S...n..+}.. */\
/* 1110h 4368  16 */                            87 7D 01 00 60 6F 01 00 B9 52 01 00 1A 28 01 00 /* .}..`o...R...(.. */\
/* 1120h 4384  16 */                            95 F0 00 00 BD AD 00 00 96 61 00 00 87 0E 00 00 /* .........a...... */\
/* 1130h 4400  16 */                            47 B7 0F 00 C0 5E 0F 00 FC 07 0F 00 05 B6 0E 00 /* G....^.......... */\
/* 1140h 4416  16 */                            CB 6B 0E 00 0F 2C 0E 00 44 F9 0D 00 7E D5 0D 00 /* .k...,..D...~... */\
/* 1150h 4432  16 */                            5F C2 0D 00 0A C1 0D 00 1A D2 0D 00 9C F5 0D 00 /* _............... */\
/* 1160h 4448  16 */                            14 2B 0E 00 7C 71 0E 00 55 C7 0E 00 AD 2A 0F 00 /* .+..|q..U....*.. */\
/* 1170h 4464  16 */                            3A 99 0F 00 64 10 00 00 63 8D 00 00 4F 0D 01 00 /* :...d...c...O... */\
/* 1180h 4480  16 */                            3F 8D 01 00 57 0A 02 00 E5 81 02 00 6E F1 02 00 /* ?...W.......n... */\
/* 1190h 4496  16 */                            C1 56 03 00 05 B0 03 00 C3 FB 03 00 EA 38 04 00 /* .V...........8.. */\
/* 11A0h 4512  16 */                            D2 66 04 00 3F 85 04 00 57 94 04 00 A1 94 04 00 /* .f..?...W....... */\
/* 11B0h 4528  16 */                            F4 86 04 00 73 6C 04 00 7A 46 04 00 91 16 04 00 /* ....sl..zF...... */\
/* 11C0h 4544  16 */                            61 DE 03 00 A1 9F 03 00 0B 5C 03 00 4E 15 03 00 /* a........\..N... */\
/* 11D0h 4560  16 */                            02 CD 02 00 A2 84 02 00 80 3D 02 00 C4 F8 01 00 /* .........=...... */\
/* 11E0h 4576  16 */                            63 B7 01 00 21 7A 01 00 92 41 01 00 16 0E 01 00 /* c...!z...A...... */\
/* 11F0h 4592  16 */                            E3 DF 00 00 06 B7 00 00 68 93 00 00 D3 74 00 00 /* ........h....t.. */\
/* 1200h 4608  16 */                            F9 5A 00 00 7C 45 00 00 EF 33 00 00 DF 25 00 00 /* .Z..|E...3...%.. */\
/* 1210h 4624  16 */                            D6 1A 00 00 62 12 00 00 13 0C 00 00 83 07 00 00 /* ....b........... */\
/* 1220h 4640  16 */                            57 04 00 00 D8 02 00 00 01 C0 00 00 03 09 00 04 /* W............... */\
/* 1230h 4656  16 */                            00 00 00 00 03 08 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 1240h 4672  16 */                            00 00 00 00 00 00 00 00 91 00 00 00 A0 02 04 00 /* ................ */\
/* 1250h 4688  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 1260h 4704  16 */                            00 00 00 00 00 00 00 00 11 00 00 00 B6 03 0E 00 /* ................ */\
/* 1270h 4720  16 */                            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 /* ................ */\
/* 1280h 4736  16 */                            00 00 00 00 00 00 00 00 08 00 00 00 AE FF 0F 00 /* ................ */\
/* 1290h 4752  16 */                            12 FF 0F 00 FB FD 0F 00 61 FC 0F 00 5B FA 0F 00 /* ........a...[... */\
/* 12A0h 4768  16 */                            2C F8 0F 00 43 F6 0F 00 23 F5 0F 00 47 F5 0F 00 /* ,...C...#...G... */\
/* 12B0h 4784  16 */                            F8 F6 0F 00 29 FA 0F 00 68 FE 0F 00 E2 02 00 00 /* ....)...h....... */\
/* 12C0h 4800  16 */                            8F 06 00 00 75 08 00 00 EF 07 00 00 F3 04 00 00 /* ....u........... */\
/* 12D0h 4816  16 */                            28 00 00 00 D3 FA 0F 00 8A F6 0F 00 C1 F4 0F 00 /* (............... */\
/* 12E0h 4832  16 */                            51 F6 0F 00 22 FB 0F 00 11 02 00 00 29 09 00 00 /* Q...".......)... */\
/* 12F0h 4848  16 */                            2C 0E 00 00 3E 0F 00 00 8E 0B 00 00 BB 03 00 00 /* ,...>........... */\
/* 1300h 4864  16 */                            CB F9 0F 00 B0 F0 0F 00 71 EB 0F 00 2E EC 0F 00 /* ........q....... */\
/* 1310h 4880  16 */                            56 F3 0F 00 53 FF 0F 00 CE 0C 00 00 9C 17 00 00 /* V...S........... */\
/* 1320h 4896  16 */                            F8 1B 00 00 D1 17 00 00 9D 0B 00 00 79 FA 0F 00 /* ............y... */\
/* 1330h 4912  16 */                            6D E9 0F 00 F8 DD 0F 00 53 DC 0F 00 F6 E5 0F 00 /* m.......S....... */\
/* 1340h 4928  16 */                            D5 F8 0F 00 BB 0F 00 00 A7 23 00 00 EF 2D 00 00 /* .........#...-.. */\
/* 1350h 4944  16 */                            6A 2A 00 00 05 19 00 00 24 FE 0F 00 99 E1 0F 00 /* j*......$....... */\
/* 1360h 4960  16 */                            68 CC 0F 00 F7 C5 0F 00 8A D1 0F 00 E1 EC 0F 00 /* h............... */\
/* 1370h 4976  16 */                            79 10 00 00 99 31 00 00 78 45 00 00 BC 44 00 00 /* y....1..xE...D.. */\
/* 1380h 4992  16 */                            15 2E 00 00 1B 07 00 00 08 DB 0F 00 84 B7 0F 00 /* ................ */\
/* 1390h 5008  16 */                            77 A8 0F 00 1A B4 0F 00 97 D8 0F 00 10 0C 00 00 /* w............... */\
/* 13A0h 5024  16 */                            3B 3F 00 00 E1 61 00 00 F6 67 00 00 B0 4D 00 00 /* ;?...a...g...M.. */\
/* 13B0h 5040  16 */                            40 19 00 00 81 D9 0F 00 CA A1 0F 00 1F 84 0F 00 /* @............... */\
/* 13C0h 5056  16 */                            6B 8B 0F 00 A8 B7 0F 00 3A FD 0F 00 E6 47 00 00 /* k.......:....G.. */\
/* 13D0h 5072  16 */                            AC 80 00 00 CF 94 00 00 EB 7B 00 00 25 3B 00 00 /* .........{..%;.. */\
/* 13E0h 5088  16 */                            4A E4 0F 00 FE 90 0F 00 2E 5B 0F 00 12 55 0F 00 /* J........[...U.. */\
/* 13F0h 5104  16 */                            2C 83 0F 00 2D DA 0F 00 A3 41 00 00 D1 9A 00 00 /* ,...-....A...... */\
/* 1400h 5120  16 */                            C2 C9 00 00 F2 BD 00 00 E2 77 00 00 BC 09 00 00 /* .........w...... */\
/* 1410h 5136  16 */                            AB 92 0F 00 0F 36 0F 00 0C 11 0F 00 8C 31 0F 00 /* .....6.......1.. */\
/* 1420h 5152  16 */                            65 91 0F 00 50 17 00 00 91 9D 00 00 90 FC 00 00 /* e...P........... */\
/* 1430h 5168  16 */                            6E 16 01 00 25 E0 00 00 89 65 00 00 C7 C6 0F 00 /* n...%....e...... */\
/* 1440h 5184  16 */                            EA 2F 0F 00 AC CC 0E 00 FA BB 0E 00 A9 06 0F 00 /* ./.............. */\
/* 1450h 5200  16 */                            25 9C 0F 00 2C 56 00 00 A9 02 01 00 27 71 01 00 /* %...,V......'q.. */\
/* 1460h 5216  16 */                            2C 80 01 00 DD 26 01 00 2B 78 00 00 A6 9E 0F 00 /* ,....&..+x...... */\
/* 1470h 5232  16 */                            F0 D1 0E 00 85 48 0E 00 8B 29 0E 00 65 82 0E 00 /* .....H...)..e... */\
/* 1480h 5248  16 */                            A4 42 0F 00 71 3F 00 00 8C 3D 01 00 57 FF 01 00 /* .B..q?...=..W... */\
/* 1490h 5264  16 */                            7A 53 02 00 9E 20 02 00 73 6B 01 00 CE 55 00 00 /* zS... ..sk...U.. */\
/* 14A0h 5280  16 */                            49 17 0F 00 42 F1 0D 00 2B 21 0D 00 3E D4 0C 00 /* I...B...+!..>... */\
/* 14B0h 5296  16 */                            22 1F 0D 00 0F FB 0D 00 8E 48 0F 00 D5 D6 00 00 /* "........H...... */\
/* 14C0h 5312  16 */                            C5 6D 02 00 44 D8 03 00 D5 EC 04 00 01 93 05 00 /* .m..D........... */\
/* 14D0h 5328  16 */                            ED C4 05 00 6F 8D 05 00 85 03 05 00 8D 44 04 00 /* ....o........D.. */\
/* 14E0h 5344  16 */                            82 6E 03 00 5D 9B 02 00 2D DE 01 00 11 42 01 00 /* .n..]...-....B.. */\
/* 14F0h 5360  16 */                            C9 CA 00 00 5B 76 00 00 38 3F 00 00 4A 1E 00 00 /* ....[v..8?..J... */\
/* 1500h 5376  16 */                            93 0C 00 00 3B 04 00 00 F9 00 00 00 D6 FF 0F 00 /* ....;........... */\
/* 1510h 5392  16 */                            17 02 00 00 5B 02 00 00 83 03 00 00 07 05 00 00 /* ....[........... */\
/* 1520h 5408  16 */                            E2 06 00 00 16 09 00 00 A1 0B 00 00 7B 0E 00 00 /* ............{... */\
/* 1530h 5424  16 */                            9A 11 00 00 EC 14 00 00 59 18 00 00 C7 1B 00 00 /* ........Y....... */\
/* 1540h 5440  16 */                            15 1F 00 00 1D 22 00 00 BA 24 00 00 C3 26 00 00 /* ....."...$...&.. */\
/* 1550h 5456  16 */                            10 28 00 00 7E 28 00 00 EC 27 00 00 40 26 00 00 /* .(..~(...'..@&.. */\
/* 1560h 5472  16 */                            6C 23 00 00 6A 1F 00 00 40 1A 00 00 02 14 00 00 /* l#..j...@....... */\
/* 1570h 5488  16 */                            D3 0C 00 00 E2 04 00 00 6B FC 0F 00 B7 F3 0F 00 /* ........k....... */\
/* 1580h 5504  16 */                            17 EB 0F 00 E2 E2 0F 00 73 DB 0F 00 26 D5 0F 00 /* ........s...&... */\
/* 1590h 5520  16 */                            4F D0 0F 00 3A CD 0F 00 27 CC 0F 00 42 CD 0F 00 /* O...:...'...B... */\
/* 15A0h 5536  16 */                            A5 D0 0F 00 4F D6 0F 00 28 DE 0F 00 FD E7 0F 00 /* ....O...(....... */\
/* 15B0h 5552  16 */                            82 F3 0F 00 4F 00 00 00 EB 0D 00 00 C8 1B 00 00 /* ....O........... */\
/* 15C0h 5568  16 */                            4E 29 00 00 DD 35 00 00 D8 40 00 00 A7 49 00 00 /* N)...5...@...I.. */\
/* 15D0h 5584  16 */                            C4 4F 00 00 BE 52 00 00 42 52 00 00 1E 4E 00 00 /* .O...R..BR...N.. */\
/* 15E0h 5600  16 */                            4A 46 00 00 E5 3A 00 00 3B 2C 00 00 C1 1A 00 00 /* JF...:..;,...... */\
/* 15F0h 5616  16 */                            14 07 00 00 F4 F1 0F 00 3B DC 0F 00 D6 C6 0F 00 /* ........;....... */\
/* 1600h 5632  16 */                            C0 B2 0F 00 EC A0 0F 00 47 92 0F 00 A1 87 0F 00 /* ........G....... */\
/* 1610h 5648  16 */                            AD 81 0F 00 EC 80 0F 00 B1 85 0F 00 0D 90 0F 00 /* ................ */\
/* 1620h 5664  16 */                            DA 9F 0F 00 AA B4 0F 00 DA CD 0F 00 84 EA 0F 00 /* ................ */\
/* 1630h 5680  16 */                            96 09 00 00 D1 29 00 00 E0 49 00 00 55 68 00 00 /* .....)...I..Uh.. */\
/* 1640h 5696  16 */                            CF 83 00 00 F4 9A 00 00 91 AC 00 00 9E B7 00 00 /* ................ */\
/* 1650h 5712  16 */                            55 BB 00 00 32 B7 00 00 0B AB 00 00 03 97 00 00 /* U...2........... */\
/* 1660h 5728  16 */                            9F 7B 00 00 B2 59 00 00 67 32 00 00 29 07 00 00 /* .{...Y..g2..)... */\
/* 1670h 5744  16 */                            A4 D9 0F 00 A8 AB 0F 00 24 7F 0F 00 02 56 0F 00 /* ........$....V.. */\
/* 1680h 5760  16 */                            23 32 0F 00 3C 15 0F 00 CF 00 0F 00 0A F6 0E 00 /* #2..<........... */\
/* 1690h 5776  16 */                            C9 F5 0E 00 79 00 0F 00 1E 16 0F 00 45 36 0F 00 /* ....y.......E6.. */\
/* 16A0h 5792  16 */                            0D 60 0F 00 25 92 0F 00 DE CA 0F 00 33 08 00 00 /* .`..%.......3... */\
/* 16B0h 5808  16 */                            E1 47 00 00 77 87 00 00 73 C4 00 00 56 FC 00 00 /* .G..w...s...V... */\
/* 16C0h 5824  16 */                            C0 2C 01 00 88 53 01 00 D4 6E 01 00 2B 7D 01 00 /* .,...S...n..+}.. */\
/* 16D0h 5840  16 */                            87 7D 01 00 60 6F 01 00 B9 52 01 00 1A 28 01 00 /* .}..`o...R...(.. */\
/* 16E0h 5856  16 */                            95 F0 00 00 BD AD 00 00 96 61 00 00 87 0E 00 00 /* .........a...... */\
/* 16F0h 5872  16 */                            47 B7 0F 00 C0 5E 0F 00 FC 07 0F 00 05 B6 0E 00 /* G....^.......... */\
/* 1700h 5888  16 */                            CB 6B 0E 00 0F 2C 0E 00 44 F9 0D 00 7E D5 0D 00 /* .k...,..D...~... */\
/* 1710h 5904  16 */                            5F C2 0D 00 0A C1 0D 00 1A D2 0D 00 9C F5 0D 00 /* _............... */\
/* 1720h 5920  16 */                            14 2B 0E 00 7C 71 0E 00 55 C7 0E 00 AD 2A 0F 00 /* .+..|q..U....*.. */\
/* 1730h 5936  16 */                            3A 99 0F 00 64 10 00 00 63 8D 00 00 4F 0D 01 00 /* :...d...c...O... */\
/* 1740h 5952  16 */                            3F 8D 01 00 57 0A 02 00 E5 81 02 00 6E F1 02 00 /* ?...W.......n... */\
/* 1750h 5968  16 */                            C1 56 03 00 05 B0 03 00 C3 FB 03 00 EA 38 04 00 /* .V...........8.. */\
/* 1760h 5984  16 */                            D2 66 04 00 3F 85 04 00 57 94 04 00 A1 94 04 00 /* .f..?...W....... */\
/* 1770h 6000  16 */                            F4 86 04 00 73 6C 04 00 7A 46 04 00 91 16 04 00 /* ....sl..zF...... */\
/* 1780h 6016  16 */                            61 DE 03 00 A1 9F 03 00 0B 5C 03 00 4E 15 03 00 /* a........\..N... */\
/* 1790h 6032  16 */                            02 CD 02 00 A2 84 02 00 80 3D 02 00 C4 F8 01 00 /* .........=...... */\
/* 17A0h 6048  16 */                            63 B7 01 00 21 7A 01 00 92 41 01 00 16 0E 01 00 /* c...!z...A...... */\
/* 17B0h 6064  16 */                            E3 DF 00 00 06 B7 00 00 68 93 00 00 D3 74 00 00 /* ........h....t.. */\
/* 17C0h 6080  16 */                            F9 5A 00 00 7C 45 00 00 EF 33 00 00 DF 25 00 00 /* .Z..|E...3...%.. */\
/* 17D0h 6096  16 */                            D6 1A 00 00 62 12 00 00 13 0C 00 00 83 07 00 00 /* ....b........... */\
/* 17E0h 6112   8 */                            57 04 00 00 D8 02 00 00                         /* W....... */\

    /* Structures that are not part of NHLT spec */
[17E8h 6120 001h]    Device Info struct count : 00

/* Terminating specific config (not part of NHLT spec) */
[17E9h 6121 004h]           Capabilities Size : 00000004
[17EDh 6125 004h]                Capabilities : DE AD BE EF                                     /* .... */\

Raw Table Data: Length 6129 (0x17F1)

    0000: 4E 48 4C 54 F1 17 00 00 00 17 49 4E 54 45 4C 20  // NHLT......INTEL 
    0010: 43 46 4C 2D 55 4C 54 00 01 00 17 20 49 4E 54 4C  // CFL-ULT.... INTL
    0020: 22 04 16 20 01 C4 17 00 00 02 00 86 80 20 AE 01  // ".. ......... ..
    0030: 00 01 00 00 00 01 01 00 03 00 00 00 00 01 0D 02  // ................
    0040: FE FF 04 00 80 BB 00 00 00 DC 05 00 08 00 10 00  // ................
    0050: 16 00 10 00 33 00 00 00 01 00 00 00 00 00 10 00  // ....3...........
    0060: 80 00 00 AA 00 38 9B 71 A8 0B 00 00 01 00 00 00  // .....8.q........
    0070: 10 32 FF FF 10 32 FF FF FF FF FF FF FF FF FF FF  // .2...2..........
    0080: 03 00 00 00 03 00 00 00 03 00 32 00 03 00 32 00  // ..........2...2.
    0090: 03 00 00 00 01 C0 00 00 03 09 00 04 00 00 00 00  // ................
    00A0: 03 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 00 00 00 00 91 00 00 00 A0 02 04 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 00 00 00 00 11 00 00 00 B6 03 0E 00 00 00 00 00  // ................
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 08 00 00 00 AE FF 0F 00 12 FF 0F 00  // ................
    0100: FB FD 0F 00 61 FC 0F 00 5B FA 0F 00 2C F8 0F 00  // ....a...[...,...
    0110: 43 F6 0F 00 23 F5 0F 00 47 F5 0F 00 F8 F6 0F 00  // C...#...G.......
    0120: 29 FA 0F 00 68 FE 0F 00 E2 02 00 00 8F 06 00 00  // )...h...........
    0130: 75 08 00 00 EF 07 00 00 F3 04 00 00 28 00 00 00  // u...........(...
    0140: D3 FA 0F 00 8A F6 0F 00 C1 F4 0F 00 51 F6 0F 00  // ............Q...
    0150: 22 FB 0F 00 11 02 00 00 29 09 00 00 2C 0E 00 00  // ".......)...,...
    0160: 3E 0F 00 00 8E 0B 00 00 BB 03 00 00 CB F9 0F 00  // >...............
    0170: B0 F0 0F 00 71 EB 0F 00 2E EC 0F 00 56 F3 0F 00  // ....q.......V...
    0180: 53 FF 0F 00 CE 0C 00 00 9C 17 00 00 F8 1B 00 00  // S...............
    0190: D1 17 00 00 9D 0B 00 00 79 FA 0F 00 6D E9 0F 00  // ........y...m...
    01A0: F8 DD 0F 00 53 DC 0F 00 F6 E5 0F 00 D5 F8 0F 00  // ....S...........
    01B0: BB 0F 00 00 A7 23 00 00 EF 2D 00 00 6A 2A 00 00  // .....#...-..j*..
    01C0: 05 19 00 00 24 FE 0F 00 99 E1 0F 00 68 CC 0F 00  // ....$.......h...
    01D0: F7 C5 0F 00 8A D1 0F 00 E1 EC 0F 00 79 10 00 00  // ............y...
    01E0: 99 31 00 00 78 45 00 00 BC 44 00 00 15 2E 00 00  // .1..xE...D......
    01F0: 1B 07 00 00 08 DB 0F 00 84 B7 0F 00 77 A8 0F 00  // ............w...
    0200: 1A B4 0F 00 97 D8 0F 00 10 0C 00 00 3B 3F 00 00  // ............;?..
    0210: E1 61 00 00 F6 67 00 00 B0 4D 00 00 40 19 00 00  // .a...g...M..@...
    0220: 81 D9 0F 00 CA A1 0F 00 1F 84 0F 00 6B 8B 0F 00  // ............k...
    0230: A8 B7 0F 00 3A FD 0F 00 E6 47 00 00 AC 80 00 00  // ....:....G......
    0240: CF 94 00 00 EB 7B 00 00 25 3B 00 00 4A E4 0F 00  // .....{..%;..J...
    0250: FE 90 0F 00 2E 5B 0F 00 12 55 0F 00 2C 83 0F 00  // .....[...U..,...
    0260: 2D DA 0F 00 A3 41 00 00 D1 9A 00 00 C2 C9 00 00  // -....A..........
    0270: F2 BD 00 00 E2 77 00 00 BC 09 00 00 AB 92 0F 00  // .....w..........
    0280: 0F 36 0F 00 0C 11 0F 00 8C 31 0F 00 65 91 0F 00  // .6.......1..e...
    0290: 50 17 00 00 91 9D 00 00 90 FC 00 00 6E 16 01 00  // P...........n...
    02A0: 25 E0 00 00 89 65 00 00 C7 C6 0F 00 EA 2F 0F 00  // %....e......./..
    02B0: AC CC 0E 00 FA BB 0E 00 A9 06 0F 00 25 9C 0F 00  // ............%...
    02C0: 2C 56 00 00 A9 02 01 00 27 71 01 00 2C 80 01 00  // ,V......'q..,...
    02D0: DD 26 01 00 2B 78 00 00 A6 9E 0F 00 F0 D1 0E 00  // .&..+x..........
    02E0: 85 48 0E 00 8B 29 0E 00 65 82 0E 00 A4 42 0F 00  // .H...)..e....B..
    02F0: 71 3F 00 00 8C 3D 01 00 57 FF 01 00 7A 53 02 00  // q?...=..W...zS..
    0300: 9E 20 02 00 73 6B 01 00 CE 55 00 00 49 17 0F 00  // . ..sk...U..I...
    0310: 42 F1 0D 00 2B 21 0D 00 3E D4 0C 00 22 1F 0D 00  // B...+!..>..."...
    0320: 0F FB 0D 00 8E 48 0F 00 D5 D6 00 00 C5 6D 02 00  // .....H.......m..
    0330: 44 D8 03 00 D5 EC 04 00 01 93 05 00 ED C4 05 00  // D...............
    0340: 6F 8D 05 00 85 03 05 00 8D 44 04 00 82 6E 03 00  // o........D...n..
    0350: 5D 9B 02 00 2D DE 01 00 11 42 01 00 C9 CA 00 00  // ]...-....B......
    0360: 5B 76 00 00 38 3F 00 00 4A 1E 00 00 93 0C 00 00  // [v..8?..J.......
    0370: 3B 04 00 00 F9 00 00 00 D6 FF 0F 00 17 02 00 00  // ;...............
    0380: 5B 02 00 00 83 03 00 00 07 05 00 00 E2 06 00 00  // [...............
    0390: 16 09 00 00 A1 0B 00 00 7B 0E 00 00 9A 11 00 00  // ........{.......
    03A0: EC 14 00 00 59 18 00 00 C7 1B 00 00 15 1F 00 00  // ....Y...........
    03B0: 1D 22 00 00 BA 24 00 00 C3 26 00 00 10 28 00 00  // ."...$...&...(..
    03C0: 7E 28 00 00 EC 27 00 00 40 26 00 00 6C 23 00 00  // ~(...'..@&..l#..
    03D0: 6A 1F 00 00 40 1A 00 00 02 14 00 00 D3 0C 00 00  // j...@...........
    03E0: E2 04 00 00 6B FC 0F 00 B7 F3 0F 00 17 EB 0F 00  // ....k...........
    03F0: E2 E2 0F 00 73 DB 0F 00 26 D5 0F 00 4F D0 0F 00  // ....s...&...O...
    0400: 3A CD 0F 00 27 CC 0F 00 42 CD 0F 00 A5 D0 0F 00  // :...'...B.......
    0410: 4F D6 0F 00 28 DE 0F 00 FD E7 0F 00 82 F3 0F 00  // O...(...........
    0420: 4F 00 00 00 EB 0D 00 00 C8 1B 00 00 4E 29 00 00  // O...........N)..
    0430: DD 35 00 00 D8 40 00 00 A7 49 00 00 C4 4F 00 00  // .5...@...I...O..
    0440: BE 52 00 00 42 52 00 00 1E 4E 00 00 4A 46 00 00  // .R..BR...N..JF..
    0450: E5 3A 00 00 3B 2C 00 00 C1 1A 00 00 14 07 00 00  // .:..;,..........
    0460: F4 F1 0F 00 3B DC 0F 00 D6 C6 0F 00 C0 B2 0F 00  // ....;...........
    0470: EC A0 0F 00 47 92 0F 00 A1 87 0F 00 AD 81 0F 00  // ....G...........
    0480: EC 80 0F 00 B1 85 0F 00 0D 90 0F 00 DA 9F 0F 00  // ................
    0490: AA B4 0F 00 DA CD 0F 00 84 EA 0F 00 96 09 00 00  // ................
    04A0: D1 29 00 00 E0 49 00 00 55 68 00 00 CF 83 00 00  // .)...I..Uh......
    04B0: F4 9A 00 00 91 AC 00 00 9E B7 00 00 55 BB 00 00  // ............U...
    04C0: 32 B7 00 00 0B AB 00 00 03 97 00 00 9F 7B 00 00  // 2............{..
    04D0: B2 59 00 00 67 32 00 00 29 07 00 00 A4 D9 0F 00  // .Y..g2..).......
    04E0: A8 AB 0F 00 24 7F 0F 00 02 56 0F 00 23 32 0F 00  // ....$....V..#2..
    04F0: 3C 15 0F 00 CF 00 0F 00 0A F6 0E 00 C9 F5 0E 00  // <...............
    0500: 79 00 0F 00 1E 16 0F 00 45 36 0F 00 0D 60 0F 00  // y.......E6...`..
    0510: 25 92 0F 00 DE CA 0F 00 33 08 00 00 E1 47 00 00  // %.......3....G..
    0520: 77 87 00 00 73 C4 00 00 56 FC 00 00 C0 2C 01 00  // w...s...V....,..
    0530: 88 53 01 00 D4 6E 01 00 2B 7D 01 00 87 7D 01 00  // .S...n..+}...}..
    0540: 60 6F 01 00 B9 52 01 00 1A 28 01 00 95 F0 00 00  // `o...R...(......
    0550: BD AD 00 00 96 61 00 00 87 0E 00 00 47 B7 0F 00  // .....a......G...
    0560: C0 5E 0F 00 FC 07 0F 00 05 B6 0E 00 CB 6B 0E 00  // .^...........k..
    0570: 0F 2C 0E 00 44 F9 0D 00 7E D5 0D 00 5F C2 0D 00  // .,..D...~..._...
    0580: 0A C1 0D 00 1A D2 0D 00 9C F5 0D 00 14 2B 0E 00  // .............+..
    0590: 7C 71 0E 00 55 C7 0E 00 AD 2A 0F 00 3A 99 0F 00  // |q..U....*..:...
    05A0: 64 10 00 00 63 8D 00 00 4F 0D 01 00 3F 8D 01 00  // d...c...O...?...
    05B0: 57 0A 02 00 E5 81 02 00 6E F1 02 00 C1 56 03 00  // W.......n....V..
    05C0: 05 B0 03 00 C3 FB 03 00 EA 38 04 00 D2 66 04 00  // .........8...f..
    05D0: 3F 85 04 00 57 94 04 00 A1 94 04 00 F4 86 04 00  // ?...W...........
    05E0: 73 6C 04 00 7A 46 04 00 91 16 04 00 61 DE 03 00  // sl..zF......a...
    05F0: A1 9F 03 00 0B 5C 03 00 4E 15 03 00 02 CD 02 00  // .....\..N.......
    0600: A2 84 02 00 80 3D 02 00 C4 F8 01 00 63 B7 01 00  // .....=......c...
    0610: 21 7A 01 00 92 41 01 00 16 0E 01 00 E3 DF 00 00  // !z...A..........
    0620: 06 B7 00 00 68 93 00 00 D3 74 00 00 F9 5A 00 00  // ....h....t...Z..
    0630: 7C 45 00 00 EF 33 00 00 DF 25 00 00 D6 1A 00 00  // |E...3...%......
    0640: 62 12 00 00 13 0C 00 00 83 07 00 00 57 04 00 00  // b...........W...
    0650: D8 02 00 00 01 C0 00 00 03 09 00 04 00 00 00 00  // ................
    0660: 03 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0670: 00 00 00 00 91 00 00 00 A0 02 04 00 00 00 00 00  // ................
    0680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0690: 00 00 00 00 11 00 00 00 B6 03 0E 00 00 00 00 00  // ................
    06A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06B0: 00 00 00 00 08 00 00 00 AE FF 0F 00 12 FF 0F 00  // ................
    06C0: FB FD 0F 00 61 FC 0F 00 5B FA 0F 00 2C F8 0F 00  // ....a...[...,...
    06D0: 43 F6 0F 00 23 F5 0F 00 47 F5 0F 00 F8 F6 0F 00  // C...#...G.......
    06E0: 29 FA 0F 00 68 FE 0F 00 E2 02 00 00 8F 06 00 00  // )...h...........
    06F0: 75 08 00 00 EF 07 00 00 F3 04 00 00 28 00 00 00  // u...........(...
    0700: D3 FA 0F 00 8A F6 0F 00 C1 F4 0F 00 51 F6 0F 00  // ............Q...
    0710: 22 FB 0F 00 11 02 00 00 29 09 00 00 2C 0E 00 00  // ".......)...,...
    0720: 3E 0F 00 00 8E 0B 00 00 BB 03 00 00 CB F9 0F 00  // >...............
    0730: B0 F0 0F 00 71 EB 0F 00 2E EC 0F 00 56 F3 0F 00  // ....q.......V...
    0740: 53 FF 0F 00 CE 0C 00 00 9C 17 00 00 F8 1B 00 00  // S...............
    0750: D1 17 00 00 9D 0B 00 00 79 FA 0F 00 6D E9 0F 00  // ........y...m...
    0760: F8 DD 0F 00 53 DC 0F 00 F6 E5 0F 00 D5 F8 0F 00  // ....S...........
    0770: BB 0F 00 00 A7 23 00 00 EF 2D 00 00 6A 2A 00 00  // .....#...-..j*..
    0780: 05 19 00 00 24 FE 0F 00 99 E1 0F 00 68 CC 0F 00  // ....$.......h...
    0790: F7 C5 0F 00 8A D1 0F 00 E1 EC 0F 00 79 10 00 00  // ............y...
    07A0: 99 31 00 00 78 45 00 00 BC 44 00 00 15 2E 00 00  // .1..xE...D......
    07B0: 1B 07 00 00 08 DB 0F 00 84 B7 0F 00 77 A8 0F 00  // ............w...
    07C0: 1A B4 0F 00 97 D8 0F 00 10 0C 00 00 3B 3F 00 00  // ............;?..
    07D0: E1 61 00 00 F6 67 00 00 B0 4D 00 00 40 19 00 00  // .a...g...M..@...
    07E0: 81 D9 0F 00 CA A1 0F 00 1F 84 0F 00 6B 8B 0F 00  // ............k...
    07F0: A8 B7 0F 00 3A FD 0F 00 E6 47 00 00 AC 80 00 00  // ....:....G......
    0800: CF 94 00 00 EB 7B 00 00 25 3B 00 00 4A E4 0F 00  // .....{..%;..J...
    0810: FE 90 0F 00 2E 5B 0F 00 12 55 0F 00 2C 83 0F 00  // .....[...U..,...
    0820: 2D DA 0F 00 A3 41 00 00 D1 9A 00 00 C2 C9 00 00  // -....A..........
    0830: F2 BD 00 00 E2 77 00 00 BC 09 00 00 AB 92 0F 00  // .....w..........
    0840: 0F 36 0F 00 0C 11 0F 00 8C 31 0F 00 65 91 0F 00  // .6.......1..e...
    0850: 50 17 00 00 91 9D 00 00 90 FC 00 00 6E 16 01 00  // P...........n...
    0860: 25 E0 00 00 89 65 00 00 C7 C6 0F 00 EA 2F 0F 00  // %....e......./..
    0870: AC CC 0E 00 FA BB 0E 00 A9 06 0F 00 25 9C 0F 00  // ............%...
    0880: 2C 56 00 00 A9 02 01 00 27 71 01 00 2C 80 01 00  // ,V......'q..,...
    0890: DD 26 01 00 2B 78 00 00 A6 9E 0F 00 F0 D1 0E 00  // .&..+x..........
    08A0: 85 48 0E 00 8B 29 0E 00 65 82 0E 00 A4 42 0F 00  // .H...)..e....B..
    08B0: 71 3F 00 00 8C 3D 01 00 57 FF 01 00 7A 53 02 00  // q?...=..W...zS..
    08C0: 9E 20 02 00 73 6B 01 00 CE 55 00 00 49 17 0F 00  // . ..sk...U..I...
    08D0: 42 F1 0D 00 2B 21 0D 00 3E D4 0C 00 22 1F 0D 00  // B...+!..>..."...
    08E0: 0F FB 0D 00 8E 48 0F 00 D5 D6 00 00 C5 6D 02 00  // .....H.......m..
    08F0: 44 D8 03 00 D5 EC 04 00 01 93 05 00 ED C4 05 00  // D...............
    0900: 6F 8D 05 00 85 03 05 00 8D 44 04 00 82 6E 03 00  // o........D...n..
    0910: 5D 9B 02 00 2D DE 01 00 11 42 01 00 C9 CA 00 00  // ]...-....B......
    0920: 5B 76 00 00 38 3F 00 00 4A 1E 00 00 93 0C 00 00  // [v..8?..J.......
    0930: 3B 04 00 00 F9 00 00 00 D6 FF 0F 00 17 02 00 00  // ;...............
    0940: 5B 02 00 00 83 03 00 00 07 05 00 00 E2 06 00 00  // [...............
    0950: 16 09 00 00 A1 0B 00 00 7B 0E 00 00 9A 11 00 00  // ........{.......
    0960: EC 14 00 00 59 18 00 00 C7 1B 00 00 15 1F 00 00  // ....Y...........
    0970: 1D 22 00 00 BA 24 00 00 C3 26 00 00 10 28 00 00  // ."...$...&...(..
    0980: 7E 28 00 00 EC 27 00 00 40 26 00 00 6C 23 00 00  // ~(...'..@&..l#..
    0990: 6A 1F 00 00 40 1A 00 00 02 14 00 00 D3 0C 00 00  // j...@...........
    09A0: E2 04 00 00 6B FC 0F 00 B7 F3 0F 00 17 EB 0F 00  // ....k...........
    09B0: E2 E2 0F 00 73 DB 0F 00 26 D5 0F 00 4F D0 0F 00  // ....s...&...O...
    09C0: 3A CD 0F 00 27 CC 0F 00 42 CD 0F 00 A5 D0 0F 00  // :...'...B.......
    09D0: 4F D6 0F 00 28 DE 0F 00 FD E7 0F 00 82 F3 0F 00  // O...(...........
    09E0: 4F 00 00 00 EB 0D 00 00 C8 1B 00 00 4E 29 00 00  // O...........N)..
    09F0: DD 35 00 00 D8 40 00 00 A7 49 00 00 C4 4F 00 00  // .5...@...I...O..
    0A00: BE 52 00 00 42 52 00 00 1E 4E 00 00 4A 46 00 00  // .R..BR...N..JF..
    0A10: E5 3A 00 00 3B 2C 00 00 C1 1A 00 00 14 07 00 00  // .:..;,..........
    0A20: F4 F1 0F 00 3B DC 0F 00 D6 C6 0F 00 C0 B2 0F 00  // ....;...........
    0A30: EC A0 0F 00 47 92 0F 00 A1 87 0F 00 AD 81 0F 00  // ....G...........
    0A40: EC 80 0F 00 B1 85 0F 00 0D 90 0F 00 DA 9F 0F 00  // ................
    0A50: AA B4 0F 00 DA CD 0F 00 84 EA 0F 00 96 09 00 00  // ................
    0A60: D1 29 00 00 E0 49 00 00 55 68 00 00 CF 83 00 00  // .)...I..Uh......
    0A70: F4 9A 00 00 91 AC 00 00 9E B7 00 00 55 BB 00 00  // ............U...
    0A80: 32 B7 00 00 0B AB 00 00 03 97 00 00 9F 7B 00 00  // 2............{..
    0A90: B2 59 00 00 67 32 00 00 29 07 00 00 A4 D9 0F 00  // .Y..g2..).......
    0AA0: A8 AB 0F 00 24 7F 0F 00 02 56 0F 00 23 32 0F 00  // ....$....V..#2..
    0AB0: 3C 15 0F 00 CF 00 0F 00 0A F6 0E 00 C9 F5 0E 00  // <...............
    0AC0: 79 00 0F 00 1E 16 0F 00 45 36 0F 00 0D 60 0F 00  // y.......E6...`..
    0AD0: 25 92 0F 00 DE CA 0F 00 33 08 00 00 E1 47 00 00  // %.......3....G..
    0AE0: 77 87 00 00 73 C4 00 00 56 FC 00 00 C0 2C 01 00  // w...s...V....,..
    0AF0: 88 53 01 00 D4 6E 01 00 2B 7D 01 00 87 7D 01 00  // .S...n..+}...}..
    0B00: 60 6F 01 00 B9 52 01 00 1A 28 01 00 95 F0 00 00  // `o...R...(......
    0B10: BD AD 00 00 96 61 00 00 87 0E 00 00 47 B7 0F 00  // .....a......G...
    0B20: C0 5E 0F 00 FC 07 0F 00 05 B6 0E 00 CB 6B 0E 00  // .^...........k..
    0B30: 0F 2C 0E 00 44 F9 0D 00 7E D5 0D 00 5F C2 0D 00  // .,..D...~..._...
    0B40: 0A C1 0D 00 1A D2 0D 00 9C F5 0D 00 14 2B 0E 00  // .............+..
    0B50: 7C 71 0E 00 55 C7 0E 00 AD 2A 0F 00 3A 99 0F 00  // |q..U....*..:...
    0B60: 64 10 00 00 63 8D 00 00 4F 0D 01 00 3F 8D 01 00  // d...c...O...?...
    0B70: 57 0A 02 00 E5 81 02 00 6E F1 02 00 C1 56 03 00  // W.......n....V..
    0B80: 05 B0 03 00 C3 FB 03 00 EA 38 04 00 D2 66 04 00  // .........8...f..
    0B90: 3F 85 04 00 57 94 04 00 A1 94 04 00 F4 86 04 00  // ?...W...........
    0BA0: 73 6C 04 00 7A 46 04 00 91 16 04 00 61 DE 03 00  // sl..zF......a...
    0BB0: A1 9F 03 00 0B 5C 03 00 4E 15 03 00 02 CD 02 00  // .....\..N.......
    0BC0: A2 84 02 00 80 3D 02 00 C4 F8 01 00 63 B7 01 00  // .....=......c...
    0BD0: 21 7A 01 00 92 41 01 00 16 0E 01 00 E3 DF 00 00  // !z...A..........
    0BE0: 06 B7 00 00 68 93 00 00 D3 74 00 00 F9 5A 00 00  // ....h....t...Z..
    0BF0: 7C 45 00 00 EF 33 00 00 DF 25 00 00 D6 1A 00 00  // |E...3...%......
    0C00: 62 12 00 00 13 0C 00 00 83 07 00 00 57 04 00 00  // b...........W...
    0C10: D8 02 00 00 FE FF 04 00 80 BB 00 00 00 DC 05 00  // ................
    0C20: 08 00 20 00 16 00 20 00 33 00 00 00 01 00 00 00  // .. ... .3.......
    0C30: 00 00 10 00 80 00 00 AA 00 38 9B 71 A8 0B 00 00  // .........8.q....
    0C40: 01 00 00 00 10 32 FF FF 10 32 FF FF FF FF FF FF  // .....2...2......
    0C50: FF FF FF FF 03 00 00 00 03 00 00 00 03 00 3A 00  // ..............:.
    0C60: 03 00 3A 00 03 00 00 00 01 C0 00 00 03 09 00 04  // ..:.............
    0C70: 00 00 00 00 03 08 00 00 00 00 00 00 00 00 00 00  // ................
    0C80: 00 00 00 00 00 00 00 00 91 00 00 00 A0 02 04 00  // ................
    0C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CA0: 00 00 00 00 00 00 00 00 11 00 00 00 B6 03 0E 00  // ................
    0CB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CC0: 00 00 00 00 00 00 00 00 08 00 00 00 AE FF 0F 00  // ................
    0CD0: 12 FF 0F 00 FB FD 0F 00 61 FC 0F 00 5B FA 0F 00  // ........a...[...
    0CE0: 2C F8 0F 00 43 F6 0F 00 23 F5 0F 00 47 F5 0F 00  // ,...C...#...G...
    0CF0: F8 F6 0F 00 29 FA 0F 00 68 FE 0F 00 E2 02 00 00  // ....)...h.......
    0D00: 8F 06 00 00 75 08 00 00 EF 07 00 00 F3 04 00 00  // ....u...........
    0D10: 28 00 00 00 D3 FA 0F 00 8A F6 0F 00 C1 F4 0F 00  // (...............
    0D20: 51 F6 0F 00 22 FB 0F 00 11 02 00 00 29 09 00 00  // Q...".......)...
    0D30: 2C 0E 00 00 3E 0F 00 00 8E 0B 00 00 BB 03 00 00  // ,...>...........
    0D40: CB F9 0F 00 B0 F0 0F 00 71 EB 0F 00 2E EC 0F 00  // ........q.......
    0D50: 56 F3 0F 00 53 FF 0F 00 CE 0C 00 00 9C 17 00 00  // V...S...........
    0D60: F8 1B 00 00 D1 17 00 00 9D 0B 00 00 79 FA 0F 00  // ............y...
    0D70: 6D E9 0F 00 F8 DD 0F 00 53 DC 0F 00 F6 E5 0F 00  // m.......S.......
    0D80: D5 F8 0F 00 BB 0F 00 00 A7 23 00 00 EF 2D 00 00  // .........#...-..
    0D90: 6A 2A 00 00 05 19 00 00 24 FE 0F 00 99 E1 0F 00  // j*......$.......
    0DA0: 68 CC 0F 00 F7 C5 0F 00 8A D1 0F 00 E1 EC 0F 00  // h...............
    0DB0: 79 10 00 00 99 31 00 00 78 45 00 00 BC 44 00 00  // y....1..xE...D..
    0DC0: 15 2E 00 00 1B 07 00 00 08 DB 0F 00 84 B7 0F 00  // ................
    0DD0: 77 A8 0F 00 1A B4 0F 00 97 D8 0F 00 10 0C 00 00  // w...............
    0DE0: 3B 3F 00 00 E1 61 00 00 F6 67 00 00 B0 4D 00 00  // ;?...a...g...M..
    0DF0: 40 19 00 00 81 D9 0F 00 CA A1 0F 00 1F 84 0F 00  // @...............
    0E00: 6B 8B 0F 00 A8 B7 0F 00 3A FD 0F 00 E6 47 00 00  // k.......:....G..
    0E10: AC 80 00 00 CF 94 00 00 EB 7B 00 00 25 3B 00 00  // .........{..%;..
    0E20: 4A E4 0F 00 FE 90 0F 00 2E 5B 0F 00 12 55 0F 00  // J........[...U..
    0E30: 2C 83 0F 00 2D DA 0F 00 A3 41 00 00 D1 9A 00 00  // ,...-....A......
    0E40: C2 C9 00 00 F2 BD 00 00 E2 77 00 00 BC 09 00 00  // .........w......
    0E50: AB 92 0F 00 0F 36 0F 00 0C 11 0F 00 8C 31 0F 00  // .....6.......1..
    0E60: 65 91 0F 00 50 17 00 00 91 9D 00 00 90 FC 00 00  // e...P...........
    0E70: 6E 16 01 00 25 E0 00 00 89 65 00 00 C7 C6 0F 00  // n...%....e......
    0E80: EA 2F 0F 00 AC CC 0E 00 FA BB 0E 00 A9 06 0F 00  // ./..............
    0E90: 25 9C 0F 00 2C 56 00 00 A9 02 01 00 27 71 01 00  // %...,V......'q..
    0EA0: 2C 80 01 00 DD 26 01 00 2B 78 00 00 A6 9E 0F 00  // ,....&..+x......
    0EB0: F0 D1 0E 00 85 48 0E 00 8B 29 0E 00 65 82 0E 00  // .....H...)..e...
    0EC0: A4 42 0F 00 71 3F 00 00 8C 3D 01 00 57 FF 01 00  // .B..q?...=..W...
    0ED0: 7A 53 02 00 9E 20 02 00 73 6B 01 00 CE 55 00 00  // zS... ..sk...U..
    0EE0: 49 17 0F 00 42 F1 0D 00 2B 21 0D 00 3E D4 0C 00  // I...B...+!..>...
    0EF0: 22 1F 0D 00 0F FB 0D 00 8E 48 0F 00 D5 D6 00 00  // "........H......
    0F00: C5 6D 02 00 44 D8 03 00 D5 EC 04 00 01 93 05 00  // .m..D...........
    0F10: ED C4 05 00 6F 8D 05 00 85 03 05 00 8D 44 04 00  // ....o........D..
    0F20: 82 6E 03 00 5D 9B 02 00 2D DE 01 00 11 42 01 00  // .n..]...-....B..
    0F30: C9 CA 00 00 5B 76 00 00 38 3F 00 00 4A 1E 00 00  // ....[v..8?..J...
    0F40: 93 0C 00 00 3B 04 00 00 F9 00 00 00 D6 FF 0F 00  // ....;...........
    0F50: 17 02 00 00 5B 02 00 00 83 03 00 00 07 05 00 00  // ....[...........
    0F60: E2 06 00 00 16 09 00 00 A1 0B 00 00 7B 0E 00 00  // ............{...
    0F70: 9A 11 00 00 EC 14 00 00 59 18 00 00 C7 1B 00 00  // ........Y.......
    0F80: 15 1F 00 00 1D 22 00 00 BA 24 00 00 C3 26 00 00  // ....."...$...&..
    0F90: 10 28 00 00 7E 28 00 00 EC 27 00 00 40 26 00 00  // .(..~(...'..@&..
    0FA0: 6C 23 00 00 6A 1F 00 00 40 1A 00 00 02 14 00 00  // l#..j...@.......
    0FB0: D3 0C 00 00 E2 04 00 00 6B FC 0F 00 B7 F3 0F 00  // ........k.......
    0FC0: 17 EB 0F 00 E2 E2 0F 00 73 DB 0F 00 26 D5 0F 00  // ........s...&...
    0FD0: 4F D0 0F 00 3A CD 0F 00 27 CC 0F 00 42 CD 0F 00  // O...:...'...B...
    0FE0: A5 D0 0F 00 4F D6 0F 00 28 DE 0F 00 FD E7 0F 00  // ....O...(.......
    0FF0: 82 F3 0F 00 4F 00 00 00 EB 0D 00 00 C8 1B 00 00  // ....O...........
    1000: 4E 29 00 00 DD 35 00 00 D8 40 00 00 A7 49 00 00  // N)...5...@...I..
    1010: C4 4F 00 00 BE 52 00 00 42 52 00 00 1E 4E 00 00  // .O...R..BR...N..
    1020: 4A 46 00 00 E5 3A 00 00 3B 2C 00 00 C1 1A 00 00  // JF...:..;,......
    1030: 14 07 00 00 F4 F1 0F 00 3B DC 0F 00 D6 C6 0F 00  // ........;.......
    1040: C0 B2 0F 00 EC A0 0F 00 47 92 0F 00 A1 87 0F 00  // ........G.......
    1050: AD 81 0F 00 EC 80 0F 00 B1 85 0F 00 0D 90 0F 00  // ................
    1060: DA 9F 0F 00 AA B4 0F 00 DA CD 0F 00 84 EA 0F 00  // ................
    1070: 96 09 00 00 D1 29 00 00 E0 49 00 00 55 68 00 00  // .....)...I..Uh..
    1080: CF 83 00 00 F4 9A 00 00 91 AC 00 00 9E B7 00 00  // ................
    1090: 55 BB 00 00 32 B7 00 00 0B AB 00 00 03 97 00 00  // U...2...........
    10A0: 9F 7B 00 00 B2 59 00 00 67 32 00 00 29 07 00 00  // .{...Y..g2..)...
    10B0: A4 D9 0F 00 A8 AB 0F 00 24 7F 0F 00 02 56 0F 00  // ........$....V..
    10C0: 23 32 0F 00 3C 15 0F 00 CF 00 0F 00 0A F6 0E 00  // #2..<...........
    10D0: C9 F5 0E 00 79 00 0F 00 1E 16 0F 00 45 36 0F 00  // ....y.......E6..
    10E0: 0D 60 0F 00 25 92 0F 00 DE CA 0F 00 33 08 00 00  // .`..%.......3...
    10F0: E1 47 00 00 77 87 00 00 73 C4 00 00 56 FC 00 00  // .G..w...s...V...
    1100: C0 2C 01 00 88 53 01 00 D4 6E 01 00 2B 7D 01 00  // .,...S...n..+}..
    1110: 87 7D 01 00 60 6F 01 00 B9 52 01 00 1A 28 01 00  // .}..`o...R...(..
    1120: 95 F0 00 00 BD AD 00 00 96 61 00 00 87 0E 00 00  // .........a......
    1130: 47 B7 0F 00 C0 5E 0F 00 FC 07 0F 00 05 B6 0E 00  // G....^..........
    1140: CB 6B 0E 00 0F 2C 0E 00 44 F9 0D 00 7E D5 0D 00  // .k...,..D...~...
    1150: 5F C2 0D 00 0A C1 0D 00 1A D2 0D 00 9C F5 0D 00  // _...............
    1160: 14 2B 0E 00 7C 71 0E 00 55 C7 0E 00 AD 2A 0F 00  // .+..|q..U....*..
    1170: 3A 99 0F 00 64 10 00 00 63 8D 00 00 4F 0D 01 00  // :...d...c...O...
    1180: 3F 8D 01 00 57 0A 02 00 E5 81 02 00 6E F1 02 00  // ?...W.......n...
    1190: C1 56 03 00 05 B0 03 00 C3 FB 03 00 EA 38 04 00  // .V...........8..
    11A0: D2 66 04 00 3F 85 04 00 57 94 04 00 A1 94 04 00  // .f..?...W.......
    11B0: F4 86 04 00 73 6C 04 00 7A 46 04 00 91 16 04 00  // ....sl..zF......
    11C0: 61 DE 03 00 A1 9F 03 00 0B 5C 03 00 4E 15 03 00  // a........\..N...
    11D0: 02 CD 02 00 A2 84 02 00 80 3D 02 00 C4 F8 01 00  // .........=......
    11E0: 63 B7 01 00 21 7A 01 00 92 41 01 00 16 0E 01 00  // c...!z...A......
    11F0: E3 DF 00 00 06 B7 00 00 68 93 00 00 D3 74 00 00  // ........h....t..
    1200: F9 5A 00 00 7C 45 00 00 EF 33 00 00 DF 25 00 00  // .Z..|E...3...%..
    1210: D6 1A 00 00 62 12 00 00 13 0C 00 00 83 07 00 00  // ....b...........
    1220: 57 04 00 00 D8 02 00 00 01 C0 00 00 03 09 00 04  // W...............
    1230: 00 00 00 00 03 08 00 00 00 00 00 00 00 00 00 00  // ................
    1240: 00 00 00 00 00 00 00 00 91 00 00 00 A0 02 04 00  // ................
    1250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1260: 00 00 00 00 00 00 00 00 11 00 00 00 B6 03 0E 00  // ................
    1270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1280: 00 00 00 00 00 00 00 00 08 00 00 00 AE FF 0F 00  // ................
    1290: 12 FF 0F 00 FB FD 0F 00 61 FC 0F 00 5B FA 0F 00  // ........a...[...
    12A0: 2C F8 0F 00 43 F6 0F 00 23 F5 0F 00 47 F5 0F 00  // ,...C...#...G...
    12B0: F8 F6 0F 00 29 FA 0F 00 68 FE 0F 00 E2 02 00 00  // ....)...h.......
    12C0: 8F 06 00 00 75 08 00 00 EF 07 00 00 F3 04 00 00  // ....u...........
    12D0: 28 00 00 00 D3 FA 0F 00 8A F6 0F 00 C1 F4 0F 00  // (...............
    12E0: 51 F6 0F 00 22 FB 0F 00 11 02 00 00 29 09 00 00  // Q...".......)...
    12F0: 2C 0E 00 00 3E 0F 00 00 8E 0B 00 00 BB 03 00 00  // ,...>...........
    1300: CB F9 0F 00 B0 F0 0F 00 71 EB 0F 00 2E EC 0F 00  // ........q.......
    1310: 56 F3 0F 00 53 FF 0F 00 CE 0C 00 00 9C 17 00 00  // V...S...........
    1320: F8 1B 00 00 D1 17 00 00 9D 0B 00 00 79 FA 0F 00  // ............y...
    1330: 6D E9 0F 00 F8 DD 0F 00 53 DC 0F 00 F6 E5 0F 00  // m.......S.......
    1340: D5 F8 0F 00 BB 0F 00 00 A7 23 00 00 EF 2D 00 00  // .........#...-..
    1350: 6A 2A 00 00 05 19 00 00 24 FE 0F 00 99 E1 0F 00  // j*......$.......
    1360: 68 CC 0F 00 F7 C5 0F 00 8A D1 0F 00 E1 EC 0F 00  // h...............
    1370: 79 10 00 00 99 31 00 00 78 45 00 00 BC 44 00 00  // y....1..xE...D..
    1380: 15 2E 00 00 1B 07 00 00 08 DB 0F 00 84 B7 0F 00  // ................
    1390: 77 A8 0F 00 1A B4 0F 00 97 D8 0F 00 10 0C 00 00  // w...............
    13A0: 3B 3F 00 00 E1 61 00 00 F6 67 00 00 B0 4D 00 00  // ;?...a...g...M..
    13B0: 40 19 00 00 81 D9 0F 00 CA A1 0F 00 1F 84 0F 00  // @...............
    13C0: 6B 8B 0F 00 A8 B7 0F 00 3A FD 0F 00 E6 47 00 00  // k.......:....G..
    13D0: AC 80 00 00 CF 94 00 00 EB 7B 00 00 25 3B 00 00  // .........{..%;..
    13E0: 4A E4 0F 00 FE 90 0F 00 2E 5B 0F 00 12 55 0F 00  // J........[...U..
    13F0: 2C 83 0F 00 2D DA 0F 00 A3 41 00 00 D1 9A 00 00  // ,...-....A......
    1400: C2 C9 00 00 F2 BD 00 00 E2 77 00 00 BC 09 00 00  // .........w......
    1410: AB 92 0F 00 0F 36 0F 00 0C 11 0F 00 8C 31 0F 00  // .....6.......1..
    1420: 65 91 0F 00 50 17 00 00 91 9D 00 00 90 FC 00 00  // e...P...........
    1430: 6E 16 01 00 25 E0 00 00 89 65 00 00 C7 C6 0F 00  // n...%....e......
    1440: EA 2F 0F 00 AC CC 0E 00 FA BB 0E 00 A9 06 0F 00  // ./..............
    1450: 25 9C 0F 00 2C 56 00 00 A9 02 01 00 27 71 01 00  // %...,V......'q..
    1460: 2C 80 01 00 DD 26 01 00 2B 78 00 00 A6 9E 0F 00  // ,....&..+x......
    1470: F0 D1 0E 00 85 48 0E 00 8B 29 0E 00 65 82 0E 00  // .....H...)..e...
    1480: A4 42 0F 00 71 3F 00 00 8C 3D 01 00 57 FF 01 00  // .B..q?...=..W...
    1490: 7A 53 02 00 9E 20 02 00 73 6B 01 00 CE 55 00 00  // zS... ..sk...U..
    14A0: 49 17 0F 00 42 F1 0D 00 2B 21 0D 00 3E D4 0C 00  // I...B...+!..>...
    14B0: 22 1F 0D 00 0F FB 0D 00 8E 48 0F 00 D5 D6 00 00  // "........H......
    14C0: C5 6D 02 00 44 D8 03 00 D5 EC 04 00 01 93 05 00  // .m..D...........
    14D0: ED C4 05 00 6F 8D 05 00 85 03 05 00 8D 44 04 00  // ....o........D..
    14E0: 82 6E 03 00 5D 9B 02 00 2D DE 01 00 11 42 01 00  // .n..]...-....B..
    14F0: C9 CA 00 00 5B 76 00 00 38 3F 00 00 4A 1E 00 00  // ....[v..8?..J...
    1500: 93 0C 00 00 3B 04 00 00 F9 00 00 00 D6 FF 0F 00  // ....;...........
    1510: 17 02 00 00 5B 02 00 00 83 03 00 00 07 05 00 00  // ....[...........
    1520: E2 06 00 00 16 09 00 00 A1 0B 00 00 7B 0E 00 00  // ............{...
    1530: 9A 11 00 00 EC 14 00 00 59 18 00 00 C7 1B 00 00  // ........Y.......
    1540: 15 1F 00 00 1D 22 00 00 BA 24 00 00 C3 26 00 00  // ....."...$...&..
    1550: 10 28 00 00 7E 28 00 00 EC 27 00 00 40 26 00 00  // .(..~(...'..@&..
    1560: 6C 23 00 00 6A 1F 00 00 40 1A 00 00 02 14 00 00  // l#..j...@.......
    1570: D3 0C 00 00 E2 04 00 00 6B FC 0F 00 B7 F3 0F 00  // ........k.......
    1580: 17 EB 0F 00 E2 E2 0F 00 73 DB 0F 00 26 D5 0F 00  // ........s...&...
    1590: 4F D0 0F 00 3A CD 0F 00 27 CC 0F 00 42 CD 0F 00  // O...:...'...B...
    15A0: A5 D0 0F 00 4F D6 0F 00 28 DE 0F 00 FD E7 0F 00  // ....O...(.......
    15B0: 82 F3 0F 00 4F 00 00 00 EB 0D 00 00 C8 1B 00 00  // ....O...........
    15C0: 4E 29 00 00 DD 35 00 00 D8 40 00 00 A7 49 00 00  // N)...5...@...I..
    15D0: C4 4F 00 00 BE 52 00 00 42 52 00 00 1E 4E 00 00  // .O...R..BR...N..
    15E0: 4A 46 00 00 E5 3A 00 00 3B 2C 00 00 C1 1A 00 00  // JF...:..;,......
    15F0: 14 07 00 00 F4 F1 0F 00 3B DC 0F 00 D6 C6 0F 00  // ........;.......
    1600: C0 B2 0F 00 EC A0 0F 00 47 92 0F 00 A1 87 0F 00  // ........G.......
    1610: AD 81 0F 00 EC 80 0F 00 B1 85 0F 00 0D 90 0F 00  // ................
    1620: DA 9F 0F 00 AA B4 0F 00 DA CD 0F 00 84 EA 0F 00  // ................
    1630: 96 09 00 00 D1 29 00 00 E0 49 00 00 55 68 00 00  // .....)...I..Uh..
    1640: CF 83 00 00 F4 9A 00 00 91 AC 00 00 9E B7 00 00  // ................
    1650: 55 BB 00 00 32 B7 00 00 0B AB 00 00 03 97 00 00  // U...2...........
    1660: 9F 7B 00 00 B2 59 00 00 67 32 00 00 29 07 00 00  // .{...Y..g2..)...
    1670: A4 D9 0F 00 A8 AB 0F 00 24 7F 0F 00 02 56 0F 00  // ........$....V..
    1680: 23 32 0F 00 3C 15 0F 00 CF 00 0F 00 0A F6 0E 00  // #2..<...........
    1690: C9 F5 0E 00 79 00 0F 00 1E 16 0F 00 45 36 0F 00  // ....y.......E6..
    16A0: 0D 60 0F 00 25 92 0F 00 DE CA 0F 00 33 08 00 00  // .`..%.......3...
    16B0: E1 47 00 00 77 87 00 00 73 C4 00 00 56 FC 00 00  // .G..w...s...V...
    16C0: C0 2C 01 00 88 53 01 00 D4 6E 01 00 2B 7D 01 00  // .,...S...n..+}..
    16D0: 87 7D 01 00 60 6F 01 00 B9 52 01 00 1A 28 01 00  // .}..`o...R...(..
    16E0: 95 F0 00 00 BD AD 00 00 96 61 00 00 87 0E 00 00  // .........a......
    16F0: 47 B7 0F 00 C0 5E 0F 00 FC 07 0F 00 05 B6 0E 00  // G....^..........
    1700: CB 6B 0E 00 0F 2C 0E 00 44 F9 0D 00 7E D5 0D 00  // .k...,..D...~...
    1710: 5F C2 0D 00 0A C1 0D 00 1A D2 0D 00 9C F5 0D 00  // _...............
    1720: 14 2B 0E 00 7C 71 0E 00 55 C7 0E 00 AD 2A 0F 00  // .+..|q..U....*..
    1730: 3A 99 0F 00 64 10 00 00 63 8D 00 00 4F 0D 01 00  // :...d...c...O...
    1740: 3F 8D 01 00 57 0A 02 00 E5 81 02 00 6E F1 02 00  // ?...W.......n...
    1750: C1 56 03 00 05 B0 03 00 C3 FB 03 00 EA 38 04 00  // .V...........8..
    1760: D2 66 04 00 3F 85 04 00 57 94 04 00 A1 94 04 00  // .f..?...W.......
    1770: F4 86 04 00 73 6C 04 00 7A 46 04 00 91 16 04 00  // ....sl..zF......
    1780: 61 DE 03 00 A1 9F 03 00 0B 5C 03 00 4E 15 03 00  // a........\..N...
    1790: 02 CD 02 00 A2 84 02 00 80 3D 02 00 C4 F8 01 00  // .........=......
    17A0: 63 B7 01 00 21 7A 01 00 92 41 01 00 16 0E 01 00  // c...!z...A......
    17B0: E3 DF 00 00 06 B7 00 00 68 93 00 00 D3 74 00 00  // ........h....t..
    17C0: F9 5A 00 00 7C 45 00 00 EF 33 00 00 DF 25 00 00  // .Z..|E...3...%..
    17D0: D6 1A 00 00 62 12 00 00 13 0C 00 00 83 07 00 00  // ....b...........
    17E0: 57 04 00 00 D8 02 00 00 00 04 00 00 00 DE AD BE  // W...............
    17F0: EF                                               // .


OEML
----
DefinitionBlock ("", "OEML", 3, "INTEL ", "CFL-ULT", 0x20170001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (P___, MethodObj)    // Warning: Unknown method, guessing 0 arguments

    Zero
    P ()
}



RTMA
----
[000h 0000 004h]                   Signature : "RTMA"    
[004h 0004 004h]                Table Length : 0000009E
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : E9
[00Ah 0010 006h]                      Oem ID : "HP"
[010h 0016 008h]                Oem Table ID : "_HBMART_"
[018h 0024 004h]                Oem Revision : 00001000
[01Ch 0028 004h]             Asl Compiler ID : "HP  "
[020h 0032 004h]       Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [RTMA]


Raw Table Data: Length 158 (0x9E)

    0000: 52 54 4D 41 9E 00 00 00 01 E9 48 50 00 00 00 00  // RTMA......HP....
    0010: 5F 48 42 4D 41 52 54 5F 00 10 00 00 48 50 20 20  // _HBMART_....HP  
    0020: 01 00 00 00 5F 52 54 41 43 50 49 5F 00 7A 00 00  // ...._RTACPI_.z..
    0030: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0040: 01 00 5F 52 54 55 45 30 30 5F 00 5C 00 00 02 00  // .._RTUE00_.\....
    0050: 0B DA 81 53 00 00 00 00 30 00 00 00 00 00 00 00  // ...S....0.......
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 00 00 01 00 5F 41 55 58 4D 41 43 5F  // ........_AUXMAC_
    0080: 00 26 00 00 00 00 00 00 00 00 01 00 00 00 00 00  // .&..............
    0090: 00 00 01 00 00 00 04 0E 3C 06 10 AC 00 00        // ........<.....


SLIC
----
[000h 0000 004h]                   Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004 004h]                Table Length : 00000176
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : EF
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "SLIC-BPC"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "HP  "
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 152h] Software Licensing Structure : 53 4C 49 43 76 01 00 00 01 EF 48 50 51 4F 45 4D /* SLICv.....HPQOEM */\
/* 034h 0052  16 */                            53 4C 49 43 2D 42 50 43 01 00 00 00 48 50 20 20 /* SLIC-BPC....HP   */\
/* 044h 0068  16 */                            01 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00 /* ................ */\
/* 054h 0084  16 */                            00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 /* .$..RSA1........ */\
/* 064h 0100  16 */                            5B AB 60 56 BC 58 1E E8 C1 D2 A1 5C E5 4F BB FD /* [.`V.X.....\.O.. */\
/* 074h 0116  16 */                            1D A9 8C 94 B4 AE 08 11 DC 13 59 D3 7F F6 3E 87 /* ..........Y...>. */\
/* 084h 0132  16 */                            31 B9 95 74 10 DA 3B A4 5B B5 19 82 7C 39 D7 0D /* 1..t..;.[...|9.. */\
/* 094h 0148  16 */                            7C 22 AC 1C 2A 84 E9 0A 88 6D FA B1 E2 D8 E8 21 /* |"..*....m.....! */\
/* 0A4h 0164  16 */                            96 E1 2E 68 9A BF 44 45 3E 3C 8E 99 90 DE 37 38 /* ...h..DE><....78 */\
/* 0B4h 0180  16 */                            57 0B 92 15 BC DE FF F2 07 7E B5 40 8C 51 3A C3 /* W........~.@.Q:. */\
/* 0C4h 0196  16 */                            02 48 F6 13 12 72 FB 42 78 E6 47 88 54 C7 B0 F0 /* .H...r.Bx.G.T... */\
/* 0D4h 0212  16 */                            93 9E FB 04 B7 B8 B8 90 DE DB ED 32 E1 FB 54 A6 /* ...........2..T. */\
/* 0E4h 0228  16 */                            01 00 00 00 B6 00 00 00 00 00 02 00 48 50 51 4F /* ............HPQO */\
/* 0F4h 0244  16 */                            45 4D 53 4C 49 43 2D 42 50 43 57 49 4E 44 4F 57 /* EMSLIC-BPCWINDOW */\
/* 104h 0260  16 */                            53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00 /* S .............. */\
/* 114h 0276  16 */                            00 00 00 00 00 00 33 06 D7 20 8A 0A 63 95 08 94 /* ......3.. ..c... */\
/* 124h 0292  16 */                            A9 60 30 37 CE 9F E8 B9 7B 07 DD CF 72 B3 0B E4 /* .`07....{...r... */\
/* 134h 0308  16 */                            0C 88 79 3C E8 46 01 E8 8B E0 60 F3 63 18 DE 7B /* ..y<.F....`.c..{ */\
/* 144h 0324  16 */                            5C BB A9 53 FE B1 C1 D4 82 67 5B 6C 13 45 9E 66 /* \..S.....g[l.E.f */\
/* 154h 0340  16 */                            49 23 CC 33 09 92 76 FA 31 70 35 F1 57 F8 BA A9 /* I#.3..v.1p5.W... */\
/* 164h 0356  16 */                            56 6F 3F 41 84 A5 3A E9 CD 6C 67 43 9B 70 91 7F /* Vo?A..:..lgC.p.. */\
/* 174h 0372   2 */                            B4 06                                           /* .. */\

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 EF 48 50 51 4F 45 4D  // SLICv.....HPQOEM
    0010: 53 4C 49 43 2D 42 50 43 01 00 00 00 48 50 20 20  // SLIC-BPC....HP  
    0020: 01 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 5B AB 60 56 BC 58 1E E8 C1 D2 A1 5C E5 4F BB FD  // [.`V.X.....\.O..
    0050: 1D A9 8C 94 B4 AE 08 11 DC 13 59 D3 7F F6 3E 87  // ..........Y...>.
    0060: 31 B9 95 74 10 DA 3B A4 5B B5 19 82 7C 39 D7 0D  // 1..t..;.[...|9..
    0070: 7C 22 AC 1C 2A 84 E9 0A 88 6D FA B1 E2 D8 E8 21  // |"..*....m.....!
    0080: 96 E1 2E 68 9A BF 44 45 3E 3C 8E 99 90 DE 37 38  // ...h..DE><....78
    0090: 57 0B 92 15 BC DE FF F2 07 7E B5 40 8C 51 3A C3  // W........~.@.Q:.
    00A0: 02 48 F6 13 12 72 FB 42 78 E6 47 88 54 C7 B0 F0  // .H...r.Bx.G.T...
    00B0: 93 9E FB 04 B7 B8 B8 90 DE DB ED 32 E1 FB 54 A6  // ...........2..T.
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 48 50 51 4F  // ............HPQO
    00D0: 45 4D 53 4C 49 43 2D 42 50 43 57 49 4E 44 4F 57  // EMSLIC-BPCWINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 33 06 D7 20 8A 0A 63 95 08 94  // ......3.. ..c...
    0100: A9 60 30 37 CE 9F E8 B9 7B 07 DD CF 72 B3 0B E4  // .`07....{...r...
    0110: 0C 88 79 3C E8 46 01 E8 8B E0 60 F3 63 18 DE 7B  // ..y<.F....`.c..{
    0120: 5C BB A9 53 FE B1 C1 D4 82 67 5B 6C 13 45 9E 66  // \..S.....g[l.E.f
    0130: 49 23 CC 33 09 92 76 FA 31 70 35 F1 57 F8 BA A9  // I#.3..v.1p5.W...
    0140: 56 6F 3F 41 84 A5 3A E9 CD 6C 67 43 9B 70 91 7F  // Vo?A..:..lgC.p..
    0150: B4 06 F8 26 E2 FC 19 46 E5 F6 D7 66 0C 2D 73 99  // ...&...F...f.-s.
    0160: BA 94 38 64 D7 24 98 EB DA 39 64 C8 D3 8C 36 87  // ..8d.$...9d...6.
    0170: FD E5 47 BB A6 B8                                // ..G...


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "CpuRef", "CpuSsdt", 0x00003000)
{
    External (_SB_.OSCP, IntObj)
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (OSYS, UnknownObj)

    Scope (\)
    {
        Name (SSDT, Package (0x1B)
        {
            "CPU0IST ", 
            0x97961198, 
            0x000004FD, 
            "APIST   ", 
            0x978FE018, 
            0x000005FC, 
            "CPU0CST ", 
            0x978FE698, 
            0x00000400, 
            "APCST   ", 
            0x978FFA98, 
            0x0000030A, 
            "CPU0HWP ", 
            0x97961998, 
            0x00000149, 
            "APHWP   ", 
            0x97961C18, 
            0x00000317, 
            "HWPLVT  ", 
            0x978FF018, 
            0x00000724, 
            "CPU0PSD ", 
            0x97961818, 
            0x000000F4, 
            "APPSD   ", 
            0x978FD018, 
            0x00000AB0
        })
        Name (\PC00, 0x80000000)
        Name (\PC01, 0x80000000)
        Name (\PC02, 0x80000000)
        Name (\PC03, 0x80000000)
        Name (\PC04, 0x80000000)
        Name (\PC05, 0x80000000)
        Name (\PC06, 0x80000000)
        Name (\PC07, 0x80000000)
        Name (\PC08, 0x80000000)
        Name (\PC09, 0x80000000)
        Name (\PC10, 0x80000000)
        Name (\PC11, 0x80000000)
        Name (\PC12, 0x80000000)
        Name (\PC13, 0x80000000)
        Name (\PC14, 0x80000000)
        Name (\PC15, 0x80000000)
        Name (\SDTL, Zero)
    }

    Scope (\_SB)
    {
        Name (CTPC, Zero)
        OperationRegion (PNVS, SystemMemory, 0x97DF3000, 0x0072)
        Field (PNVS, AnyAcc, Lock, Preserve)
        {
            PGRV,   8, 
            CFGD,   32, 
            Offset (0x06), 
            ACRT,   8, 
            APSV,   8, 
            AAC0,   8, 
            CPID,   32, 
            CPPC,   8, 
            CLVL,   8, 
            CBMI,   8, 
            PL10,   16, 
            PL11,   16, 
            PL12,   16, 
            PL20,   16, 
            PL21,   16, 
            PL22,   16, 
            PLW0,   8, 
            PLW1,   8, 
            PLW2,   8, 
            CTC0,   8, 
            CTC1,   8, 
            CTC2,   8, 
            TAR0,   8, 
            TAR1,   8, 
            TAR2,   8, 
            PPC0,   8, 
            PPC1,   8, 
            PPC2,   8, 
            Offset (0x29), 
            C6MW,   8, 
            C7MW,   8, 
            CDMW,   8, 
            Offset (0x2E), 
            C6LT,   16, 
            C7LT,   16, 
            CDLT,   16, 
            CDLV,   16, 
            CDPW,   16, 
            MPMF,   8, 
            DTSE,   8, 
            DTS1,   8, 
            DTS2,   8, 
            DTSF,   8, 
            PDTS,   8, 
            PKGA,   8, 
            DTS3,   8, 
            DTS4,   8, 
            BGMA,   64, 
            BGMS,   8, 
            BGIA,   16, 
            BGIL,   16, 
            DSIA,   16, 
            DSIL,   8, 
            DSAE,   8, 
            EPCS,   8, 
            EMNA,   64, 
            ELNG,   64, 
            HWPV,   8, 
            HWPI,   8, 
            DTSI,   8, 
            HWPS,   8, 
            LMPS,   8, 
            ITBM,   8, 
            ITBD,   8, 
            ITBI,   8, 
            ITBS,   8, 
            OBIN,   8, 
            HWPE,   8, 
            TXTE,   8, 
            C3MW,   8, 
            C3LT,   16
        }

        OperationRegion (IO_D, SystemIO, \_SB.DSIA, \_SB.DSIL)
        Field (IO_D, ByteAcc, NoLock, Preserve)
        {
            TRPD,   8
        }

        OperationRegion (IO_P, SystemIO, \_SB.BGIA, \_SB.BGIL)
        Field (IO_P, ByteAcc, NoLock, Preserve)
        {
            TRPF,   8
        }
    }

    Scope (\_SB.PR00)
    {
        Name (HI0, Zero)
        Name (HC0, Zero)
        Name (HW0, Zero)
        Name (HW2, Zero)
        Name (HP0, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (CPDC, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Local3 = Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                           // ....
                }
            Concatenate (Local3, TEMP, Local2)
            Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2))
        }

        Method (COSC, 4, NotSerialized)
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Local0 = ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */
            CreateDWordField (Local0, Zero, EID0)
            CreateDWordField (Local0, 0x04, EID1)
            CreateDWordField (Local0, 0x08, EID2)
            CreateDWordField (Local0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            Return (Arg3)
        }

        Method (GCAP, 1, Serialized)
        {
            CreateDWordField (Arg0, Zero, STS0)
            CreateDWordField (Arg0, 0x04, CAP0)
            If (((STS0 == 0x06) || (STS0 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS0 & One))
            {
                CAP0 &= 0x0BFF
                Return (Zero)
            }

            PC00 = ((PC00 & 0x7FFFFFFF) | CAP0) /* \_SB_.PR00.GCAP.CAP0 */
            If ((CFGD & 0x7A))
            {
                If ((((CFGD & 0x0200) && (PC00 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_SB_.PR00.HC0_ */
                }
            }

            If (((PC00 & 0x09) == 0x09))
            {
                If (((CFGD & One) && !(SDTL & 0x08)))
                {
                    SDTL |= 0x08
                    OperationRegion (IST0, SystemMemory, DerefOf (SSDT [One]), DerefOf (SSDT [0x02]))
                    Load (IST0, HI0) /* \_SB_.PR00.HI0_ */
                }
            }

            If ((((CFGD & One) || (CFGD & 0x00400000)) && !
                (SDTL & 0x0100)))
            {
                SDTL |= 0x0100
                OperationRegion (PSD0, SystemMemory, DerefOf (SSDT [0x16]), DerefOf (SSDT [0x17]))
                Load (PSD0, HP0) /* \_SB_.PR00.HP0_ */
            }

            If ((OSYS >= 0x07DF))
            {
                If (((CFGD & 0x00400000) && !(SDTL & 0x40)))
                {
                    If ((\_SB.OSCP & 0x40))
                    {
                        SDTL |= 0x40
                        OperationRegion (HWP0, SystemMemory, DerefOf (SSDT [0x0D]), DerefOf (SSDT [0x0E]))
                        Load (HWP0, HW0) /* \_SB_.PR00.HW0_ */
                        If ((CFGD & 0x00800000))
                        {
                            OperationRegion (HWPL, SystemMemory, DerefOf (SSDT [0x13]), DerefOf (SSDT [0x14]))
                            Load (HWPL, HW2) /* \_SB_.PR00.HW2_ */
                        }
                    }

                    If ((\_SB.OSCP & 0x20))
                    {
                        If (!(\_SB.OSCP & 0x40))
                        {
                            HWPV = Zero
                        }
                    }

                    If ((\_SB.OSCP & 0x40))
                    {
                        HWPV = 0x02
                    }
                }
            }

            OperationRegion (SMIP, SystemIO, 0xB2, One)
            Field (SMIP, ByteAcc, NoLock, Preserve)
            {
                IOB2,   8
            }

            If (!(PC00 & 0x1000))
            {
                IOB2 = HWPS /* \_SB_.HWPS */
            }

            If ((((\_SB.CFGD & 0x02000000) && (\_SB.CFGD & 0x00400000)) && 
                (\_SB.OBIN != Zero)))
            {
                If ((\_SB.OSCP & 0x1000))
                {
                    IOB2 = ITBS /* \_SB_.ITBS */
                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PR01)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Name (HW1, Zero)
        Name (HP1, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST01)
            CreateDWordField (Arg0, 0x04, CP01)
            If (((ST01 == 0x06) || (ST01 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST01 & One))
            {
                CP01 &= 0x0BFF
                Return (Zero)
            }

            PC01 = ((PC01 & 0x7FFFFFFF) | CP01) /* \_SB_.PR01.GCAP.CP01 */
            If (((PC01 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                HWPT ()
            }

            If ((((PC01 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                APPS ()
            }

            If ((PC01 & 0x18))
            {
                APCT ()
            }

            PC00 = PC01 /* \PC01 */
            Return (Zero)
        }

        Method (APCT, 0, Serialized)
        {
            If (((CFGD & 0x7A) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                Load (CST1, HC1) /* \_SB_.PR01.HC1_ */
            }
        }

        Method (APPT, 0, Serialized)
        {
            If (((CFGD & One) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                Load (IST1, HI1) /* \_SB_.PR01.HI1_ */
            }
        }

        Method (APPS, 0, Serialized)
        {
            If ((((CFGD & One) || (CFGD & 0x00400000)) && !
                (SDTL & 0x0200)))
            {
                SDTL |= 0x0200
                OperationRegion (PSD1, SystemMemory, DerefOf (SSDT [0x19]), DerefOf (SSDT [0x1A]))
                Load (PSD1, HP1) /* \_SB_.PR01.HP1_ */
            }
        }

        Method (HWPT, 0, Serialized)
        {
            If ((OSYS >= 0x07DF))
            {
                If (((CFGD & 0x00400000) && !(SDTL & 0x80)))
                {
                    SDTL |= 0x80
                    OperationRegion (HWP1, SystemMemory, DerefOf (SSDT [0x10]), DerefOf (SSDT [0x11]))
                    Load (HWP1, HW1) /* \_SB_.PR01.HW1_ */
                }
            }
        }
    }

    Scope (\_SB.PR02)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST02)
            CreateDWordField (Arg0, 0x04, CP02)
            If (((ST02 == 0x06) || (ST02 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST02 & One))
            {
                CP02 &= 0x0BFF
                Return (Zero)
            }

            PC02 = ((PC02 & 0x7FFFFFFF) | CP02) /* \_SB_.PR02.GCAP.CP02 */
            If (((PC02 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PC02 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PC02 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC02 /* \PC02 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR03)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST03)
            CreateDWordField (Arg0, 0x04, CP03)
            If (((ST03 == 0x06) || (ST03 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST03 & One))
            {
                CP03 &= 0x0BFF
                Return (Zero)
            }

            PC03 = ((PC03 & 0x7FFFFFFF) | CP03) /* \_SB_.PR03.GCAP.CP03 */
            If (((PC03 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PC03 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PC03 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC03 /* \PC03 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR04)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST04)
            CreateDWordField (Arg0, 0x04, CP04)
            If (((ST04 == 0x06) || (ST04 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST04 & One))
            {
                CP04 &= 0x0BFF
                Return (Zero)
            }

            PC04 = ((PC04 & 0x7FFFFFFF) | CP04) /* \_SB_.PR04.GCAP.CP04 */
            If (((PC04 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PC04 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PC04 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC04 /* \PC04 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR05)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST05)
            CreateDWordField (Arg0, 0x04, CP05)
            If (((ST05 == 0x06) || (ST05 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST05 & One))
            {
                CP05 &= 0x0BFF
                Return (Zero)
            }

            PC05 = ((PC05 & 0x7FFFFFFF) | CP05) /* \_SB_.PR05.GCAP.CP05 */
            If (((PC05 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PC05 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PC05 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC05 /* \PC05 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR06)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST06)
            CreateDWordField (Arg0, 0x04, CP06)
            If (((ST06 == 0x06) || (ST06 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST06 & One))
            {
                CP06 &= 0x0BFF
                Return (Zero)
            }

            PC06 = ((PC06 & 0x7FFFFFFF) | CP06) /* \_SB_.PR06.GCAP.CP06 */
            If (((PC06 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PC06 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PC06 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC06 /* \PC06 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR07)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST07)
            CreateDWordField (Arg0, 0x04, CP07)
            If (((ST07 == 0x06) || (ST07 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST07 & One))
            {
                CP07 &= 0x0BFF
                Return (Zero)
            }

            PC07 = ((PC07 & 0x7FFFFFFF) | CP07) /* \_SB_.PR07.GCAP.CP07 */
            If (((PC07 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PC07 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PC07 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC07 /* \PC07 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR08)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST08)
            CreateDWordField (Arg0, 0x04, CP08)
            If (((ST08 == 0x06) || (ST08 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST08 & One))
            {
                CP08 &= 0x0BFF
                Return (Zero)
            }

            PC08 = ((PC08 & 0x7FFFFFFF) | CP08) /* \_SB_.PR08.GCAP.CP08 */
            If (((PC08 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PC08 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PC08 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC08 /* \PC08 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR09)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST09)
            CreateDWordField (Arg0, 0x04, CP09)
            If (((ST09 == 0x06) || (ST09 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST09 & One))
            {
                CP09 &= 0x0BFF
                Return (Zero)
            }

            PC09 = ((PC09 & 0x7FFFFFFF) | CP09) /* \_SB_.PR09.GCAP.CP09 */
            If (((PC09 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PC09 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PC09 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC09 /* \PC09 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR10)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST10)
            CreateDWordField (Arg0, 0x04, CP10)
            If (((ST10 == 0x06) || (ST10 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST10 & One))
            {
                CP10 = (ST10 & 0x0BFF)
                Return (Zero)
            }

            PC10 = ((PC10 & 0x7FFFFFFF) | CP10) /* \_SB_.PR10.GCAP.CP10 */
            If (((PC10 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PC10 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PC10 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC10 /* \PC10 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR11)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST11)
            CreateDWordField (Arg0, 0x04, CP11)
            If (((ST11 == 0x06) || (ST11 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST11 & One))
            {
                CP11 = (ST11 & 0x0BFF)
                Return (Zero)
            }

            PC11 = ((PC11 & 0x7FFFFFFF) | CP11) /* \_SB_.PR11.GCAP.CP11 */
            If (((PC11 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PC11 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PC11 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC11 /* \PC11 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR12)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST12)
            CreateDWordField (Arg0, 0x04, CP12)
            If (((ST12 == 0x06) || (ST12 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST12 & One))
            {
                CP12 = (ST12 & 0x0BFF)
                Return (Zero)
            }

            PC12 = ((PC12 & 0x7FFFFFFF) | CP12) /* \_SB_.PR12.GCAP.CP12 */
            If (((PC12 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PC12 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PC12 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC12 /* \PC12 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR13)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST13)
            CreateDWordField (Arg0, 0x04, CP13)
            If (((ST13 == 0x06) || (ST13 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST13 & One))
            {
                CP13 = (ST13 & 0x0BFF)
                Return (Zero)
            }

            PC13 = ((PC13 & 0x7FFFFFFF) | CP13) /* \_SB_.PR13.GCAP.CP13 */
            If (((PC13 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PC13 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PC13 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC13 /* \PC13 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR14)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST14)
            CreateDWordField (Arg0, 0x04, CP14)
            If (((ST14 == 0x06) || (ST14 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST14 & One))
            {
                CP14 = (ST14 & 0x0BFF)
                Return (Zero)
            }

            PC14 = ((PC14 & 0x7FFFFFFF) | CP14) /* \_SB_.PR14.GCAP.CP14 */
            If (((PC14 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PC14 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PC14 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC14 /* \PC14 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR15)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST15)
            CreateDWordField (Arg0, 0x04, CP15)
            If (((ST15 == 0x06) || (ST15 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST15 & One))
            {
                CP15 = (ST15 & 0x0BFF)
                Return (Zero)
            }

            PC15 = ((PC15 & 0x7FFFFFFF) | CP15) /* \_SB_.PR15.GCAP.CP15 */
            If (((PC15 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PC15 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PC15 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC15 /* \PC15 */
            Return (Zero)
        }
    }

    Scope (\_SB)
    {
        If ((TXTE == One))
        {
            Device (ACM)
            {
                Name (_HID, "INTC1025")  // _HID: Hardware ID
                Name (_CID, "INT_WHL_SINIT")  // _CID: Compatible ID
            }
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 1, "HP", "PECNBSDT", 0x00001000)
{
    External (_SB_.PCI0.LPCB.EC0_, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.ECMX, UnknownObj)
    External (_SB_.PCI0.LPCB.EC0_.PTAD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPCB.EC0_.TBTA, UnknownObj)

    Scope (\_SB.PCI0.LPCB.EC0)
    {
        Method (_Q1B, 0, Serialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
            Local1 = \_SB.PCI0.LPCB.EC0.TBTA /* External reference */
            Release (\_SB.PCI0.LPCB.EC0.ECMX)
            \_SB.PCI0.LPCB.EC0.PTAD (Local1)
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 2, "DptfTa", "DptfTabl", 0x00001000)
{
    External (_SB_.AAC0, FieldUnitObj)
    External (_SB_.ACRT, FieldUnitObj)
    External (_SB_.APSV, FieldUnitObj)
    External (_SB_.CBMI, FieldUnitObj)
    External (_SB_.CFGD, FieldUnitObj)
    External (_SB_.CLVL, FieldUnitObj)
    External (_SB_.CPPC, FieldUnitObj)
    External (_SB_.CTC0, FieldUnitObj)
    External (_SB_.CTC1, FieldUnitObj)
    External (_SB_.CTC2, FieldUnitObj)
    External (_SB_.OSCP, IntObj)
    External (_SB_.PAGD, DeviceObj)
    External (_SB_.PAGD._PUR, PkgObj)
    External (_SB_.PAGD._STA, MethodObj)    // 0 Arguments
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.B0D4, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.CPSN, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.CRZN, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PCI0.LPCB.EC0_.ECRG, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.PHTP, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.PLTP, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.SCPS, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.SEN1.S1CH, UnknownObj)
    External (_SB_.PCI0.LPCB.EC0_.SEN1.S1CL, UnknownObj)
    External (_SB_.PCI0.LPCB.EC0_.SEN2.S2CH, UnknownObj)
    External (_SB_.PCI0.LPCB.EC0_.SEN2.S2CL, UnknownObj)
    External (_SB_.PCI0.LPCB.EC0_.UDTS, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.MHBR, FieldUnitObj)
    External (_SB_.PL10, FieldUnitObj)
    External (_SB_.PL11, FieldUnitObj)
    External (_SB_.PL12, FieldUnitObj)
    External (_SB_.PL20, FieldUnitObj)
    External (_SB_.PL21, FieldUnitObj)
    External (_SB_.PL22, FieldUnitObj)
    External (_SB_.PLW0, FieldUnitObj)
    External (_SB_.PLW1, FieldUnitObj)
    External (_SB_.PLW2, FieldUnitObj)
    External (_SB_.PR00, ProcessorObj)
    External (_SB_.PR00._PSS, MethodObj)    // 0 Arguments
    External (_SB_.PR00._TPC, IntObj)
    External (_SB_.PR00._TSD, MethodObj)    // 0 Arguments
    External (_SB_.PR00._TSS, MethodObj)    // 0 Arguments
    External (_SB_.PR00.LPSS, PkgObj)
    External (_SB_.PR00.TPSS, PkgObj)
    External (_SB_.PR00.TSMC, PkgObj)
    External (_SB_.PR00.TSMF, PkgObj)
    External (_SB_.PR01, ProcessorObj)
    External (_SB_.PR02, ProcessorObj)
    External (_SB_.PR03, ProcessorObj)
    External (_SB_.PR04, ProcessorObj)
    External (_SB_.PR05, ProcessorObj)
    External (_SB_.PR06, ProcessorObj)
    External (_SB_.PR07, ProcessorObj)
    External (_SB_.PR08, ProcessorObj)
    External (_SB_.PR09, ProcessorObj)
    External (_SB_.PR10, ProcessorObj)
    External (_SB_.PR11, ProcessorObj)
    External (_SB_.PR12, ProcessorObj)
    External (_SB_.PR13, ProcessorObj)
    External (_SB_.PR14, ProcessorObj)
    External (_SB_.PR15, ProcessorObj)
    External (_SB_.SLPB, DeviceObj)
    External (_SB_.TAR0, FieldUnitObj)
    External (_SB_.TAR1, FieldUnitObj)
    External (_SB_.TAR2, FieldUnitObj)
    External (_TZ_.CPUZ, ThermalZoneObj)
    External (_TZ_.ETMD, IntObj)
    External (_TZ_.EXTZ._TMP, MethodObj)    // 0 Arguments
    External (_TZ_.LOCZ._TMP, MethodObj)    // 0 Arguments
    External (_TZ_.TZ00, ThermalZoneObj)
    External (_TZ_.TZ01, ThermalZoneObj)
    External (ACTT, IntObj)
    External (ADBG, MethodObj)    // 1 Arguments
    External (APPE, IntObj)
    External (ATMC, IntObj)
    External (ATPC, IntObj)
    External (CA2D, IntObj)
    External (CHGE, IntObj)
    External (CPUS, IntObj)
    External (CRTT, IntObj)
    External (CTDP, IntObj)
    External (DCFE, IntObj)
    External (DISE, IntObj)
    External (DPAP, IntObj)
    External (DPCP, IntObj)
    External (DPHL, IntObj)
    External (DPLL, IntObj)
    External (DPOS, UnknownObj)
    External (DPPP, IntObj)
    External (DPTF, IntObj)
    External (FND1, IntObj)
    External (HIDW, MethodObj)    // 4 Arguments
    External (HIWC, MethodObj)    // 1 Arguments
    External (LPER, IntObj)
    External (LPOE, IntObj)
    External (LPOP, IntObj)
    External (LPOS, IntObj)
    External (LPOW, IntObj)
    External (MPL0, IntObj)
    External (MPL1, IntObj)
    External (MPL2, IntObj)
    External (ODV0, IntObj)
    External (ODV1, IntObj)
    External (ODV2, IntObj)
    External (ODV3, IntObj)
    External (ODV4, IntObj)
    External (ODV5, IntObj)
    External (ODV6, IntObj)
    External (ODV7, IntObj)
    External (ODV8, IntObj)
    External (ODV9, IntObj)
    External (ODVA, IntObj)
    External (ODVB, IntObj)
    External (PBPE, IntObj)
    External (PC00, IntObj)
    External (PIDE, IntObj)
    External (PLID, UnknownObj)
    External (PNHM, IntObj)
    External (PPPR, IntObj)
    External (PPSZ, IntObj)
    External (PSVT, IntObj)
    External (PTMC, IntObj)
    External (PTPC, IntObj)
    External (PV01, UnknownObj)
    External (PV02, UnknownObj)
    External (PV03, UnknownObj)
    External (PV04, UnknownObj)
    External (PV05, UnknownObj)
    External (PV06, UnknownObj)
    External (PV07, UnknownObj)
    External (PV08, UnknownObj)
    External (PV09, UnknownObj)
    External (PV0A, UnknownObj)
    External (PV0B, UnknownObj)
    External (PV0C, UnknownObj)
    External (PV0D, UnknownObj)
    External (PV0E, UnknownObj)
    External (PV0F, UnknownObj)
    External (PV10, UnknownObj)
    External (PV11, UnknownObj)
    External (PV12, UnknownObj)
    External (PV13, UnknownObj)
    External (PV14, UnknownObj)
    External (PV15, UnknownObj)
    External (PV16, UnknownObj)
    External (PV17, UnknownObj)
    External (PV18, UnknownObj)
    External (PV19, UnknownObj)
    External (PV1A, UnknownObj)
    External (PV1B, UnknownObj)
    External (PV1C, UnknownObj)
    External (PV1D, UnknownObj)
    External (PV1E, UnknownObj)
    External (PV1F, UnknownObj)
    External (PV20, UnknownObj)
    External (PV21, UnknownObj)
    External (PV22, UnknownObj)
    External (PV23, UnknownObj)
    External (PWRE, IntObj)
    External (PWRS, IntObj)
    External (RFIM, IntObj)
    External (S1AT, IntObj)
    External (S1CT, IntObj)
    External (S1DE, IntObj)
    External (S1HT, IntObj)
    External (S1P2, IntObj)
    External (S1PT, IntObj)
    External (S1S3, IntObj)
    External (S2AT, IntObj)
    External (S2CT, IntObj)
    External (S2DE, IntObj)
    External (S2HT, IntObj)
    External (S2PT, IntObj)
    External (S2S3, IntObj)
    External (S3AT, IntObj)
    External (S3CT, IntObj)
    External (S3DE, IntObj)
    External (S3HT, IntObj)
    External (S3PT, IntObj)
    External (S3S3, IntObj)
    External (S4AT, IntObj)
    External (S4CT, IntObj)
    External (S4DE, IntObj)
    External (S4HT, IntObj)
    External (S4PT, IntObj)
    External (S4S3, IntObj)
    External (S5AT, IntObj)
    External (S5CT, IntObj)
    External (S5DE, IntObj)
    External (S5HT, IntObj)
    External (S5PT, IntObj)
    External (S5S3, IntObj)
    External (SAC3, IntObj)
    External (SACT, IntObj)
    External (SADE, IntObj)
    External (SAHT, IntObj)
    External (SAT1, IntObj)
    External (SAT2, IntObj)
    External (SC31, IntObj)
    External (SC32, IntObj)
    External (SCT1, IntObj)
    External (SCT2, IntObj)
    External (SGE1, IntObj)
    External (SGE2, IntObj)
    External (SHT1, IntObj)
    External (SHT2, IntObj)
    External (SPT1, IntObj)
    External (SPT2, IntObj)
    External (SSP2, IntObj)
    External (SSP3, IntObj)
    External (SSP4, IntObj)
    External (SSP5, IntObj)
    External (TCNT, IntObj)
    External (TRTV, IntObj)
    External (TSOD, IntObj)
    External (V1AT, IntObj)
    External (V1C3, IntObj)
    External (V1CR, IntObj)
    External (V1HT, IntObj)
    External (V1PV, IntObj)
    External (V2AT, IntObj)
    External (V2C3, IntObj)
    External (V2CR, IntObj)
    External (V2HT, IntObj)
    External (V2PV, IntObj)
    External (VSP1, IntObj)
    External (VSP2, IntObj)
    External (VSPE, IntObj)
    External (WAND, IntObj)
    External (WLC3, IntObj)
    External (WRAT, IntObj)
    External (WRCT, IntObj)
    External (WRFD, IntObj)
    External (WRHT, IntObj)
    External (WRPT, IntObj)
    External (WTSP, IntObj)
    External (WWAT, IntObj)
    External (WWC3, IntObj)
    External (WWCT, IntObj)
    External (WWHT, IntObj)
    External (WWPT, IntObj)

    Scope (\_SB)
    {
        Device (IETM)
        {
            Name (_HID, EisaId ("INT3400") /* Intel Dynamic Power Performance Management */)  // _HID: Hardware ID
            Name (DOSS, Zero)
            Name (DFFG, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((DPTF == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (IDTP, Package (0x0C)
            {
                ToUUID ("9e04115a-ae87-4d1c-9500-0f3e340bfe75") /* Unknown UUID */, 
                ToUUID ("42a441d6-ae6a-462b-a84b-4a8ce79027d3") /* Unknown UUID */, 
                ToUUID ("3a95c389-e4b8-4629-a526-c52c88626bae") /* Unknown UUID */, 
                ToUUID ("0e56fab6-bdfc-4e8c-8246-40ecfd4d74ea") /* Unknown UUID */, 
                ToUUID ("97c68ae7-15fa-499c-b8c9-5da81d606e0a") /* Unknown UUID */, 
                ToUUID ("c4ce1849-243a-49f3-b8d5-f97002f38e6a") /* Unknown UUID */, 
                ToUUID ("e145970a-e4c1-4d73-900e-c9c5a69dd067") /* Unknown UUID */, 
                ToUUID ("f5a35014-c209-46a4-993a-eb56de7530a1") /* Unknown UUID */, 
                ToUUID ("63be270f-1c11-48fd-a6f7-3af253ff3e2d") /* Unknown UUID */, 
                ToUUID ("6ed722a7-9240-48a5-b479-31eef723d7cf") /* Unknown UUID */, 
                ToUUID ("42496e14-bc1b-46e8-a798-ca915464426f") /* Unknown UUID */, 
                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            })
            Name (TMPP, Package (0x0C)
            {
                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            })
            Name (PTRP, Zero)
            Name (PSEM, Zero)
            Name (ATRP, Zero)
            Name (ASEM, Zero)
            Name (YTRP, Zero)
            Name (YSEM, Zero)
            Method (IDSP, 0, Serialized)
            {
                Name (TMPI, Zero)
                If (((\DPPP == 0x02) && CondRefOf (DP2P)))
                {
                    TMPP [TMPI] = DerefOf (DP2P [Zero])
                    TMPI++
                }

                If (((\DPPP == One) && CondRefOf (DPSP)))
                {
                    TMPP [TMPI] = DerefOf (DPSP [Zero])
                    TMPI++
                }

                If (((\DPAP == One) && CondRefOf (DASP)))
                {
                    TMPP [TMPI] = DerefOf (DASP [Zero])
                    TMPI++
                }

                If (((\DPAP == 0x02) && CondRefOf (DA2P)))
                {
                    TMPP [TMPI] = DerefOf (DA2P [Zero])
                    TMPI++
                }

                If (((\DPCP == One) && CondRefOf (DCSP)))
                {
                    TMPP [TMPI] = DerefOf (DCSP [Zero])
                    TMPI++
                }

                If (((\RFIM == One) && CondRefOf (RFIP)))
                {
                    TMPP [TMPI] = DerefOf (RFIP [Zero])
                    TMPI++
                }

                If (((\PBPE == One) && CondRefOf (POBP)))
                {
                    TMPP [TMPI] = DerefOf (POBP [Zero])
                    TMPI++
                }

                If (((\APPE == One) && CondRefOf (DAPP)))
                {
                    TMPP [TMPI] = DerefOf (DAPP [Zero])
                    TMPI++
                }

                If (((\VSPE == One) && CondRefOf (DVSP)))
                {
                    TMPP [TMPI] = DerefOf (DVSP [Zero])
                    TMPI++
                }

                If (((\PIDE == One) && CondRefOf (DPID)))
                {
                    TMPP [TMPI] = DerefOf (DPID [Zero])
                    TMPI++
                }

                Return (TMPP) /* \_SB_.IETM.TMPP */
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (NUMP, Zero)
                Name (UID2, Buffer (0x10)
                {
                    /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                    /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
                })
                CreateDWordField (Arg3, Zero, STS1)
                CreateDWordField (Arg3, 0x04, CAP1)
                NUMP = SizeOf (IDTP)
                CreateDWordField (Arg0, Zero, IID0)
                CreateDWordField (Arg0, 0x04, IID1)
                CreateDWordField (Arg0, 0x08, IID2)
                CreateDWordField (Arg0, 0x0C, IID3)
                CreateDWordField (UID2, Zero, EID0)
                CreateDWordField (UID2, 0x04, EID1)
                CreateDWordField (UID2, 0x08, EID2)
                CreateDWordField (UID2, 0x0C, EID3)
                While (NUMP)
                {
                    UID2 = DerefOf (IDTP [(NUMP - One)])
                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        Break
                    }

                    NUMP--
                }

                If ((Arg1 != One))
                {
                    STS1 &= 0xFFFFFF00
                    STS1 |= 0x0A
                    Return (Arg3)
                }

                If ((Arg2 != 0x02))
                {
                    STS1 &= 0xFFFFFF00
                    STS1 |= 0x02
                    Return (Arg3)
                }

                If (((\DPPP == 0x02) && CondRefOf (\_SB.APSV)))
                {
                    DOSS = One
                    If ((PSEM == Zero))
                    {
                        PSEM = One
                        PTRP = \_SB.APSV /* External reference */
                    }

                    If (CondRefOf (DP2P))
                    {
                        UID2 = DerefOf (DP2P [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \_SB.APSV = 0x6E
                            }
                            Else
                            {
                                \_SB.APSV = PTRP /* \_SB_.IETM.PTRP */
                            }

                            Notify (\_TZ.CPUZ, 0x81) // Information Change
                        }

                        Return (Arg3)
                    }
                }

                If (((\DPPP == One) && CondRefOf (\_SB.APSV)))
                {
                    If ((PSEM == Zero))
                    {
                        PSEM = One
                        PTRP = \_SB.APSV /* External reference */
                    }

                    If (CondRefOf (DPSP))
                    {
                        UID2 = DerefOf (DPSP [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \_SB.APSV = 0x6E
                            }
                            Else
                            {
                                \_SB.APSV = PTRP /* \_SB_.IETM.PTRP */
                            }

                            If (CondRefOf (\_TZ.TZ00))
                            {
                                Notify (\_TZ.TZ00, 0x81) // Information Change
                            }

                            If (CondRefOf (\_TZ.TZ01))
                            {
                                Notify (\_TZ.TZ01, 0x81) // Information Change
                            }
                        }

                        Return (Arg3)
                    }
                }

                If (((\PIDE == One) && CondRefOf (\_SB.APSV)))
                {
                    If ((PSEM == Zero))
                    {
                        PSEM = One
                        PTRP = \_SB.APSV /* External reference */
                    }

                    If (CondRefOf (DPID))
                    {
                        UID2 = DerefOf (DPID [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \_SB.APSV = 0x6E
                            }
                            Else
                            {
                                \_SB.APSV = PTRP /* \_SB_.IETM.PTRP */
                            }

                            If (CondRefOf (\_TZ.TZ00))
                            {
                                Notify (\_TZ.TZ00, 0x81) // Information Change
                            }

                            If (CondRefOf (\_TZ.TZ01))
                            {
                                Notify (\_TZ.TZ01, 0x81) // Information Change
                            }
                        }

                        Return (Arg3)
                    }
                }

                If (((\DPAP == One) && CondRefOf (\_SB.AAC0)))
                {
                    If ((ASEM == Zero))
                    {
                        ASEM = One
                        ATRP = \_SB.AAC0 /* External reference */
                    }

                    If (CondRefOf (DASP))
                    {
                        UID2 = DerefOf (DASP [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \_SB.AAC0 = 0x6E
                                \_TZ.ETMD = Zero
                            }
                            Else
                            {
                                \_SB.AAC0 = ATRP /* \_SB_.IETM.ATRP */
                                \_TZ.ETMD = One
                            }

                            If (CondRefOf (\_TZ.TZ00))
                            {
                                Notify (\_TZ.TZ00, 0x81) // Information Change
                            }

                            If (CondRefOf (\_TZ.TZ01))
                            {
                                Notify (\_TZ.TZ01, 0x81) // Information Change
                            }
                        }

                        Return (Arg3)
                    }
                }

                If (((\DPAP == 0x02) && CondRefOf (\_SB.AAC0)))
                {
                    If ((ASEM == Zero))
                    {
                        ASEM = One
                        ATRP = \_SB.AAC0 /* External reference */
                    }

                    If (CondRefOf (DA2P))
                    {
                        UID2 = DerefOf (DA2P [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \_SB.AAC0 = 0x6E
                                \_TZ.ETMD = Zero
                            }
                            Else
                            {
                                \_SB.AAC0 = ATRP /* \_SB_.IETM.ATRP */
                                \_TZ.ETMD = One
                            }

                            If (CondRefOf (\_TZ.TZ00))
                            {
                                Notify (\_TZ.TZ00, 0x81) // Information Change
                            }

                            If (CondRefOf (\_TZ.TZ01))
                            {
                                Notify (\_TZ.TZ01, 0x81) // Information Change
                            }
                        }

                        Return (Arg3)
                    }
                }

                If (((\DPCP == One) && CondRefOf (\_SB.ACRT)))
                {
                    If ((YSEM == Zero))
                    {
                        YSEM = One
                        YTRP = \_SB.ACRT /* External reference */
                    }

                    If (CondRefOf (DCSP))
                    {
                        UID2 = DerefOf (DCSP [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \_SB.ACRT = 0xD2
                            }
                            Else
                            {
                                \_SB.ACRT = YTRP /* \_SB_.IETM.YTRP */
                            }

                            If (CondRefOf (\_TZ.TZ00))
                            {
                                Notify (\_TZ.TZ00, 0x81) // Information Change
                            }

                            If (CondRefOf (\_TZ.TZ01))
                            {
                                Notify (\_TZ.TZ01, 0x81) // Information Change
                            }
                        }

                        Return (Arg3)
                    }
                }

                Return (Arg3)
            }

            Method (DCFG, 0, NotSerialized)
            {
                Return (\DCFE) /* External reference */
            }

            Name (ODVX, Package (0x0C)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (ODVP, 0, Serialized)
            {
                ODVX [Zero] = \ODV0 /* External reference */
                ODVX [One] = \ODV1 /* External reference */
                ODVX [0x02] = \ODV2 /* External reference */
                ODVX [0x03] = \ODV3 /* External reference */
                ODVX [0x04] = \ODV4 /* External reference */
                ODVX [0x05] = \ODV5 /* External reference */
                ODVX [0x06] = \ODV6 /* External reference */
                ODVX [0x07] = \ODV7 /* External reference */
                ODVX [0x08] = \ODV8 /* External reference */
                ODVX [0x09] = \ODV9 /* External reference */
                ODVX [0x0A] = \ODVA /* External reference */
                ODVX [0x0B] = \ODVB /* External reference */
                Return (ODVX) /* \_SB_.IETM.ODVX */
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Method (KTOC, 1, Serialized)
        {
            If ((Arg0 > 0x0AAC))
            {
                Return (((Arg0 - 0x0AAC) / 0x0A))
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (CTOK, 1, Serialized)
        {
            Return (((Arg0 * 0x0A) + 0x0AAC))
        }

        Method (C10K, 1, Serialized)
        {
            Name (TMP1, Buffer (0x10)
            {
                 0x00                                             // .
            })
            CreateByteField (TMP1, Zero, TMPL)
            CreateByteField (TMP1, One, TMPH)
            Local0 = (Arg0 + 0x0AAC)
            TMPL = (Local0 & 0xFF)
            TMPH = ((Local0 & 0xFF00) >> 0x08)
            ToInteger (TMP1, Local1)
            Return (Local1)
        }

        Method (K10C, 1, Serialized)
        {
            If ((Arg0 > 0x0AAC))
            {
                Return ((Arg0 - 0x0AAC))
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.B0D4)
    {
        Name (PFLG, Zero)
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((\SADE == One))
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }

        OperationRegion (MBAR, SystemMemory, ((MHBR << 0x0F) + 0x5000), 0x1000)
        Field (MBAR, ByteAcc, NoLock, Preserve)
        {
            Offset (0x930), 
            PTDP,   15, 
            Offset (0x932), 
            PMIN,   15, 
            Offset (0x934), 
            PMAX,   15, 
            Offset (0x936), 
            TMAX,   7, 
            Offset (0x938), 
            PWRU,   4, 
            Offset (0x939), 
            EGYU,   5, 
            Offset (0x93A), 
            TIMU,   4, 
            Offset (0x958), 
            Offset (0x95C), 
            LPMS,   1, 
            CTNL,   2, 
            Offset (0x978), 
            PCTP,   8, 
            Offset (0x998), 
            RP0C,   8, 
            RP1C,   8, 
            RPNC,   8, 
            Offset (0xF3C), 
            TRAT,   8, 
            Offset (0xF40), 
            PTD1,   15, 
            Offset (0xF42), 
            TRA1,   8, 
            Offset (0xF44), 
            PMX1,   15, 
            Offset (0xF46), 
            PMN1,   15, 
            Offset (0xF48), 
            PTD2,   15, 
            Offset (0xF4A), 
            TRA2,   8, 
            Offset (0xF4C), 
            PMX2,   15, 
            Offset (0xF4E), 
            PMN2,   15, 
            Offset (0xF50), 
            CTCL,   2, 
                ,   29, 
            CLCK,   1, 
            MNTR,   8
        }

        Name (XPCC, Zero)
        Method (PPCC, 0, Serialized)
        {
            If (((XPCC == Zero) && CondRefOf (\_SB.CBMI)))
            {
                Switch (ToInteger (\_SB.CBMI))
                {
                    Case (Zero)
                    {
                        If (((\_SB.CLVL >= One) && (\_SB.CLVL <= 0x03)))
                        {
                            CPL0 ()
                            XPCC = One
                        }
                    }
                    Case (One)
                    {
                        If (((\_SB.CLVL == 0x02) || (\_SB.CLVL == 0x03)))
                        {
                            CPL1 ()
                            XPCC = One
                        }
                    }
                    Case (0x02)
                    {
                        If ((\_SB.CLVL == 0x03))
                        {
                            CPL2 ()
                            XPCC = One
                        }
                    }

                }
            }

            Return (NPCC) /* \_SB_.PCI0.B0D4.NPCC */
        }

        Name (NPCC, Package (0x03)
        {
            0x02, 
            Package (0x06)
            {
                Zero, 
                0x88B8, 
                0xAFC8, 
                0x6D60, 
                0x7D00, 
                0x03E8
            }, 

            Package (0x06)
            {
                One, 
                0xDBBA, 
                0xDBBA, 
                Zero, 
                Zero, 
                0x03E8
            }
        })
        Method (CPNU, 2, Serialized)
        {
            Name (CNVT, Zero)
            Name (PPUU, Zero)
            Name (RMDR, Zero)
            If ((PWRU == Zero))
            {
                PPUU = One
            }
            Else
            {
                PPUU = (PWRU-- << 0x02)
            }

            Divide (Arg0, PPUU, RMDR, CNVT) /* \_SB_.PCI0.B0D4.CPNU.CNVT */
            If ((Arg1 == Zero))
            {
                Return (CNVT) /* \_SB_.PCI0.B0D4.CPNU.CNVT */
            }
            Else
            {
                CNVT *= 0x03E8
                RMDR *= 0x03E8
                RMDR /= PPUU
                CNVT += RMDR /* \_SB_.PCI0.B0D4.CPNU.RMDR */
                Return (CNVT) /* \_SB_.PCI0.B0D4.CPNU.CNVT */
            }
        }

        Method (CPL0, 0, NotSerialized)
        {
            \_SB.PCI0.B0D4.NPCC [Zero] = 0x02
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [One] = \MPL0 /* External reference */
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x02] = PV1C /* External reference */
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x03] = (\_SB.PLW0 * 0x03E8)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x04] = ((\_SB.PLW0 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x05] = PPSZ /* External reference */
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [One] = PV11 /* External reference */
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x02] = PV12 /* External reference */
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x05] = PPSZ /* External reference */
        }

        Method (CPL1, 0, NotSerialized)
        {
            \_SB.PCI0.B0D4.NPCC [Zero] = 0x02
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [One] = \MPL1 /* External reference */
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x02] = CPNU (\_SB.PL11, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x03] = (\_SB.PLW1 * 0x03E8)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x04] = ((\_SB.PLW1 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x05] = PPSZ /* External reference */
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [One] = CPNU (\_SB.PL21, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x02] = CPNU (\_SB.PL21, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x05] = PPSZ /* External reference */
        }

        Method (CPL2, 0, NotSerialized)
        {
            \_SB.PCI0.B0D4.NPCC [Zero] = 0x02
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [One] = \MPL2 /* External reference */
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x02] = CPNU (\_SB.PL12, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x03] = (\_SB.PLW2 * 0x03E8)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x04] = ((\_SB.PLW2 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x05] = PPSZ /* External reference */
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [One] = CPNU (\_SB.PL22, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x02] = CPNU (\_SB.PL22, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x05] = PPSZ /* External reference */
        }

        Name (LSTM, Zero)
        Name (_PPC, Zero)  // _PPC: Performance Present Capabilities
        Method (SPPC, 1, Serialized)
        {
            If (CondRefOf (\_SB.CPPC))
            {
                \_SB.CPPC = Arg0
            }

            Switch (ToInteger (\TCNT))
            {
                Case (0x10)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                    Notify (\_SB.PR08, 0x80) // Status Change
                    Notify (\_SB.PR09, 0x80) // Status Change
                    Notify (\_SB.PR10, 0x80) // Status Change
                    Notify (\_SB.PR11, 0x80) // Status Change
                    Notify (\_SB.PR12, 0x80) // Status Change
                    Notify (\_SB.PR13, 0x80) // Status Change
                    Notify (\_SB.PR14, 0x80) // Status Change
                    Notify (\_SB.PR15, 0x80) // Status Change
                }
                Case (0x0E)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                    Notify (\_SB.PR08, 0x80) // Status Change
                    Notify (\_SB.PR09, 0x80) // Status Change
                    Notify (\_SB.PR10, 0x80) // Status Change
                    Notify (\_SB.PR11, 0x80) // Status Change
                    Notify (\_SB.PR12, 0x80) // Status Change
                    Notify (\_SB.PR13, 0x80) // Status Change
                }
                Case (0x0C)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                    Notify (\_SB.PR08, 0x80) // Status Change
                    Notify (\_SB.PR09, 0x80) // Status Change
                    Notify (\_SB.PR10, 0x80) // Status Change
                    Notify (\_SB.PR11, 0x80) // Status Change
                }
                Case (0x0A)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                    Notify (\_SB.PR08, 0x80) // Status Change
                    Notify (\_SB.PR09, 0x80) // Status Change
                }
                Case (0x08)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                }
                Case (0x07)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                }
                Case (0x06)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                }
                Case (0x05)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                }
                Case (0x04)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                }
                Case (0x03)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                }
                Case (0x02)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                }
                Default
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                }

            }
        }

        Name (TLPO, Package (0x06)
        {
            One, 
            One, 
            Zero, 
            One, 
            One, 
            0x02
        })
        Method (CLPO, 0, NotSerialized)
        {
            TLPO [One] = LPOE /* External reference */
            If (CondRefOf (\_SB.PR00._PSS))
            {
                If ((\_SB.OSCP & 0x0400))
                {
                    Local1 = SizeOf (\_SB.PR00.TPSS)
                }
                Else
                {
                    Local1 = SizeOf (\_SB.PR00.LPSS)
                }
            }
            Else
            {
                Local1 = Zero
            }

            If ((LPOP < Local1))
            {
                TLPO [0x02] = LPOP /* External reference */
            }
            Else
            {
                Local1--
                TLPO [0x02] = Local1
            }

            TLPO [0x03] = LPOS /* External reference */
            TLPO [0x04] = LPOW /* External reference */
            TLPO [0x05] = LPER /* External reference */
            Return (TLPO) /* \_SB_.PCI0.B0D4.TLPO */
        }

        Method (SPUR, 1, NotSerialized)
        {
            If ((Arg0 <= \TCNT))
            {
                If ((\_SB.PAGD._STA () == 0x0F))
                {
                    \_SB.PAGD._PUR [One] = Arg0
                    Notify (\_SB.PAGD, 0x80) // Status Change
                }
            }
        }

        Name (AEXL, Package (0x04)
        {
            "svchost.exe", 
            "dllhost.exe", 
            "smss.exe", 
            "WinSAT.exe"
        })
        Method (PCCC, 0, Serialized)
        {
            PCCX [Zero] = One
            Switch (ToInteger (CPNU (PTDP, Zero)))
            {
                Case (0x39)
                {
                    DerefOf (PCCX [One]) [Zero] = 0xA7F8
                    DerefOf (PCCX [One]) [One] = 0x00017318
                }
                Case (0x2F)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x9858
                    DerefOf (PCCX [One]) [One] = 0x00014C08
                }
                Case (0x25)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x7148
                    DerefOf (PCCX [One]) [One] = 0xD6D8
                }
                Case (0x19)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x3E80
                    DerefOf (PCCX [One]) [One] = 0x7D00
                }
                Case (0x0F)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x36B0
                    DerefOf (PCCX [One]) [One] = 0x7D00
                }
                Case (0x0B)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x36B0
                    DerefOf (PCCX [One]) [One] = 0x61A8
                }
                Default
                {
                    DerefOf (PCCX [One]) [Zero] = 0xFF
                    DerefOf (PCCX [One]) [One] = 0xFF
                }

            }

            Return (PCCX) /* \_SB_.PCI0.B0D4.PCCX */
        }

        Name (PCCX, Package (0x02)
        {
            0x80000000, 
            Package (0x02)
            {
                0x80000000, 
                0x80000000
            }
        })
        Name (KEFF, Package (0x1E)
        {
            Package (0x02)
            {
                0x01BC, 
                Zero
            }, 

            Package (0x02)
            {
                0x01CF, 
                0x27
            }, 

            Package (0x02)
            {
                0x01E1, 
                0x4B
            }, 

            Package (0x02)
            {
                0x01F3, 
                0x6C
            }, 

            Package (0x02)
            {
                0x0206, 
                0x8B
            }, 

            Package (0x02)
            {
                0x0218, 
                0xA8
            }, 

            Package (0x02)
            {
                0x022A, 
                0xC3
            }, 

            Package (0x02)
            {
                0x023D, 
                0xDD
            }, 

            Package (0x02)
            {
                0x024F, 
                0xF4
            }, 

            Package (0x02)
            {
                0x0261, 
                0x010B
            }, 

            Package (0x02)
            {
                0x0274, 
                0x011F
            }, 

            Package (0x02)
            {
                0x032C, 
                0x01BD
            }, 

            Package (0x02)
            {
                0x03D7, 
                0x0227
            }, 

            Package (0x02)
            {
                0x048B, 
                0x026D
            }, 

            Package (0x02)
            {
                0x053E, 
                0x02A1
            }, 

            Package (0x02)
            {
                0x05F7, 
                0x02C6
            }, 

            Package (0x02)
            {
                0x06A8, 
                0x02E6
            }, 

            Package (0x02)
            {
                0x075D, 
                0x02FF
            }, 

            Package (0x02)
            {
                0x0818, 
                0x0311
            }, 

            Package (0x02)
            {
                0x08CF, 
                0x0322
            }, 

            Package (0x02)
            {
                0x179C, 
                0x0381
            }, 

            Package (0x02)
            {
                0x2DDC, 
                0x039C
            }, 

            Package (0x02)
            {
                0x44A8, 
                0x039E
            }, 

            Package (0x02)
            {
                0x5C35, 
                0x0397
            }, 

            Package (0x02)
            {
                0x747D, 
                0x038D
            }, 

            Package (0x02)
            {
                0x8D7F, 
                0x0382
            }, 

            Package (0x02)
            {
                0xA768, 
                0x0376
            }, 

            Package (0x02)
            {
                0xC23B, 
                0x0369
            }, 

            Package (0x02)
            {
                0xDE26, 
                0x035A
            }, 

            Package (0x02)
            {
                0xFB7C, 
                0x034A
            }
        })
        Name (CEUP, Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        })
        Method (_TMP, 0, Serialized)  // _TMP: Temperature
        {
            Return (\_SB.IETM.CTOK (PCTP))
        }

        Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
        {
            LSTM = Arg0
            Notify (\_SB.PCI0.B0D4, 0x91) // Device-Specific
        }

        Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
        {
            Return (0x0ADE)
        }

        Name (PTYP, Zero)
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (CondRefOf (\_SB.PR00._PSS))
            {
                Return (\_SB.PR00._PSS ())
            }
            Else
            {
                Return (Package (0x02)
                {
                    Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
            }
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If (CondRefOf (\_SB.PR00._TSS))
            {
                Return (\_SB.PR00._TSS ())
            }
            Else
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
            }
        }

        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            If (CondRefOf (\_SB.PR00._TPC))
            {
                Return (\_SB.PR00._TPC) /* External reference */
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            If ((CondRefOf (\PC00) && (\PC00 != 0x80000000)))
            {
                If ((\PC00 & 0x04))
                {
                    Return (Package (0x02)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x05,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001810, // Address
                                ,)
                        }, 

                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x05,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001810, // Address
                                ,)
                        }
                    })
                }
            }
            Else
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (CondRefOf (\_SB.PR00._TSD))
            {
                Return (\_SB.PR00._TSD ())
            }
            Else
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        0xFC, 
                        Zero
                    }
                })
            }
        }

        Method (_TDL, 0, NotSerialized)  // _TDL: T-State Depth Limit
        {
            If ((CondRefOf (\_SB.PR00._TSS) && CondRefOf (\_SB.CFGD)))
            {
                If ((\_SB.CFGD & 0x2000))
                {
                    Return ((SizeOf (\_SB.PR00.TSMF) - One))
                }
                Else
                {
                    Return ((SizeOf (\_SB.PR00.TSMC) - One))
                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PDL, 0, NotSerialized)  // _PDL: P-state Depth Limit
        {
            If (CondRefOf (\_SB.PR00._PSS))
            {
                If ((\_SB.OSCP & 0x0400))
                {
                    Return ((SizeOf (\_SB.PR00.TPSS) - One))
                }
                Else
                {
                    Return ((SizeOf (\_SB.PR00.LPSS) - One))
                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
        {
            Return (\CPUS) /* External reference */
        }

        Method (_AC0, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            If ((\ATMC == Zero))
            {
                Return (0xFFFFFFFF)
            }

            Local1 = \_SB.IETM.CTOK (\ATMC)
            If ((LSTM >= Local1))
            {
                Return ((Local1 - 0x14))
            }
            Else
            {
                Return (Local1)
            }
        }

        Method (_AC1, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            If ((\ATMC == Zero))
            {
                Return (0xFFFFFFFF)
            }

            Local0 = \_SB.IETM.CTOK (\ATMC)
            Local0 -= 0x32
            If ((LSTM >= Local0))
            {
                Return ((Local0 - 0x14))
            }
            Else
            {
                Return (Local0)
            }
        }

        Method (_AC2, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            If ((\ATMC == Zero))
            {
                Return (0xFFFFFFFF)
            }

            Local0 = \_SB.IETM.CTOK (\ATMC)
            Local0 -= 0x64
            If ((LSTM >= Local0))
            {
                Return ((Local0 - 0x14))
            }
            Else
            {
                Return (Local0)
            }
        }

        Method (_AC3, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            If ((\ATMC == Zero))
            {
                Return (0xFFFFFFFF)
            }

            Local0 = \_SB.IETM.CTOK (\ATMC)
            Local0 -= 0x96
            If ((LSTM >= Local0))
            {
                Return ((Local0 - 0x14))
            }
            Else
            {
                Return (Local0)
            }
        }

        Method (_AC4, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            If ((\ATMC == Zero))
            {
                Return (0xFFFFFFFF)
            }

            Local0 = \_SB.IETM.CTOK (\ATMC)
            Local0 -= 0xC8
            If ((LSTM >= Local0))
            {
                Return ((Local0 - 0x14))
            }
            Else
            {
                Return (Local0)
            }
        }

        Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
        {
            If ((\PTMC == Zero))
            {
                Return (0xFFFFFFFF)
            }

            Return (\_SB.IETM.CTOK (\PTMC))
        }

        Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
        {
            If ((\SACT == Zero))
            {
                Return (0xFFFFFFFF)
            }

            Return (\_SB.IETM.CTOK (\SACT))
        }

        Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
        {
            If ((\SAC3 == Zero))
            {
                Return (0xFFFFFFFF)
            }

            Return (\_SB.IETM.CTOK (\SAC3))
        }
    }

    Scope (\_SB.PCI0.LPCB.EC0)
    {
        Device (SEN1)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "SEN1")  // _UID: Unique ID
            Name (_STR, Unicode ("EXTZ-External/Remote 1 Sensor"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Name (S1TH, Zero)
            Name (S1TL, Zero)
            Name (S1HO, 0x7D)
            Name (S1LO, 0x05)
            Name (S1CH, Zero)
            Name (S1CL, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\S1DE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    Return (\_TZ.EXTZ._TMP ())
                }
                Else
                {
                    Return (0x0BB8)
                }
            }

            Name (PATC, 0x02)
            Method (PAT0, 1, Serialized)
            {
                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    \_SB.PCI0.LPCB.EC0.CRZN = 0x03
                    Local0 = \_SB.IETM.KTOC (Arg0)
                    If ((Local0 < 0x05))
                    {
                        Local0 = 0x05
                    }

                    \_SB.PCI0.LPCB.EC0.PLTP = Local0
                    S1TL = Local0
                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                }
            }

            Method (PAT1, 1, Serialized)
            {
                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    \_SB.PCI0.LPCB.EC0.CRZN = 0x03
                    Local0 = \_SB.IETM.KTOC (Arg0)
                    If ((Local0 > 0x7D))
                    {
                        Local0 = 0x7D
                    }

                    \_SB.PCI0.LPCB.EC0.PHTP = Local0
                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    S1TH = Local0
                }
            }

            Name (GTSH, 0x14)
            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return (\_SB.IETM.CTOK (S1PT))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                If ((\S1HT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (\S1HT))
            }
        }
    }

    Scope (\_SB.PCI0.LPCB.EC0)
    {
        Device (SEN2)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "SEN2")  // _UID: Unique ID
            Name (_STR, Unicode ("LOCZ-Local/Internal Sensor"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Name (S2TH, Zero)
            Name (S2TL, Zero)
            Name (S2HO, 0x7D)
            Name (S2LO, 0x05)
            Name (S2CH, Zero)
            Name (S2CL, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\S2DE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    Return (\_TZ.LOCZ._TMP ())
                }
                Else
                {
                    Return (0x0BB8)
                }
            }

            Name (PATC, 0x02)
            Method (PAT0, 1, Serialized)
            {
                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    \_SB.PCI0.LPCB.EC0.CRZN = 0x04
                    Local0 = \_SB.IETM.KTOC (Arg0)
                    If ((Local0 < 0x05))
                    {
                        Local0 = 0x05
                    }

                    \_SB.PCI0.LPCB.EC0.PLTP = Local0
                    S2TL = Local0
                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                }
            }

            Method (PAT1, 1, Serialized)
            {
                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    \_SB.PCI0.LPCB.EC0.CRZN = 0x04
                    Local0 = \_SB.IETM.KTOC (Arg0)
                    If ((Local0 > 0x7D))
                    {
                        Local0 = 0x7D
                    }

                    \_SB.PCI0.LPCB.EC0.PHTP = Local0
                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    S2TH = Local0
                }
            }

            Name (GTSH, 0x14)
            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return (\_SB.IETM.CTOK (S2PT))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If ((\S2CT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (\S2CT))
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Name (_TRT, Package (0x03)  // _TRT: Thermal Relationship Table
        {
            Package (0x08)
            {
                \_SB.PCI0.B0D4, 
                \_SB.PCI0.B0D4, 
                0x24, 
                0x32, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x08)
            {
                \_SB.PCI0.B0D4, 
                \_SB.PCI0.LPCB.EC0.SEN1, 
                0x14, 
                0x0258, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x08)
            {
                \_SB.PCI0.B0D4, 
                \_SB.PCI0.LPCB.EC0.SEN2, 
                0x64, 
                0x3C, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }
        })
    }

    Scope (\_SB.IETM)
    {
        Name (PTTL, 0x14)
        Name (PSVT, Package (0x03)
        {
            0x02, 
            Package (0x0C)
            {
                \_SB.PCI0.B0D4, 
                \_SB.PCI0.LPCB.EC0.SEN1, 
                PV1D, 
                PV06, 
                PV01, 
                0x09, 
                0x00010000, 
                "MAX", 
                PV13, 
                PV09, 
                PV0D, 
                Zero
            }, 

            Package (0x0C)
            {
                \_SB.PCI0.B0D4, 
                \_SB.PCI0.LPCB.EC0.SEN2, 
                PV1E, 
                PV07, 
                PV02, 
                0x09, 
                0x00010000, 
                "MAX", 
                PV14, 
                PV0A, 
                PV0E, 
                Zero
            }
        })
    }

    Scope (\_SB.IETM)
    {
        Name (DP2P, Package (0x01)
        {
            ToUUID ("9e04115a-ae87-4d1c-9500-0f3e340bfe75") /* Unknown UUID */
        })
        Name (DPSP, Package (0x01)
        {
            ToUUID ("42a441d6-ae6a-462b-a84b-4a8ce79027d3") /* Unknown UUID */
        })
        Name (DASP, Package (0x01)
        {
            ToUUID ("3a95c389-e4b8-4629-a526-c52c88626bae") /* Unknown UUID */
        })
        Name (DA2P, Package (0x01)
        {
            ToUUID ("0e56fab6-bdfc-4e8c-8246-40ecfd4d74ea") /* Unknown UUID */
        })
        Name (DCSP, Package (0x01)
        {
            ToUUID ("97c68ae7-15fa-499c-b8c9-5da81d606e0a") /* Unknown UUID */
        })
        Name (RFIP, Package (0x01)
        {
            ToUUID ("c4ce1849-243a-49f3-b8d5-f97002f38e6a") /* Unknown UUID */
        })
        Name (POBP, Package (0x01)
        {
            ToUUID ("f5a35014-c209-46a4-993a-eb56de7530a1") /* Unknown UUID */
        })
        Name (DAPP, Package (0x01)
        {
            ToUUID ("63be270f-1c11-48fd-a6f7-3af253ff3e2d") /* Unknown UUID */
        })
        Name (DVSP, Package (0x01)
        {
            ToUUID ("6ed722a7-9240-48a5-b479-31eef723d7cf") /* Unknown UUID */
        })
        Name (DPID, Package (0x01)
        {
            ToUUID ("42496e14-bc1b-46e8-a798-ca915464426f") /* Unknown UUID */
        })
    }

    Scope (\_SB.IETM)
    {
        Method (DTDC, 0, NotSerialized)
        {
            \_SB.IETM.ODVP ()
            Notify (\_SB.IETM, 0x88) // Device-Specific
        }

        Method (DTDD, 0, NotSerialized)
        {
            ODV0 = Zero
            \_SB.IETM.ODVP ()
            Notify (\_SB.IETM, 0x88) // Device-Specific
        }

        Method (CCON, 0, NotSerialized)
        {
            ODV1 = One
            \_SB.IETM.ODVP ()
            Notify (\_SB.IETM, 0x88) // Device-Specific
            If (CondRefOf (\_SB.PCI0.LPCB.EC0.UDTS))
            {
                \_SB.PCI0.LPCB.EC0.UDTS (Zero, Zero)
            }
        }

        Method (CCOF, 0, NotSerialized)
        {
            ODV1 = Zero
            \_SB.IETM.ODVP ()
            Notify (\_SB.IETM, 0x88) // Device-Specific
            If (CondRefOf (\_SB.PCI0.LPCB.EC0.UDTS))
            {
                \_SB.PCI0.LPCB.EC0.UDTS (Zero, Zero)
            }
        }
    }

    Scope (\_SB.IETM)
    {
    }

    Scope (\_SB.IETM)
    {
        Method (GDDV, 0, Serialized)
        {
            Return (Package (0x01)
            {
                Buffer (0x043D)
                {
                    /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                    /* 0030 */  0x45, 0x6D, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,  // Embedded
                    /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                    /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0xF6, 0x99, 0x80, 0xA5,  // ........
                    /* 0070 */  0x4F, 0x14, 0x7C, 0x09, 0xC8, 0xFB, 0xAF, 0xDB,  // O.|.....
                    /* 0078 */  0x66, 0x80, 0x76, 0x62, 0x5E, 0x4D, 0xAE, 0xD1,  // f.vb^M..
                    /* 0080 */  0xED, 0x86, 0x94, 0x36, 0x0F, 0x19, 0x27, 0x5B,  // ...6..'[
                    /* 0088 */  0xC1, 0xE4, 0x87, 0xC9, 0xA9, 0x03, 0x00, 0x00,  // ........
                    /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                    /* 0098 */  0x01, 0x41, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00,  // .A5.....
                    /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                    /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                    /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                    /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                    /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                    /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x44, 0x8B, 0xA7,  // u8...D..
                    /* 00D0 */  0xE8, 0xA0, 0x49, 0xD1, 0xF4, 0xBE, 0x0E, 0x35,  // ..I....5
                    /* 00D8 */  0xE5, 0x55, 0x7B, 0xEC, 0xC6, 0x26, 0xAF, 0x3F,  // .U{..&.?
                    /* 00E0 */  0x31, 0x8B, 0x29, 0x9B, 0x66, 0x11, 0x77, 0xCF,  // 1.).f.w.
                    /* 00E8 */  0xE2, 0x8D, 0x46, 0xDB, 0xE2, 0xD9, 0xBD, 0x68,  // ..F....h
                    /* 00F0 */  0x57, 0x02, 0xFF, 0x45, 0x10, 0x10, 0xEE, 0x89,  // W..E....
                    /* 00F8 */  0xD6, 0x34, 0x50, 0x18, 0xD8, 0x32, 0x43, 0x03,  // .4P..2C.
                    /* 0100 */  0x0E, 0x51, 0x37, 0x4E, 0x0C, 0xCE, 0xF8, 0x1F,  // .Q7N....
                    /* 0108 */  0xE2, 0x36, 0x38, 0x76, 0x1C, 0x4F, 0xE9, 0xC5,  // .68v.O..
                    /* 0110 */  0x71, 0xE9, 0x4C, 0x7A, 0xC2, 0x66, 0xDC, 0x76,  // q.Lz.f.v
                    /* 0118 */  0x5B, 0xFD, 0x11, 0xFD, 0x32, 0x22, 0x52, 0x66,  // [...2"Rf
                    /* 0120 */  0x9B, 0xF0, 0x09, 0xA2, 0xBD, 0x9B, 0x05, 0x20,  // ....... 
                    /* 0128 */  0x3B, 0xA2, 0x65, 0xDB, 0xC1, 0x3B, 0x89, 0x33,  // ;.e..;.3
                    /* 0130 */  0xA3, 0xD8, 0x3B, 0x44, 0xD1, 0x30, 0x74, 0xCA,  // ..;D.0t.
                    /* 0138 */  0xA6, 0x96, 0xB9, 0x85, 0x1D, 0x66, 0x8E, 0x81,  // .....f..
                    /* 0140 */  0xDA, 0x24, 0x7A, 0xB1, 0x86, 0x4A, 0x6B, 0x3F,  // .$z..Jk?
                    /* 0148 */  0x53, 0xC2, 0x0C, 0xFC, 0x70, 0xC9, 0x7C, 0x0F,  // S...p.|.
                    /* 0150 */  0x7A, 0x88, 0xE0, 0x8D, 0xBA, 0x3E, 0x19, 0x74,  // z....>.t
                    /* 0158 */  0x28, 0x04, 0xD1, 0x42, 0xD9, 0xF9, 0x4E, 0x4C,  // (..B..NL
                    /* 0160 */  0x53, 0xCF, 0xAA, 0xE1, 0x5E, 0xA6, 0xEA, 0x72,  // S...^..r
                    /* 0168 */  0xE1, 0xB8, 0xC2, 0xAC, 0x65, 0x70, 0x8F, 0xBE,  // ....ep..
                    /* 0170 */  0xAA, 0x36, 0x82, 0x42, 0xC8, 0x0F, 0xD0, 0xC7,  // .6.B....
                    /* 0178 */  0x71, 0xB6, 0x8B, 0xB4, 0x59, 0x07, 0xE1, 0xB1,  // q...Y...
                    /* 0180 */  0x96, 0xF0, 0xE0, 0xCD, 0x2D, 0xB1, 0xE2, 0xAE,  // ....-...
                    /* 0188 */  0xB1, 0x26, 0x1C, 0x3F, 0x7A, 0x23, 0x65, 0x06,  // .&.?z#e.
                    /* 0190 */  0xB5, 0x47, 0x1C, 0xB4, 0x85, 0xEE, 0x07, 0x67,  // .G.....g
                    /* 0198 */  0xE5, 0xCB, 0xC2, 0xA5, 0x6A, 0x03, 0x03, 0x8B,  // ....j...
                    /* 01A0 */  0x5A, 0x66, 0xB0, 0x4E, 0xA8, 0x9B, 0x27, 0xE5,  // Zf.N..'.
                    /* 01A8 */  0x4E, 0xD1, 0x6C, 0xF6, 0xFE, 0x16, 0xD1, 0x5E,  // N.l....^
                    /* 01B0 */  0x33, 0xBF, 0x65, 0x17, 0x1D, 0xC7, 0x4B, 0xD7,  // 3.e...K.
                    /* 01B8 */  0x82, 0x93, 0x0A, 0x1D, 0xCE, 0x3C, 0xF8, 0x37,  // .....<.7
                    /* 01C0 */  0x89, 0x8E, 0x01, 0x69, 0x7E, 0xBB, 0xCE, 0x0B,  // ...i~...
                    /* 01C8 */  0x97, 0xE0, 0xE3, 0x29, 0xD0, 0x90, 0xDF, 0x3D,  // ...)...=
                    /* 01D0 */  0x4F, 0xEC, 0xCC, 0x65, 0x65, 0x4E, 0xB0, 0x97,  // O..eeN..
                    /* 01D8 */  0x7F, 0x1E, 0x38, 0x0E, 0x88, 0x82, 0xA3, 0xD4,  // ..8.....
                    /* 01E0 */  0xC5, 0xEA, 0x4E, 0x31, 0x21, 0x22, 0x1E, 0xF9,  // ..N1!"..
                    /* 01E8 */  0x0D, 0x0F, 0x2F, 0x03, 0x2A, 0xAB, 0xCF, 0xCB,  // ../.*...
                    /* 01F0 */  0x07, 0x6D, 0xF2, 0x1A, 0xCB, 0xAC, 0x95, 0x98,  // .m......
                    /* 01F8 */  0x23, 0x4E, 0x98, 0xAB, 0xBF, 0x2B, 0x17, 0x8B,  // #N...+..
                    /* 0200 */  0x02, 0xB0, 0x96, 0xDB, 0x87, 0x11, 0x49, 0x30,  // ......I0
                    /* 0208 */  0xC7, 0x65, 0xBD, 0x54, 0x3E, 0x46, 0xAC, 0xAE,  // .e.T>F..
                    /* 0210 */  0x1D, 0x65, 0x6B, 0x39, 0xDF, 0x47, 0xC6, 0x22,  // .ek9.G."
                    /* 0218 */  0x87, 0xF7, 0x7E, 0xEC, 0x1B, 0x16, 0xDB, 0x74,  // ..~....t
                    /* 0220 */  0x88, 0xCB, 0x2C, 0x89, 0x6F, 0xCB, 0x0D, 0x7D,  // ..,.o..}
                    /* 0228 */  0xF6, 0xBA, 0x38, 0x43, 0x8E, 0xC5, 0xDA, 0xE3,  // ..8C....
                    /* 0230 */  0x6F, 0x94, 0x0B, 0x1B, 0xC4, 0xD6, 0xE3, 0xF8,  // o.......
                    /* 0238 */  0x78, 0x2A, 0x1E, 0x23, 0x13, 0x16, 0xC4, 0x2F,  // x*.#.../
                    /* 0240 */  0x47, 0x62, 0x95, 0x10, 0xC5, 0xF2, 0x91, 0x51,  // Gb.....Q
                    /* 0248 */  0xB7, 0x37, 0x69, 0xB3, 0x9C, 0x87, 0x98, 0x59,  // .7i....Y
                    /* 0250 */  0xC2, 0x4C, 0x30, 0x2A, 0xEE, 0x44, 0xEA, 0x65,  // .L0*.D.e
                    /* 0258 */  0xD5, 0x9F, 0x6A, 0x05, 0x46, 0x6F, 0x5F, 0x0C,  // ..j.Fo_.
                    /* 0260 */  0xF7, 0x19, 0x44, 0xA6, 0x15, 0xB8, 0x54, 0x78,  // ..D...Tx
                    /* 0268 */  0x9B, 0x1B, 0x97, 0x11, 0x56, 0xFD, 0xD9, 0xE0,  // ....V...
                    /* 0270 */  0x9C, 0xE0, 0x48, 0x19, 0x94, 0x8B, 0x4B, 0x9E,  // ..H...K.
                    /* 0278 */  0xC7, 0x83, 0x39, 0xCB, 0xC5, 0xFE, 0x33, 0x0D,  // ..9...3.
                    /* 0280 */  0x4C, 0x41, 0x2E, 0x1C, 0x73, 0x60, 0xA7, 0xC7,  // LA..s`..
                    /* 0288 */  0x5D, 0xF0, 0x39, 0x9A, 0xCA, 0xEE, 0x96, 0x05,  // ].9.....
                    /* 0290 */  0x5C, 0x66, 0x7F, 0xAC, 0xF0, 0x45, 0xFC, 0x96,  // \f...E..
                    /* 0298 */  0x02, 0xE1, 0x08, 0xE6, 0x6B, 0x04, 0xCD, 0x42,  // ....k..B
                    /* 02A0 */  0xD6, 0xCC, 0x46, 0xEB, 0xA7, 0x50, 0x34, 0x77,  // ..F..P4w
                    /* 02A8 */  0xB4, 0xFB, 0xF3, 0x39, 0x1E, 0x69, 0xA9, 0x64,  // ...9.i.d
                    /* 02B0 */  0x44, 0x39, 0x2D, 0x2F, 0xBE, 0x94, 0x86, 0x37,  // D9-/...7
                    /* 02B8 */  0xFA, 0x7F, 0x46, 0x5A, 0xB7, 0xDD, 0x32, 0x72,  // ..FZ..2r
                    /* 02C0 */  0xB6, 0xC0, 0xA8, 0xD9, 0x05, 0x07, 0xED, 0xDE,  // ........
                    /* 02C8 */  0x8B, 0x69, 0x4E, 0x0A, 0xA9, 0x5D, 0xF9, 0xBD,  // .iN..]..
                    /* 02D0 */  0x94, 0x24, 0x09, 0xEF, 0x89, 0x39, 0x99, 0x0C,  // .$...9..
                    /* 02D8 */  0x28, 0xFA, 0xC5, 0xAA, 0x37, 0x69, 0xD1, 0xE1,  // (...7i..
                    /* 02E0 */  0x8E, 0x30, 0x90, 0xE9, 0x81, 0xB3, 0xFD, 0x8D,  // .0......
                    /* 02E8 */  0x2B, 0x3B, 0x8E, 0xAB, 0x03, 0x9A, 0x52, 0xC9,  // +;....R.
                    /* 02F0 */  0x33, 0x7F, 0x4D, 0x0A, 0x52, 0x65, 0x19, 0x1A,  // 3.M.Re..
                    /* 02F8 */  0x05, 0xD9, 0x10, 0xA1, 0x44, 0x83, 0xD3, 0x65,  // ....D..e
                    /* 0300 */  0xC3, 0xD8, 0x3C, 0xAE, 0x6A, 0xE3, 0xDE, 0x7E,  // ..<.j..~
                    /* 0308 */  0x73, 0x21, 0x7C, 0xD4, 0x8E, 0x72, 0x5C, 0x92,  // s!|..r\.
                    /* 0310 */  0x47, 0x72, 0x4E, 0x15, 0x52, 0x97, 0x61, 0x50,  // GrN.R.aP
                    /* 0318 */  0x52, 0x54, 0x37, 0x33, 0x5B, 0xDB, 0x8B, 0x37,  // RT73[..7
                    /* 0320 */  0xD4, 0xFF, 0xA7, 0x48, 0xD2, 0x02, 0x91, 0x9E,  // ...H....
                    /* 0328 */  0x71, 0x38, 0xD5, 0xB0, 0x05, 0x0E, 0xE0, 0x89,  // q8......
                    /* 0330 */  0x85, 0x99, 0xB1, 0xCC, 0x85, 0xCC, 0xDD, 0xF9,  // ........
                    /* 0338 */  0x95, 0x63, 0xB9, 0x67, 0xBA, 0xED, 0xDA, 0x8D,  // .c.g....
                    /* 0340 */  0x4A, 0x88, 0xB3, 0x00, 0x8E, 0xE4, 0x76, 0xA9,  // J.....v.
                    /* 0348 */  0x2F, 0xF7, 0xE4, 0x09, 0x03, 0x88, 0x7C, 0x4C,  // /.....|L
                    /* 0350 */  0x60, 0xDF, 0x5A, 0xDC, 0xFD, 0x68, 0x5B, 0x99,  // `.Z..h[.
                    /* 0358 */  0x13, 0x9A, 0x6D, 0xA4, 0x42, 0x00, 0xE7, 0xED,  // ..m.B...
                    /* 0360 */  0x6A, 0x6B, 0x51, 0x50, 0xBE, 0x28, 0x53, 0x5C,  // jkQP.(S\
                    /* 0368 */  0x98, 0x3B, 0x19, 0x88, 0xF5, 0x9E, 0x7B, 0x3E,  // .;....{>
                    /* 0370 */  0xC1, 0xA1, 0x95, 0x19, 0x3D, 0x80, 0xA2, 0x8F,  // ....=...
                    /* 0378 */  0x91, 0x1E, 0x4A, 0xAA, 0x91, 0xC1, 0xFF, 0x6B,  // ..J....k
                    /* 0380 */  0xB1, 0x9D, 0x3F, 0xB1, 0xB5, 0x26, 0x49, 0x03,  // ..?..&I.
                    /* 0388 */  0xFC, 0x2B, 0x66, 0x2B, 0x11, 0xA1, 0xA9, 0xE9,  // .+f+....
                    /* 0390 */  0x47, 0x33, 0xAD, 0x2E, 0xA7, 0x58, 0xE3, 0x70,  // G3...X.p
                    /* 0398 */  0xC6, 0xED, 0xB9, 0xA6, 0x17, 0x2D, 0xEB, 0x09,  // .....-..
                    /* 03A0 */  0x0F, 0x8A, 0x75, 0x11, 0xC3, 0x90, 0xEF, 0x4A,  // ..u....J
                    /* 03A8 */  0x72, 0xFC, 0xD0, 0xC6, 0x50, 0x82, 0xF4, 0xC6,  // r...P...
                    /* 03B0 */  0x8A, 0xFF, 0xC8, 0x48, 0x53, 0xA0, 0x6E, 0x65,  // ...HS.ne
                    /* 03B8 */  0xB8, 0x7A, 0xFC, 0x31, 0x2E, 0xD9, 0xE9, 0x7A,  // .z.1...z
                    /* 03C0 */  0x50, 0x49, 0x17, 0xA5, 0x01, 0x9B, 0xD5, 0x57,  // PI.....W
                    /* 03C8 */  0x9B, 0xF0, 0xF0, 0xAE, 0xBA, 0x44, 0x37, 0xD2,  // .....D7.
                    /* 03D0 */  0x53, 0xD7, 0xAA, 0x4E, 0xEB, 0x4C, 0xD7, 0xE1,  // S..N.L..
                    /* 03D8 */  0x47, 0x1D, 0x15, 0x29, 0xC7, 0xEB, 0x11, 0x58,  // G..)...X
                    /* 03E0 */  0x8C, 0x39, 0x5C, 0xBA, 0xB5, 0x42, 0xD9, 0xD3,  // .9\..B..
                    /* 03E8 */  0x42, 0x45, 0xEA, 0x9A, 0xED, 0x13, 0x71, 0xDA,  // BE....q.
                    /* 03F0 */  0x33, 0x1D, 0x07, 0x32, 0xB0, 0x7F, 0x64, 0xBA,  // 3..2..d.
                    /* 03F8 */  0xCE, 0x0B, 0x61, 0x81, 0xE1, 0xD3, 0x16, 0x23,  // ..a....#
                    /* 0400 */  0x29, 0x5D, 0xAF, 0x3B, 0xB5, 0xD1, 0x60, 0x1F,  // )].;..`.
                    /* 0408 */  0x48, 0xD2, 0xF6, 0x48, 0xC5, 0x25, 0x83, 0x22,  // H..H.%."
                    /* 0410 */  0x9C, 0x96, 0xCF, 0x75, 0x25, 0x45, 0x8B, 0xEA,  // ...u%E..
                    /* 0418 */  0x6E, 0xE8, 0xA6, 0x94, 0x5E, 0x2F, 0xCD, 0x7A,  // n...^/.z
                    /* 0420 */  0xDB, 0xB5, 0xA7, 0xDF, 0xD1, 0xE0, 0x71, 0xE4,  // ......q.
                    /* 0428 */  0xEF, 0xF1, 0x6F, 0x5C, 0x37, 0xB2, 0x49, 0x3A,  // ..o\7.I:
                    /* 0430 */  0x61, 0xBD, 0x5D, 0x1C, 0xAB, 0xBC, 0xD8, 0x67,  // a.]....g
                    /* 0438 */  0x68, 0xFB, 0x9A, 0x3A, 0x00                     // h..:.
                }
            })
        }

        Method (IMOK, 1, NotSerialized)
        {
            ADBG ("IMOK")
            ADBG (Arg0)
            Return (Arg0)
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 2, "CtdpB", "CtdpB", 0x00001000)
{
    External (_SB_.CPPC, IntObj)
    External (_SB_.OSCP, IntObj)
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.GMHB, MethodObj)    // 0 Arguments
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR00.LPSS, PkgObj)
    External (_SB_.PR00.TPSS, PkgObj)
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (PNHM, FieldUnitObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PCI0)
    {
        OperationRegion (MBAR, SystemMemory, (\_SB.PCI0.GMHB () + 0x5000), 0x1000)
        Field (MBAR, ByteAcc, NoLock, Preserve)
        {
            Offset (0x930), 
            PTDP,   15, 
            Offset (0x932), 
            PMIN,   15, 
            Offset (0x934), 
            PMAX,   15, 
            Offset (0x936), 
            TMAX,   7, 
            Offset (0x938), 
            PWRU,   4, 
            Offset (0x939), 
            EGYU,   5, 
            Offset (0x93A), 
            TIMU,   4, 
            Offset (0x958), 
            Offset (0x95C), 
            LPMS,   1, 
            CTNL,   2, 
            Offset (0x9A0), 
            PPL1,   15, 
            PL1E,   1, 
                ,   1, 
            PL1T,   7, 
            Offset (0x9A4), 
            PPL2,   15, 
            PL2E,   1, 
                ,   1, 
            PL2T,   7, 
            Offset (0xF3C), 
            TARN,   8, 
            Offset (0xF40), 
            PTD1,   15, 
            Offset (0xF42), 
            TAR1,   8, 
            Offset (0xF44), 
            PMX1,   15, 
            Offset (0xF46), 
            PMN1,   15, 
            Offset (0xF48), 
            PTD2,   15, 
            Offset (0xF4A), 
            TAR2,   8, 
            Offset (0xF4C), 
            PMX2,   15, 
            Offset (0xF4E), 
            PMN2,   15, 
            Offset (0xF50), 
            CTCL,   2, 
                ,   29, 
            CLCK,   1, 
            TAR,    8
        }

        Method (CTCU, 0, NotSerialized)
        {
            PPL1 = PTD2 /* \_SB_.PCI0.PTD2 */
            PL1E = One
            PPL2 = CLC2 (PTD2)
            PL2E = One
            SPPC (One)
            TAR = (TAR2 - One)
            CTCL = 0x02
        }

        Method (CTCN, 0, NotSerialized)
        {
            If ((CTCL == One))
            {
                PPL1 = PTDP /* \_SB_.PCI0.PTDP */
                PL1E = One
                PPL2 = CLC2 (PTDP)
                PL2E = One
                NPPC (TARN)
                TAR = (TARN - One)
                CTCL = Zero
            }
            ElseIf ((CTCL == 0x02))
            {
                CTCL = Zero
                TAR = (TARN - One)
                NPPC (TARN)
                PPL2 = CLC2 (PTDP)
                PL2E = One
                PPL1 = PTDP /* \_SB_.PCI0.PTDP */
                PL1E = One
            }
        }

        Method (CTCD, 0, NotSerialized)
        {
            CTCL = One
            TAR = (TAR1 - One)
            NPPC (TAR1)
            PPL2 = CLC2 (PTD1)
            PL2E = One
            PPL1 = PTD1 /* \_SB_.PCI0.PTD1 */
            PL1E = One
        }

        Method (NPPC, 1, NotSerialized)
        {
            Name (TRAT, Zero)
            Name (PRAT, Zero)
            Name (TMPI, Zero)
            TRAT = Arg0
            If ((\_SB.OSCP & 0x0400))
            {
                TMPI = SizeOf (\_SB.PR00.TPSS)
            }
            Else
            {
                TMPI = SizeOf (\_SB.PR00.LPSS)
            }

            While ((TMPI != Zero))
            {
                TMPI--
                If ((\_SB.OSCP & 0x0400))
                {
                    PRAT = DerefOf (DerefOf (\_SB.PR00.TPSS [TMPI]) [0x04])
                }
                Else
                {
                    PRAT = DerefOf (DerefOf (\_SB.PR00.LPSS [TMPI]) [0x04])
                }

                PRAT >>= 0x08
                If ((PRAT >= TRAT))
                {
                    SPPC (TMPI)
                    Break
                }
            }
        }

        Method (SPPC, 1, Serialized)
        {
            \_SB.CPPC = Arg0
            Switch (ToInteger (TCNT))
            {
                Case (0x10)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                    Notify (\_SB.PR08, 0x80) // Status Change
                    Notify (\_SB.PR09, 0x80) // Status Change
                    Notify (\_SB.PR10, 0x80) // Status Change
                    Notify (\_SB.PR11, 0x80) // Status Change
                    Notify (\_SB.PR12, 0x80) // Status Change
                    Notify (\_SB.PR13, 0x80) // Status Change
                    Notify (\_SB.PR14, 0x80) // Status Change
                    Notify (\_SB.PR15, 0x80) // Status Change
                }
                Case (0x0E)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                    Notify (\_SB.PR08, 0x80) // Status Change
                    Notify (\_SB.PR09, 0x80) // Status Change
                    Notify (\_SB.PR10, 0x80) // Status Change
                    Notify (\_SB.PR11, 0x80) // Status Change
                    Notify (\_SB.PR12, 0x80) // Status Change
                    Notify (\_SB.PR13, 0x80) // Status Change
                }
                Case (0x0C)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                    Notify (\_SB.PR08, 0x80) // Status Change
                    Notify (\_SB.PR09, 0x80) // Status Change
                    Notify (\_SB.PR10, 0x80) // Status Change
                    Notify (\_SB.PR11, 0x80) // Status Change
                }
                Case (0x0A)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                    Notify (\_SB.PR08, 0x80) // Status Change
                    Notify (\_SB.PR09, 0x80) // Status Change
                }
                Case (0x08)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                }
                Case (0x07)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                }
                Case (0x06)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                }
                Case (0x05)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                }
                Case (0x04)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                }
                Case (0x03)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                }
                Case (0x02)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                }
                Default
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                }

            }
        }

        Method (CLC2, 1, Serialized)
        {
            Local0 = (PNHM & 0x0FFF0FF0)
            Switch (ToInteger (Local0))
            {
                Case (0x000306C0)
                {
                    Return (((Arg0 * 0x05) / 0x04))
                }
                Case (0x00040650)
                {
                    Return (0xC8)
                }
                Default
                {
                    Return (((Arg0 * 0x05) / 0x04))
                }

            }
        }
    }
}



SSDT13
------
DefinitionBlock ("", "SSDT", 1, "HP", "HPINNBWL", 0x00001000)
{
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.CNIP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.CNVW, DeviceObj)
    External (_SB_.PCI0.RP09.PXSX, DeviceObj)
    External (_SB_.SLPB, DeviceObj)
    External (ADBG, MethodObj)    // 1 Arguments
    External (DOM1, FieldUnitObj)
    External (DOM2, FieldUnitObj)
    External (DOM3, FieldUnitObj)
    External (DS21, FieldUnitObj)
    External (DS22, FieldUnitObj)
    External (DS23, FieldUnitObj)
    External (DS24, FieldUnitObj)
    External (DS25, FieldUnitObj)
    External (DS26, FieldUnitObj)
    External (DS27, FieldUnitObj)
    External (DS28, FieldUnitObj)
    External (DS29, FieldUnitObj)
    External (DS2A, FieldUnitObj)
    External (DS31, FieldUnitObj)
    External (DS32, FieldUnitObj)
    External (DS33, FieldUnitObj)
    External (DS34, FieldUnitObj)
    External (DS35, FieldUnitObj)
    External (DS36, FieldUnitObj)
    External (DS37, FieldUnitObj)
    External (DS38, FieldUnitObj)
    External (DS39, FieldUnitObj)
    External (DS3A, FieldUnitObj)
    External (DS41, FieldUnitObj)
    External (DS42, FieldUnitObj)
    External (DS43, FieldUnitObj)
    External (DS44, FieldUnitObj)
    External (DS45, FieldUnitObj)
    External (DS46, FieldUnitObj)
    External (DS47, FieldUnitObj)
    External (DS48, FieldUnitObj)
    External (DS49, FieldUnitObj)
    External (DS4A, FieldUnitObj)
    External (DWNS, FieldUnitObj)
    External (DWRS, FieldUnitObj)
    External (LIM1, FieldUnitObj)
    External (LIM2, FieldUnitObj)
    External (LIM3, FieldUnitObj)
    External (NF2A, FieldUnitObj)
    External (NF2B, FieldUnitObj)
    External (NF2M, FieldUnitObj)
    External (NF5A, FieldUnitObj)
    External (NF5B, FieldUnitObj)
    External (NF5M, FieldUnitObj)
    External (NJ2A, FieldUnitObj)
    External (NJ2B, FieldUnitObj)
    External (NJ2M, FieldUnitObj)
    External (NJ5A, FieldUnitObj)
    External (NJ5B, FieldUnitObj)
    External (NJ5M, FieldUnitObj)
    External (NR2A, FieldUnitObj)
    External (NR2B, FieldUnitObj)
    External (NR2M, FieldUnitObj)
    External (NR5A, FieldUnitObj)
    External (NR5B, FieldUnitObj)
    External (NR5M, FieldUnitObj)
    External (RMRC, FieldUnitObj)
    External (TIM1, FieldUnitObj)
    External (TIM2, FieldUnitObj)
    External (TIM3, FieldUnitObj)
    External (TRD0, FieldUnitObj)
    External (TRD1, FieldUnitObj)
    External (TRL0, FieldUnitObj)
    External (TRL1, FieldUnitObj)
    External (WGEN, FieldUnitObj)
    External (WGR1, FieldUnitObj)
    External (WGR2, FieldUnitObj)
    External (WGR3, FieldUnitObj)
    External (WGR4, FieldUnitObj)
    External (WRD1, FieldUnitObj)
    External (WRD2, FieldUnitObj)
    External (WTX0, FieldUnitObj)
    External (WTX1, FieldUnitObj)
    External (WTX2, FieldUnitObj)
    External (WTX3, FieldUnitObj)
    External (WTX4, FieldUnitObj)
    External (WTX5, FieldUnitObj)
    External (WTX6, FieldUnitObj)
    External (WTX7, FieldUnitObj)
    External (WTX8, FieldUnitObj)
    External (WTX9, FieldUnitObj)
    External (WTXE, FieldUnitObj)

    Scope (\_SB)
    {
        Scope (\_SB.PCI0.RP09.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x10)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32
            }

            OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = \DOM1 /* External reference */
                DerefOf (SPLX [One]) [One] = \LIM1 /* External reference */
                DerefOf (SPLX [One]) [0x02] = \TIM1 /* External reference */
                DerefOf (SPLX [0x02]) [Zero] = \DOM2 /* External reference */
                DerefOf (SPLX [0x02]) [One] = \LIM2 /* External reference */
                DerefOf (SPLX [0x02]) [0x02] = \TIM2 /* External reference */
                DerefOf (SPLX [0x03]) [Zero] = \DOM3 /* External reference */
                DerefOf (SPLX [0x03]) [One] = \LIM3 /* External reference */
                DerefOf (SPLX [0x03]) [0x02] = \TIM3 /* External reference */
                Return (SPLX) /* \_SB_.PCI0.RP09.PXSX.SPLX */
            }

            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("PXSX _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("PXSX _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("PXSX _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("PXSX _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP09.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
            {
                WRST
            })
            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = \TRD0 /* External reference */
                DerefOf (WANX [One]) [0x02] = \TRL0 /* External reference */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = \TRD1 /* External reference */
                DerefOf (WANX [0x02]) [0x02] = \TRL1 /* External reference */
                Return (WANX) /* \_SB_.PCI0.RP09.PXSX.WANX */
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("079ff457-64a8-44be-bd8a-6955052b9b92") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Switch (Arg1)
                                {
                                    Case (One)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x03                                             // .
                                        })
                                    }

                                }

                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (RMRC) /* External reference */
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = 0x07
                DerefOf (WRDX [One]) [One] = \WRD1 /* External reference */
                DerefOf (WRDX [0x02]) [Zero] = 0x10
                DerefOf (WRDX [0x02]) [One] = \WRD2 /* External reference */
                Return (WRDX) /* \_SB_.PCI0.RP09.PXSX.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = \WTXE /* External reference */
                DerefOf (WRDY [One]) [0x02] = \WTX0 /* External reference */
                DerefOf (WRDY [One]) [0x03] = \WTX1 /* External reference */
                DerefOf (WRDY [One]) [0x04] = \WTX2 /* External reference */
                DerefOf (WRDY [One]) [0x05] = \WTX3 /* External reference */
                DerefOf (WRDY [One]) [0x06] = \WTX4 /* External reference */
                DerefOf (WRDY [One]) [0x07] = \WTX5 /* External reference */
                DerefOf (WRDY [One]) [0x08] = \WTX6 /* External reference */
                DerefOf (WRDY [One]) [0x09] = \WTX7 /* External reference */
                DerefOf (WRDY [One]) [0x0A] = \WTX8 /* External reference */
                DerefOf (WRDY [One]) [0x0B] = \WTX9 /* External reference */
                DerefOf (WRDY [0x02]) [One] = \WGEN /* External reference */
                DerefOf (WRDY [0x02]) [0x02] = \WGR1 /* External reference */
                DerefOf (WRDY [0x02]) [0x03] = \WGR2 /* External reference */
                DerefOf (WRDY [0x02]) [0x04] = \WGR3 /* External reference */
                DerefOf (WRDY [0x02]) [0x05] = \WGR4 /* External reference */
                Return (WRDY) /* \_SB_.PCI0.RP09.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = \DWRS /* External reference */
                DerefOf (EWRY [One]) [0x02] = \DWNS /* External reference */
                DerefOf (EWRY [One]) [0x03] = \DS21 /* External reference */
                DerefOf (EWRY [One]) [0x04] = \DS22 /* External reference */
                DerefOf (EWRY [One]) [0x05] = \DS23 /* External reference */
                DerefOf (EWRY [One]) [0x06] = \DS24 /* External reference */
                DerefOf (EWRY [One]) [0x07] = \DS25 /* External reference */
                DerefOf (EWRY [One]) [0x08] = \DS26 /* External reference */
                DerefOf (EWRY [One]) [0x09] = \DS27 /* External reference */
                DerefOf (EWRY [One]) [0x0A] = \DS28 /* External reference */
                DerefOf (EWRY [One]) [0x0B] = \DS29 /* External reference */
                DerefOf (EWRY [One]) [0x0C] = \DS2A /* External reference */
                DerefOf (EWRY [One]) [0x0D] = \DS31 /* External reference */
                DerefOf (EWRY [One]) [0x0E] = \DS32 /* External reference */
                DerefOf (EWRY [One]) [0x0F] = \DS33 /* External reference */
                DerefOf (EWRY [One]) [0x10] = \DS34 /* External reference */
                DerefOf (EWRY [One]) [0x11] = \DS35 /* External reference */
                DerefOf (EWRY [One]) [0x12] = \DS36 /* External reference */
                DerefOf (EWRY [One]) [0x13] = \DS37 /* External reference */
                DerefOf (EWRY [One]) [0x14] = \DS38 /* External reference */
                DerefOf (EWRY [One]) [0x15] = \DS39 /* External reference */
                DerefOf (EWRY [One]) [0x16] = \DS3A /* External reference */
                DerefOf (EWRY [One]) [0x17] = \DS41 /* External reference */
                DerefOf (EWRY [One]) [0x18] = \DS42 /* External reference */
                DerefOf (EWRY [One]) [0x19] = \DS43 /* External reference */
                DerefOf (EWRY [One]) [0x1A] = \DS44 /* External reference */
                DerefOf (EWRY [One]) [0x1B] = \DS45 /* External reference */
                DerefOf (EWRY [One]) [0x1C] = \DS46 /* External reference */
                DerefOf (EWRY [One]) [0x1D] = \DS47 /* External reference */
                DerefOf (EWRY [One]) [0x1E] = \DS48 /* External reference */
                DerefOf (EWRY [One]) [0x1F] = \DS49 /* External reference */
                DerefOf (EWRY [One]) [0x20] = \DS4A /* External reference */
                Return (EWRY) /* \_SB_.PCI0.RP09.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = \NF2M /* External reference */
                DerefOf (WGDY [One]) [0x02] = \NF2A /* External reference */
                DerefOf (WGDY [One]) [0x03] = \NF2B /* External reference */
                DerefOf (WGDY [One]) [0x04] = \NF5M /* External reference */
                DerefOf (WGDY [One]) [0x05] = \NF5A /* External reference */
                DerefOf (WGDY [One]) [0x06] = \NF5B /* External reference */
                DerefOf (WGDY [One]) [0x07] = \NJ2M /* External reference */
                DerefOf (WGDY [One]) [0x08] = \NJ2A /* External reference */
                DerefOf (WGDY [One]) [0x09] = \NJ2B /* External reference */
                DerefOf (WGDY [One]) [0x0A] = \NJ5M /* External reference */
                DerefOf (WGDY [One]) [0x0B] = \NJ5A /* External reference */
                DerefOf (WGDY [One]) [0x0C] = \NJ5B /* External reference */
                DerefOf (WGDY [One]) [0x0D] = \NR2M /* External reference */
                DerefOf (WGDY [One]) [0x0E] = \NR2A /* External reference */
                DerefOf (WGDY [One]) [0x0F] = \NR2B /* External reference */
                DerefOf (WGDY [One]) [0x10] = \NR5M /* External reference */
                DerefOf (WGDY [One]) [0x11] = \NR5A /* External reference */
                DerefOf (WGDY [One]) [0x12] = \NR5B /* External reference */
                Return (WGDY) /* \_SB_.PCI0.RP09.PXSX.WGDY */
            }
        }
    }

    If (\_SB.PCI0.CNIP ())
    {
        Scope (\_SB.PCI0.CNVW)
        {
            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = 0x07
                DerefOf (WRDX [One]) [One] = \WRD1 /* External reference */
                DerefOf (WRDX [0x02]) [Zero] = 0x10
                DerefOf (WRDX [0x02]) [One] = \WRD2 /* External reference */
                Return (WRDX) /* \_SB_.PCI0.CNVW.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = \WTXE /* External reference */
                DerefOf (WRDY [One]) [0x02] = \WTX0 /* External reference */
                DerefOf (WRDY [One]) [0x03] = \WTX1 /* External reference */
                DerefOf (WRDY [One]) [0x04] = \WTX2 /* External reference */
                DerefOf (WRDY [One]) [0x05] = \WTX3 /* External reference */
                DerefOf (WRDY [One]) [0x06] = \WTX4 /* External reference */
                DerefOf (WRDY [One]) [0x07] = \WTX5 /* External reference */
                DerefOf (WRDY [One]) [0x08] = \WTX6 /* External reference */
                DerefOf (WRDY [One]) [0x09] = \WTX7 /* External reference */
                DerefOf (WRDY [One]) [0x0A] = \WTX8 /* External reference */
                DerefOf (WRDY [One]) [0x0B] = \WTX9 /* External reference */
                DerefOf (WRDY [0x02]) [One] = \WGEN /* External reference */
                DerefOf (WRDY [0x02]) [0x02] = \WGR1 /* External reference */
                DerefOf (WRDY [0x02]) [0x03] = \WGR2 /* External reference */
                DerefOf (WRDY [0x02]) [0x04] = \WGR3 /* External reference */
                DerefOf (WRDY [0x02]) [0x05] = \WGR4 /* External reference */
                Return (WRDY) /* \_SB_.PCI0.CNVW.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = \DWRS /* External reference */
                DerefOf (EWRY [One]) [0x02] = \DWNS /* External reference */
                DerefOf (EWRY [One]) [0x03] = \DS21 /* External reference */
                DerefOf (EWRY [One]) [0x04] = \DS22 /* External reference */
                DerefOf (EWRY [One]) [0x05] = \DS23 /* External reference */
                DerefOf (EWRY [One]) [0x06] = \DS24 /* External reference */
                DerefOf (EWRY [One]) [0x07] = \DS25 /* External reference */
                DerefOf (EWRY [One]) [0x08] = \DS26 /* External reference */
                DerefOf (EWRY [One]) [0x09] = \DS27 /* External reference */
                DerefOf (EWRY [One]) [0x0A] = \DS28 /* External reference */
                DerefOf (EWRY [One]) [0x0B] = \DS29 /* External reference */
                DerefOf (EWRY [One]) [0x0C] = \DS2A /* External reference */
                DerefOf (EWRY [One]) [0x0D] = \DS31 /* External reference */
                DerefOf (EWRY [One]) [0x0E] = \DS32 /* External reference */
                DerefOf (EWRY [One]) [0x0F] = \DS33 /* External reference */
                DerefOf (EWRY [One]) [0x10] = \DS34 /* External reference */
                DerefOf (EWRY [One]) [0x11] = \DS35 /* External reference */
                DerefOf (EWRY [One]) [0x12] = \DS36 /* External reference */
                DerefOf (EWRY [One]) [0x13] = \DS37 /* External reference */
                DerefOf (EWRY [One]) [0x14] = \DS38 /* External reference */
                DerefOf (EWRY [One]) [0x15] = \DS39 /* External reference */
                DerefOf (EWRY [One]) [0x16] = \DS3A /* External reference */
                DerefOf (EWRY [One]) [0x17] = \DS41 /* External reference */
                DerefOf (EWRY [One]) [0x18] = \DS42 /* External reference */
                DerefOf (EWRY [One]) [0x19] = \DS43 /* External reference */
                DerefOf (EWRY [One]) [0x1A] = \DS44 /* External reference */
                DerefOf (EWRY [One]) [0x1B] = \DS45 /* External reference */
                DerefOf (EWRY [One]) [0x1C] = \DS46 /* External reference */
                DerefOf (EWRY [One]) [0x1D] = \DS47 /* External reference */
                DerefOf (EWRY [One]) [0x1E] = \DS48 /* External reference */
                DerefOf (EWRY [One]) [0x1F] = \DS49 /* External reference */
                DerefOf (EWRY [One]) [0x20] = \DS4A /* External reference */
                Return (EWRY) /* \_SB_.PCI0.CNVW.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = \NF2M /* External reference */
                DerefOf (WGDY [One]) [0x02] = \NF2A /* External reference */
                DerefOf (WGDY [One]) [0x03] = \NF2B /* External reference */
                DerefOf (WGDY [One]) [0x04] = \NF5M /* External reference */
                DerefOf (WGDY [One]) [0x05] = \NF5A /* External reference */
                DerefOf (WGDY [One]) [0x06] = \NF5B /* External reference */
                DerefOf (WGDY [One]) [0x07] = \NJ2M /* External reference */
                DerefOf (WGDY [One]) [0x08] = \NJ2A /* External reference */
                DerefOf (WGDY [One]) [0x09] = \NJ2B /* External reference */
                DerefOf (WGDY [One]) [0x0A] = \NJ5M /* External reference */
                DerefOf (WGDY [One]) [0x0B] = \NJ5A /* External reference */
                DerefOf (WGDY [One]) [0x0C] = \NJ5B /* External reference */
                DerefOf (WGDY [One]) [0x0D] = \NR2M /* External reference */
                DerefOf (WGDY [One]) [0x0E] = \NR2A /* External reference */
                DerefOf (WGDY [One]) [0x0F] = \NR2B /* External reference */
                DerefOf (WGDY [One]) [0x10] = \NR5M /* External reference */
                DerefOf (WGDY [One]) [0x11] = \NR5A /* External reference */
                DerefOf (WGDY [One]) [0x12] = \NR5B /* External reference */
                Return (WGDY) /* \_SB_.PCI0.CNVW.WGDY */
            }
        }
    }

    Scope (\_SB.PCI0)
    {
        Method (WHIT, 0, NotSerialized)
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    "*?", 
                    "*?", 
                    Zero, 
                    0x02, 
                    0x02
                }
            })
        }

        Method (SELF, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                "PcOemId", 
                "PcSkuId"
            })
        }
    }
}



SSDT14
------
DefinitionBlock ("", "SSDT", 2, "HPQOEM", "PtidDevc", 0x00001000)
{
    External (PAMT, UnknownObj)

    Scope (\_SB)
    {
        Device (PTID)
        {
            Name (_HID, EisaId ("INT340E") /* Motherboard Resources */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Name (IVER, 0x00030000)
            Name (_STA, 0x0F)  // _STA: Status
            Method (TSDL, 0, NotSerialized)
            {
                Return (TSD1) /* \_SB_.PTID.TSD1 */
            }

            Name (TSD1, Package (0x28)
            {
                Zero, 
                "CPU Core 0 DTS", 
                Zero, 
                "CPU Core 1 DTS", 
                Zero, 
                "CPU Core 2 DTS", 
                Zero, 
                "CPU Core 3 DTS", 
                Zero, 
                "CPU Core Package DTS", 
                0x03, 
                "DIMM0_hotspot_U4C1", 
                0x03, 
                "DIMM1_hotspot_Q4D1", 
                0x03, 
                "IMVP_conn_Q7C1", 
                0x03, 
                "board_hotspot1_U3G3", 
                0x03, 
                "board_hotspot2_Q3G1", 
                Zero, 
                "CPU Package Temperature", 
                0x05, 
                "PCH DTS Temperature from PCH", 
                Zero, 
                "CPU PECI reading", 
                0x05, 
                "SA DTS Temperature from PCH", 
                0x02, 
                "TZ00 _TMP", 
                0x02, 
                "TZ01 _TMP", 
                0x03, 
                "SDRAM_hotspot_RT5B1", 
                0x03, 
                "NGFF_slot_RT6G1", 
                0x03, 
                "IMVP_conn_RT7D1", 
                0x03, 
                "board_hotspot3_RT8F1"
            })
            Name (PSDL, Package (0x22)
            {
                0x0B, 
                "Cpu Power (mW)", 
                0x0B, 
                "Platform Power (mW)", 
                0x0B, 
                "Cpu Average Power (mW)", 
                0x0B, 
                "Platform Average Power (mW)", 
                0x0C, 
                "Battery 1 Design Capacity (mWh)", 
                0x0C, 
                "Battery 1 Remaining Capacity (mWh)", 
                0x0C, 
                "Battery 1 Full Charge Capacity (mWh)", 
                0x0C, 
                "Battery 1 Full Resolution Voltage (mV)", 
                0x0C, 
                "Battery 1 Full Resolution Discharge Current (mA)", 
                0x0C, 
                "Battery 1 Full Resolution Charge Current (mA)", 
                0x0C, 
                "Battery 2 Remaining Capacity (mWh)", 
                0x0C, 
                "Battery 2 Full Charge Capacity (mWh)", 
                0x0C, 
                "Battery 2 Full Resolution Voltage (mV)", 
                0x0C, 
                "Battery 2 Full Resolution Discharge Current (mA)", 
                0x0C, 
                "Battery 2 Full Resolution Charge Current (mA)", 
                0x0C, 
                "Battery Pack 1 maximum power (mW)", 
                0x0C, 
                "Battery Pack 2 maximum power (mW)"
            })
            Method (OSDL, 0, NotSerialized)
            {
                Return (OSD1) /* \_SB_.PTID.OSD1 */
            }

            Name (OSD1, Package (0x15)
            {
                0x04, 
                "CPU Fan Duty Cycle", 
                "RAW", 
                0x04, 
                "CPU Fan #1 Speed", 
                "RPM", 
                0x03, 
                "Skin Temp 0", 
                "RAW", 
                0x03, 
                "Thermistor 1 ", 
                "RAW", 
                0x03, 
                "Thermistor 2 ", 
                "RAW", 
                0x03, 
                "Thermistor 3 ", 
                "RAW", 
                0x03, 
                "Thermistor 4 ", 
                "RAW"
            })
            Method (TSDD, 0, Serialized)
            {
                Name (TMPV, Package (0x14)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                })
                Return (TMPV) /* \_SB_.PTID.TSDD.TMPV */
            }

            Method (PSDD, 0, Serialized)
            {
                Name (PWRV, Package (0x11)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                })
                Return (PWRV) /* \_SB_.PTID.PSDD.PWRV */
            }

            Method (OSDD, 0, Serialized)
            {
                Name (OSD1, Package (0x07)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                })
                Return (OSD1) /* \_SB_.PTID.OSDD.OSD1 */
            }

            Method (SDSP, 0, NotSerialized)
            {
                Return (0x0A)
            }

            Name (PADA, Package (0x0A)
            {
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0x1A, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Name (PADD, Package (0x0A)
            {
                0x02, 
                0x06A4, 
                0x06A0, 
                0x1A, 
                0x62, 
                0x63, 
                0x60, 
                0x61, 
                0x65, 
                0x64
            })
            Method (PADT, 0, NotSerialized)
            {
                If (PAMT)
                {
                    Return (PADA) /* \_SB_.PTID.PADA */
                }

                Return (PADD) /* \_SB_.PTID.PADD */
            }

            Method (RPMD, 0, Serialized)
            {
                Name (MTMP, Buffer (0x1A){})
                Return (MTMP) /* \_SB_.PTID.RPMD.MTMP */
            }

            Method (WPMD, 1, NotSerialized)
            {
                If ((SizeOf (Arg0) != 0x1A))
                {
                    Return (0xFFFFFFFF)
                }

                Return (Zero)
            }

            Method (ISPC, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (ENPC, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (RPCS, 0, NotSerialized)
            {
                Local0 = Zero
                Return (Local0)
            }

            Method (RPEC, 0, NotSerialized)
            {
                Local0 = Zero
                Return (Local0)
            }
        }
    }
}



SSDT15
------
DefinitionBlock ("", "SSDT", 2, "HP    ", "ShmTable", 0x00000001)
{
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.LPCB, DeviceObj)

    Scope (\_SB.PCI0.LPCB)
    {
        Device (NSHM)
        {
            Name (IOBA, 0x00000200)
            Name (IOLN, 0x00000080)
            Name (MEBA, 0xFEDF0000)
            Name (MELN, 0x00010000)
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x1000)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x01,               // Alignment
                    0x00,               // Length
                    _Y00)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y01)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUF0, \_SB.PCI0.LPCB.NSHM._Y00._MIN, IMIN)  // _MIN: Minimum Base Address
                CreateWordField (BUF0, \_SB.PCI0.LPCB.NSHM._Y00._MAX, IMAX)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, \_SB.PCI0.LPCB.NSHM._Y00._LEN, ILEN)  // _LEN: Length
                IMIN = IOBA /* \_SB_.PCI0.LPCB.NSHM.IOBA */
                IMAX = IOBA /* \_SB_.PCI0.LPCB.NSHM.IOBA */
                ILEN = IOLN /* \_SB_.PCI0.LPCB.NSHM.IOLN */
                CreateDWordField (BUF0, \_SB.PCI0.LPCB.NSHM._Y01._BAS, MBAS)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.PCI0.LPCB.NSHM._Y01._LEN, MLEN)  // _LEN: Length
                MBAS = MEBA /* \_SB_.PCI0.LPCB.NSHM.MEBA */
                MLEN = MELN /* \_SB_.PCI0.LPCB.NSHM.MELN */
                Return (BUF0) /* \_SB_.PCI0.LPCB.NSHM.BUF0 */
            }
        }
    }
}



SSDT16
------
DefinitionBlock ("", "SSDT", 1, "HP", "INTTPL", 0x00001000)
{
    External (_SB_.GNUM, MethodObj)    // 1 Arguments
    External (_SB_.INUM, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.HIDD, MethodObj)    // 5 Arguments
    External (_SB_.PCI0.HIDG, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.I2C0.TPL0, DeviceObj)
    External (_SB_.PCI0.TP7D, MethodObj)    // 6 Arguments
    External (_SB_.PCI0.TP7G, MethodObj)    // 0 Arguments
    External (_SB_.SHPO, MethodObj)    // 2 Arguments
    External (_SB_.SRXO, MethodObj)    // 2 Arguments
    External (_SB_.THID, MethodObj)    // 0 Arguments
    External (G03E, FieldUnitObj)
    External (GPLI, FieldUnitObj)
    External (OSYS, UnknownObj)
    External (SDM0, FieldUnitObj)
    External (THHA, FieldUnitObj)
    External (TPLE, FieldUnitObj)
    External (TPSA, FieldUnitObj)

    Scope (\_SB.PCI0.I2C0.TPL0)
    {
        Name (HID2, Zero)
        Name (SBFB, ResourceTemplate ()
        {
            I2cSerialBusV2 (0x0010, ControllerInitiated, 0x00061A80,
                AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                0x00, ResourceConsumer, _Y00, Exclusive,
                )
        })
        CreateWordField (SBFB, \_SB.PCI0.I2C0.TPL0._Y00._ADR, BADR)  // _ADR: Address
        CreateDWordField (SBFB, \_SB.PCI0.I2C0.TPL0._Y00._SPE, SPED)  // _SPE: Speed
        Name (SBFG, ResourceTemplate ()
        {
            GpioInt (Level, ActiveLow, Exclusive, PullDefault, 0x0000,
                "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0000
                }
        })
        CreateWordField (SBFG, 0x17, INT1)
        Name (SBFI, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y01)
            {
                0x00000000,
            }
        })
        CreateDWordField (SBFI, \_SB.PCI0.I2C0.TPL0._Y01._INT, INT2)  // _INT: Interrupts
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((OSYS < 0x07DC))
            {
                SRXO (GPLI, One)
            }

            INT1 = GNUM (GPLI)
            INT2 = INUM (GPLI)
            If ((SDM0 == Zero))
            {
                SHPO (GPLI, One)
            }

            HID2 = THHA /* External reference */
            BADR = TPSA /* External reference */
            SPED = 0x00061A80
        }

        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (CondRefOf (\_SB.THID))
            {
                Return (\_SB.THID ())
            }

            Return ("ELAN2513")
        }

        Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == HIDG ()))
            {
                Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
            }

            If ((Arg0 == TP7G ()))
            {
                Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (TPLE) /* External reference */
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            If ((OSYS < 0x07DC))
            {
                Return (SBFI) /* \_SB_.PCI0.I2C0.TPL0.SBFI */
            }

            If ((SDM0 == Zero))
            {
                Return (ConcatenateResTemplate (SBFB, SBFG))
            }

            Return (ConcatenateResTemplate (SBFB, SBFI))
        }
    }
}



SSDT17
------
DefinitionBlock ("", "SSDT", 1, "HP", "PSENWSAR", 0x00001000)
{
    External (_SB_.PCI0.LPCB.EC0_, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.DMEE, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PCI0.LPCB.EC0_.ECRG, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.INDI, IntObj)
    External (_SB_.WFTE, DeviceObj)
    External (_SB_.WFTE.WMDE, MethodObj)    // 3 Arguments
    External (DSCS, IntObj)
    External (DSDG, IntObj)

    Scope (\_SB)
    {
        Scope (\_SB.PCI0.LPCB.EC0)
        {
            Name (GPIS, Zero)
            Method (_Q14, 0, Serialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    \_SB.PCI0.LPCB.EC0.GPIS = \_SB.PCI0.LPCB.EC0.INDI /* External reference */
                    Local1 = \_SB.PCI0.LPCB.EC0.DMEE /* External reference */
                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    Local0 = Zero
                    DSDG = Zero
                    If ((Local1 != 0x45))
                    {
                        If ((\_SB.PCI0.LPCB.EC0.GPIS == One))
                        {
                            If (Ones)
                            {
                                Local0 = 0x22
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x11))
                        {
                            If (Zero)
                            {
                                Local0 = Zero
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x02))
                        {
                            If (Ones)
                            {
                                Local0 = 0x22
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x12))
                        {
                            If (Zero)
                            {
                                Local0 = Zero
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x03))
                        {
                            If (Ones)
                            {
                                Local0 = 0x33
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x13))
                        {
                            If (Zero)
                            {
                                Local0 = Zero
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x04))
                        {
                            If (Ones)
                            {
                                Local0 = 0x22
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x14))
                        {
                            If (Zero)
                            {
                                Local0 = Zero
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x05))
                        {
                            If (Ones)
                            {
                                Local0 = 0x22
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x15))
                        {
                            If (Zero)
                            {
                                Local0 = Zero
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x06))
                        {
                            If (Ones)
                            {
                                Local0 = 0x33
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x16))
                        {
                            If (Zero)
                            {
                                Local0 = Zero
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x07)){}
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x17)){}
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x08))
                        {
                            If (Ones)
                            {
                                Local0 = 0x22
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x18))
                        {
                            If (Zero)
                            {
                                Local0 = Zero
                            }
                        }
                    }
                    ElseIf (Ones)
                    {
                        Local0 = 0x33
                    }

                    Local1 = (0x0F & Local0)
                    Local2 = Local0 >>= 0x04
                    Local1 |= Local2 <<= 0x10
                    DSCS = Local1
                    \_SB.WFTE.WMDE (Zero, One, Zero)
                }
            }
        }

        Scope (\_SB)
        {
            Method (DBWC, 1, Serialized)
            {
                If (((Arg0 == 0x03) || (Arg0 == 0x04)))
                {
                    If (\_SB.PCI0.LPCB.EC0.ECRG)
                    {
                        Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                        \_SB.PCI0.LPCB.EC0.GPIS = \_SB.PCI0.LPCB.EC0.INDI /* External reference */
                        Local1 = \_SB.PCI0.LPCB.EC0.DMEE /* External reference */
                        Release (\_SB.PCI0.LPCB.EC0.ECMX)
                        Local0 = Zero
                        DSDG = Zero
                        If ((Local1 != 0x45))
                        {
                            If ((\_SB.PCI0.LPCB.EC0.GPIS == One))
                            {
                                If (Ones)
                                {
                                    Local0 = 0x22
                                }
                            }
                            ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x11))
                            {
                                If (Zero)
                                {
                                    Local0 = Zero
                                }
                            }
                            ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x02))
                            {
                                If (Ones)
                                {
                                    Local0 = 0x22
                                }
                            }
                            ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x12))
                            {
                                If (Zero)
                                {
                                    Local0 = Zero
                                }
                            }
                            ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x03))
                            {
                                If (Ones)
                                {
                                    Local0 = 0x33
                                }
                            }
                            ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x13))
                            {
                                If (Zero)
                                {
                                    Local0 = Zero
                                }
                            }
                            ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x04))
                            {
                                If (Ones)
                                {
                                    Local0 = 0x22
                                }
                            }
                            ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x14))
                            {
                                If (Zero)
                                {
                                    Local0 = Zero
                                }
                            }
                            ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x05))
                            {
                                If (Ones)
                                {
                                    Local0 = 0x22
                                }
                            }
                            ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x15))
                            {
                                If (Zero)
                                {
                                    Local0 = Zero
                                }
                            }
                            ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x06))
                            {
                                If (Ones)
                                {
                                    Local0 = 0x33
                                }
                            }
                            ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x16))
                            {
                                If (Zero)
                                {
                                    Local0 = Zero
                                }
                            }
                            ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x07)){}
                            ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x17)){}
                            ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x08))
                            {
                                If (Ones)
                                {
                                    Local0 = 0x22
                                }
                            }
                            ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x18))
                            {
                                If (Zero)
                                {
                                    Local0 = Zero
                                }
                            }
                        }
                        ElseIf (Ones)
                        {
                            Local0 = 0x33
                        }

                        Local1 = (0x0F & Local0)
                        Local2 = Local0 >>= 0x04
                        Local1 |= Local2 <<= 0x10
                        DSCS = Local1
                        \_SB.WFTE.WMDE (Zero, One, Zero)
                    }
                }
            }
        }

        Scope (\_SB)
        {
            Name (PDAT, Zero)
            Name (DSSI, Zero)
            Method (DSSV, 0, Serialized)
            {
                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    DSDG = 0x14
                    Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    \_SB.PCI0.LPCB.EC0.GPIS = \_SB.PCI0.LPCB.EC0.INDI /* External reference */
                    Local1 = \_SB.PCI0.LPCB.EC0.DMEE /* External reference */
                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    Local0 = Zero
                    DSDG = Zero
                    If ((Local1 != 0x45))
                    {
                        If ((\_SB.PCI0.LPCB.EC0.GPIS == One))
                        {
                            If (Ones)
                            {
                                Local0 = 0x22
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x11))
                        {
                            If (Zero)
                            {
                                Local0 = Zero
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x02))
                        {
                            If (Ones)
                            {
                                Local0 = 0x22
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x12))
                        {
                            If (Zero)
                            {
                                Local0 = Zero
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x03))
                        {
                            If (Ones)
                            {
                                Local0 = 0x33
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x13))
                        {
                            If (Zero)
                            {
                                Local0 = Zero
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x04))
                        {
                            If (Ones)
                            {
                                Local0 = 0x22
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x14))
                        {
                            If (Zero)
                            {
                                Local0 = Zero
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x05))
                        {
                            If (Ones)
                            {
                                Local0 = 0x22
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x15))
                        {
                            If (Zero)
                            {
                                Local0 = Zero
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x06))
                        {
                            If (Ones)
                            {
                                Local0 = 0x33
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x16))
                        {
                            If (Zero)
                            {
                                Local0 = Zero
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x07)){}
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x17)){}
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x08))
                        {
                            If (Ones)
                            {
                                Local0 = 0x22
                            }
                        }
                        ElseIf ((\_SB.PCI0.LPCB.EC0.GPIS == 0x18))
                        {
                            If (Zero)
                            {
                                Local0 = Zero
                            }
                        }
                    }
                    ElseIf (Ones)
                    {
                        Local0 = 0x33
                    }

                    Local1 = (0x0F & Local0)
                    Local2 = Local0 >>= 0x04
                    Local1 |= Local2 <<= 0x10
                    DSCS = Local1
                    \_SB.WFTE.WMDE (Zero, One, Zero)
                }
            }

            Device (WFDE)
            {
                Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                Name (_UID, "SampleDev")  // _UID: Unique ID
                Name (_WDG, Buffer (0x3C)
                {
                    /* 0000 */  0xEF, 0x9D, 0xC4, 0x2B, 0x15, 0x7B, 0x05, 0x4F,  // ...+.{.O
                    /* 0008 */  0x8B, 0xB7, 0xEE, 0x37, 0xB9, 0x54, 0x7C, 0x0B,  // ...7.T|.
                    /* 0010 */  0x44, 0x45, 0x01, 0x02, 0x3E, 0xA3, 0xFE, 0xA6,  // DE..>...
                    /* 0018 */  0xBF, 0xDA, 0xF5, 0x46, 0xBF, 0xC8, 0x46, 0x0D,  // ...F..F.
                    /* 0020 */  0x96, 0x1B, 0xEC, 0x9F, 0xD0, 0x00, 0x01, 0x08,  // ........
                    /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                    /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                    /* 0038 */  0x43, 0x43, 0x01, 0x00                           // CC..
                })
                Method (WMDE, 3, NotSerialized)
                {
                    DSDG = Arg1
                    If ((Arg1 == One))
                    {
                        Return (One)
                    }

                    If ((Arg1 == 0x02))
                    {
                        If ((DSSI == Zero))
                        {
                            DSSV ()
                            DSSI = One
                        }

                        Return (One)
                    }

                    If ((Arg1 == 0x03))
                    {
                        Return (DSCS) /* External reference */
                    }
                }

                Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
                {
                    If ((Arg0 == 0xD0))
                    {
                        Return (DSCS) /* External reference */
                    }

                    Return (Zero)
                }

                Name (WQCC, Buffer (0x043D)
                {
                    /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                    /* 0008 */  0x2D, 0x04, 0x00, 0x00, 0xB4, 0x0F, 0x00, 0x00,  // -.......
                    /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                    /* 0018 */  0x28, 0xCE, 0x87, 0x00, 0x01, 0x06, 0x18, 0x42,  // (......B
                    /* 0020 */  0x10, 0x07, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                    /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                    /* 0030 */  0x24, 0x15, 0x07, 0x85, 0x12, 0x02, 0xA1, 0xFE,  // $.......
                    /* 0038 */  0x04, 0xF2, 0x2B, 0x00, 0xA1, 0x43, 0x01, 0x32,  // ..+..C.2
                    /* 0040 */  0x05, 0x18, 0x14, 0xE0, 0x14, 0x41, 0x04, 0xBD,  // .....A..
                    /* 0048 */  0x0A, 0xB0, 0x29, 0xC0, 0xA4, 0x00, 0x8B, 0x02,  // ..).....
                    /* 0050 */  0xB4, 0x0B, 0xB0, 0x2C, 0x40, 0xB7, 0x00, 0xE9,  // ...,@...
                    /* 0058 */  0xB0, 0x44, 0x24, 0x38, 0x4A, 0x0C, 0x38, 0x4A,  // .D$8J.8J
                    /* 0060 */  0x27, 0xB6, 0x70, 0xC3, 0x06, 0x2F, 0x14, 0x45,  // '.p../.E
                    /* 0068 */  0x33, 0x88, 0x92, 0xA0, 0x72, 0x01, 0xBE, 0x11,  // 3...r...
                    /* 0070 */  0x04, 0x5E, 0xAE, 0x00, 0xC9, 0x13, 0x90, 0x66,  // .^.....f
                    /* 0078 */  0x01, 0x86, 0x05, 0x58, 0x17, 0x20, 0x7B, 0x08,  // ...X. {.
                    /* 0080 */  0x54, 0xEA, 0x10, 0x50, 0x72, 0x86, 0x80, 0x1A,  // T..Pr...
                    /* 0088 */  0x40, 0xAB, 0x13, 0x10, 0x7E, 0xA5, 0x53, 0x42,  // @...~.SB
                    /* 0090 */  0x12, 0x84, 0x33, 0x56, 0xF1, 0xF8, 0x9A, 0x45,  // ..3V...E
                    /* 0098 */  0xD3, 0x73, 0x92, 0x73, 0x0C, 0x39, 0x1E, 0x17,  // .s.s.9..
                    /* 00A0 */  0x7A, 0x10, 0x3C, 0x84, 0x04, 0x10, 0x26, 0x7B,  // z.<...&{
                    /* 00A8 */  0xC8, 0x92, 0x0D, 0x83, 0xD2, 0x30, 0x16, 0xEA,  // .....0..
                    /* 00B0 */  0x62, 0xD4, 0xA8, 0x91, 0xB2, 0x01, 0x19, 0xA2,  // b.......
                    /* 00B8 */  0x24, 0x38, 0xD4, 0xA8, 0x3D, 0xBB, 0xE6, 0xC7,  // $8..=...
                    /* 00C0 */  0xA1, 0xD9, 0xB5, 0x3D, 0x16, 0x02, 0xC9, 0xA4,  // ...=....
                    /* 00C8 */  0x0D, 0x05, 0x25, 0x05, 0x42, 0xC2, 0x67, 0x4A,  // ..%.B.gJ
                    /* 00D0 */  0x66, 0x14, 0xF1, 0x48, 0x0D, 0x93, 0xC0, 0xA3,  // f..H....
                    /* 00D8 */  0x88, 0xEC, 0x19, 0x46, 0x63, 0xD0, 0xD8, 0x61,  // ...Fc..a
                    /* 00E0 */  0x78, 0x98, 0xC1, 0x0E, 0xE2, 0x30, 0x8E, 0x39,  // x....0.9
                    /* 00E8 */  0x72, 0x02, 0x4F, 0xE8, 0x48, 0x8F, 0xBC, 0xB0,  // r.O.H...
                    /* 00F0 */  0x79, 0x0A, 0x35, 0x46, 0x73, 0x50, 0x04, 0xFF,  // y.5FsP..
                    /* 00F8 */  0x51, 0x00, 0x2B, 0x11, 0x56, 0xA3, 0x8D, 0x7D,  // Q.+.V..}
                    /* 0100 */  0xBE, 0x1E, 0xCD, 0xC1, 0xC6, 0x38, 0x82, 0xE3,  // .....8..
                    /* 0108 */  0x4A, 0xF0, 0xFF, 0x0F, 0x13, 0xA4, 0xF7, 0xE9,  // J.......
                    /* 0110 */  0x10, 0x41, 0x78, 0x12, 0x3D, 0x0B, 0x61, 0xF5,  // .Ax.=.a.
                    /* 0118 */  0x0C, 0x24, 0x9C, 0x10, 0xC7, 0xCD, 0x61, 0x0E,  // .$....a.
                    /* 0120 */  0x58, 0x83, 0x40, 0xC9, 0x80, 0x10, 0xE4, 0x33,  // X.@....3
                    /* 0128 */  0xC1, 0xD1, 0x99, 0xC0, 0xEE, 0x8F, 0x02, 0xD2,  // ........
                    /* 0130 */  0x26, 0x40, 0xE3, 0x1D, 0x40, 0x20, 0x9D, 0x21,  // &@..@ .!
                    /* 0138 */  0x08, 0xA4, 0xAD, 0xC1, 0x08, 0xA6, 0x42, 0x28,  // ......B(
                    /* 0140 */  0xA1, 0x1C, 0x55, 0x38, 0x5B, 0x43, 0x11, 0x90,  // ..U8[C..
                    /* 0148 */  0x6F, 0x05, 0xAF, 0x0F, 0xA1, 0xD8, 0xD4, 0x42,  // o......B
                    /* 0150 */  0x1E, 0x5B, 0x90, 0xC6, 0xC0, 0x84, 0x1C, 0x2C,  // .[.....,
                    /* 0158 */  0x4C, 0xBC, 0xF6, 0x17, 0xC2, 0x1E, 0x12, 0x3A,  // L......:
                    /* 0160 */  0x0B, 0x38, 0xD2, 0x68, 0x50, 0x07, 0x05, 0x9F,  // .8.hP...
                    /* 0168 */  0x07, 0x7C, 0x16, 0x78, 0x3E, 0xF0, 0xA8, 0x0E,  // .|.x>...
                    /* 0170 */  0xCD, 0x83, 0x3B, 0xB0, 0xC7, 0x87, 0x07, 0x01,  // ..;.....
                    /* 0178 */  0x0F, 0x99, 0xDD, 0x10, 0x7C, 0xAE, 0xF0, 0xC9,  // ....|...
                    /* 0180 */  0x00, 0xEF, 0x1A, 0x50, 0x57, 0x82, 0x07, 0x02,  // ...PW...
                    /* 0188 */  0x36, 0x46, 0xC3, 0xF1, 0x21, 0x7A, 0xB8, 0xE1,  // 6F..!z..
                    /* 0190 */  0x4E, 0xE0, 0x10, 0x19, 0xA0, 0x67, 0xF5, 0x2C,  // N....g.,
                    /* 0198 */  0x80, 0x1D, 0xD6, 0xC9, 0x3C, 0x08, 0xBC, 0x4B,  // ....<..K
                    /* 01A0 */  0x34, 0x7B, 0x8B, 0x20, 0x04, 0xC7, 0xE3, 0x0B,  // 4{. ....
                    /* 01A8 */  0x04, 0x9B, 0x70, 0x02, 0xCB, 0x1F, 0x04, 0x6A,  // ..p....j
                    /* 01B0 */  0x64, 0x86, 0xF6, 0x74, 0x4F, 0xEB, 0x45, 0xC0,  // d..tO.E.
                    /* 01B8 */  0x07, 0x00, 0x13, 0x58, 0x2C, 0x84, 0x14, 0x40,  // ...X,..@
                    /* 01C0 */  0x68, 0x3C, 0xE0, 0x57, 0x7C, 0xE8, 0x20, 0xB7,  // h<.W|. .
                    /* 01C8 */  0x05, 0xCF, 0xD7, 0x47, 0x13, 0xE6, 0x64, 0x3C,  // ...G..d<
                    /* 01D0 */  0xA8, 0x51, 0xF8, 0x14, 0x10, 0xEE, 0xBC, 0x4D,  // .Q.....M
                    /* 01D8 */  0xE0, 0xC0, 0x10, 0xFA, 0x5F, 0x58, 0xD4, 0x31,  // ...._X.1
                    /* 01E0 */  0x85, 0x9F, 0x26, 0xE8, 0x41, 0x82, 0xA1, 0xB2,  // ..&.A...
                    /* 01E8 */  0xFF, 0x3F, 0xC4, 0x91, 0x9C, 0x90, 0x3F, 0x2B,  // .?....?+
                    /* 01F0 */  0x1E, 0x18, 0x7C, 0xC1, 0xA7, 0x08, 0x20, 0x03,  // ..|... .
                    /* 01F8 */  0x83, 0xBB, 0x42, 0xB0, 0x01, 0xC3, 0xBF, 0x4C,  // ..B....L
                    /* 0200 */  0x18, 0xD8, 0x17, 0x89, 0xCA, 0x20, 0xC9, 0x91,  // ..... ..
                    /* 0208 */  0xE3, 0x89, 0x06, 0x0C, 0xE8, 0x7D, 0x0E, 0x56,  // .....}.V
                    /* 0210 */  0x87, 0x16, 0x83, 0xF9, 0x3E, 0x13, 0xEC, 0xE5,  // ....>...
                    /* 0218 */  0xA1, 0x47, 0x20, 0xDD, 0x59, 0xAC, 0x15, 0x42,  // .G .Y..B
                    /* 0220 */  0x38, 0xAF, 0x30, 0x3E, 0xD6, 0x00, 0x93, 0x51,  // 8.0>...Q
                    /* 0228 */  0x3F, 0xD6, 0x80, 0xED, 0xE4, 0x03, 0x67, 0x00,  // ?.....g.
                    /* 0230 */  0x3C, 0x8E, 0x09, 0x10, 0x26, 0xFA, 0x5D, 0x20,  // <...&.] 
                    /* 0238 */  0x29, 0x0F, 0x04, 0x0A, 0xE3, 0x23, 0x0D, 0x70,  // )....#.p
                    /* 0240 */  0xF9, 0xFF, 0x1F, 0x69, 0x80, 0xDF, 0xC9, 0x00,  // ...i....
                    /* 0248 */  0x77, 0x7A, 0x00, 0xCF, 0x84, 0x5E, 0x2B, 0xD8,  // wz...^+.
                    /* 0250 */  0xFD, 0xC1, 0xE3, 0x08, 0x12, 0x38, 0xC2, 0x13,  // .....8..
                    /* 0258 */  0x11, 0x39, 0xD1, 0x40, 0x3E, 0x35, 0x3C, 0xC2,  // .9.@>5<.
                    /* 0260 */  0x3C, 0x07, 0x9C, 0xCE, 0xE1, 0x1C, 0xC9, 0x43,  // <......C
                    /* 0268 */  0xC0, 0xEB, 0x8C, 0xBD, 0x21, 0xE9, 0x1E, 0xF3,  // ....!...
                    /* 0270 */  0x3A, 0x63, 0xAC, 0x40, 0x27, 0x15, 0xC5, 0xF7,  // :c.@'...
                    /* 0278 */  0x99, 0x50, 0x11, 0xA2, 0x45, 0x09, 0x19, 0xE1,  // .P..E...
                    /* 0280 */  0x15, 0x22, 0xA4, 0x91, 0xA3, 0x45, 0x8C, 0x12,  // ."...E..
                    /* 0288 */  0x3F, 0x64, 0x9C, 0x27, 0x1A, 0x16, 0xEB, 0x28,  // ?d.'...(
                    /* 0290 */  0xA0, 0xF3, 0x87, 0x4F, 0x34, 0x80, 0xDF, 0xFF,  // ...O4...
                    /* 0298 */  0xFF, 0x89, 0x06, 0xFC, 0xF2, 0x4E, 0x24, 0xA0,  // .....N$.
                    /* 02A0 */  0x3B, 0x36, 0x79, 0x0E, 0x21, 0x9E, 0x46, 0x80,  // ;6y.!.F.
                    /* 02A8 */  0x8B, 0xF4, 0x47, 0x87, 0x4E, 0x75, 0x64, 0xA1,  // ..G.Nud.
                    /* 02B0 */  0xB2, 0xB1, 0x50, 0x0F, 0x82, 0x0A, 0x3F, 0x21,  // ..P...?!
                    /* 02B8 */  0xE8, 0xAC, 0x12, 0x37, 0xE6, 0xAB, 0xCA, 0x6B,  // ...7...k
                    /* 02C0 */  0x84, 0x4F, 0x6B, 0xBE, 0x4B, 0xB0, 0x41, 0x0B,  // .Ok.K.A.
                    /* 02C8 */  0x4E, 0xA7, 0x3D, 0x2E, 0x93, 0x42, 0x22, 0x21,  // N.=..B"!
                    /* 02D0 */  0x34, 0x20, 0xC3, 0x59, 0x16, 0x1C, 0x05, 0xF1,  // 4 .Y....
                    /* 02D8 */  0xE8, 0x7D, 0xE2, 0xF3, 0x51, 0x08, 0x6E, 0xC4,  // .}..Q.n.
                    /* 02E0 */  0xA3, 0x10, 0x3D, 0x2D, 0xE0, 0xC7, 0x72, 0x64,  // ..=-..rd
                    /* 02E8 */  0x27, 0xE6, 0x59, 0xF8, 0x70, 0x87, 0x3B, 0x72,  // '.Y.p.;r
                    /* 02F0 */  0xC0, 0x1D, 0x1C, 0x5B, 0xE1, 0xF1, 0xFB, 0x02,  // ...[....
                    /* 02F8 */  0x10, 0xE4, 0x7C, 0x83, 0x9D, 0xAC, 0x51, 0x5E,  // ..|...Q^
                    /* 0300 */  0x11, 0x3C, 0x42, 0xEC, 0x60, 0x7C, 0x4C, 0xE2,  // .<B.`|L.
                    /* 0308 */  0xE3, 0xF0, 0xD5, 0xE0, 0x7D, 0xC6, 0x04, 0xEC,  // ....}...
                    /* 0310 */  0x0C, 0x04, 0x9E, 0xFF, 0xFF, 0x19, 0x88, 0x0B,  // ........
                    /* 0318 */  0x3C, 0x22, 0x80, 0x02, 0xC8, 0x97, 0x02, 0x1F,  // <"......
                    /* 0320 */  0x11, 0x1E, 0x0C, 0xD8, 0x1C, 0x9E, 0x12, 0x7C,  // .......|
                    /* 0328 */  0xC4, 0x61, 0xF0, 0x3C, 0xDA, 0xA8, 0xA8, 0xAC,  // .a.<....
                    /* 0330 */  0x71, 0xA1, 0x06, 0xEB, 0x33, 0x0C, 0xC3, 0x3E,  // q...3..>
                    /* 0338 */  0x4F, 0x5F, 0x9A, 0x8E, 0xD2, 0xC7, 0x29, 0x0C,  // O_....).
                    /* 0340 */  0xAC, 0x87, 0xCF, 0x61, 0x8D, 0x16, 0xF6, 0xA8,  // ...a....
                    /* 0348 */  0x9F, 0x24, 0x7C, 0x0B, 0xF1, 0xCC, 0x8C, 0x11,  // .$|.....
                    /* 0350 */  0xD6, 0x47, 0x00, 0x20, 0x76, 0x7C, 0x40, 0x9D,  // .G. v|@.
                    /* 0358 */  0x79, 0x7C, 0x6E, 0xF0, 0x88, 0x22, 0x9E, 0xE7,  // y|n.."..
                    /* 0360 */  0xDB, 0x8F, 0x2F, 0x1B, 0xA7, 0xE4, 0x01, 0x59,  // ../....Y
                    /* 0368 */  0xE2, 0xE9, 0x01, 0x25, 0x8E, 0x42, 0xD2, 0x4E,  // ...%.B.N
                    /* 0370 */  0x0F, 0x28, 0x31, 0x70, 0x14, 0xC4, 0xA7, 0x07,  // .(1p....
                    /* 0378 */  0x07, 0x3D, 0x3D, 0x40, 0x0F, 0x76, 0x7A, 0x00,  // .==@.vz.
                    /* 0380 */  0xC5, 0xA9, 0x00, 0x37, 0x56, 0xB8, 0x63, 0xF3,  // ...7V.c.
                    /* 0388 */  0x21, 0xCC, 0x73, 0xC3, 0x1E, 0x1C, 0xC0, 0xF2,  // !.s.....
                    /* 0390 */  0xFF, 0x3F, 0x38, 0x00, 0xDF, 0xE1, 0xFA, 0xE0,  // .?8.....
                    /* 0398 */  0x00, 0xAE, 0x33, 0x80, 0x0F, 0x0E, 0xE0, 0x3A,  // ..3....:
                    /* 03A0 */  0x6E, 0x82, 0x67, 0xF4, 0xEC, 0x08, 0xF3, 0x88,  // n.g.....
                    /* 03A8 */  0x63, 0xAC, 0x73, 0x7D, 0xE4, 0xF1, 0x09, 0x00,  // c.s}....
                    /* 03B0 */  0x8E, 0x98, 0x73, 0x03, 0x6A, 0xB8, 0x96, 0x7B,  // ..s.j..{
                    /* 03B8 */  0x8A, 0x41, 0xDC, 0x11, 0x30, 0x07, 0x18, 0x1F,  // .A..0...
                    /* 03C0 */  0x1B, 0xB8, 0x40, 0x0A, 0xC9, 0x3B, 0x36, 0xA0,  // ..@..;6.
                    /* 03C8 */  0x04, 0xC1, 0x51, 0x10, 0x8F, 0xD1, 0x61, 0x8F,  // ..Q...a.
                    /* 03D0 */  0x0D, 0xD0, 0xC3, 0x1D, 0x1B, 0x40, 0x71, 0xFC,  // .....@q.
                    /* 03D8 */  0xC1, 0x9F, 0x38, 0xE0, 0x9F, 0xC3, 0xE0, 0x1C,  // ..8.....
                    /* 03E0 */  0x1C, 0xF8, 0xFF, 0xFF, 0xE0, 0x00, 0xF8, 0x08,  // ........
                    /* 03E8 */  0x75, 0x70, 0x00, 0x1D, 0x2C, 0x3F, 0x38, 0x80,  // up..,?8.
                    /* 03F0 */  0x67, 0xFC, 0xC0, 0x43, 0xA1, 0x4D, 0x9F, 0x1A,  // g..C.M..
                    /* 03F8 */  0x8D, 0x5A, 0x35, 0x28, 0x53, 0xA3, 0x4C, 0x83,  // .Z5(S.L.
                    /* 0400 */  0x5A, 0x7D, 0x2A, 0x35, 0x66, 0xCC, 0xC6, 0x91,  // Z}*5f...
                    /* 0408 */  0x01, 0x25, 0x64, 0x55, 0x1A, 0x96, 0x63, 0x80,  // .%dU..c.
                    /* 0410 */  0xF0, 0x47, 0x82, 0x40, 0x1C, 0xD5, 0x02, 0x20,  // .G.@... 
                    /* 0418 */  0x8B, 0xE2, 0x01, 0x88, 0x09, 0x59, 0x92, 0x40,  // .....Y.@
                    /* 0420 */  0x1C, 0xEF, 0xA8, 0x28, 0x23, 0xE7, 0x06, 0x83,  // ...(#...
                    /* 0428 */  0x08, 0xC8, 0x71, 0xD7, 0x28, 0x20, 0x87, 0x07,  // ..q.( ..
                    /* 0430 */  0x11, 0x90, 0xE3, 0xAF, 0x43, 0x40, 0x16, 0xA3,  // ....C@..
                    /* 0438 */  0x03, 0x88, 0xFD, 0xFF, 0x01                     // .....
                })
            }

            Device (WFTE)
            {
                Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                Name (_UID, "TestDev")  // _UID: Unique ID
                Name (_WDG, Buffer (0x28)
                {
                    /* 0000 */  0x7F, 0xAB, 0x13, 0x1F, 0x20, 0x62, 0x10, 0x42,  // .... b.B
                    /* 0008 */  0x8F, 0x8E, 0x8B, 0xB5, 0xE7, 0x1E, 0xE9, 0x69,  // .......i
                    /* 0010 */  0x44, 0x45, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // DE..!...
                    /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                    /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x43, 0x43, 0x01, 0x00   // ..).CC..
                })
                Method (WMDE, 3, NotSerialized)
                {
                    DSDG = 0xFB
                    If ((Arg1 == One))
                    {
                        Notify (WFDE, 0xD0) // Hardware-Specific
                        Return (DSCS) /* External reference */
                    }
                }

                Name (WQCC, Buffer (0x02F1)
                {
                    /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                    /* 0008 */  0xE1, 0x02, 0x00, 0x00, 0xC2, 0x06, 0x00, 0x00,  // ........
                    /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                    /* 0018 */  0xA8, 0x5D, 0x83, 0x00, 0x01, 0x06, 0x18, 0x42,  // .].....B
                    /* 0020 */  0x20, 0x14, 0x03, 0x89, 0xC0, 0xA2, 0x69, 0x24,  //  .....i$
                    /* 0028 */  0xC7, 0x01, 0x0C, 0x86, 0xCB, 0x72, 0x20, 0xE4,  // .....r .
                    /* 0030 */  0x82, 0x89, 0x09, 0x10, 0x01, 0x21, 0xAF, 0x02,  // .....!..
                    /* 0038 */  0x6C, 0x0A, 0x30, 0x09, 0xA2, 0xFE, 0xFD, 0x21,  // l.0....!
                    /* 0040 */  0x4A, 0x82, 0x43, 0x09, 0x81, 0x90, 0x64, 0x01,  // J.C...d.
                    /* 0048 */  0xE6, 0x05, 0xE8, 0x16, 0x60, 0x58, 0x80, 0x6D,  // ....`X.m
                    /* 0050 */  0x01, 0xA6, 0x05, 0x38, 0x86, 0xA4, 0xD2, 0xC0,  // ...8....
                    /* 0058 */  0x29, 0x81, 0xA5, 0x40, 0x48, 0xB8, 0x00, 0xE5,  // )..@H...
                    /* 0060 */  0x02, 0x7C, 0x0B, 0xD0, 0x8E, 0x28, 0xDC, 0x96,  // .|...(..
                    /* 0068 */  0x61, 0x44, 0xE0, 0x51, 0x44, 0xB6, 0x50, 0x34,  // aD.QD.P4
                    /* 0070 */  0x0A, 0x8D, 0x1D, 0x86, 0x65, 0x82, 0x69, 0x10,  // ....e.i.
                    /* 0078 */  0x87, 0x51, 0x36, 0xB2, 0x08, 0x3C, 0xA1, 0x4E,  // .Q6..<.N
                    /* 0080 */  0x05, 0xC8, 0x15, 0x20, 0x4C, 0x80, 0x78, 0x54,  // ... L.xT
                    /* 0088 */  0x61, 0x34, 0x07, 0x45, 0x20, 0x43, 0x63, 0xC4,  // a4.E Cc.
                    /* 0090 */  0x40, 0x48, 0x22, 0xAC, 0x9C, 0x63, 0x6B, 0x14,  // @H"..ck.
                    /* 0098 */  0xA7, 0x71, 0x34, 0xA5, 0x63, 0x68, 0x04, 0xC7,  // .q4.ch..
                    /* 00A0 */  0x75, 0x40, 0x06, 0xE9, 0x7D, 0x3A, 0x44, 0xD0,  // u@..}:D.
                    /* 00A8 */  0x84, 0x34, 0x8A, 0x68, 0x21, 0xA2, 0x04, 0x3D,  // .4.h!..=
                    /* 00B0 */  0x8E, 0x20, 0x81, 0x23, 0x24, 0x30, 0xCC, 0x31,  // . .#$0.1
                    /* 00B8 */  0x60, 0x64, 0x40, 0xC8, 0xB3, 0x00, 0xEB, 0x83,  // `d@.....
                    /* 00C0 */  0x23, 0x04, 0x76, 0x2F, 0xC0, 0x98, 0x00, 0x8D,  // #.v/....
                    /* 00C8 */  0x10, 0x72, 0x26, 0xC0, 0xA0, 0x00, 0x85, 0x02,  // .r&.....
                    /* 00D0 */  0xBC, 0xC1, 0xC8, 0x96, 0x00, 0x6D, 0x02, 0x94,  // .....m..
                    /* 00D8 */  0x21, 0x68, 0x4A, 0x51, 0x0E, 0x2A, 0x48, 0xB8,  // !hJQ.*H.
                    /* 00E0 */  0x28, 0x16, 0x87, 0x26, 0x88, 0x16, 0x51, 0x08,  // (..&..Q.
                    /* 00E8 */  0x68, 0x84, 0xD6, 0x60, 0x84, 0x1B, 0x2E, 0x46,  // h..`...F
                    /* 00F0 */  0x84, 0x93, 0x8B, 0x1C, 0xA2, 0xFD, 0x41, 0x90,  // ......A.
                    /* 00F8 */  0x68, 0x47, 0x01, 0x49, 0x00, 0x51, 0xA4, 0xD1,  // hG.I.Q..
                    /* 0100 */  0xA0, 0x86, 0x9F, 0xE0, 0x71, 0xC0, 0x47, 0x81,  // ....q.G.
                    /* 0108 */  0x93, 0x3B, 0xA9, 0x13, 0x33, 0xC8, 0x89, 0x1D,  // .;..3...
                    /* 0110 */  0x5D, 0x9D, 0xE7, 0x00, 0x32, 0x62, 0x86, 0x95,  // ]...2b..
                    /* 0118 */  0xE0, 0xD7, 0xC0, 0x07, 0x03, 0xBC, 0x6B, 0x40,  // ......k@
                    /* 0120 */  0xDD, 0x08, 0x9E, 0x07, 0xD8, 0x30, 0xC3, 0x61,  // .....0.a
                    /* 0128 */  0x86, 0xE8, 0xD1, 0x86, 0xFB, 0xFF, 0x9F, 0xC0,  // ........
                    /* 0130 */  0x21, 0x32, 0x40, 0x0F, 0xED, 0x51, 0x00, 0xEB,  // !2@..Q..
                    /* 0138 */  0x70, 0x32, 0x3A, 0x07, 0x94, 0x2A, 0xC0, 0xEC,  // p2:..*..
                    /* 0140 */  0x99, 0x40, 0x33, 0x4B, 0x70, 0x3C, 0x3E, 0x00,  // .@3Kp<>.
                    /* 0148 */  0x78, 0x3E, 0x27, 0x9C, 0xC0, 0xF2, 0x07, 0x81,  // x>'.....
                    /* 0150 */  0x1A, 0x99, 0xA1, 0x3D, 0xE3, 0xD3, 0x7A, 0x0F,  // ...=..z.
                    /* 0158 */  0xF0, 0xF1, 0xE0, 0xB0, 0x98, 0x58, 0x08, 0x29,  // .....X.)
                    /* 0160 */  0x80, 0xD0, 0x78, 0xC0, 0xAF, 0xF8, 0x68, 0x20,  // ..x...h 
                    /* 0168 */  0x84, 0x97, 0x05, 0xCF, 0xD7, 0x87, 0x04, 0x03,  // ........
                    /* 0170 */  0x63, 0x07, 0x64, 0xBF, 0x02, 0x10, 0x82, 0xBF,  // c.d.....
                    /* 0178 */  0x2E, 0x1C, 0xD1, 0x43, 0x43, 0x84, 0x04, 0x2F,  // ...CC../
                    /* 0180 */  0x03, 0x47, 0x50, 0x29, 0xBE, 0xB0, 0x0E, 0x21,  // .GP)...!
                    /* 0188 */  0x46, 0xA4, 0x18, 0x51, 0x82, 0xD4, 0x0A, 0xA1,  // F..Q....
                    /* 0190 */  0xE9, 0x87, 0x49, 0x50, 0xE4, 0xC9, 0x01, 0x3D,  // ..IP...=
                    /* 0198 */  0x02, 0x8E, 0x77, 0x02, 0xC7, 0x13, 0xD9, 0xE3,  // ..w.....
                    /* 01A0 */  0x89, 0x72, 0x12, 0x07, 0xE4, 0x33, 0x85, 0x11,  // .r...3..
                    /* 01A8 */  0x4E, 0xF3, 0x51, 0xE2, 0xD1, 0xC2, 0x9A, 0x67,  // N.Q....g
                    /* 01B0 */  0xA4, 0x13, 0xC3, 0x39, 0xBD, 0x0D, 0x98, 0xA0,  // ...9....
                    /* 01B8 */  0xB2, 0xE7, 0x80, 0x8E, 0x1F, 0x56, 0x05, 0x22,  // .....V."
                    /* 01C0 */  0x1B, 0x4B, 0xF5, 0x39, 0x83, 0x6A, 0x5E, 0xAE,  // .K.9.j^.
                    /* 01C8 */  0x46, 0x74, 0xCC, 0xC7, 0xEA, 0x11, 0x9C, 0xB4,  // Ft......
                    /* 01D0 */  0xA7, 0x17, 0xD9, 0x4A, 0xC1, 0x04, 0xEC, 0x61,  // ...J...a
                    /* 01D8 */  0x5B, 0x23, 0x85, 0xD4, 0xD0, 0x68, 0x3C, 0x06,  // [#...h<.
                    /* 01E0 */  0x77, 0xFE, 0x13, 0x09, 0x05, 0x31, 0xA0, 0xC3,  // w....1..
                    /* 01E8 */  0x41, 0xC8, 0xC9, 0x49, 0x00, 0xA5, 0x62, 0xBC,  // A..I..b.
                    /* 01F0 */  0xE4, 0x68, 0xC1, 0x08, 0xA6, 0x81, 0xD0, 0xDD,  // .h......
                    /* 01F8 */  0xC1, 0xF3, 0xF3, 0x3D, 0x80, 0xDF, 0x4C, 0x7C,  // ...=..L|
                    /* 0200 */  0x32, 0x30, 0xB0, 0xEF, 0x13, 0x6F, 0x1C, 0xF0,  // 20...o..
                    /* 0208 */  0xFF, 0xFF, 0x37, 0x0E, 0x36, 0x09, 0x8C, 0x9A,  // ..7.6...
                    /* 0210 */  0x23, 0x04, 0x9D, 0x02, 0xBF, 0x00, 0xBC, 0x0A,  // #.......
                    /* 0218 */  0x98, 0xC0, 0xBA, 0x2E, 0x06, 0xD0, 0x4F, 0x1D,  // ......O.
                    /* 0220 */  0x1E, 0xA8, 0xAF, 0x1C, 0x67, 0x63, 0x7D, 0x07,  // ....gc}.
                    /* 0228 */  0x03, 0x50, 0x00, 0xF9, 0x22, 0xE0, 0x93, 0xC1,  // .P.."...
                    /* 0230 */  0xC3, 0x00, 0xBB, 0x19, 0x18, 0x26, 0x9A, 0xD1,  // .....&..
                    /* 0238 */  0xB9, 0xA8, 0x69, 0xA3, 0x64, 0xC0, 0x68, 0xDA,  // ..i.d.h.
                    /* 0240 */  0x06, 0xF1, 0xB4, 0x1D, 0x71, 0xDA, 0x68, 0x68,  // ....q.hh
                    /* 0248 */  0x5F, 0x05, 0x7C, 0x11, 0x70, 0xA8, 0x61, 0xD3,  // _.|.p.a.
                    /* 0250 */  0x3B, 0x07, 0x7E, 0xAE, 0x67, 0x16, 0xD0, 0x93,  // ;.~.g...
                    /* 0258 */  0xF0, 0x91, 0xE4, 0xB8, 0xC1, 0x32, 0x0A, 0x06,  // .....2..
                    /* 0260 */  0x1E, 0x24, 0x8E, 0x47, 0xC1, 0x26, 0xCE, 0x07,  // .$.G.&..
                    /* 0268 */  0xE0, 0x89, 0xF3, 0x71, 0xF9, 0x86, 0x01, 0x7F,  // ...q....
                    /* 0270 */  0xE4, 0x58, 0x82, 0x02, 0x67, 0x0E, 0x72, 0x78,  // .X..g.rx
                    /* 0278 */  0x4C, 0xB0, 0x51, 0x51, 0x59, 0xE3, 0x42, 0x8D,  // L.QQY.B.
                    /* 0280 */  0xD2, 0x57, 0x20, 0x86, 0x7D, 0x82, 0x16, 0x3D,  // .W .}..=
                    /* 0288 */  0x48, 0x9D, 0x2F, 0x0E, 0xEA, 0x69, 0xC4, 0x63,  // H./..i.c
                    /* 0290 */  0x33, 0xAC, 0xC7, 0xFD, 0xFF, 0x0F, 0x8B, 0x41,  // 3......A
                    /* 0298 */  0x0B, 0x7B, 0xB8, 0x2F, 0x22, 0x3E, 0xC5, 0x78,  // .{./">.x
                    /* 02A0 */  0x66, 0xC6, 0x08, 0xEB, 0xB1, 0x7B, 0x40, 0x8F,  // f....{@.
                    /* 02A8 */  0x10, 0xE0, 0x01, 0x7B, 0x35, 0x39, 0xD3, 0x07,  // ...{59..
                    /* 02B0 */  0x97, 0x3F, 0x8E, 0xEA, 0x20, 0x74, 0xDF, 0xE0,  // .?.. t..
                    /* 02B8 */  0x28, 0x21, 0x1E, 0x38, 0x30, 0x04, 0x15, 0xDA,  // (!.80...
                    /* 02C0 */  0xF4, 0xA9, 0xD1, 0xA8, 0x55, 0x83, 0x32, 0x35,  // ....U.25
                    /* 02C8 */  0xCA, 0x34, 0xA8, 0xD5, 0xA7, 0x52, 0x63, 0xC6,  // .4...Rc.
                    /* 02D0 */  0x3C, 0x5C, 0x8E, 0xE8, 0x41, 0x81, 0xBC, 0x13,  // <\..A...
                    /* 02D8 */  0x34, 0x42, 0x87, 0x00, 0xA1, 0x42, 0x9E, 0x08,  // 4B...B..
                    /* 02E0 */  0x32, 0x72, 0x0F, 0x31, 0x88, 0x80, 0xAC, 0xCC,  // 2r.1....
                    /* 02E8 */  0x02, 0x10, 0xD3, 0x09, 0x22, 0x20, 0xFF, 0xFF,  // ...." ..
                    /* 02F0 */  0x01                                             // .
                })
            }

            Method (USSV, 1, Serialized)
            {
                DSCS = Arg0
            }

            Method (GSSV, 0, Serialized)
            {
                Return (DSCS) /* External reference */
            }
        }
    }
}



SSDT18
------
DefinitionBlock ("", "SSDT", 1, "HP", "HPINWWAN", 0x00001000)
{
    External (_SB_.CAGS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PCI0.LPCB.EC0_.ECRG, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.WWP_, FieldUnitObj)
    External (_SB_.PCI0.RP03, DeviceObj)
    External (_SB_.PCI0.RP03._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP03.D3HT, FieldUnitObj)
    External (_SB_.PCI0.RP03.DL23, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP03.L23D, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP03.LASX, UnknownObj)
    External (_SB_.PCI0.RP03.PXSX, DeviceObj)
    External (_SB_.PCI0.RP03.PXSX._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP03.SLOT, UnknownObj)
    External (_SB_.PCI0.RP03.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PSD0, MethodObj)    // 1 Arguments
    External (_SB_.PSD3, MethodObj)    // 1 Arguments
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.SHPO, MethodObj)    // 2 Arguments
    External (NEXP, IntObj)
    External (PEP0, UnknownObj)
    External (WCLN, IntObj)
    External (WDC2, IntObj)
    External (WDCT, IntObj)
    External (WLCT, IntObj)
    External (WMNS, IntObj)
    External (WMXS, IntObj)
    External (WPPE, IntObj)
    External (WPWK, IntObj)
    External (WWBR, IntObj)

    Scope (\_GPE)
    {
        Method (_L4F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.SHPO (\WPWK, One)
            Notify (\_SB.PCI0.RP03, 0x02) // Device Wake
            \_SB.CAGS (\WPWK)
        }
    }

    Scope (\_SB.PCI0.RP03)
    {
        OperationRegion (PCI, PCI_Config, Zero, 0x0100)
        Field (PCI, AnyAcc, NoLock, Preserve)
        {
            WVID,   16, 
            WDID,   16
        }

        Method (PC2M, 1, Serialized)
        {
            Local0 = \_SB.PCI0.GPCB ()
            Local0 += ((Arg0 & 0x001F0000) >> One)
            Local0 += ((Arg0 & 0x07) << 0x0C)
            Return (Local0)
        }

        Method (GMIO, 1, Serialized)
        {
            OperationRegion (PXCS, SystemMemory, PC2M (\_SB.PCI0.RP03._ADR ()), 0x20)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x18), 
                PBUS,   8, 
                SBUS,   8
            }

            Local0 = \_SB.PCI0.GPCB ()
            Local0 += ((Arg0 & 0x001F0000) >> One)
            Local0 += ((Arg0 & 0x07) << 0x0C)
            Local0 += (SBUS << 0x14)
            Return (Local0)
        }

        Name (WKEN, Zero)
        Name (MOL3, One)
        Name (OFEN, One)
        Name (ONEN, Zero)
        Name (FLGN, Zero)
        Name (FLGF, Zero)
        Name (FLGW, Zero)
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            Return (Zero)
        }

        Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
        {
            If (Arg1)
            {
                WKEN = Zero
            }
            ElseIf ((Arg0 && Arg2))
            {
                WKEN = One
            }
            Else
            {
                WKEN = Zero
            }

            If ((Arg0 == Zero))
            {
                MOL3 = One
            }
            Else
            {
                MOL3 = Zero
            }
        }

        PowerResource (PXP, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (PSTA ())
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    FLGN = MOL3 /* \_SB_.PCI0.RP03.MOL3 */
                    If ((ONEN == Zero))
                    {
                        Return (Zero)
                    }

                    \_SB.SHPO (\WPWK, One)
                    PON ()
                    L23D ()
                    If (FLGN)
                    {
                        Sleep (0x01F4)
                    }

                    OFEN = One
                    ONEN = Zero
                }
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    If ((WVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If ((OFEN == Zero))
                    {
                        Return (Zero)
                    }

                    FLGF = MOL3 /* \_SB_.PCI0.RP03.MOL3 */
                    FLGW = WKEN /* \_SB_.PCI0.RP03.WKEN */
                    DL23 ()
                    POFF ()
                    If (FLGF)
                    {
                        If ((\WWBR != Zero))
                        {
                            \_SB.SGOV (\WWBR, Zero)
                            Sleep (0x1E)
                        }

                        Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                        \_SB.PCI0.LPCB.EC0.WWP = One
                        Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    }

                    If (FLGW)
                    {
                        \_SB.SHPO (\WPWK, Zero)
                    }
                    Else
                    {
                        \_SB.SHPO (\WPWK, One)
                    }
                }

                OFEN = Zero
                ONEN = One
            }
        }

        Method (PSTA, 0, NotSerialized)
        {
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                If ((Zero == \_SB.PCI0.LPCB.EC0.WWP))
                {
                    If ((WVID == 0xFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (PON, 0, NotSerialized)
        {
            \_SB.PSD0 (SLOT)
            If (FLGN)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                \_SB.PCI0.LPCB.EC0.WWP = Zero
                Release (\_SB.PCI0.LPCB.EC0.ECMX)
                Sleep (PEP0)
                If ((\WWBR != Zero))
                {
                    \_SB.SGOV (\WWBR, One)
                }

                Sleep (0x14)
            }
            Else
            {
                Stall (0x14)
            }

            If ((\WCLN != Zero))
            {
                SPCO (\WCLN, One)
            }

            Sleep (0x64)
            If ((\WPPE != Zero))
            {
                \_SB.SGOV (\WPPE, Zero)
            }
        }

        Method (POFF, 0, NotSerialized)
        {
            If ((\WPPE != Zero))
            {
                \_SB.SGOV (\WPPE, One)
            }

            \_SB.PSD3 (SLOT)
            If ((\WCLN != Zero))
            {
                SPCO (\WCLN, Zero)
                Sleep (0x10)
            }
        }

        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
        {
            Return (Package (0x01)
            {
                PXP
            })
        }

        Scope (PXSX)
        {
            Name (L850, Zero)
            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
            {
                Return (Package (0x01)
                {
                    \_SB.PCI0.RP03.PXP
                })
            }

            Method (_RST, 0, NotSerialized)  // _RST: Device Reset
            {
                OperationRegion (PXCS, SystemMemory, GMIO (\_SB.PCI0.RP03.PXSX._ADR ()), 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   16, 
                    DVID,   16, 
                    Offset (0x78), 
                    DCTL,   16, 
                    DSTS,   16, 
                    Offset (0x80), 
                    LCTL,   16, 
                    LSTS,   16, 
                    Offset (0x98), 
                    DCT2,   16, 
                    Offset (0x148), 
                    Offset (0x14C), 
                    MXSL,   16, 
                    MNSL,   16, 
                    Offset (0x158), 
                    L1SC,   32
                }

                If ((VDID == 0x73608086))
                {
                    L850 = One
                }

                \_SB.SGOV (\WWBR, Zero)
                Sleep (0xC8)
                Notify (\_SB.PCI0.RP03.PXSX, One) // Device Check
                \_SB.SGOV (\WPPE, Zero)
                \_SB.SGOV (\WWBR, One)
                Sleep (0x0190)
                Local0 = Zero
                While ((\_SB.PCI0.RP03.LASX == Zero))
                {
                    If ((Local0 > 0x14))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                Sleep (0x0A)
                L1SC |= 0x0F
                If ((NEXP == Zero))
                {
                    DCTL = \WDCT /* External reference */
                    LCTL = \WLCT /* External reference */
                    DCT2 = \WDC2 /* External reference */
                    MXSL = \WMXS /* External reference */
                    MNSL = \WMNS /* External reference */
                }
                Else
                {
                    LCTL = 0x0142
                }

                Notify (\_SB.PCI0.RP03.PXSX, One) // Device Check
            }
        }
    }
}



SSDT19
------
DefinitionBlock ("", "SSDT", 2, "HP    ", "PwrCtlEv", 0x00000001)
{
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.LPCB, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PCI0.LPCB.EC0_.ECRG, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.PSSB, FieldUnitObj)
    External (_SB_.WMIV.GVWE, MethodObj)    // 2 Arguments
    External (ECRG, IntObj)

    Scope (\_SB.PCI0.LPCB.EC0)
    {
        OperationRegion (HPSF, SystemMemory, 0x97AF5000, 0x00000003)
        Field (HPSF, AnyAcc, Lock, Preserve)
        {
            PSCF,   8, 
            BCIF,   8, 
            BCSC,   8
        }

        Name (PSSS, Zero)
        Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (ECRG)
            {
                Local0 = (PSSS & One)
                Local1 = (\_SB.PCI0.LPCB.EC0.PSSB & One)
                Local2 = (PSSS & 0x02)
                Local3 = (\_SB.PCI0.LPCB.EC0.PSSB & 0x02)
                Local4 = (PSSS & 0x10)
                Local5 = (\_SB.PCI0.LPCB.EC0.PSSB & 0x10)
                If (((Local0 != Local1) && (Local0 == Zero)))
                {
                    \_SB.WMIV.GVWE (0x0F, Zero)
                    PSSS = \_SB.PCI0.LPCB.EC0.PSSB /* External reference */
                }
                ElseIf (((Local4 != Local5) && (Local4 == Zero)))
                {
                    \_SB.WMIV.GVWE (0x0F, 0x03)
                    PSSS = \_SB.PCI0.LPCB.EC0.PSSB /* External reference */
                }
                ElseIf (((Local0 != Local1) && (Local0 == One)))
                {
                    \_SB.WMIV.GVWE (0x0F, One)
                    PSSS = \_SB.PCI0.LPCB.EC0.PSSB /* External reference */
                }
                ElseIf (((Local2 != Local3) && (Local2 == 0x02)))
                {
                    If (!BCIF)
                    {
                        \_SB.WMIV.GVWE (0x10, Zero)
                    }

                    BCIF = Zero
                    PSSS = \_SB.PCI0.LPCB.EC0.PSSB /* External reference */
                }
                ElseIf (((Local2 != Local3) && (Local2 == Zero)))
                {
                    If (!BCIF)
                    {
                        \_SB.WMIV.GVWE (0x10, One)
                    }

                    BCIF = Zero
                    PSSS = \_SB.PCI0.LPCB.EC0.PSSB /* External reference */
                }
            }

            Release (\_SB.PCI0.LPCB.EC0.ECMX)
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "NVTEC", 0x00000001)
{
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.LPCB, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.ACPR, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.ADP_, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.BDC_, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.BDV_, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.CLID, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PCI0.LPCB.EC0_.ECRG, IntObj)

    Scope (\_SB.PCI0.LPCB.EC0)
    {
        Method (EC10, 0, NotSerialized)
        {
            Local0 = \_SB.PCI0.LPCB.EC0.CLID /* External reference */
            Return (Local0)
        }

        Method (EC11, 0, NotSerialized)
        {
            Local0 = Zero
            Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Local0 = \_SB.PCI0.LPCB.EC0.ADP /* External reference */
            }

            Release (\_SB.PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (EC12, 0, NotSerialized)
        {
            Local0 = Zero
            Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Local0 = \_SB.PCI0.LPCB.EC0.ACPR /* External reference */
            }

            Release (\_SB.PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }

        Method (EC13, 0, NotSerialized)
        {
            Local0 = Zero
            Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                Local1 = \_SB.PCI0.LPCB.EC0.BDV /* External reference */
                Local2 = \_SB.PCI0.LPCB.EC0.BDC /* External reference */
                Local0 = (Local1 * Local2)
                Divide (Local0, 0x000F4240, Local3, Local0)
                If ((Local3 >= 0x0007A120))
                {
                    Local0++
                }
            }

            Release (\_SB.PCI0.LPCB.EC0.ECMX)
            Return (Local0)
        }
    }
}



SSDT20
------
DefinitionBlock ("", "SSDT", 1, "HPQOEM", "MS-SSDT", 0x00003000)
{
    External (_SB_.GGIV, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.CNIP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.CNVW.VDID, FieldUnitObj)
    External (_SB_.PCI0.GFX0, DeviceObj)
    External (_SB_.PCI0.GLAN, DeviceObj)
    External (_SB_.PCI0.HDAS, DeviceObj)
    External (_SB_.PCI0.HECI, DeviceObj)
    External (_SB_.PCI0.I2C0, DeviceObj)
    External (_SB_.PCI0.I2C1, DeviceObj)
    External (_SB_.PCI0.I2C2, DeviceObj)
    External (_SB_.PCI0.I2C3, DeviceObj)
    External (_SB_.PCI0.I2C4, DeviceObj)
    External (_SB_.PCI0.I2C5, DeviceObj)
    External (_SB_.PCI0.IPU0, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.SLPT, FieldUnitObj)
    External (_SB_.PCI0.RP01.PXSX, DeviceObj)
    External (_SB_.PCI0.RP01.PXSX.WGST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP01.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP01.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP01.TBNF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP02.PXSX, DeviceObj)
    External (_SB_.PCI0.RP02.PXSX.WGST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP02.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP02.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP03.PXSX, DeviceObj)
    External (_SB_.PCI0.RP03.PXSX.WGST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP03.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP03.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP04.PXSX, DeviceObj)
    External (_SB_.PCI0.RP04.PXSX.WGST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP04.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP04.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP05.PXSX, DeviceObj)
    External (_SB_.PCI0.RP05.PXSX.WGST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP05.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP05.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP05.TBNF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP06.PXSX, DeviceObj)
    External (_SB_.PCI0.RP06.PXSX.WGST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP06.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP06.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP07.PXSX, DeviceObj)
    External (_SB_.PCI0.RP07.PXSX.WGST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP07.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP07.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP08.PXSX, DeviceObj)
    External (_SB_.PCI0.RP08.PXSX.WGST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP08.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP08.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP09.PXSX, DeviceObj)
    External (_SB_.PCI0.RP09.PXSX.WGST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP09.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP09.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP09.TBNF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP10.PXSX, DeviceObj)
    External (_SB_.PCI0.RP10.PXSX.WGST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP10.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP10.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP11.PXSX, DeviceObj)
    External (_SB_.PCI0.RP11.PXSX.WGST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP11.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP11.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP12.PXSX, DeviceObj)
    External (_SB_.PCI0.RP12.PXSX.WGST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP12.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP12.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP13.PXSX, DeviceObj)
    External (_SB_.PCI0.RP13.PXSX.WGST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP13.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP13.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP13.TBNF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP14.PXSX, DeviceObj)
    External (_SB_.PCI0.RP14.PXSX.WGST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP14.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP14.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP15.PXSX, DeviceObj)
    External (_SB_.PCI0.RP15.PXSX.WGST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP15.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP15.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP16.PXSX, DeviceObj)
    External (_SB_.PCI0.RP16.PXSX.WGST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP16.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP16.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP17.PXSX, DeviceObj)
    External (_SB_.PCI0.RP17.PXSX.WGST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP17.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP17.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP18.PXSX, DeviceObj)
    External (_SB_.PCI0.RP18.PXSX.WGST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP18.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP18.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP19.PXSX, DeviceObj)
    External (_SB_.PCI0.RP19.PXSX.WGST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP19.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP19.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP20.PXSX, DeviceObj)
    External (_SB_.PCI0.RP20.PXSX.WGST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP20.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP20.PXSX.WWST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0, DeviceObj)
    External (_SB_.PCI0.SAT0.VOL0, DeviceObj)
    External (_SB_.PCI0.SPI0, DeviceObj)
    External (_SB_.PCI0.SPI1, DeviceObj)
    External (_SB_.PCI0.SPI2, DeviceObj)
    External (_SB_.PCI0.UA00, DeviceObj)
    External (_SB_.PCI0.UA01, DeviceObj)
    External (_SB_.PCI0.UA02, DeviceObj)
    External (_SB_.PCI0.XHC_, DeviceObj)
    External (_SB_.PR00, ProcessorObj)
    External (_SB_.PR01, ProcessorObj)
    External (_SB_.PR02, ProcessorObj)
    External (_SB_.PR03, ProcessorObj)
    External (_SB_.PR04, ProcessorObj)
    External (_SB_.PR05, ProcessorObj)
    External (_SB_.PR06, ProcessorObj)
    External (_SB_.PR07, ProcessorObj)
    External (_SB_.PR08, ProcessorObj)
    External (_SB_.PR09, ProcessorObj)
    External (_SB_.PR10, ProcessorObj)
    External (_SB_.PR11, ProcessorObj)
    External (_SB_.PR12, ProcessorObj)
    External (_SB_.PR13, ProcessorObj)
    External (_SB_.PR14, ProcessorObj)
    External (_SB_.PR15, ProcessorObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (ADBG, MethodObj)    // 1 Arguments
    External (ASGM, FieldUnitObj)
    External (ECLP, FieldUnitObj)
    External (ECUP, UnknownObj)
    External (EHLD, MutexObj)
    External (GBES, FieldUnitObj)
    External (GUAM, MethodObj)    // 1 Arguments
    External (LPTL, UnknownObj)
    External (OSYS, FieldUnitObj)
    External (P8XH, MethodObj)    // 2 Arguments
    External (PEPC, FieldUnitObj)
    External (PEPY, FieldUnitObj)
    External (RPS0, IntObj)
    External (RTBT, IntObj)
    External (S0ID, FieldUnitObj)
    External (SPST, FieldUnitObj)
    External (STPC, MethodObj)    // 2 Arguments
    External (TCNT, FieldUnitObj)
    External (WRTO, UnknownObj)

    Name (BUFN, Zero)
    Name (MBUF, Buffer (0xFF){})
    Name (TM_T, Zero)
    OperationRegion (MSNV, SystemMemory, 0x97B22698, 0x00000100)
    Field (MSNV, AnyAcc, NoLock, Preserve)
    {
        ECND,   1, 
        DBDE,   1, 
        Offset (0x01), 
        DDMG,   2040
    }

    Method (NGBG, 1, Serialized)
    {
        If (DBDE)
        {
            Local0 = SizeOf (Arg0)
            Name (BUFS, Buffer (Local0){})
            BUFS = Arg0
            While (Local0)
            {
                MDGC (DerefOf (BUFS [(SizeOf (Arg0) - Local0)]))
                Local0--
            }

            DDMG = MBUF /* \MBUF */
        }
        ElseIf ((BUFN != Zero))
        {
            BUFN = Zero
            DDMG = Zero
            MBUF = Zero
        }
    }

    Method (PTMM, 2, Serialized)
    {
        If (DBDE)
        {
            If ((Arg0 == Zero))
            {
                TM_T = Timer
            }
            Else
            {
                NGBG (Arg1)
                Local0 = ((Timer - TM_T) / 0x2710)
                NGBG (Concatenate (ToDecimalString (Local0), "ms; "))
            }
        }
        Else
        {
            NGBG ("")
        }
    }

    Method (MDGC, 1, Serialized)
    {
        MBUF [BUFN] = Arg0
        BUFN += One
        If ((BUFN > 0xFE))
        {
            BUFN &= 0xFE
            UP_L (0x0F)
        }
    }

    Method (UP_L, 1, Serialized)
    {
        Local2 = Arg0
        Local2 <<= 0x04
        MOVE (Local2)
        Local3 = (0xFF - Local2)
        While (Local2)
        {
            MBUF [Local3] = Zero
            Local3++
            Local2--
        }
    }

    Method (MOVE, 1, Serialized)
    {
        Local4 = Arg0
        BUFN = Zero
        Local5 = (0xFF - Local4)
        While (Local5)
        {
            Local5--
            MBUF [BUFN] = DerefOf (MBUF [Local4])
            BUFN++
            Local4++
        }
    }

    Scope (\_SB.PCI0.GFX0)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (\_SB.PCI0.IPU0)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (\_SB.PCI0.SAT0)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((((S0ID == One) || (OSYS >= 0x07DF)) && (
                (PEPC & 0x03) != Zero)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    If (((S0ID == One) || (OSYS >= 0x07DF)))
    {
        Scope (\_SB.PCI0.I2C0)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PEPD
            })
        }

        Scope (\_SB.PCI0.I2C1)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PEPD
            })
        }

        Scope (\_SB.PCI0.I2C2)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PEPD
            })
        }

        Scope (\_SB.PCI0.I2C3)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PEPD
            })
        }

        Scope (\_SB.PCI0.I2C4)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PEPD
            })
        }

        Scope (\_SB.PCI0.I2C5)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PEPD
            })
        }

        Scope (\_SB.PCI0.SPI0)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PEPD
            })
        }

        Scope (\_SB.PCI0.SPI1)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PEPD
            })
        }

        Scope (\_SB.PCI0.SPI2)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PEPD
            })
        }

        Scope (\_SB.PCI0.UA00)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PEPD
            })
        }

        Scope (\_SB.PCI0.UA01)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PEPD
            })
        }

        Scope (\_SB.PCI0.UA02)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PEPD
            })
        }

        Scope (\_SB.PCI0.HECI)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PEPD
            })
        }

        If ((GBES != Zero))
        {
            Scope (\_SB.PCI0.GLAN)
            {
                Name (_DEP, Package (0x01)  // _DEP: Dependencies
                {
                    \_SB.PEPD
                })
            }
        }
    }

    Scope (\_SB.PCI0.XHC)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (\_SB.PCI0.HDAS)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((S0ID == One))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (\_SB.PCI0.RP01.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If ((SCCX == 0x02))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If ((CondRefOf (RDID) && 0x02))
            {
                Switch (ToInteger (RDID))
                {
                    Case (0x522A10EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.RP02.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If ((SCCX == 0x02))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If ((CondRefOf (RDID) && 0x02))
            {
                Switch (ToInteger (RDID))
                {
                    Case (0x522A10EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.RP03.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If ((SCCX == 0x02))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If ((CondRefOf (RDID) && 0x02))
            {
                Switch (ToInteger (RDID))
                {
                    Case (0x522A10EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.RP04.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If ((SCCX == 0x02))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If ((CondRefOf (RDID) && 0x02))
            {
                Switch (ToInteger (RDID))
                {
                    Case (0x522A10EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.RP05.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If ((SCCX == 0x02))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If ((CondRefOf (RDID) && 0x02))
            {
                Switch (ToInteger (RDID))
                {
                    Case (0x522A10EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.RP06.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If ((SCCX == 0x02))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If ((CondRefOf (RDID) && 0x02))
            {
                Switch (ToInteger (RDID))
                {
                    Case (0x522A10EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.RP07.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If ((SCCX == 0x02))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If ((CondRefOf (RDID) && 0x02))
            {
                Switch (ToInteger (RDID))
                {
                    Case (0x522A10EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.RP08.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If ((SCCX == 0x02))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If ((CondRefOf (RDID) && 0x02))
            {
                Switch (ToInteger (RDID))
                {
                    Case (0x522A10EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.RP09.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If ((SCCX == 0x02))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If ((CondRefOf (RDID) && 0x02))
            {
                Switch (ToInteger (RDID))
                {
                    Case (0x522A10EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.RP10.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If ((SCCX == 0x02))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If ((CondRefOf (RDID) && 0x02))
            {
                Switch (ToInteger (RDID))
                {
                    Case (0x522A10EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.RP11.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If ((SCCX == 0x02))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If ((CondRefOf (RDID) && 0x02))
            {
                Switch (ToInteger (RDID))
                {
                    Case (0x522A10EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.RP12.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If ((SCCX == 0x02))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If ((CondRefOf (RDID) && 0x02))
            {
                Switch (ToInteger (RDID))
                {
                    Case (0x522A10EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.RP13.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If ((SCCX == 0x02))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If ((CondRefOf (RDID) && 0x02))
            {
                Switch (ToInteger (RDID))
                {
                    Case (0x522A10EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.RP14.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If ((SCCX == 0x02))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If ((CondRefOf (RDID) && 0x02))
            {
                Switch (ToInteger (RDID))
                {
                    Case (0x522A10EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.RP15.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If ((SCCX == 0x02))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If ((CondRefOf (RDID) && 0x02))
            {
                Switch (ToInteger (RDID))
                {
                    Case (0x522A10EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.RP16.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If ((SCCX == 0x02))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If ((CondRefOf (RDID) && 0x02))
            {
                Switch (ToInteger (RDID))
                {
                    Case (0x522A10EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.RP17.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If ((SCCX == 0x02))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If ((CondRefOf (RDID) && 0x02))
            {
                Switch (ToInteger (RDID))
                {
                    Case (0x522A10EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.RP18.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If ((SCCX == 0x02))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If ((CondRefOf (RDID) && 0x02))
            {
                Switch (ToInteger (RDID))
                {
                    Case (0x522A10EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.RP19.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If ((SCCX == 0x02))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If ((CondRefOf (RDID) && 0x02))
            {
                Switch (ToInteger (RDID))
                {
                    Case (0x522A10EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.RP20.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, Zero, 0x12)
        Field (PCCX, AnyAcc, NoLock, Preserve)
        {
            RDID,   32
        }

        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x09), 
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PGPA, 0, Serialized)
        {
            If ((BCCX == 0x03))
            {
                If ((SCCX == 0x02))
                {
                    If ((PIXX == Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (CRST, 0, Serialized)
        {
            If ((CondRefOf (RDID) && 0x02))
            {
                Switch (ToInteger (RDID))
                {
                    Case (0x522A10EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PR00)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (\_SB.PR01)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (\_SB.PR02)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (\_SB.PR03)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (\_SB.PR04)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (\_SB.PR05)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (\_SB.PR06)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (\_SB.PR07)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (\_SB.PR08)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (\_SB.PR09)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (\_SB.PR10)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (\_SB.PR11)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (\_SB.PR12)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (\_SB.PR13)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (\_SB.PR14)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (\_SB.PR15)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (\_SB)
    {
        Device (PEPD)
        {
            Name (_HID, "INT33A1" /* Intel Power Engine */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0D80") /* Windows-compatible System Power Management Controller */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (PPD0, Package (0x03)
            {
                "\\_SB.PCI0.SAT0", 
                Zero, 
                Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0xFF, 
                        Zero, 
                        0x81
                    }
                }
            })
            Name (PPD3, Package (0x03)
            {
                "\\_SB.PCI0.SAT0", 
                Zero, 
                Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0xFF, 
                        0x03
                    }
                }
            })
            Name (WWD3, Package (0x03)
            {
                "\\_SB.PCI0.RP02", 
                Zero, 
                Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0xFF, 
                        0x03
                    }
                }
            })
            Name (DEVY, Package (0x40)
            {
                Package (0x03)
                {
                    "\\_SB.PR00", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR01", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR02", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR03", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR04", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR05", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR06", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR07", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.GFX0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.UA00", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.UA01", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.XHC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.HDAS", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.PEMC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.PSDC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C2", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C3", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C4", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C5", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.UA02", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SPI0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SPI1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP01.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP02.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP03.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP04.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP05.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP06.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP07.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP08.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP09.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP10.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP11.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP12.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP13.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP14.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP15.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP16.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP17.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP18.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP19.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP20.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.VOL0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR08", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR09", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR10", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR11", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR12", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR13", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR14", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR15", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SPI2", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.CNVW", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.IPU0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.HECI", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.GLAN", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.PEG0.PEGP", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved For TBT RP0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved For TBT RP1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "USB\\VID_8087&PID_0AC9&MI*", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x02
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP02", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }
            })
            Name (BCCD, Package (0x19)
            {
                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT0", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT1", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT2", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT3", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP01.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP02.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP03.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP04.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP05.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP06.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP07.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP08.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP09.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP10.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP11.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP12.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP13.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP14.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP15.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP16.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP17.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP18.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP19.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP20.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((OSYS >= 0x07DF) || ((OSYS >= 0x07DC) && (
                    S0ID == One))))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("c4eb40a0-6cd2-11e2-bcfd-0800200c9a66") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x7F                                             // .
                        })
                    }

                    If ((Arg2 == One))
                    {
                        If ((S0ID == Zero))
                        {
                            Return (Package (0x00){})
                        }

                        If (((PEPC & One) == One))
                        {
                            If (((PEPC & 0x03) == One))
                            {
                                DEVY [0x09] = PPD0 /* \_SB_.PEPD.PPD0 */
                            }
                            ElseIf (((PEPC & 0x03) == 0x03))
                            {
                                DEVY [0x09] = PPD3 /* \_SB_.PEPD.PPD3 */
                            }

                            DerefOf (DEVY [0x09]) [One] = One
                        }
                        ElseIf (((PEPC & 0x03) == 0x02))
                        {
                            DerefOf (DEVY [0x2D]) [One] = One
                        }

                        If (((PEPC & 0x10) == 0x10))
                        {
                            If ((\_SB.PCI0.RP01.PXSX.PAHC () || \_SB.PCI0.RP01.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x19]) [One] = One
                            }

                            If ((\_SB.PCI0.RP02.PXSX.PAHC () || \_SB.PCI0.RP02.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1A]) [One] = One
                            }

                            If ((\_SB.PCI0.RP03.PXSX.PAHC () || \_SB.PCI0.RP03.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1B]) [One] = One
                            }

                            If ((\_SB.PCI0.RP04.PXSX.PAHC () || \_SB.PCI0.RP04.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1C]) [One] = One
                            }

                            If ((\_SB.PCI0.RP05.PXSX.PAHC () || \_SB.PCI0.RP05.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1D]) [One] = One
                            }

                            If ((\_SB.PCI0.RP06.PXSX.PAHC () || \_SB.PCI0.RP06.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1E]) [One] = One
                            }

                            If ((\_SB.PCI0.RP07.PXSX.PAHC () || \_SB.PCI0.RP07.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1F]) [One] = One
                            }

                            If ((\_SB.PCI0.RP08.PXSX.PAHC () || \_SB.PCI0.RP08.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x20]) [One] = One
                            }

                            If ((\_SB.PCI0.RP09.PXSX.PAHC () || \_SB.PCI0.RP09.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x21]) [One] = One
                            }

                            If ((\_SB.PCI0.RP10.PXSX.PAHC () || \_SB.PCI0.RP10.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x22]) [One] = One
                            }

                            If ((\_SB.PCI0.RP11.PXSX.PAHC () || \_SB.PCI0.RP11.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x23]) [One] = One
                            }

                            If ((\_SB.PCI0.RP12.PXSX.PAHC () || \_SB.PCI0.RP12.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x24]) [One] = One
                            }

                            If ((\_SB.PCI0.RP13.PXSX.PAHC () || \_SB.PCI0.RP13.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x25]) [One] = One
                            }

                            If ((\_SB.PCI0.RP14.PXSX.PAHC () || \_SB.PCI0.RP14.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x26]) [One] = One
                            }

                            If ((\_SB.PCI0.RP15.PXSX.PAHC () || \_SB.PCI0.RP15.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x27]) [One] = One
                            }

                            If ((\_SB.PCI0.RP16.PXSX.PAHC () || \_SB.PCI0.RP16.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x28]) [One] = One
                            }

                            If ((\_SB.PCI0.RP17.PXSX.PAHC () || \_SB.PCI0.RP17.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x29]) [One] = One
                            }

                            If ((\_SB.PCI0.RP18.PXSX.PAHC () || \_SB.PCI0.RP18.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x2A]) [One] = One
                            }

                            If ((\_SB.PCI0.RP19.PXSX.PAHC () || \_SB.PCI0.RP19.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x2B]) [One] = One
                            }

                            If ((\_SB.PCI0.RP20.PXSX.PAHC () || \_SB.PCI0.RP20.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x2C]) [One] = One
                            }
                        }

                        If (((OSYS >= 0x07DF) && (WRTO != Zero)))
                        {
                            If ((CondRefOf (\_SB.PCI0.RP01.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PCI0.RP01.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        WWD3 [Zero] = "\\_SB.PCI0.RP01"
                                        DEVY [0x3F] = WWD3 /* \_SB_.PEPD.WWD3 */
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3E]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP02.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PCI0.RP02.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        WWD3 [Zero] = "\\_SB.PCI0.RP02"
                                        DEVY [0x3F] = WWD3 /* \_SB_.PEPD.WWD3 */
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3E]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP03.PXSX.WWST) && Ones))
                            {
                                If (\_SB.PCI0.RP03.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        WWD3 [Zero] = "\\_SB.PCI0.RP03"
                                        DEVY [0x3F] = WWD3 /* \_SB_.PEPD.WWD3 */
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3E]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP04.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PCI0.RP04.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        WWD3 [Zero] = "\\_SB.PCI0.RP04"
                                        DEVY [0x3F] = WWD3 /* \_SB_.PEPD.WWD3 */
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3E]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP05.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PCI0.RP05.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        WWD3 [Zero] = "\\_SB.PCI0.RP05"
                                        DEVY [0x3F] = WWD3 /* \_SB_.PEPD.WWD3 */
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3E]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP06.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PCI0.RP06.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        WWD3 [Zero] = "\\_SB.PCI0.RP06"
                                        DEVY [0x3F] = WWD3 /* \_SB_.PEPD.WWD3 */
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3E]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP07.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PCI0.RP07.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        WWD3 [Zero] = "\\_SB.PCI0.RP07"
                                        DEVY [0x3F] = WWD3 /* \_SB_.PEPD.WWD3 */
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3E]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP08.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PCI0.RP08.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        WWD3 [Zero] = "\\_SB.PCI0.RP08"
                                        DEVY [0x3F] = WWD3 /* \_SB_.PEPD.WWD3 */
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3E]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP09.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PCI0.RP09.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        WWD3 [Zero] = "\\_SB.PCI0.RP09"
                                        DEVY [0x3F] = WWD3 /* \_SB_.PEPD.WWD3 */
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3E]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP10.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PCI0.RP10.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        WWD3 [Zero] = "\\_SB.PCI0.RP10"
                                        DEVY [0x3F] = WWD3 /* \_SB_.PEPD.WWD3 */
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3E]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP11.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PCI0.RP11.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        WWD3 [Zero] = "\\_SB.PCI0.RP11"
                                        DEVY [0x3F] = WWD3 /* \_SB_.PEPD.WWD3 */
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3E]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP12.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PCI0.RP12.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        WWD3 [Zero] = "\\_SB.PCI0.RP12"
                                        DEVY [0x3F] = WWD3 /* \_SB_.PEPD.WWD3 */
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3E]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP13.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PCI0.RP13.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        WWD3 [Zero] = "\\_SB.PCI0.RP13"
                                        DEVY [0x3F] = WWD3 /* \_SB_.PEPD.WWD3 */
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3E]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP14.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PCI0.RP14.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        WWD3 [Zero] = "\\_SB.PCI0.RP14"
                                        DEVY [0x3F] = WWD3 /* \_SB_.PEPD.WWD3 */
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3E]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP15.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PCI0.RP15.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        WWD3 [Zero] = "\\_SB.PCI0.RP15"
                                        DEVY [0x3F] = WWD3 /* \_SB_.PEPD.WWD3 */
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3E]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP16.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PCI0.RP16.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        WWD3 [Zero] = "\\_SB.PCI0.RP16"
                                        DEVY [0x3F] = WWD3 /* \_SB_.PEPD.WWD3 */
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3E]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP17.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PCI0.RP17.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        WWD3 [Zero] = "\\_SB.PCI0.RP17"
                                        DEVY [0x3F] = WWD3 /* \_SB_.PEPD.WWD3 */
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3E]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP18.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PCI0.RP18.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        WWD3 [Zero] = "\\_SB.PCI0.RP18"
                                        DEVY [0x3F] = WWD3 /* \_SB_.PEPD.WWD3 */
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3E]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP19.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PCI0.RP19.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        WWD3 [Zero] = "\\_SB.PCI0.RP19"
                                        DEVY [0x3F] = WWD3 /* \_SB_.PEPD.WWD3 */
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3E]) [One] = One
                                    }
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP20.PXSX.WWST) && Zero))
                            {
                                If (\_SB.PCI0.RP20.PXSX.WWST ())
                                {
                                    If ((WRTO == 0x03))
                                    {
                                        WWD3 [Zero] = "\\_SB.PCI0.RP20"
                                        DEVY [0x3F] = WWD3 /* \_SB_.PEPD.WWD3 */
                                        DerefOf (DEVY [0x3F]) [One] = One
                                    }

                                    If ((WRTO == One))
                                    {
                                        DerefOf (DEVY [0x3E]) [One] = One
                                    }
                                }
                            }
                        }

                        If (((PEPC & 0x04) == Zero))
                        {
                            DerefOf (DEVY [0x0A]) [One] = Zero
                        }

                        If (((PEPC & 0x08) == Zero))
                        {
                            DerefOf (DEVY [0x0B]) [One] = Zero
                        }

                        If (((PEPC & 0x10) == Zero)){}
                        If (((PEPC & 0x20) == Zero))
                        {
                            DerefOf (DEVY [0x0C]) [One] = Zero
                        }

                        If (((PEPC & 0x40) == Zero))
                        {
                            DerefOf (DEVY [0x0D]) [One] = Zero
                        }

                        If (((PEPC & 0x80) == Zero))
                        {
                            DerefOf (DEVY [0x0E]) [One] = Zero
                        }

                        If (((PEPC & 0x0100) == Zero))
                        {
                            DerefOf (DEVY [0x0F]) [One] = Zero
                        }

                        If (((PEPC & 0x0200) == Zero))
                        {
                            DerefOf (DEVY [0x08]) [One] = Zero
                        }

                        If ((TCNT >= One))
                        {
                            DerefOf (DEVY [Zero]) [One] = One
                        }

                        If ((TCNT >= 0x02))
                        {
                            DerefOf (DEVY [One]) [One] = One
                        }

                        If ((TCNT >= 0x03))
                        {
                            DerefOf (DEVY [0x02]) [One] = One
                        }

                        If ((TCNT >= 0x04))
                        {
                            DerefOf (DEVY [0x03]) [One] = One
                        }

                        If ((TCNT >= 0x05))
                        {
                            DerefOf (DEVY [0x04]) [One] = One
                        }

                        If ((TCNT >= 0x06))
                        {
                            DerefOf (DEVY [0x05]) [One] = One
                        }

                        If ((TCNT >= 0x07))
                        {
                            DerefOf (DEVY [0x06]) [One] = One
                        }

                        If ((TCNT >= 0x08))
                        {
                            DerefOf (DEVY [0x07]) [One] = One
                        }

                        If ((TCNT >= 0x09))
                        {
                            DerefOf (DEVY [0x2E]) [One] = One
                        }

                        If ((TCNT >= 0x0A))
                        {
                            DerefOf (DEVY [0x2F]) [One] = One
                        }

                        If ((TCNT >= 0x0B))
                        {
                            DerefOf (DEVY [0x30]) [One] = One
                        }

                        If ((TCNT >= 0x0C))
                        {
                            DerefOf (DEVY [0x31]) [One] = One
                        }

                        If ((TCNT >= 0x0D))
                        {
                            DerefOf (DEVY [0x32]) [One] = One
                        }

                        If ((TCNT >= 0x0E))
                        {
                            DerefOf (DEVY [0x33]) [One] = One
                        }

                        If ((TCNT >= 0x0F))
                        {
                            DerefOf (DEVY [0x34]) [One] = One
                        }

                        If ((TCNT >= 0x10))
                        {
                            DerefOf (DEVY [0x35]) [One] = One
                        }

                        If (((PEPC & 0x0400) == Zero))
                        {
                            DerefOf (DEVY [Zero]) [One] = Zero
                            DerefOf (DEVY [One]) [One] = Zero
                            DerefOf (DEVY [0x02]) [One] = Zero
                            DerefOf (DEVY [0x03]) [One] = Zero
                            DerefOf (DEVY [0x04]) [One] = Zero
                            DerefOf (DEVY [0x05]) [One] = Zero
                            DerefOf (DEVY [0x06]) [One] = Zero
                            DerefOf (DEVY [0x07]) [One] = Zero
                            DerefOf (DEVY [0x2E]) [One] = Zero
                            DerefOf (DEVY [0x2F]) [One] = Zero
                            DerefOf (DEVY [0x30]) [One] = Zero
                            DerefOf (DEVY [0x31]) [One] = Zero
                            DerefOf (DEVY [0x32]) [One] = Zero
                            DerefOf (DEVY [0x33]) [One] = Zero
                            DerefOf (DEVY [0x34]) [One] = Zero
                            DerefOf (DEVY [0x35]) [One] = Zero
                        }

                        If (((PEPC & 0x0800) == Zero))
                        {
                            DerefOf (DEVY [0x10]) [One] = Zero
                        }

                        If (((PEPC & 0x1000) == Zero))
                        {
                            DerefOf (DEVY [0x11]) [One] = Zero
                        }

                        If (((PEPC & 0x2000) == Zero))
                        {
                            DerefOf (DEVY [0x12]) [One] = Zero
                        }

                        If (((PEPC & 0x4000) == Zero))
                        {
                            DerefOf (DEVY [0x13]) [One] = Zero
                        }

                        If (((PEPC & 0x8000) == Zero))
                        {
                            DerefOf (DEVY [0x14]) [One] = Zero
                        }

                        If (((PEPC & 0x00010000) == Zero))
                        {
                            DerefOf (DEVY [0x15]) [One] = Zero
                        }

                        If (((PEPC & 0x00020000) == Zero))
                        {
                            DerefOf (DEVY [0x16]) [One] = Zero
                        }

                        If (((PEPC & 0x00040000) == Zero))
                        {
                            DerefOf (DEVY [0x17]) [One] = Zero
                        }

                        If (((PEPC & 0x00080000) == Zero))
                        {
                            DerefOf (DEVY [0x18]) [One] = Zero
                        }

                        If (((PEPC & 0x00100000) == Zero))
                        {
                            DerefOf (DEVY [0x36]) [One] = Zero
                        }

                        If (((PEPC & 0x00200000) == Zero))
                        {
                            DerefOf (DEVY [0x38]) [One] = Zero
                        }

                        If (((PEPC & 0x00400000) == Zero))
                        {
                            DerefOf (DEVY [0x39]) [One] = Zero
                        }

                        If ((((PEPC & 0x00800000) == Zero) || (GBES == Zero)))
                        {
                            DerefOf (DEVY [0x3A]) [One] = Zero
                        }

                        If (((PEPC & 0x01000000) != Zero))
                        {
                            DerefOf (DEVY [0x3B]) [One] = One
                        }

                        If (CondRefOf (\RTBT))
                        {
                            If ((\RTBT == One))
                            {
                                If (CondRefOf (STPC))
                                {
                                    If (STPC (0x3C, 0x3E))
                                    {
                                        ADBG ("TBT PEP Constraint is successfully SET")
                                    }
                                    Else
                                    {
                                        ADBG ("TBT PEP Constraint is Failed to SET")
                                    }
                                }
                            }
                        }

                        If ((OSYS >= 0x07DF))
                        {
                            If ((CondRefOf (\_SB.PCI0.RP01.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PCI0.RP01.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x19]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x19]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x19]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP02.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PCI0.RP02.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x1A]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x1A]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x1A]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP03.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PCI0.RP03.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x1B]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x1B]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x1B]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP04.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PCI0.RP04.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x1C]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x1C]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x1C]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP05.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PCI0.RP05.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x1D]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x1D]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x1D]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP06.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PCI0.RP06.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x1E]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x1E]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x1E]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP07.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PCI0.RP07.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x1F]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x1F]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x1F]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP08.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PCI0.RP08.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x20]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x20]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x20]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP09.PXSX.WIST) && Ones))
                            {
                                If (\_SB.PCI0.RP09.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x21]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x21]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x21]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP10.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PCI0.RP10.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x22]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x22]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x22]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP11.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PCI0.RP11.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x23]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x23]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x23]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP12.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PCI0.RP12.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x24]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x24]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x24]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP13.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PCI0.RP13.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x25]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x25]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x25]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP14.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PCI0.RP14.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x26]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x26]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x26]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP15.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PCI0.RP15.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x27]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x27]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x27]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP16.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PCI0.RP16.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x28]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x28]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x28]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP17.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PCI0.RP17.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x29]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x29]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x29]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP18.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PCI0.RP18.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x2A]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x2A]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x2A]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP19.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PCI0.RP19.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x2B]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x2B]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x2B]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP20.PXSX.WIST) && Zero))
                            {
                                If (\_SB.PCI0.RP20.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x2C]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x2C]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x2C]) [One] = One
                                }
                            }

                            If (\_SB.PCI0.CNIP ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x37]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x37]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x37]) [One] = One
                            }
                        }

                        If ((OSYS >= 0x07DF))
                        {
                            If ((CondRefOf (\_SB.PCI0.RP01.PXSX.WGST) && Zero))
                            {
                                If (\_SB.PCI0.RP01.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x19]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP02.PXSX.WGST) && Zero))
                            {
                                If (\_SB.PCI0.RP02.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x1A]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP03.PXSX.WGST) && Zero))
                            {
                                If (\_SB.PCI0.RP03.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x1B]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP04.PXSX.WGST) && Zero))
                            {
                                If (\_SB.PCI0.RP04.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x1C]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP05.PXSX.WGST) && Zero))
                            {
                                If (\_SB.PCI0.RP05.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x1D]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP06.PXSX.WGST) && Zero))
                            {
                                If (\_SB.PCI0.RP06.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x1E]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP07.PXSX.WGST) && Zero))
                            {
                                If (\_SB.PCI0.RP07.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x1F]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP08.PXSX.WGST) && Zero))
                            {
                                If (\_SB.PCI0.RP08.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x20]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP09.PXSX.WGST) && Zero))
                            {
                                If (\_SB.PCI0.RP09.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x21]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP10.PXSX.WGST) && Zero))
                            {
                                If (\_SB.PCI0.RP10.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x22]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP11.PXSX.WGST) && Zero))
                            {
                                If (\_SB.PCI0.RP11.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x23]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP12.PXSX.WGST) && Zero))
                            {
                                If (\_SB.PCI0.RP12.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x24]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP13.PXSX.WGST) && Zero))
                            {
                                If (\_SB.PCI0.RP13.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x25]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP14.PXSX.WGST) && Zero))
                            {
                                If (\_SB.PCI0.RP14.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x26]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP15.PXSX.WGST) && Zero))
                            {
                                If (\_SB.PCI0.RP15.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x27]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP16.PXSX.WGST) && Zero))
                            {
                                If (\_SB.PCI0.RP16.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x28]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP17.PXSX.WGST) && Zero))
                            {
                                If (\_SB.PCI0.RP17.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x29]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP18.PXSX.WGST) && Zero))
                            {
                                If (\_SB.PCI0.RP18.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x2A]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP19.PXSX.WGST) && Zero))
                            {
                                If (\_SB.PCI0.RP19.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x2B]) [One] = One
                                }
                            }

                            If ((CondRefOf (\_SB.PCI0.RP20.PXSX.WGST) && Zero))
                            {
                                If (\_SB.PCI0.RP20.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x2C]) [One] = One
                                }
                            }
                        }

                        If ((OSYS >= 0x07DF))
                        {
                            If (\_SB.PCI0.RP01.PXSX.PGPA ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x19]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x19]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x19]) [One] = One
                            }

                            If (\_SB.PCI0.RP02.PXSX.PGPA ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1A]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1A]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1A]) [One] = One
                            }

                            If (\_SB.PCI0.RP03.PXSX.PGPA ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1B]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1B]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1B]) [One] = One
                            }

                            If (\_SB.PCI0.RP04.PXSX.PGPA ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1C]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1C]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1C]) [One] = One
                            }

                            If (\_SB.PCI0.RP05.PXSX.PGPA ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1D]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1D]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1D]) [One] = One
                            }

                            If (\_SB.PCI0.RP06.PXSX.PGPA ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1E]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1E]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1E]) [One] = One
                            }

                            If (\_SB.PCI0.RP07.PXSX.PGPA ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1F]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1F]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1F]) [One] = One
                            }

                            If (\_SB.PCI0.RP08.PXSX.PGPA ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x20]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x20]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x20]) [One] = One
                            }

                            If (\_SB.PCI0.RP09.PXSX.PGPA ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x21]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x21]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x21]) [One] = One
                            }

                            If (\_SB.PCI0.RP10.PXSX.PGPA ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x22]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x22]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x22]) [One] = One
                            }

                            If (\_SB.PCI0.RP11.PXSX.PGPA ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x23]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x23]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x23]) [One] = One
                            }

                            If (\_SB.PCI0.RP12.PXSX.PGPA ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x24]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x24]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x24]) [One] = One
                            }

                            If (\_SB.PCI0.RP13.PXSX.PGPA ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x25]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x25]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x25]) [One] = One
                            }

                            If (\_SB.PCI0.RP14.PXSX.PGPA ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x26]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x26]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x26]) [One] = One
                            }

                            If (\_SB.PCI0.RP15.PXSX.PGPA ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x27]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x27]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x27]) [One] = One
                            }

                            If (\_SB.PCI0.RP16.PXSX.PGPA ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x28]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x28]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x28]) [One] = One
                            }

                            If (\_SB.PCI0.RP17.PXSX.PGPA ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x29]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x29]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x29]) [One] = One
                            }

                            If (\_SB.PCI0.RP18.PXSX.PGPA ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x2A]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x2A]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x2A]) [One] = One
                            }

                            If (\_SB.PCI0.RP19.PXSX.PGPA ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x2B]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x2B]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x2B]) [One] = One
                            }

                            If (\_SB.PCI0.RP20.PXSX.PGPA ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x2C]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x2C]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x2C]) [One] = One
                            }
                        }

                        Return (DEVY) /* \_SB_.PEPD.DEVY */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (BCCD) /* \_SB_.PEPD.BCCD */
                    }

                    If ((Arg2 == 0x03))
                    {
                        PTMM (Zero, "MS Enter:")
                        If ((S0ID == One))
                        {
                            ECNT (One)
                        }

                        PTMM (One, "MS Enter:")
                    }

                    If ((Arg2 == 0x04))
                    {
                        PTMM (Zero, "MS Exit:")
                        If ((S0ID == One))
                        {
                            ECNT (Zero)
                            If (CondRefOf (\RTBT))
                            {
                                If (((\RTBT == One) && (\RPS0 == One)))
                                {
                                    \_SB.PCI0.RP01.TBNF ()
                                }

                                If (((\RTBT == One) && (\RPS0 == 0x05)))
                                {
                                    \_SB.PCI0.RP05.TBNF ()
                                }

                                If (((\RTBT == One) && (\RPS0 == 0x09)))
                                {
                                    \_SB.PCI0.RP09.TBNF ()
                                }

                                If (((\RTBT == One) && (\RPS0 == 0x0D)))
                                {
                                    \_SB.PCI0.RP13.TBNF ()
                                }
                            }
                        }

                        PTMM (One, "MS Exit:")
                    }

                    If ((Arg2 == 0x05))
                    {
                        PTMM (Zero, "MS DRIPS Enter:")
                        If ((S0ID == One))
                        {
                            \GUAM (One)
                        }

                        ECNT (0x03)
                        PTMM (One, "MS DRIPS Enter:")
                    }

                    If ((Arg2 == 0x06))
                    {
                        PTMM (Zero, "MS DRIPS Exit:")
                        If ((S0ID == One))
                        {
                            \GUAM (Zero)
                        }

                        ECNT (0x02)
                        PTMM (One, "MS DRIPS Exit:")
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Method (ECNT, 1, Serialized)
    {
        If (ECND)
        {
            Return (Zero)
        }

        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                P8XH (Zero, 0xC6)
                Local0 = Acquire (\EHLD, 0xFFFF)
                If ((Local0 == Zero))
                {
                    If (Ones)
                    {
                        \_SB.SGOV (0x02040017, Zero)
                    }

                    If (Ones)
                    {
                        \_SB.SGOV (0x0402000E, One)
                        While (!\_SB.GGIV (0x04040010))
                        {
                            Stall (0x64)
                        }
                    }

                    \_SB.PCI0.LPCB.EC0.SLPT = Zero
                    \ECUP = One
                    Release (\EHLD)
                }

                Return (Zero)
            }
            Case (One)
            {
                P8XH (Zero, 0xC5)
                If (Ones)
                {
                    \_SB.SGOV (0x02040017, One)
                }

                \_SB.PCI0.LPCB.EC0.SLPT = 0x06
                If (Ones)
                {
                    \_SB.SGOV (0x0402000E, Zero)
                }

                \ECUP = Zero
                Return (Zero)
            }
            Case (0x02)
            {
                P8XH (Zero, 0xC8)
                Return (Zero)
            }
            Case (0x03)
            {
                P8XH (Zero, 0xC7)
                Return (Zero)
            }
            Default
            {
                Return (0xFF)
            }

        }
    }
}



SSDT21
------
DefinitionBlock ("", "SSDT", 2, "HP    ", "UcsiCntr", 0x00000001)
{
    External (_SB_.UBTC, DeviceObj)
    External (TPLD, MethodObj)    // 2 Arguments

    Scope (\_SB.UBTC)
    {
        Device (CR01)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (\TPLD (One, 0x03))
            }
        }

        Device (CR02)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (\TPLD (One, 0x04))
            }
        }

        Device (CR03)
        {
            Name (_ADR, 0x02)  // _ADR: Address
            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (\TPLD (One, 0x05))
            }
        }

        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
        Noop
    }
}



SSDT22
------
DefinitionBlock ("", "SSDT", 1, "HP", "HPSANIMD", 0x00001000)
{
    External (_SB_.PCI0.LPCB.EC0_, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.SNMD, IntObj)
    External (_SB_.WMIV.GVWE, MethodObj)    // 2 Arguments
    External (ADBG, MethodObj)    // 1 Arguments
    External (SZMD, IntObj)

    Scope (\_SB.PCI0.LPCB.EC0)
    {
        Method (_Q17, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            ADBG ("Q17 Enter")
            Local0 = Zero
            If (((\_SB.PCI0.LPCB.EC0.SNMD & 0xE0) == Zero))
            {
                \_SB.WMIV.GVWE (0x17, One)
            }
            Else
            {
                \_SB.PCI0.LPCB.EC0.SNMD = Zero
                \_SB.WMIV.GVWE (0x17, Zero)
            }

            ADBG ("Q17 Exit")
        }
    }
}



SSDT23
------
DefinitionBlock ("", "SSDT", 2, "SaSsdt", "SaSsdt ", 0x00003000)
{
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.B0D3, DeviceObj)
    External (_SB_.PCI0.GFX0, DeviceObj)
    External (_SB_.PCI0.GFX0.DD1F, DeviceObj)
    External (_SB_.PCI0.GFX0.HDOD, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GFX0.HDOS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GFX0.HNOT, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.HGME, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.IPU0, DeviceObj)
    External (CPSC, UnknownObj)
    External (DSEN, UnknownObj)
    External (ECON, IntObj)
    External (GUAM, MethodObj)    // 1 Arguments
    External (OSYS, IntObj)
    External (PNHM, IntObj)
    External (S0ID, UnknownObj)

    OperationRegion (SANV, SystemMemory, 0x97B22D18, 0x01F4)
    Field (SANV, AnyAcc, Lock, Preserve)
    {
        ASLB,   32, 
        IMON,   8, 
        IGDS,   8, 
        IBTT,   8, 
        IPAT,   8, 
        IPSC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        IDMS,   8, 
        IF1E,   8, 
        HVCO,   8, 
        GSMI,   8, 
        PAVP,   8, 
        CADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        DID9,   32, 
        DIDA,   32, 
        DIDB,   32, 
        DIDC,   32, 
        DIDD,   32, 
        DIDE,   32, 
        DIDF,   32, 
        DIDX,   32, 
        NXD1,   32, 
        NXD2,   32, 
        NXD3,   32, 
        NXD4,   32, 
        NXD5,   32, 
        NXD6,   32, 
        NXD7,   32, 
        NXD8,   32, 
        NXDX,   32, 
        LIDS,   8, 
        KSV0,   32, 
        KSV1,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        ALFP,   8, 
        IPTP,   8, 
        EDPV,   8, 
        SGMD,   8, 
        SGFL,   8, 
        SGGP,   8, 
        HRE0,   8, 
        HRG0,   32, 
        HRA0,   8, 
        PWE0,   8, 
        PWG0,   32, 
        PWA0,   8, 
        P1GP,   8, 
        HRE1,   8, 
        HRG1,   32, 
        HRA1,   8, 
        PWE1,   8, 
        PWG1,   32, 
        PWA1,   8, 
        P2GP,   8, 
        HRE2,   8, 
        HRG2,   32, 
        HRA2,   8, 
        PWE2,   8, 
        PWG2,   32, 
        PWA2,   8, 
        DLPW,   16, 
        DLHR,   16, 
        EECP,   8, 
        XBAS,   32, 
        GBAS,   16, 
        NVGA,   32, 
        NVHA,   32, 
        AMDA,   32, 
        LTRX,   8, 
        OBFX,   8, 
        LTRY,   8, 
        OBFY,   8, 
        LTRZ,   8, 
        OBFZ,   8, 
        LTRW,   8, 
        OBFA,   8, 
        SMSL,   16, 
        SNSL,   16, 
        P0UB,   8, 
        P1UB,   8, 
        P2UB,   8, 
        P3UB,   8, 
        PCSL,   8, 
        PBGE,   8, 
        M64B,   64, 
        M64L,   64, 
        CPEX,   32, 
        EEC1,   8, 
        EEC2,   8, 
        SBN0,   8, 
        SBN1,   8, 
        SBN2,   8, 
        M32B,   32, 
        M32L,   32, 
        P0WK,   32, 
        P1WK,   32, 
        P2WK,   32, 
        VTDS,   8, 
        VTB1,   32, 
        VTB2,   32, 
        VTB3,   32, 
        VE1V,   16, 
        VE2V,   16, 
        SBN3,   8, 
        P3GP,   8, 
        HRE3,   8, 
        HRG3,   32, 
        HRA3,   8, 
        PWE3,   8, 
        PWG3,   32, 
        PWA3,   8, 
        P3WK,   32, 
        EEC3,   8, 
        RPIN,   8, 
        RPBA,   32, 
        Offset (0x1F4)
    }

    Scope (\_SB.PCI0.GFX0)
    {
        Name (TMP1, Package (0x01)
        {
            0xFFFFFFFF
        })
        Name (TMP2, Package (0x02)
        {
            0xFFFFFFFF, 
            0xFFFFFFFF
        })
        Name (TMP3, Package (0x03)
        {
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF
        })
        Name (TMP4, Package (0x04)
        {
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF
        })
        Name (TMP5, Package (0x05)
        {
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF
        })
        Name (TMP6, Package (0x06)
        {
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF
        })
        Name (TMP7, Package (0x07)
        {
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF
        })
        Name (TMP8, Package (0x08)
        {
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF
        })
        Name (TMP9, Package (0x09)
        {
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF
        })
        Name (TMPA, Package (0x0A)
        {
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF
        })
        Name (TMPB, Package (0x0B)
        {
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF
        })
        Name (TMPC, Package (0x0C)
        {
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF
        })
        Name (TMPD, Package (0x0D)
        {
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF
        })
        Name (TMPE, Package (0x0E)
        {
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF
        })
        Name (TMPF, Package (0x0F)
        {
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF
        })
        Name (TMPG, Package (0x10)
        {
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF
        })
        Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
        {
            DSEN = (Arg0 & 0x07)
            If (((Arg0 & 0x03) == Zero))
            {
                If (CondRefOf (HDOS))
                {
                    HDOS (Arg0)
                }
            }
        }

        Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
        {
            If (CondRefOf (HDOD))
            {
                HDOD ()
            }

            If ((IPTP == One))
            {
                NDID = One
            }
            Else
            {
                NDID = Zero
            }

            If ((DIDL != Zero))
            {
                DID1 = SDDL (DIDL)
            }

            If ((DDL2 != Zero))
            {
                DID2 = SDDL (DDL2)
            }

            If ((DDL3 != Zero))
            {
                DID3 = SDDL (DDL3)
            }

            If ((DDL4 != Zero))
            {
                DID4 = SDDL (DDL4)
            }

            If ((DDL5 != Zero))
            {
                DID5 = SDDL (DDL5)
            }

            If ((DDL6 != Zero))
            {
                DID6 = SDDL (DDL6)
            }

            If ((DDL7 != Zero))
            {
                DID7 = SDDL (DDL7)
            }

            If ((DDL8 != Zero))
            {
                DID8 = SDDL (DDL8)
            }

            If ((DDL9 != Zero))
            {
                DID9 = SDDL (DDL9)
            }

            If ((DD10 != Zero))
            {
                DIDA = SDDL (DD10)
            }

            If ((DD11 != Zero))
            {
                DIDB = SDDL (DD11)
            }

            If ((DD12 != Zero))
            {
                DIDC = SDDL (DD12)
            }

            If ((DD13 != Zero))
            {
                DIDD = SDDL (DD13)
            }

            If ((DD14 != Zero))
            {
                DIDE = SDDL (DD14)
            }

            If ((DD15 != Zero))
            {
                DIDF = SDDL (DD15)
            }

            If ((NDID == One))
            {
                If ((IPTP == One))
                {
                    TMP1 [Zero] = 0x00023480
                }
                Else
                {
                    TMP1 [Zero] = (0x00010000 | DID1)
                }

                Return (TMP1) /* \_SB_.PCI0.GFX0.TMP1 */
            }

            If ((NDID == 0x02))
            {
                TMP2 [Zero] = (0x00010000 | DID1)
                If ((IPTP == One))
                {
                    TMP2 [One] = 0x00023480
                }
                Else
                {
                    TMP2 [One] = (0x00010000 | DID2)
                }

                Return (TMP2) /* \_SB_.PCI0.GFX0.TMP2 */
            }

            If ((NDID == 0x03))
            {
                TMP3 [Zero] = (0x00010000 | DID1)
                TMP3 [One] = (0x00010000 | DID2)
                If ((IPTP == One))
                {
                    TMP3 [0x02] = 0x00023480
                }
                Else
                {
                    TMP3 [0x02] = (0x00010000 | DID3)
                }

                Return (TMP3) /* \_SB_.PCI0.GFX0.TMP3 */
            }

            If ((NDID == 0x04))
            {
                TMP4 [Zero] = (0x00010000 | DID1)
                TMP4 [One] = (0x00010000 | DID2)
                TMP4 [0x02] = (0x00010000 | DID3)
                If ((IPTP == One))
                {
                    TMP4 [0x03] = 0x00023480
                }
                Else
                {
                    TMP4 [0x03] = (0x00010000 | DID4)
                }

                Return (TMP4) /* \_SB_.PCI0.GFX0.TMP4 */
            }

            If ((NDID == 0x05))
            {
                TMP5 [Zero] = (0x00010000 | DID1)
                TMP5 [One] = (0x00010000 | DID2)
                TMP5 [0x02] = (0x00010000 | DID3)
                TMP5 [0x03] = (0x00010000 | DID4)
                If ((IPTP == One))
                {
                    TMP5 [0x04] = 0x00023480
                }
                Else
                {
                    TMP5 [0x04] = (0x00010000 | DID5)
                }

                Return (TMP5) /* \_SB_.PCI0.GFX0.TMP5 */
            }

            If ((NDID == 0x06))
            {
                TMP6 [Zero] = (0x00010000 | DID1)
                TMP6 [One] = (0x00010000 | DID2)
                TMP6 [0x02] = (0x00010000 | DID3)
                TMP6 [0x03] = (0x00010000 | DID4)
                TMP6 [0x04] = (0x00010000 | DID5)
                If ((IPTP == One))
                {
                    TMP6 [0x05] = 0x00023480
                }
                Else
                {
                    TMP6 [0x05] = (0x00010000 | DID6)
                }

                Return (TMP6) /* \_SB_.PCI0.GFX0.TMP6 */
            }

            If ((NDID == 0x07))
            {
                TMP7 [Zero] = (0x00010000 | DID1)
                TMP7 [One] = (0x00010000 | DID2)
                TMP7 [0x02] = (0x00010000 | DID3)
                TMP7 [0x03] = (0x00010000 | DID4)
                TMP7 [0x04] = (0x00010000 | DID5)
                TMP7 [0x05] = (0x00010000 | DID6)
                If ((IPTP == One))
                {
                    TMP7 [0x06] = 0x00023480
                }
                Else
                {
                    TMP7 [0x06] = (0x00010000 | DID7)
                }

                Return (TMP7) /* \_SB_.PCI0.GFX0.TMP7 */
            }

            If ((NDID == 0x08))
            {
                TMP8 [Zero] = (0x00010000 | DID1)
                TMP8 [One] = (0x00010000 | DID2)
                TMP8 [0x02] = (0x00010000 | DID3)
                TMP8 [0x03] = (0x00010000 | DID4)
                TMP8 [0x04] = (0x00010000 | DID5)
                TMP8 [0x05] = (0x00010000 | DID6)
                TMP8 [0x06] = (0x00010000 | DID7)
                If ((IPTP == One))
                {
                    TMP8 [0x07] = 0x00023480
                }
                Else
                {
                    TMP8 [0x07] = (0x00010000 | DID8)
                }

                Return (TMP8) /* \_SB_.PCI0.GFX0.TMP8 */
            }

            If ((NDID == 0x09))
            {
                TMP9 [Zero] = (0x00010000 | DID1)
                TMP9 [One] = (0x00010000 | DID2)
                TMP9 [0x02] = (0x00010000 | DID3)
                TMP9 [0x03] = (0x00010000 | DID4)
                TMP9 [0x04] = (0x00010000 | DID5)
                TMP9 [0x05] = (0x00010000 | DID6)
                TMP9 [0x06] = (0x00010000 | DID7)
                TMP9 [0x07] = (0x00010000 | DID8)
                If ((IPTP == One))
                {
                    TMP9 [0x08] = 0x00023480
                }
                Else
                {
                    TMP9 [0x08] = (0x00010000 | DID9)
                }

                Return (TMP9) /* \_SB_.PCI0.GFX0.TMP9 */
            }

            If ((NDID == 0x0A))
            {
                TMPA [Zero] = (0x00010000 | DID1)
                TMPA [One] = (0x00010000 | DID2)
                TMPA [0x02] = (0x00010000 | DID3)
                TMPA [0x03] = (0x00010000 | DID4)
                TMPA [0x04] = (0x00010000 | DID5)
                TMPA [0x05] = (0x00010000 | DID6)
                TMPA [0x06] = (0x00010000 | DID7)
                TMPA [0x07] = (0x00010000 | DID8)
                TMPA [0x08] = (0x00010000 | DID9)
                If ((IPTP == One))
                {
                    TMPA [0x09] = 0x00023480
                }
                Else
                {
                    TMPA [0x09] = (0x00010000 | DIDA)
                }

                Return (TMPA) /* \_SB_.PCI0.GFX0.TMPA */
            }

            If ((NDID == 0x0B))
            {
                TMPB [Zero] = (0x00010000 | DID1)
                TMPB [One] = (0x00010000 | DID2)
                TMPB [0x02] = (0x00010000 | DID3)
                TMPB [0x03] = (0x00010000 | DID4)
                TMPB [0x04] = (0x00010000 | DID5)
                TMPB [0x05] = (0x00010000 | DID6)
                TMPB [0x06] = (0x00010000 | DID7)
                TMPB [0x07] = (0x00010000 | DID8)
                TMPB [0x08] = (0x00010000 | DID9)
                TMPB [0x09] = (0x00010000 | DIDA)
                If ((IPTP == One))
                {
                    TMPB [0x0A] = 0x00023480
                }
                Else
                {
                    TMPB [0x0A] = (0x00010000 | DIDB)
                }

                Return (TMPB) /* \_SB_.PCI0.GFX0.TMPB */
            }

            If ((NDID == 0x0C))
            {
                TMPC [Zero] = (0x00010000 | DID1)
                TMPC [One] = (0x00010000 | DID2)
                TMPC [0x02] = (0x00010000 | DID3)
                TMPC [0x03] = (0x00010000 | DID4)
                TMPC [0x04] = (0x00010000 | DID5)
                TMPC [0x05] = (0x00010000 | DID6)
                TMPC [0x06] = (0x00010000 | DID7)
                TMPC [0x07] = (0x00010000 | DID8)
                TMPC [0x08] = (0x00010000 | DID9)
                TMPC [0x09] = (0x00010000 | DIDA)
                TMPC [0x0A] = (0x00010000 | DIDB)
                If ((IPTP == One))
                {
                    TMPC [0x0B] = 0x00023480
                }
                Else
                {
                    TMPC [0x0B] = (0x00010000 | DIDC)
                }

                Return (TMPC) /* \_SB_.PCI0.GFX0.TMPC */
            }

            If ((NDID == 0x0D))
            {
                TMPD [Zero] = (0x00010000 | DID1)
                TMPD [One] = (0x00010000 | DID2)
                TMPD [0x02] = (0x00010000 | DID3)
                TMPD [0x03] = (0x00010000 | DID4)
                TMPD [0x04] = (0x00010000 | DID5)
                TMPD [0x05] = (0x00010000 | DID6)
                TMPD [0x06] = (0x00010000 | DID7)
                TMPD [0x07] = (0x00010000 | DID8)
                TMPD [0x08] = (0x00010000 | DID9)
                TMPD [0x09] = (0x00010000 | DIDA)
                TMPD [0x0A] = (0x00010000 | DIDB)
                TMPD [0x0B] = (0x00010000 | DIDC)
                If ((IPTP == One))
                {
                    TMPD [0x0C] = 0x00023480
                }
                Else
                {
                    TMPD [0x0C] = (0x00010000 | DIDD)
                }

                Return (TMPD) /* \_SB_.PCI0.GFX0.TMPD */
            }

            If ((NDID == 0x0E))
            {
                TMPE [Zero] = (0x00010000 | DID1)
                TMPE [One] = (0x00010000 | DID2)
                TMPE [0x02] = (0x00010000 | DID3)
                TMPE [0x03] = (0x00010000 | DID4)
                TMPE [0x04] = (0x00010000 | DID5)
                TMPE [0x05] = (0x00010000 | DID6)
                TMPE [0x06] = (0x00010000 | DID7)
                TMPE [0x07] = (0x00010000 | DID8)
                TMPE [0x08] = (0x00010000 | DID9)
                TMPE [0x09] = (0x00010000 | DIDA)
                TMPE [0x0A] = (0x00010000 | DIDB)
                TMPE [0x0B] = (0x00010000 | DIDC)
                TMPE [0x0C] = (0x00010000 | DIDD)
                If ((IPTP == One))
                {
                    TMPE [0x0D] = 0x00023480
                }
                Else
                {
                    TMPE [0x0D] = (0x00010000 | DIDE)
                }

                Return (TMPE) /* \_SB_.PCI0.GFX0.TMPE */
            }

            If ((NDID == 0x0F))
            {
                TMPF [Zero] = (0x00010000 | DID1)
                TMPF [One] = (0x00010000 | DID2)
                TMPF [0x02] = (0x00010000 | DID3)
                TMPF [0x03] = (0x00010000 | DID4)
                TMPF [0x04] = (0x00010000 | DID5)
                TMPF [0x05] = (0x00010000 | DID6)
                TMPF [0x06] = (0x00010000 | DID7)
                TMPF [0x07] = (0x00010000 | DID8)
                TMPF [0x08] = (0x00010000 | DID9)
                TMPF [0x09] = (0x00010000 | DIDA)
                TMPF [0x0A] = (0x00010000 | DIDB)
                TMPF [0x0B] = (0x00010000 | DIDC)
                TMPF [0x0C] = (0x00010000 | DIDD)
                TMPF [0x0D] = (0x00010000 | DIDE)
                If ((IPTP == One))
                {
                    TMPF [0x0E] = 0x00023480
                }
                Else
                {
                    TMPF [0x0E] = (0x00010000 | DIDF)
                }

                Return (TMPF) /* \_SB_.PCI0.GFX0.TMPF */
            }

            If ((NDID == 0x10))
            {
                TMPG [Zero] = (0x00010000 | DID1)
                TMPG [One] = (0x00010000 | DID2)
                TMPG [0x02] = (0x00010000 | DID3)
                TMPG [0x03] = (0x00010000 | DID4)
                TMPG [0x04] = (0x00010000 | DID5)
                TMPG [0x05] = (0x00010000 | DID6)
                TMPG [0x06] = (0x00010000 | DID7)
                TMPG [0x07] = (0x00010000 | DID8)
                TMPG [0x08] = (0x00010000 | DID9)
                TMPG [0x09] = (0x00010000 | DIDA)
                TMPG [0x0A] = (0x00010000 | DIDB)
                TMPG [0x0B] = (0x00010000 | DIDC)
                TMPG [0x0C] = (0x00010000 | DIDD)
                TMPG [0x0D] = (0x00010000 | DIDE)
                TMPG [0x0E] = (0x00010000 | DIDF)
                TMPG [0x0F] = 0x00023480
                Return (TMPG) /* \_SB_.PCI0.GFX0.TMPG */
            }

            Return (Package (0x01)
            {
                0x0400
            })
        }

        Device (DD01)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID1) == 0x0400))
                {
                    EDPV = One
                    NXDX = NXD1 /* \NXD1 */
                    DIDX = DID1 /* \DID1 */
                    Return (One)
                }

                If ((DID1 == Zero))
                {
                    Return (One)
                }
                Else
                {
                    Return ((0xFFFF & DID1))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                Return (CDDS (DID1))
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD1) /* \NXD1 */
                }

                Return (NDDS (DID1))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD02)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID2) == 0x0400))
                {
                    EDPV = 0x02
                    NXDX = NXD2 /* \NXD2 */
                    DIDX = DID2 /* \DID2 */
                    Return (0x02)
                }

                If ((DID2 == Zero))
                {
                    Return (0x02)
                }
                Else
                {
                    Return ((0xFFFF & DID2))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((LIDS == Zero))
                {
                    Return (Zero)
                }

                Return (CDDS (DID2))
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD2) /* \NXD2 */
                }

                Return (NDDS (DID2))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD03)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID3) == 0x0400))
                {
                    EDPV = 0x03
                    NXDX = NXD3 /* \NXD3 */
                    DIDX = DID3 /* \DID3 */
                    Return (0x03)
                }

                If ((DID3 == Zero))
                {
                    Return (0x03)
                }
                Else
                {
                    Return ((0xFFFF & DID3))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID3 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID3))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD3) /* \NXD3 */
                }

                Return (NDDS (DID3))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD04)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID4) == 0x0400))
                {
                    EDPV = 0x04
                    NXDX = NXD4 /* \NXD4 */
                    DIDX = DID4 /* \DID4 */
                    Return (0x04)
                }

                If ((DID4 == Zero))
                {
                    Return (0x04)
                }
                Else
                {
                    Return ((0xFFFF & DID4))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID4 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID4))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD4) /* \NXD4 */
                }

                Return (NDDS (DID4))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD05)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID5) == 0x0400))
                {
                    EDPV = 0x05
                    NXDX = NXD5 /* \NXD5 */
                    DIDX = DID5 /* \DID5 */
                    Return (0x05)
                }

                If ((DID5 == Zero))
                {
                    Return (0x05)
                }
                Else
                {
                    Return ((0xFFFF & DID5))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID5 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID5))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD5) /* \NXD5 */
                }

                Return (NDDS (DID5))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD06)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID6) == 0x0400))
                {
                    EDPV = 0x06
                    NXDX = NXD6 /* \NXD6 */
                    DIDX = DID6 /* \DID6 */
                    Return (0x06)
                }

                If ((DID6 == Zero))
                {
                    Return (0x06)
                }
                Else
                {
                    Return ((0xFFFF & DID6))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID6 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID6))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD6) /* \NXD6 */
                }

                Return (NDDS (DID6))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD07)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID7) == 0x0400))
                {
                    EDPV = 0x07
                    NXDX = NXD7 /* \NXD7 */
                    DIDX = DID7 /* \DID7 */
                    Return (0x07)
                }

                If ((DID7 == Zero))
                {
                    Return (0x07)
                }
                Else
                {
                    Return ((0xFFFF & DID7))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID7 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID7))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD7) /* \NXD7 */
                }

                Return (NDDS (DID7))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD08)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID8) == 0x0400))
                {
                    EDPV = 0x08
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DID8 /* \DID8 */
                    Return (0x08)
                }

                If ((DID8 == Zero))
                {
                    Return (0x08)
                }
                Else
                {
                    Return ((0xFFFF & DID8))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID8 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID8))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DID8))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD09)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID9) == 0x0400))
                {
                    EDPV = 0x09
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DID9 /* \DID9 */
                    Return (0x09)
                }

                If ((DID9 == Zero))
                {
                    Return (0x09)
                }
                Else
                {
                    Return ((0xFFFF & DID9))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID9 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID9))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DID9))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0A)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDA) == 0x0400))
                {
                    EDPV = 0x0A
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DIDA /* \DIDA */
                    Return (0x0A)
                }

                If ((DIDA == Zero))
                {
                    Return (0x0A)
                }
                Else
                {
                    Return ((0xFFFF & DIDA))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDA == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DIDA))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DIDA))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0B)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDB) == 0x0400))
                {
                    EDPV = 0x0B
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DIDB /* \DIDB */
                    Return (0x0B)
                }

                If ((DIDB == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return ((0xFFFF & DIDB))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDB == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DIDB))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DIDB))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0C)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDC) == 0x0400))
                {
                    EDPV = 0x0C
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DIDC /* \DIDC */
                    Return (0x0C)
                }

                If ((DIDC == Zero))
                {
                    Return (0x0C)
                }
                Else
                {
                    Return ((0xFFFF & DIDC))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDC == Zero))
                {
                    Return (0x0C)
                }
                Else
                {
                    Return (CDDS (DIDC))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DIDC))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0D)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDD) == 0x0400))
                {
                    EDPV = 0x0D
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DIDD /* \DIDD */
                    Return (0x0D)
                }

                If ((DIDD == Zero))
                {
                    Return (0x0D)
                }
                Else
                {
                    Return ((0xFFFF & DIDD))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDD == Zero))
                {
                    Return (0x0D)
                }
                Else
                {
                    Return (CDDS (DIDD))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DIDD))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0E)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDE) == 0x0400))
                {
                    EDPV = 0x0E
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DIDE /* \DIDE */
                    Return (0x0E)
                }

                If ((DIDE == Zero))
                {
                    Return (0x0E)
                }
                Else
                {
                    Return ((0xFFFF & DIDE))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDE == Zero))
                {
                    Return (0x0E)
                }
                Else
                {
                    Return (CDDS (DIDE))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DIDE))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0F)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDF) == 0x0400))
                {
                    EDPV = 0x0F
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DIDF /* \DIDF */
                    Return (0x0F)
                }

                If ((DIDF == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return ((0xFFFF & DIDF))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDC == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (CDDS (DIDF))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DIDF))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Scope (DD1F)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If ((EDPV == Zero))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return ((0xFFFF & DIDX))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((EDPV == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (CDDS (DIDX))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXDX) /* \NXDX */
                }

                Return (NDDS (DIDX))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Method (SDDL, 1, NotSerialized)
        {
            NDID++
            Local0 = (Arg0 & 0x0F0F)
            Local1 = (0x80000000 | Local0)
            If ((DIDL == Local0))
            {
                Return (Local1)
            }

            If ((DDL2 == Local0))
            {
                Return (Local1)
            }

            If ((DDL3 == Local0))
            {
                Return (Local1)
            }

            If ((DDL4 == Local0))
            {
                Return (Local1)
            }

            If ((DDL5 == Local0))
            {
                Return (Local1)
            }

            If ((DDL6 == Local0))
            {
                Return (Local1)
            }

            If ((DDL7 == Local0))
            {
                Return (Local1)
            }

            If ((DDL8 == Local0))
            {
                Return (Local1)
            }

            If ((DDL9 == Local0))
            {
                Return (Local1)
            }

            If ((DD10 == Local0))
            {
                Return (Local1)
            }

            If ((DD11 == Local0))
            {
                Return (Local1)
            }

            If ((DD12 == Local0))
            {
                Return (Local1)
            }

            If ((DD13 == Local0))
            {
                Return (Local1)
            }

            If ((DD14 == Local0))
            {
                Return (Local1)
            }

            If ((DD15 == Local0))
            {
                Return (Local1)
            }

            Return (Zero)
        }

        Method (CDDS, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0x0F0F)
            If ((Zero == Local0))
            {
                Return (0x1D)
            }

            If ((CADL == Local0))
            {
                Return (0x1F)
            }

            If ((CAL2 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL3 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL4 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL5 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL6 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL7 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL8 == Local0))
            {
                Return (0x1F)
            }

            Return (0x1D)
        }

        Method (NDDS, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0x0F0F)
            If ((Zero == Local0))
            {
                Return (Zero)
            }

            If ((NADL == Local0))
            {
                Return (One)
            }

            If ((NDL2 == Local0))
            {
                Return (One)
            }

            If ((NDL3 == Local0))
            {
                Return (One)
            }

            If ((NDL4 == Local0))
            {
                Return (One)
            }

            If ((NDL5 == Local0))
            {
                Return (One)
            }

            If ((NDL6 == Local0))
            {
                Return (One)
            }

            If ((NDL7 == Local0))
            {
                Return (One)
            }

            If ((NDL8 == Local0))
            {
                Return (One)
            }

            Return (Zero)
        }

        Method (DSST, 1, NotSerialized)
        {
            If (((Arg0 & 0xC0000000) == 0xC0000000))
            {
                CSTE = NSTE /* \NSTE */
            }
        }

        Scope (\_SB.PCI0)
        {
            OperationRegion (MCHP, PCI_Config, 0x40, 0xC0)
            Field (MCHP, AnyAcc, NoLock, Preserve)
            {
                Offset (0x14), 
                AUDE,   8, 
                Offset (0x60), 
                TASM,   10, 
                Offset (0x62)
            }
        }

        OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
        Field (IGDP, AnyAcc, NoLock, Preserve)
        {
            Offset (0x10), 
                ,   1, 
            GIVD,   1, 
                ,   2, 
            GUMA,   3, 
            Offset (0x12), 
            Offset (0x14), 
                ,   4, 
            GMFN,   1, 
            Offset (0x18), 
            Offset (0xA4), 
            ASLE,   8, 
            Offset (0xA8), 
            GSSE,   1, 
            GSSB,   14, 
            GSES,   1, 
            Offset (0xB0), 
                ,   12, 
            CDVL,   1, 
            Offset (0xB2), 
            Offset (0xB5), 
            LBPC,   8, 
            Offset (0xBC), 
            ASLS,   32
        }

        OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
        Field (IGDM, AnyAcc, NoLock, Preserve)
        {
            SIGN,   128, 
            SIZE,   32, 
            OVER,   32, 
            SVER,   256, 
            VVER,   128, 
            GVER,   128, 
            MBOX,   32, 
            DMOD,   32, 
            PCON,   32, 
            DVER,   64, 
            Offset (0x100), 
            DRDY,   32, 
            CSTS,   32, 
            CEVT,   32, 
            Offset (0x120), 
            DIDL,   32, 
            DDL2,   32, 
            DDL3,   32, 
            DDL4,   32, 
            DDL5,   32, 
            DDL6,   32, 
            DDL7,   32, 
            DDL8,   32, 
            CPDL,   32, 
            CPL2,   32, 
            CPL3,   32, 
            CPL4,   32, 
            CPL5,   32, 
            CPL6,   32, 
            CPL7,   32, 
            CPL8,   32, 
            CADL,   32, 
            CAL2,   32, 
            CAL3,   32, 
            CAL4,   32, 
            CAL5,   32, 
            CAL6,   32, 
            CAL7,   32, 
            CAL8,   32, 
            NADL,   32, 
            NDL2,   32, 
            NDL3,   32, 
            NDL4,   32, 
            NDL5,   32, 
            NDL6,   32, 
            NDL7,   32, 
            NDL8,   32, 
            ASLP,   32, 
            TIDX,   32, 
            CHPD,   32, 
            CLID,   32, 
            CDCK,   32, 
            SXSW,   32, 
            EVTS,   32, 
            CNOT,   32, 
            NRDY,   32, 
            DDL9,   32, 
            DD10,   32, 
            DD11,   32, 
            DD12,   32, 
            DD13,   32, 
            DD14,   32, 
            DD15,   32, 
            CPL9,   32, 
            CP10,   32, 
            CP11,   32, 
            CP12,   32, 
            CP13,   32, 
            CP14,   32, 
            CP15,   32, 
            Offset (0x200), 
            SCIE,   1, 
            GEFC,   4, 
            GXFC,   3, 
            GESF,   8, 
            Offset (0x204), 
            PARM,   32, 
            DSLP,   32, 
            Offset (0x300), 
            ARDY,   32, 
            ASLC,   32, 
            TCHE,   32, 
            ALSI,   32, 
            BCLP,   32, 
            PFIT,   32, 
            CBLV,   32, 
            BCLM,   320, 
            CPFM,   32, 
            EPFM,   32, 
            PLUT,   592, 
            PFMB,   32, 
            CCDV,   32, 
            PCFT,   32, 
            SROT,   32, 
            IUER,   32, 
            FDSS,   64, 
            FDSP,   32, 
            STAT,   32, 
            Offset (0x400), 
            RVBT,   49152, 
            PHED,   32, 
            BDDC,   2048
        }

        Name (DBTB, Package (0x15)
        {
            Zero, 
            0x07, 
            0x38, 
            0x01C0, 
            0x0E00, 
            0x3F, 
            0x01C7, 
            0x0E07, 
            0x01F8, 
            0x0E38, 
            0x0FC0, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            0x7000, 
            0x7007, 
            0x7038, 
            0x71C0, 
            0x7E00
        })
        Name (CDCT, Package (0x05)
        {
            Package (0x02)
            {
                0xE4, 
                0x0140
            }, 

            Package (0x02)
            {
                0xDE, 
                0x014D
            }, 

            Package (0x02)
            {
                0xDE, 
                0x014D
            }, 

            Package (0x02)
            {
                Zero, 
                Zero
            }, 

            Package (0x02)
            {
                0xDE, 
                0x014D
            }
        })
        Name (SUCC, One)
        Name (NVLD, 0x02)
        Name (CRIT, 0x04)
        Name (NCRT, 0x06)
        Method (GSCI, 0, Serialized)
        {
            Method (GBDA, 0, Serialized)
            {
                If ((GESF == Zero))
                {
                    PARM = 0x0659
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == One))
                {
                    PARM = 0x00300482
                    If ((S0ID == One))
                    {
                        PARM |= 0x0100
                    }

                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x04))
                {
                    PARM &= 0xEFFF0000
                    PARM &= (DerefOf (DBTB [IBTT]) << 0x10)
                    PARM |= IBTT /* \_SB_.PCI0.GFX0.PARM */
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x05))
                {
                    PARM = IPSC /* \IPSC */
                    PARM |= (IPAT << 0x08)
                    PARM += 0x0100
                    PARM |= (LIDS << 0x10)
                    PARM += 0x00010000
                    PARM |= (IBIA << 0x14)
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x07))
                {
                    PARM = GIVD /* \_SB_.PCI0.GFX0.GIVD */
                    PARM ^= One
                    PARM |= (GMFN << One)
                    PARM |= 0x1800
                    PARM |= (IDMS << 0x11)
                    PARM |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                        0x15) /* \_SB_.PCI0.GFX0.PARM */
                    GESF = One
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x0A))
                {
                    PARM = Zero
                    If (ISSC)
                    {
                        PARM |= 0x03
                    }

                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x0B))
                {
                    PARM = KSV0 /* \KSV0 */
                    GESF = KSV1 /* \KSV1 */
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                GESF = Zero
                Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
            }

            Method (SBCB, 0, Serialized)
            {
                If ((GESF == Zero))
                {
                    PARM = Zero
                    PARM = 0x000F87DD
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == One))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x03))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x04))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x05))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x07))
                {
                    If (((S0ID == One) && (OSYS < 0x07DF)))
                    {
                        If (((PARM & 0xFF) == One))
                        {
                            \GUAM (One)
                        }

                        If (((PARM & 0xFF) == Zero))
                        {
                            \GUAM (Zero)
                        }
                    }

                    If ((PARM == Zero))
                    {
                        Local0 = CLID /* \_SB_.PCI0.GFX0.CLID */
                        If ((0x80000000 & Local0))
                        {
                            CLID &= 0x0F
                            GLID (CLID)
                        }
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x08))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x09))
                {
                    IBTT = (PARM & 0xFF)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x0A))
                {
                    IPSC = (PARM & 0xFF)
                    If (((PARM >> 0x08) & 0xFF))
                    {
                        IPAT = ((PARM >> 0x08) & 0xFF)
                        IPAT--
                    }

                    IBIA = ((PARM >> 0x14) & 0x07)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x0B))
                {
                    IF1E = ((PARM >> One) & One)
                    If ((PARM & 0x0001E000))
                    {
                        IDMS = ((PARM >> 0x0D) & 0x0F)
                    }
                    Else
                    {
                        IDMS = ((PARM >> 0x11) & 0x0F)
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x10))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x11))
                {
                    PARM = (LIDS << 0x08)
                    PARM += 0x0100
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x12))
                {
                    If ((PARM & One))
                    {
                        If (((PARM >> One) == One))
                        {
                            ISSC = One
                        }
                        Else
                        {
                            GESF = Zero
                            Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                        }
                    }
                    Else
                    {
                        ISSC = Zero
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x13))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x14))
                {
                    PAVP = (PARM & 0x0F)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                GESF = Zero
                Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
            }

            If ((GEFC == 0x04))
            {
                GXFC = GBDA ()
            }

            If ((GEFC == 0x06))
            {
                GXFC = SBCB ()
            }

            GEFC = Zero
            CPSC = One
            GSSE = Zero
            SCIE = Zero
            Return (Zero)
        }

        Method (PDRD, 0, NotSerialized)
        {
            Return (!DRDY)
        }

        Method (PSTS, 0, NotSerialized)
        {
            If ((CSTS > 0x02))
            {
                Sleep (ASLP)
            }

            Return ((CSTS == 0x03))
        }

        Method (GNOT, 2, NotSerialized)
        {
            If (PDRD ())
            {
                Return (One)
            }

            CEVT = Arg0
            CSTS = 0x03
            If (((CHPD == Zero) && (Arg1 == Zero)))
            {
                Notify (\_SB.PCI0.GFX0, Arg1)
            }

            If (CondRefOf (HNOT))
            {
                HNOT (Arg0)
            }
            Else
            {
                Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
            }

            Return (Zero)
        }

        Method (GHDS, 1, NotSerialized)
        {
            TIDX = Arg0
            Return (GNOT (One, Zero))
        }

        Method (GLID, 1, NotSerialized)
        {
            If ((Arg0 == One))
            {
                CLID = 0x03
            }
            Else
            {
                CLID = Arg0
            }

            If (GNOT (0x02, Zero))
            {
                CLID |= 0x80000000
                Return (One)
            }

            Return (Zero)
        }

        Method (GDCK, 1, NotSerialized)
        {
            CDCK = Arg0
            Return (GNOT (0x04, Zero))
        }

        Method (PARD, 0, NotSerialized)
        {
            If (!ARDY)
            {
                Sleep (ASLP)
            }

            Return (!ARDY)
        }

        Method (IUEH, 1, Serialized)
        {
            IUER &= 0xC0
            IUER ^= (One << Arg0)
            If ((Arg0 <= 0x04))
            {
                Return (AINT (0x05, Zero))
            }
            Else
            {
                Return (AINT (Arg0, Zero))
            }
        }

        Method (AINT, 2, NotSerialized)
        {
            If (!(TCHE & (One << Arg0)))
            {
                Return (One)
            }

            If (PARD ())
            {
                Return (One)
            }

            If (((Arg0 >= 0x05) && (Arg0 <= 0x07)))
            {
                ASLC = (One << Arg0)
                ASLE = One
                Local2 = Zero
                While (((Local2 < 0xFA) && (ASLC != Zero)))
                {
                    Sleep (0x04)
                    Local2++
                }

                Return (Zero)
            }

            If ((Arg0 == 0x02))
            {
                If (CPFM)
                {
                    Local0 = (CPFM & 0x0F)
                    Local1 = (EPFM & 0x0F)
                    If ((Local0 == One))
                    {
                        If ((Local1 & 0x06))
                        {
                            PFIT = 0x06
                        }
                        ElseIf ((Local1 & 0x08))
                        {
                            PFIT = 0x08
                        }
                        Else
                        {
                            PFIT = One
                        }
                    }

                    If ((Local0 == 0x06))
                    {
                        If ((Local1 & 0x08))
                        {
                            PFIT = 0x08
                        }
                        ElseIf ((Local1 & One))
                        {
                            PFIT = One
                        }
                        Else
                        {
                            PFIT = 0x06
                        }
                    }

                    If ((Local0 == 0x08))
                    {
                        If ((Local1 & One))
                        {
                            PFIT = One
                        }
                        ElseIf ((Local1 & 0x06))
                        {
                            PFIT = 0x06
                        }
                        Else
                        {
                            PFIT = 0x08
                        }
                    }
                }
                Else
                {
                    PFIT ^= 0x07
                }

                PFIT |= 0x80000000
                ASLC = 0x04
            }
            ElseIf ((Arg0 == One))
            {
                If ((Arg1 & 0x80000000))
                {
                    Arg1 &= 0x7FFFFFFF
                    BCLP = Arg1
                }
                Else
                {
                    BCLP = ((Arg1 * 0xFF) / 0x64)
                }

                BCLP |= 0x80000000
                ASLC = 0x02
            }
            ElseIf ((Arg0 == Zero))
            {
                ALSI = Arg1
                ASLC = One
            }
            Else
            {
                Return (One)
            }

            ASLE = One
            Return (Zero)
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3e5b41c6-eb1d-4260-9d15-c71fbadae414") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "iGfx Supported Functions Bitmap "
                            If (CondRefOf (\_SB.PCI0.HGME))
                            {
                                \_SB.PCI0.HGME (One)
                            }

                            Return (0x0001E7FF)
                        }
                    }
                    Case (One)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = " Adapter Power State Notification "
                            If (((S0ID == One) && (OSYS < 0x07DF)))
                            {
                                If (((DerefOf (Arg3 [Zero]) & 0xFF) == One))
                                {
                                    \GUAM (One)
                                }

                                Local0 = (DerefOf (Arg3 [One]) & 0xFF)
                                If ((Local0 == Zero))
                                {
                                    \GUAM (Zero)
                                }
                            }

                            If ((DerefOf (Arg3 [Zero]) == Zero))
                            {
                                Local0 = CLID /* \_SB_.PCI0.GFX0.CLID */
                                If ((0x80000000 & Local0))
                                {
                                    CLID &= 0x0F
                                    GLID (CLID)
                                }
                            }

                            Return (One)
                        }
                    }
                    Case (0x02)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "Display Power State Notification "
                            Return (One)
                        }
                    }
                    Case (0x03)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "BIOS POST Completion Notification "
                            Return (One)
                        }
                    }
                    Case (0x04)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "Pre-Hires Set Mode "
                            Return (One)
                        }
                    }
                    Case (0x05)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "Post-Hires Set Mode "
                            Return (One)
                        }
                    }
                    Case (0x06)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "SetDisplayDeviceNotification"
                            Return (One)
                        }
                    }
                    Case (0x07)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "SetBootDevicePreference "
                            IBTT = (DerefOf (Arg3 [Zero]) & 0xFF)
                            Return (One)
                        }
                    }
                    Case (0x08)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "SetPanelPreference "
                            IPSC = (DerefOf (Arg3 [Zero]) & 0xFF)
                            If ((DerefOf (Arg3 [One]) & 0xFF))
                            {
                                IPAT = (DerefOf (Arg3 [One]) & 0xFF)
                                IPAT--
                            }

                            IBIA = ((DerefOf (Arg3 [0x02]) >> 0x04) & 0x07)
                            Return (One)
                        }
                    }
                    Case (0x09)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "FullScreenDOS "
                            Return (One)
                        }
                    }
                    Case (0x0A)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "APM Complete "
                            Local0 = (LIDS << 0x08)
                            Local0 += 0x0100
                            Return (Local0)
                        }
                    }
                    Case (0x0D)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetBootDisplayPreference "
                            Local0 = ((DerefOf (Arg3 [0x03]) << 0x18) | (DerefOf (
                                Arg3 [0x02]) << 0x10))
                            Local0 &= 0xEFFF0000
                            Local0 &= (DerefOf (DBTB [IBTT]) << 0x10)
                            Local0 |= IBTT
                            Return (Local0)
                        }
                    }
                    Case (0x0E)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetPanelDetails "
                            Local0 = IPSC /* \IPSC */
                            Local0 |= (IPAT << 0x08)
                            Local0 += 0x0100
                            Local0 |= (LIDS << 0x10)
                            Local0 += 0x00010000
                            Local0 |= (IBIA << 0x14)
                            Return (Local0)
                        }
                    }
                    Case (0x0F)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetInternalGraphics "
                            Local0 = GIVD /* \_SB_.PCI0.GFX0.GIVD */
                            Local0 ^= One
                            Local0 |= (GMFN << One)
                            Local0 |= 0x1800
                            Local0 |= (IDMS << 0x11)
                            Local0 |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                                0x15)
                            Return (Local0)
                        }
                    }
                    Case (0x10)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetAKSV "
                            Name (KSVP, Package (0x02)
                            {
                                0x80000000, 
                                0x8000
                            })
                            KSVP [Zero] = KSV0 /* \KSV0 */
                            KSVP [One] = KSV1 /* \KSV1 */
                            Return (KSVP) /* \_SB_.PCI0.GFX0._DSM.KSVP */
                        }
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (\_SB.PCI0.GFX0)
    {
        Device (IPUA)
        {
            Name (_ADR, 0x3480)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((IPTP == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.PCI0.IPU0)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("9a9e6ab4-e3fc-475d-ad1c-c4789e4cfe90") /* Unknown UUID */))
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x07                                             // .
                        })
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If ((Arg2 == One))
                {
                    Return (0x64503C19)
                }

                If ((Arg2 == 0x02))
                {
                    Return (0xFFF0783C)
                }
            }

            Return (Zero)
        }
    }
}



SSDT24
------
DefinitionBlock ("", "SSDT", 2, "AcpiRe", "PLT_RTD3", 0x00001000)
{
    External (_SB_.CAGS, MethodObj)    // 1 Arguments
    External (_SB_.GGOV, MethodObj)    // 1 Arguments
    External (_SB_.ISME, MethodObj)    // 1 Arguments
    External (_SB_.OSCO, UnknownObj)
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.GEXP, DeviceObj)
    External (_SB_.PCI0.GEXP.GEPS, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GEXP.SGEP, MethodObj)    // 3 Arguments
    External (_SB_.PCI0.GLAN, DeviceObj)
    External (_SB_.PCI0.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.I2C0, DeviceObj)
    External (_SB_.PCI0.I2C0.TPD0, DeviceObj)
    External (_SB_.PCI0.I2C1, DeviceObj)
    External (_SB_.PCI0.I2C1.TPL1, DeviceObj)
    External (_SB_.PCI0.LPCB.H_EC.ECAV, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.SPT2, UnknownObj)
    External (_SB_.PCI0.RP01, DeviceObj)
    External (_SB_.PCI0.RP01._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP01.DPGE, UnknownObj)
    External (_SB_.PCI0.RP01.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP01.L23E, UnknownObj)
    External (_SB_.PCI0.RP01.L23R, UnknownObj)
    External (_SB_.PCI0.RP01.LASX, UnknownObj)
    External (_SB_.PCI0.RP01.LDIS, UnknownObj)
    External (_SB_.PCI0.RP01.LEDM, UnknownObj)
    External (_SB_.PCI0.RP01.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.RP01.VDID, UnknownObj)
    External (_SB_.PCI0.RP02, DeviceObj)
    External (_SB_.PCI0.RP02._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP02.DPGE, UnknownObj)
    External (_SB_.PCI0.RP02.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP02.L23E, UnknownObj)
    External (_SB_.PCI0.RP02.L23R, UnknownObj)
    External (_SB_.PCI0.RP02.LASX, UnknownObj)
    External (_SB_.PCI0.RP02.LDIS, UnknownObj)
    External (_SB_.PCI0.RP02.LEDM, UnknownObj)
    External (_SB_.PCI0.RP02.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.RP02.VDID, UnknownObj)
    External (_SB_.PCI0.RP03, DeviceObj)
    External (_SB_.PCI0.RP03._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP03.DPGE, UnknownObj)
    External (_SB_.PCI0.RP03.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP03.L23E, UnknownObj)
    External (_SB_.PCI0.RP03.L23R, UnknownObj)
    External (_SB_.PCI0.RP03.LASX, UnknownObj)
    External (_SB_.PCI0.RP03.LDIS, UnknownObj)
    External (_SB_.PCI0.RP03.LEDM, UnknownObj)
    External (_SB_.PCI0.RP03.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.RP03.VDID, UnknownObj)
    External (_SB_.PCI0.RP04, DeviceObj)
    External (_SB_.PCI0.RP04._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP04.DPGE, UnknownObj)
    External (_SB_.PCI0.RP04.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP04.L23E, UnknownObj)
    External (_SB_.PCI0.RP04.L23R, UnknownObj)
    External (_SB_.PCI0.RP04.LASX, UnknownObj)
    External (_SB_.PCI0.RP04.LDIS, UnknownObj)
    External (_SB_.PCI0.RP04.LEDM, UnknownObj)
    External (_SB_.PCI0.RP04.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.RP04.VDID, UnknownObj)
    External (_SB_.PCI0.RP05, DeviceObj)
    External (_SB_.PCI0.RP05._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP05.DPGE, UnknownObj)
    External (_SB_.PCI0.RP05.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP05.L23E, UnknownObj)
    External (_SB_.PCI0.RP05.L23R, UnknownObj)
    External (_SB_.PCI0.RP05.LASX, UnknownObj)
    External (_SB_.PCI0.RP05.LDIS, UnknownObj)
    External (_SB_.PCI0.RP05.LEDM, UnknownObj)
    External (_SB_.PCI0.RP05.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.RP05.VDID, UnknownObj)
    External (_SB_.PCI0.RP06, DeviceObj)
    External (_SB_.PCI0.RP06._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP06.DPGE, UnknownObj)
    External (_SB_.PCI0.RP06.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP06.L23E, UnknownObj)
    External (_SB_.PCI0.RP06.L23R, UnknownObj)
    External (_SB_.PCI0.RP06.LASX, UnknownObj)
    External (_SB_.PCI0.RP06.LDIS, UnknownObj)
    External (_SB_.PCI0.RP06.LEDM, UnknownObj)
    External (_SB_.PCI0.RP06.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.RP06.VDID, UnknownObj)
    External (_SB_.PCI0.RP07, DeviceObj)
    External (_SB_.PCI0.RP07._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP07.DPGE, UnknownObj)
    External (_SB_.PCI0.RP07.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP07.L23E, UnknownObj)
    External (_SB_.PCI0.RP07.L23R, UnknownObj)
    External (_SB_.PCI0.RP07.LASX, UnknownObj)
    External (_SB_.PCI0.RP07.LDIS, UnknownObj)
    External (_SB_.PCI0.RP07.LEDM, UnknownObj)
    External (_SB_.PCI0.RP07.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.RP07.VDID, UnknownObj)
    External (_SB_.PCI0.RP08, DeviceObj)
    External (_SB_.PCI0.RP08._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP08.DPGE, UnknownObj)
    External (_SB_.PCI0.RP08.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP08.L23E, UnknownObj)
    External (_SB_.PCI0.RP08.L23R, UnknownObj)
    External (_SB_.PCI0.RP08.LASX, UnknownObj)
    External (_SB_.PCI0.RP08.LDIS, UnknownObj)
    External (_SB_.PCI0.RP08.LEDM, UnknownObj)
    External (_SB_.PCI0.RP08.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.RP08.VDID, UnknownObj)
    External (_SB_.PCI0.RP09, DeviceObj)
    External (_SB_.PCI0.RP09._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP09.DPGE, UnknownObj)
    External (_SB_.PCI0.RP09.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP09.L23E, UnknownObj)
    External (_SB_.PCI0.RP09.L23R, UnknownObj)
    External (_SB_.PCI0.RP09.LASX, UnknownObj)
    External (_SB_.PCI0.RP09.LDIS, UnknownObj)
    External (_SB_.PCI0.RP09.LEDM, UnknownObj)
    External (_SB_.PCI0.RP09.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.RP09.VDID, UnknownObj)
    External (_SB_.PCI0.RP10, DeviceObj)
    External (_SB_.PCI0.RP10._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP10.DPGE, UnknownObj)
    External (_SB_.PCI0.RP10.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP10.L23E, UnknownObj)
    External (_SB_.PCI0.RP10.L23R, UnknownObj)
    External (_SB_.PCI0.RP10.LASX, UnknownObj)
    External (_SB_.PCI0.RP10.LDIS, UnknownObj)
    External (_SB_.PCI0.RP10.LEDM, UnknownObj)
    External (_SB_.PCI0.RP10.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.RP10.VDID, UnknownObj)
    External (_SB_.PCI0.RP11, DeviceObj)
    External (_SB_.PCI0.RP11._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP11.DPGE, UnknownObj)
    External (_SB_.PCI0.RP11.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP11.L23E, UnknownObj)
    External (_SB_.PCI0.RP11.L23R, UnknownObj)
    External (_SB_.PCI0.RP11.LASX, UnknownObj)
    External (_SB_.PCI0.RP11.LDIS, UnknownObj)
    External (_SB_.PCI0.RP11.LEDM, UnknownObj)
    External (_SB_.PCI0.RP11.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.RP11.VDID, UnknownObj)
    External (_SB_.PCI0.RP12, DeviceObj)
    External (_SB_.PCI0.RP12._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP12.DPGE, UnknownObj)
    External (_SB_.PCI0.RP12.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP12.L23E, UnknownObj)
    External (_SB_.PCI0.RP12.L23R, UnknownObj)
    External (_SB_.PCI0.RP12.LASX, UnknownObj)
    External (_SB_.PCI0.RP12.LDIS, UnknownObj)
    External (_SB_.PCI0.RP12.LEDM, UnknownObj)
    External (_SB_.PCI0.RP12.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.RP12.VDID, UnknownObj)
    External (_SB_.PCI0.RP13, DeviceObj)
    External (_SB_.PCI0.RP13._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP13.DPGE, UnknownObj)
    External (_SB_.PCI0.RP13.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP13.L23E, UnknownObj)
    External (_SB_.PCI0.RP13.L23R, UnknownObj)
    External (_SB_.PCI0.RP13.LASX, UnknownObj)
    External (_SB_.PCI0.RP13.LDIS, UnknownObj)
    External (_SB_.PCI0.RP13.LEDM, UnknownObj)
    External (_SB_.PCI0.RP13.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.RP13.VDID, UnknownObj)
    External (_SB_.PCI0.RP14, DeviceObj)
    External (_SB_.PCI0.RP14._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP14.DPGE, UnknownObj)
    External (_SB_.PCI0.RP14.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP14.L23E, UnknownObj)
    External (_SB_.PCI0.RP14.L23R, UnknownObj)
    External (_SB_.PCI0.RP14.LASX, UnknownObj)
    External (_SB_.PCI0.RP14.LDIS, UnknownObj)
    External (_SB_.PCI0.RP14.LEDM, UnknownObj)
    External (_SB_.PCI0.RP14.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.RP14.VDID, UnknownObj)
    External (_SB_.PCI0.RP15, DeviceObj)
    External (_SB_.PCI0.RP15._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP15.DPGE, UnknownObj)
    External (_SB_.PCI0.RP15.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP15.L23E, UnknownObj)
    External (_SB_.PCI0.RP15.L23R, UnknownObj)
    External (_SB_.PCI0.RP15.LASX, UnknownObj)
    External (_SB_.PCI0.RP15.LDIS, UnknownObj)
    External (_SB_.PCI0.RP15.LEDM, UnknownObj)
    External (_SB_.PCI0.RP15.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.RP15.VDID, UnknownObj)
    External (_SB_.PCI0.RP16, DeviceObj)
    External (_SB_.PCI0.RP16._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP16.DPGE, UnknownObj)
    External (_SB_.PCI0.RP16.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP16.L23E, UnknownObj)
    External (_SB_.PCI0.RP16.L23R, UnknownObj)
    External (_SB_.PCI0.RP16.LASX, UnknownObj)
    External (_SB_.PCI0.RP16.LDIS, UnknownObj)
    External (_SB_.PCI0.RP16.LEDM, UnknownObj)
    External (_SB_.PCI0.RP16.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.RP16.VDID, UnknownObj)
    External (_SB_.PCI0.RP17, DeviceObj)
    External (_SB_.PCI0.RP17._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP17.DPGE, UnknownObj)
    External (_SB_.PCI0.RP17.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP17.L23E, UnknownObj)
    External (_SB_.PCI0.RP17.L23R, UnknownObj)
    External (_SB_.PCI0.RP17.LASX, UnknownObj)
    External (_SB_.PCI0.RP17.LDIS, UnknownObj)
    External (_SB_.PCI0.RP17.LEDM, UnknownObj)
    External (_SB_.PCI0.RP17.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.RP17.VDID, UnknownObj)
    External (_SB_.PCI0.RP18, DeviceObj)
    External (_SB_.PCI0.RP18._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP18.DPGE, UnknownObj)
    External (_SB_.PCI0.RP18.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP18.L23E, UnknownObj)
    External (_SB_.PCI0.RP18.L23R, UnknownObj)
    External (_SB_.PCI0.RP18.LASX, UnknownObj)
    External (_SB_.PCI0.RP18.LDIS, UnknownObj)
    External (_SB_.PCI0.RP18.LEDM, UnknownObj)
    External (_SB_.PCI0.RP18.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.RP18.VDID, UnknownObj)
    External (_SB_.PCI0.RP19, DeviceObj)
    External (_SB_.PCI0.RP19._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP19.DPGE, UnknownObj)
    External (_SB_.PCI0.RP19.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP19.L23E, UnknownObj)
    External (_SB_.PCI0.RP19.L23R, UnknownObj)
    External (_SB_.PCI0.RP19.LASX, UnknownObj)
    External (_SB_.PCI0.RP19.LDIS, UnknownObj)
    External (_SB_.PCI0.RP19.LEDM, UnknownObj)
    External (_SB_.PCI0.RP19.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.RP19.VDID, UnknownObj)
    External (_SB_.PCI0.RP20, DeviceObj)
    External (_SB_.PCI0.RP20._ADR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP20.DPGE, UnknownObj)
    External (_SB_.PCI0.RP20.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP20.L23E, UnknownObj)
    External (_SB_.PCI0.RP20.L23R, UnknownObj)
    External (_SB_.PCI0.RP20.LASX, UnknownObj)
    External (_SB_.PCI0.RP20.LDIS, UnknownObj)
    External (_SB_.PCI0.RP20.LEDM, UnknownObj)
    External (_SB_.PCI0.RP20.SPCO, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.RP20.VDID, UnknownObj)
    External (_SB_.PCI0.SAT0, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT0, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT1, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT2, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT3, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT4, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT5, DeviceObj)
    External (_SB_.PCI0.XDCI, DeviceObj)
    External (_SB_.PCI0.XDCI.D0I3, UnknownObj)
    External (_SB_.PCI0.XDCI.XDCB, UnknownObj)
    External (_SB_.PCI0.XHC_, DeviceObj)
    External (_SB_.PCI0.XHC_.PMEE, UnknownObj)
    External (_SB_.PCI0.XHC_.PMES, UnknownObj)
    External (_SB_.PCI0.XHC_.RHUB, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS01, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS02, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS03, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS04, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS05, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS06, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS07, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS08, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS09, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS10, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS11, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS12, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS13, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS14, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS15, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS16, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS01, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS02, DeviceObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.SHPO, MethodObj)    // 2 Arguments
    External (AUDD, FieldUnitObj)
    External (DVID, UnknownObj)
    External (GBEP, UnknownObj)
    External (GPRW, MethodObj)    // 2 Arguments
    External (I20D, FieldUnitObj)
    External (I21D, FieldUnitObj)
    External (IC0D, FieldUnitObj)
    External (IC1D, FieldUnitObj)
    External (IC1S, FieldUnitObj)
    External (PCHG, UnknownObj)
    External (PCHH, UnknownObj)
    External (PCHS, UnknownObj)
    External (PEP0, UnknownObj)
    External (PEP3, UnknownObj)
    External (RCG0, IntObj)
    External (RCG1, IntObj)
    External (RIC0, FieldUnitObj)
    External (SDS0, FieldUnitObj)
    External (SDS1, FieldUnitObj)
    External (SHSB, FieldUnitObj)
    External (SPST, IntObj)
    External (UAMS, UnknownObj)
    External (VRRD, FieldUnitObj)
    External (VRSD, FieldUnitObj)
    External (XDST, IntObj)
    External (XHPR, UnknownObj)

    OperationRegion (R3NV, SystemMemory, 0x97B22018, 0x00000171)
    Field (R3NV, AnyAcc, NoLock, Preserve)
    {
        R301,   1, 
        Offset (0x0E), 
        R302,   1, 
        Offset (0x1C), 
        R303,   1, 
        Offset (0x2A), 
        R304,   1, 
        Offset (0x38), 
        R305,   1, 
        Offset (0x46), 
        R306,   1, 
        Offset (0x54), 
        R307,   1, 
        Offset (0x62), 
        R308,   1, 
        Offset (0x70), 
        R309,   1, 
        Offset (0x7E), 
        R310,   1, 
        Offset (0x8C), 
        R311,   1, 
        Offset (0x9A), 
        R312,   1, 
        Offset (0xA8), 
        R313,   1, 
        Offset (0xB6), 
        R314,   1, 
        Offset (0xC4), 
        R315,   1, 
        Offset (0xD2), 
        R316,   1, 
        Offset (0xE0), 
        R317,   1, 
        Offset (0xEE), 
        R318,   1, 
        Offset (0xFC), 
        R319,   1, 
        Offset (0x10A), 
        R320,   1, 
        Offset (0x118), 
        U301,   1, 
        Offset (0x11D), 
        U302,   1, 
        Offset (0x122), 
        U303,   1, 
        Offset (0x127), 
        U304,   1, 
        Offset (0x12C), 
        U305,   1, 
        Offset (0x131), 
        U306,   1, 
        Offset (0x136), 
        U307,   1, 
        Offset (0x13B), 
        U308,   1, 
        Offset (0x140), 
        U309,   1, 
        Offset (0x145), 
        U310,   1, 
        Offset (0x14A), 
        U311,   1, 
        Offset (0x14F), 
        U312,   1, 
        Offset (0x154), 
        U313,   1, 
        Offset (0x159), 
        U314,   1, 
        Offset (0x15E), 
        U315,   1, 
        Offset (0x163), 
        U316,   1, 
        Offset (0x168), 
        ZPDE,   1
    }

    If ((R301 == One))
    {
        Scope (\_SB.PCI0.RP01)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x02), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.RP01.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PCI0.RP01.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PCI0.RP01.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PCI0.RP01.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PCI0.RP01.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PCI0.RP01.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PCI0.RP01.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PCI0.RP01.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PCI0.RP01.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PCI0.RP01.CLQS */
                SCLK [One] = CLQN /* \_SB_.PCI0.RP01.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]
                            )) == DerefOf (PWRG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]
                            )) == DerefOf (RSTG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), DerefOf (
                            PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), DerefOf (
                            RSTG [0x03]))
                    }
                }

                APGE = Zero
                A23R = One
                Sleep (0x10)
                Local0 = Zero
                While (A23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                APGE = One
                Local0 = Zero
                While ((AASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                AEDM = Zero
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((ADID != 0xFFFFFFFF))
                {
                    A23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (A23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    AEDM = One
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), (
                            DerefOf (RSTG [0x03]) ^ One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), (
                            DerefOf (PWRG [0x03]) ^ One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP01, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP01, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX01, 0, NotSerialized)
        {
            \_SB.PCI0.RP01.XPEH ()
        }
    }

    If ((R302 == One))
    {
        Scope (\_SB.PCI0.RP02)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x0E), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x10), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.RP02.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PCI0.RP02.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PCI0.RP02.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PCI0.RP02.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PCI0.RP02.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PCI0.RP02.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PCI0.RP02.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PCI0.RP02.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PCI0.RP02.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PCI0.RP02.CLQS */
                SCLK [One] = CLQN /* \_SB_.PCI0.RP02.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]
                            )) == DerefOf (PWRG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]
                            )) == DerefOf (RSTG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), DerefOf (
                            PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), DerefOf (
                            RSTG [0x03]))
                    }
                }

                APGE = Zero
                A23R = One
                Sleep (0x10)
                Local0 = Zero
                While (A23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                APGE = One
                Local0 = Zero
                While ((AASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                AEDM = Zero
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((ADID != 0xFFFFFFFF))
                {
                    A23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (A23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    AEDM = One
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), (
                            DerefOf (RSTG [0x03]) ^ One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), (
                            DerefOf (PWRG [0x03]) ^ One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP02, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP02, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX02, 0, NotSerialized)
        {
            \_SB.PCI0.RP02.XPEH ()
        }
    }

    If ((R303 == One))
    {
        Scope (\_SB.PCI0.RP03)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x1C), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x1E), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.RP03.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PCI0.RP03.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PCI0.RP03.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PCI0.RP03.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PCI0.RP03.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PCI0.RP03.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PCI0.RP03.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PCI0.RP03.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PCI0.RP03.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PCI0.RP03.CLQS */
                SCLK [One] = CLQN /* \_SB_.PCI0.RP03.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]
                            )) == DerefOf (PWRG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]
                            )) == DerefOf (RSTG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), DerefOf (
                            PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), DerefOf (
                            RSTG [0x03]))
                    }
                }

                APGE = Zero
                A23R = One
                Sleep (0x10)
                Local0 = Zero
                While (A23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                APGE = One
                Local0 = Zero
                While ((AASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                AEDM = Zero
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((ADID != 0xFFFFFFFF))
                {
                    A23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (A23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    AEDM = One
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), (
                            DerefOf (RSTG [0x03]) ^ One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), (
                            DerefOf (PWRG [0x03]) ^ One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP03, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP03, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX03, 0, NotSerialized)
        {
            \_SB.PCI0.RP03.XPEH ()
        }
    }

    If ((R304 == One))
    {
        Scope (\_SB.PCI0.RP04)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x2A), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x2C), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.RP04.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PCI0.RP04.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PCI0.RP04.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PCI0.RP04.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PCI0.RP04.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PCI0.RP04.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PCI0.RP04.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PCI0.RP04.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PCI0.RP04.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PCI0.RP04.CLQS */
                SCLK [One] = CLQN /* \_SB_.PCI0.RP04.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]
                            )) == DerefOf (PWRG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]
                            )) == DerefOf (RSTG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), DerefOf (
                            PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), DerefOf (
                            RSTG [0x03]))
                    }
                }

                APGE = Zero
                A23R = One
                Sleep (0x10)
                Local0 = Zero
                While (A23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                APGE = One
                Local0 = Zero
                While ((AASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                AEDM = Zero
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((ADID != 0xFFFFFFFF))
                {
                    A23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (A23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    AEDM = One
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), (
                            DerefOf (RSTG [0x03]) ^ One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), (
                            DerefOf (PWRG [0x03]) ^ One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP04, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP04, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX04, 0, NotSerialized)
        {
            \_SB.PCI0.RP04.XPEH ()
        }
    }

    If ((R305 == One))
    {
        Scope (\_SB.PCI0.RP05)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x38), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x3A), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.RP05.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PCI0.RP05.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PCI0.RP05.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PCI0.RP05.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PCI0.RP05.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PCI0.RP05.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PCI0.RP05.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PCI0.RP05.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PCI0.RP05.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PCI0.RP05.CLQS */
                SCLK [One] = CLQN /* \_SB_.PCI0.RP05.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]
                            )) == DerefOf (PWRG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]
                            )) == DerefOf (RSTG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), DerefOf (
                            PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), DerefOf (
                            RSTG [0x03]))
                    }
                }

                APGE = Zero
                A23R = One
                Sleep (0x10)
                Local0 = Zero
                While (A23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                APGE = One
                Local0 = Zero
                While ((AASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                AEDM = Zero
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((ADID != 0xFFFFFFFF))
                {
                    A23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (A23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    AEDM = One
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), (
                            DerefOf (RSTG [0x03]) ^ One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), (
                            DerefOf (PWRG [0x03]) ^ One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP05, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP05, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX05, 0, NotSerialized)
        {
            \_SB.PCI0.RP05.XPEH ()
        }
    }

    If ((R306 == One))
    {
        Scope (\_SB.PCI0.RP06)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x46), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x48), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.RP06.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PCI0.RP06.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PCI0.RP06.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PCI0.RP06.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PCI0.RP06.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PCI0.RP06.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PCI0.RP06.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PCI0.RP06.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PCI0.RP06.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PCI0.RP06.CLQS */
                SCLK [One] = CLQN /* \_SB_.PCI0.RP06.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]
                            )) == DerefOf (PWRG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]
                            )) == DerefOf (RSTG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), DerefOf (
                            PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), DerefOf (
                            RSTG [0x03]))
                    }
                }

                APGE = Zero
                A23R = One
                Sleep (0x10)
                Local0 = Zero
                While (A23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                APGE = One
                Local0 = Zero
                While ((AASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                AEDM = Zero
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((ADID != 0xFFFFFFFF))
                {
                    A23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (A23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    AEDM = One
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), (
                            DerefOf (RSTG [0x03]) ^ One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), (
                            DerefOf (PWRG [0x03]) ^ One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP06, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP06, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX06, 0, NotSerialized)
        {
            \_SB.PCI0.RP06.XPEH ()
        }
    }

    If ((R307 == One))
    {
        Scope (\_SB.PCI0.RP07)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x54), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x56), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.RP07.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PCI0.RP07.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PCI0.RP07.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PCI0.RP07.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PCI0.RP07.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PCI0.RP07.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PCI0.RP07.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PCI0.RP07.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PCI0.RP07.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PCI0.RP07.CLQS */
                SCLK [One] = CLQN /* \_SB_.PCI0.RP07.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]
                            )) == DerefOf (PWRG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]
                            )) == DerefOf (RSTG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), DerefOf (
                            PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), DerefOf (
                            RSTG [0x03]))
                    }
                }

                APGE = Zero
                A23R = One
                Sleep (0x10)
                Local0 = Zero
                While (A23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                APGE = One
                Local0 = Zero
                While ((AASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                AEDM = Zero
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((ADID != 0xFFFFFFFF))
                {
                    A23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (A23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    AEDM = One
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), (
                            DerefOf (RSTG [0x03]) ^ One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), (
                            DerefOf (PWRG [0x03]) ^ One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP07, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP07, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX07, 0, NotSerialized)
        {
            \_SB.PCI0.RP07.XPEH ()
        }
    }

    If ((R308 == One))
    {
        Scope (\_SB.PCI0.RP08)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x62), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x64), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.RP08.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PCI0.RP08.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PCI0.RP08.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PCI0.RP08.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PCI0.RP08.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PCI0.RP08.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PCI0.RP08.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PCI0.RP08.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PCI0.RP08.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PCI0.RP08.CLQS */
                SCLK [One] = CLQN /* \_SB_.PCI0.RP08.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]
                            )) == DerefOf (PWRG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]
                            )) == DerefOf (RSTG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), DerefOf (
                            PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), DerefOf (
                            RSTG [0x03]))
                    }
                }

                APGE = Zero
                A23R = One
                Sleep (0x10)
                Local0 = Zero
                While (A23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                APGE = One
                Local0 = Zero
                While ((AASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                AEDM = Zero
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((ADID != 0xFFFFFFFF))
                {
                    A23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (A23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    AEDM = One
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), (
                            DerefOf (RSTG [0x03]) ^ One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), (
                            DerefOf (PWRG [0x03]) ^ One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP08, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP08, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX08, 0, NotSerialized)
        {
            \_SB.PCI0.RP08.XPEH ()
        }
    }

    If ((R309 == One))
    {
        Scope (\_SB.PCI0.RP09)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x70), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x72), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.RP09.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PCI0.RP09.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PCI0.RP09.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PCI0.RP09.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PCI0.RP09.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PCI0.RP09.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PCI0.RP09.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PCI0.RP09.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PCI0.RP09.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PCI0.RP09.CLQS */
                SCLK [One] = CLQN /* \_SB_.PCI0.RP09.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]
                            )) == DerefOf (PWRG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]
                            )) == DerefOf (RSTG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), DerefOf (
                            PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), DerefOf (
                            RSTG [0x03]))
                    }
                }

                APGE = Zero
                A23R = One
                Sleep (0x10)
                Local0 = Zero
                While (A23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                APGE = One
                Local0 = Zero
                While ((AASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                AEDM = Zero
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((ADID != 0xFFFFFFFF))
                {
                    A23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (A23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    AEDM = One
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), (
                            DerefOf (RSTG [0x03]) ^ One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), (
                            DerefOf (PWRG [0x03]) ^ One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP09, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP09, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX09, 0, NotSerialized)
        {
            \_SB.PCI0.RP09.XPEH ()
        }
    }

    If ((R310 == One))
    {
        Scope (\_SB.PCI0.RP10)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x7E), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x80), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.RP10.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PCI0.RP10.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PCI0.RP10.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PCI0.RP10.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PCI0.RP10.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PCI0.RP10.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PCI0.RP10.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PCI0.RP10.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PCI0.RP10.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PCI0.RP10.CLQS */
                SCLK [One] = CLQN /* \_SB_.PCI0.RP10.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]
                            )) == DerefOf (PWRG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]
                            )) == DerefOf (RSTG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), DerefOf (
                            PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), DerefOf (
                            RSTG [0x03]))
                    }
                }

                APGE = Zero
                A23R = One
                Sleep (0x10)
                Local0 = Zero
                While (A23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                APGE = One
                Local0 = Zero
                While ((AASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                AEDM = Zero
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((ADID != 0xFFFFFFFF))
                {
                    A23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (A23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    AEDM = One
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), (
                            DerefOf (RSTG [0x03]) ^ One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), (
                            DerefOf (PWRG [0x03]) ^ One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP10, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP10, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX10, 0, NotSerialized)
        {
            \_SB.PCI0.RP10.XPEH ()
        }
    }

    If ((R311 == One))
    {
        Scope (\_SB.PCI0.RP11)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x8C), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x8E), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.RP11.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PCI0.RP11.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PCI0.RP11.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PCI0.RP11.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PCI0.RP11.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PCI0.RP11.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PCI0.RP11.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PCI0.RP11.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PCI0.RP11.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PCI0.RP11.CLQS */
                SCLK [One] = CLQN /* \_SB_.PCI0.RP11.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]
                            )) == DerefOf (PWRG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]
                            )) == DerefOf (RSTG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), DerefOf (
                            PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), DerefOf (
                            RSTG [0x03]))
                    }
                }

                APGE = Zero
                A23R = One
                Sleep (0x10)
                Local0 = Zero
                While (A23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                APGE = One
                Local0 = Zero
                While ((AASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                AEDM = Zero
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((ADID != 0xFFFFFFFF))
                {
                    A23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (A23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    AEDM = One
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), (
                            DerefOf (RSTG [0x03]) ^ One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), (
                            DerefOf (PWRG [0x03]) ^ One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP11, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP11, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX11, 0, NotSerialized)
        {
            \_SB.PCI0.RP11.XPEH ()
        }
    }

    If ((R312 == One))
    {
        Scope (\_SB.PCI0.RP12)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x9A), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x9C), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.RP12.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PCI0.RP12.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PCI0.RP12.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PCI0.RP12.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PCI0.RP12.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PCI0.RP12.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PCI0.RP12.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PCI0.RP12.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PCI0.RP12.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PCI0.RP12.CLQS */
                SCLK [One] = CLQN /* \_SB_.PCI0.RP12.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]
                            )) == DerefOf (PWRG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]
                            )) == DerefOf (RSTG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), DerefOf (
                            PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), DerefOf (
                            RSTG [0x03]))
                    }
                }

                APGE = Zero
                A23R = One
                Sleep (0x10)
                Local0 = Zero
                While (A23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                APGE = One
                Local0 = Zero
                While ((AASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                AEDM = Zero
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((ADID != 0xFFFFFFFF))
                {
                    A23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (A23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    AEDM = One
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), (
                            DerefOf (RSTG [0x03]) ^ One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), (
                            DerefOf (PWRG [0x03]) ^ One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP12, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP12, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX12, 0, NotSerialized)
        {
            \_SB.PCI0.RP12.XPEH ()
        }
    }

    If ((R313 == One))
    {
        Scope (\_SB.PCI0.RP13)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0xA8), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0xAA), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.RP13.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PCI0.RP13.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PCI0.RP13.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PCI0.RP13.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PCI0.RP13.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PCI0.RP13.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PCI0.RP13.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PCI0.RP13.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PCI0.RP13.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PCI0.RP13.CLQS */
                SCLK [One] = CLQN /* \_SB_.PCI0.RP13.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]
                            )) == DerefOf (PWRG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]
                            )) == DerefOf (RSTG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), DerefOf (
                            PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), DerefOf (
                            RSTG [0x03]))
                    }
                }

                APGE = Zero
                A23R = One
                Sleep (0x10)
                Local0 = Zero
                While (A23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                APGE = One
                Local0 = Zero
                While ((AASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                AEDM = Zero
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((ADID != 0xFFFFFFFF))
                {
                    A23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (A23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    AEDM = One
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), (
                            DerefOf (RSTG [0x03]) ^ One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), (
                            DerefOf (PWRG [0x03]) ^ One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP13, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP13, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX13, 0, NotSerialized)
        {
            \_SB.PCI0.RP13.XPEH ()
        }
    }

    If ((R314 == One))
    {
        Scope (\_SB.PCI0.RP14)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0xB6), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0xB8), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.RP14.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PCI0.RP14.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PCI0.RP14.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PCI0.RP14.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PCI0.RP14.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PCI0.RP14.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PCI0.RP14.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PCI0.RP14.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PCI0.RP14.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PCI0.RP14.CLQS */
                SCLK [One] = CLQN /* \_SB_.PCI0.RP14.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]
                            )) == DerefOf (PWRG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]
                            )) == DerefOf (RSTG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), DerefOf (
                            PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), DerefOf (
                            RSTG [0x03]))
                    }
                }

                APGE = Zero
                A23R = One
                Sleep (0x10)
                Local0 = Zero
                While (A23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                APGE = One
                Local0 = Zero
                While ((AASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                AEDM = Zero
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((ADID != 0xFFFFFFFF))
                {
                    A23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (A23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    AEDM = One
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), (
                            DerefOf (RSTG [0x03]) ^ One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), (
                            DerefOf (PWRG [0x03]) ^ One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP14, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP14, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX14, 0, NotSerialized)
        {
            \_SB.PCI0.RP14.XPEH ()
        }
    }

    If ((R315 == One))
    {
        Scope (\_SB.PCI0.RP15)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0xC4), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0xC6), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.RP15.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PCI0.RP15.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PCI0.RP15.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PCI0.RP15.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PCI0.RP15.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PCI0.RP15.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PCI0.RP15.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PCI0.RP15.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PCI0.RP15.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PCI0.RP15.CLQS */
                SCLK [One] = CLQN /* \_SB_.PCI0.RP15.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]
                            )) == DerefOf (PWRG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]
                            )) == DerefOf (RSTG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), DerefOf (
                            PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), DerefOf (
                            RSTG [0x03]))
                    }
                }

                APGE = Zero
                A23R = One
                Sleep (0x10)
                Local0 = Zero
                While (A23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                APGE = One
                Local0 = Zero
                While ((AASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                AEDM = Zero
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((ADID != 0xFFFFFFFF))
                {
                    A23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (A23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    AEDM = One
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), (
                            DerefOf (RSTG [0x03]) ^ One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), (
                            DerefOf (PWRG [0x03]) ^ One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP15, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP15, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX15, 0, NotSerialized)
        {
            \_SB.PCI0.RP15.XPEH ()
        }
    }

    If ((R316 == One))
    {
        Scope (\_SB.PCI0.RP16)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0xD2), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0xD4), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.RP16.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PCI0.RP16.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PCI0.RP16.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PCI0.RP16.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PCI0.RP16.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PCI0.RP16.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PCI0.RP16.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PCI0.RP16.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PCI0.RP16.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PCI0.RP16.CLQS */
                SCLK [One] = CLQN /* \_SB_.PCI0.RP16.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]
                            )) == DerefOf (PWRG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]
                            )) == DerefOf (RSTG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), DerefOf (
                            PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), DerefOf (
                            RSTG [0x03]))
                    }
                }

                APGE = Zero
                A23R = One
                Sleep (0x10)
                Local0 = Zero
                While (A23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                APGE = One
                Local0 = Zero
                While ((AASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                AEDM = Zero
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((ADID != 0xFFFFFFFF))
                {
                    A23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (A23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    AEDM = One
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), (
                            DerefOf (RSTG [0x03]) ^ One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), (
                            DerefOf (PWRG [0x03]) ^ One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP16, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP16, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX16, 0, NotSerialized)
        {
            \_SB.PCI0.RP16.XPEH ()
        }
    }

    If ((R317 == One))
    {
        Scope (\_SB.PCI0.RP17)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x54), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x56), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.RP17.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PCI0.RP17.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PCI0.RP17.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PCI0.RP17.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PCI0.RP17.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PCI0.RP17.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PCI0.RP17.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PCI0.RP17.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PCI0.RP17.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PCI0.RP17.CLQS */
                SCLK [One] = CLQN /* \_SB_.PCI0.RP17.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]
                            )) == DerefOf (PWRG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]
                            )) == DerefOf (RSTG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), DerefOf (
                            PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), DerefOf (
                            RSTG [0x03]))
                    }
                }

                APGE = Zero
                A23R = One
                Sleep (0x10)
                Local0 = Zero
                While (A23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                APGE = One
                Local0 = Zero
                While ((AASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                AEDM = Zero
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((ADID != 0xFFFFFFFF))
                {
                    A23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (A23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    AEDM = One
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), (
                            DerefOf (RSTG [0x03]) ^ One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), (
                            DerefOf (PWRG [0x03]) ^ One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP17, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP17, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX17, 0, NotSerialized)
        {
            \_SB.PCI0.RP17.XPEH ()
        }
    }

    If ((R318 == One))
    {
        Scope (\_SB.PCI0.RP18)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0xEE), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0xF0), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.RP18.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PCI0.RP18.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PCI0.RP18.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PCI0.RP18.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PCI0.RP18.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PCI0.RP18.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PCI0.RP18.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PCI0.RP18.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PCI0.RP18.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PCI0.RP18.CLQS */
                SCLK [One] = CLQN /* \_SB_.PCI0.RP18.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]
                            )) == DerefOf (PWRG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]
                            )) == DerefOf (RSTG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), DerefOf (
                            PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), DerefOf (
                            RSTG [0x03]))
                    }
                }

                APGE = Zero
                A23R = One
                Sleep (0x10)
                Local0 = Zero
                While (A23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                APGE = One
                Local0 = Zero
                While ((AASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                AEDM = Zero
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((ADID != 0xFFFFFFFF))
                {
                    A23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (A23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    AEDM = One
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), (
                            DerefOf (RSTG [0x03]) ^ One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), (
                            DerefOf (PWRG [0x03]) ^ One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP18, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP18, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX18, 0, NotSerialized)
        {
            \_SB.PCI0.RP18.XPEH ()
        }
    }

    If ((R319 == One))
    {
        Scope (\_SB.PCI0.RP19)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0xFC), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0xFE), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.RP19.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PCI0.RP19.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PCI0.RP19.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PCI0.RP19.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PCI0.RP19.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PCI0.RP19.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PCI0.RP19.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PCI0.RP19.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PCI0.RP19.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PCI0.RP19.CLQS */
                SCLK [One] = CLQN /* \_SB_.PCI0.RP19.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]
                            )) == DerefOf (PWRG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]
                            )) == DerefOf (RSTG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), DerefOf (
                            PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), DerefOf (
                            RSTG [0x03]))
                    }
                }

                APGE = Zero
                A23R = One
                Sleep (0x10)
                Local0 = Zero
                While (A23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                APGE = One
                Local0 = Zero
                While ((AASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                AEDM = Zero
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((ADID != 0xFFFFFFFF))
                {
                    A23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (A23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    AEDM = One
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), (
                            DerefOf (RSTG [0x03]) ^ One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), (
                            DerefOf (PWRG [0x03]) ^ One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP19, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP19, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX19, 0, NotSerialized)
        {
            \_SB.PCI0.RP19.XPEH ()
        }
    }

    If ((R320 == One))
    {
        Scope (\_SB.PCI0.RP20)
        {
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10A), 
                    ,   1, 
                S0WS,   3, 
                RSTS,   1, 
                RSTA,   1, 
                PWRS,   1, 
                PWRA,   1, 
                WAKS,   1, 
                WAKA,   1, 
                CLQS,   1, 
                CLQN,   4, 
                Offset (0x10C), 
                RSTP,   32, 
                PWRP,   32, 
                WAKP,   32
            }

            Name (RSTG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PWRG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (WAKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCLK, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (WKEN, Zero)
            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.RP20.S0WS */
                RSTG [Zero] = RSTS /* \_SB_.PCI0.RP20.RSTS */
                RSTG [0x02] = RSTP /* \_SB_.PCI0.RP20.RSTP */
                RSTG [0x03] = !RSTA
                PWRG [Zero] = PWRS /* \_SB_.PCI0.RP20.PWRS */
                PWRG [0x02] = PWRP /* \_SB_.PCI0.RP20.PWRP */
                PWRG [0x03] = PWRA /* \_SB_.PCI0.RP20.PWRA */
                WAKG [Zero] = WAKS /* \_SB_.PCI0.RP20.WAKS */
                WAKG [0x02] = WAKP /* \_SB_.PCI0.RP20.WAKP */
                WAKG [0x03] = WAKA /* \_SB_.PCI0.RP20.WAKA */
                SCLK [Zero] = CLQS /* \_SB_.PCI0.RP20.CLQS */
                SCLK [One] = CLQN /* \_SB_.PCI0.RP20.CLQN */
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg1)
                {
                    WKEN = Zero
                }
                ElseIf ((Arg0 && Arg2))
                {
                    WKEN = One
                }
                Else
                {
                    WKEN = Zero
                }
            }

            Method (GMBR, 0, NotSerialized)
            {
                Local0 = (_ADR () & 0xFFFF)
                Local1 = ((_ADR () & 0xFFFF0000) >> 0x10)
                Local0 = ((Local0 << 0x0C) | (Local1 << 0x0F))
                Local0 |= GPCB ()
                Return (Local0)
            }

            OperationRegion (PMCS, SystemMemory, GMBR (), 0x0480)
            Field (PMCS, AnyAcc, NoLock, Preserve)
            {
                ADID,   32, 
                Offset (0x50), 
                    ,   1, 
                    ,   3, 
                ADIS,   1, 
                Offset (0x52), 
                    ,   13, 
                AASX,   1, 
                Offset (0xE2), 
                    ,   2, 
                A23E,   1, 
                A23R,   1, 
                Offset (0x324), 
                    ,   3, 
                AEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                APGE,   1
            }

            Field (PMCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                APSX,   1, 
                AMSX,   1
            }

            PowerResource (PXP, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    Return (PSTA ())
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    PON ()
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    POFF ()
                }
            }

            Method (PSTA, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]
                            )) == DerefOf (PWRG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                            )))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        If ((\_SB.PCI0.GEXP.GEPS (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]
                            )) == DerefOf (RSTG [0x03])))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PON, 0, NotSerialized)
            {
                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                        Sleep (0x64)
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), DerefOf (
                            PWRG [0x03]))
                        Sleep (0x64)
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], One)
                    Sleep (0x10)
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), DerefOf (
                            RSTG [0x03]))
                    }
                }

                APGE = Zero
                A23R = One
                Sleep (0x10)
                Local0 = Zero
                While (A23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                APGE = One
                Local0 = Zero
                While ((AASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                AEDM = Zero
            }

            Method (POFF, 0, NotSerialized)
            {
                If ((ADID != 0xFFFFFFFF))
                {
                    A23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (A23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    AEDM = One
                }

                If ((DerefOf (RSTG [Zero]) != Zero))
                {
                    If ((DerefOf (RSTG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (RSTG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (RSTG [One]), DerefOf (RSTG [0x02]), (
                            DerefOf (RSTG [0x03]) ^ One))
                    }
                }

                If ((DerefOf (SCLK [Zero]) != Zero))
                {
                    SPCO (SCLK [One], Zero)
                    Sleep (0x10)
                }

                If ((DerefOf (PWRG [Zero]) != Zero))
                {
                    If ((DerefOf (PWRG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (PWRG [Zero]) == 0x02))
                    {
                        \_SB.PCI0.GEXP.SGEP (DerefOf (PWRG [One]), DerefOf (PWRG [0x02]), (
                            DerefOf (PWRG [0x03]) ^ One))
                    }
                }

                If ((ADID != 0xFFFFFFFF))
                {
                    ADIS = One
                    ADIS = Zero
                }

                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                            \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }
                }

                APSX = One
                AMSX = One
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PXP
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PXP
            })
            Method (XPEH, 0, NotSerialized)
            {
                If (WKEN)
                {
                    If ((DerefOf (WAKG [Zero]) != Zero))
                    {
                        If ((DerefOf (WAKG [Zero]) == One))
                        {
                            \_SB.SHPO (DerefOf (WAKG [0x02]), One)
                        }

                        If ((DerefOf (WAKG [Zero]) == 0x02))
                        {
                            \_SB.PCI0.GEXP.SGEP (DerefOf (WAKG [One]), DerefOf (WAKG [0x02]), DerefOf (
                                WAKG [0x03]))
                        }
                    }

                    Notify (RP20, 0x02) // Device Wake
                }

                Return (Zero)
            }

            Method (GP20, 0, NotSerialized)
            {
                If (\_SB.ISME (WAKP))
                {
                    XPEH ()
                    \_SB.CAGS (WAKP)
                }

                Return (Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Method (XX20, 0, NotSerialized)
        {
            \_SB.PCI0.RP20.XPEH ()
        }
    }

    Scope (\_SB.PCI0.XHC)
    {
        OperationRegion (XHCP, SystemMemory, (\_SB.PCI0.GPCB () + 0x000A0000), 0x0100)
        Field (XHCP, AnyAcc, Lock, Preserve)
        {
            Offset (0x04), 
            PDBM,   16, 
            Offset (0x10), 
            MEMB,   64
        }

        OperationRegion (XHCM, SystemMemory, (MEMB & 0xFFFFFFFFFFFF0000), 0x0600)
    }

    If ((U301 == One))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS01)
        {
            Name (SLOT, One)
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x118), 
                    ,   1, 
                S0WS,   3, 
                PWRA,   1, 
                Offset (0x119), 
                PWRP,   32
            }

            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x480), 
                POEN,   1
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.XHC_.RHUB.HS01.S0WS */
                PWRG [Zero] = PWRP /* \_SB_.PCI0.XHC_.RHUB.HS01.PWRP */
                PWRG [One] = PWRA /* \_SB_.PCI0.XHC_.RHUB.HS01.PWRA */
            }

            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PowerResource (PRUB, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    If ((POEN == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                            )))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                        )
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PRUB
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PRUB
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PRUB
            })
        }
    }

    If ((U302 == One))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS02)
        {
            Name (SLOT, 0x02)
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x11D), 
                    ,   1, 
                S0WS,   3, 
                PWRA,   1, 
                Offset (0x11E), 
                PWRP,   32
            }

            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x490), 
                POEN,   1
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.XHC_.RHUB.HS02.S0WS */
                PWRG [Zero] = PWRP /* \_SB_.PCI0.XHC_.RHUB.HS02.PWRP */
                PWRG [One] = PWRA /* \_SB_.PCI0.XHC_.RHUB.HS02.PWRA */
            }

            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PowerResource (PRUB, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    If ((POEN == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                            )))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                        )
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PRUB
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PRUB
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PRUB
            })
        }
    }

    If ((U303 == One))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS03)
        {
            Name (SLOT, 0x03)
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x122), 
                    ,   1, 
                S0WS,   3, 
                PWRA,   1, 
                Offset (0x123), 
                PWRP,   32
            }

            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x4A0), 
                POEN,   1
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.XHC_.RHUB.HS03.S0WS */
                PWRG [Zero] = PWRP /* \_SB_.PCI0.XHC_.RHUB.HS03.PWRP */
                PWRG [One] = PWRA /* \_SB_.PCI0.XHC_.RHUB.HS03.PWRA */
            }

            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PowerResource (PRUB, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    If ((POEN == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                            )))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                        )
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PRUB
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PRUB
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PRUB
            })
        }
    }

    If ((U304 == One))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS04)
        {
            Name (SLOT, 0x04)
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x127), 
                    ,   1, 
                S0WS,   3, 
                PWRA,   1, 
                Offset (0x128), 
                PWRP,   32
            }

            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x4B0), 
                POEN,   1
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.XHC_.RHUB.HS04.S0WS */
                PWRG [Zero] = PWRP /* \_SB_.PCI0.XHC_.RHUB.HS04.PWRP */
                PWRG [One] = PWRA /* \_SB_.PCI0.XHC_.RHUB.HS04.PWRA */
            }

            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PowerResource (PRUB, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    If ((POEN == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                            )))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                        )
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PRUB
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PRUB
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PRUB
            })
        }
    }

    If ((U305 == One))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS05)
        {
            Name (SLOT, 0x05)
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x12C), 
                    ,   1, 
                S0WS,   3, 
                PWRA,   1, 
                Offset (0x12D), 
                PWRP,   32
            }

            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x4C0), 
                POEN,   1
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.XHC_.RHUB.HS05.S0WS */
                PWRG [Zero] = PWRP /* \_SB_.PCI0.XHC_.RHUB.HS05.PWRP */
                PWRG [One] = PWRA /* \_SB_.PCI0.XHC_.RHUB.HS05.PWRA */
            }

            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PowerResource (PRUB, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    If ((POEN == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                            )))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                        )
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PRUB
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PRUB
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PRUB
            })
        }
    }

    If ((U306 == One))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS06)
        {
            Name (SLOT, 0x06)
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x131), 
                    ,   1, 
                S0WS,   3, 
                PWRA,   1, 
                Offset (0x132), 
                PWRP,   32
            }

            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x4D0), 
                POEN,   1
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.XHC_.RHUB.HS06.S0WS */
                PWRG [Zero] = PWRP /* \_SB_.PCI0.XHC_.RHUB.HS06.PWRP */
                PWRG [One] = PWRA /* \_SB_.PCI0.XHC_.RHUB.HS06.PWRA */
            }

            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PowerResource (PRUB, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    If ((POEN == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                            )))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                        )
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PRUB
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PRUB
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PRUB
            })
        }
    }

    If ((U307 == One))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS07)
        {
            Name (SLOT, 0x07)
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x136), 
                    ,   1, 
                S0WS,   3, 
                PWRA,   1, 
                Offset (0x137), 
                PWRP,   32
            }

            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x4E0), 
                POEN,   1
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.XHC_.RHUB.HS07.S0WS */
                PWRG [Zero] = PWRP /* \_SB_.PCI0.XHC_.RHUB.HS07.PWRP */
                PWRG [One] = PWRA /* \_SB_.PCI0.XHC_.RHUB.HS07.PWRA */
            }

            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PowerResource (PRUB, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    If ((POEN == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                            )))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                        )
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PRUB
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PRUB
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PRUB
            })
        }
    }

    If ((U308 == One))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS08)
        {
            Name (SLOT, 0x08)
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x13B), 
                    ,   1, 
                S0WS,   3, 
                PWRA,   1, 
                Offset (0x13C), 
                PWRP,   32
            }

            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x4F0), 
                POEN,   1
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.XHC_.RHUB.HS08.S0WS */
                PWRG [Zero] = PWRP /* \_SB_.PCI0.XHC_.RHUB.HS08.PWRP */
                PWRG [One] = PWRA /* \_SB_.PCI0.XHC_.RHUB.HS08.PWRA */
            }

            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PowerResource (PRUB, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    If ((POEN == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                            )))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                        )
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PRUB
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PRUB
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PRUB
            })
        }
    }

    If ((U309 == One))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS09)
        {
            Name (SLOT, 0x09)
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x140), 
                    ,   1, 
                S0WS,   3, 
                PWRA,   1, 
                Offset (0x141), 
                PWRP,   32
            }

            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x500), 
                POEN,   1
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.XHC_.RHUB.HS09.S0WS */
                PWRG [Zero] = PWRP /* \_SB_.PCI0.XHC_.RHUB.HS09.PWRP */
                PWRG [One] = PWRA /* \_SB_.PCI0.XHC_.RHUB.HS09.PWRA */
            }

            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PowerResource (PRUB, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    If ((POEN == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                            )))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                        )
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PRUB
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PRUB
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PRUB
            })
        }
    }

    If ((U310 == One))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS10)
        {
            Name (SLOT, 0x0A)
            Field (R3NV, AnyAcc, NoLock, Preserve)
            {
                Offset (0x145), 
                    ,   1, 
                S0WS,   3, 
                PWRA,   1, 
                Offset (0x146), 
                PWRP,   32
            }

            Field (XHCM, DWordAcc, NoLock, Preserve)
            {
                Offset (0x510), 
                POEN,   1
            }

            Name (_S0W, Zero)  // _S0W: S0 Device Wake State
            Method (DINI, 0, NotSerialized)
            {
                _S0W = S0WS /* \_SB_.PCI0.XHC_.RHUB.HS10.S0WS */
                PWRG [Zero] = PWRP /* \_SB_.PCI0.XHC_.RHUB.HS10.PWRP */
                PWRG [One] = PWRA /* \_SB_.PCI0.XHC_.RHUB.HS10.PWRA */
            }

            Name (PWRG, Package (0x02)
            {
                Zero, 
                Zero
            })
            PowerResource (PRUB, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    DINI ()
                    If ((POEN == One))
                    {
                        If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                            )))
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                        )
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PRUB
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PRUB
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PRUB
            })
        }
    }

    If ((PCHS == PCHH))
    {
        If ((U311 == One))
        {
            Scope (\_SB.PCI0.XHC.RHUB.HS11)
            {
                Name (SLOT, 0x0B)
                Field (R3NV, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x14A), 
                        ,   1, 
                    S0WS,   3, 
                    PWRA,   1, 
                    Offset (0x14B), 
                    PWRP,   32
                }

                Field (XHCM, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x520), 
                    POEN,   1
                }

                Name (_S0W, Zero)  // _S0W: S0 Device Wake State
                Method (DINI, 0, NotSerialized)
                {
                    _S0W = S0WS /* \_SB_.PCI0.XHC_.RHUB.HS11.S0WS */
                    PWRG [Zero] = PWRP /* \_SB_.PCI0.XHC_.RHUB.HS11.PWRP */
                    PWRG [One] = PWRA /* \_SB_.PCI0.XHC_.RHUB.HS11.PWRA */
                }

                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                PowerResource (PRUB, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        DINI ()
                        If ((POEN == One))
                        {
                            If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                                )))
                            {
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                            )
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PRUB
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PRUB
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PRUB
                })
            }
        }

        If ((U312 == One))
        {
            Scope (\_SB.PCI0.XHC.RHUB.HS12)
            {
                Name (SLOT, 0x0C)
                Field (R3NV, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x14F), 
                        ,   1, 
                    S0WS,   3, 
                    PWRA,   1, 
                    Offset (0x150), 
                    PWRP,   32
                }

                Field (XHCM, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x520), 
                    POEN,   1
                }

                Name (_S0W, Zero)  // _S0W: S0 Device Wake State
                Method (DINI, 0, NotSerialized)
                {
                    _S0W = S0WS /* \_SB_.PCI0.XHC_.RHUB.HS12.S0WS */
                    PWRG [Zero] = PWRP /* \_SB_.PCI0.XHC_.RHUB.HS12.PWRP */
                    PWRG [One] = PWRA /* \_SB_.PCI0.XHC_.RHUB.HS12.PWRA */
                }

                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                PowerResource (PRUB, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        DINI ()
                        If ((POEN == One))
                        {
                            If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                                )))
                            {
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                            )
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PRUB
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PRUB
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PRUB
                })
            }
        }

        If ((U313 == One))
        {
            Scope (\_SB.PCI0.XHC.RHUB.HS13)
            {
                Name (SLOT, 0x0D)
                Field (R3NV, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x154), 
                        ,   1, 
                    S0WS,   3, 
                    PWRA,   1, 
                    Offset (0x155), 
                    PWRP,   32
                }

                Field (XHCM, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x530), 
                    POEN,   1
                }

                Name (_S0W, Zero)  // _S0W: S0 Device Wake State
                Method (DINI, 0, NotSerialized)
                {
                    _S0W = S0WS /* \_SB_.PCI0.XHC_.RHUB.HS13.S0WS */
                    PWRG [Zero] = PWRP /* \_SB_.PCI0.XHC_.RHUB.HS13.PWRP */
                    PWRG [One] = PWRA /* \_SB_.PCI0.XHC_.RHUB.HS13.PWRA */
                }

                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                PowerResource (PRUB, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        DINI ()
                        If ((POEN == One))
                        {
                            If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                                )))
                            {
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                            )
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PRUB
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PRUB
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PRUB
                })
            }
        }

        If ((U314 == One))
        {
            Scope (\_SB.PCI0.XHC.RHUB.HS14)
            {
                Name (SLOT, 0x0E)
                Field (R3NV, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x159), 
                        ,   1, 
                    S0WS,   3, 
                    PWRA,   1, 
                    Offset (0x15A), 
                    PWRP,   32
                }

                Field (XHCM, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x540), 
                    POEN,   1
                }

                Name (_S0W, Zero)  // _S0W: S0 Device Wake State
                Method (DINI, 0, NotSerialized)
                {
                    _S0W = S0WS /* \_SB_.PCI0.XHC_.RHUB.HS14.S0WS */
                    PWRG [Zero] = PWRP /* \_SB_.PCI0.XHC_.RHUB.HS14.PWRP */
                    PWRG [One] = PWRA /* \_SB_.PCI0.XHC_.RHUB.HS14.PWRA */
                }

                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                PowerResource (PRUB, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        DINI ()
                        If ((POEN == One))
                        {
                            If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                                )))
                            {
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                            )
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PRUB
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PRUB
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PRUB
                })
            }
        }

        If ((U315 == One))
        {
            Scope (\_SB.PCI0.XHC.RHUB.HS15)
            {
                Name (SLOT, 0x0F)
                Field (R3NV, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x15E), 
                        ,   1, 
                    S0WS,   3, 
                    PWRA,   1, 
                    Offset (0x15F), 
                    PWRP,   32
                }

                Field (XHCM, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x550), 
                    POEN,   1
                }

                Name (_S0W, Zero)  // _S0W: S0 Device Wake State
                Method (DINI, 0, NotSerialized)
                {
                    _S0W = S0WS /* \_SB_.PCI0.XHC_.RHUB.HS15.S0WS */
                    PWRG [Zero] = PWRP /* \_SB_.PCI0.XHC_.RHUB.HS15.PWRP */
                    PWRG [One] = PWRA /* \_SB_.PCI0.XHC_.RHUB.HS15.PWRA */
                }

                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                PowerResource (PRUB, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        DINI ()
                        If ((POEN == One))
                        {
                            If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                                )))
                            {
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                            )
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PRUB
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PRUB
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PRUB
                })
            }
        }

        If ((U316 == One))
        {
            Scope (\_SB.PCI0.XHC.RHUB.HS16)
            {
                Name (SLOT, 0x10)
                Field (R3NV, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x163), 
                        ,   1, 
                    S0WS,   3, 
                    PWRA,   1, 
                    Offset (0x164), 
                    PWRP,   32
                }

                Field (XHCM, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x560), 
                    POEN,   1
                }

                Name (_S0W, Zero)  // _S0W: S0 Device Wake State
                Method (DINI, 0, NotSerialized)
                {
                    _S0W = S0WS /* \_SB_.PCI0.XHC_.RHUB.HS16.S0WS */
                    PWRG [Zero] = PWRP /* \_SB_.PCI0.XHC_.RHUB.HS16.PWRP */
                    PWRG [One] = PWRA /* \_SB_.PCI0.XHC_.RHUB.HS16.PWRA */
                }

                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                PowerResource (PRUB, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        DINI ()
                        If ((POEN == One))
                        {
                            If ((\_SB.GGOV (DerefOf (PWRG [Zero])) == DerefOf (PWRG [One]
                                )))
                            {
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (DerefOf (PWRG [Zero]), DerefOf (PWRG [One]))
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (DerefOf (PWRG [Zero]), ~DerefOf (PWRG [One])
                            )
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PRUB
                })
                Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                {
                    PRUB
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PRUB
                })
            }
        }
    }

    Field (R3NV, AnyAcc, Lock, Preserve)
    {
        Offset (0x168), 
            ,   1, 
        ZSPN,   3, 
        OPEA,   1, 
        Offset (0x169), 
        OPEP,   32, 
        ODAP,   32
    }

    If ((ZPDE == One))
    {
        If ((ZSPN == Zero))
        {
            Scope (\_SB.PCI0.SAT0.PRT0)
            {
                Name (UDSM, Zero)
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PXPR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PXPR
                })
                Name (WKEN, Zero)
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If ((\_SB.OSCO & 0x04))
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    If (Arg1)
                    {
                        WKEN = Zero
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                    }
                    Else
                    {
                        WKEN = Zero
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x45, 0x04))
                }

                PowerResource (PXPR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (OPEP, OPEA)
                        Sleep (0x64)
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (OPEP, ~OPEA)
                        Sleep (0x64)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Switch (ToInteger (Arg1))
                                {
                                    Case (One)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x0F                                             // .
                                        })
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }
                            Case (One)
                            {
                                If ((UDSM == Zero))
                                {
                                    UDSM = One
                                }

                                Return (One)
                            }
                            Case (0x02)
                            {
                                ^PXPR._OFF ()
                                Return (One)
                            }
                            Case (0x03)
                            {
                                ^PXPR._ON ()
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPEH, 0, NotSerialized)
                {
                    If ((UDSM == One))
                    {
                        Notify (\_SB.PCI0.SAT0, 0x80) // Status Change
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.SAT0.PRT0, 0x02) // Device Wake
                    }

                    Return (Zero)
                }

                Method (GPZ0, 0, NotSerialized)
                {
                    If (\_SB.ISME (ODAP))
                    {
                        XPEH ()
                        \_SB.CAGS (ODAP)
                    }

                    Return (Zero)
                }
            }
        }

        If ((ZSPN == One))
        {
            Scope (\_SB.PCI0.SAT0.PRT1)
            {
                Name (UDSM, Zero)
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PXPR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PXPR
                })
                Name (WKEN, Zero)
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If ((\_SB.OSCO & 0x04))
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    If (Arg1)
                    {
                        WKEN = Zero
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                    }
                    Else
                    {
                        WKEN = Zero
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x45, 0x04))
                }

                PowerResource (PXPR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (OPEP, OPEA)
                        Sleep (0x64)
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (OPEP, ~OPEA)
                        Sleep (0x64)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Switch (ToInteger (Arg1))
                                {
                                    Case (One)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x0F                                             // .
                                        })
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }
                            Case (One)
                            {
                                If ((UDSM == Zero))
                                {
                                    UDSM = One
                                }

                                Return (One)
                            }
                            Case (0x02)
                            {
                                ^PXPR._OFF ()
                                Return (One)
                            }
                            Case (0x03)
                            {
                                ^PXPR._ON ()
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPEH, 0, NotSerialized)
                {
                    If ((UDSM == One))
                    {
                        Notify (\_SB.PCI0.SAT0, 0x81) // Information Change
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.SAT0.PRT1, 0x02) // Device Wake
                    }

                    Return (Zero)
                }

                Method (GPZ1, 0, NotSerialized)
                {
                    If (\_SB.ISME (ODAP))
                    {
                        XPEH ()
                        \_SB.CAGS (ODAP)
                    }

                    Return (Zero)
                }
            }
        }

        If ((ZSPN == 0x02))
        {
            Scope (\_SB.PCI0.SAT0.PRT2)
            {
                Name (UDSM, Zero)
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PXPR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PXPR
                })
                Name (WKEN, Zero)
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If ((\_SB.OSCO & 0x04))
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    If (Arg1)
                    {
                        WKEN = Zero
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                    }
                    Else
                    {
                        WKEN = Zero
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x45, 0x04))
                }

                PowerResource (PXPR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (OPEP, OPEA)
                        Sleep (0x64)
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (OPEP, ~OPEA)
                        Sleep (0x64)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Switch (ToInteger (Arg1))
                                {
                                    Case (One)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x0F                                             // .
                                        })
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }
                            Case (One)
                            {
                                If ((UDSM == Zero))
                                {
                                    UDSM = One
                                }

                                Return (One)
                            }
                            Case (0x02)
                            {
                                ^PXPR._OFF ()
                                Return (One)
                            }
                            Case (0x03)
                            {
                                ^PXPR._ON ()
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPEH, 0, NotSerialized)
                {
                    If ((UDSM == One))
                    {
                        Notify (\_SB.PCI0.SAT0, 0x82) // Device-Specific Change
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.SAT0.PRT2, 0x02) // Device Wake
                    }

                    Return (Zero)
                }

                Method (GPZ2, 0, NotSerialized)
                {
                    If (\_SB.ISME (ODAP))
                    {
                        XPEH ()
                        \_SB.CAGS (ODAP)
                    }

                    Return (Zero)
                }
            }
        }

        If ((ZSPN == 0x03))
        {
            Scope (\_SB.PCI0.SAT0.PRT3)
            {
                Name (UDSM, Zero)
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PXPR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PXPR
                })
                Name (WKEN, Zero)
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If ((\_SB.OSCO & 0x04))
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    If (Arg1)
                    {
                        WKEN = Zero
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                    }
                    Else
                    {
                        WKEN = Zero
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x45, 0x04))
                }

                PowerResource (PXPR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (OPEP, OPEA)
                        Sleep (0x64)
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (OPEP, ~OPEA)
                        Sleep (0x64)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Switch (ToInteger (Arg1))
                                {
                                    Case (One)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x0F                                             // .
                                        })
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }
                            Case (One)
                            {
                                If ((UDSM == Zero))
                                {
                                    UDSM = One
                                }

                                Return (One)
                            }
                            Case (0x02)
                            {
                                ^PXPR._OFF ()
                                Return (One)
                            }
                            Case (0x03)
                            {
                                ^PXPR._ON ()
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPEH, 0, NotSerialized)
                {
                    If ((UDSM == One))
                    {
                        Notify (\_SB.PCI0.SAT0, 0x83) // Device-Specific Change
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.SAT0.PRT3, 0x02) // Device Wake
                    }

                    Return (Zero)
                }

                Method (GPZ3, 0, NotSerialized)
                {
                    If (\_SB.ISME (ODAP))
                    {
                        XPEH ()
                        \_SB.CAGS (ODAP)
                    }

                    Return (Zero)
                }
            }
        }

        If ((ZSPN == 0x04))
        {
            Scope (\_SB.PCI0.SAT0.PRT4)
            {
                Name (UDSM, Zero)
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PXPR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PXPR
                })
                Name (WKEN, Zero)
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If ((\_SB.OSCO & 0x04))
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    If (Arg1)
                    {
                        WKEN = Zero
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                    }
                    Else
                    {
                        WKEN = Zero
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x45, 0x04))
                }

                PowerResource (PXPR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (OPEP, OPEA)
                        Sleep (0x64)
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (OPEP, ~OPEA)
                        Sleep (0x64)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Switch (ToInteger (Arg1))
                                {
                                    Case (One)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x0F                                             // .
                                        })
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }
                            Case (One)
                            {
                                If ((UDSM == Zero))
                                {
                                    UDSM = One
                                }

                                Return (One)
                            }
                            Case (0x02)
                            {
                                ^PXPR._OFF ()
                                Return (One)
                            }
                            Case (0x03)
                            {
                                ^PXPR._ON ()
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPEH, 0, NotSerialized)
                {
                    If ((UDSM == One))
                    {
                        Notify (\_SB.PCI0.SAT0, 0x84) // Reserved
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.SAT0.PRT4, 0x02) // Device Wake
                    }

                    Return (Zero)
                }

                Method (GPZ4, 0, NotSerialized)
                {
                    If (\_SB.ISME (ODAP))
                    {
                        XPEH ()
                        \_SB.CAGS (ODAP)
                    }

                    Return (Zero)
                }
            }
        }

        If ((ZSPN == 0x05))
        {
            Scope (\_SB.PCI0.SAT0.PRT5)
            {
                Name (UDSM, Zero)
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PXPR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PXPR
                })
                Name (WKEN, Zero)
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If ((\_SB.OSCO & 0x04))
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    If (Arg1)
                    {
                        WKEN = Zero
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                    }
                    Else
                    {
                        WKEN = Zero
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x45, 0x04))
                }

                PowerResource (PXPR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        \_SB.SGOV (OPEP, OPEA)
                        Sleep (0x64)
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        \_SB.SGOV (OPEP, ~OPEA)
                        Sleep (0x64)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Switch (ToInteger (Arg1))
                                {
                                    Case (One)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x0F                                             // .
                                        })
                                    }
                                    Default
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }

                                }
                            }
                            Case (One)
                            {
                                If ((UDSM == Zero))
                                {
                                    UDSM = One
                                }

                                Return (One)
                            }
                            Case (0x02)
                            {
                                ^PXPR._OFF ()
                                Return (One)
                            }
                            Case (0x03)
                            {
                                ^PXPR._ON ()
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPEH, 0, NotSerialized)
                {
                    If ((UDSM == One))
                    {
                        Notify (\_SB.PCI0.SAT0, 0x85) // Device-Specific
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.SAT0.PRT5, 0x02) // Device Wake
                    }

                    Return (Zero)
                }

                Method (GPZ5, 0, NotSerialized)
                {
                    If (\_SB.ISME (ODAP))
                    {
                        XPEH ()
                        \_SB.CAGS (ODAP)
                    }

                    Return (Zero)
                }
            }
        }
    }

    Scope (\_GPE)
    {
        Method (YY00, 0, NotSerialized)
        {
            \_SB.PCI0.SAT0.PRT0.XPEH ()
        }

        Method (YY01, 0, NotSerialized)
        {
            \_SB.PCI0.SAT0.PRT1.XPEH ()
        }

        Method (YY02, 0, NotSerialized)
        {
            \_SB.PCI0.SAT0.PRT2.XPEH ()
        }

        Method (YY03, 0, NotSerialized)
        {
            \_SB.PCI0.SAT0.PRT3.XPEH ()
        }

        Method (YY04, 0, NotSerialized)
        {
            \_SB.PCI0.SAT0.PRT4.XPEH ()
        }

        Method (YY05, 0, NotSerialized)
        {
            \_SB.PCI0.SAT0.PRT5.XPEH ()
        }
    }
}



SSDT25
------
DefinitionBlock ("", "SSDT", 1, "HP", "HPCONDEV", 0x00001000)
{
    Scope (\_GPE)
    {
    }

    Scope (\_SB)
    {
    }
}



SSDT26
------
DefinitionBlock ("", "SSDT", 2, "HPQOEM", "HP_XHC_P", 0x00000000)
{
    External (_SB_.PCI0.LPCB.CRID, IntObj)
    External (_SB_.PCI0.XHC_.RHUB, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS01, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS02, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS03, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS04, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS05, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS06, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS07, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS08, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS09, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS10, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS11, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS12, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS13, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS14, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS01, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS02, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS03, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS04, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS05, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS06, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS07, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS08, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS09, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS10, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.USR1, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.USR2, DeviceObj)
    External (GPLD, MethodObj)    // 2 Arguments
    External (GUPC, MethodObj)    // 2 Arguments
    External (HPID, FieldUnitObj)
    External (TPLD, MethodObj)    // 2 Arguments
    External (TUPC, MethodObj)    // 1 Arguments

    Scope (\_SB.PCI0.XHC.RHUB.HS01)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (TUPC (0x09))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (TPLD (One, One))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS02)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, 0x02))
        }

        Device (WCAM)
        {
            Name (_STA, 0x0F)  // _STA: Status
            Name (_ADR, 0x02)  // _ADR: Address
            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
            {
                Name (UPCP, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS02.WCAM._UPC.UPCP */
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDP, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ,.......
                        /* 0010 */  0xC8, 0x00, 0xA0, 0x00                           // ....
                    }
                })
                Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS02.WCAM._PLD.PLDP */
            }
        }

        Device (IRCM)
        {
            Name (_STA, 0x0F)  // _STA: Status
            Name (_ADR, 0x09)  // _ADR: Address
            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
            {
                Name (UPCP, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS02.IRCM._UPC.UPCP */
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDP, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ,.......
                        /* 0010 */  0xC8, 0x00, 0xA0, 0x00                           // ....
                    }
                })
                Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS02.IRCM._PLD.PLDP */
            }
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS03)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, 0x03))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS04)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, 0x04))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS05)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (TUPC (0x09))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (TPLD (One, 0x14))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS06)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (TUPC (0x09))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (TPLD (One, 0x15))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS07)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, 0x07))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS08)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, 0x08))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS09)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, 0x09))
        }

        Device (WCAM)
        {
            Name (_STA, 0x0F)  // _STA: Status
            Name (_ADR, 0x09)  // _ADR: Address
            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
            {
                Name (UPCP, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS09.WCAM._UPC.UPCP */
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDP, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x24, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // $.......
                        /* 0010 */  0xC8, 0x00, 0xA0, 0x00                           // ....
                    }
                })
                Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS09.WCAM._PLD.PLDP */
            }
        }

        Device (IRCM)
        {
            Name (_STA, 0x0F)  // _STA: Status
            Name (_ADR, 0x0B)  // _ADR: Address
            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
            {
                Name (UPCP, Package (0x04)
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS09.IRCM._UPC.UPCP */
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDP, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x24, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // $.......
                        /* 0010 */  0xC8, 0x00, 0xA0, 0x00                           // ....
                    }
                })
                Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS09.IRCM._PLD.PLDP */
            }
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS10)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, 0x0A))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS01)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (TUPC (0x09))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (TPLD (One, One))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS02)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS03)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS04)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS05)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS06)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }
}



SSDT27
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Ist", 0x00003000)
{
    External (_SB_.CPPC, FieldUnitObj)
    External (_SB_.OSCP, IntObj)
    External (_SB_.PR00, DeviceObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PR00)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.CPPC) /* External reference */
        }

        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((\_SB.OSCP & 0x0400))
            {
                Return (TPSS) /* \_SB_.PR00.TPSS */
            }
            Else
            {
                Return (LPSS) /* \_SB_.PR00.LPSS */
            }
        }

        Name (LPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000709, 
                0x00003A98, 
                0x0000000A, 
                0x0000000A, 
                0x00002700, 
                0x00002700
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00003A98, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x00003673, 
                0x0000000A, 
                0x0000000A, 
                0x00001100, 
                0x00001100
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00003264, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00002EFB, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00002B15, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x000027D1, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00002414, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x0000044C, 
                0x000020F4, 
                0x0000000A, 
                0x0000000A, 
                0x00000B00, 
                0x00000B00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x00001D5C, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00001A5F, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x000016EE, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }, 

            Package (0x06)
            {
                0x000002BC, 
                0x00001391, 
                0x0000000A, 
                0x0000000A, 
                0x00000700, 
                0x00000700
            }, 

            Package (0x06)
            {
                0x00000258, 
                0x000010C9, 
                0x0000000A, 
                0x0000000A, 
                0x00000600, 
                0x00000600
            }, 

            Package (0x06)
            {
                0x000001F4, 
                0x00000D91, 
                0x0000000A, 
                0x0000000A, 
                0x00000500, 
                0x00000500
            }, 

            Package (0x06)
            {
                0x00000190, 
                0x00000AEB, 
                0x0000000A, 
                0x0000000A, 
                0x00000400, 
                0x00000400
            }
        })
        Name (TPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000709, 
                0x00003A98, 
                0x0000000A, 
                0x0000000A, 
                0x00002700, 
                0x00002700
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00003A98, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x00003673, 
                0x0000000A, 
                0x0000000A, 
                0x00001100, 
                0x00001100
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00003264, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00002EFB, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00002B15, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x000027D1, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00002414, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x0000044C, 
                0x000020F4, 
                0x0000000A, 
                0x0000000A, 
                0x00000B00, 
                0x00000B00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x00001D5C, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00001A5F, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x000016EE, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }, 

            Package (0x06)
            {
                0x000002BC, 
                0x00001391, 
                0x0000000A, 
                0x0000000A, 
                0x00000700, 
                0x00000700
            }, 

            Package (0x06)
            {
                0x00000258, 
                0x000010C9, 
                0x0000000A, 
                0x0000000A, 
                0x00000600, 
                0x00000600
            }, 

            Package (0x06)
            {
                0x000001F4, 
                0x00000D91, 
                0x0000000A, 
                0x0000000A, 
                0x00000500, 
                0x00000500
            }, 

            Package (0x06)
            {
                0x00000190, 
                0x00000AEB, 
                0x0000000A, 
                0x0000000A, 
                0x00000400, 
                0x00000400
            }
        })
    }
}



SSDT28
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApPsd", 0x00003000)
{
    External (_SB_.CFGD, FieldUnitObj)
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (PC00, IntObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PR01)
    {
        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = One
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR01.HPSD */
            }

            Return (SPSD) /* \_SB_.PR01.SPSD */
        }
    }

    Scope (\_SB.PR02)
    {
        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x02
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR02.HPSD */
            }

            Return (SPSD) /* \_SB_.PR02.SPSD */
        }
    }

    Scope (\_SB.PR03)
    {
        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x03
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR03.HPSD */
            }

            Return (SPSD) /* \_SB_.PR03.SPSD */
        }
    }

    Scope (\_SB.PR04)
    {
        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x04
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR04.HPSD */
            }

            Return (SPSD) /* \_SB_.PR04.SPSD */
        }
    }

    Scope (\_SB.PR05)
    {
        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x05
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR05.HPSD */
            }

            Return (SPSD) /* \_SB_.PR05.SPSD */
        }
    }

    Scope (\_SB.PR06)
    {
        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x06
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR06.HPSD */
            }

            Return (SPSD) /* \_SB_.PR06.SPSD */
        }
    }

    Scope (\_SB.PR07)
    {
        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x07
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR07.HPSD */
            }

            Return (SPSD) /* \_SB_.PR07.SPSD */
        }
    }

    Scope (\_SB.PR08)
    {
        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x08
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR08.HPSD */
            }

            Return (SPSD) /* \_SB_.PR08.SPSD */
        }
    }

    Scope (\_SB.PR09)
    {
        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x09
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR09.HPSD */
            }

            Return (SPSD) /* \_SB_.PR09.SPSD */
        }
    }

    Scope (\_SB.PR10)
    {
        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x0A
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR10.HPSD */
            }

            Return (SPSD) /* \_SB_.PR10.SPSD */
        }
    }

    Scope (\_SB.PR11)
    {
        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x0B
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR11.HPSD */
            }

            Return (SPSD) /* \_SB_.PR11.SPSD */
        }
    }

    Scope (\_SB.PR12)
    {
        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x0C
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR12.HPSD */
            }

            Return (SPSD) /* \_SB_.PR12.SPSD */
        }
    }

    Scope (\_SB.PR13)
    {
        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x0D
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR13.HPSD */
            }

            Return (SPSD) /* \_SB_.PR13.SPSD */
        }
    }

    Scope (\_SB.PR14)
    {
        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x0E
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR14.HPSD */
            }

            Return (SPSD) /* \_SB_.PR14.SPSD */
        }
    }

    Scope (\_SB.PR15)
    {
        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x0F
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR15.HPSD */
            }

            Return (SPSD) /* \_SB_.PR15.SPSD */
        }
    }
}



SSDT29
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApIst", 0x00003000)
{
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR00._PCT, MethodObj)    // 0 Arguments
    External (_SB_.PR00._PPC, MethodObj)    // 0 Arguments
    External (_SB_.PR00._PSS, MethodObj)    // 0 Arguments
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)

    Scope (\_SB.PR01)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR02)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR03)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR04)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR05)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR06)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR07)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR08)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR09)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR10)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR11)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR12)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR13)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR14)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR15)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "HP", "HPNBCONV", 0x00001000)
{
    External (_SB_.CAGS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PCI0.LPCB.EC0_.ECRG, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.KBBL, FieldUnitObj)
    External (_SB_.WMIV.GVWE, MethodObj)    // 2 Arguments
    External (CDP1, UnknownObj)
    External (RFCR, IntObj)

    Scope (\_GPE)
    {
        Method (RFBL, 0, NotSerialized)
        {
            Local0 = \CDP1 /* External reference */
            Local0 += One
            \CDP1 = Local0
            Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
            \_SB.PCI0.LPCB.EC0.KBBL = 0xFF
            Release (\_SB.PCI0.LPCB.EC0.ECMX)
            \_SB.WMIV.GVWE (0x1C, Zero)
            \_SB.CAGS (RFCR)
        }
    }

    Scope (\_SB)
    {
    }
}



SSDT30
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Cst", 0x00003001)
{
    External (_SB_.PR00, DeviceObj)
    External (C3LT, UnknownObj)
    External (C3MW, UnknownObj)
    External (C6LT, UnknownObj)
    External (C6MW, UnknownObj)
    External (C7LT, UnknownObj)
    External (C7MW, UnknownObj)
    External (CDLT, UnknownObj)
    External (CDLV, UnknownObj)
    External (CDMW, UnknownObj)
    External (CDPW, UnknownObj)
    External (CFGD, UnknownObj)
    External (FEMD, UnknownObj)
    External (FMBL, UnknownObj)
    External (PC00, UnknownObj)
    External (PFLV, UnknownObj)
    External (PWRS, UnknownObj)

    Scope (\_SB.PR00)
    {
        Name (C1TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            One, 
            One, 
            0x03E8
        })
        Name (C3TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001814, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0x01F4
        })
        Name (C6TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001815, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0x015E
        })
        Name (C7TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0xC8
        })
        Name (CDTM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x03, 
            Zero, 
            Zero
        })
        Name (MWES, ResourceTemplate ()
        {
            Register (FFixedHW, 
                0x01,               // Bit Width
                0x02,               // Bit Offset
                0x0000000000000000, // Address
                0x01,               // Access Size
                )
        })
        Name (AC2V, Zero)
        Name (AC3V, Zero)
        Name (C3ST, Package (0x04)
        {
            0x03, 
            Package (0x00){}, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C2ST, Package (0x03)
        {
            0x02, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C1ST, Package (0x02)
        {
            One, 
            Package (0x00){}
        })
        Name (CSTF, Zero)
        Method (_CST, 0, Serialized)  // _CST: C-States
        {
            If (!CSTF)
            {
                C3TM [0x02] = C3LT /* External reference */
                C6TM [0x02] = C6LT /* External reference */
                C7TM [0x02] = C7LT /* External reference */
                CDTM [0x02] = CDLT /* External reference */
                CDTM [0x03] = CDPW /* External reference */
                DerefOf (CDTM [Zero]) [0x07] = CDLV /* External reference */
                If (((CFGD & 0x0800) && (PC00 & 0x0200)))
                {
                    C1TM [Zero] = MWES /* \_SB_.PR00.MWES */
                    C6TM [Zero] = MWES /* \_SB_.PR00.MWES */
                    C7TM [Zero] = MWES /* \_SB_.PR00.MWES */
                    CDTM [Zero] = MWES /* \_SB_.PR00.MWES */
                    C3TM [Zero] = MWES /* \_SB_.PR00.MWES */
                    DerefOf (C3TM [Zero]) [0x07] = C3MW /* External reference */
                    DerefOf (C6TM [Zero]) [0x07] = C6MW /* External reference */
                    DerefOf (C7TM [Zero]) [0x07] = C7MW /* External reference */
                    DerefOf (CDTM [Zero]) [0x07] = CDMW /* External reference */
                }
                ElseIf (((CFGD & 0x0800) && (PC00 & 0x0100)))
                {
                    C1TM [Zero] = MWES /* \_SB_.PR00.MWES */
                }

                CSTF = Ones
            }

            AC2V = Zero
            AC3V = Zero
            C3ST [One] = C1TM /* \_SB_.PR00.C1TM */
            If ((CFGD & 0x20))
            {
                C3ST [0x02] = C7TM /* \_SB_.PR00.C7TM */
                AC2V = Ones
            }
            ElseIf ((CFGD & 0x10))
            {
                C3ST [0x02] = C6TM /* \_SB_.PR00.C6TM */
                AC2V = Ones
            }
            ElseIf ((CFGD & 0x08))
            {
                C3ST [0x02] = C3TM /* \_SB_.PR00.C3TM */
                AC2V = Ones
            }

            If ((CFGD & 0x4000))
            {
                C3ST [0x03] = CDTM /* \_SB_.PR00.CDTM */
                AC3V = Ones
            }

            If ((AC2V && AC3V))
            {
                Return (C3ST) /* \_SB_.PR00.C3ST */
            }
            ElseIf (AC2V)
            {
                C2ST [One] = DerefOf (C3ST [One])
                C2ST [0x02] = DerefOf (C3ST [0x02])
                Return (C2ST) /* \_SB_.PR00.C2ST */
            }
            ElseIf (AC3V)
            {
                C2ST [One] = DerefOf (C3ST [One])
                C2ST [0x02] = DerefOf (C3ST [0x03])
                DerefOf (C2ST [0x02]) [One] = 0x02
                Return (C2ST) /* \_SB_.PR00.C2ST */
            }
            Else
            {
                C1ST [One] = DerefOf (C3ST [One])
                Return (C1ST) /* \_SB_.PR00.C1ST */
            }
        }
    }
}



SSDT31
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApCst", 0x00003000)
{
    External (_SB_.PR00._CST, UnknownObj)
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)

    Scope (\_SB.PR01)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR02)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR03)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR04)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR05)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR06)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR07)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR08)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR09)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR10)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR11)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR12)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR13)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR14)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR15)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Psd", 0x00003000)
{
    External (_SB_.CFGD, FieldUnitObj)
    External (_SB_.PR00, DeviceObj)
    External (PC00, IntObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PR00)
    {
        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = Zero
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR00.HPSD */
            }

            Return (SPSD) /* \_SB_.PR00.SPSD */
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "HP", "HPTBT", 0x00001000)
{
    External (_SB_.CAGS, MethodObj)    // 1 Arguments
    External (_SB_.GGIV, MethodObj)    // 1 Arguments
    External (_SB_.GGOV, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PEG0, DeviceObj)
    External (_SB_.PCI0.PEG1, DeviceObj)
    External (_SB_.PCI0.PEG2, DeviceObj)
    External (_SB_.PCI0.RP01, DeviceObj)
    External (_SB_.PCI0.RP01.PDOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP01.PDON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP01.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP01.PXSX, DeviceObj)
    External (_SB_.PCI0.RP02, DeviceObj)
    External (_SB_.PCI0.RP02.PDOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP02.PDON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP02.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP02.PXSX, DeviceObj)
    External (_SB_.PCI0.RP03, DeviceObj)
    External (_SB_.PCI0.RP03.PDOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP03.PDON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP03.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP03.PXSX, DeviceObj)
    External (_SB_.PCI0.RP04, DeviceObj)
    External (_SB_.PCI0.RP04.PDOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP04.PDON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP04.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP04.PXSX, DeviceObj)
    External (_SB_.PCI0.RP05, DeviceObj)
    External (_SB_.PCI0.RP05.PDOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP05.PDON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP05.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP05.PXSX, DeviceObj)
    External (_SB_.PCI0.RP06, DeviceObj)
    External (_SB_.PCI0.RP06.PDOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP06.PDON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP06.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP06.PXSX, DeviceObj)
    External (_SB_.PCI0.RP07, DeviceObj)
    External (_SB_.PCI0.RP07.PDOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP07.PDON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP07.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP07.PXSX, DeviceObj)
    External (_SB_.PCI0.RP08, DeviceObj)
    External (_SB_.PCI0.RP08.PDOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP08.PDON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP08.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP08.PXSX, DeviceObj)
    External (_SB_.PCI0.RP09, DeviceObj)
    External (_SB_.PCI0.RP09.PDOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP09.PDON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP09.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP09.PXSX, DeviceObj)
    External (_SB_.PCI0.RP10, DeviceObj)
    External (_SB_.PCI0.RP10.PDOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP10.PDON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP10.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP10.PXSX, DeviceObj)
    External (_SB_.PCI0.RP11, DeviceObj)
    External (_SB_.PCI0.RP11.PDOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP11.PDON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP11.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP11.PXSX, DeviceObj)
    External (_SB_.PCI0.RP12, DeviceObj)
    External (_SB_.PCI0.RP12.PDOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP12.PDON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP12.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP12.PXSX, DeviceObj)
    External (_SB_.PCI0.RP13, DeviceObj)
    External (_SB_.PCI0.RP13.PDOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP13.PDON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP13.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP13.PXSX, DeviceObj)
    External (_SB_.PCI0.RP14, DeviceObj)
    External (_SB_.PCI0.RP14.PDOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP14.PDON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP14.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP14.PXSX, DeviceObj)
    External (_SB_.PCI0.RP15, DeviceObj)
    External (_SB_.PCI0.RP15.PDOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP15.PDON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP15.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP15.PXSX, DeviceObj)
    External (_SB_.PCI0.RP16, DeviceObj)
    External (_SB_.PCI0.RP16.PDOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP16.PDON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP16.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP16.PXSX, DeviceObj)
    External (_SB_.PCI0.RP17, DeviceObj)
    External (_SB_.PCI0.RP17.PDOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP17.PDON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP17.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP17.PXSX, DeviceObj)
    External (_SB_.PCI0.RP18, DeviceObj)
    External (_SB_.PCI0.RP18.PDOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP18.PDON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP18.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP18.PXSX, DeviceObj)
    External (_SB_.PCI0.RP19, DeviceObj)
    External (_SB_.PCI0.RP19.PDOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP19.PDON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP19.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP19.PXSX, DeviceObj)
    External (_SB_.PCI0.RP20, DeviceObj)
    External (_SB_.PCI0.RP20.PDOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP20.PDON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP20.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP20.PXSX, DeviceObj)
    External (_SB_.PCI0.RP21, DeviceObj)
    External (_SB_.PCI0.RP21.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP22, DeviceObj)
    External (_SB_.PCI0.RP22.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP23, DeviceObj)
    External (_SB_.PCI0.RP23.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP24, DeviceObj)
    External (_SB_.PCI0.RP24.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PEPD.DEVY, PkgObj)
    External (_SB_.POWS, FieldUnitObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.SHPO, MethodObj)    // 2 Arguments
    External (ADBG, MethodObj)    // 1 Arguments
    External (GUPC, MethodObj)    // 2 Arguments
    External (NEXP, FieldUnitObj)
    External (OSUM, UnknownObj)
    External (P8XH, MethodObj)    // 2 Arguments
    External (PCPB, UnknownObj)
    External (PIN_.OFF_, MethodObj)    // 1 Arguments
    External (PIN_.ON__, MethodObj)    // 1 Arguments
    External (PSON, UnknownObj)
    External (RPA1, FieldUnitObj)
    External (RPA2, FieldUnitObj)
    External (RPA3, FieldUnitObj)
    External (RPA4, FieldUnitObj)
    External (RPA5, FieldUnitObj)
    External (RPA6, FieldUnitObj)
    External (RPA7, FieldUnitObj)
    External (RPA8, FieldUnitObj)
    External (RPA9, FieldUnitObj)
    External (RPAA, FieldUnitObj)
    External (RPAB, FieldUnitObj)
    External (RPAC, FieldUnitObj)
    External (RPAD, FieldUnitObj)
    External (RPAE, FieldUnitObj)
    External (RPAF, FieldUnitObj)
    External (RPAG, FieldUnitObj)
    External (RPAH, FieldUnitObj)
    External (RPAI, FieldUnitObj)
    External (RPAJ, FieldUnitObj)
    External (RPAK, FieldUnitObj)
    External (RPAL, FieldUnitObj)
    External (RPAM, FieldUnitObj)
    External (RPAN, FieldUnitObj)
    External (RPAO, FieldUnitObj)
    External (SSMP, FieldUnitObj)
    External (TPLD, MethodObj)    // 2 Arguments
    External (TUID, UnknownObj)
    External (USWE, FieldUnitObj)
    External (WAKP, UnknownObj)
    External (WFEV, UnknownObj)

    Name (LDLY, 0x012C)
    Name (TNVB, 0x97B0B000)
    Name (TNVL, 0x004D)
    OperationRegion (BNVS, SystemMemory, TNVB, TNVL)
    Field (BNVS, AnyAcc, Lock, Preserve)
    {
        TBSF,   8, 
        SOHP,   8, 
        TWIN,   8, 
        GP5F,   8, 
        NOHP,   8, 
        TBSE,   8, 
        WKFN,   8, 
        TBTS,   8, 
        TARS,   8, 
        FPEN,   32, 
        FPG0,   32, 
        FP0L,   8, 
        CPG0,   32, 
        RSG0,   32, 
        RS0L,   8, 
        DTCP,   8, 
        RPS0,   8, 
        RPT0,   8, 
        RPS1,   8, 
        RPT1,   8, 
        RPN0,   8, 
        RPN1,   8, 
        FPG1,   32, 
        FP1L,   8, 
        CPG1,   32, 
        RSG1,   32, 
        RS1L,   8, 
        CGST,   8, 
        DTPT,   8, 
        TRWA,   8, 
        ACDC,   8, 
        DT0E,   8, 
        DT1E,   8, 
        TASP,   8, 
        TL1S,   8, 
        TCLK,   8, 
        TLTR,   8, 
        TPTM,   8, 
        TWAK,   8, 
        TBOD,   16, 
        TSXW,   8, 
        RTBT,   8, 
        RTBC,   8, 
        TBCD,   16, 
        TREV,   8, 
        TWRP,   32, 
        TWAP,   32, 
        TWRA,   8
    }

    Name (TRDO, Zero)
    Name (TRD3, Zero)
    Name (TBPE, Zero)
    Name (TOFF, Zero)
    Method (TBON, 0, Serialized)
    {
        TRDO = One
        Switch (ToInteger (\RPS0))
        {
            Case (One)
            {
                If (CondRefOf (\_SB.PCI0.RP01.PON))
                {
                    \_SB.PCI0.RP01.PON ()
                }
            }
            Case (0x02)
            {
                If (CondRefOf (\_SB.PCI0.RP02.PON))
                {
                    \_SB.PCI0.RP02.PON ()
                }
            }
            Case (0x03)
            {
                If (CondRefOf (\_SB.PCI0.RP03.PON))
                {
                    \_SB.PCI0.RP03.PON ()
                }
            }
            Case (0x04)
            {
                If (CondRefOf (\_SB.PCI0.RP04.PON))
                {
                    \_SB.PCI0.RP04.PON ()
                }
            }
            Case (0x05)
            {
                If (CondRefOf (\_SB.PCI0.RP05.PON))
                {
                    \_SB.PCI0.RP05.PON ()
                }
            }
            Case (0x06)
            {
                If (CondRefOf (\_SB.PCI0.RP06.PON))
                {
                    \_SB.PCI0.RP06.PON ()
                }
            }
            Case (0x07)
            {
                If (CondRefOf (\_SB.PCI0.RP07.PON))
                {
                    \_SB.PCI0.RP07.PON ()
                }
            }
            Case (0x08)
            {
                If (CondRefOf (\_SB.PCI0.RP08.PON))
                {
                    \_SB.PCI0.RP08.PON ()
                }
            }
            Case (0x09)
            {
                If (CondRefOf (\_SB.PCI0.RP09.PON))
                {
                    \_SB.PCI0.RP09.PON ()
                }
            }
            Case (0x0A)
            {
                If (CondRefOf (\_SB.PCI0.RP10.PON))
                {
                    \_SB.PCI0.RP10.PON ()
                }
            }
            Case (0x0B)
            {
                If (CondRefOf (\_SB.PCI0.RP11.PON))
                {
                    \_SB.PCI0.RP11.PON ()
                }
            }
            Case (0x0C)
            {
                If (CondRefOf (\_SB.PCI0.RP12.PON))
                {
                    \_SB.PCI0.RP12.PON ()
                }
            }
            Case (0x0D)
            {
                If (CondRefOf (\_SB.PCI0.RP13.PON))
                {
                    \_SB.PCI0.RP13.PON ()
                }
            }
            Case (0x0E)
            {
                If (CondRefOf (\_SB.PCI0.RP14.PON))
                {
                    \_SB.PCI0.RP14.PON ()
                }
            }
            Case (0x0F)
            {
                If (CondRefOf (\_SB.PCI0.RP15.PON))
                {
                    \_SB.PCI0.RP15.PON ()
                }
            }
            Case (0x10)
            {
                If (CondRefOf (\_SB.PCI0.RP16.PON))
                {
                    \_SB.PCI0.RP16.PON ()
                }
            }
            Case (0x11)
            {
                If (CondRefOf (\_SB.PCI0.RP17.PON))
                {
                    \_SB.PCI0.RP17.PON ()
                }
            }
            Case (0x12)
            {
                If (CondRefOf (\_SB.PCI0.RP18.PON))
                {
                    \_SB.PCI0.RP18.PON ()
                }
            }
            Case (0x13)
            {
                If (CondRefOf (\_SB.PCI0.RP19.PON))
                {
                    \_SB.PCI0.RP19.PON ()
                }
            }
            Case (0x14)
            {
                If (CondRefOf (\_SB.PCI0.RP20.PON))
                {
                    \_SB.PCI0.RP20.PON ()
                }
            }
            Case (0x15)
            {
                If (CondRefOf (\_SB.PCI0.RP21.PON))
                {
                    \_SB.PCI0.RP21.PON ()
                }
            }
            Case (0x16)
            {
                If (CondRefOf (\_SB.PCI0.RP22.PON))
                {
                    \_SB.PCI0.RP22.PON ()
                }
            }
            Case (0x17)
            {
                If (CondRefOf (\_SB.PCI0.RP23.PON))
                {
                    \_SB.PCI0.RP23.PON ()
                }
            }
            Case (0x18)
            {
                If (CondRefOf (\_SB.PCI0.RP24.PON))
                {
                    \_SB.PCI0.RP24.PON ()
                }
            }

        }

        TRDO = Zero
    }

    Method (TBTD, 2, Serialized)
    {
        ADBG ("TBTD")
        If ((Arg1 == One))
        {
            Switch (ToInteger (Arg0))
            {
                Case (Package (0x08)
                    {
                        One, 
                        0x02, 
                        0x03, 
                        0x04, 
                        0x05, 
                        0x06, 
                        0x07, 
                        0x08
                    }

)
                {
                    Local0 = 0x1C
                }
                Case (Package (0x08)
                    {
                        0x09, 
                        0x0A, 
                        0x0B, 
                        0x0C, 
                        0x0D, 
                        0x0E, 
                        0x0F, 
                        0x10
                    }

)
                {
                    Local0 = 0x1D
                }
                Case (Package (0x08)
                    {
                        0x11, 
                        0x12, 
                        0x13, 
                        0x14, 
                        0x15, 
                        0x16, 
                        0x17, 
                        0x18
                    }

)
                {
                    Local0 = 0x1B
                }

            }
        }
        ElseIf ((Arg1 == 0x02))
        {
            Switch (ToInteger (Arg0))
            {
                Case (Package (0x03)
                    {
                        One, 
                        0x02, 
                        0x03
                    }

)
                {
                    Local0 = One
                }

            }
        }
        Else
        {
            Local0 = 0xFF
        }

        ADBG ("Device no")
        ADBG (Local0)
        Return (Local0)
    }

    Method (TBTF, 2, Serialized)
    {
        ADBG ("TBTF")
        If ((Arg1 == One))
        {
            Switch (ToInteger (Arg0))
            {
                Case (One)
                {
                    Local0 = (\RPA1 & 0x0F)
                }
                Case (0x02)
                {
                    Local0 = (\RPA2 & 0x0F)
                }
                Case (0x03)
                {
                    Local0 = (\RPA3 & 0x0F)
                }
                Case (0x04)
                {
                    Local0 = (\RPA4 & 0x0F)
                }
                Case (0x05)
                {
                    Local0 = (\RPA5 & 0x0F)
                }
                Case (0x06)
                {
                    Local0 = (\RPA6 & 0x0F)
                }
                Case (0x07)
                {
                    Local0 = (\RPA7 & 0x0F)
                }
                Case (0x08)
                {
                    Local0 = (\RPA8 & 0x0F)
                }
                Case (0x09)
                {
                    Local0 = (\RPA9 & 0x0F)
                }
                Case (0x0A)
                {
                    Local0 = (\RPAA & 0x0F)
                }
                Case (0x0B)
                {
                    Local0 = (\RPAB & 0x0F)
                }
                Case (0x0C)
                {
                    Local0 = (\RPAC & 0x0F)
                }
                Case (0x0D)
                {
                    Local0 = (\RPAD & 0x0F)
                }
                Case (0x0E)
                {
                    Local0 = (\RPAE & 0x0F)
                }
                Case (0x0F)
                {
                    Local0 = (\RPAF & 0x0F)
                }
                Case (0x10)
                {
                    Local0 = (\RPAG & 0x0F)
                }
                Case (0x11)
                {
                    Local0 = (\RPAH & 0x0F)
                }
                Case (0x12)
                {
                    Local0 = (\RPAI & 0x0F)
                }
                Case (0x13)
                {
                    Local0 = (\RPAJ & 0x0F)
                }
                Case (0x14)
                {
                    Local0 = (\RPAK & 0x0F)
                }
                Case (0x15)
                {
                    Local0 = (\RPAL & 0x0F)
                }
                Case (0x16)
                {
                    Local0 = (\RPAM & 0x0F)
                }
                Case (0x17)
                {
                    Local0 = (\RPAN & 0x0F)
                }
                Case (0x18)
                {
                    Local0 = (\RPAO & 0x0F)
                }

            }
        }
        ElseIf ((Arg1 == 0x02))
        {
            Switch (ToInteger (Arg0))
            {
                Case (One)
                {
                    Local0 = Zero
                }
                Case (0x02)
                {
                    Local0 = One
                }
                Case (0x03)
                {
                    Local0 = 0x02
                }

            }
        }
        Else
        {
            Local0 = 0xFF
        }

        ADBG ("Function no")
        ADBG (Local0)
        Return (Local0)
    }

    Method (MMRP, 2, Serialized)
    {
        Local0 = \_SB.PCI0.GPCB ()
        Local0 += (TBTD (Arg0, Arg1) << 0x0F)
        Local0 += (TBTF (Arg0, Arg1) << 0x0C)
        Return (Local0)
    }

    Method (MMTB, 2, Serialized)
    {
        ADBG ("MMTB")
        Local0 = \_SB.PCI0.GPCB ()
        Local0 += (TBTD (Arg0, Arg1) << 0x0F)
        Local0 += (TBTF (Arg0, Arg1) << 0x0C)
        OperationRegion (MMMM, SystemMemory, Local0, 0x1A)
        Field (MMMM, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBUS,   8
        }

        Local2 = SBUS /* \MMTB.SBUS */
        Local0 = \_SB.PCI0.GPCB ()
        Local2 *= 0x00100000
        Local0 += Local2
        ADBG ("TBT-US-ADR")
        ADBG (Local0)
        Return (Local0)
    }

    Method (FFTB, 2, Serialized)
    {
        ADBG ("FFTB")
        Local0 = (MMTB (Arg0, Arg1) + 0x0548)
        OperationRegion (PXVD, SystemMemory, Local0, 0x08)
        Field (PXVD, DWordAcc, NoLock, Preserve)
        {
            TB2P,   32, 
            P2TB,   32
        }

        Local1 = TB2P /* \FFTB.TB2P */
        If ((Local1 == 0xFFFFFFFF))
        {
            ADBG ("FFTb 1")
            Return (One)
        }
        Else
        {
            ADBG ("FFTb 0")
            Return (Zero)
        }
    }

    Name (TDMA, 0x80000000)
    Scope (\_GPE)
    {
        Method (OSUP, 2, Serialized)
        {
            ADBG ("OSUP")
            Local0 = (Arg0 + 0x0540)
            OperationRegion (PXVD, SystemMemory, Local0, 0x10)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                IT2P,   32, 
                IP2T,   32, 
                DT2P,   32, 
                DP2T,   32
            }

            Local1 = 0x64
            If ((Arg1 == 0x80))
            {
                IP2T = 0x0D
            }
            Else
            {
                DP2T = 0x0D
            }

            While ((Local1 > Zero))
            {
                Local1 = (Local1 - One)
                If ((Arg1 == 0x80))
                {
                    Local2 = IT2P /* \_GPE.OSUP.IT2P */
                }
                Else
                {
                    Local2 = DT2P /* \_GPE.OSUP.DT2P */
                }

                If (((Local2 == 0xFFFFFFFF) && (Arg1 == Zero)))
                {
                    ADBG ("Dev gone")
                    Return (0x02)
                }

                If ((Local2 & One))
                {
                    ADBG ("Cmd acknowledged")
                    Break
                }

                Sleep (0x32)
            }

            If ((Arg1 == 0x80))
            {
                IP2T = Zero
                Local1 = 0x64
                While ((Local1 > Zero))
                {
                    Local1 = (Local1 - One)
                    Local2 = IT2P /* \_GPE.OSUP.IT2P */
                    If ((Local2 & One))
                    {
                        ADBG ("Cmd acknowledged")
                        Break
                    }

                    Sleep (0x32)
                }
            }
            ElseIf ((TRWA == One))
            {
                DP2T = 0x0C
            }
            Else
            {
                DP2T = Zero
            }

            ADBG ("End-of-OSUP")
            Return (One)
        }

        Method (SXST, 1, Serialized)
        {
            Local0 = (Arg0 + 0x0548)
            OperationRegion (PXVD, SystemMemory, Local0, 0x08)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                TB2P,   32, 
                P2TB,   32
            }

            Local1 = 0x64
            Local2 = TB2P /* \_GPE.SXST.TB2P */
            Debug = "SXST 0x1D cmd"
            P2TB = 0x3B
            While ((Local1 > Zero))
            {
                Local1 = (Local1 - One)
                Local2 = TB2P /* \_GPE.SXST.TB2P */
                If ((Local2 == 0xFFFFFFFF))
                {
                    Debug = "Dev gone"
                    Return (0x02)
                }

                If ((Local2 & One))
                {
                    Debug = "Cmd acknowledged"
                    Break
                }

                Sleep (0x32)
            }

            P2TB = Zero
            Sleep (0x32)
            Debug = "End-of-SXST"
            Return (One)
        }

        Method (TBFF, 2, Serialized)
        {
            ADBG ("TBFF")
            Local0 = MMTB (Arg0, Arg1)
            OperationRegion (PXVD, SystemMemory, Local0, 0x08)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                VEDI,   32, 
                CMDR,   32
            }

            Local1 = VEDI /* \_GPE.TBFF.VEDI */
            If ((Local1 == 0xFFFFFFFF))
            {
                If ((NEXP != Zero))
                {
                    If ((CMDR == 0xFFFFFFFF))
                    {
                        Return (0x02)
                    }

                    Return (One)
                }
                Else
                {
                    Return (OSUP (Local0, Zero))
                }
            }
            Else
            {
                ADBG ("Dev Present")
                Return (Zero)
            }
        }

        Method (TSUB, 2, Serialized)
        {
            ADBG ("TSUB")
            Local0 = \_SB.PCI0.GPCB ()
            Local0 += (TBTD (Arg0, Arg1) << 0x0F)
            Local0 += (TBTF (Arg0, Arg1) << 0x0C)
            ADBG ("ADR")
            ADBG (Local0)
            OperationRegion (MMMM, SystemMemory, Local0, 0x1A)
            Field (MMMM, AnyAcc, NoLock, Preserve)
            {
                Offset (0x19), 
                SBUS,   8
            }

            ADBG ("Sec Bus")
            ADBG (SBUS)
            Return (SBUS) /* \_GPE.TSUB.SBUS */
        }

        Method (TSUP, 2, Serialized)
        {
            ADBG ("TSUB")
            Local0 = \_SB.PCI0.GPCB ()
            Local0 += (TBTD (Arg0, Arg1) << 0x0F)
            Local0 += (TBTF (Arg0, Arg1) << 0x0C)
            ADBG ("ADR:")
            ADBG (Local0)
            OperationRegion (MMMM, SystemMemory, Local0, 0x30)
            Field (MMMM, AnyAcc, NoLock, Preserve)
            {
                CMDS,   32, 
                Offset (0x19), 
                SBUS,   8, 
                SBU5,   8, 
                Offset (0x1C), 
                SEIO,   32, 
                MMBL,   32, 
                PMBL,   32
            }

            ADBG ("Pmem of TBT RP:")
            ADBG (PMBL)
            Return (PMBL) /* \_GPE.TSUP.PMBL */
        }

        Method (WSUB, 2, Serialized)
        {
            ADBG (Concatenate ("WSUB=", ToHexString (Arg0)))
            ADBG (ToHexString (Timer))
            Local0 = Zero
            Local1 = Zero
            While (One)
            {
                Local1 = TSUP (Arg0, Arg1)
                If ((Local1 > 0x0001FFF1))
                {
                    ADBG ("WSUB-Finished")
                    Break
                }
                Else
                {
                    Local0 += One
                    If ((Local0 > 0x03E8))
                    {
                        Sleep (0x03E8)
                        ADBG ("WSUB-Deadlock")
                    }
                    Else
                    {
                        Sleep (0x10)
                    }
                }
            }

            ADBG (Concatenate ("WSUb=", ToHexString (Local1)))
        }

        Method (WWAK, 0, NotSerialized)
        {
            ADBG ("WWAK")
            Wait (WFEV, 0xFFFF)
            Signal (WFEV)
        }

        Method (NTFY, 2, Serialized)
        {
            ADBG ("NTFY")
            If ((NOHP == One))
            {
                If ((Arg1 == One))
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (One)
                        {
                            ADBG ("Notify RP01")
                            Notify (\_SB.PCI0.RP01, Zero) // Bus Check
                        }
                        Case (0x02)
                        {
                            ADBG ("Notify RP02")
                            Notify (\_SB.PCI0.RP02, Zero) // Bus Check
                        }
                        Case (0x03)
                        {
                            ADBG ("Notify RP03")
                            Notify (\_SB.PCI0.RP03, Zero) // Bus Check
                        }
                        Case (0x04)
                        {
                            ADBG ("Notify RP04")
                            Notify (\_SB.PCI0.RP04, Zero) // Bus Check
                        }
                        Case (0x05)
                        {
                            ADBG ("Notify RP05")
                            Notify (\_SB.PCI0.RP05, Zero) // Bus Check
                        }
                        Case (0x06)
                        {
                            ADBG ("Notify RP06")
                            Notify (\_SB.PCI0.RP06, Zero) // Bus Check
                        }
                        Case (0x07)
                        {
                            ADBG ("Notify RP07")
                            Notify (\_SB.PCI0.RP07, Zero) // Bus Check
                        }
                        Case (0x08)
                        {
                            ADBG ("Notify RP08")
                            Notify (\_SB.PCI0.RP08, Zero) // Bus Check
                        }
                        Case (0x09)
                        {
                            ADBG ("Notify RP09")
                            Notify (\_SB.PCI0.RP09, Zero) // Bus Check
                        }
                        Case (0x0A)
                        {
                            ADBG ("Notify RP10")
                            Notify (\_SB.PCI0.RP10, Zero) // Bus Check
                        }
                        Case (0x0B)
                        {
                            ADBG ("Notify RP11")
                            Notify (\_SB.PCI0.RP11, Zero) // Bus Check
                        }
                        Case (0x0C)
                        {
                            ADBG ("Notify RP12")
                            Notify (\_SB.PCI0.RP12, Zero) // Bus Check
                        }
                        Case (0x0D)
                        {
                            ADBG ("Notify RP13")
                            Notify (\_SB.PCI0.RP13, Zero) // Bus Check
                        }
                        Case (0x0E)
                        {
                            ADBG ("Notify RP14")
                            Notify (\_SB.PCI0.RP14, Zero) // Bus Check
                        }
                        Case (0x0F)
                        {
                            ADBG ("Notify RP15")
                            Notify (\_SB.PCI0.RP15, Zero) // Bus Check
                        }
                        Case (0x10)
                        {
                            ADBG ("Notify RP16")
                            Notify (\_SB.PCI0.RP16, Zero) // Bus Check
                        }
                        Case (0x11)
                        {
                            ADBG ("Notify RP17")
                            Notify (\_SB.PCI0.RP17, Zero) // Bus Check
                        }
                        Case (0x12)
                        {
                            ADBG ("Notify RP18")
                            Notify (\_SB.PCI0.RP18, Zero) // Bus Check
                        }
                        Case (0x13)
                        {
                            ADBG ("Notify RP19")
                            Notify (\_SB.PCI0.RP19, Zero) // Bus Check
                        }
                        Case (0x14)
                        {
                            ADBG ("Notify RP20")
                            Notify (\_SB.PCI0.RP20, Zero) // Bus Check
                        }
                        Case (0x15)
                        {
                            ADBG ("Notify RP21")
                            Notify (\_SB.PCI0.RP21, Zero) // Bus Check
                        }
                        Case (0x16)
                        {
                            ADBG ("Notify RP22")
                            Notify (\_SB.PCI0.RP22, Zero) // Bus Check
                        }
                        Case (0x17)
                        {
                            ADBG ("Notify RP23")
                            Notify (\_SB.PCI0.RP23, Zero) // Bus Check
                        }
                        Case (0x18)
                        {
                            ADBG ("Notify RP24")
                            Notify (\_SB.PCI0.RP24, Zero) // Bus Check
                        }

                    }
                }
                ElseIf ((Arg1 == 0x02))
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (One)
                        {
                            ADBG ("Notify PEG0")
                            Notify (\_SB.PCI0.PEG0, Zero) // Bus Check
                        }
                        Case (0x02)
                        {
                            ADBG ("Notify PEG1")
                            Notify (\_SB.PCI0.PEG1, Zero) // Bus Check
                        }
                        Case (0x03)
                        {
                            ADBG ("Notify PEG2")
                            Notify (\_SB.PCI0.PEG2, Zero) // Bus Check
                        }

                    }
                }
            }

            P8XH (Zero, 0xC2)
            P8XH (One, 0xC2)
        }

        Method (GNIS, 2, Serialized)
        {
            ADBG ("GNIS")
            If ((GP5F == Zero))
            {
                ADBG ("GNIS_Dis=0")
                Return (Zero)
            }

            Local0 = (MMTB (Arg0, Arg1) + 0x0544)
            OperationRegion (PXVD, SystemMemory, Local0, 0x08)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                HPFI,   1, 
                Offset (0x04), 
                TB2P,   32
            }

            Local1 = TB2P /* \_GPE.GNIS.TB2P */
            ADBG (Concatenate ("TB2P=", ToHexString (Local1)))
            If ((Local1 == 0xFFFFFFFF))
            {
                ADBG ("GNIS=0")
                Return (Zero)
            }

            Local2 = HPFI /* \_GPE.GNIS.HPFI */
            ADBG (Concatenate ("HPFI=", ToHexString (Local2)))
            If ((Local2 == One))
            {
                HPFI = Zero
                ADBG ("GNIS=0")
                Return (Zero)
            }

            ADBG ("GNIS=1")
            Return (One)
        }

        Method (CHKP, 2, Serialized)
        {
            Local0 = (MMTB (Arg0, Arg1) + 0x0544)
            OperationRegion (PXVE, SystemMemory, Local0, 0x08)
            Field (PXVE, DWordAcc, NoLock, Preserve)
            {
                HPFI,   1, 
                Offset (0x04), 
                TB2P,   32
            }

            Local1 = TB2P /* \_GPE.CHKP.TB2P */
            Local1 &= 0x20000000
            ADBG (Concatenate ("Local1=", ToHexString (Local1)))
            If ((Local1 == 0x20000000))
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (XTBT, 2, Serialized)
        {
            ADBG ("XTBT")
            ADBG ("RP :")
            ADBG (Arg0)
            DTCP = Arg0
            DTPT = Arg1
            If ((Arg0 == RPS0))
            {
                Local0 = One
            }
            ElseIf ((Arg0 == RPS1))
            {
                Local0 = 0x02
            }
            Else
            {
                Local0 = Zero
                Return (Zero)
            }

            If (TRDO)
            {
                ADBG ("Durng TBT_ON")
                Return (Zero)
            }

            If (TRD3)
            {
                ADBG ("During TBT_OFF")
                Return (Zero)
            }

            WWAK ()
            WSUB (Arg0, Arg1)
            If (GNIS (Arg0, Arg1))
            {
                Return (Zero)
            }

            ADBG ("TBT-HP-Handler")
            Acquire (OSUM, 0xFFFF)
            Local1 = TBFF (Arg0, Arg1)
            If ((Local1 == One))
            {
                Sleep (0x10)
                Release (OSUM)
                ADBG ("OS_Up_Received")
                Return (Zero)
            }

            If ((Local1 == 0x02))
            {
                NTFY (Arg0, Arg1)
                Sleep (0x10)
                Release (OSUM)
                ADBG ("Disconnect")
                Return (Zero)
            }

            If ((SOHP == One))
            {
                ADBG ("TBT SW SMI")
                TBSF = 0x15
                SSMP = 0xF7
            }

            NTFY (Arg0, Arg1)
            Sleep (0x10)
            Release (OSUM)
            ADBG ("End-of-XTBT")
        }

        Method (ATBT, 0, NotSerialized)
        {
            ADBG ("ATBT")
            If ((CGST == Zero))
            {
                If ((RPN0 == One))
                {
                    XTBT (RPS0, RPT0)
                }
            }
            ElseIf ((RPN0 == One))
            {
                XTBT (RPS0, RPT0)
            }
            ElseIf ((RPN1 == One))
            {
                XTBT (RPS1, RPT1)
            }

            ADBG ("End-of-ATBT")
        }

        Method (BTBT, 0, NotSerialized)
        {
            ADBG ("BTBT")
            If ((CGST == Zero))
            {
                If ((RPN1 == One))
                {
                    XTBT (RPS1, RPT1)
                }
            }

            ADBG ("End-of-BTBT")
        }

        Method (TINI, 3, Serialized)
        {
            ADBG ("TINI")
            If ((Arg0 == Zero))
            {
                Local0 = MMRP (Arg1, Arg2)
                OperationRegion (RP_X, SystemMemory, Local0, 0x20)
                Field (RP_X, DWordAcc, NoLock, Preserve)
                {
                    REG0,   32, 
                    REG1,   32, 
                    REG2,   32, 
                    REG3,   32, 
                    REG4,   32, 
                    REG5,   32, 
                    REG6,   32, 
                    REG7,   32
                }

                Local1 = REG6 /* \_GPE.TINI.REG6 */
                Local2 = Zero
                Local2 |= 0x00780000
                Local2 |= 0x7800
                REG6 = Local2
                Local2 = MMTB (Arg1, Arg2)
                OSUP (Local2, Zero)
                REG6 = Local1
            }

            ADBG ("End-of-TINI")
        }

        Method (_L37, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            ADBG ("_L37")
            If (((TBTS == One) && ((RPS0 == One) || (RPS1 == One))))
            {
                \_SB.SHPO (TWAP, One)
                ADBG ("Notify RP01")
                Notify (\_SB.PCI0.RP01, 0x02) // Device Wake
            }

            If (((TBTS == One) && ((RPS0 == 0x02) || (RPS1 == 0x02))))
            {
                \_SB.SHPO (TWAP, One)
                ADBG ("Notify RP02")
                Notify (\_SB.PCI0.RP02, 0x02) // Device Wake
            }

            If (((TBTS == One) && ((RPS0 == 0x03) || (RPS1 == 0x03))))
            {
                \_SB.SHPO (TWAP, One)
                ADBG ("Notify RP03")
                Notify (\_SB.PCI0.RP03, 0x02) // Device Wake
            }

            If (((TBTS == One) && ((RPS0 == 0x04) || (RPS1 == 0x04))))
            {
                \_SB.SHPO (TWAP, One)
                ADBG ("Notify RP04")
                Notify (\_SB.PCI0.RP04, 0x02) // Device Wake
            }

            If (((TBTS == One) && ((RPS0 == 0x05) || (RPS1 == 0x05))))
            {
                \_SB.SHPO (TWAP, One)
                ADBG ("Notify RP5")
                Notify (\_SB.PCI0.RP05, 0x02) // Device Wake
            }

            If (((TBTS == One) && ((RPS0 == 0x06) || (RPS1 == 0x06))))
            {
                \_SB.SHPO (TWAP, One)
                ADBG ("Notify RP06")
                Notify (\_SB.PCI0.RP06, 0x02) // Device Wake
            }

            If (((TBTS == One) && ((RPS0 == 0x07) || (RPS1 == 0x07))))
            {
                \_SB.SHPO (TWAP, One)
                ADBG ("Notify RP07")
                Notify (\_SB.PCI0.RP07, 0x02) // Device Wake
            }

            If (((TBTS == One) && ((RPS0 == 0x08) || (RPS1 == 0x08))))
            {
                \_SB.SHPO (TWAP, One)
                ADBG ("Notify RP08")
                Notify (\_SB.PCI0.RP08, 0x02) // Device Wake
            }

            If (((TBTS == One) && ((RPS0 == 0x09) || (RPS1 == 0x09))))
            {
                \_SB.SHPO (TWAP, One)
                ADBG ("Notify RP09")
                Notify (\_SB.PCI0.RP09, 0x02) // Device Wake
            }

            If (((TBTS == One) && ((RPS0 == 0x0A) || (RPS1 == 0x0A))))
            {
                \_SB.SHPO (TWAP, One)
                ADBG ("Notify RP010")
                Notify (\_SB.PCI0.RP10, 0x02) // Device Wake
            }

            If (((TBTS == One) && ((RPS0 == 0x0B) || (RPS1 == 0x0B))))
            {
                \_SB.SHPO (TWAP, One)
                ADBG ("Notify RP11")
                Notify (\_SB.PCI0.RP11, 0x02) // Device Wake
            }

            If (((TBTS == One) && ((RPS0 == 0x0C) || (RPS1 == 0x0C))))
            {
                \_SB.SHPO (TWAP, One)
                ADBG ("Notify RP12")
                Notify (\_SB.PCI0.RP12, 0x02) // Device Wake
            }

            If (((TBTS == One) && ((RPS0 == 0x0D) || (RPS1 == 0x0D))))
            {
                \_SB.SHPO (TWAP, One)
                ADBG ("Notify RP13")
                Notify (\_SB.PCI0.RP13, 0x02) // Device Wake
            }

            If (((TBTS == One) && ((RPS0 == 0x0E) || (RPS1 == 0x0E))))
            {
                \_SB.SHPO (TWAP, One)
                ADBG ("Notify RP14")
                Notify (\_SB.PCI0.RP14, 0x02) // Device Wake
            }

            If (((TBTS == One) && ((RPS0 == 0x0F) || (RPS1 == 0x0F))))
            {
                \_SB.SHPO (TWAP, One)
                ADBG ("Notify RP15")
                Notify (\_SB.PCI0.RP15, 0x02) // Device Wake
            }

            If (((TBTS == One) && ((RPS0 == 0x10) || (RPS1 == 0x10))))
            {
                \_SB.SHPO (TWAP, One)
                ADBG ("Notify RP16")
                Notify (\_SB.PCI0.RP16, 0x02) // Device Wake
            }

            If (((TBTS == One) && ((RPS0 == 0x11) || (RPS1 == 0x11))))
            {
                \_SB.SHPO (TWAP, One)
                ADBG ("Notify RP17")
                Notify (\_SB.PCI0.RP17, 0x02) // Device Wake
            }

            If (((TBTS == One) && ((RPS0 == 0x12) || (RPS1 == 0x12))))
            {
                \_SB.SHPO (TWAP, One)
                ADBG ("Notify RP18")
                Notify (\_SB.PCI0.RP18, 0x02) // Device Wake
            }

            If (((TBTS == One) && ((RPS0 == 0x13) || (RPS1 == 0x13))))
            {
                \_SB.SHPO (TWAP, One)
                ADBG ("Notify RP19")
                Notify (\_SB.PCI0.RP19, 0x02) // Device Wake
            }

            If (((TBTS == One) && ((RPS0 == 0x14) || (RPS1 == 0x14))))
            {
                \_SB.SHPO (TWAP, One)
                ADBG ("Notify RP20")
                Notify (\_SB.PCI0.RP20, 0x02) // Device Wake
            }

            ADBG ("End-of-_L37")
        }
    }

    Scope (\_SB)
    {
        Method (THDR, 3, Serialized)
        {
            ADBG ("THDR")
            \_SB.CAGS (Arg0)
            \_GPE.XTBT (Arg1, Arg2)
        }
    }

    Scope (\_SB)
    {
        Method (CGWR, 2, Serialized)
        {
            If (CondRefOf (\_SB.SGOV))
            {
                \_SB.SGOV (Arg0, Arg1)
            }
        }

        Method (CGRD, 2, Serialized)
        {
            Local0 = One
            If ((Arg1 == Zero))
            {
                If (CondRefOf (\_SB.GGOV))
                {
                    Local0 = \_SB.GGOV (Arg0)
                }
            }
            ElseIf ((Arg1 == One))
            {
                If (CondRefOf (\_SB.GGIV))
                {
                    Local0 = \_SB.GGIV (Arg0)
                }
            }

            Return (Local0)
        }

        Method (WRGP, 2, Serialized)
        {
            Local0 = Arg0
            Local1 = Arg0
            Local0 &= 0xFFFFFFFF
            Local1 >>= 0x20
            If (((Local0 & 0xFF) == One))
            {
                \_SB.CGWR (Local1, Arg1)
            }
        }

        Method (RDGP, 2, Serialized)
        {
            Local7 = One
            Local0 = Arg0
            Local1 = Arg0
            Local0 &= 0xFFFFFFFF
            Local1 >>= 0x20
            If (((Local0 & 0xFF) == One))
            {
                Local7 = \_SB.CGRD (Local1, Arg1)
            }

            Return (Local7)
        }
    }

    Scope (\_SB)
    {
        Method (TBFP, 2, NotSerialized)
        {
            If (Arg0)
            {
                If ((Arg1 == One))
                {
                    CGWR (FPG0, FP0L)
                }
                Else
                {
                    CGWR (FPG1, FP1L)
                }
            }
            ElseIf ((Arg1 == One))
            {
                CGWR (FPG0, !FP0L)
            }
            Else
            {
                CGWR (FPG1, !FP1L)
            }
        }

        Device (WMTF)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "TBFP")  // _UID: Unique ID
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */  0x48, 0xFD, 0xCC, 0x86, 0x5E, 0x20, 0x77, 0x4A,  // H...^ wJ
                /* 0008 */  0x9C, 0x48, 0x20, 0x21, 0xCB, 0xED, 0xE3, 0x41,  // .H !...A
                /* 0010 */  0x54, 0x46, 0x01, 0x02                           // TF..
            })
            Method (WMTF, 3, NotSerialized)
            {
                CreateByteField (Arg2, Zero, FP)
                If (FP)
                {
                    TBFP (One, One)
                }
                Else
                {
                    TBFP (Zero, One)
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == One) || (RPS1 == One))))
    {
        Scope (\_SB.PCI0.RP01.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (TARS) /* \TARS */
            }

            Device (EP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Device (TXHC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x69
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x14))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x15))
                            }
                        }
                    }
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((NEXP == Zero))
                {
                    Debug = " Host router Upstream port _PS3"
                    Acquire (OSUM, 0xFFFF)
                    Local0 = MMTB (RPS0, RPT0)
                    \_GPE.SXST (Local0)
                    Release (OSUM)
                }
            }
        }

        Scope (\_SB.PCI0.RP01)
        {
            If ((\RTBT == One))
            {
                Name (G2SD, Zero)
                Name (RSTF, Zero)
                Name (WKEN, Zero)
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (RSTG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Method (DINI, 0, NotSerialized)
                {
                    ADBG ("DINI")
                    ADBG (Concatenate ("Reset pin=", ToHexString (RSG0)))
                    ADBG (Concatenate ("Reset pin level = ", ToHexString (RS0L)))
                    RSTG [Zero] = RSG0 /* \RSG0 */
                    RSTG [One] = RS0L /* \RS0L */
                    ADBG (Concatenate ("power pin=", ToHexString (TWRP)))
                    ADBG (Concatenate ("power pin level = ", ToHexString (TWRA)))
                    PWRG [Zero] = TWRP /* \TWRP */
                    PWRG [One] = TWRA /* \TWRA */
                    ADBG ("DINI End")
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg0 =", ToHexString (Arg0)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg1 =", ToHexString (Arg1)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg2 =", ToHexString (Arg2)))
                    If ((Arg1 >= One))
                    {
                        WKEN = Zero
                        TOFF = 0x02
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 2")
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                        TOFF = One
                        ADBG ("WKEN = 1")
                        ADBG ("TOFF = 1")
                    }
                    Else
                    {
                        WKEN = Zero
                        TOFF = Zero
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 0")
                    }
                }

                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXP._STA")
                        DINI ()
                        Return (PSTA ())
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXP._ON")
                        TRDO = One
                        PON ()
                        TRDO = Zero
                        ADBG ("PXP._ON END")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXP._OFF")
                        TRD3 = One
                        POFF ()
                        TRD3 = Zero
                        ADBG ("PXP._OFF END")
                    }
                }

                Method (PSTA, 0, NotSerialized)
                {
                    If ((RSTF == One))
                    {
                        ADBG ("PSTA return 0")
                        Return (Zero)
                    }
                    Else
                    {
                        ADBG ("PSTA return 1")
                        Return (One)
                    }
                }

                Method (SXEX, 0, Serialized)
                {
                    ADBG ("SXEX")
                    Local7 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local7, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    Local1 = 0xC8
                    P2TB = 0x09
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP01.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("SXEX Fail")
                            Return (Zero)
                        }

                        If ((Local2 & One))
                        {
                            Break
                        }

                        Sleep (0x05)
                    }

                    P2TB = Zero
                    Local1 = 0x01F4
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP01.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("Device gone")
                            Return (Zero)
                        }

                        If ((DIVI != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    ADBG ("SXEX END")
                }

                Method (PON, 0, NotSerialized)
                {
                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (\RPS0, \RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    If (TBPE)
                    {
                        ADBG ("TBPE = 1")
                        Return (Zero)
                    }

                    G2SD = Zero
                    If (CondRefOf (PWRG))
                    {
                        \PIN.ON (PWRG)
                        Sleep (0x64)
                        ADBG ("Power pin ON")
                    }

                    \PIN.OFF (RSTG)
                    RSTF = Zero
                    ADBG ("Reset pin Off")
                    If ((NCB7 != One))
                    {
                        ADBG ("NCB7 != 1")
                        Return (Zero)
                    }

                    DPGE = Zero
                    L2TR = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TR)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("set L23_Rdy to Detect Transition")
                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP01.PON_.PSD0 */
                    PSD0 = Zero
                    Local2 = 0x14
                    While ((Local2 > Zero))
                    {
                        Local2 = (Local2 - One)
                        Local3 = TB2P /* \_SB_.PCI0.RP01.PON_.TB2P */
                        If ((Local3 != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local2 <= Zero)){}
                    SXEX ()
                    PSD0 = Local1
                    If (CondRefOf (PDON))
                    {
                        PDON ()
                    }
                }

                Method (POFF, 0, NotSerialized)
                {
                    If ((TOFF == Zero))
                    {
                        ADBG ("TOFF == 0")
                        Return (Zero)
                    }

                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    ADBG (Concatenate ("VDID =", ToHexString (VDID)))
                    Local6 += 0x00108000
                    OperationRegion (DSP0, SystemMemory, Local6, 0x0100)
                    Field (DSP0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI0,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS0,   1
                    }

                    Local6 += 0x00018000
                    OperationRegion (DSP1, SystemMemory, Local6, 0x0100)
                    Field (DSP1, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI1,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS1,   1
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP01.POFF.PSD0 */
                    PSD0 = Zero
                    Local3 = P2TB /* \_SB_.PCI0.RP01.POFF.P2TB */
                    If ((TOFF > One))
                    {
                        TOFF = Zero
                        Sleep (0x0A)
                        PSD0 = Local1
                        RSTF = One
                        ADBG ("TOFF > 1")
                        Return (Zero)
                    }

                    TOFF = Zero
                    Sleep (0x0A)
                    Local6 = TBPS /* \_SB_.PCI0.RP01.POFF.TBPS */
                    TBPS = Zero
                    Sleep (0x0A)
                    Local2 = PDS0 /* \_SB_.PCI0.RP01.POFF.PDS0 */
                    Local3 = PDS1 /* \_SB_.PCI0.RP01.POFF.PDS1 */
                    TBPS = Local6
                    PSD0 = Local1
                    L2TE = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TE)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("Set L23_Rdy Entry")
                    NCB7 = One
                    \PIN.ON (RSTG)
                    RSTF = One
                    ADBG ("Reset pin ON")
                    Sleep (0x0A)
                    If (CondRefOf (PWRG))
                    {
                        If (CondRefOf (WAKP))
                        {
                            ADBG (Concatenate ("WAKP =", ToHexString (WAKP)))
                            ADBG (Concatenate ("WKEN =", ToHexString (WKEN)))
                            If (((WAKP == Zero) || !WKEN))
                            {
                                If (CondRefOf (PCPB))
                                {
                                    If ((PCPB != Zero))
                                    {
                                        \PIN.OFF (PWRG)
                                    }
                                }
                                Else
                                {
                                    \PIN.OFF (PWRG)
                                    ADBG ("Power pin Off")
                                }
                            }
                        }
                        ElseIf (CondRefOf (PCPB))
                        {
                            If ((PCPB != Zero))
                            {
                                \PIN.OFF (PWRG)
                            }
                        }
                        Else
                        {
                            \PIN.OFF (PWRG)
                            ADBG ("Power pin Off")
                        }
                    }

                    If (CondRefOf (TWAP))
                    {
                        If (((TWAP != Zero) && WKEN))
                        {
                            ADBG ("Enable Wake")
                            \_SB.SHPO (TWAP, Zero)
                        }
                    }

                    TBPE = Zero
                    Local6 = \TBOD
                    Local7 = (Local6 & 0x7FFF)
                    Local6 &= 0x8000
                    If ((Local6 == Zero))
                    {
                        Sleep (\TBOD)
                    }
                    ElseIf (((Local2 == One) || (Local3 == One)))
                    {
                        Sleep (Local7)
                    }
                    Else
                    {
                        Sleep (0x03E8)
                    }

                    ADBG (Concatenate ("HPSX_End=", ToHexString (HPSX)))
                    ADBG (Concatenate ("PMSX_End=", ToHexString (PMSX)))
                    If (CondRefOf (PDOF))
                    {
                        If (PSON)
                        {
                            PDOF ()
                        }
                    }
                }

                Method (NFRP, 0, Serialized)
                {
                    Local0 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (TBDA, SystemMemory, Local0, 0xE0)
                    Field (TBDA, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0xD8), 
                            ,   30, 
                        HPSE,   1, 
                        PMSE,   1, 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    If ((TBTS == One))
                    {
                        HPSE = Zero
                        PMSE = Zero
                        Notify (^, Zero) // Bus Check
                        If ((PMSX == One))
                        {
                            Local2 = One
                        }

                        Notify (^, 0x02) // Device Wake
                        Local1 = One
                    }

                    If ((Local1 == One))
                    {
                        HPSX = One
                        If ((Local2 == One))
                        {
                            PMSX = One
                        }
                    }
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    ADBG ("_PR0")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    ADBG ("_PR3")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            Method (TBNF, 0, NotSerialized)
            {
                Notify (\_SB.PCI0.RP01, 0x02) // Device Wake
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If ((\RTBT == One))
                {
                    ADBG ("TBT RTD3 _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
                Else
                {
                    ADBG ("TBT _DSD")
                    Return (Package (0x02)
                    {
                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x02) || (RPS1 == 0x02))))
    {
        Scope (\_SB.PCI0.RP02.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (TARS) /* \TARS */
            }

            Device (EP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Device (TXHC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x69
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x14))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x15))
                            }
                        }
                    }
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((NEXP == Zero))
                {
                    Debug = " Host router Upstream port _PS3"
                    Acquire (OSUM, 0xFFFF)
                    Local0 = MMTB (RPS0, RPT0)
                    \_GPE.SXST (Local0)
                    Release (OSUM)
                }
            }
        }

        Scope (\_SB.PCI0.RP02)
        {
            If ((\RTBT == One))
            {
                Name (G2SD, Zero)
                Name (RSTF, Zero)
                Name (WKEN, Zero)
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (RSTG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Method (DINI, 0, NotSerialized)
                {
                    ADBG ("DINI")
                    ADBG (Concatenate ("Reset pin=", ToHexString (RSG0)))
                    ADBG (Concatenate ("Reset pin level = ", ToHexString (RS0L)))
                    RSTG [Zero] = RSG0 /* \RSG0 */
                    RSTG [One] = RS0L /* \RS0L */
                    ADBG (Concatenate ("power pin=", ToHexString (TWRP)))
                    ADBG (Concatenate ("power pin level = ", ToHexString (TWRA)))
                    PWRG [Zero] = TWRP /* \TWRP */
                    PWRG [One] = TWRA /* \TWRA */
                    ADBG ("DINI End")
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg0 =", ToHexString (Arg0)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg1 =", ToHexString (Arg1)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg2 =", ToHexString (Arg2)))
                    If ((Arg1 >= One))
                    {
                        WKEN = Zero
                        TOFF = 0x02
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 2")
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                        TOFF = One
                        ADBG ("WKEN = 1")
                        ADBG ("TOFF = 1")
                    }
                    Else
                    {
                        WKEN = Zero
                        TOFF = Zero
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 0")
                    }
                }

                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXP._STA")
                        DINI ()
                        Return (PSTA ())
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXP._ON")
                        TRDO = One
                        PON ()
                        TRDO = Zero
                        ADBG ("PXP._ON END")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXP._OFF")
                        TRD3 = One
                        POFF ()
                        TRD3 = Zero
                        ADBG ("PXP._OFF END")
                    }
                }

                Method (PSTA, 0, NotSerialized)
                {
                    If ((RSTF == One))
                    {
                        ADBG ("PSTA return 0")
                        Return (Zero)
                    }
                    Else
                    {
                        ADBG ("PSTA return 1")
                        Return (One)
                    }
                }

                Method (SXEX, 0, Serialized)
                {
                    ADBG ("SXEX")
                    Local7 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local7, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    Local1 = 0xC8
                    P2TB = 0x09
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP02.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("SXEX Fail")
                            Return (Zero)
                        }

                        If ((Local2 & One))
                        {
                            Break
                        }

                        Sleep (0x05)
                    }

                    P2TB = Zero
                    Local1 = 0x01F4
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP02.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("Device gone")
                            Return (Zero)
                        }

                        If ((DIVI != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    ADBG ("SXEX END")
                }

                Method (PON, 0, NotSerialized)
                {
                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (\RPS0, \RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    If (TBPE)
                    {
                        ADBG ("TBPE = 1")
                        Return (Zero)
                    }

                    G2SD = Zero
                    If (CondRefOf (PWRG))
                    {
                        \PIN.ON (PWRG)
                        Sleep (0x64)
                        ADBG ("Power pin ON")
                    }

                    \PIN.OFF (RSTG)
                    RSTF = Zero
                    ADBG ("Reset pin Off")
                    If ((NCB7 != One))
                    {
                        ADBG ("NCB7 != 1")
                        Return (Zero)
                    }

                    DPGE = Zero
                    L2TR = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TR)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("set L23_Rdy to Detect Transition")
                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP02.PON_.PSD0 */
                    PSD0 = Zero
                    Local2 = 0x14
                    While ((Local2 > Zero))
                    {
                        Local2 = (Local2 - One)
                        Local3 = TB2P /* \_SB_.PCI0.RP02.PON_.TB2P */
                        If ((Local3 != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local2 <= Zero)){}
                    SXEX ()
                    PSD0 = Local1
                    If (CondRefOf (PDON))
                    {
                        PDON ()
                    }
                }

                Method (POFF, 0, NotSerialized)
                {
                    If ((TOFF == Zero))
                    {
                        ADBG ("TOFF == 0")
                        Return (Zero)
                    }

                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    ADBG (Concatenate ("VDID =", ToHexString (VDID)))
                    Local6 += 0x00108000
                    OperationRegion (DSP0, SystemMemory, Local6, 0x0100)
                    Field (DSP0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI0,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS0,   1
                    }

                    Local6 += 0x00018000
                    OperationRegion (DSP1, SystemMemory, Local6, 0x0100)
                    Field (DSP1, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI1,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS1,   1
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP02.POFF.PSD0 */
                    PSD0 = Zero
                    Local3 = P2TB /* \_SB_.PCI0.RP02.POFF.P2TB */
                    If ((TOFF > One))
                    {
                        TOFF = Zero
                        Sleep (0x0A)
                        PSD0 = Local1
                        RSTF = One
                        ADBG ("TOFF > 1")
                        Return (Zero)
                    }

                    TOFF = Zero
                    Sleep (0x0A)
                    Local6 = TBPS /* \_SB_.PCI0.RP02.POFF.TBPS */
                    TBPS = Zero
                    Sleep (0x0A)
                    Local2 = PDS0 /* \_SB_.PCI0.RP02.POFF.PDS0 */
                    Local3 = PDS1 /* \_SB_.PCI0.RP02.POFF.PDS1 */
                    TBPS = Local6
                    PSD0 = Local1
                    L2TE = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TE)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("Set L23_Rdy Entry")
                    NCB7 = One
                    \PIN.ON (RSTG)
                    RSTF = One
                    ADBG ("Reset pin ON")
                    Sleep (0x0A)
                    If (CondRefOf (PWRG))
                    {
                        If (CondRefOf (WAKP))
                        {
                            ADBG (Concatenate ("WAKP =", ToHexString (WAKP)))
                            ADBG (Concatenate ("WKEN =", ToHexString (WKEN)))
                            If (((WAKP == Zero) || !WKEN))
                            {
                                If (CondRefOf (PCPB))
                                {
                                    If ((PCPB != Zero))
                                    {
                                        \PIN.OFF (PWRG)
                                    }
                                }
                                Else
                                {
                                    \PIN.OFF (PWRG)
                                    ADBG ("Power pin Off")
                                }
                            }
                        }
                        ElseIf (CondRefOf (PCPB))
                        {
                            If ((PCPB != Zero))
                            {
                                \PIN.OFF (PWRG)
                            }
                        }
                        Else
                        {
                            \PIN.OFF (PWRG)
                            ADBG ("Power pin Off")
                        }
                    }

                    If (CondRefOf (TWAP))
                    {
                        If (((TWAP != Zero) && WKEN))
                        {
                            ADBG ("Enable Wake")
                            \_SB.SHPO (TWAP, Zero)
                        }
                    }

                    TBPE = Zero
                    Local6 = \TBOD
                    Local7 = (Local6 & 0x7FFF)
                    Local6 &= 0x8000
                    If ((Local6 == Zero))
                    {
                        Sleep (\TBOD)
                    }
                    ElseIf (((Local2 == One) || (Local3 == One)))
                    {
                        Sleep (Local7)
                    }
                    Else
                    {
                        Sleep (0x03E8)
                    }

                    ADBG (Concatenate ("HPSX_End=", ToHexString (HPSX)))
                    ADBG (Concatenate ("PMSX_End=", ToHexString (PMSX)))
                    If (CondRefOf (PDOF))
                    {
                        If (PSON)
                        {
                            PDOF ()
                        }
                    }
                }

                Method (NFRP, 0, Serialized)
                {
                    Local0 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (TBDA, SystemMemory, Local0, 0xE0)
                    Field (TBDA, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0xD8), 
                            ,   30, 
                        HPSE,   1, 
                        PMSE,   1, 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    If ((TBTS == One))
                    {
                        HPSE = Zero
                        PMSE = Zero
                        Notify (^, Zero) // Bus Check
                        If ((PMSX == One))
                        {
                            Local2 = One
                        }

                        Notify (^, 0x02) // Device Wake
                        Local1 = One
                    }

                    If ((Local1 == One))
                    {
                        HPSX = One
                        If ((Local2 == One))
                        {
                            PMSX = One
                        }
                    }
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    ADBG ("_PR0")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    ADBG ("_PR3")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            Method (TBNF, 0, NotSerialized)
            {
                Notify (\_SB.PCI0.RP02, 0x02) // Device Wake
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If ((\RTBT == One))
                {
                    ADBG ("TBT RTD3 _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
                Else
                {
                    ADBG ("TBT _DSD")
                    Return (Package (0x02)
                    {
                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x03) || (RPS1 == 0x03))))
    {
        Scope (\_SB.PCI0.RP03.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (TARS) /* \TARS */
            }

            Device (EP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Device (TXHC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x69
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x14))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x15))
                            }
                        }
                    }
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((NEXP == Zero))
                {
                    Debug = " Host router Upstream port _PS3"
                    Acquire (OSUM, 0xFFFF)
                    Local0 = MMTB (RPS0, RPT0)
                    \_GPE.SXST (Local0)
                    Release (OSUM)
                }
            }
        }

        Scope (\_SB.PCI0.RP03)
        {
            If ((\RTBT == One))
            {
                Name (G2SD, Zero)
                Name (RSTF, Zero)
                Name (WKEN, Zero)
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (RSTG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Method (DINI, 0, NotSerialized)
                {
                    ADBG ("DINI")
                    ADBG (Concatenate ("Reset pin=", ToHexString (RSG0)))
                    ADBG (Concatenate ("Reset pin level = ", ToHexString (RS0L)))
                    RSTG [Zero] = RSG0 /* \RSG0 */
                    RSTG [One] = RS0L /* \RS0L */
                    ADBG (Concatenate ("power pin=", ToHexString (TWRP)))
                    ADBG (Concatenate ("power pin level = ", ToHexString (TWRA)))
                    PWRG [Zero] = TWRP /* \TWRP */
                    PWRG [One] = TWRA /* \TWRA */
                    ADBG ("DINI End")
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg0 =", ToHexString (Arg0)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg1 =", ToHexString (Arg1)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg2 =", ToHexString (Arg2)))
                    If ((Arg1 >= One))
                    {
                        WKEN = Zero
                        TOFF = 0x02
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 2")
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                        TOFF = One
                        ADBG ("WKEN = 1")
                        ADBG ("TOFF = 1")
                    }
                    Else
                    {
                        WKEN = Zero
                        TOFF = Zero
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 0")
                    }
                }

                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXP._STA")
                        DINI ()
                        Return (PSTA ())
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXP._ON")
                        TRDO = One
                        PON ()
                        TRDO = Zero
                        ADBG ("PXP._ON END")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXP._OFF")
                        TRD3 = One
                        POFF ()
                        TRD3 = Zero
                        ADBG ("PXP._OFF END")
                    }
                }

                Method (PSTA, 0, NotSerialized)
                {
                    If ((RSTF == One))
                    {
                        ADBG ("PSTA return 0")
                        Return (Zero)
                    }
                    Else
                    {
                        ADBG ("PSTA return 1")
                        Return (One)
                    }
                }

                Method (SXEX, 0, Serialized)
                {
                    ADBG ("SXEX")
                    Local7 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local7, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    Local1 = 0xC8
                    P2TB = 0x09
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP03.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("SXEX Fail")
                            Return (Zero)
                        }

                        If ((Local2 & One))
                        {
                            Break
                        }

                        Sleep (0x05)
                    }

                    P2TB = Zero
                    Local1 = 0x01F4
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP03.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("Device gone")
                            Return (Zero)
                        }

                        If ((DIVI != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    ADBG ("SXEX END")
                }

                Method (PON, 0, NotSerialized)
                {
                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (\RPS0, \RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    If (TBPE)
                    {
                        ADBG ("TBPE = 1")
                        Return (Zero)
                    }

                    G2SD = Zero
                    If (CondRefOf (PWRG))
                    {
                        \PIN.ON (PWRG)
                        Sleep (0x64)
                        ADBG ("Power pin ON")
                    }

                    \PIN.OFF (RSTG)
                    RSTF = Zero
                    ADBG ("Reset pin Off")
                    If ((NCB7 != One))
                    {
                        ADBG ("NCB7 != 1")
                        Return (Zero)
                    }

                    DPGE = Zero
                    L2TR = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TR)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("set L23_Rdy to Detect Transition")
                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP03.PON_.PSD0 */
                    PSD0 = Zero
                    Local2 = 0x14
                    While ((Local2 > Zero))
                    {
                        Local2 = (Local2 - One)
                        Local3 = TB2P /* \_SB_.PCI0.RP03.PON_.TB2P */
                        If ((Local3 != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local2 <= Zero)){}
                    SXEX ()
                    PSD0 = Local1
                    If (CondRefOf (PDON))
                    {
                        PDON ()
                    }
                }

                Method (POFF, 0, NotSerialized)
                {
                    If ((TOFF == Zero))
                    {
                        ADBG ("TOFF == 0")
                        Return (Zero)
                    }

                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    ADBG (Concatenate ("VDID =", ToHexString (VDID)))
                    Local6 += 0x00108000
                    OperationRegion (DSP0, SystemMemory, Local6, 0x0100)
                    Field (DSP0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI0,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS0,   1
                    }

                    Local6 += 0x00018000
                    OperationRegion (DSP1, SystemMemory, Local6, 0x0100)
                    Field (DSP1, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI1,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS1,   1
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP03.POFF.PSD0 */
                    PSD0 = Zero
                    Local3 = P2TB /* \_SB_.PCI0.RP03.POFF.P2TB */
                    If ((TOFF > One))
                    {
                        TOFF = Zero
                        Sleep (0x0A)
                        PSD0 = Local1
                        RSTF = One
                        ADBG ("TOFF > 1")
                        Return (Zero)
                    }

                    TOFF = Zero
                    Sleep (0x0A)
                    Local6 = TBPS /* \_SB_.PCI0.RP03.POFF.TBPS */
                    TBPS = Zero
                    Sleep (0x0A)
                    Local2 = PDS0 /* \_SB_.PCI0.RP03.POFF.PDS0 */
                    Local3 = PDS1 /* \_SB_.PCI0.RP03.POFF.PDS1 */
                    TBPS = Local6
                    PSD0 = Local1
                    L2TE = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TE)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("Set L23_Rdy Entry")
                    NCB7 = One
                    \PIN.ON (RSTG)
                    RSTF = One
                    ADBG ("Reset pin ON")
                    Sleep (0x0A)
                    If (CondRefOf (PWRG))
                    {
                        If (CondRefOf (WAKP))
                        {
                            ADBG (Concatenate ("WAKP =", ToHexString (WAKP)))
                            ADBG (Concatenate ("WKEN =", ToHexString (WKEN)))
                            If (((WAKP == Zero) || !WKEN))
                            {
                                If (CondRefOf (PCPB))
                                {
                                    If ((PCPB != Zero))
                                    {
                                        \PIN.OFF (PWRG)
                                    }
                                }
                                Else
                                {
                                    \PIN.OFF (PWRG)
                                    ADBG ("Power pin Off")
                                }
                            }
                        }
                        ElseIf (CondRefOf (PCPB))
                        {
                            If ((PCPB != Zero))
                            {
                                \PIN.OFF (PWRG)
                            }
                        }
                        Else
                        {
                            \PIN.OFF (PWRG)
                            ADBG ("Power pin Off")
                        }
                    }

                    If (CondRefOf (TWAP))
                    {
                        If (((TWAP != Zero) && WKEN))
                        {
                            ADBG ("Enable Wake")
                            \_SB.SHPO (TWAP, Zero)
                        }
                    }

                    TBPE = Zero
                    Local6 = \TBOD
                    Local7 = (Local6 & 0x7FFF)
                    Local6 &= 0x8000
                    If ((Local6 == Zero))
                    {
                        Sleep (\TBOD)
                    }
                    ElseIf (((Local2 == One) || (Local3 == One)))
                    {
                        Sleep (Local7)
                    }
                    Else
                    {
                        Sleep (0x03E8)
                    }

                    ADBG (Concatenate ("HPSX_End=", ToHexString (HPSX)))
                    ADBG (Concatenate ("PMSX_End=", ToHexString (PMSX)))
                    If (CondRefOf (PDOF))
                    {
                        If (PSON)
                        {
                            PDOF ()
                        }
                    }
                }

                Method (NFRP, 0, Serialized)
                {
                    Local0 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (TBDA, SystemMemory, Local0, 0xE0)
                    Field (TBDA, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0xD8), 
                            ,   30, 
                        HPSE,   1, 
                        PMSE,   1, 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    If ((TBTS == One))
                    {
                        HPSE = Zero
                        PMSE = Zero
                        Notify (^, Zero) // Bus Check
                        If ((PMSX == One))
                        {
                            Local2 = One
                        }

                        Notify (^, 0x02) // Device Wake
                        Local1 = One
                    }

                    If ((Local1 == One))
                    {
                        HPSX = One
                        If ((Local2 == One))
                        {
                            PMSX = One
                        }
                    }
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    ADBG ("_PR0")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    ADBG ("_PR3")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            Method (TBNF, 0, NotSerialized)
            {
                Notify (\_SB.PCI0.RP03, 0x02) // Device Wake
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If ((\RTBT == One))
                {
                    ADBG ("TBT RTD3 _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
                Else
                {
                    ADBG ("TBT _DSD")
                    Return (Package (0x02)
                    {
                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x04) || (RPS1 == 0x04))))
    {
        Scope (\_SB.PCI0.RP04.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (TARS) /* \TARS */
            }

            Device (EP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Device (TXHC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x69
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x14))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x15))
                            }
                        }
                    }
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((NEXP == Zero))
                {
                    Debug = " Host router Upstream port _PS3"
                    Acquire (OSUM, 0xFFFF)
                    Local0 = MMTB (RPS0, RPT0)
                    \_GPE.SXST (Local0)
                    Release (OSUM)
                }
            }
        }

        Scope (\_SB.PCI0.RP04)
        {
            If ((\RTBT == One))
            {
                Name (G2SD, Zero)
                Name (RSTF, Zero)
                Name (WKEN, Zero)
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (RSTG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Method (DINI, 0, NotSerialized)
                {
                    ADBG ("DINI")
                    ADBG (Concatenate ("Reset pin=", ToHexString (RSG0)))
                    ADBG (Concatenate ("Reset pin level = ", ToHexString (RS0L)))
                    RSTG [Zero] = RSG0 /* \RSG0 */
                    RSTG [One] = RS0L /* \RS0L */
                    ADBG (Concatenate ("power pin=", ToHexString (TWRP)))
                    ADBG (Concatenate ("power pin level = ", ToHexString (TWRA)))
                    PWRG [Zero] = TWRP /* \TWRP */
                    PWRG [One] = TWRA /* \TWRA */
                    ADBG ("DINI End")
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg0 =", ToHexString (Arg0)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg1 =", ToHexString (Arg1)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg2 =", ToHexString (Arg2)))
                    If ((Arg1 >= One))
                    {
                        WKEN = Zero
                        TOFF = 0x02
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 2")
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                        TOFF = One
                        ADBG ("WKEN = 1")
                        ADBG ("TOFF = 1")
                    }
                    Else
                    {
                        WKEN = Zero
                        TOFF = Zero
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 0")
                    }
                }

                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXP._STA")
                        DINI ()
                        Return (PSTA ())
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXP._ON")
                        TRDO = One
                        PON ()
                        TRDO = Zero
                        ADBG ("PXP._ON END")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXP._OFF")
                        TRD3 = One
                        POFF ()
                        TRD3 = Zero
                        ADBG ("PXP._OFF END")
                    }
                }

                Method (PSTA, 0, NotSerialized)
                {
                    If ((RSTF == One))
                    {
                        ADBG ("PSTA return 0")
                        Return (Zero)
                    }
                    Else
                    {
                        ADBG ("PSTA return 1")
                        Return (One)
                    }
                }

                Method (SXEX, 0, Serialized)
                {
                    ADBG ("SXEX")
                    Local7 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local7, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    Local1 = 0xC8
                    P2TB = 0x09
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP04.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("SXEX Fail")
                            Return (Zero)
                        }

                        If ((Local2 & One))
                        {
                            Break
                        }

                        Sleep (0x05)
                    }

                    P2TB = Zero
                    Local1 = 0x01F4
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP04.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("Device gone")
                            Return (Zero)
                        }

                        If ((DIVI != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    ADBG ("SXEX END")
                }

                Method (PON, 0, NotSerialized)
                {
                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (\RPS0, \RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    If (TBPE)
                    {
                        ADBG ("TBPE = 1")
                        Return (Zero)
                    }

                    G2SD = Zero
                    If (CondRefOf (PWRG))
                    {
                        \PIN.ON (PWRG)
                        Sleep (0x64)
                        ADBG ("Power pin ON")
                    }

                    \PIN.OFF (RSTG)
                    RSTF = Zero
                    ADBG ("Reset pin Off")
                    If ((NCB7 != One))
                    {
                        ADBG ("NCB7 != 1")
                        Return (Zero)
                    }

                    DPGE = Zero
                    L2TR = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TR)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("set L23_Rdy to Detect Transition")
                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP04.PON_.PSD0 */
                    PSD0 = Zero
                    Local2 = 0x14
                    While ((Local2 > Zero))
                    {
                        Local2 = (Local2 - One)
                        Local3 = TB2P /* \_SB_.PCI0.RP04.PON_.TB2P */
                        If ((Local3 != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local2 <= Zero)){}
                    SXEX ()
                    PSD0 = Local1
                    If (CondRefOf (PDON))
                    {
                        PDON ()
                    }
                }

                Method (POFF, 0, NotSerialized)
                {
                    If ((TOFF == Zero))
                    {
                        ADBG ("TOFF == 0")
                        Return (Zero)
                    }

                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    ADBG (Concatenate ("VDID =", ToHexString (VDID)))
                    Local6 += 0x00108000
                    OperationRegion (DSP0, SystemMemory, Local6, 0x0100)
                    Field (DSP0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI0,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS0,   1
                    }

                    Local6 += 0x00018000
                    OperationRegion (DSP1, SystemMemory, Local6, 0x0100)
                    Field (DSP1, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI1,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS1,   1
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP04.POFF.PSD0 */
                    PSD0 = Zero
                    Local3 = P2TB /* \_SB_.PCI0.RP04.POFF.P2TB */
                    If ((TOFF > One))
                    {
                        TOFF = Zero
                        Sleep (0x0A)
                        PSD0 = Local1
                        RSTF = One
                        ADBG ("TOFF > 1")
                        Return (Zero)
                    }

                    TOFF = Zero
                    Sleep (0x0A)
                    Local6 = TBPS /* \_SB_.PCI0.RP04.POFF.TBPS */
                    TBPS = Zero
                    Sleep (0x0A)
                    Local2 = PDS0 /* \_SB_.PCI0.RP04.POFF.PDS0 */
                    Local3 = PDS1 /* \_SB_.PCI0.RP04.POFF.PDS1 */
                    TBPS = Local6
                    PSD0 = Local1
                    L2TE = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TE)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("Set L23_Rdy Entry")
                    NCB7 = One
                    \PIN.ON (RSTG)
                    RSTF = One
                    ADBG ("Reset pin ON")
                    Sleep (0x0A)
                    If (CondRefOf (PWRG))
                    {
                        If (CondRefOf (WAKP))
                        {
                            ADBG (Concatenate ("WAKP =", ToHexString (WAKP)))
                            ADBG (Concatenate ("WKEN =", ToHexString (WKEN)))
                            If (((WAKP == Zero) || !WKEN))
                            {
                                If (CondRefOf (PCPB))
                                {
                                    If ((PCPB != Zero))
                                    {
                                        \PIN.OFF (PWRG)
                                    }
                                }
                                Else
                                {
                                    \PIN.OFF (PWRG)
                                    ADBG ("Power pin Off")
                                }
                            }
                        }
                        ElseIf (CondRefOf (PCPB))
                        {
                            If ((PCPB != Zero))
                            {
                                \PIN.OFF (PWRG)
                            }
                        }
                        Else
                        {
                            \PIN.OFF (PWRG)
                            ADBG ("Power pin Off")
                        }
                    }

                    If (CondRefOf (TWAP))
                    {
                        If (((TWAP != Zero) && WKEN))
                        {
                            ADBG ("Enable Wake")
                            \_SB.SHPO (TWAP, Zero)
                        }
                    }

                    TBPE = Zero
                    Local6 = \TBOD
                    Local7 = (Local6 & 0x7FFF)
                    Local6 &= 0x8000
                    If ((Local6 == Zero))
                    {
                        Sleep (\TBOD)
                    }
                    ElseIf (((Local2 == One) || (Local3 == One)))
                    {
                        Sleep (Local7)
                    }
                    Else
                    {
                        Sleep (0x03E8)
                    }

                    ADBG (Concatenate ("HPSX_End=", ToHexString (HPSX)))
                    ADBG (Concatenate ("PMSX_End=", ToHexString (PMSX)))
                    If (CondRefOf (PDOF))
                    {
                        If (PSON)
                        {
                            PDOF ()
                        }
                    }
                }

                Method (NFRP, 0, Serialized)
                {
                    Local0 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (TBDA, SystemMemory, Local0, 0xE0)
                    Field (TBDA, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0xD8), 
                            ,   30, 
                        HPSE,   1, 
                        PMSE,   1, 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    If ((TBTS == One))
                    {
                        HPSE = Zero
                        PMSE = Zero
                        Notify (^, Zero) // Bus Check
                        If ((PMSX == One))
                        {
                            Local2 = One
                        }

                        Notify (^, 0x02) // Device Wake
                        Local1 = One
                    }

                    If ((Local1 == One))
                    {
                        HPSX = One
                        If ((Local2 == One))
                        {
                            PMSX = One
                        }
                    }
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    ADBG ("_PR0")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    ADBG ("_PR3")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            Method (TBNF, 0, NotSerialized)
            {
                Notify (\_SB.PCI0.RP04, 0x02) // Device Wake
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If ((\RTBT == One))
                {
                    ADBG ("TBT RTD3 _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
                Else
                {
                    ADBG ("TBT _DSD")
                    Return (Package (0x02)
                    {
                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x05) || (RPS1 == 0x05))))
    {
        Scope (\_SB.PCI0.RP05.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (TARS) /* \TARS */
            }

            Device (EP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Device (TXHC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x69
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x14))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x15))
                            }
                        }
                    }
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((NEXP == Zero))
                {
                    Debug = " Host router Upstream port _PS3"
                    Acquire (OSUM, 0xFFFF)
                    Local0 = MMTB (RPS0, RPT0)
                    \_GPE.SXST (Local0)
                    Release (OSUM)
                }
            }
        }

        Scope (\_SB.PCI0.RP05)
        {
            If ((\RTBT == One))
            {
                Name (G2SD, Zero)
                Name (RSTF, Zero)
                Name (WKEN, Zero)
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (RSTG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Method (DINI, 0, NotSerialized)
                {
                    ADBG ("DINI")
                    ADBG (Concatenate ("Reset pin=", ToHexString (RSG0)))
                    ADBG (Concatenate ("Reset pin level = ", ToHexString (RS0L)))
                    RSTG [Zero] = RSG0 /* \RSG0 */
                    RSTG [One] = RS0L /* \RS0L */
                    ADBG (Concatenate ("power pin=", ToHexString (TWRP)))
                    ADBG (Concatenate ("power pin level = ", ToHexString (TWRA)))
                    PWRG [Zero] = TWRP /* \TWRP */
                    PWRG [One] = TWRA /* \TWRA */
                    ADBG ("DINI End")
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg0 =", ToHexString (Arg0)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg1 =", ToHexString (Arg1)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg2 =", ToHexString (Arg2)))
                    If ((Arg1 >= One))
                    {
                        WKEN = Zero
                        TOFF = 0x02
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 2")
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                        TOFF = One
                        ADBG ("WKEN = 1")
                        ADBG ("TOFF = 1")
                    }
                    Else
                    {
                        WKEN = Zero
                        TOFF = Zero
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 0")
                    }
                }

                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXP._STA")
                        DINI ()
                        Return (PSTA ())
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXP._ON")
                        TRDO = One
                        PON ()
                        TRDO = Zero
                        ADBG ("PXP._ON END")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXP._OFF")
                        TRD3 = One
                        POFF ()
                        TRD3 = Zero
                        ADBG ("PXP._OFF END")
                    }
                }

                Method (PSTA, 0, NotSerialized)
                {
                    If ((RSTF == One))
                    {
                        ADBG ("PSTA return 0")
                        Return (Zero)
                    }
                    Else
                    {
                        ADBG ("PSTA return 1")
                        Return (One)
                    }
                }

                Method (SXEX, 0, Serialized)
                {
                    ADBG ("SXEX")
                    Local7 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local7, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    Local1 = 0xC8
                    P2TB = 0x09
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP05.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("SXEX Fail")
                            Return (Zero)
                        }

                        If ((Local2 & One))
                        {
                            Break
                        }

                        Sleep (0x05)
                    }

                    P2TB = Zero
                    Local1 = 0x01F4
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP05.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("Device gone")
                            Return (Zero)
                        }

                        If ((DIVI != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    ADBG ("SXEX END")
                }

                Method (PON, 0, NotSerialized)
                {
                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (\RPS0, \RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    If (TBPE)
                    {
                        ADBG ("TBPE = 1")
                        Return (Zero)
                    }

                    G2SD = Zero
                    If (CondRefOf (PWRG))
                    {
                        \PIN.ON (PWRG)
                        Sleep (0x64)
                        ADBG ("Power pin ON")
                    }

                    \PIN.OFF (RSTG)
                    RSTF = Zero
                    ADBG ("Reset pin Off")
                    If ((NCB7 != One))
                    {
                        ADBG ("NCB7 != 1")
                        Return (Zero)
                    }

                    DPGE = Zero
                    L2TR = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TR)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("set L23_Rdy to Detect Transition")
                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP05.PON_.PSD0 */
                    PSD0 = Zero
                    Local2 = 0x14
                    While ((Local2 > Zero))
                    {
                        Local2 = (Local2 - One)
                        Local3 = TB2P /* \_SB_.PCI0.RP05.PON_.TB2P */
                        If ((Local3 != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local2 <= Zero)){}
                    SXEX ()
                    PSD0 = Local1
                    If (CondRefOf (PDON))
                    {
                        PDON ()
                    }
                }

                Method (POFF, 0, NotSerialized)
                {
                    If ((TOFF == Zero))
                    {
                        ADBG ("TOFF == 0")
                        Return (Zero)
                    }

                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    ADBG (Concatenate ("VDID =", ToHexString (VDID)))
                    Local6 += 0x00108000
                    OperationRegion (DSP0, SystemMemory, Local6, 0x0100)
                    Field (DSP0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI0,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS0,   1
                    }

                    Local6 += 0x00018000
                    OperationRegion (DSP1, SystemMemory, Local6, 0x0100)
                    Field (DSP1, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI1,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS1,   1
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP05.POFF.PSD0 */
                    PSD0 = Zero
                    Local3 = P2TB /* \_SB_.PCI0.RP05.POFF.P2TB */
                    If ((TOFF > One))
                    {
                        TOFF = Zero
                        Sleep (0x0A)
                        PSD0 = Local1
                        RSTF = One
                        ADBG ("TOFF > 1")
                        Return (Zero)
                    }

                    TOFF = Zero
                    Sleep (0x0A)
                    Local6 = TBPS /* \_SB_.PCI0.RP05.POFF.TBPS */
                    TBPS = Zero
                    Sleep (0x0A)
                    Local2 = PDS0 /* \_SB_.PCI0.RP05.POFF.PDS0 */
                    Local3 = PDS1 /* \_SB_.PCI0.RP05.POFF.PDS1 */
                    TBPS = Local6
                    PSD0 = Local1
                    L2TE = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TE)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("Set L23_Rdy Entry")
                    NCB7 = One
                    \PIN.ON (RSTG)
                    RSTF = One
                    ADBG ("Reset pin ON")
                    Sleep (0x0A)
                    If (CondRefOf (PWRG))
                    {
                        If (CondRefOf (WAKP))
                        {
                            ADBG (Concatenate ("WAKP =", ToHexString (WAKP)))
                            ADBG (Concatenate ("WKEN =", ToHexString (WKEN)))
                            If (((WAKP == Zero) || !WKEN))
                            {
                                If (CondRefOf (PCPB))
                                {
                                    If ((PCPB != Zero))
                                    {
                                        \PIN.OFF (PWRG)
                                    }
                                }
                                Else
                                {
                                    \PIN.OFF (PWRG)
                                    ADBG ("Power pin Off")
                                }
                            }
                        }
                        ElseIf (CondRefOf (PCPB))
                        {
                            If ((PCPB != Zero))
                            {
                                \PIN.OFF (PWRG)
                            }
                        }
                        Else
                        {
                            \PIN.OFF (PWRG)
                            ADBG ("Power pin Off")
                        }
                    }

                    If (CondRefOf (TWAP))
                    {
                        If (((TWAP != Zero) && WKEN))
                        {
                            ADBG ("Enable Wake")
                            \_SB.SHPO (TWAP, Zero)
                        }
                    }

                    TBPE = Zero
                    Local6 = \TBOD
                    Local7 = (Local6 & 0x7FFF)
                    Local6 &= 0x8000
                    If ((Local6 == Zero))
                    {
                        Sleep (\TBOD)
                    }
                    ElseIf (((Local2 == One) || (Local3 == One)))
                    {
                        Sleep (Local7)
                    }
                    Else
                    {
                        Sleep (0x03E8)
                    }

                    ADBG (Concatenate ("HPSX_End=", ToHexString (HPSX)))
                    ADBG (Concatenate ("PMSX_End=", ToHexString (PMSX)))
                    If (CondRefOf (PDOF))
                    {
                        If (PSON)
                        {
                            PDOF ()
                        }
                    }
                }

                Method (NFRP, 0, Serialized)
                {
                    Local0 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (TBDA, SystemMemory, Local0, 0xE0)
                    Field (TBDA, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0xD8), 
                            ,   30, 
                        HPSE,   1, 
                        PMSE,   1, 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    If ((TBTS == One))
                    {
                        HPSE = Zero
                        PMSE = Zero
                        Notify (^, Zero) // Bus Check
                        If ((PMSX == One))
                        {
                            Local2 = One
                        }

                        Notify (^, 0x02) // Device Wake
                        Local1 = One
                    }

                    If ((Local1 == One))
                    {
                        HPSX = One
                        If ((Local2 == One))
                        {
                            PMSX = One
                        }
                    }
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    ADBG ("_PR0")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    ADBG ("_PR3")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            Method (TBNF, 0, NotSerialized)
            {
                Notify (\_SB.PCI0.RP05, 0x02) // Device Wake
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If ((\RTBT == One))
                {
                    ADBG ("TBT RTD3 _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
                Else
                {
                    ADBG ("TBT _DSD")
                    Return (Package (0x02)
                    {
                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x06) || (RPS1 == 0x06))))
    {
        Scope (\_SB.PCI0.RP06.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (TARS) /* \TARS */
            }

            Device (EP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Device (TXHC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x69
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x14))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x15))
                            }
                        }
                    }
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((NEXP == Zero))
                {
                    Debug = " Host router Upstream port _PS3"
                    Acquire (OSUM, 0xFFFF)
                    Local0 = MMTB (RPS0, RPT0)
                    \_GPE.SXST (Local0)
                    Release (OSUM)
                }
            }
        }

        Scope (\_SB.PCI0.RP06)
        {
            If ((\RTBT == One))
            {
                Name (G2SD, Zero)
                Name (RSTF, Zero)
                Name (WKEN, Zero)
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (RSTG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Method (DINI, 0, NotSerialized)
                {
                    ADBG ("DINI")
                    ADBG (Concatenate ("Reset pin=", ToHexString (RSG0)))
                    ADBG (Concatenate ("Reset pin level = ", ToHexString (RS0L)))
                    RSTG [Zero] = RSG0 /* \RSG0 */
                    RSTG [One] = RS0L /* \RS0L */
                    ADBG (Concatenate ("power pin=", ToHexString (TWRP)))
                    ADBG (Concatenate ("power pin level = ", ToHexString (TWRA)))
                    PWRG [Zero] = TWRP /* \TWRP */
                    PWRG [One] = TWRA /* \TWRA */
                    ADBG ("DINI End")
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg0 =", ToHexString (Arg0)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg1 =", ToHexString (Arg1)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg2 =", ToHexString (Arg2)))
                    If ((Arg1 >= One))
                    {
                        WKEN = Zero
                        TOFF = 0x02
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 2")
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                        TOFF = One
                        ADBG ("WKEN = 1")
                        ADBG ("TOFF = 1")
                    }
                    Else
                    {
                        WKEN = Zero
                        TOFF = Zero
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 0")
                    }
                }

                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXP._STA")
                        DINI ()
                        Return (PSTA ())
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXP._ON")
                        TRDO = One
                        PON ()
                        TRDO = Zero
                        ADBG ("PXP._ON END")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXP._OFF")
                        TRD3 = One
                        POFF ()
                        TRD3 = Zero
                        ADBG ("PXP._OFF END")
                    }
                }

                Method (PSTA, 0, NotSerialized)
                {
                    If ((RSTF == One))
                    {
                        ADBG ("PSTA return 0")
                        Return (Zero)
                    }
                    Else
                    {
                        ADBG ("PSTA return 1")
                        Return (One)
                    }
                }

                Method (SXEX, 0, Serialized)
                {
                    ADBG ("SXEX")
                    Local7 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local7, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    Local1 = 0xC8
                    P2TB = 0x09
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP06.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("SXEX Fail")
                            Return (Zero)
                        }

                        If ((Local2 & One))
                        {
                            Break
                        }

                        Sleep (0x05)
                    }

                    P2TB = Zero
                    Local1 = 0x01F4
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP06.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("Device gone")
                            Return (Zero)
                        }

                        If ((DIVI != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    ADBG ("SXEX END")
                }

                Method (PON, 0, NotSerialized)
                {
                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (\RPS0, \RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    If (TBPE)
                    {
                        ADBG ("TBPE = 1")
                        Return (Zero)
                    }

                    G2SD = Zero
                    If (CondRefOf (PWRG))
                    {
                        \PIN.ON (PWRG)
                        Sleep (0x64)
                        ADBG ("Power pin ON")
                    }

                    \PIN.OFF (RSTG)
                    RSTF = Zero
                    ADBG ("Reset pin Off")
                    If ((NCB7 != One))
                    {
                        ADBG ("NCB7 != 1")
                        Return (Zero)
                    }

                    DPGE = Zero
                    L2TR = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TR)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("set L23_Rdy to Detect Transition")
                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP06.PON_.PSD0 */
                    PSD0 = Zero
                    Local2 = 0x14
                    While ((Local2 > Zero))
                    {
                        Local2 = (Local2 - One)
                        Local3 = TB2P /* \_SB_.PCI0.RP06.PON_.TB2P */
                        If ((Local3 != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local2 <= Zero)){}
                    SXEX ()
                    PSD0 = Local1
                    If (CondRefOf (PDON))
                    {
                        PDON ()
                    }
                }

                Method (POFF, 0, NotSerialized)
                {
                    If ((TOFF == Zero))
                    {
                        ADBG ("TOFF == 0")
                        Return (Zero)
                    }

                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    ADBG (Concatenate ("VDID =", ToHexString (VDID)))
                    Local6 += 0x00108000
                    OperationRegion (DSP0, SystemMemory, Local6, 0x0100)
                    Field (DSP0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI0,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS0,   1
                    }

                    Local6 += 0x00018000
                    OperationRegion (DSP1, SystemMemory, Local6, 0x0100)
                    Field (DSP1, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI1,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS1,   1
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP06.POFF.PSD0 */
                    PSD0 = Zero
                    Local3 = P2TB /* \_SB_.PCI0.RP06.POFF.P2TB */
                    If ((TOFF > One))
                    {
                        TOFF = Zero
                        Sleep (0x0A)
                        PSD0 = Local1
                        RSTF = One
                        ADBG ("TOFF > 1")
                        Return (Zero)
                    }

                    TOFF = Zero
                    Sleep (0x0A)
                    Local6 = TBPS /* \_SB_.PCI0.RP06.POFF.TBPS */
                    TBPS = Zero
                    Sleep (0x0A)
                    Local2 = PDS0 /* \_SB_.PCI0.RP06.POFF.PDS0 */
                    Local3 = PDS1 /* \_SB_.PCI0.RP06.POFF.PDS1 */
                    TBPS = Local6
                    PSD0 = Local1
                    L2TE = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TE)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("Set L23_Rdy Entry")
                    NCB7 = One
                    \PIN.ON (RSTG)
                    RSTF = One
                    ADBG ("Reset pin ON")
                    Sleep (0x0A)
                    If (CondRefOf (PWRG))
                    {
                        If (CondRefOf (WAKP))
                        {
                            ADBG (Concatenate ("WAKP =", ToHexString (WAKP)))
                            ADBG (Concatenate ("WKEN =", ToHexString (WKEN)))
                            If (((WAKP == Zero) || !WKEN))
                            {
                                If (CondRefOf (PCPB))
                                {
                                    If ((PCPB != Zero))
                                    {
                                        \PIN.OFF (PWRG)
                                    }
                                }
                                Else
                                {
                                    \PIN.OFF (PWRG)
                                    ADBG ("Power pin Off")
                                }
                            }
                        }
                        ElseIf (CondRefOf (PCPB))
                        {
                            If ((PCPB != Zero))
                            {
                                \PIN.OFF (PWRG)
                            }
                        }
                        Else
                        {
                            \PIN.OFF (PWRG)
                            ADBG ("Power pin Off")
                        }
                    }

                    If (CondRefOf (TWAP))
                    {
                        If (((TWAP != Zero) && WKEN))
                        {
                            ADBG ("Enable Wake")
                            \_SB.SHPO (TWAP, Zero)
                        }
                    }

                    TBPE = Zero
                    Local6 = \TBOD
                    Local7 = (Local6 & 0x7FFF)
                    Local6 &= 0x8000
                    If ((Local6 == Zero))
                    {
                        Sleep (\TBOD)
                    }
                    ElseIf (((Local2 == One) || (Local3 == One)))
                    {
                        Sleep (Local7)
                    }
                    Else
                    {
                        Sleep (0x03E8)
                    }

                    ADBG (Concatenate ("HPSX_End=", ToHexString (HPSX)))
                    ADBG (Concatenate ("PMSX_End=", ToHexString (PMSX)))
                    If (CondRefOf (PDOF))
                    {
                        If (PSON)
                        {
                            PDOF ()
                        }
                    }
                }

                Method (NFRP, 0, Serialized)
                {
                    Local0 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (TBDA, SystemMemory, Local0, 0xE0)
                    Field (TBDA, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0xD8), 
                            ,   30, 
                        HPSE,   1, 
                        PMSE,   1, 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    If ((TBTS == One))
                    {
                        HPSE = Zero
                        PMSE = Zero
                        Notify (^, Zero) // Bus Check
                        If ((PMSX == One))
                        {
                            Local2 = One
                        }

                        Notify (^, 0x02) // Device Wake
                        Local1 = One
                    }

                    If ((Local1 == One))
                    {
                        HPSX = One
                        If ((Local2 == One))
                        {
                            PMSX = One
                        }
                    }
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    ADBG ("_PR0")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    ADBG ("_PR3")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            Method (TBNF, 0, NotSerialized)
            {
                Notify (\_SB.PCI0.RP06, 0x02) // Device Wake
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If ((\RTBT == One))
                {
                    ADBG ("TBT RTD3 _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
                Else
                {
                    ADBG ("TBT _DSD")
                    Return (Package (0x02)
                    {
                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x07) || (RPS1 == 0x07))))
    {
        Scope (\_SB.PCI0.RP07.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (TARS) /* \TARS */
            }

            Device (EP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Device (TXHC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x69
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x14))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x15))
                            }
                        }
                    }
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((NEXP == Zero))
                {
                    Debug = " Host router Upstream port _PS3"
                    Acquire (OSUM, 0xFFFF)
                    Local0 = MMTB (RPS0, RPT0)
                    \_GPE.SXST (Local0)
                    Release (OSUM)
                }
            }
        }

        Scope (\_SB.PCI0.RP07)
        {
            If ((\RTBT == One))
            {
                Name (G2SD, Zero)
                Name (RSTF, Zero)
                Name (WKEN, Zero)
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (RSTG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Method (DINI, 0, NotSerialized)
                {
                    ADBG ("DINI")
                    ADBG (Concatenate ("Reset pin=", ToHexString (RSG0)))
                    ADBG (Concatenate ("Reset pin level = ", ToHexString (RS0L)))
                    RSTG [Zero] = RSG0 /* \RSG0 */
                    RSTG [One] = RS0L /* \RS0L */
                    ADBG (Concatenate ("power pin=", ToHexString (TWRP)))
                    ADBG (Concatenate ("power pin level = ", ToHexString (TWRA)))
                    PWRG [Zero] = TWRP /* \TWRP */
                    PWRG [One] = TWRA /* \TWRA */
                    ADBG ("DINI End")
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg0 =", ToHexString (Arg0)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg1 =", ToHexString (Arg1)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg2 =", ToHexString (Arg2)))
                    If ((Arg1 >= One))
                    {
                        WKEN = Zero
                        TOFF = 0x02
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 2")
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                        TOFF = One
                        ADBG ("WKEN = 1")
                        ADBG ("TOFF = 1")
                    }
                    Else
                    {
                        WKEN = Zero
                        TOFF = Zero
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 0")
                    }
                }

                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXP._STA")
                        DINI ()
                        Return (PSTA ())
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXP._ON")
                        TRDO = One
                        PON ()
                        TRDO = Zero
                        ADBG ("PXP._ON END")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXP._OFF")
                        TRD3 = One
                        POFF ()
                        TRD3 = Zero
                        ADBG ("PXP._OFF END")
                    }
                }

                Method (PSTA, 0, NotSerialized)
                {
                    If ((RSTF == One))
                    {
                        ADBG ("PSTA return 0")
                        Return (Zero)
                    }
                    Else
                    {
                        ADBG ("PSTA return 1")
                        Return (One)
                    }
                }

                Method (SXEX, 0, Serialized)
                {
                    ADBG ("SXEX")
                    Local7 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local7, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    Local1 = 0xC8
                    P2TB = 0x09
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP07.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("SXEX Fail")
                            Return (Zero)
                        }

                        If ((Local2 & One))
                        {
                            Break
                        }

                        Sleep (0x05)
                    }

                    P2TB = Zero
                    Local1 = 0x01F4
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP07.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("Device gone")
                            Return (Zero)
                        }

                        If ((DIVI != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    ADBG ("SXEX END")
                }

                Method (PON, 0, NotSerialized)
                {
                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (\RPS0, \RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    If (TBPE)
                    {
                        ADBG ("TBPE = 1")
                        Return (Zero)
                    }

                    G2SD = Zero
                    If (CondRefOf (PWRG))
                    {
                        \PIN.ON (PWRG)
                        Sleep (0x64)
                        ADBG ("Power pin ON")
                    }

                    \PIN.OFF (RSTG)
                    RSTF = Zero
                    ADBG ("Reset pin Off")
                    If ((NCB7 != One))
                    {
                        ADBG ("NCB7 != 1")
                        Return (Zero)
                    }

                    DPGE = Zero
                    L2TR = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TR)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("set L23_Rdy to Detect Transition")
                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP07.PON_.PSD0 */
                    PSD0 = Zero
                    Local2 = 0x14
                    While ((Local2 > Zero))
                    {
                        Local2 = (Local2 - One)
                        Local3 = TB2P /* \_SB_.PCI0.RP07.PON_.TB2P */
                        If ((Local3 != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local2 <= Zero)){}
                    SXEX ()
                    PSD0 = Local1
                    If (CondRefOf (PDON))
                    {
                        PDON ()
                    }
                }

                Method (POFF, 0, NotSerialized)
                {
                    If ((TOFF == Zero))
                    {
                        ADBG ("TOFF == 0")
                        Return (Zero)
                    }

                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    ADBG (Concatenate ("VDID =", ToHexString (VDID)))
                    Local6 += 0x00108000
                    OperationRegion (DSP0, SystemMemory, Local6, 0x0100)
                    Field (DSP0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI0,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS0,   1
                    }

                    Local6 += 0x00018000
                    OperationRegion (DSP1, SystemMemory, Local6, 0x0100)
                    Field (DSP1, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI1,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS1,   1
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP07.POFF.PSD0 */
                    PSD0 = Zero
                    Local3 = P2TB /* \_SB_.PCI0.RP07.POFF.P2TB */
                    If ((TOFF > One))
                    {
                        TOFF = Zero
                        Sleep (0x0A)
                        PSD0 = Local1
                        RSTF = One
                        ADBG ("TOFF > 1")
                        Return (Zero)
                    }

                    TOFF = Zero
                    Sleep (0x0A)
                    Local6 = TBPS /* \_SB_.PCI0.RP07.POFF.TBPS */
                    TBPS = Zero
                    Sleep (0x0A)
                    Local2 = PDS0 /* \_SB_.PCI0.RP07.POFF.PDS0 */
                    Local3 = PDS1 /* \_SB_.PCI0.RP07.POFF.PDS1 */
                    TBPS = Local6
                    PSD0 = Local1
                    L2TE = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TE)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("Set L23_Rdy Entry")
                    NCB7 = One
                    \PIN.ON (RSTG)
                    RSTF = One
                    ADBG ("Reset pin ON")
                    Sleep (0x0A)
                    If (CondRefOf (PWRG))
                    {
                        If (CondRefOf (WAKP))
                        {
                            ADBG (Concatenate ("WAKP =", ToHexString (WAKP)))
                            ADBG (Concatenate ("WKEN =", ToHexString (WKEN)))
                            If (((WAKP == Zero) || !WKEN))
                            {
                                If (CondRefOf (PCPB))
                                {
                                    If ((PCPB != Zero))
                                    {
                                        \PIN.OFF (PWRG)
                                    }
                                }
                                Else
                                {
                                    \PIN.OFF (PWRG)
                                    ADBG ("Power pin Off")
                                }
                            }
                        }
                        ElseIf (CondRefOf (PCPB))
                        {
                            If ((PCPB != Zero))
                            {
                                \PIN.OFF (PWRG)
                            }
                        }
                        Else
                        {
                            \PIN.OFF (PWRG)
                            ADBG ("Power pin Off")
                        }
                    }

                    If (CondRefOf (TWAP))
                    {
                        If (((TWAP != Zero) && WKEN))
                        {
                            ADBG ("Enable Wake")
                            \_SB.SHPO (TWAP, Zero)
                        }
                    }

                    TBPE = Zero
                    Local6 = \TBOD
                    Local7 = (Local6 & 0x7FFF)
                    Local6 &= 0x8000
                    If ((Local6 == Zero))
                    {
                        Sleep (\TBOD)
                    }
                    ElseIf (((Local2 == One) || (Local3 == One)))
                    {
                        Sleep (Local7)
                    }
                    Else
                    {
                        Sleep (0x03E8)
                    }

                    ADBG (Concatenate ("HPSX_End=", ToHexString (HPSX)))
                    ADBG (Concatenate ("PMSX_End=", ToHexString (PMSX)))
                    If (CondRefOf (PDOF))
                    {
                        If (PSON)
                        {
                            PDOF ()
                        }
                    }
                }

                Method (NFRP, 0, Serialized)
                {
                    Local0 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (TBDA, SystemMemory, Local0, 0xE0)
                    Field (TBDA, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0xD8), 
                            ,   30, 
                        HPSE,   1, 
                        PMSE,   1, 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    If ((TBTS == One))
                    {
                        HPSE = Zero
                        PMSE = Zero
                        Notify (^, Zero) // Bus Check
                        If ((PMSX == One))
                        {
                            Local2 = One
                        }

                        Notify (^, 0x02) // Device Wake
                        Local1 = One
                    }

                    If ((Local1 == One))
                    {
                        HPSX = One
                        If ((Local2 == One))
                        {
                            PMSX = One
                        }
                    }
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    ADBG ("_PR0")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    ADBG ("_PR3")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            Method (TBNF, 0, NotSerialized)
            {
                Notify (\_SB.PCI0.RP07, 0x02) // Device Wake
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If ((\RTBT == One))
                {
                    ADBG ("TBT RTD3 _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
                Else
                {
                    ADBG ("TBT _DSD")
                    Return (Package (0x02)
                    {
                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x08) || (RPS1 == 0x08))))
    {
        Scope (\_SB.PCI0.RP08.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (TARS) /* \TARS */
            }

            Device (EP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Device (TXHC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x69
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x14))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x15))
                            }
                        }
                    }
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((NEXP == Zero))
                {
                    Debug = " Host router Upstream port _PS3"
                    Acquire (OSUM, 0xFFFF)
                    Local0 = MMTB (RPS0, RPT0)
                    \_GPE.SXST (Local0)
                    Release (OSUM)
                }
            }
        }

        Scope (\_SB.PCI0.RP08)
        {
            If ((\RTBT == One))
            {
                Name (G2SD, Zero)
                Name (RSTF, Zero)
                Name (WKEN, Zero)
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (RSTG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Method (DINI, 0, NotSerialized)
                {
                    ADBG ("DINI")
                    ADBG (Concatenate ("Reset pin=", ToHexString (RSG0)))
                    ADBG (Concatenate ("Reset pin level = ", ToHexString (RS0L)))
                    RSTG [Zero] = RSG0 /* \RSG0 */
                    RSTG [One] = RS0L /* \RS0L */
                    ADBG (Concatenate ("power pin=", ToHexString (TWRP)))
                    ADBG (Concatenate ("power pin level = ", ToHexString (TWRA)))
                    PWRG [Zero] = TWRP /* \TWRP */
                    PWRG [One] = TWRA /* \TWRA */
                    ADBG ("DINI End")
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg0 =", ToHexString (Arg0)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg1 =", ToHexString (Arg1)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg2 =", ToHexString (Arg2)))
                    If ((Arg1 >= One))
                    {
                        WKEN = Zero
                        TOFF = 0x02
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 2")
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                        TOFF = One
                        ADBG ("WKEN = 1")
                        ADBG ("TOFF = 1")
                    }
                    Else
                    {
                        WKEN = Zero
                        TOFF = Zero
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 0")
                    }
                }

                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXP._STA")
                        DINI ()
                        Return (PSTA ())
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXP._ON")
                        TRDO = One
                        PON ()
                        TRDO = Zero
                        ADBG ("PXP._ON END")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXP._OFF")
                        TRD3 = One
                        POFF ()
                        TRD3 = Zero
                        ADBG ("PXP._OFF END")
                    }
                }

                Method (PSTA, 0, NotSerialized)
                {
                    If ((RSTF == One))
                    {
                        ADBG ("PSTA return 0")
                        Return (Zero)
                    }
                    Else
                    {
                        ADBG ("PSTA return 1")
                        Return (One)
                    }
                }

                Method (SXEX, 0, Serialized)
                {
                    ADBG ("SXEX")
                    Local7 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local7, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    Local1 = 0xC8
                    P2TB = 0x09
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP08.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("SXEX Fail")
                            Return (Zero)
                        }

                        If ((Local2 & One))
                        {
                            Break
                        }

                        Sleep (0x05)
                    }

                    P2TB = Zero
                    Local1 = 0x01F4
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP08.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("Device gone")
                            Return (Zero)
                        }

                        If ((DIVI != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    ADBG ("SXEX END")
                }

                Method (PON, 0, NotSerialized)
                {
                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (\RPS0, \RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    If (TBPE)
                    {
                        ADBG ("TBPE = 1")
                        Return (Zero)
                    }

                    G2SD = Zero
                    If (CondRefOf (PWRG))
                    {
                        \PIN.ON (PWRG)
                        Sleep (0x64)
                        ADBG ("Power pin ON")
                    }

                    \PIN.OFF (RSTG)
                    RSTF = Zero
                    ADBG ("Reset pin Off")
                    If ((NCB7 != One))
                    {
                        ADBG ("NCB7 != 1")
                        Return (Zero)
                    }

                    DPGE = Zero
                    L2TR = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TR)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("set L23_Rdy to Detect Transition")
                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP08.PON_.PSD0 */
                    PSD0 = Zero
                    Local2 = 0x14
                    While ((Local2 > Zero))
                    {
                        Local2 = (Local2 - One)
                        Local3 = TB2P /* \_SB_.PCI0.RP08.PON_.TB2P */
                        If ((Local3 != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local2 <= Zero)){}
                    SXEX ()
                    PSD0 = Local1
                    If (CondRefOf (PDON))
                    {
                        PDON ()
                    }
                }

                Method (POFF, 0, NotSerialized)
                {
                    If ((TOFF == Zero))
                    {
                        ADBG ("TOFF == 0")
                        Return (Zero)
                    }

                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    ADBG (Concatenate ("VDID =", ToHexString (VDID)))
                    Local6 += 0x00108000
                    OperationRegion (DSP0, SystemMemory, Local6, 0x0100)
                    Field (DSP0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI0,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS0,   1
                    }

                    Local6 += 0x00018000
                    OperationRegion (DSP1, SystemMemory, Local6, 0x0100)
                    Field (DSP1, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI1,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS1,   1
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP08.POFF.PSD0 */
                    PSD0 = Zero
                    Local3 = P2TB /* \_SB_.PCI0.RP08.POFF.P2TB */
                    If ((TOFF > One))
                    {
                        TOFF = Zero
                        Sleep (0x0A)
                        PSD0 = Local1
                        RSTF = One
                        ADBG ("TOFF > 1")
                        Return (Zero)
                    }

                    TOFF = Zero
                    Sleep (0x0A)
                    Local6 = TBPS /* \_SB_.PCI0.RP08.POFF.TBPS */
                    TBPS = Zero
                    Sleep (0x0A)
                    Local2 = PDS0 /* \_SB_.PCI0.RP08.POFF.PDS0 */
                    Local3 = PDS1 /* \_SB_.PCI0.RP08.POFF.PDS1 */
                    TBPS = Local6
                    PSD0 = Local1
                    L2TE = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TE)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("Set L23_Rdy Entry")
                    NCB7 = One
                    \PIN.ON (RSTG)
                    RSTF = One
                    ADBG ("Reset pin ON")
                    Sleep (0x0A)
                    If (CondRefOf (PWRG))
                    {
                        If (CondRefOf (WAKP))
                        {
                            ADBG (Concatenate ("WAKP =", ToHexString (WAKP)))
                            ADBG (Concatenate ("WKEN =", ToHexString (WKEN)))
                            If (((WAKP == Zero) || !WKEN))
                            {
                                If (CondRefOf (PCPB))
                                {
                                    If ((PCPB != Zero))
                                    {
                                        \PIN.OFF (PWRG)
                                    }
                                }
                                Else
                                {
                                    \PIN.OFF (PWRG)
                                    ADBG ("Power pin Off")
                                }
                            }
                        }
                        ElseIf (CondRefOf (PCPB))
                        {
                            If ((PCPB != Zero))
                            {
                                \PIN.OFF (PWRG)
                            }
                        }
                        Else
                        {
                            \PIN.OFF (PWRG)
                            ADBG ("Power pin Off")
                        }
                    }

                    If (CondRefOf (TWAP))
                    {
                        If (((TWAP != Zero) && WKEN))
                        {
                            ADBG ("Enable Wake")
                            \_SB.SHPO (TWAP, Zero)
                        }
                    }

                    TBPE = Zero
                    Local6 = \TBOD
                    Local7 = (Local6 & 0x7FFF)
                    Local6 &= 0x8000
                    If ((Local6 == Zero))
                    {
                        Sleep (\TBOD)
                    }
                    ElseIf (((Local2 == One) || (Local3 == One)))
                    {
                        Sleep (Local7)
                    }
                    Else
                    {
                        Sleep (0x03E8)
                    }

                    ADBG (Concatenate ("HPSX_End=", ToHexString (HPSX)))
                    ADBG (Concatenate ("PMSX_End=", ToHexString (PMSX)))
                    If (CondRefOf (PDOF))
                    {
                        If (PSON)
                        {
                            PDOF ()
                        }
                    }
                }

                Method (NFRP, 0, Serialized)
                {
                    Local0 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (TBDA, SystemMemory, Local0, 0xE0)
                    Field (TBDA, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0xD8), 
                            ,   30, 
                        HPSE,   1, 
                        PMSE,   1, 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    If ((TBTS == One))
                    {
                        HPSE = Zero
                        PMSE = Zero
                        Notify (^, Zero) // Bus Check
                        If ((PMSX == One))
                        {
                            Local2 = One
                        }

                        Notify (^, 0x02) // Device Wake
                        Local1 = One
                    }

                    If ((Local1 == One))
                    {
                        HPSX = One
                        If ((Local2 == One))
                        {
                            PMSX = One
                        }
                    }
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    ADBG ("_PR0")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    ADBG ("_PR3")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            Method (TBNF, 0, NotSerialized)
            {
                Notify (\_SB.PCI0.RP08, 0x02) // Device Wake
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If ((\RTBT == One))
                {
                    ADBG ("TBT RTD3 _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
                Else
                {
                    ADBG ("TBT _DSD")
                    Return (Package (0x02)
                    {
                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x09) || (RPS1 == 0x09))))
    {
        Scope (\_SB.PCI0.RP09.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (TARS) /* \TARS */
            }

            Device (EP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Device (TXHC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x69
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x14))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x15))
                            }
                        }
                    }
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((NEXP == Zero))
                {
                    Debug = " Host router Upstream port _PS3"
                    Acquire (OSUM, 0xFFFF)
                    Local0 = MMTB (RPS0, RPT0)
                    \_GPE.SXST (Local0)
                    Release (OSUM)
                }
            }
        }

        Scope (\_SB.PCI0.RP09)
        {
            If ((\RTBT == One))
            {
                Name (G2SD, Zero)
                Name (RSTF, Zero)
                Name (WKEN, Zero)
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (RSTG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Method (DINI, 0, NotSerialized)
                {
                    ADBG ("DINI")
                    ADBG (Concatenate ("Reset pin=", ToHexString (RSG0)))
                    ADBG (Concatenate ("Reset pin level = ", ToHexString (RS0L)))
                    RSTG [Zero] = RSG0 /* \RSG0 */
                    RSTG [One] = RS0L /* \RS0L */
                    ADBG (Concatenate ("power pin=", ToHexString (TWRP)))
                    ADBG (Concatenate ("power pin level = ", ToHexString (TWRA)))
                    PWRG [Zero] = TWRP /* \TWRP */
                    PWRG [One] = TWRA /* \TWRA */
                    ADBG ("DINI End")
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg0 =", ToHexString (Arg0)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg1 =", ToHexString (Arg1)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg2 =", ToHexString (Arg2)))
                    If ((Arg1 >= One))
                    {
                        WKEN = Zero
                        TOFF = 0x02
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 2")
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                        TOFF = One
                        ADBG ("WKEN = 1")
                        ADBG ("TOFF = 1")
                    }
                    Else
                    {
                        WKEN = Zero
                        TOFF = Zero
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 0")
                    }
                }

                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXP._STA")
                        DINI ()
                        Return (PSTA ())
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXP._ON")
                        TRDO = One
                        PON ()
                        TRDO = Zero
                        ADBG ("PXP._ON END")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXP._OFF")
                        TRD3 = One
                        POFF ()
                        TRD3 = Zero
                        ADBG ("PXP._OFF END")
                    }
                }

                Method (PSTA, 0, NotSerialized)
                {
                    If ((RSTF == One))
                    {
                        ADBG ("PSTA return 0")
                        Return (Zero)
                    }
                    Else
                    {
                        ADBG ("PSTA return 1")
                        Return (One)
                    }
                }

                Method (SXEX, 0, Serialized)
                {
                    ADBG ("SXEX")
                    Local7 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local7, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    Local1 = 0xC8
                    P2TB = 0x09
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP09.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("SXEX Fail")
                            Return (Zero)
                        }

                        If ((Local2 & One))
                        {
                            Break
                        }

                        Sleep (0x05)
                    }

                    P2TB = Zero
                    Local1 = 0x01F4
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP09.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("Device gone")
                            Return (Zero)
                        }

                        If ((DIVI != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    ADBG ("SXEX END")
                }

                Method (PON, 0, NotSerialized)
                {
                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (\RPS0, \RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    If (TBPE)
                    {
                        ADBG ("TBPE = 1")
                        Return (Zero)
                    }

                    G2SD = Zero
                    If (CondRefOf (PWRG))
                    {
                        \PIN.ON (PWRG)
                        Sleep (0x64)
                        ADBG ("Power pin ON")
                    }

                    \PIN.OFF (RSTG)
                    RSTF = Zero
                    ADBG ("Reset pin Off")
                    If ((NCB7 != One))
                    {
                        ADBG ("NCB7 != 1")
                        Return (Zero)
                    }

                    DPGE = Zero
                    L2TR = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TR)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("set L23_Rdy to Detect Transition")
                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP09.PON_.PSD0 */
                    PSD0 = Zero
                    Local2 = 0x14
                    While ((Local2 > Zero))
                    {
                        Local2 = (Local2 - One)
                        Local3 = TB2P /* \_SB_.PCI0.RP09.PON_.TB2P */
                        If ((Local3 != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local2 <= Zero)){}
                    SXEX ()
                    PSD0 = Local1
                    If (CondRefOf (PDON))
                    {
                        PDON ()
                    }
                }

                Method (POFF, 0, NotSerialized)
                {
                    If ((TOFF == Zero))
                    {
                        ADBG ("TOFF == 0")
                        Return (Zero)
                    }

                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    ADBG (Concatenate ("VDID =", ToHexString (VDID)))
                    Local6 += 0x00108000
                    OperationRegion (DSP0, SystemMemory, Local6, 0x0100)
                    Field (DSP0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI0,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS0,   1
                    }

                    Local6 += 0x00018000
                    OperationRegion (DSP1, SystemMemory, Local6, 0x0100)
                    Field (DSP1, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI1,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS1,   1
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP09.POFF.PSD0 */
                    PSD0 = Zero
                    Local3 = P2TB /* \_SB_.PCI0.RP09.POFF.P2TB */
                    If ((TOFF > One))
                    {
                        TOFF = Zero
                        Sleep (0x0A)
                        PSD0 = Local1
                        RSTF = One
                        ADBG ("TOFF > 1")
                        Return (Zero)
                    }

                    TOFF = Zero
                    Sleep (0x0A)
                    Local6 = TBPS /* \_SB_.PCI0.RP09.POFF.TBPS */
                    TBPS = Zero
                    Sleep (0x0A)
                    Local2 = PDS0 /* \_SB_.PCI0.RP09.POFF.PDS0 */
                    Local3 = PDS1 /* \_SB_.PCI0.RP09.POFF.PDS1 */
                    TBPS = Local6
                    PSD0 = Local1
                    L2TE = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TE)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("Set L23_Rdy Entry")
                    NCB7 = One
                    \PIN.ON (RSTG)
                    RSTF = One
                    ADBG ("Reset pin ON")
                    Sleep (0x0A)
                    If (CondRefOf (PWRG))
                    {
                        If (CondRefOf (WAKP))
                        {
                            ADBG (Concatenate ("WAKP =", ToHexString (WAKP)))
                            ADBG (Concatenate ("WKEN =", ToHexString (WKEN)))
                            If (((WAKP == Zero) || !WKEN))
                            {
                                If (CondRefOf (PCPB))
                                {
                                    If ((PCPB != Zero))
                                    {
                                        \PIN.OFF (PWRG)
                                    }
                                }
                                Else
                                {
                                    \PIN.OFF (PWRG)
                                    ADBG ("Power pin Off")
                                }
                            }
                        }
                        ElseIf (CondRefOf (PCPB))
                        {
                            If ((PCPB != Zero))
                            {
                                \PIN.OFF (PWRG)
                            }
                        }
                        Else
                        {
                            \PIN.OFF (PWRG)
                            ADBG ("Power pin Off")
                        }
                    }

                    If (CondRefOf (TWAP))
                    {
                        If (((TWAP != Zero) && WKEN))
                        {
                            ADBG ("Enable Wake")
                            \_SB.SHPO (TWAP, Zero)
                        }
                    }

                    TBPE = Zero
                    Local6 = \TBOD
                    Local7 = (Local6 & 0x7FFF)
                    Local6 &= 0x8000
                    If ((Local6 == Zero))
                    {
                        Sleep (\TBOD)
                    }
                    ElseIf (((Local2 == One) || (Local3 == One)))
                    {
                        Sleep (Local7)
                    }
                    Else
                    {
                        Sleep (0x03E8)
                    }

                    ADBG (Concatenate ("HPSX_End=", ToHexString (HPSX)))
                    ADBG (Concatenate ("PMSX_End=", ToHexString (PMSX)))
                    If (CondRefOf (PDOF))
                    {
                        If (PSON)
                        {
                            PDOF ()
                        }
                    }
                }

                Method (NFRP, 0, Serialized)
                {
                    Local0 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (TBDA, SystemMemory, Local0, 0xE0)
                    Field (TBDA, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0xD8), 
                            ,   30, 
                        HPSE,   1, 
                        PMSE,   1, 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    If ((TBTS == One))
                    {
                        HPSE = Zero
                        PMSE = Zero
                        Notify (^, Zero) // Bus Check
                        If ((PMSX == One))
                        {
                            Local2 = One
                        }

                        Notify (^, 0x02) // Device Wake
                        Local1 = One
                    }

                    If ((Local1 == One))
                    {
                        HPSX = One
                        If ((Local2 == One))
                        {
                            PMSX = One
                        }
                    }
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    ADBG ("_PR0")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    ADBG ("_PR3")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            Method (TBNF, 0, NotSerialized)
            {
                Notify (\_SB.PCI0.RP09, 0x02) // Device Wake
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If ((\RTBT == One))
                {
                    ADBG ("TBT RTD3 _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
                Else
                {
                    ADBG ("TBT _DSD")
                    Return (Package (0x02)
                    {
                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x0A) || (RPS1 == 0x0A))))
    {
        Scope (\_SB.PCI0.RP10.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (TARS) /* \TARS */
            }

            Device (EP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Device (TXHC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x69
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x14))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x15))
                            }
                        }
                    }
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((NEXP == Zero))
                {
                    Debug = " Host router Upstream port _PS3"
                    Acquire (OSUM, 0xFFFF)
                    Local0 = MMTB (RPS0, RPT0)
                    \_GPE.SXST (Local0)
                    Release (OSUM)
                }
            }
        }

        Scope (\_SB.PCI0.RP10)
        {
            If ((\RTBT == One))
            {
                Name (G2SD, Zero)
                Name (RSTF, Zero)
                Name (WKEN, Zero)
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (RSTG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Method (DINI, 0, NotSerialized)
                {
                    ADBG ("DINI")
                    ADBG (Concatenate ("Reset pin=", ToHexString (RSG0)))
                    ADBG (Concatenate ("Reset pin level = ", ToHexString (RS0L)))
                    RSTG [Zero] = RSG0 /* \RSG0 */
                    RSTG [One] = RS0L /* \RS0L */
                    ADBG (Concatenate ("power pin=", ToHexString (TWRP)))
                    ADBG (Concatenate ("power pin level = ", ToHexString (TWRA)))
                    PWRG [Zero] = TWRP /* \TWRP */
                    PWRG [One] = TWRA /* \TWRA */
                    ADBG ("DINI End")
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg0 =", ToHexString (Arg0)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg1 =", ToHexString (Arg1)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg2 =", ToHexString (Arg2)))
                    If ((Arg1 >= One))
                    {
                        WKEN = Zero
                        TOFF = 0x02
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 2")
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                        TOFF = One
                        ADBG ("WKEN = 1")
                        ADBG ("TOFF = 1")
                    }
                    Else
                    {
                        WKEN = Zero
                        TOFF = Zero
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 0")
                    }
                }

                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXP._STA")
                        DINI ()
                        Return (PSTA ())
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXP._ON")
                        TRDO = One
                        PON ()
                        TRDO = Zero
                        ADBG ("PXP._ON END")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXP._OFF")
                        TRD3 = One
                        POFF ()
                        TRD3 = Zero
                        ADBG ("PXP._OFF END")
                    }
                }

                Method (PSTA, 0, NotSerialized)
                {
                    If ((RSTF == One))
                    {
                        ADBG ("PSTA return 0")
                        Return (Zero)
                    }
                    Else
                    {
                        ADBG ("PSTA return 1")
                        Return (One)
                    }
                }

                Method (SXEX, 0, Serialized)
                {
                    ADBG ("SXEX")
                    Local7 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local7, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    Local1 = 0xC8
                    P2TB = 0x09
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP10.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("SXEX Fail")
                            Return (Zero)
                        }

                        If ((Local2 & One))
                        {
                            Break
                        }

                        Sleep (0x05)
                    }

                    P2TB = Zero
                    Local1 = 0x01F4
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP10.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("Device gone")
                            Return (Zero)
                        }

                        If ((DIVI != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    ADBG ("SXEX END")
                }

                Method (PON, 0, NotSerialized)
                {
                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (\RPS0, \RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    If (TBPE)
                    {
                        ADBG ("TBPE = 1")
                        Return (Zero)
                    }

                    G2SD = Zero
                    If (CondRefOf (PWRG))
                    {
                        \PIN.ON (PWRG)
                        Sleep (0x64)
                        ADBG ("Power pin ON")
                    }

                    \PIN.OFF (RSTG)
                    RSTF = Zero
                    ADBG ("Reset pin Off")
                    If ((NCB7 != One))
                    {
                        ADBG ("NCB7 != 1")
                        Return (Zero)
                    }

                    DPGE = Zero
                    L2TR = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TR)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("set L23_Rdy to Detect Transition")
                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP10.PON_.PSD0 */
                    PSD0 = Zero
                    Local2 = 0x14
                    While ((Local2 > Zero))
                    {
                        Local2 = (Local2 - One)
                        Local3 = TB2P /* \_SB_.PCI0.RP10.PON_.TB2P */
                        If ((Local3 != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local2 <= Zero)){}
                    SXEX ()
                    PSD0 = Local1
                    If (CondRefOf (PDON))
                    {
                        PDON ()
                    }
                }

                Method (POFF, 0, NotSerialized)
                {
                    If ((TOFF == Zero))
                    {
                        ADBG ("TOFF == 0")
                        Return (Zero)
                    }

                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    ADBG (Concatenate ("VDID =", ToHexString (VDID)))
                    Local6 += 0x00108000
                    OperationRegion (DSP0, SystemMemory, Local6, 0x0100)
                    Field (DSP0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI0,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS0,   1
                    }

                    Local6 += 0x00018000
                    OperationRegion (DSP1, SystemMemory, Local6, 0x0100)
                    Field (DSP1, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI1,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS1,   1
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP10.POFF.PSD0 */
                    PSD0 = Zero
                    Local3 = P2TB /* \_SB_.PCI0.RP10.POFF.P2TB */
                    If ((TOFF > One))
                    {
                        TOFF = Zero
                        Sleep (0x0A)
                        PSD0 = Local1
                        RSTF = One
                        ADBG ("TOFF > 1")
                        Return (Zero)
                    }

                    TOFF = Zero
                    Sleep (0x0A)
                    Local6 = TBPS /* \_SB_.PCI0.RP10.POFF.TBPS */
                    TBPS = Zero
                    Sleep (0x0A)
                    Local2 = PDS0 /* \_SB_.PCI0.RP10.POFF.PDS0 */
                    Local3 = PDS1 /* \_SB_.PCI0.RP10.POFF.PDS1 */
                    TBPS = Local6
                    PSD0 = Local1
                    L2TE = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TE)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("Set L23_Rdy Entry")
                    NCB7 = One
                    \PIN.ON (RSTG)
                    RSTF = One
                    ADBG ("Reset pin ON")
                    Sleep (0x0A)
                    If (CondRefOf (PWRG))
                    {
                        If (CondRefOf (WAKP))
                        {
                            ADBG (Concatenate ("WAKP =", ToHexString (WAKP)))
                            ADBG (Concatenate ("WKEN =", ToHexString (WKEN)))
                            If (((WAKP == Zero) || !WKEN))
                            {
                                If (CondRefOf (PCPB))
                                {
                                    If ((PCPB != Zero))
                                    {
                                        \PIN.OFF (PWRG)
                                    }
                                }
                                Else
                                {
                                    \PIN.OFF (PWRG)
                                    ADBG ("Power pin Off")
                                }
                            }
                        }
                        ElseIf (CondRefOf (PCPB))
                        {
                            If ((PCPB != Zero))
                            {
                                \PIN.OFF (PWRG)
                            }
                        }
                        Else
                        {
                            \PIN.OFF (PWRG)
                            ADBG ("Power pin Off")
                        }
                    }

                    If (CondRefOf (TWAP))
                    {
                        If (((TWAP != Zero) && WKEN))
                        {
                            ADBG ("Enable Wake")
                            \_SB.SHPO (TWAP, Zero)
                        }
                    }

                    TBPE = Zero
                    Local6 = \TBOD
                    Local7 = (Local6 & 0x7FFF)
                    Local6 &= 0x8000
                    If ((Local6 == Zero))
                    {
                        Sleep (\TBOD)
                    }
                    ElseIf (((Local2 == One) || (Local3 == One)))
                    {
                        Sleep (Local7)
                    }
                    Else
                    {
                        Sleep (0x03E8)
                    }

                    ADBG (Concatenate ("HPSX_End=", ToHexString (HPSX)))
                    ADBG (Concatenate ("PMSX_End=", ToHexString (PMSX)))
                    If (CondRefOf (PDOF))
                    {
                        If (PSON)
                        {
                            PDOF ()
                        }
                    }
                }

                Method (NFRP, 0, Serialized)
                {
                    Local0 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (TBDA, SystemMemory, Local0, 0xE0)
                    Field (TBDA, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0xD8), 
                            ,   30, 
                        HPSE,   1, 
                        PMSE,   1, 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    If ((TBTS == One))
                    {
                        HPSE = Zero
                        PMSE = Zero
                        Notify (^, Zero) // Bus Check
                        If ((PMSX == One))
                        {
                            Local2 = One
                        }

                        Notify (^, 0x02) // Device Wake
                        Local1 = One
                    }

                    If ((Local1 == One))
                    {
                        HPSX = One
                        If ((Local2 == One))
                        {
                            PMSX = One
                        }
                    }
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    ADBG ("_PR0")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    ADBG ("_PR3")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            Method (TBNF, 0, NotSerialized)
            {
                Notify (\_SB.PCI0.RP10, 0x02) // Device Wake
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If ((\RTBT == One))
                {
                    ADBG ("TBT RTD3 _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
                Else
                {
                    ADBG ("TBT _DSD")
                    Return (Package (0x02)
                    {
                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x0B) || (RPS1 == 0x0B))))
    {
        Scope (\_SB.PCI0.RP11.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (TARS) /* \TARS */
            }

            Device (EP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Device (TXHC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x69
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x14))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x15))
                            }
                        }
                    }
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((NEXP == Zero))
                {
                    Debug = " Host router Upstream port _PS3"
                    Acquire (OSUM, 0xFFFF)
                    Local0 = MMTB (RPS0, RPT0)
                    \_GPE.SXST (Local0)
                    Release (OSUM)
                }
            }
        }

        Scope (\_SB.PCI0.RP11)
        {
            If ((\RTBT == One))
            {
                Name (G2SD, Zero)
                Name (RSTF, Zero)
                Name (WKEN, Zero)
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (RSTG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Method (DINI, 0, NotSerialized)
                {
                    ADBG ("DINI")
                    ADBG (Concatenate ("Reset pin=", ToHexString (RSG0)))
                    ADBG (Concatenate ("Reset pin level = ", ToHexString (RS0L)))
                    RSTG [Zero] = RSG0 /* \RSG0 */
                    RSTG [One] = RS0L /* \RS0L */
                    ADBG (Concatenate ("power pin=", ToHexString (TWRP)))
                    ADBG (Concatenate ("power pin level = ", ToHexString (TWRA)))
                    PWRG [Zero] = TWRP /* \TWRP */
                    PWRG [One] = TWRA /* \TWRA */
                    ADBG ("DINI End")
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg0 =", ToHexString (Arg0)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg1 =", ToHexString (Arg1)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg2 =", ToHexString (Arg2)))
                    If ((Arg1 >= One))
                    {
                        WKEN = Zero
                        TOFF = 0x02
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 2")
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                        TOFF = One
                        ADBG ("WKEN = 1")
                        ADBG ("TOFF = 1")
                    }
                    Else
                    {
                        WKEN = Zero
                        TOFF = Zero
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 0")
                    }
                }

                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXP._STA")
                        DINI ()
                        Return (PSTA ())
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXP._ON")
                        TRDO = One
                        PON ()
                        TRDO = Zero
                        ADBG ("PXP._ON END")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXP._OFF")
                        TRD3 = One
                        POFF ()
                        TRD3 = Zero
                        ADBG ("PXP._OFF END")
                    }
                }

                Method (PSTA, 0, NotSerialized)
                {
                    If ((RSTF == One))
                    {
                        ADBG ("PSTA return 0")
                        Return (Zero)
                    }
                    Else
                    {
                        ADBG ("PSTA return 1")
                        Return (One)
                    }
                }

                Method (SXEX, 0, Serialized)
                {
                    ADBG ("SXEX")
                    Local7 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local7, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    Local1 = 0xC8
                    P2TB = 0x09
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP11.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("SXEX Fail")
                            Return (Zero)
                        }

                        If ((Local2 & One))
                        {
                            Break
                        }

                        Sleep (0x05)
                    }

                    P2TB = Zero
                    Local1 = 0x01F4
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP11.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("Device gone")
                            Return (Zero)
                        }

                        If ((DIVI != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    ADBG ("SXEX END")
                }

                Method (PON, 0, NotSerialized)
                {
                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (\RPS0, \RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    If (TBPE)
                    {
                        ADBG ("TBPE = 1")
                        Return (Zero)
                    }

                    G2SD = Zero
                    If (CondRefOf (PWRG))
                    {
                        \PIN.ON (PWRG)
                        Sleep (0x64)
                        ADBG ("Power pin ON")
                    }

                    \PIN.OFF (RSTG)
                    RSTF = Zero
                    ADBG ("Reset pin Off")
                    If ((NCB7 != One))
                    {
                        ADBG ("NCB7 != 1")
                        Return (Zero)
                    }

                    DPGE = Zero
                    L2TR = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TR)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("set L23_Rdy to Detect Transition")
                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP11.PON_.PSD0 */
                    PSD0 = Zero
                    Local2 = 0x14
                    While ((Local2 > Zero))
                    {
                        Local2 = (Local2 - One)
                        Local3 = TB2P /* \_SB_.PCI0.RP11.PON_.TB2P */
                        If ((Local3 != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local2 <= Zero)){}
                    SXEX ()
                    PSD0 = Local1
                    If (CondRefOf (PDON))
                    {
                        PDON ()
                    }
                }

                Method (POFF, 0, NotSerialized)
                {
                    If ((TOFF == Zero))
                    {
                        ADBG ("TOFF == 0")
                        Return (Zero)
                    }

                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    ADBG (Concatenate ("VDID =", ToHexString (VDID)))
                    Local6 += 0x00108000
                    OperationRegion (DSP0, SystemMemory, Local6, 0x0100)
                    Field (DSP0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI0,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS0,   1
                    }

                    Local6 += 0x00018000
                    OperationRegion (DSP1, SystemMemory, Local6, 0x0100)
                    Field (DSP1, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI1,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS1,   1
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP11.POFF.PSD0 */
                    PSD0 = Zero
                    Local3 = P2TB /* \_SB_.PCI0.RP11.POFF.P2TB */
                    If ((TOFF > One))
                    {
                        TOFF = Zero
                        Sleep (0x0A)
                        PSD0 = Local1
                        RSTF = One
                        ADBG ("TOFF > 1")
                        Return (Zero)
                    }

                    TOFF = Zero
                    Sleep (0x0A)
                    Local6 = TBPS /* \_SB_.PCI0.RP11.POFF.TBPS */
                    TBPS = Zero
                    Sleep (0x0A)
                    Local2 = PDS0 /* \_SB_.PCI0.RP11.POFF.PDS0 */
                    Local3 = PDS1 /* \_SB_.PCI0.RP11.POFF.PDS1 */
                    TBPS = Local6
                    PSD0 = Local1
                    L2TE = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TE)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("Set L23_Rdy Entry")
                    NCB7 = One
                    \PIN.ON (RSTG)
                    RSTF = One
                    ADBG ("Reset pin ON")
                    Sleep (0x0A)
                    If (CondRefOf (PWRG))
                    {
                        If (CondRefOf (WAKP))
                        {
                            ADBG (Concatenate ("WAKP =", ToHexString (WAKP)))
                            ADBG (Concatenate ("WKEN =", ToHexString (WKEN)))
                            If (((WAKP == Zero) || !WKEN))
                            {
                                If (CondRefOf (PCPB))
                                {
                                    If ((PCPB != Zero))
                                    {
                                        \PIN.OFF (PWRG)
                                    }
                                }
                                Else
                                {
                                    \PIN.OFF (PWRG)
                                    ADBG ("Power pin Off")
                                }
                            }
                        }
                        ElseIf (CondRefOf (PCPB))
                        {
                            If ((PCPB != Zero))
                            {
                                \PIN.OFF (PWRG)
                            }
                        }
                        Else
                        {
                            \PIN.OFF (PWRG)
                            ADBG ("Power pin Off")
                        }
                    }

                    If (CondRefOf (TWAP))
                    {
                        If (((TWAP != Zero) && WKEN))
                        {
                            ADBG ("Enable Wake")
                            \_SB.SHPO (TWAP, Zero)
                        }
                    }

                    TBPE = Zero
                    Local6 = \TBOD
                    Local7 = (Local6 & 0x7FFF)
                    Local6 &= 0x8000
                    If ((Local6 == Zero))
                    {
                        Sleep (\TBOD)
                    }
                    ElseIf (((Local2 == One) || (Local3 == One)))
                    {
                        Sleep (Local7)
                    }
                    Else
                    {
                        Sleep (0x03E8)
                    }

                    ADBG (Concatenate ("HPSX_End=", ToHexString (HPSX)))
                    ADBG (Concatenate ("PMSX_End=", ToHexString (PMSX)))
                    If (CondRefOf (PDOF))
                    {
                        If (PSON)
                        {
                            PDOF ()
                        }
                    }
                }

                Method (NFRP, 0, Serialized)
                {
                    Local0 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (TBDA, SystemMemory, Local0, 0xE0)
                    Field (TBDA, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0xD8), 
                            ,   30, 
                        HPSE,   1, 
                        PMSE,   1, 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    If ((TBTS == One))
                    {
                        HPSE = Zero
                        PMSE = Zero
                        Notify (^, Zero) // Bus Check
                        If ((PMSX == One))
                        {
                            Local2 = One
                        }

                        Notify (^, 0x02) // Device Wake
                        Local1 = One
                    }

                    If ((Local1 == One))
                    {
                        HPSX = One
                        If ((Local2 == One))
                        {
                            PMSX = One
                        }
                    }
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    ADBG ("_PR0")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    ADBG ("_PR3")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            Method (TBNF, 0, NotSerialized)
            {
                Notify (\_SB.PCI0.RP11, 0x02) // Device Wake
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If ((\RTBT == One))
                {
                    ADBG ("TBT RTD3 _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
                Else
                {
                    ADBG ("TBT _DSD")
                    Return (Package (0x02)
                    {
                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x0C) || (RPS1 == 0x0C))))
    {
        Scope (\_SB.PCI0.RP12.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (TARS) /* \TARS */
            }

            Device (EP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Device (TXHC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x69
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x14))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x15))
                            }
                        }
                    }
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((NEXP == Zero))
                {
                    Debug = " Host router Upstream port _PS3"
                    Acquire (OSUM, 0xFFFF)
                    Local0 = MMTB (RPS0, RPT0)
                    \_GPE.SXST (Local0)
                    Release (OSUM)
                }
            }
        }

        Scope (\_SB.PCI0.RP12)
        {
            If ((\RTBT == One))
            {
                Name (G2SD, Zero)
                Name (RSTF, Zero)
                Name (WKEN, Zero)
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (RSTG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Method (DINI, 0, NotSerialized)
                {
                    ADBG ("DINI")
                    ADBG (Concatenate ("Reset pin=", ToHexString (RSG0)))
                    ADBG (Concatenate ("Reset pin level = ", ToHexString (RS0L)))
                    RSTG [Zero] = RSG0 /* \RSG0 */
                    RSTG [One] = RS0L /* \RS0L */
                    ADBG (Concatenate ("power pin=", ToHexString (TWRP)))
                    ADBG (Concatenate ("power pin level = ", ToHexString (TWRA)))
                    PWRG [Zero] = TWRP /* \TWRP */
                    PWRG [One] = TWRA /* \TWRA */
                    ADBG ("DINI End")
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg0 =", ToHexString (Arg0)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg1 =", ToHexString (Arg1)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg2 =", ToHexString (Arg2)))
                    If ((Arg1 >= One))
                    {
                        WKEN = Zero
                        TOFF = 0x02
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 2")
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                        TOFF = One
                        ADBG ("WKEN = 1")
                        ADBG ("TOFF = 1")
                    }
                    Else
                    {
                        WKEN = Zero
                        TOFF = Zero
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 0")
                    }
                }

                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXP._STA")
                        DINI ()
                        Return (PSTA ())
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXP._ON")
                        TRDO = One
                        PON ()
                        TRDO = Zero
                        ADBG ("PXP._ON END")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXP._OFF")
                        TRD3 = One
                        POFF ()
                        TRD3 = Zero
                        ADBG ("PXP._OFF END")
                    }
                }

                Method (PSTA, 0, NotSerialized)
                {
                    If ((RSTF == One))
                    {
                        ADBG ("PSTA return 0")
                        Return (Zero)
                    }
                    Else
                    {
                        ADBG ("PSTA return 1")
                        Return (One)
                    }
                }

                Method (SXEX, 0, Serialized)
                {
                    ADBG ("SXEX")
                    Local7 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local7, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    Local1 = 0xC8
                    P2TB = 0x09
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP12.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("SXEX Fail")
                            Return (Zero)
                        }

                        If ((Local2 & One))
                        {
                            Break
                        }

                        Sleep (0x05)
                    }

                    P2TB = Zero
                    Local1 = 0x01F4
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP12.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("Device gone")
                            Return (Zero)
                        }

                        If ((DIVI != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    ADBG ("SXEX END")
                }

                Method (PON, 0, NotSerialized)
                {
                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (\RPS0, \RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    If (TBPE)
                    {
                        ADBG ("TBPE = 1")
                        Return (Zero)
                    }

                    G2SD = Zero
                    If (CondRefOf (PWRG))
                    {
                        \PIN.ON (PWRG)
                        Sleep (0x64)
                        ADBG ("Power pin ON")
                    }

                    \PIN.OFF (RSTG)
                    RSTF = Zero
                    ADBG ("Reset pin Off")
                    If ((NCB7 != One))
                    {
                        ADBG ("NCB7 != 1")
                        Return (Zero)
                    }

                    DPGE = Zero
                    L2TR = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TR)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("set L23_Rdy to Detect Transition")
                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP12.PON_.PSD0 */
                    PSD0 = Zero
                    Local2 = 0x14
                    While ((Local2 > Zero))
                    {
                        Local2 = (Local2 - One)
                        Local3 = TB2P /* \_SB_.PCI0.RP12.PON_.TB2P */
                        If ((Local3 != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local2 <= Zero)){}
                    SXEX ()
                    PSD0 = Local1
                    If (CondRefOf (PDON))
                    {
                        PDON ()
                    }
                }

                Method (POFF, 0, NotSerialized)
                {
                    If ((TOFF == Zero))
                    {
                        ADBG ("TOFF == 0")
                        Return (Zero)
                    }

                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    ADBG (Concatenate ("VDID =", ToHexString (VDID)))
                    Local6 += 0x00108000
                    OperationRegion (DSP0, SystemMemory, Local6, 0x0100)
                    Field (DSP0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI0,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS0,   1
                    }

                    Local6 += 0x00018000
                    OperationRegion (DSP1, SystemMemory, Local6, 0x0100)
                    Field (DSP1, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI1,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS1,   1
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP12.POFF.PSD0 */
                    PSD0 = Zero
                    Local3 = P2TB /* \_SB_.PCI0.RP12.POFF.P2TB */
                    If ((TOFF > One))
                    {
                        TOFF = Zero
                        Sleep (0x0A)
                        PSD0 = Local1
                        RSTF = One
                        ADBG ("TOFF > 1")
                        Return (Zero)
                    }

                    TOFF = Zero
                    Sleep (0x0A)
                    Local6 = TBPS /* \_SB_.PCI0.RP12.POFF.TBPS */
                    TBPS = Zero
                    Sleep (0x0A)
                    Local2 = PDS0 /* \_SB_.PCI0.RP12.POFF.PDS0 */
                    Local3 = PDS1 /* \_SB_.PCI0.RP12.POFF.PDS1 */
                    TBPS = Local6
                    PSD0 = Local1
                    L2TE = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TE)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("Set L23_Rdy Entry")
                    NCB7 = One
                    \PIN.ON (RSTG)
                    RSTF = One
                    ADBG ("Reset pin ON")
                    Sleep (0x0A)
                    If (CondRefOf (PWRG))
                    {
                        If (CondRefOf (WAKP))
                        {
                            ADBG (Concatenate ("WAKP =", ToHexString (WAKP)))
                            ADBG (Concatenate ("WKEN =", ToHexString (WKEN)))
                            If (((WAKP == Zero) || !WKEN))
                            {
                                If (CondRefOf (PCPB))
                                {
                                    If ((PCPB != Zero))
                                    {
                                        \PIN.OFF (PWRG)
                                    }
                                }
                                Else
                                {
                                    \PIN.OFF (PWRG)
                                    ADBG ("Power pin Off")
                                }
                            }
                        }
                        ElseIf (CondRefOf (PCPB))
                        {
                            If ((PCPB != Zero))
                            {
                                \PIN.OFF (PWRG)
                            }
                        }
                        Else
                        {
                            \PIN.OFF (PWRG)
                            ADBG ("Power pin Off")
                        }
                    }

                    If (CondRefOf (TWAP))
                    {
                        If (((TWAP != Zero) && WKEN))
                        {
                            ADBG ("Enable Wake")
                            \_SB.SHPO (TWAP, Zero)
                        }
                    }

                    TBPE = Zero
                    Local6 = \TBOD
                    Local7 = (Local6 & 0x7FFF)
                    Local6 &= 0x8000
                    If ((Local6 == Zero))
                    {
                        Sleep (\TBOD)
                    }
                    ElseIf (((Local2 == One) || (Local3 == One)))
                    {
                        Sleep (Local7)
                    }
                    Else
                    {
                        Sleep (0x03E8)
                    }

                    ADBG (Concatenate ("HPSX_End=", ToHexString (HPSX)))
                    ADBG (Concatenate ("PMSX_End=", ToHexString (PMSX)))
                    If (CondRefOf (PDOF))
                    {
                        If (PSON)
                        {
                            PDOF ()
                        }
                    }
                }

                Method (NFRP, 0, Serialized)
                {
                    Local0 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (TBDA, SystemMemory, Local0, 0xE0)
                    Field (TBDA, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0xD8), 
                            ,   30, 
                        HPSE,   1, 
                        PMSE,   1, 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    If ((TBTS == One))
                    {
                        HPSE = Zero
                        PMSE = Zero
                        Notify (^, Zero) // Bus Check
                        If ((PMSX == One))
                        {
                            Local2 = One
                        }

                        Notify (^, 0x02) // Device Wake
                        Local1 = One
                    }

                    If ((Local1 == One))
                    {
                        HPSX = One
                        If ((Local2 == One))
                        {
                            PMSX = One
                        }
                    }
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    ADBG ("_PR0")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    ADBG ("_PR3")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            Method (TBNF, 0, NotSerialized)
            {
                Notify (\_SB.PCI0.RP12, 0x02) // Device Wake
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If ((\RTBT == One))
                {
                    ADBG ("TBT RTD3 _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
                Else
                {
                    ADBG ("TBT _DSD")
                    Return (Package (0x02)
                    {
                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x0D) || (RPS1 == 0x0D))))
    {
        Scope (\_SB.PCI0.RP13.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (TARS) /* \TARS */
            }

            Device (EP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Device (TXHC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x69
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x14))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x15))
                            }
                        }
                    }
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((NEXP == Zero))
                {
                    Debug = " Host router Upstream port _PS3"
                    Acquire (OSUM, 0xFFFF)
                    Local0 = MMTB (RPS0, RPT0)
                    \_GPE.SXST (Local0)
                    Release (OSUM)
                }
            }
        }

        Scope (\_SB.PCI0.RP13)
        {
            If ((\RTBT == One))
            {
                Name (G2SD, Zero)
                Name (RSTF, Zero)
                Name (WKEN, Zero)
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (RSTG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Method (DINI, 0, NotSerialized)
                {
                    ADBG ("DINI")
                    ADBG (Concatenate ("Reset pin=", ToHexString (RSG0)))
                    ADBG (Concatenate ("Reset pin level = ", ToHexString (RS0L)))
                    RSTG [Zero] = RSG0 /* \RSG0 */
                    RSTG [One] = RS0L /* \RS0L */
                    ADBG (Concatenate ("power pin=", ToHexString (TWRP)))
                    ADBG (Concatenate ("power pin level = ", ToHexString (TWRA)))
                    PWRG [Zero] = TWRP /* \TWRP */
                    PWRG [One] = TWRA /* \TWRA */
                    ADBG ("DINI End")
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg0 =", ToHexString (Arg0)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg1 =", ToHexString (Arg1)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg2 =", ToHexString (Arg2)))
                    If ((Arg1 >= One))
                    {
                        WKEN = Zero
                        TOFF = 0x02
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 2")
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                        TOFF = One
                        ADBG ("WKEN = 1")
                        ADBG ("TOFF = 1")
                    }
                    Else
                    {
                        WKEN = Zero
                        TOFF = Zero
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 0")
                    }
                }

                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXP._STA")
                        DINI ()
                        Return (PSTA ())
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXP._ON")
                        TRDO = One
                        PON ()
                        TRDO = Zero
                        ADBG ("PXP._ON END")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXP._OFF")
                        TRD3 = One
                        POFF ()
                        TRD3 = Zero
                        ADBG ("PXP._OFF END")
                    }
                }

                Method (PSTA, 0, NotSerialized)
                {
                    If ((RSTF == One))
                    {
                        ADBG ("PSTA return 0")
                        Return (Zero)
                    }
                    Else
                    {
                        ADBG ("PSTA return 1")
                        Return (One)
                    }
                }

                Method (SXEX, 0, Serialized)
                {
                    ADBG ("SXEX")
                    Local7 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local7, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    Local1 = 0xC8
                    P2TB = 0x09
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP13.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("SXEX Fail")
                            Return (Zero)
                        }

                        If ((Local2 & One))
                        {
                            Break
                        }

                        Sleep (0x05)
                    }

                    P2TB = Zero
                    Local1 = 0x01F4
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP13.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("Device gone")
                            Return (Zero)
                        }

                        If ((DIVI != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    ADBG ("SXEX END")
                }

                Method (PON, 0, NotSerialized)
                {
                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (\RPS0, \RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    If (TBPE)
                    {
                        ADBG ("TBPE = 1")
                        Return (Zero)
                    }

                    G2SD = Zero
                    If (CondRefOf (PWRG))
                    {
                        \PIN.ON (PWRG)
                        Sleep (0x64)
                        ADBG ("Power pin ON")
                    }

                    \PIN.OFF (RSTG)
                    RSTF = Zero
                    ADBG ("Reset pin Off")
                    If ((NCB7 != One))
                    {
                        ADBG ("NCB7 != 1")
                        Return (Zero)
                    }

                    DPGE = Zero
                    L2TR = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TR)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("set L23_Rdy to Detect Transition")
                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP13.PON_.PSD0 */
                    PSD0 = Zero
                    Local2 = 0x14
                    While ((Local2 > Zero))
                    {
                        Local2 = (Local2 - One)
                        Local3 = TB2P /* \_SB_.PCI0.RP13.PON_.TB2P */
                        If ((Local3 != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local2 <= Zero)){}
                    SXEX ()
                    PSD0 = Local1
                    If (CondRefOf (PDON))
                    {
                        PDON ()
                    }
                }

                Method (POFF, 0, NotSerialized)
                {
                    If ((TOFF == Zero))
                    {
                        ADBG ("TOFF == 0")
                        Return (Zero)
                    }

                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    ADBG (Concatenate ("VDID =", ToHexString (VDID)))
                    Local6 += 0x00108000
                    OperationRegion (DSP0, SystemMemory, Local6, 0x0100)
                    Field (DSP0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI0,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS0,   1
                    }

                    Local6 += 0x00018000
                    OperationRegion (DSP1, SystemMemory, Local6, 0x0100)
                    Field (DSP1, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI1,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS1,   1
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP13.POFF.PSD0 */
                    PSD0 = Zero
                    Local3 = P2TB /* \_SB_.PCI0.RP13.POFF.P2TB */
                    If ((TOFF > One))
                    {
                        TOFF = Zero
                        Sleep (0x0A)
                        PSD0 = Local1
                        RSTF = One
                        ADBG ("TOFF > 1")
                        Return (Zero)
                    }

                    TOFF = Zero
                    Sleep (0x0A)
                    Local6 = TBPS /* \_SB_.PCI0.RP13.POFF.TBPS */
                    TBPS = Zero
                    Sleep (0x0A)
                    Local2 = PDS0 /* \_SB_.PCI0.RP13.POFF.PDS0 */
                    Local3 = PDS1 /* \_SB_.PCI0.RP13.POFF.PDS1 */
                    TBPS = Local6
                    PSD0 = Local1
                    L2TE = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TE)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("Set L23_Rdy Entry")
                    NCB7 = One
                    \PIN.ON (RSTG)
                    RSTF = One
                    ADBG ("Reset pin ON")
                    Sleep (0x0A)
                    If (CondRefOf (PWRG))
                    {
                        If (CondRefOf (WAKP))
                        {
                            ADBG (Concatenate ("WAKP =", ToHexString (WAKP)))
                            ADBG (Concatenate ("WKEN =", ToHexString (WKEN)))
                            If (((WAKP == Zero) || !WKEN))
                            {
                                If (CondRefOf (PCPB))
                                {
                                    If ((PCPB != Zero))
                                    {
                                        \PIN.OFF (PWRG)
                                    }
                                }
                                Else
                                {
                                    \PIN.OFF (PWRG)
                                    ADBG ("Power pin Off")
                                }
                            }
                        }
                        ElseIf (CondRefOf (PCPB))
                        {
                            If ((PCPB != Zero))
                            {
                                \PIN.OFF (PWRG)
                            }
                        }
                        Else
                        {
                            \PIN.OFF (PWRG)
                            ADBG ("Power pin Off")
                        }
                    }

                    If (CondRefOf (TWAP))
                    {
                        If (((TWAP != Zero) && WKEN))
                        {
                            ADBG ("Enable Wake")
                            \_SB.SHPO (TWAP, Zero)
                        }
                    }

                    TBPE = Zero
                    Local6 = \TBOD
                    Local7 = (Local6 & 0x7FFF)
                    Local6 &= 0x8000
                    If ((Local6 == Zero))
                    {
                        Sleep (\TBOD)
                    }
                    ElseIf (((Local2 == One) || (Local3 == One)))
                    {
                        Sleep (Local7)
                    }
                    Else
                    {
                        Sleep (0x03E8)
                    }

                    ADBG (Concatenate ("HPSX_End=", ToHexString (HPSX)))
                    ADBG (Concatenate ("PMSX_End=", ToHexString (PMSX)))
                    If (CondRefOf (PDOF))
                    {
                        If (PSON)
                        {
                            PDOF ()
                        }
                    }
                }

                Method (NFRP, 0, Serialized)
                {
                    Local0 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (TBDA, SystemMemory, Local0, 0xE0)
                    Field (TBDA, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0xD8), 
                            ,   30, 
                        HPSE,   1, 
                        PMSE,   1, 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    If ((TBTS == One))
                    {
                        HPSE = Zero
                        PMSE = Zero
                        Notify (^, Zero) // Bus Check
                        If ((PMSX == One))
                        {
                            Local2 = One
                        }

                        Notify (^, 0x02) // Device Wake
                        Local1 = One
                    }

                    If ((Local1 == One))
                    {
                        HPSX = One
                        If ((Local2 == One))
                        {
                            PMSX = One
                        }
                    }
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    ADBG ("_PR0")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    ADBG ("_PR3")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            Method (TBNF, 0, NotSerialized)
            {
                Notify (\_SB.PCI0.RP13, 0x02) // Device Wake
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If ((\RTBT == One))
                {
                    ADBG ("TBT RTD3 _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
                Else
                {
                    ADBG ("TBT _DSD")
                    Return (Package (0x02)
                    {
                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x0E) || (RPS1 == 0x0E))))
    {
        Scope (\_SB.PCI0.RP14.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (TARS) /* \TARS */
            }

            Device (EP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Device (TXHC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x69
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x14))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x15))
                            }
                        }
                    }
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((NEXP == Zero))
                {
                    Debug = " Host router Upstream port _PS3"
                    Acquire (OSUM, 0xFFFF)
                    Local0 = MMTB (RPS0, RPT0)
                    \_GPE.SXST (Local0)
                    Release (OSUM)
                }
            }
        }

        Scope (\_SB.PCI0.RP14)
        {
            If ((\RTBT == One))
            {
                Name (G2SD, Zero)
                Name (RSTF, Zero)
                Name (WKEN, Zero)
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (RSTG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Method (DINI, 0, NotSerialized)
                {
                    ADBG ("DINI")
                    ADBG (Concatenate ("Reset pin=", ToHexString (RSG0)))
                    ADBG (Concatenate ("Reset pin level = ", ToHexString (RS0L)))
                    RSTG [Zero] = RSG0 /* \RSG0 */
                    RSTG [One] = RS0L /* \RS0L */
                    ADBG (Concatenate ("power pin=", ToHexString (TWRP)))
                    ADBG (Concatenate ("power pin level = ", ToHexString (TWRA)))
                    PWRG [Zero] = TWRP /* \TWRP */
                    PWRG [One] = TWRA /* \TWRA */
                    ADBG ("DINI End")
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg0 =", ToHexString (Arg0)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg1 =", ToHexString (Arg1)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg2 =", ToHexString (Arg2)))
                    If ((Arg1 >= One))
                    {
                        WKEN = Zero
                        TOFF = 0x02
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 2")
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                        TOFF = One
                        ADBG ("WKEN = 1")
                        ADBG ("TOFF = 1")
                    }
                    Else
                    {
                        WKEN = Zero
                        TOFF = Zero
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 0")
                    }
                }

                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXP._STA")
                        DINI ()
                        Return (PSTA ())
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXP._ON")
                        TRDO = One
                        PON ()
                        TRDO = Zero
                        ADBG ("PXP._ON END")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXP._OFF")
                        TRD3 = One
                        POFF ()
                        TRD3 = Zero
                        ADBG ("PXP._OFF END")
                    }
                }

                Method (PSTA, 0, NotSerialized)
                {
                    If ((RSTF == One))
                    {
                        ADBG ("PSTA return 0")
                        Return (Zero)
                    }
                    Else
                    {
                        ADBG ("PSTA return 1")
                        Return (One)
                    }
                }

                Method (SXEX, 0, Serialized)
                {
                    ADBG ("SXEX")
                    Local7 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local7, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    Local1 = 0xC8
                    P2TB = 0x09
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP14.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("SXEX Fail")
                            Return (Zero)
                        }

                        If ((Local2 & One))
                        {
                            Break
                        }

                        Sleep (0x05)
                    }

                    P2TB = Zero
                    Local1 = 0x01F4
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP14.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("Device gone")
                            Return (Zero)
                        }

                        If ((DIVI != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    ADBG ("SXEX END")
                }

                Method (PON, 0, NotSerialized)
                {
                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (\RPS0, \RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    If (TBPE)
                    {
                        ADBG ("TBPE = 1")
                        Return (Zero)
                    }

                    G2SD = Zero
                    If (CondRefOf (PWRG))
                    {
                        \PIN.ON (PWRG)
                        Sleep (0x64)
                        ADBG ("Power pin ON")
                    }

                    \PIN.OFF (RSTG)
                    RSTF = Zero
                    ADBG ("Reset pin Off")
                    If ((NCB7 != One))
                    {
                        ADBG ("NCB7 != 1")
                        Return (Zero)
                    }

                    DPGE = Zero
                    L2TR = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TR)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("set L23_Rdy to Detect Transition")
                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP14.PON_.PSD0 */
                    PSD0 = Zero
                    Local2 = 0x14
                    While ((Local2 > Zero))
                    {
                        Local2 = (Local2 - One)
                        Local3 = TB2P /* \_SB_.PCI0.RP14.PON_.TB2P */
                        If ((Local3 != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local2 <= Zero)){}
                    SXEX ()
                    PSD0 = Local1
                    If (CondRefOf (PDON))
                    {
                        PDON ()
                    }
                }

                Method (POFF, 0, NotSerialized)
                {
                    If ((TOFF == Zero))
                    {
                        ADBG ("TOFF == 0")
                        Return (Zero)
                    }

                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    ADBG (Concatenate ("VDID =", ToHexString (VDID)))
                    Local6 += 0x00108000
                    OperationRegion (DSP0, SystemMemory, Local6, 0x0100)
                    Field (DSP0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI0,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS0,   1
                    }

                    Local6 += 0x00018000
                    OperationRegion (DSP1, SystemMemory, Local6, 0x0100)
                    Field (DSP1, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI1,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS1,   1
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP14.POFF.PSD0 */
                    PSD0 = Zero
                    Local3 = P2TB /* \_SB_.PCI0.RP14.POFF.P2TB */
                    If ((TOFF > One))
                    {
                        TOFF = Zero
                        Sleep (0x0A)
                        PSD0 = Local1
                        RSTF = One
                        ADBG ("TOFF > 1")
                        Return (Zero)
                    }

                    TOFF = Zero
                    Sleep (0x0A)
                    Local6 = TBPS /* \_SB_.PCI0.RP14.POFF.TBPS */
                    TBPS = Zero
                    Sleep (0x0A)
                    Local2 = PDS0 /* \_SB_.PCI0.RP14.POFF.PDS0 */
                    Local3 = PDS1 /* \_SB_.PCI0.RP14.POFF.PDS1 */
                    TBPS = Local6
                    PSD0 = Local1
                    L2TE = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TE)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("Set L23_Rdy Entry")
                    NCB7 = One
                    \PIN.ON (RSTG)
                    RSTF = One
                    ADBG ("Reset pin ON")
                    Sleep (0x0A)
                    If (CondRefOf (PWRG))
                    {
                        If (CondRefOf (WAKP))
                        {
                            ADBG (Concatenate ("WAKP =", ToHexString (WAKP)))
                            ADBG (Concatenate ("WKEN =", ToHexString (WKEN)))
                            If (((WAKP == Zero) || !WKEN))
                            {
                                If (CondRefOf (PCPB))
                                {
                                    If ((PCPB != Zero))
                                    {
                                        \PIN.OFF (PWRG)
                                    }
                                }
                                Else
                                {
                                    \PIN.OFF (PWRG)
                                    ADBG ("Power pin Off")
                                }
                            }
                        }
                        ElseIf (CondRefOf (PCPB))
                        {
                            If ((PCPB != Zero))
                            {
                                \PIN.OFF (PWRG)
                            }
                        }
                        Else
                        {
                            \PIN.OFF (PWRG)
                            ADBG ("Power pin Off")
                        }
                    }

                    If (CondRefOf (TWAP))
                    {
                        If (((TWAP != Zero) && WKEN))
                        {
                            ADBG ("Enable Wake")
                            \_SB.SHPO (TWAP, Zero)
                        }
                    }

                    TBPE = Zero
                    Local6 = \TBOD
                    Local7 = (Local6 & 0x7FFF)
                    Local6 &= 0x8000
                    If ((Local6 == Zero))
                    {
                        Sleep (\TBOD)
                    }
                    ElseIf (((Local2 == One) || (Local3 == One)))
                    {
                        Sleep (Local7)
                    }
                    Else
                    {
                        Sleep (0x03E8)
                    }

                    ADBG (Concatenate ("HPSX_End=", ToHexString (HPSX)))
                    ADBG (Concatenate ("PMSX_End=", ToHexString (PMSX)))
                    If (CondRefOf (PDOF))
                    {
                        If (PSON)
                        {
                            PDOF ()
                        }
                    }
                }

                Method (NFRP, 0, Serialized)
                {
                    Local0 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (TBDA, SystemMemory, Local0, 0xE0)
                    Field (TBDA, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0xD8), 
                            ,   30, 
                        HPSE,   1, 
                        PMSE,   1, 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    If ((TBTS == One))
                    {
                        HPSE = Zero
                        PMSE = Zero
                        Notify (^, Zero) // Bus Check
                        If ((PMSX == One))
                        {
                            Local2 = One
                        }

                        Notify (^, 0x02) // Device Wake
                        Local1 = One
                    }

                    If ((Local1 == One))
                    {
                        HPSX = One
                        If ((Local2 == One))
                        {
                            PMSX = One
                        }
                    }
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    ADBG ("_PR0")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    ADBG ("_PR3")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            Method (TBNF, 0, NotSerialized)
            {
                Notify (\_SB.PCI0.RP14, 0x02) // Device Wake
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If ((\RTBT == One))
                {
                    ADBG ("TBT RTD3 _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
                Else
                {
                    ADBG ("TBT _DSD")
                    Return (Package (0x02)
                    {
                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x0F) || (RPS1 == 0x0F))))
    {
        Scope (\_SB.PCI0.RP15.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (TARS) /* \TARS */
            }

            Device (EP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Device (TXHC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x69
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x14))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x15))
                            }
                        }
                    }
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((NEXP == Zero))
                {
                    Debug = " Host router Upstream port _PS3"
                    Acquire (OSUM, 0xFFFF)
                    Local0 = MMTB (RPS0, RPT0)
                    \_GPE.SXST (Local0)
                    Release (OSUM)
                }
            }
        }

        Scope (\_SB.PCI0.RP15)
        {
            If ((\RTBT == One))
            {
                Name (G2SD, Zero)
                Name (RSTF, Zero)
                Name (WKEN, Zero)
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (RSTG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Method (DINI, 0, NotSerialized)
                {
                    ADBG ("DINI")
                    ADBG (Concatenate ("Reset pin=", ToHexString (RSG0)))
                    ADBG (Concatenate ("Reset pin level = ", ToHexString (RS0L)))
                    RSTG [Zero] = RSG0 /* \RSG0 */
                    RSTG [One] = RS0L /* \RS0L */
                    ADBG (Concatenate ("power pin=", ToHexString (TWRP)))
                    ADBG (Concatenate ("power pin level = ", ToHexString (TWRA)))
                    PWRG [Zero] = TWRP /* \TWRP */
                    PWRG [One] = TWRA /* \TWRA */
                    ADBG ("DINI End")
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg0 =", ToHexString (Arg0)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg1 =", ToHexString (Arg1)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg2 =", ToHexString (Arg2)))
                    If ((Arg1 >= One))
                    {
                        WKEN = Zero
                        TOFF = 0x02
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 2")
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                        TOFF = One
                        ADBG ("WKEN = 1")
                        ADBG ("TOFF = 1")
                    }
                    Else
                    {
                        WKEN = Zero
                        TOFF = Zero
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 0")
                    }
                }

                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXP._STA")
                        DINI ()
                        Return (PSTA ())
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXP._ON")
                        TRDO = One
                        PON ()
                        TRDO = Zero
                        ADBG ("PXP._ON END")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXP._OFF")
                        TRD3 = One
                        POFF ()
                        TRD3 = Zero
                        ADBG ("PXP._OFF END")
                    }
                }

                Method (PSTA, 0, NotSerialized)
                {
                    If ((RSTF == One))
                    {
                        ADBG ("PSTA return 0")
                        Return (Zero)
                    }
                    Else
                    {
                        ADBG ("PSTA return 1")
                        Return (One)
                    }
                }

                Method (SXEX, 0, Serialized)
                {
                    ADBG ("SXEX")
                    Local7 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local7, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    Local1 = 0xC8
                    P2TB = 0x09
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP15.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("SXEX Fail")
                            Return (Zero)
                        }

                        If ((Local2 & One))
                        {
                            Break
                        }

                        Sleep (0x05)
                    }

                    P2TB = Zero
                    Local1 = 0x01F4
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP15.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("Device gone")
                            Return (Zero)
                        }

                        If ((DIVI != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    ADBG ("SXEX END")
                }

                Method (PON, 0, NotSerialized)
                {
                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (\RPS0, \RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    If (TBPE)
                    {
                        ADBG ("TBPE = 1")
                        Return (Zero)
                    }

                    G2SD = Zero
                    If (CondRefOf (PWRG))
                    {
                        \PIN.ON (PWRG)
                        Sleep (0x64)
                        ADBG ("Power pin ON")
                    }

                    \PIN.OFF (RSTG)
                    RSTF = Zero
                    ADBG ("Reset pin Off")
                    If ((NCB7 != One))
                    {
                        ADBG ("NCB7 != 1")
                        Return (Zero)
                    }

                    DPGE = Zero
                    L2TR = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TR)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("set L23_Rdy to Detect Transition")
                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP15.PON_.PSD0 */
                    PSD0 = Zero
                    Local2 = 0x14
                    While ((Local2 > Zero))
                    {
                        Local2 = (Local2 - One)
                        Local3 = TB2P /* \_SB_.PCI0.RP15.PON_.TB2P */
                        If ((Local3 != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local2 <= Zero)){}
                    SXEX ()
                    PSD0 = Local1
                    If (CondRefOf (PDON))
                    {
                        PDON ()
                    }
                }

                Method (POFF, 0, NotSerialized)
                {
                    If ((TOFF == Zero))
                    {
                        ADBG ("TOFF == 0")
                        Return (Zero)
                    }

                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    ADBG (Concatenate ("VDID =", ToHexString (VDID)))
                    Local6 += 0x00108000
                    OperationRegion (DSP0, SystemMemory, Local6, 0x0100)
                    Field (DSP0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI0,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS0,   1
                    }

                    Local6 += 0x00018000
                    OperationRegion (DSP1, SystemMemory, Local6, 0x0100)
                    Field (DSP1, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI1,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS1,   1
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP15.POFF.PSD0 */
                    PSD0 = Zero
                    Local3 = P2TB /* \_SB_.PCI0.RP15.POFF.P2TB */
                    If ((TOFF > One))
                    {
                        TOFF = Zero
                        Sleep (0x0A)
                        PSD0 = Local1
                        RSTF = One
                        ADBG ("TOFF > 1")
                        Return (Zero)
                    }

                    TOFF = Zero
                    Sleep (0x0A)
                    Local6 = TBPS /* \_SB_.PCI0.RP15.POFF.TBPS */
                    TBPS = Zero
                    Sleep (0x0A)
                    Local2 = PDS0 /* \_SB_.PCI0.RP15.POFF.PDS0 */
                    Local3 = PDS1 /* \_SB_.PCI0.RP15.POFF.PDS1 */
                    TBPS = Local6
                    PSD0 = Local1
                    L2TE = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TE)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("Set L23_Rdy Entry")
                    NCB7 = One
                    \PIN.ON (RSTG)
                    RSTF = One
                    ADBG ("Reset pin ON")
                    Sleep (0x0A)
                    If (CondRefOf (PWRG))
                    {
                        If (CondRefOf (WAKP))
                        {
                            ADBG (Concatenate ("WAKP =", ToHexString (WAKP)))
                            ADBG (Concatenate ("WKEN =", ToHexString (WKEN)))
                            If (((WAKP == Zero) || !WKEN))
                            {
                                If (CondRefOf (PCPB))
                                {
                                    If ((PCPB != Zero))
                                    {
                                        \PIN.OFF (PWRG)
                                    }
                                }
                                Else
                                {
                                    \PIN.OFF (PWRG)
                                    ADBG ("Power pin Off")
                                }
                            }
                        }
                        ElseIf (CondRefOf (PCPB))
                        {
                            If ((PCPB != Zero))
                            {
                                \PIN.OFF (PWRG)
                            }
                        }
                        Else
                        {
                            \PIN.OFF (PWRG)
                            ADBG ("Power pin Off")
                        }
                    }

                    If (CondRefOf (TWAP))
                    {
                        If (((TWAP != Zero) && WKEN))
                        {
                            ADBG ("Enable Wake")
                            \_SB.SHPO (TWAP, Zero)
                        }
                    }

                    TBPE = Zero
                    Local6 = \TBOD
                    Local7 = (Local6 & 0x7FFF)
                    Local6 &= 0x8000
                    If ((Local6 == Zero))
                    {
                        Sleep (\TBOD)
                    }
                    ElseIf (((Local2 == One) || (Local3 == One)))
                    {
                        Sleep (Local7)
                    }
                    Else
                    {
                        Sleep (0x03E8)
                    }

                    ADBG (Concatenate ("HPSX_End=", ToHexString (HPSX)))
                    ADBG (Concatenate ("PMSX_End=", ToHexString (PMSX)))
                    If (CondRefOf (PDOF))
                    {
                        If (PSON)
                        {
                            PDOF ()
                        }
                    }
                }

                Method (NFRP, 0, Serialized)
                {
                    Local0 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (TBDA, SystemMemory, Local0, 0xE0)
                    Field (TBDA, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0xD8), 
                            ,   30, 
                        HPSE,   1, 
                        PMSE,   1, 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    If ((TBTS == One))
                    {
                        HPSE = Zero
                        PMSE = Zero
                        Notify (^, Zero) // Bus Check
                        If ((PMSX == One))
                        {
                            Local2 = One
                        }

                        Notify (^, 0x02) // Device Wake
                        Local1 = One
                    }

                    If ((Local1 == One))
                    {
                        HPSX = One
                        If ((Local2 == One))
                        {
                            PMSX = One
                        }
                    }
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    ADBG ("_PR0")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    ADBG ("_PR3")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            Method (TBNF, 0, NotSerialized)
            {
                Notify (\_SB.PCI0.RP15, 0x02) // Device Wake
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If ((\RTBT == One))
                {
                    ADBG ("TBT RTD3 _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
                Else
                {
                    ADBG ("TBT _DSD")
                    Return (Package (0x02)
                    {
                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x10) || (RPS1 == 0x10))))
    {
        Scope (\_SB.PCI0.RP16.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (TARS) /* \TARS */
            }

            Device (EP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Device (TXHC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x69
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x14))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x15))
                            }
                        }
                    }
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((NEXP == Zero))
                {
                    Debug = " Host router Upstream port _PS3"
                    Acquire (OSUM, 0xFFFF)
                    Local0 = MMTB (RPS0, RPT0)
                    \_GPE.SXST (Local0)
                    Release (OSUM)
                }
            }
        }

        Scope (\_SB.PCI0.RP16)
        {
            If ((\RTBT == One))
            {
                Name (G2SD, Zero)
                Name (RSTF, Zero)
                Name (WKEN, Zero)
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (RSTG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Method (DINI, 0, NotSerialized)
                {
                    ADBG ("DINI")
                    ADBG (Concatenate ("Reset pin=", ToHexString (RSG0)))
                    ADBG (Concatenate ("Reset pin level = ", ToHexString (RS0L)))
                    RSTG [Zero] = RSG0 /* \RSG0 */
                    RSTG [One] = RS0L /* \RS0L */
                    ADBG (Concatenate ("power pin=", ToHexString (TWRP)))
                    ADBG (Concatenate ("power pin level = ", ToHexString (TWRA)))
                    PWRG [Zero] = TWRP /* \TWRP */
                    PWRG [One] = TWRA /* \TWRA */
                    ADBG ("DINI End")
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg0 =", ToHexString (Arg0)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg1 =", ToHexString (Arg1)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg2 =", ToHexString (Arg2)))
                    If ((Arg1 >= One))
                    {
                        WKEN = Zero
                        TOFF = 0x02
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 2")
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                        TOFF = One
                        ADBG ("WKEN = 1")
                        ADBG ("TOFF = 1")
                    }
                    Else
                    {
                        WKEN = Zero
                        TOFF = Zero
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 0")
                    }
                }

                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXP._STA")
                        DINI ()
                        Return (PSTA ())
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXP._ON")
                        TRDO = One
                        PON ()
                        TRDO = Zero
                        ADBG ("PXP._ON END")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXP._OFF")
                        TRD3 = One
                        POFF ()
                        TRD3 = Zero
                        ADBG ("PXP._OFF END")
                    }
                }

                Method (PSTA, 0, NotSerialized)
                {
                    If ((RSTF == One))
                    {
                        ADBG ("PSTA return 0")
                        Return (Zero)
                    }
                    Else
                    {
                        ADBG ("PSTA return 1")
                        Return (One)
                    }
                }

                Method (SXEX, 0, Serialized)
                {
                    ADBG ("SXEX")
                    Local7 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local7, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    Local1 = 0xC8
                    P2TB = 0x09
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP16.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("SXEX Fail")
                            Return (Zero)
                        }

                        If ((Local2 & One))
                        {
                            Break
                        }

                        Sleep (0x05)
                    }

                    P2TB = Zero
                    Local1 = 0x01F4
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP16.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("Device gone")
                            Return (Zero)
                        }

                        If ((DIVI != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    ADBG ("SXEX END")
                }

                Method (PON, 0, NotSerialized)
                {
                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (\RPS0, \RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    If (TBPE)
                    {
                        ADBG ("TBPE = 1")
                        Return (Zero)
                    }

                    G2SD = Zero
                    If (CondRefOf (PWRG))
                    {
                        \PIN.ON (PWRG)
                        Sleep (0x64)
                        ADBG ("Power pin ON")
                    }

                    \PIN.OFF (RSTG)
                    RSTF = Zero
                    ADBG ("Reset pin Off")
                    If ((NCB7 != One))
                    {
                        ADBG ("NCB7 != 1")
                        Return (Zero)
                    }

                    DPGE = Zero
                    L2TR = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TR)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("set L23_Rdy to Detect Transition")
                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP16.PON_.PSD0 */
                    PSD0 = Zero
                    Local2 = 0x14
                    While ((Local2 > Zero))
                    {
                        Local2 = (Local2 - One)
                        Local3 = TB2P /* \_SB_.PCI0.RP16.PON_.TB2P */
                        If ((Local3 != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local2 <= Zero)){}
                    SXEX ()
                    PSD0 = Local1
                    If (CondRefOf (PDON))
                    {
                        PDON ()
                    }
                }

                Method (POFF, 0, NotSerialized)
                {
                    If ((TOFF == Zero))
                    {
                        ADBG ("TOFF == 0")
                        Return (Zero)
                    }

                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    ADBG (Concatenate ("VDID =", ToHexString (VDID)))
                    Local6 += 0x00108000
                    OperationRegion (DSP0, SystemMemory, Local6, 0x0100)
                    Field (DSP0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI0,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS0,   1
                    }

                    Local6 += 0x00018000
                    OperationRegion (DSP1, SystemMemory, Local6, 0x0100)
                    Field (DSP1, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI1,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS1,   1
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP16.POFF.PSD0 */
                    PSD0 = Zero
                    Local3 = P2TB /* \_SB_.PCI0.RP16.POFF.P2TB */
                    If ((TOFF > One))
                    {
                        TOFF = Zero
                        Sleep (0x0A)
                        PSD0 = Local1
                        RSTF = One
                        ADBG ("TOFF > 1")
                        Return (Zero)
                    }

                    TOFF = Zero
                    Sleep (0x0A)
                    Local6 = TBPS /* \_SB_.PCI0.RP16.POFF.TBPS */
                    TBPS = Zero
                    Sleep (0x0A)
                    Local2 = PDS0 /* \_SB_.PCI0.RP16.POFF.PDS0 */
                    Local3 = PDS1 /* \_SB_.PCI0.RP16.POFF.PDS1 */
                    TBPS = Local6
                    PSD0 = Local1
                    L2TE = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TE)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("Set L23_Rdy Entry")
                    NCB7 = One
                    \PIN.ON (RSTG)
                    RSTF = One
                    ADBG ("Reset pin ON")
                    Sleep (0x0A)
                    If (CondRefOf (PWRG))
                    {
                        If (CondRefOf (WAKP))
                        {
                            ADBG (Concatenate ("WAKP =", ToHexString (WAKP)))
                            ADBG (Concatenate ("WKEN =", ToHexString (WKEN)))
                            If (((WAKP == Zero) || !WKEN))
                            {
                                If (CondRefOf (PCPB))
                                {
                                    If ((PCPB != Zero))
                                    {
                                        \PIN.OFF (PWRG)
                                    }
                                }
                                Else
                                {
                                    \PIN.OFF (PWRG)
                                    ADBG ("Power pin Off")
                                }
                            }
                        }
                        ElseIf (CondRefOf (PCPB))
                        {
                            If ((PCPB != Zero))
                            {
                                \PIN.OFF (PWRG)
                            }
                        }
                        Else
                        {
                            \PIN.OFF (PWRG)
                            ADBG ("Power pin Off")
                        }
                    }

                    If (CondRefOf (TWAP))
                    {
                        If (((TWAP != Zero) && WKEN))
                        {
                            ADBG ("Enable Wake")
                            \_SB.SHPO (TWAP, Zero)
                        }
                    }

                    TBPE = Zero
                    Local6 = \TBOD
                    Local7 = (Local6 & 0x7FFF)
                    Local6 &= 0x8000
                    If ((Local6 == Zero))
                    {
                        Sleep (\TBOD)
                    }
                    ElseIf (((Local2 == One) || (Local3 == One)))
                    {
                        Sleep (Local7)
                    }
                    Else
                    {
                        Sleep (0x03E8)
                    }

                    ADBG (Concatenate ("HPSX_End=", ToHexString (HPSX)))
                    ADBG (Concatenate ("PMSX_End=", ToHexString (PMSX)))
                    If (CondRefOf (PDOF))
                    {
                        If (PSON)
                        {
                            PDOF ()
                        }
                    }
                }

                Method (NFRP, 0, Serialized)
                {
                    Local0 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (TBDA, SystemMemory, Local0, 0xE0)
                    Field (TBDA, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0xD8), 
                            ,   30, 
                        HPSE,   1, 
                        PMSE,   1, 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    If ((TBTS == One))
                    {
                        HPSE = Zero
                        PMSE = Zero
                        Notify (^, Zero) // Bus Check
                        If ((PMSX == One))
                        {
                            Local2 = One
                        }

                        Notify (^, 0x02) // Device Wake
                        Local1 = One
                    }

                    If ((Local1 == One))
                    {
                        HPSX = One
                        If ((Local2 == One))
                        {
                            PMSX = One
                        }
                    }
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    ADBG ("_PR0")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    ADBG ("_PR3")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            Method (TBNF, 0, NotSerialized)
            {
                Notify (\_SB.PCI0.RP16, 0x02) // Device Wake
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If ((\RTBT == One))
                {
                    ADBG ("TBT RTD3 _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
                Else
                {
                    ADBG ("TBT _DSD")
                    Return (Package (0x02)
                    {
                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x11) || (RPS1 == 0x11))))
    {
        Scope (\_SB.PCI0.RP17.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (TARS) /* \TARS */
            }

            Device (EP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Device (TXHC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x69
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x14))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x15))
                            }
                        }
                    }
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((NEXP == Zero))
                {
                    Debug = " Host router Upstream port _PS3"
                    Acquire (OSUM, 0xFFFF)
                    Local0 = MMTB (RPS0, RPT0)
                    \_GPE.SXST (Local0)
                    Release (OSUM)
                }
            }
        }

        Scope (\_SB.PCI0.RP17)
        {
            If ((\RTBT == One))
            {
                Name (G2SD, Zero)
                Name (RSTF, Zero)
                Name (WKEN, Zero)
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (RSTG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Method (DINI, 0, NotSerialized)
                {
                    ADBG ("DINI")
                    ADBG (Concatenate ("Reset pin=", ToHexString (RSG0)))
                    ADBG (Concatenate ("Reset pin level = ", ToHexString (RS0L)))
                    RSTG [Zero] = RSG0 /* \RSG0 */
                    RSTG [One] = RS0L /* \RS0L */
                    ADBG (Concatenate ("power pin=", ToHexString (TWRP)))
                    ADBG (Concatenate ("power pin level = ", ToHexString (TWRA)))
                    PWRG [Zero] = TWRP /* \TWRP */
                    PWRG [One] = TWRA /* \TWRA */
                    ADBG ("DINI End")
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg0 =", ToHexString (Arg0)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg1 =", ToHexString (Arg1)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg2 =", ToHexString (Arg2)))
                    If ((Arg1 >= One))
                    {
                        WKEN = Zero
                        TOFF = 0x02
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 2")
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                        TOFF = One
                        ADBG ("WKEN = 1")
                        ADBG ("TOFF = 1")
                    }
                    Else
                    {
                        WKEN = Zero
                        TOFF = Zero
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 0")
                    }
                }

                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXP._STA")
                        DINI ()
                        Return (PSTA ())
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXP._ON")
                        TRDO = One
                        PON ()
                        TRDO = Zero
                        ADBG ("PXP._ON END")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXP._OFF")
                        TRD3 = One
                        POFF ()
                        TRD3 = Zero
                        ADBG ("PXP._OFF END")
                    }
                }

                Method (PSTA, 0, NotSerialized)
                {
                    If ((RSTF == One))
                    {
                        ADBG ("PSTA return 0")
                        Return (Zero)
                    }
                    Else
                    {
                        ADBG ("PSTA return 1")
                        Return (One)
                    }
                }

                Method (SXEX, 0, Serialized)
                {
                    ADBG ("SXEX")
                    Local7 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local7, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    Local1 = 0xC8
                    P2TB = 0x09
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP17.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("SXEX Fail")
                            Return (Zero)
                        }

                        If ((Local2 & One))
                        {
                            Break
                        }

                        Sleep (0x05)
                    }

                    P2TB = Zero
                    Local1 = 0x01F4
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP17.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("Device gone")
                            Return (Zero)
                        }

                        If ((DIVI != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    ADBG ("SXEX END")
                }

                Method (PON, 0, NotSerialized)
                {
                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (\RPS0, \RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    If (TBPE)
                    {
                        ADBG ("TBPE = 1")
                        Return (Zero)
                    }

                    G2SD = Zero
                    If (CondRefOf (PWRG))
                    {
                        \PIN.ON (PWRG)
                        Sleep (0x64)
                        ADBG ("Power pin ON")
                    }

                    \PIN.OFF (RSTG)
                    RSTF = Zero
                    ADBG ("Reset pin Off")
                    If ((NCB7 != One))
                    {
                        ADBG ("NCB7 != 1")
                        Return (Zero)
                    }

                    DPGE = Zero
                    L2TR = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TR)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("set L23_Rdy to Detect Transition")
                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP17.PON_.PSD0 */
                    PSD0 = Zero
                    Local2 = 0x14
                    While ((Local2 > Zero))
                    {
                        Local2 = (Local2 - One)
                        Local3 = TB2P /* \_SB_.PCI0.RP17.PON_.TB2P */
                        If ((Local3 != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local2 <= Zero)){}
                    SXEX ()
                    PSD0 = Local1
                    If (CondRefOf (PDON))
                    {
                        PDON ()
                    }
                }

                Method (POFF, 0, NotSerialized)
                {
                    If ((TOFF == Zero))
                    {
                        ADBG ("TOFF == 0")
                        Return (Zero)
                    }

                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    ADBG (Concatenate ("VDID =", ToHexString (VDID)))
                    Local6 += 0x00108000
                    OperationRegion (DSP0, SystemMemory, Local6, 0x0100)
                    Field (DSP0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI0,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS0,   1
                    }

                    Local6 += 0x00018000
                    OperationRegion (DSP1, SystemMemory, Local6, 0x0100)
                    Field (DSP1, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI1,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS1,   1
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP17.POFF.PSD0 */
                    PSD0 = Zero
                    Local3 = P2TB /* \_SB_.PCI0.RP17.POFF.P2TB */
                    If ((TOFF > One))
                    {
                        TOFF = Zero
                        Sleep (0x0A)
                        PSD0 = Local1
                        RSTF = One
                        ADBG ("TOFF > 1")
                        Return (Zero)
                    }

                    TOFF = Zero
                    Sleep (0x0A)
                    Local6 = TBPS /* \_SB_.PCI0.RP17.POFF.TBPS */
                    TBPS = Zero
                    Sleep (0x0A)
                    Local2 = PDS0 /* \_SB_.PCI0.RP17.POFF.PDS0 */
                    Local3 = PDS1 /* \_SB_.PCI0.RP17.POFF.PDS1 */
                    TBPS = Local6
                    PSD0 = Local1
                    L2TE = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TE)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("Set L23_Rdy Entry")
                    NCB7 = One
                    \PIN.ON (RSTG)
                    RSTF = One
                    ADBG ("Reset pin ON")
                    Sleep (0x0A)
                    If (CondRefOf (PWRG))
                    {
                        If (CondRefOf (WAKP))
                        {
                            ADBG (Concatenate ("WAKP =", ToHexString (WAKP)))
                            ADBG (Concatenate ("WKEN =", ToHexString (WKEN)))
                            If (((WAKP == Zero) || !WKEN))
                            {
                                If (CondRefOf (PCPB))
                                {
                                    If ((PCPB != Zero))
                                    {
                                        \PIN.OFF (PWRG)
                                    }
                                }
                                Else
                                {
                                    \PIN.OFF (PWRG)
                                    ADBG ("Power pin Off")
                                }
                            }
                        }
                        ElseIf (CondRefOf (PCPB))
                        {
                            If ((PCPB != Zero))
                            {
                                \PIN.OFF (PWRG)
                            }
                        }
                        Else
                        {
                            \PIN.OFF (PWRG)
                            ADBG ("Power pin Off")
                        }
                    }

                    If (CondRefOf (TWAP))
                    {
                        If (((TWAP != Zero) && WKEN))
                        {
                            ADBG ("Enable Wake")
                            \_SB.SHPO (TWAP, Zero)
                        }
                    }

                    TBPE = Zero
                    Local6 = \TBOD
                    Local7 = (Local6 & 0x7FFF)
                    Local6 &= 0x8000
                    If ((Local6 == Zero))
                    {
                        Sleep (\TBOD)
                    }
                    ElseIf (((Local2 == One) || (Local3 == One)))
                    {
                        Sleep (Local7)
                    }
                    Else
                    {
                        Sleep (0x03E8)
                    }

                    ADBG (Concatenate ("HPSX_End=", ToHexString (HPSX)))
                    ADBG (Concatenate ("PMSX_End=", ToHexString (PMSX)))
                    If (CondRefOf (PDOF))
                    {
                        If (PSON)
                        {
                            PDOF ()
                        }
                    }
                }

                Method (NFRP, 0, Serialized)
                {
                    Local0 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (TBDA, SystemMemory, Local0, 0xE0)
                    Field (TBDA, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0xD8), 
                            ,   30, 
                        HPSE,   1, 
                        PMSE,   1, 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    If ((TBTS == One))
                    {
                        HPSE = Zero
                        PMSE = Zero
                        Notify (^, Zero) // Bus Check
                        If ((PMSX == One))
                        {
                            Local2 = One
                        }

                        Notify (^, 0x02) // Device Wake
                        Local1 = One
                    }

                    If ((Local1 == One))
                    {
                        HPSX = One
                        If ((Local2 == One))
                        {
                            PMSX = One
                        }
                    }
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    ADBG ("_PR0")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    ADBG ("_PR3")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            Method (TBNF, 0, NotSerialized)
            {
                Notify (\_SB.PCI0.RP17, 0x02) // Device Wake
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If ((\RTBT == One))
                {
                    ADBG ("TBT RTD3 _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
                Else
                {
                    ADBG ("TBT _DSD")
                    Return (Package (0x02)
                    {
                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x12) || (RPS1 == 0x12))))
    {
        Scope (\_SB.PCI0.RP18.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (TARS) /* \TARS */
            }

            Device (EP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Device (TXHC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x69
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x14))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x15))
                            }
                        }
                    }
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((NEXP == Zero))
                {
                    Debug = " Host router Upstream port _PS3"
                    Acquire (OSUM, 0xFFFF)
                    Local0 = MMTB (RPS0, RPT0)
                    \_GPE.SXST (Local0)
                    Release (OSUM)
                }
            }
        }

        Scope (\_SB.PCI0.RP18)
        {
            If ((\RTBT == One))
            {
                Name (G2SD, Zero)
                Name (RSTF, Zero)
                Name (WKEN, Zero)
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (RSTG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Method (DINI, 0, NotSerialized)
                {
                    ADBG ("DINI")
                    ADBG (Concatenate ("Reset pin=", ToHexString (RSG0)))
                    ADBG (Concatenate ("Reset pin level = ", ToHexString (RS0L)))
                    RSTG [Zero] = RSG0 /* \RSG0 */
                    RSTG [One] = RS0L /* \RS0L */
                    ADBG (Concatenate ("power pin=", ToHexString (TWRP)))
                    ADBG (Concatenate ("power pin level = ", ToHexString (TWRA)))
                    PWRG [Zero] = TWRP /* \TWRP */
                    PWRG [One] = TWRA /* \TWRA */
                    ADBG ("DINI End")
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg0 =", ToHexString (Arg0)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg1 =", ToHexString (Arg1)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg2 =", ToHexString (Arg2)))
                    If ((Arg1 >= One))
                    {
                        WKEN = Zero
                        TOFF = 0x02
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 2")
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                        TOFF = One
                        ADBG ("WKEN = 1")
                        ADBG ("TOFF = 1")
                    }
                    Else
                    {
                        WKEN = Zero
                        TOFF = Zero
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 0")
                    }
                }

                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXP._STA")
                        DINI ()
                        Return (PSTA ())
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXP._ON")
                        TRDO = One
                        PON ()
                        TRDO = Zero
                        ADBG ("PXP._ON END")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXP._OFF")
                        TRD3 = One
                        POFF ()
                        TRD3 = Zero
                        ADBG ("PXP._OFF END")
                    }
                }

                Method (PSTA, 0, NotSerialized)
                {
                    If ((RSTF == One))
                    {
                        ADBG ("PSTA return 0")
                        Return (Zero)
                    }
                    Else
                    {
                        ADBG ("PSTA return 1")
                        Return (One)
                    }
                }

                Method (SXEX, 0, Serialized)
                {
                    ADBG ("SXEX")
                    Local7 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local7, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    Local1 = 0xC8
                    P2TB = 0x09
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP18.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("SXEX Fail")
                            Return (Zero)
                        }

                        If ((Local2 & One))
                        {
                            Break
                        }

                        Sleep (0x05)
                    }

                    P2TB = Zero
                    Local1 = 0x01F4
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP18.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("Device gone")
                            Return (Zero)
                        }

                        If ((DIVI != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    ADBG ("SXEX END")
                }

                Method (PON, 0, NotSerialized)
                {
                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (\RPS0, \RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    If (TBPE)
                    {
                        ADBG ("TBPE = 1")
                        Return (Zero)
                    }

                    G2SD = Zero
                    If (CondRefOf (PWRG))
                    {
                        \PIN.ON (PWRG)
                        Sleep (0x64)
                        ADBG ("Power pin ON")
                    }

                    \PIN.OFF (RSTG)
                    RSTF = Zero
                    ADBG ("Reset pin Off")
                    If ((NCB7 != One))
                    {
                        ADBG ("NCB7 != 1")
                        Return (Zero)
                    }

                    DPGE = Zero
                    L2TR = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TR)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("set L23_Rdy to Detect Transition")
                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP18.PON_.PSD0 */
                    PSD0 = Zero
                    Local2 = 0x14
                    While ((Local2 > Zero))
                    {
                        Local2 = (Local2 - One)
                        Local3 = TB2P /* \_SB_.PCI0.RP18.PON_.TB2P */
                        If ((Local3 != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local2 <= Zero)){}
                    SXEX ()
                    PSD0 = Local1
                    If (CondRefOf (PDON))
                    {
                        PDON ()
                    }
                }

                Method (POFF, 0, NotSerialized)
                {
                    If ((TOFF == Zero))
                    {
                        ADBG ("TOFF == 0")
                        Return (Zero)
                    }

                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    ADBG (Concatenate ("VDID =", ToHexString (VDID)))
                    Local6 += 0x00108000
                    OperationRegion (DSP0, SystemMemory, Local6, 0x0100)
                    Field (DSP0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI0,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS0,   1
                    }

                    Local6 += 0x00018000
                    OperationRegion (DSP1, SystemMemory, Local6, 0x0100)
                    Field (DSP1, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI1,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS1,   1
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP18.POFF.PSD0 */
                    PSD0 = Zero
                    Local3 = P2TB /* \_SB_.PCI0.RP18.POFF.P2TB */
                    If ((TOFF > One))
                    {
                        TOFF = Zero
                        Sleep (0x0A)
                        PSD0 = Local1
                        RSTF = One
                        ADBG ("TOFF > 1")
                        Return (Zero)
                    }

                    TOFF = Zero
                    Sleep (0x0A)
                    Local6 = TBPS /* \_SB_.PCI0.RP18.POFF.TBPS */
                    TBPS = Zero
                    Sleep (0x0A)
                    Local2 = PDS0 /* \_SB_.PCI0.RP18.POFF.PDS0 */
                    Local3 = PDS1 /* \_SB_.PCI0.RP18.POFF.PDS1 */
                    TBPS = Local6
                    PSD0 = Local1
                    L2TE = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TE)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("Set L23_Rdy Entry")
                    NCB7 = One
                    \PIN.ON (RSTG)
                    RSTF = One
                    ADBG ("Reset pin ON")
                    Sleep (0x0A)
                    If (CondRefOf (PWRG))
                    {
                        If (CondRefOf (WAKP))
                        {
                            ADBG (Concatenate ("WAKP =", ToHexString (WAKP)))
                            ADBG (Concatenate ("WKEN =", ToHexString (WKEN)))
                            If (((WAKP == Zero) || !WKEN))
                            {
                                If (CondRefOf (PCPB))
                                {
                                    If ((PCPB != Zero))
                                    {
                                        \PIN.OFF (PWRG)
                                    }
                                }
                                Else
                                {
                                    \PIN.OFF (PWRG)
                                    ADBG ("Power pin Off")
                                }
                            }
                        }
                        ElseIf (CondRefOf (PCPB))
                        {
                            If ((PCPB != Zero))
                            {
                                \PIN.OFF (PWRG)
                            }
                        }
                        Else
                        {
                            \PIN.OFF (PWRG)
                            ADBG ("Power pin Off")
                        }
                    }

                    If (CondRefOf (TWAP))
                    {
                        If (((TWAP != Zero) && WKEN))
                        {
                            ADBG ("Enable Wake")
                            \_SB.SHPO (TWAP, Zero)
                        }
                    }

                    TBPE = Zero
                    Local6 = \TBOD
                    Local7 = (Local6 & 0x7FFF)
                    Local6 &= 0x8000
                    If ((Local6 == Zero))
                    {
                        Sleep (\TBOD)
                    }
                    ElseIf (((Local2 == One) || (Local3 == One)))
                    {
                        Sleep (Local7)
                    }
                    Else
                    {
                        Sleep (0x03E8)
                    }

                    ADBG (Concatenate ("HPSX_End=", ToHexString (HPSX)))
                    ADBG (Concatenate ("PMSX_End=", ToHexString (PMSX)))
                    If (CondRefOf (PDOF))
                    {
                        If (PSON)
                        {
                            PDOF ()
                        }
                    }
                }

                Method (NFRP, 0, Serialized)
                {
                    Local0 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (TBDA, SystemMemory, Local0, 0xE0)
                    Field (TBDA, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0xD8), 
                            ,   30, 
                        HPSE,   1, 
                        PMSE,   1, 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    If ((TBTS == One))
                    {
                        HPSE = Zero
                        PMSE = Zero
                        Notify (^, Zero) // Bus Check
                        If ((PMSX == One))
                        {
                            Local2 = One
                        }

                        Notify (^, 0x02) // Device Wake
                        Local1 = One
                    }

                    If ((Local1 == One))
                    {
                        HPSX = One
                        If ((Local2 == One))
                        {
                            PMSX = One
                        }
                    }
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    ADBG ("_PR0")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    ADBG ("_PR3")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            Method (TBNF, 0, NotSerialized)
            {
                Notify (\_SB.PCI0.RP18, 0x02) // Device Wake
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If ((\RTBT == One))
                {
                    ADBG ("TBT RTD3 _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
                Else
                {
                    ADBG ("TBT _DSD")
                    Return (Package (0x02)
                    {
                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x13) || (RPS1 == 0x13))))
    {
        Scope (\_SB.PCI0.RP19.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (TARS) /* \TARS */
            }

            Device (EP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Device (TXHC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x69
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x14))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x15))
                            }
                        }
                    }
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((NEXP == Zero))
                {
                    Debug = " Host router Upstream port _PS3"
                    Acquire (OSUM, 0xFFFF)
                    Local0 = MMTB (RPS0, RPT0)
                    \_GPE.SXST (Local0)
                    Release (OSUM)
                }
            }
        }

        Scope (\_SB.PCI0.RP19)
        {
            If ((\RTBT == One))
            {
                Name (G2SD, Zero)
                Name (RSTF, Zero)
                Name (WKEN, Zero)
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (RSTG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Method (DINI, 0, NotSerialized)
                {
                    ADBG ("DINI")
                    ADBG (Concatenate ("Reset pin=", ToHexString (RSG0)))
                    ADBG (Concatenate ("Reset pin level = ", ToHexString (RS0L)))
                    RSTG [Zero] = RSG0 /* \RSG0 */
                    RSTG [One] = RS0L /* \RS0L */
                    ADBG (Concatenate ("power pin=", ToHexString (TWRP)))
                    ADBG (Concatenate ("power pin level = ", ToHexString (TWRA)))
                    PWRG [Zero] = TWRP /* \TWRP */
                    PWRG [One] = TWRA /* \TWRA */
                    ADBG ("DINI End")
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg0 =", ToHexString (Arg0)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg1 =", ToHexString (Arg1)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg2 =", ToHexString (Arg2)))
                    If ((Arg1 >= One))
                    {
                        WKEN = Zero
                        TOFF = 0x02
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 2")
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                        TOFF = One
                        ADBG ("WKEN = 1")
                        ADBG ("TOFF = 1")
                    }
                    Else
                    {
                        WKEN = Zero
                        TOFF = Zero
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 0")
                    }
                }

                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXP._STA")
                        DINI ()
                        Return (PSTA ())
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXP._ON")
                        TRDO = One
                        PON ()
                        TRDO = Zero
                        ADBG ("PXP._ON END")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXP._OFF")
                        TRD3 = One
                        POFF ()
                        TRD3 = Zero
                        ADBG ("PXP._OFF END")
                    }
                }

                Method (PSTA, 0, NotSerialized)
                {
                    If ((RSTF == One))
                    {
                        ADBG ("PSTA return 0")
                        Return (Zero)
                    }
                    Else
                    {
                        ADBG ("PSTA return 1")
                        Return (One)
                    }
                }

                Method (SXEX, 0, Serialized)
                {
                    ADBG ("SXEX")
                    Local7 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local7, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    Local1 = 0xC8
                    P2TB = 0x09
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP19.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("SXEX Fail")
                            Return (Zero)
                        }

                        If ((Local2 & One))
                        {
                            Break
                        }

                        Sleep (0x05)
                    }

                    P2TB = Zero
                    Local1 = 0x01F4
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP19.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("Device gone")
                            Return (Zero)
                        }

                        If ((DIVI != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    ADBG ("SXEX END")
                }

                Method (PON, 0, NotSerialized)
                {
                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (\RPS0, \RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    If (TBPE)
                    {
                        ADBG ("TBPE = 1")
                        Return (Zero)
                    }

                    G2SD = Zero
                    If (CondRefOf (PWRG))
                    {
                        \PIN.ON (PWRG)
                        Sleep (0x64)
                        ADBG ("Power pin ON")
                    }

                    \PIN.OFF (RSTG)
                    RSTF = Zero
                    ADBG ("Reset pin Off")
                    If ((NCB7 != One))
                    {
                        ADBG ("NCB7 != 1")
                        Return (Zero)
                    }

                    DPGE = Zero
                    L2TR = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TR)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("set L23_Rdy to Detect Transition")
                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP19.PON_.PSD0 */
                    PSD0 = Zero
                    Local2 = 0x14
                    While ((Local2 > Zero))
                    {
                        Local2 = (Local2 - One)
                        Local3 = TB2P /* \_SB_.PCI0.RP19.PON_.TB2P */
                        If ((Local3 != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local2 <= Zero)){}
                    SXEX ()
                    PSD0 = Local1
                    If (CondRefOf (PDON))
                    {
                        PDON ()
                    }
                }

                Method (POFF, 0, NotSerialized)
                {
                    If ((TOFF == Zero))
                    {
                        ADBG ("TOFF == 0")
                        Return (Zero)
                    }

                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    ADBG (Concatenate ("VDID =", ToHexString (VDID)))
                    Local6 += 0x00108000
                    OperationRegion (DSP0, SystemMemory, Local6, 0x0100)
                    Field (DSP0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI0,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS0,   1
                    }

                    Local6 += 0x00018000
                    OperationRegion (DSP1, SystemMemory, Local6, 0x0100)
                    Field (DSP1, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI1,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS1,   1
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP19.POFF.PSD0 */
                    PSD0 = Zero
                    Local3 = P2TB /* \_SB_.PCI0.RP19.POFF.P2TB */
                    If ((TOFF > One))
                    {
                        TOFF = Zero
                        Sleep (0x0A)
                        PSD0 = Local1
                        RSTF = One
                        ADBG ("TOFF > 1")
                        Return (Zero)
                    }

                    TOFF = Zero
                    Sleep (0x0A)
                    Local6 = TBPS /* \_SB_.PCI0.RP19.POFF.TBPS */
                    TBPS = Zero
                    Sleep (0x0A)
                    Local2 = PDS0 /* \_SB_.PCI0.RP19.POFF.PDS0 */
                    Local3 = PDS1 /* \_SB_.PCI0.RP19.POFF.PDS1 */
                    TBPS = Local6
                    PSD0 = Local1
                    L2TE = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TE)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("Set L23_Rdy Entry")
                    NCB7 = One
                    \PIN.ON (RSTG)
                    RSTF = One
                    ADBG ("Reset pin ON")
                    Sleep (0x0A)
                    If (CondRefOf (PWRG))
                    {
                        If (CondRefOf (WAKP))
                        {
                            ADBG (Concatenate ("WAKP =", ToHexString (WAKP)))
                            ADBG (Concatenate ("WKEN =", ToHexString (WKEN)))
                            If (((WAKP == Zero) || !WKEN))
                            {
                                If (CondRefOf (PCPB))
                                {
                                    If ((PCPB != Zero))
                                    {
                                        \PIN.OFF (PWRG)
                                    }
                                }
                                Else
                                {
                                    \PIN.OFF (PWRG)
                                    ADBG ("Power pin Off")
                                }
                            }
                        }
                        ElseIf (CondRefOf (PCPB))
                        {
                            If ((PCPB != Zero))
                            {
                                \PIN.OFF (PWRG)
                            }
                        }
                        Else
                        {
                            \PIN.OFF (PWRG)
                            ADBG ("Power pin Off")
                        }
                    }

                    If (CondRefOf (TWAP))
                    {
                        If (((TWAP != Zero) && WKEN))
                        {
                            ADBG ("Enable Wake")
                            \_SB.SHPO (TWAP, Zero)
                        }
                    }

                    TBPE = Zero
                    Local6 = \TBOD
                    Local7 = (Local6 & 0x7FFF)
                    Local6 &= 0x8000
                    If ((Local6 == Zero))
                    {
                        Sleep (\TBOD)
                    }
                    ElseIf (((Local2 == One) || (Local3 == One)))
                    {
                        Sleep (Local7)
                    }
                    Else
                    {
                        Sleep (0x03E8)
                    }

                    ADBG (Concatenate ("HPSX_End=", ToHexString (HPSX)))
                    ADBG (Concatenate ("PMSX_End=", ToHexString (PMSX)))
                    If (CondRefOf (PDOF))
                    {
                        If (PSON)
                        {
                            PDOF ()
                        }
                    }
                }

                Method (NFRP, 0, Serialized)
                {
                    Local0 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (TBDA, SystemMemory, Local0, 0xE0)
                    Field (TBDA, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0xD8), 
                            ,   30, 
                        HPSE,   1, 
                        PMSE,   1, 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    If ((TBTS == One))
                    {
                        HPSE = Zero
                        PMSE = Zero
                        Notify (^, Zero) // Bus Check
                        If ((PMSX == One))
                        {
                            Local2 = One
                        }

                        Notify (^, 0x02) // Device Wake
                        Local1 = One
                    }

                    If ((Local1 == One))
                    {
                        HPSX = One
                        If ((Local2 == One))
                        {
                            PMSX = One
                        }
                    }
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    ADBG ("_PR0")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    ADBG ("_PR3")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            Method (TBNF, 0, NotSerialized)
            {
                Notify (\_SB.PCI0.RP19, 0x02) // Device Wake
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If ((\RTBT == One))
                {
                    ADBG ("TBT RTD3 _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
                Else
                {
                    ADBG ("TBT _DSD")
                    Return (Package (0x02)
                    {
                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x14) || (RPS1 == 0x14))))
    {
        Scope (\_SB.PCI0.RP20.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (TARS) /* \TARS */
            }

            Device (EP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Device (TXHC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Local0 = Package (0x02)
                            {
                                Zero, 
                                Zero
                            }
                        Local0 [Zero] = 0x69
                        If ((USWE == One))
                        {
                            Local0 [One] = 0x03
                        }

                        Return (Local0)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (Zero, Zero))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (SS01)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x14))
                            }
                        }

                        Device (SS02)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One, 0x09))
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (One, 0x15))
                            }
                        }
                    }
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((NEXP == Zero))
                {
                    Debug = " Host router Upstream port _PS3"
                    Acquire (OSUM, 0xFFFF)
                    Local0 = MMTB (RPS0, RPT0)
                    \_GPE.SXST (Local0)
                    Release (OSUM)
                }
            }
        }

        Scope (\_SB.PCI0.RP20)
        {
            If ((\RTBT == One))
            {
                Name (G2SD, Zero)
                Name (RSTF, Zero)
                Name (WKEN, Zero)
                Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                Name (RSTG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x02)
                {
                    Zero, 
                    Zero
                })
                Method (DINI, 0, NotSerialized)
                {
                    ADBG ("DINI")
                    ADBG (Concatenate ("Reset pin=", ToHexString (RSG0)))
                    ADBG (Concatenate ("Reset pin level = ", ToHexString (RS0L)))
                    RSTG [Zero] = RSG0 /* \RSG0 */
                    RSTG [One] = RS0L /* \RS0L */
                    ADBG (Concatenate ("power pin=", ToHexString (TWRP)))
                    ADBG (Concatenate ("power pin level = ", ToHexString (TWRA)))
                    PWRG [Zero] = TWRP /* \TWRP */
                    PWRG [One] = TWRA /* \TWRA */
                    ADBG ("DINI End")
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg0 =", ToHexString (Arg0)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg1 =", ToHexString (Arg1)))
                    ADBG (Concatenate ("TBT RTD3 _DSW Arg2 =", ToHexString (Arg2)))
                    If ((Arg1 >= One))
                    {
                        WKEN = Zero
                        TOFF = 0x02
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 2")
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                        TOFF = One
                        ADBG ("WKEN = 1")
                        ADBG ("TOFF = 1")
                    }
                    Else
                    {
                        WKEN = Zero
                        TOFF = Zero
                        ADBG ("WKEN = 0")
                        ADBG ("TOFF = 0")
                    }
                }

                PowerResource (PXP, 0x00, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXP._STA")
                        DINI ()
                        Return (PSTA ())
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXP._ON")
                        TRDO = One
                        PON ()
                        TRDO = Zero
                        ADBG ("PXP._ON END")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXP._OFF")
                        TRD3 = One
                        POFF ()
                        TRD3 = Zero
                        ADBG ("PXP._OFF END")
                    }
                }

                Method (PSTA, 0, NotSerialized)
                {
                    If ((RSTF == One))
                    {
                        ADBG ("PSTA return 0")
                        Return (Zero)
                    }
                    Else
                    {
                        ADBG ("PSTA return 1")
                        Return (One)
                    }
                }

                Method (SXEX, 0, Serialized)
                {
                    ADBG ("SXEX")
                    Local7 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local7, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    Local1 = 0xC8
                    P2TB = 0x09
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP20.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("SXEX Fail")
                            Return (Zero)
                        }

                        If ((Local2 & One))
                        {
                            Break
                        }

                        Sleep (0x05)
                    }

                    P2TB = Zero
                    Local1 = 0x01F4
                    While ((Local1 > Zero))
                    {
                        Local1 = (Local1 - One)
                        Local2 = TB2P /* \_SB_.PCI0.RP20.SXEX.TB2P */
                        If ((Local2 == 0xFFFFFFFF))
                        {
                            ADBG ("Device gone")
                            Return (Zero)
                        }

                        If ((DIVI != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    ADBG ("SXEX END")
                }

                Method (PON, 0, NotSerialized)
                {
                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (\RPS0, \RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    If (TBPE)
                    {
                        ADBG ("TBPE = 1")
                        Return (Zero)
                    }

                    G2SD = Zero
                    If (CondRefOf (PWRG))
                    {
                        \PIN.ON (PWRG)
                        Sleep (0x64)
                        ADBG ("Power pin ON")
                    }

                    \PIN.OFF (RSTG)
                    RSTF = Zero
                    ADBG ("Reset pin Off")
                    If ((NCB7 != One))
                    {
                        ADBG ("NCB7 != 1")
                        Return (Zero)
                    }

                    DPGE = Zero
                    L2TR = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TR)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("set L23_Rdy to Detect Transition")
                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP20.PON_.PSD0 */
                    PSD0 = Zero
                    Local2 = 0x14
                    While ((Local2 > Zero))
                    {
                        Local2 = (Local2 - One)
                        Local3 = TB2P /* \_SB_.PCI0.RP20.PON_.TB2P */
                        If ((Local3 != 0xFFFFFFFF))
                        {
                            Break
                        }

                        Sleep (0x0A)
                    }

                    If ((Local2 <= Zero)){}
                    SXEX ()
                    PSD0 = Local1
                    If (CondRefOf (PDON))
                    {
                        PDON ()
                    }
                }

                Method (POFF, 0, NotSerialized)
                {
                    If ((TOFF == Zero))
                    {
                        ADBG ("TOFF == 0")
                        Return (Zero)
                    }

                    Local7 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (L23P, SystemMemory, Local7, 0x0480)
                    Field (L23P, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                            ,   3, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        PSD0,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE0), 
                            ,   7, 
                        NCB7,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L2TE,   1, 
                        L2TR,   1, 
                        Offset (0x420), 
                            ,   30, 
                        DPGE,   1
                    }

                    Field (L23P, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Local6 = \MMTB (RPS0, RPT0)
                    OperationRegion (TBDI, SystemMemory, Local6, 0x0550)
                    Field (TBDI, DWordAcc, NoLock, Preserve)
                    {
                        DIVI,   32, 
                        CMDR,   32, 
                        Offset (0x84), 
                        TBPS,   2, 
                        Offset (0x548), 
                        TB2P,   32, 
                        P2TB,   32
                    }

                    ADBG (Concatenate ("VDID =", ToHexString (VDID)))
                    Local6 += 0x00108000
                    OperationRegion (DSP0, SystemMemory, Local6, 0x0100)
                    Field (DSP0, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI0,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS0,   1
                    }

                    Local6 += 0x00018000
                    OperationRegion (DSP1, SystemMemory, Local6, 0x0100)
                    Field (DSP1, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0xD0), 
                            ,   29, 
                        LAI1,   1, 
                        Offset (0xD8), 
                            ,   22, 
                        PDS1,   1
                    }

                    Local1 = PSD0 /* \_SB_.PCI0.RP20.POFF.PSD0 */
                    PSD0 = Zero
                    Local3 = P2TB /* \_SB_.PCI0.RP20.POFF.P2TB */
                    If ((TOFF > One))
                    {
                        TOFF = Zero
                        Sleep (0x0A)
                        PSD0 = Local1
                        RSTF = One
                        ADBG ("TOFF > 1")
                        Return (Zero)
                    }

                    TOFF = Zero
                    Sleep (0x0A)
                    Local6 = TBPS /* \_SB_.PCI0.RP20.POFF.TBPS */
                    TBPS = Zero
                    Sleep (0x0A)
                    Local2 = PDS0 /* \_SB_.PCI0.RP20.POFF.PDS0 */
                    Local3 = PDS1 /* \_SB_.PCI0.RP20.POFF.PDS1 */
                    TBPS = Local6
                    PSD0 = Local1
                    L2TE = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L2TE)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    ADBG ("Set L23_Rdy Entry")
                    NCB7 = One
                    \PIN.ON (RSTG)
                    RSTF = One
                    ADBG ("Reset pin ON")
                    Sleep (0x0A)
                    If (CondRefOf (PWRG))
                    {
                        If (CondRefOf (WAKP))
                        {
                            ADBG (Concatenate ("WAKP =", ToHexString (WAKP)))
                            ADBG (Concatenate ("WKEN =", ToHexString (WKEN)))
                            If (((WAKP == Zero) || !WKEN))
                            {
                                If (CondRefOf (PCPB))
                                {
                                    If ((PCPB != Zero))
                                    {
                                        \PIN.OFF (PWRG)
                                    }
                                }
                                Else
                                {
                                    \PIN.OFF (PWRG)
                                    ADBG ("Power pin Off")
                                }
                            }
                        }
                        ElseIf (CondRefOf (PCPB))
                        {
                            If ((PCPB != Zero))
                            {
                                \PIN.OFF (PWRG)
                            }
                        }
                        Else
                        {
                            \PIN.OFF (PWRG)
                            ADBG ("Power pin Off")
                        }
                    }

                    If (CondRefOf (TWAP))
                    {
                        If (((TWAP != Zero) && WKEN))
                        {
                            ADBG ("Enable Wake")
                            \_SB.SHPO (TWAP, Zero)
                        }
                    }

                    TBPE = Zero
                    Local6 = \TBOD
                    Local7 = (Local6 & 0x7FFF)
                    Local6 &= 0x8000
                    If ((Local6 == Zero))
                    {
                        Sleep (\TBOD)
                    }
                    ElseIf (((Local2 == One) || (Local3 == One)))
                    {
                        Sleep (Local7)
                    }
                    Else
                    {
                        Sleep (0x03E8)
                    }

                    ADBG (Concatenate ("HPSX_End=", ToHexString (HPSX)))
                    ADBG (Concatenate ("PMSX_End=", ToHexString (PMSX)))
                    If (CondRefOf (PDOF))
                    {
                        If (PSON)
                        {
                            PDOF ()
                        }
                    }
                }

                Method (NFRP, 0, Serialized)
                {
                    Local0 = \MMRP (\RPS0, \RPT0)
                    OperationRegion (TBDA, SystemMemory, Local0, 0xE0)
                    Field (TBDA, WordAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0xD8), 
                            ,   30, 
                        HPSE,   1, 
                        PMSE,   1, 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    If ((TBTS == One))
                    {
                        HPSE = Zero
                        PMSE = Zero
                        Notify (^, Zero) // Bus Check
                        If ((PMSX == One))
                        {
                            Local2 = One
                        }

                        Notify (^, 0x02) // Device Wake
                        Local1 = One
                    }

                    If ((Local1 == One))
                    {
                        HPSX = One
                        If ((Local2 == One))
                        {
                            PMSX = One
                        }
                    }
                }

                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    ADBG ("_PR0")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    ADBG ("_PR3")
                    Return (Package (0x01)
                    {
                        PXP
                    })
                }
            }

            Method (TBNF, 0, NotSerialized)
            {
                Notify (\_SB.PCI0.RP20, 0x02) // Device Wake
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                If ((\RTBT == One))
                {
                    ADBG ("TBT RTD3 _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
                Else
                {
                    ADBG ("TBT _DSD")
                    Return (Package (0x02)
                    {
                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                Zero
                            }
                        }
                    })
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x15) || (RPS1 == 0x15))))
    {
        Scope (\_SB.PCI0.PEG0)
        {
            Device (HRUS)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (TARS) /* \TARS */
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x16) || (RPS1 == 0x16))))
    {
        Scope (\_SB.PCI0.PEG1)
        {
            Device (HRUS)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (TARS) /* \TARS */
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x17) || (RPS1 == 0x17))))
    {
        Scope (\_SB.PCI0.PEG2)
        {
            Device (HRUS)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (TARS) /* \TARS */
                }
            }
        }
    }

    Scope (\_SB)
    {
        Method (PERB, 5, Serialized)
        {
            ADBG ("PERB")
            Local7 = Arg0
            Local7 |= (Arg1 << 0x14)
            Local7 |= (Arg2 << 0x0F)
            Local7 |= (Arg3 << 0x0C)
            Local7 |= Arg4
            OperationRegion (PCI0, SystemMemory, Local7, One)
            Field (PCI0, ByteAcc, NoLock, Preserve)
            {
                TEMP,   8
            }

            Return (TEMP) /* \_SB_.PERB.TEMP */
        }

        Method (PEWB, 6, Serialized)
        {
            ADBG ("PEWB")
            Local7 = Arg0
            Local7 |= (Arg1 << 0x14)
            Local7 |= (Arg2 << 0x0F)
            Local7 |= (Arg3 << 0x0C)
            Local7 |= Arg4
            OperationRegion (PCI0, SystemMemory, Local7, One)
            Field (PCI0, ByteAcc, NoLock, Preserve)
            {
                TEMP,   8
            }

            TEMP = Arg5
        }

        Method (PERW, 5, Serialized)
        {
            ADBG ("PERW")
            Local7 = Arg0
            Local7 |= (Arg1 << 0x14)
            Local7 |= (Arg2 << 0x0F)
            Local7 |= (Arg3 << 0x0C)
            Local7 |= Arg4
            OperationRegion (PCI0, SystemMemory, Local7, 0x02)
            Field (PCI0, ByteAcc, NoLock, Preserve)
            {
                TEMP,   16
            }

            Return (TEMP) /* \_SB_.PERW.TEMP */
        }

        Method (PEWW, 6, Serialized)
        {
            ADBG ("PEWW")
            Local7 = Arg0
            Local7 |= (Arg1 << 0x14)
            Local7 |= (Arg2 << 0x0F)
            Local7 |= (Arg3 << 0x0C)
            Local7 |= Arg4
            OperationRegion (PCI0, SystemMemory, Local7, 0x02)
            Field (PCI0, ByteAcc, NoLock, Preserve)
            {
                TEMP,   16
            }

            TEMP = Arg5
        }

        Method (PERD, 5, Serialized)
        {
            ADBG ("PERD")
            Local7 = Arg0
            Local7 |= (Arg1 << 0x14)
            Local7 |= (Arg2 << 0x0F)
            Local7 |= (Arg3 << 0x0C)
            Local7 |= Arg4
            OperationRegion (PCI0, SystemMemory, Local7, 0x04)
            Field (PCI0, ByteAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP) /* \_SB_.PERD.TEMP */
        }

        Method (PEWD, 6, Serialized)
        {
            ADBG ("PEWD")
            Local7 = Arg0
            Local7 |= (Arg1 << 0x14)
            Local7 |= (Arg2 << 0x0F)
            Local7 |= (Arg3 << 0x0C)
            Local7 |= Arg4
            OperationRegion (PCI0, SystemMemory, Local7, 0x04)
            Field (PCI0, ByteAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            TEMP = Arg5
        }

        Method (STDC, 5, Serialized)
        {
            ADBG ("STDC")
            Local7 = PERW (Arg0, Arg1, Arg2, Arg3, Zero)
            If ((Local7 == 0xFFFF))
            {
                ADBG ("Referenced device is not present")
                Return (Zero)
            }

            Local0 = PERW (Arg0, Arg1, Arg2, Arg3, 0x06)
            If (((Local0 & 0x10) == Zero))
            {
                ADBG ("No Capabilities linked list is available")
                Return (Zero)
            }

            Local2 = PERB (Arg0, Arg1, Arg2, Arg3, 0x34)
            While (One)
            {
                Local2 &= 0xFC
                If ((Local2 == Zero))
                {
                    ADBG ("Capability ID is not found")
                    Return (Zero)
                }

                Local1 = PERB (Arg0, Arg1, Arg2, Arg3, Local2)
                If ((Arg4 == Local1))
                {
                    ADBG ("Capability ID is found")
                    ADBG ("Capability Offset : ")
                    ADBG (Local2)
                    Return (Local2)
                }

                Local2 = PERB (Arg0, Arg1, Arg2, Arg3, (Local2 + One))
                Return (Zero)
            }
        }
    }

    Method (STPC, 2, Serialized)
    {
        Name (DEVI, Zero)
        Name (MENT, 0x02)
        DEVI = Arg0
        If (CondRefOf (\_SB.PEPD.DEVY))
        {
            If (((DEVI + MENT) > Arg1))
            {
                Return (Zero)
            }

            Local0 = Zero
            If (((RPS0 > Zero) && RPN0))
            {
                If ((RPT0 == One))
                {
                    If ((RPS0 < 0x0A))
                    {
                        Local1 = Concatenate ("RP0", ToDecimalString (RPS0))
                        Local0 = One
                    }
                    ElseIf ((RPS0 < 0x19))
                    {
                        Local1 = Concatenate ("RP", ToDecimalString (RPS0))
                        Local0 = One
                    }
                }

                If ((RPT0 == 0x02))
                {
                    If ((RPS0 < 0x03))
                    {
                        Local1 = Concatenate ("PEG", ToDecimalString (RPS0))
                        Local0 = One
                    }
                }
            }

            If ((Local0 == One))
            {
                DerefOf (\_SB.PEPD.DEVY [DEVI]) [Zero] = Concatenate ("\\_SB.PCI0.", Local1
                    )
                DerefOf (\_SB.PEPD.DEVY [DEVI]) [One] = One
                DEVI++
            }

            Local0 = Zero
            If (((RPS1 > Zero) && RPN1))
            {
                If ((RPT1 == One))
                {
                    If ((RPS1 < 0x0A))
                    {
                        Local1 = Concatenate ("RP0", ToDecimalString (RPS1))
                        Local0 = One
                    }
                    ElseIf ((RPS1 < 0x19))
                    {
                        Local1 = Concatenate ("RP", ToDecimalString (RPS1))
                        Local0 = One
                    }
                }

                If ((RPT1 == 0x02))
                {
                    If ((RPS1 < 0x03))
                    {
                        Local1 = Concatenate ("PEG", ToDecimalString (RPS1))
                        Local0 = One
                    }
                }
            }

            If ((Local0 == One))
            {
                DerefOf (\_SB.PEPD.DEVY [DEVI]) [Zero] = Concatenate ("\\_SB.PCI0.", Local1
                    )
                DerefOf (\_SB.PEPD.DEVY [DEVI]) [One] = One
                DEVI++
            }

            Return (One)
        }

        Return (Zero)
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "HP", "TABLETPC", 0x00001000)
{
    External (_SB_.DCKD, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GFX0.AINT, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GFX0.IUEH, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GFX0.IUER, IntObj)
    External (_SB_.PCI0.LPCB.EC0_, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PCI0.LPCB.EC0_.ECRG, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.GBNT, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.LPCB.EC0_.PTEN, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.UDTS, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.LPCB.EC0_.VBPS, IntObj)
    External (_SB_.WMIV.GVWE, MethodObj)    // 2 Arguments
    External (AEAB, IntObj)
    External (AHDB, IntObj)
    External (G063, IntObj)
    External (G067, FieldUnitObj)
    External (G068, FieldUnitObj)
    External (G069, FieldUnitObj)
    External (G06A, FieldUnitObj)
    External (G06B, FieldUnitObj)
    External (GTOS, MethodObj)    // 0 Arguments
    External (HEB1, IntObj)
    External (HEFE, IntObj)
    External (IUBE, IntObj)
    External (IUCE, IntObj)
    External (IUDE, IntObj)
    External (MDBG, MethodObj)    // 1 Arguments
    External (OSYS, IntObj)
    External (PB1E, IntObj)
    External (VBPS, IntObj)

    Method (VHBG, 1, Serialized)
    {
        If (CondRefOf (MDBG))
        {
            Return (MDBG (Arg0))
        }

        Return (Zero)
    }

    Scope (\_SB)
    {
        Scope (\_SB.PCI0.LPCB.EC0)
        {
            Name (G0AB, Zero)
            Device (BIND)
            {
                Name (_HID, "INT33D2" /* Intel GPIO Buttons */)  // _HID: Hardware ID
                Name (_CID, "PNP0C40" /* Standard Button Controller */)  // _CID: Compatible ID
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((IUBE & One) && (OSYS >= 0x07DD)))
                    {
                        If ((PB1E & One))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("dfbcf3c5-e7a5-44e6-9c1f-29c76f6e059c") /* Power Button Device */))
                    {
                        If ((Zero == ToInteger (Arg1)))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    If (((PB1E & One) == One))
                                    {
                                        Return (0x07)
                                    }

                                    Return (Zero)
                                }

                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Name (VBDS, Zero)
            Name (ONTM, Zero)
            Method (VGBS, 0, Serialized)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                G0AB = \_SB.PCI0.LPCB.EC0.VBPS /* External reference */
                Release (\_SB.PCI0.LPCB.EC0.ECMX)
                If ((ONTM == Zero))
                {
                    If (((G0AB & 0x10) == 0x10))
                    {
                        \_SB.PCI0.LPCB.EC0.UPBT (0x04, One)
                    }

                    If (((G0AB & 0x40) == 0x40))
                    {
                        \_SB.PCI0.LPCB.EC0.UPBT (0x06, One)
                    }

                    If (((G0AB & 0x80) == 0x80))
                    {
                        \_SB.PCI0.LPCB.EC0.UPBT (0x07, One)
                    }

                    ONTM = One
                    G069 = VBPS /* External reference */
                }

                Return (VBDS) /* \_SB_.PCI0.LPCB.EC0_.VBDS */
            }

            Method (UPBT, 2, Serialized)
            {
                Local0 = (One << Arg0)
                If (Arg1)
                {
                    VBDS |= Local0
                }
                Else
                {
                    VBDS &= ~Local0
                }
            }

            Method (GPBT, 1, Serialized)
            {
                Local0 = (One << Arg0)
                If (((VBDS & Local0) == Local0))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Scope (\_SB.PCI0.LPCB.EC0)
        {
            Device (CIND)
            {
                Name (_HID, "INT33D3" /* Intel GPIO Buttons */)  // _HID: Hardware ID
                Name (_CID, "PNP0C60" /* Display Sensor Device */)  // _CID: Compatible ID
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((IUCE & One) && (OSYS >= 0x07DC)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
            }
        }

        Scope (\_SB.PCI0.LPCB.EC0)
        {
            Device (DIND)
            {
                Name (_HID, "INT33D4" /* Intel GPIO Buttons */)  // _HID: Hardware ID
                Name (_CID, "PNP0C70" /* Dock Sensor Device */)  // _CID: Compatible ID
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((IUDE & One) && (OSYS >= 0x07DC)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
            }
        }

        Scope (\_SB)
        {
            Device (HIDD)
            {
                Name (_HID, "INT33D5")  // _HID: Hardware ID
                Name (HBSY, Zero)
                Name (HIDX, Zero)
                Name (HMDE, Zero)
                Name (HRDY, Zero)
                Name (BTLD, Zero)
                Name (BTS1, Zero)
                Name (BTEN, Zero)
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If (((OSYS >= 0x07DD) && (HEFE == One)))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (HDDM, 0, Serialized)
                {
                    Name (DPKG, Package (0x04)
                    {
                        0x11111111, 
                        0x22222222, 
                        0x33333333, 
                        0x44444444
                    })
                    Return (DPKG) /* \_SB_.HIDD.HDDM.DPKG */
                }

                Method (HDEM, 0, Serialized)
                {
                    HBSY = Zero
                    If ((HMDE == Zero))
                    {
                        Return (HIDX) /* \_SB_.HIDD.HIDX */
                    }

                    Return (HMDE) /* \_SB_.HIDD.HMDE */
                }

                Method (HDMM, 0, Serialized)
                {
                    Return (HMDE) /* \_SB_.HIDD.HMDE */
                }

                Method (HDSM, 1, Serialized)
                {
                    HRDY = Arg0
                    If ((Arg0 == Zero))
                    {
                        Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                        \_SB.PCI0.LPCB.EC0.PTEN = Zero
                        Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    }
                }

                Method (HPEM, 1, Serialized)
                {
                    HBSY = One
                    If ((HMDE == Zero))
                    {
                        HIDX = Arg0
                    }
                    Else
                    {
                        HIDX = Arg0
                    }

                    Notify (\_SB.HIDD, 0xC0) // Hardware-Specific
                    Local0 = Zero
                    While (((Local0 < 0xFA) && HBSY))
                    {
                        Sleep (0x04)
                        Local0++
                    }

                    If ((HBSY == One))
                    {
                        HBSY = Zero
                        HIDX = Zero
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (BTNL, 0, Serialized)
                {
                    \_SB.HIDD.BTLD = One
                    If ((\AEAB == One))
                    {
                        BTS1 = 0x1F
                        BTEN = BTS1 /* \_SB_.HIDD.BTS1 */
                    }
                    Else
                    {
                        BTS1 = Zero
                    }

                    If (((PB1E & One) == One))
                    {
                        Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                        \_SB.PCI0.LPCB.EC0.PTEN = One
                        Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    }
                    Else
                    {
                        Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                        \_SB.PCI0.LPCB.EC0.PTEN = Zero
                        Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    }
                }

                Method (BTNE, 1, Serialized)
                {
                    If ((\AEAB == One))
                    {
                        BTS1 = ((Arg0 & 0x1E) | One)
                        BTEN = BTS1 /* \_SB_.HIDD.BTS1 */
                        G06B = BTEN /* \_SB_.HIDD.BTEN */
                    }
                }

                Method (BTNS, 0, Serialized)
                {
                    If ((\AEAB == One))
                    {
                        BTS1 = BTEN /* \_SB_.HIDD.BTEN */
                        G06A = BTS1 /* \_SB_.HIDD.BTS1 */
                    }

                    Return (BTS1) /* \_SB_.HIDD.BTS1 */
                }

                Method (BTNC, 0, Serialized)
                {
                    If ((\AEAB == One))
                    {
                        Return (0x1F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Name (HEB2, Zero)
                Method (HEBC, 0, Serialized)
                {
                    If ((\AHDB == One))
                    {
                        Return (\HEB1) /* External reference */
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (H2BC, 0, Serialized)
                {
                    If ((\AHDB == One))
                    {
                        Return (\HEB1) /* External reference */
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (HEEC, 0, Serialized)
                {
                    If ((\AHDB == One))
                    {
                        Return (HEB2) /* \_SB_.HIDD.HEB2 */
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("eeec56b3-4442-408f-a792-4edd4d758054") /* Unknown UUID */))
                    {
                        If ((One == ToInteger (Arg1)))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (0x02)
                                    {
                                         0xFF, 0x03                                       // ..
                                    })
                                }
                                Case (One)
                                {
                                    BTNL ()
                                }
                                Case (0x02)
                                {
                                    Return (HDMM ())
                                }
                                Case (0x03)
                                {
                                    HDSM (DerefOf (Arg3 [Zero]))
                                }
                                Case (0x04)
                                {
                                    Return (HDEM ())
                                }
                                Case (0x05)
                                {
                                    Return (BTNS ())
                                }
                                Case (0x06)
                                {
                                    BTNE (DerefOf (Arg3 [Zero]))
                                }
                                Case (0x07)
                                {
                                    Return (HEBC ())
                                }
                                Case (0x08)
                                {
                                    Return (\_SB.PCI0.LPCB.EC0.VGBS ())
                                }
                                Case (0x09)
                                {
                                    Return (H2BC ())
                                }

                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (PWPR, 0, Serialized)
            {
                If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                {
                    Notify (\_SB.HIDD, 0xCE) // Hardware-Specific
                }
                ElseIf (CondRefOf (\_SB.PCI0.GFX0.IUER))
                {
                    Local0 = \_SB.PCI0.GFX0.IUER /* External reference */
                    \_SB.PCI0.GFX0.IUER = (Local0 & 0xC0)
                    Local0 = \_SB.PCI0.GFX0.IUER /* External reference */
                    \_SB.PCI0.GFX0.IUER = (Local0 | One)
                }
            }

            Method (PWRR, 0, Serialized)
            {
                If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                {
                    Notify (\_SB.HIDD, 0xCF) // Hardware-Specific
                }
                ElseIf (CondRefOf (\_SB.PCI0.GFX0.IUER))
                {
                    Local0 = \_SB.PCI0.GFX0.IUER /* External reference */
                    \_SB.PCI0.GFX0.IUER = (Local0 & 0xC0)
                }
            }
        }

        Scope (\_SB.PCI0.LPCB.EC0)
        {
            Name (G0A8, Zero)
            Name (G0A9, Zero)
            Name (G0AA, Zero)
            Method (_Q30, 0, Serialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                G067 = 0x30000000
                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    G0AB = \_SB.PCI0.LPCB.EC0.VBPS /* External reference */
                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    If (\_SB.PCI0.LPCB.EC0.GBNT (G0AB, Zero))
                    {
                        If ((\_SB.PCI0.LPCB.EC0.GPBT (Zero) == Zero))
                        {
                            \_SB.PCI0.LPCB.EC0.UPBT (Zero, One)
                            \_SB.PWPR ()
                            G067 |= One
                            If (\_SB.PCI0.LPCB.EC0.GPBT (One))
                            {
                                G0AA = One
                            }
                        }
                    }

                    If (\_SB.PCI0.LPCB.EC0.GBNT (G0AB, One))
                    {
                        If ((\_SB.PCI0.LPCB.EC0.GPBT (One) == Zero))
                        {
                            \_SB.PCI0.LPCB.EC0.UPBT (One, One)
                            If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                            {
                                Notify (\_SB.HIDD, 0xC2) // Hardware-Specific
                            }
                            ElseIf ((\_SB.HIDD.HRDY == One))
                            {
                                \_SB.HIDD.HPEM (One)
                            }
                            Else
                            {
                                \_SB.PCI0.GFX0.IUEH (One)
                            }

                            G067 |= 0x02
                        }
                    }

                    If (\_SB.PCI0.LPCB.EC0.GBNT (G0AB, 0x02))
                    {
                        If (((G063 & 0x20) != 0x20))
                        {
                            If (NAnd ((\_SB.PCI0.LPCB.EC0.GPBT (Zero) || \_SB.PCI0.LPCB.EC0.GPBT (One)), \_SB.PCI0.LPCB.EC0.GPBT (0x02)))
                            {
                                If ((G0AA == Zero))
                                {
                                    \_SB.PCI0.LPCB.EC0.UPBT (0x02, One)
                                    If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                                    {
                                        Notify (\_SB.HIDD, 0xC4) // Hardware-Specific
                                    }
                                    ElseIf ((\_SB.HIDD.HRDY == One))
                                    {
                                        \_SB.HIDD.HPEM (0x11)
                                    }
                                    Else
                                    {
                                        \_SB.PCI0.GFX0.IUEH (0x02)
                                    }

                                    G067 |= 0x04
                                    If (\_SB.PCI0.LPCB.EC0.GPBT (Zero))
                                    {
                                        G0AA = One
                                        If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                                        {
                                            Notify (\_SB.HIDD, 0xCF) // Hardware-Specific
                                            Notify (\_SB.HIDD, 0xC5) // Hardware-Specific
                                        }

                                        G067 |= 0x0100
                                    }
                                    ElseIf (\_SB.PCI0.LPCB.EC0.GPBT (One))
                                    {
                                        G0AA = One
                                    }
                                }
                            }
                        }
                    }

                    If (\_SB.PCI0.LPCB.EC0.GBNT (G0AB, 0x03))
                    {
                        If (((G063 & 0x20) != 0x20))
                        {
                            If (NAnd ((\_SB.PCI0.LPCB.EC0.GPBT (Zero) || \_SB.PCI0.LPCB.EC0.GPBT (One)), \_SB.PCI0.LPCB.EC0.GPBT (0x03)))
                            {
                                If ((G0AA == Zero))
                                {
                                    \_SB.PCI0.LPCB.EC0.UPBT (0x03, One)
                                    If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                                    {
                                        Notify (\_SB.HIDD, 0xC6) // Hardware-Specific
                                    }
                                    ElseIf ((\_SB.HIDD.HRDY == One))
                                    {
                                        \_SB.HIDD.HPEM (0x12)
                                    }
                                    Else
                                    {
                                        \_SB.PCI0.GFX0.IUEH (0x03)
                                    }

                                    G067 |= 0x08
                                    If (\_SB.PCI0.LPCB.EC0.GPBT (Zero))
                                    {
                                        G0AA = One
                                        If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                                        {
                                            Notify (\_SB.HIDD, 0xCF) // Hardware-Specific
                                            Notify (\_SB.HIDD, 0xC7) // Hardware-Specific
                                        }

                                        G067 |= 0x0200
                                    }
                                    ElseIf (\_SB.PCI0.LPCB.EC0.GPBT (One))
                                    {
                                        G0AA = One
                                    }
                                }
                            }
                        }
                    }

                    If (\_SB.PCI0.LPCB.EC0.GBNT (G0AB, 0x04))
                    {
                        \_SB.PCI0.LPCB.EC0.UPBT (0x04, One)
                        If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                        {
                            Notify (\_SB.HIDD, 0xC8) // Hardware-Specific
                        }
                        ElseIf ((\_SB.HIDD.HRDY == One))
                        {
                            \_SB.HIDD.HPEM (0x02)
                        }
                        Else
                        {
                            \_SB.PCI0.GFX0.IUEH (0x04)
                        }

                        G067 |= 0x10
                    }

                    If (\_SB.PCI0.LPCB.EC0.GBNT (G0AB, 0x06))
                    {
                        If ((\GTOS () >= 0x09))
                        {
                            If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                            {
                                If ((\_SB.PCI0.LPCB.EC0.GPBT (0x06) == Zero))
                                {
                                    \_SB.PCI0.LPCB.EC0.UPBT (0x06, One)
                                    Notify (\_SB.HIDD, 0xCD) // Hardware-Specific
                                    G067 |= 0x20
                                    If (CondRefOf (\_SB.PCI0.LPCB.EC0.UDTS))
                                    {
                                        \_SB.PCI0.LPCB.EC0.UDTS (Zero, Zero)
                                    }
                                }
                            }
                        }
                        ElseIf ((\GTOS () == 0x08))
                        {
                            If (CondRefOf (\_SB.PCI0.GFX0.IUEH))
                            {
                                If ((G0A8 == Zero))
                                {
                                    G0A8 = One
                                    \_SB.PCI0.GFX0.IUEH (0x06)
                                    G067 |= 0x20
                                }
                            }
                        }
                        ElseIf ((G0A8 == Zero))
                        {
                            G0A8 = One
                            \_SB.WMIV.GVWE (One, Zero)
                            G067 |= 0x20
                        }
                    }

                    If (\_SB.PCI0.LPCB.EC0.GBNT (G0AB, 0x07))
                    {
                        If ((\GTOS () >= 0x09))
                        {
                            If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                            {
                                If ((\_SB.PCI0.LPCB.EC0.GPBT (0x07) == Zero))
                                {
                                    \_SB.PCI0.LPCB.EC0.UPBT (0x07, One)
                                    Notify (\_SB.HIDD, 0xCA) // Hardware-Specific
                                    If (CondRefOf (\_SB.PCI0.LPCB.EC0.UDTS))
                                    {
                                        \_SB.PCI0.LPCB.EC0.UDTS (Zero, Zero)
                                    }

                                    G067 |= 0x40
                                }
                            }
                        }
                        ElseIf ((\GTOS () == 0x08))
                        {
                            If (CondRefOf (\_SB.PCI0.GFX0.IUEH))
                            {
                                If ((G0A9 == Zero))
                                {
                                    G0A9 = One
                                    \_SB.PCI0.GFX0.IUEH (0x07)
                                    G067 |= 0x40
                                }
                            }
                        }
                        ElseIf ((G0A9 == Zero))
                        {
                            G0A9 = One
                            \_SB.WMIV.GVWE (One, Zero)
                            G067 |= 0x40
                        }
                    }
                }
            }

            Method (_Q31, 0, Serialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                G068 = 0x31000000
                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    G0AB = \_SB.PCI0.LPCB.EC0.VBPS /* External reference */
                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    If (((\_SB.PCI0.LPCB.EC0.GBNT (G0AB, Zero) == Zero) && \_SB.PCI0.LPCB.EC0.GPBT (Zero)))
                    {
                        \_SB.PCI0.LPCB.EC0.UPBT (Zero, Zero)
                        If ((G0AA == Zero))
                        {
                            \_SB.PWRR ()
                        }

                        G068 |= One
                    }

                    If (((\_SB.PCI0.LPCB.EC0.GBNT (G0AB, One) == Zero) && \_SB.PCI0.LPCB.EC0.GPBT (One)))
                    {
                        \_SB.PCI0.LPCB.EC0.UPBT (One, Zero)
                        If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                        {
                            Notify (\_SB.HIDD, 0xC3) // Hardware-Specific
                        }

                        G068 |= 0x02
                    }

                    If (((G063 & 0x20) != 0x20))
                    {
                        If (((\_SB.PCI0.LPCB.EC0.GBNT (G0AB, 0x02) == Zero) && \_SB.PCI0.LPCB.EC0.GPBT (0x02)))
                        {
                            \_SB.PCI0.LPCB.EC0.UPBT (0x02, Zero)
                            If ((G0AA == Zero))
                            {
                                If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                                {
                                    Notify (\_SB.HIDD, 0xC5) // Hardware-Specific
                                }

                                G068 |= 0x04
                            }
                        }
                    }

                    If (((G063 & 0x20) != 0x20))
                    {
                        If (((\_SB.PCI0.LPCB.EC0.GBNT (G0AB, 0x03) == Zero) && \_SB.PCI0.LPCB.EC0.GPBT (0x03)))
                        {
                            \_SB.PCI0.LPCB.EC0.UPBT (0x03, Zero)
                            If ((G0AA == Zero))
                            {
                                If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                                {
                                    Notify (\_SB.HIDD, 0xC7) // Hardware-Specific
                                }

                                G068 |= 0x08
                            }
                        }
                    }

                    If (((\_SB.PCI0.LPCB.EC0.GBNT (G0AB, 0x04) == Zero) && \_SB.PCI0.LPCB.EC0.GPBT (0x04)))
                    {
                        \_SB.PCI0.LPCB.EC0.UPBT (0x04, Zero)
                        If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                        {
                            Notify (\_SB.HIDD, 0xC9) // Hardware-Specific
                        }

                        G068 |= 0x10
                    }

                    If ((\_SB.PCI0.LPCB.EC0.GBNT (G0AB, 0x06) == Zero))
                    {
                        If ((\GTOS () >= 0x09))
                        {
                            If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                            {
                                If (\_SB.PCI0.LPCB.EC0.GPBT (0x06))
                                {
                                    \_SB.PCI0.LPCB.EC0.UPBT (0x06, Zero)
                                    Notify (\_SB.HIDD, 0xCC) // Hardware-Specific
                                    G068 |= 0x20
                                    If (CondRefOf (\_SB.PCI0.LPCB.EC0.UDTS))
                                    {
                                        \_SB.PCI0.LPCB.EC0.UDTS (Zero, Zero)
                                    }
                                }
                            }
                        }
                        ElseIf ((\GTOS () == 0x08))
                        {
                            If (CondRefOf (\_SB.PCI0.GFX0.IUEH))
                            {
                                If ((G0A8 == One))
                                {
                                    G0A8 = Zero
                                    \_SB.PCI0.GFX0.IUEH (0x06)
                                    G068 |= 0x20
                                }
                            }
                        }
                        ElseIf ((G0A8 == One))
                        {
                            G0A8 = Zero
                            \_SB.WMIV.GVWE (One, Zero)
                            G068 |= 0x20
                        }
                    }

                    If ((\_SB.PCI0.LPCB.EC0.GBNT (G0AB, 0x07) == Zero))
                    {
                        If ((\GTOS () >= 0x09))
                        {
                            If (((OSYS >= 0x07DF) && \_SB.HIDD.BTLD))
                            {
                                If (\_SB.PCI0.LPCB.EC0.GPBT (0x07))
                                {
                                    \_SB.PCI0.LPCB.EC0.UPBT (0x07, Zero)
                                    Notify (\_SB.HIDD, 0xCB) // Hardware-Specific
                                    If (CondRefOf (\_SB.PCI0.LPCB.EC0.UDTS))
                                    {
                                        \_SB.PCI0.LPCB.EC0.UDTS (Zero, Zero)
                                    }

                                    G068 |= 0x40
                                }
                            }
                        }
                        ElseIf ((\GTOS () == 0x08))
                        {
                            If (CondRefOf (\_SB.PCI0.GFX0.IUEH))
                            {
                                If ((G0A9 == One))
                                {
                                    G0A9 = Zero
                                    \_SB.PCI0.GFX0.IUEH (0x07)
                                    G068 |= 0x40
                                }
                            }
                        }
                        ElseIf ((G0A9 == One))
                        {
                            G0A9 = Zero
                            \_SB.WMIV.GVWE (One, Zero)
                            G068 |= 0x40
                        }
                    }

                    If (G0AA)
                    {
                        If (((G0AB & 0x0F) == Zero))
                        {
                            G0AA = Zero
                        }
                    }
                }
            }
        }

        Scope (\_SB)
        {
            Method (G0A6, 1, Serialized)
            {
                If ((Arg0 > Zero))
                {
                    If (\_SB.PCI0.LPCB.EC0.ECRG)
                    {
                        Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                        \_SB.PCI0.LPCB.EC0.PTEN = Zero
                        Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    }
                }
            }

            Method (G0A7, 1, Serialized)
            {
                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                    If (((PB1E & One) == One))
                    {
                        \_SB.PCI0.LPCB.EC0.PTEN = One
                    }
                    Else
                    {
                        \_SB.PCI0.LPCB.EC0.PTEN = Zero
                    }

                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                }

                If (((Arg0 == 0x03) || (Arg0 == 0x04)))
                {
                    If (\_SB.PCI0.LPCB.EC0.ECRG)
                    {
                        Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF)
                        \_SB.PCI0.LPCB.EC0.G0AB = \_SB.PCI0.LPCB.EC0.VBPS /* External reference */
                        Release (\_SB.PCI0.LPCB.EC0.ECMX)
                        If ((\GTOS () >= 0x08))
                        {
                            If ((\_SB.PCI0.LPCB.EC0.G0AB & 0x40))
                            {
                                \_SB.PCI0.LPCB.EC0.UPBT (0x06, One)
                                If (CondRefOf (\_SB.PCI0.LPCB.EC0.UDTS))
                                {
                                    \_SB.PCI0.LPCB.EC0.UDTS (Zero, Zero)
                                }
                            }
                            Else
                            {
                                \_SB.PCI0.LPCB.EC0.UPBT (0x06, Zero)
                                If (CondRefOf (\_SB.PCI0.LPCB.EC0.UDTS))
                                {
                                    \_SB.PCI0.LPCB.EC0.UDTS (Zero, Zero)
                                }
                            }

                            If ((\_SB.PCI0.LPCB.EC0.GBNT (\_SB.PCI0.LPCB.EC0.G0AB, 0x06) == One))
                            {
                                \_SB.PCI0.GFX0.IUER |= 0x40
                            }
                            Else
                            {
                                \_SB.PCI0.GFX0.IUER &= 0xFFFFFFBF
                            }

                            \_SB.PCI0.GFX0.AINT (0x06, Zero)
                        }

                        If ((\GTOS () <= 0x08))
                        {
                            \_SB.PCI0.LPCB.EC0.G0A8 = \_SB.PCI0.LPCB.EC0.GBNT (\_SB.PCI0.LPCB.EC0.G0AB, 0x06)
                        }

                        If ((\GTOS () >= 0x08))
                        {
                            If ((\_SB.PCI0.LPCB.EC0.G0AB & 0x80))
                            {
                                \_SB.PCI0.LPCB.EC0.UPBT (0x07, One)
                            }
                            Else
                            {
                                \_SB.PCI0.LPCB.EC0.UPBT (0x07, Zero)
                            }

                            If (\_SB.DCKD ())
                            {
                                \_SB.PCI0.GFX0.IUER |= 0x80
                            }
                            Else
                            {
                                \_SB.PCI0.GFX0.IUER &= 0xFFFFFF7F
                            }

                            \_SB.PCI0.GFX0.AINT (0x07, Zero)
                        }

                        If ((\GTOS () <= 0x08))
                        {
                            If (\_SB.DCKD ())
                            {
                                \_SB.PCI0.LPCB.EC0.G0A9 = One
                            }
                            Else
                            {
                                \_SB.PCI0.LPCB.EC0.G0A9 = Zero
                            }
                        }
                    }

                    If (CondRefOf (\_SB.PCI0.LPCB.EC0.ONTM))
                    {
                        \_SB.PCI0.LPCB.EC0.ONTM = One
                    }
                }
            }
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "HP", "HPCAHWID", 0x00001000)
{
    External (FDRS, FieldUnitObj)

    Scope (\_SB)
    {
        Device (FDAD)
        {
            Name (_HID, "HPIC000C")  // _HID: Hardware ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((FDRS == One))
                {
                    If (Ones)
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 2, "INTEL ", "Tpm2Tabl", 0x00001000)
{
    External (GSWS, MethodObj)    // 1 Arguments

    Scope (\_SB)
    {
        Device (TPM)
        {
            Name (_HID, "IFX0785")  // _HID: Hardware ID
            Noop
            Name (_CID, "MSFT0101" /* TPM 2.0 Security Device */)  // _CID: Compatible ID
            Name (_STR, Unicode ("TPM 2.0 Device"))  // _STR: Description String
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
            })
            OperationRegion (TPMR, SystemMemory, 0xFED40000, 0x5000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                ACC0,   8
            }

            OperationRegion (TNVS, SystemMemory, 0x97B05000, 0x2A)
            Field (TNVS, AnyAcc, NoLock, Preserve)
            {
                PPIN,   8, 
                PPIP,   32, 
                PPRP,   32, 
                PPRQ,   32, 
                PPRM,   32, 
                LPPR,   32, 
                FRET,   32, 
                MCIN,   8, 
                MCIP,   32, 
                MORD,   32, 
                MRET,   32, 
                UCRQ,   32
            }

            Method (PTS, 1, Serialized)
            {
                If (((Arg0 < 0x06) && (Arg0 > 0x03)))
                {
                    If (!(MORD & 0x10))
                    {
                        MCIP = 0x02
                        GSWS (MCIN)
                    }
                }

                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((ACC0 == 0xFF))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (HINF, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Name (TPMV, Package (0x02)
                        {
                            One, 
                            Package (0x02)
                            {
                                0x02, 
                                Zero
                            }
                        })
                        If ((_STA () == Zero))
                        {
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }

                        Return (TPMV) /* \_SB_.TPM_.HINF.TPMV */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Name (TPM2, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (TPM3, Package (0x03)
            {
                Zero, 
                Zero, 
                Zero
            })
            Method (TPPI, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        Return ("1.3")
                    }
                    Case (0x02)
                    {
                        PPRQ = DerefOf (Arg2 [Zero])
                        PPRM = Zero
                        PPIP = 0x02
                        GSWS (PPIN)
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Case (0x03)
                    {
                        TPM2 [One] = PPRQ /* \_SB_.TPM_.PPRQ */
                        Return (TPM2) /* \_SB_.TPM_.TPM2 */
                    }
                    Case (0x04)
                    {
                        Return (0x02)
                    }
                    Case (0x05)
                    {
                        PPIP = 0x05
                        GSWS (PPIN)
                        TPM3 [One] = LPPR /* \_SB_.TPM_.LPPR */
                        TPM3 [0x02] = PPRP /* \_SB_.TPM_.PPRP */
                        Return (TPM3) /* \_SB_.TPM_.TPM3 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        PPIP = 0x07
                        PPRQ = DerefOf (Arg2 [Zero])
                        PPRM = Zero
                        If ((PPRQ == 0x17))
                        {
                            PPRM = DerefOf (Arg2 [One])
                        }

                        GSWS (PPIN)
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Case (0x08)
                    {
                        PPIP = 0x08
                        UCRQ = DerefOf (Arg2 [Zero])
                        GSWS (PPIN)
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (TMCI, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        MORD = DerefOf (Arg2 [Zero])
                        MCIP = One
                        GSWS (MCIN)
                        Return (MRET) /* \_SB_.TPM_.MRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
                {
                    Return (HINF (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                {
                    Return (TPPI (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
                {
                    Return (TMCI (Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 2, "HP    ", "UcsiAcpi", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.LPCB, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.ECMX, MutexObj)
    External (_SB_.PCI0.LPCB.EC0_.ECRG, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.ECRM, OpRegionObj)
    External (ECRM, MethodObj)    // Warning: Unknown method, guessing 4 arguments

    Scope (\_SB.PCI0.LPCB.EC0)
    {
        Field (ECRM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x1B), 
            UCOS,   8, 
            UDAT,   8
        }

        Method (RRMB, 1, Serialized)
        {
            Debug = "Enter RRMB"
            Name (RBUF, Buffer (Arg0){})
            Local0 = Zero
            While ((Local0 < Arg0))
            {
                RBUF [Local0] = Zero
                Local0++
            }

            If (\_SB.PCI0.LPCB.EC0.ECRG)
            {
                If (Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF))
                {
                    Return (Zero)
                }

                UNL2 [Zero] = "RRMByte"
                Local0 = Zero
                While ((Local0 < Arg0))
                {
                    RBUF [Local0] = UDAT /* \_SB_.PCI0.LPCB.EC0_.UDAT */
                    Local0++
                }

                Release (\_SB.PCI0.LPCB.EC0.ECMX)
            }
            Else
            {
                UNL2 [Zero] = "RRMByte-no ECREG?"
                Debug = "RRMB No ECREG"
            }

            Debug = "Exit RRMB"
            Return (RBUF) /* \_SB_.PCI0.LPCB.EC0_.RRMB.RBUF */
        }

        Method (_Q27, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            Debug = "Enter Q27"
            UNL1 = 0xC027
            \_SB.UBTC.UQDC ()
            Debug = "Exit Q27"
            UNL1 = 0xCF27
        }
    }

    Scope (\_SB)
    {
        Name (UNL1, Zero)
        Name (UNL2, Buffer (0x20){})
        Device (UBTC)
        {
            Name (_HID, EisaId ("USBC000"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0CA0"))  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_DDN, "USB Type-C")  // _DDN: DOS Device Name
            Name (_ADR, Zero)  // _ADR: Address
            Name (UBCB, 0x97B18000)
            Name (UBCL, 0x00001000)
            Name (CRS, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y00)
            })
            Mutex (UMUT, 0x00)
            Name (UTE1, Zero)
            Mutex (UMU1, 0x00)
            Name (UOBF, Buffer (0x1A){})
            Name (UTE2, Zero)
            Mutex (UMU2, 0x00)
            OperationRegion (USBC, SystemMemory, UBCB, 0x30)
            Field (USBC, ByteAcc, Lock, Preserve)
            {
                VER1,   8, 
                VER2,   8, 
                RSV1,   8, 
                RSV2,   8, 
                CCI0,   8, 
                CCI1,   8, 
                CCI2,   8, 
                CCI3,   8, 
                CTL0,   8, 
                CTL1,   8, 
                CTL2,   8, 
                CTL3,   8, 
                CTL4,   8, 
                CTL5,   8, 
                CTL6,   8, 
                CTL7,   8, 
                MGI0,   8, 
                MGI1,   8, 
                MGI2,   8, 
                MGI3,   8, 
                MGI4,   8, 
                MGI5,   8, 
                MGI6,   8, 
                MGI7,   8, 
                MGI8,   8, 
                MGI9,   8, 
                MGIA,   8, 
                MGIB,   8, 
                MGIC,   8, 
                MGID,   8, 
                MGIE,   8, 
                MGIF,   8, 
                MGO0,   8, 
                MGO1,   8, 
                MGO2,   8, 
                MGO3,   8, 
                MGO4,   8, 
                MGO5,   8, 
                MGO6,   8, 
                MGO7,   8, 
                MGO8,   8, 
                MGO9,   8, 
                MGOA,   8, 
                MGOB,   8, 
                MGOC,   8, 
                MGOD,   8, 
                MGOE,   8, 
                MGOF,   8
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRS, \_SB.UBTC._Y00._BAS, CBAS)  // _BAS: Base Address
                CBAS = UBCB /* \_SB_.UBTC.UBCB */
                Return (CRS) /* \_SB_.UBTC.CRS_ */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Debug = "Enter UCSI _DSM"
                If ((Arg0 == ToUUID ("6f8398c2-7ca4-11e4-ad36-631042b5008f") /* Unknown UUID */))
                {
                    Debug = "Arg2 = "
                    Debug = Arg2
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            UNL1 = 0x0D50
                            Debug = "Exit UCSI _DSM Arg2=0"
                            Return (Buffer (One)
                            {
                                 0x0F                                             // .
                            })
                        }
                        Case (One)
                        {
                            UNL1 = 0x0D51
                            \_SB.UBTC.CCI0 = Zero
                            \_SB.UBTC.CCI1 = Zero
                            \_SB.UBTC.CCI2 = Zero
                            \_SB.UBTC.CCI3 = Zero
                            If ((\_SB.UBTC.CTL0 == One))
                            {
                                If ((URST () == One))
                                {
                                    \_SB.UBTC.CCI0 = Zero
                                    \_SB.UBTC.CCI1 = Zero
                                    \_SB.UBTC.CCI2 = Zero
                                    \_SB.UBTC.CCI3 = 0x08
                                    Notify (\_SB.UBTC, 0x80) // Status Change
                                }
                            }
                            Else
                            {
                                UOTE ()
                            }
                        }
                        Case (0x02)
                        {
                            UNL1 = 0x0D52
                        }
                        Case (0x03)
                        {
                            Debug = "Exit UCSI _DSM Arg2=3"
                            Return (Zero)
                        }

                    }
                }

                Debug = "Exit UCSI _DSM"
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (UCL1, 0, Serialized)
            {
                Debug = "Enter UCL1"
                UNL1 = 0xA001
                Name (ZBUF, Buffer (0x1A){})
                Local0 = Zero
                While ((Local0 < 0x1A))
                {
                    ZBUF [Local0] = Zero
                    Local0++
                }

                If (Acquire (UMU1, 0xFFFF))
                {
                    Return (Zero)
                }

                Local0 = 0xFFFFFFFFFFFFFFFE
                UTE1 &= Local0
                Release (UMU1)
                If (Acquire (UMU2, 0xFFFF))
                {
                    Return (Zero)
                }

                \_SB.UBTC.UOBF = ZBUF /* \_SB_.UBTC.UCL1.ZBUF */
                UTE2 = Zero
                Release (UMU2)
                Debug = "Exit UCL1"
                Return (Zero)
            }

            Method (UCRT, 1, Serialized)
            {
                Debug = "Enter UCRT"
                Local0 = Zero
                Local3 = Zero
                UETO (Arg0)
                If (Acquire (UMU1, 0xFFFF))
                {
                    Return (Zero)
                }

                Local1 = (UTE1 & One)
                Release (UMU1)
                If ((Local1 == One))
                {
                    If (!Acquire (UMUT, 0x03E8))
                    {
                        If (Acquire (UMU2, 0xFFFF))
                        {
                            Return (Zero)
                        }

                        Local2 = UTE2 /* \_SB_.UBTC.UTE2 */
                        Release (UMU2)
                        Debug = "Resignal EC to fetch cmd"
                        If ((UDHX (Local2) != One))
                        {
                            Local3 = One
                        }

                        Release (UMUT)
                    }
                    Else
                    {
                        UNL1 = 0xF031
                        Debug = "UCRT UMUT timeout"
                        Local3 = One
                    }
                }

                If ((Local3 == One))
                {
                    Debug = "UCRT bad exit"
                    Local0 = One
                    \_SB.UBTC.UCL1 ()
                }

                Debug = "Exit UCRT"
                Return (Local0)
            }

            Method (UQDC, 0, Serialized)
            {
                Debug = "Enter UQDC"
                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    Local5 = Zero
                    If (Acquire (UMU1, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    Local0 = UTE1 /* \_SB_.UBTC.UTE1 */
                    Release (UMU1)
                    If (Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    UNL1 = 0xC001
                    Local2 = \_SB.PCI0.LPCB.EC0.UCOS
                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    Debug = "UCOS = "
                    Debug = Local2
                    Switch (ToInteger (Local2))
                    {
                        Case (Zero)
                        {
                            Local1 = (Local0 & One)
                            If ((Local1 != Zero))
                            {
                                Debug = "ASL slow execution timeout"
                                \_SB.UBTC.UCL1 ()
                            }

                            Return (One)
                        }
                        Case (One)
                        {
                            Return (Zero)
                        }
                        Case (0x02)
                        {
                            UNL1 = 0xC002
                            Local1 = (Local0 & One)
                            If ((Local1 != Zero))
                            {
                                Local3 = UTTE ()
                                If ((Local3 == One))
                                {
                                    UNL2 [Zero] = "UQ-0"
                                    Debug = "Exit UQDC Cmd Fetched"
                                    Return (One)
                                }

                                UNL2 [Zero] = "UQDC() failout."
                                UNL1 = 0xF002
                                Local5 = One
                            }
                            Else
                            {
                                Debug = "Panic cleanup"
                                Local5 = One
                            }
                        }
                        Case (0x04)
                        {
                            UNL1 = 0xC003
                            UNL2 [Zero] = "UQ-F"
                            If ((UCRT (Local2) == One))
                            {
                                UNL2 [Zero] = "FOOK - FullResp override."
                            }
                        }
                        Case (0x05)
                        {
                            UNL1 = 0xC003
                            UNL2 [Zero] = "UQ-F"
                            If ((UCRT (Local2) == One))
                            {
                                UNL2 [Zero] = "FOOK - AbbrevResp override."
                            }
                        }
                        Case (0x07)
                        {
                            UNL2 [Zero] = "EC indicate cmdFail"
                            UNL1 = 0xF003
                            Local5 = One
                        }
                        Default
                        {
                            UNL1 = 0xF004
                            Local5 = One
                        }

                    }
                }
                Else
                {
                    Debug = "UQDC Fail ECREG"
                    Local5 = One
                }

                If ((Local5 == One))
                {
                    UNL1 = 0xF005
                    UNL2 [Zero] = "BigErr!Cleanup."
                    Debug = "UQDC Exit Big Error Cleanup"
                    \_SB.UBTC.UCL1 ()
                    Return (Zero)
                }

                Debug = "Exit UQDC"
                Return (One)
            }

            Method (UTTE, 0, Serialized)
            {
                Debug = "Enter UTTE"
                Local0 = One
                If (Acquire (UMUT, 0x03E8))
                {
                    UNL1 = 0xF0F0
                    Debug = "UTTE UMUT timeout"
                    Local0 = Zero
                }
                Else
                {
                    If (\_SB.PCI0.LPCB.EC0.ECRG)
                    {
                        UNL1 = 0xA003
                        If (Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF))
                        {
                            Return (Zero)
                        }

                        If (Acquire (UMU2, 0xFFFF))
                        {
                            Return (Zero)
                        }

                        Local1 = Zero
                        While ((Local1 < UTE2))
                        {
                            \_SB.PCI0.LPCB.EC0.UDAT = DerefOf (UOBF [Local1])
                            Local1++
                        }

                        Debug = "UTTE Work done"
                        Release (UMU2)
                        Release (\_SB.PCI0.LPCB.EC0.ECMX)
                        UNL1 = 0xA004
                    }
                    Else
                    {
                        UNL2 [Zero] = "UTTE fail ECREG"
                        UNL1 = 0xF006
                        Debug = "UTTE fail ECREG"
                        Local0 = Zero
                    }

                    UCL1 ()
                }

                Release (UMUT)
                Debug = "Exit UTTE"
                Return (Local0)
            }

            Method (UDCT, 0, Serialized)
            {
                Debug = "Enter UDCT"
                UNL1 = 0xA011
                If ((DerefOf (UOBF [0x03]) != Zero))
                {
                    Debug = "Exit UDCT Long"
                    Return (0x1A)
                }

                Debug = "Exit UDCT short"
                Return (0x0A)
            }

            Method (UBCP, 0, Serialized)
            {
                Debug = "Enter UBCP"
                UOBF [Zero] = \_SB.UBTC.RSV1
                UOBF [One] = \_SB.UBTC.RSV2
                UOBF [0x02] = \_SB.UBTC.CTL0
                UOBF [0x03] = \_SB.UBTC.CTL1
                UOBF [0x04] = \_SB.UBTC.CTL2
                UOBF [0x05] = \_SB.UBTC.CTL3
                UOBF [0x06] = \_SB.UBTC.CTL4
                UOBF [0x07] = \_SB.UBTC.CTL5
                UOBF [0x08] = \_SB.UBTC.CTL6
                UOBF [0x09] = \_SB.UBTC.CTL7
                UOBF [0x0A] = \_SB.UBTC.MGO0
                UOBF [0x0B] = \_SB.UBTC.MGO1
                UOBF [0x0C] = \_SB.UBTC.MGO2
                UOBF [0x0D] = \_SB.UBTC.MGO3
                UOBF [0x0E] = \_SB.UBTC.MGO4
                UOBF [0x0F] = \_SB.UBTC.MGO5
                UOBF [0x10] = \_SB.UBTC.MGO6
                UOBF [0x11] = \_SB.UBTC.MGO7
                UOBF [0x12] = \_SB.UBTC.MGO8
                UOBF [0x13] = \_SB.UBTC.MGO9
                UOBF [0x14] = \_SB.UBTC.MGOA
                UOBF [0x15] = \_SB.UBTC.MGOB
                UOBF [0x16] = \_SB.UBTC.MGOC
                UOBF [0x17] = \_SB.UBTC.MGOD
                UOBF [0x18] = \_SB.UBTC.MGOE
                UOBF [0x19] = \_SB.UBTC.MGOF
                Debug = "Exit UBCP"
            }

            Method (UDHX, 1, Serialized)
            {
                Debug = "Enter UDHX"
                Local0 = Zero
                Local1 = 0x03
                If ((Arg0 == 0x1A))
                {
                    Local1 = 0x04
                }

                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    If (Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    \_SB.PCI0.LPCB.EC0.UCOS = Local1
                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    UNL1 = 0xA020
                    Local0 = One
                }
                Else
                {
                    UNL2 [Zero] = "UDHX-Fail ECREG"
                    UNL1 = 0xF008
                    Debug = "UDHX fail ECREG"
                }

                Debug = "Exit UDHX"
                Return (Local0)
            }

            Method (UOTE, 0, Serialized)
            {
                Debug = "Enter UOTE"
                Local3 = One
                If (Acquire (UMUT, 0x03E8))
                {
                    UNL1 = 0xF011
                    Debug = "UMUT dumping command"
                    Return (Zero)
                }

                If (Acquire (UMU1, 0xFFFF))
                {
                    Return (Zero)
                }

                Local0 = (UTE1 & One)
                If ((Local0 == Zero))
                {
                    UBCP ()
                    UTE1 |= One
                    Local2 = UDCT ()
                    If (Acquire (UMU2, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    UTE2 = Local2
                    Release (UMU2)
                    If ((UDHX (Local2) != One))
                    {
                        UNL2 [Zero] = "UOTE-Fail ECREG"
                        UNL1 = 0xF008
                        Debug = "UOTE Fail ECREG"
                        Local3 = Zero
                    }
                }
                Else
                {
                    Debug = "OUTCMD already started"
                    If (Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    Local4 = \_SB.PCI0.LPCB.EC0.UCOS
                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    If ((Local4 == Zero))
                    {
                        Debug = "EC is illegally IDLE cleanup"
                        Local3 = Zero
                    }
                }

                Release (UMU1)
                If ((Local3 == Zero))
                {
                    UCL1 ()
                }

                Release (UMUT)
                Debug = "Exit UOTE"
                Return (Local3)
            }

            Method (UETO, 1, Serialized)
            {
                Debug = "Enter UETO"
                If (Acquire (UMUT, 0x03E8))
                {
                    UNL2 [Zero] = "UETO-failUMUTacquire"
                    UNL1 = 0xCF01
                    Debug = "UETO UMUT timeout"
                    Return (Zero)
                }

                UNL1 = 0xCF00
                If ((Arg0 == 0x04))
                {
                    Local1 = 0x18
                    UNL2 [Zero] = "FullUETO"
                    UNL1 = 0xCF10
                }
                ElseIf ((Arg0 == 0x05))
                {
                    Local1 = 0x08
                    UNL2 [Zero] = "AbbrvUETO"
                    UNL1 = 0xCF11
                }

                Name (BUFF, Buffer (Local1){})
                BUFF = \_SB.PCI0.LPCB.EC0.RRMB (Local1)
                \_SB.UBTC.VER1 = DerefOf (BUFF [Zero])
                \_SB.UBTC.VER2 = DerefOf (BUFF [One])
                \_SB.UBTC.RSV1 = DerefOf (BUFF [0x02])
                \_SB.UBTC.RSV2 = DerefOf (BUFF [0x03])
                \_SB.UBTC.CCI0 = DerefOf (BUFF [0x04])
                \_SB.UBTC.CCI1 = DerefOf (BUFF [0x05])
                \_SB.UBTC.CCI2 = DerefOf (BUFF [0x06])
                \_SB.UBTC.CCI3 = DerefOf (BUFF [0x07])
                If ((0x18 == Local1))
                {
                    UNL1 = 0xCF13
                    \_SB.UBTC.MGI0 = DerefOf (BUFF [0x08])
                    \_SB.UBTC.MGI1 = DerefOf (BUFF [0x09])
                    \_SB.UBTC.MGI2 = DerefOf (BUFF [0x0A])
                    \_SB.UBTC.MGI3 = DerefOf (BUFF [0x0B])
                    \_SB.UBTC.MGI4 = DerefOf (BUFF [0x0C])
                    \_SB.UBTC.MGI5 = DerefOf (BUFF [0x0D])
                    \_SB.UBTC.MGI6 = DerefOf (BUFF [0x0E])
                    \_SB.UBTC.MGI7 = DerefOf (BUFF [0x0F])
                    \_SB.UBTC.MGI8 = DerefOf (BUFF [0x10])
                    \_SB.UBTC.MGI9 = DerefOf (BUFF [0x11])
                    \_SB.UBTC.MGIA = DerefOf (BUFF [0x12])
                    \_SB.UBTC.MGIB = DerefOf (BUFF [0x13])
                    \_SB.UBTC.MGIC = DerefOf (BUFF [0x14])
                    \_SB.UBTC.MGID = DerefOf (BUFF [0x15])
                    \_SB.UBTC.MGIE = DerefOf (BUFF [0x16])
                    \_SB.UBTC.MGIF = DerefOf (BUFF [0x17])
                }

                Notify (\_SB.UBTC, 0x80) // Status Change
                Release (UMUT)
                UNL2 [Zero] = "xUETO"
                UNL1 = 0xCFFF
                Debug = "Exit UETO"
            }

            Method (URST, 0, Serialized)
            {
                Debug = "Enter URST"
                Local0 = Zero
                If (\_SB.PCI0.LPCB.EC0.ECRG)
                {
                    If (Acquire (\_SB.PCI0.LPCB.EC0.ECMX, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    \_SB.PCI0.LPCB.EC0.UCOS = 0x07
                    Local1 = 0x23
                    Local2 = \_SB.PCI0.LPCB.EC0.UCOS
                    While (((ToInteger (Local2) != Zero) && (Local1 > Zero)))
                    {
                        Sleep (0x0A)
                        Local2 = \_SB.PCI0.LPCB.EC0.UCOS
                        Local1--
                    }

                    Release (\_SB.PCI0.LPCB.EC0.ECMX)
                    Debug = "UCOS = "
                    Debug = Local2
                    If ((ToInteger (Local2) == Zero))
                    {
                        UNL1 = 0xA030
                        Local0 = One
                    }
                }
                Else
                {
                    UNL2 [Zero] = "URST-Fail ECREG"
                    UNL1 = 0xF013
                    Debug = "URST fail ECREG"
                }

                Debug = "Exit URST"
                Return (Local0)
            }
        }
    }
}



TPM2
----
[000h 0000 004h]                   Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004 004h]                Table Length : 00000034
[008h 0008 001h]                    Revision : 04
[009h 0009 001h]                    Checksum : 41
[00Ah 0010 006h]                      Oem ID : "INTEL "
[010h 0016 008h]                Oem Table ID : "CFL-ULT"
[018h 0024 004h]                Oem Revision : 20170001
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 20160422

[024h 0036 002h]              Platform Class : 0000
[026h 0038 002h]                    Reserved : 0000
[028h 0040 008h]             Control Address : 0000000000000000
[030h 0048 004h]                Start Method : 06 [Memory Mapped I/O]

/**** ACPI table terminates in the middle of a data structure! (dump table) 
CurrentOffset: 34, TableLength: 34 ***/
Raw Table Data: Length 52 (0x34)

    0000: 54 50 4D 32 34 00 00 00 04 41 49 4E 54 45 4C 20  // TPM24....AINTEL 
    0010: 43 46 4C 2D 55 4C 54 00 01 00 17 20 49 4E 54 4C  // CFL-ULT.... INTL
    0020: 22 04 16 20 00 00 00 00 00 00 00 00 00 00 00 00  // ".. ............
    0030: 06 00 00 00                                      // ....


UEFI
----
[000h 0000 004h]                   Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004 004h]                Table Length : 00000042
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 25
[00Ah 0010 006h]                      Oem ID : "INTEL "
[010h 0016 008h]                Oem Table ID : "CFL-ULT"
[018h 0024 004h]                Oem Revision : 20170001
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 20160422

[024h 0036 010h]             UUID Identifier : C68ED8E2-9DC6-4CBD-9D94-DB65ACC5C332
[034h 0052 002h]                 Data Offset : 0036

Raw Table Data: Length 66 (0x42)

    0000: 55 45 46 49 42 00 00 00 01 25 49 4E 54 45 4C 20  // UEFIB....%INTEL 
    0010: 43 46 4C 2D 55 4C 54 00 01 00 17 20 49 4E 54 4C  // CFL-ULT.... INTL
    0020: 22 04 16 20 E2 D8 8E C6 C6 9D BD 4C 9D 94 DB 65  // ".. .......L...e
    0030: AC C5 C3 32 36 00 03 00 00 00 00 40 B0 97 00 00  // ...26......@....
    0040: 00 00                                            // ..


WSMT1
-----
[000h 0000 004h]                   Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 27
[00Ah 0010 006h]                      Oem ID : "INTEL "
[010h 0016 008h]                Oem Table ID : "CFL-ULT"
[018h 0024 004h]                Oem Revision : 20170001
[01Ch 0028 004h]             Asl Compiler ID : "INTL"
[020h 0032 004h]       Asl Compiler Revision : 20160422

[024h 0036 004h]            Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 27 49 4E 54 45 4C 20  // WSMT(....'INTEL 
    0010: 43 46 4C 2D 55 4C 54 00 01 00 17 20 49 4E 54 4C  // CFL-ULT.... INTL
    0020: 22 04 16 20 07 00 00 00                          // ".. ....


WSMT2
-----
[000h 0000 004h]                   Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 79
[00Ah 0010 006h]                      Oem ID : "HPQOEM"
[010h 0016 008h]                Oem Table ID : "85B9    "
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "HP  "
[020h 0032 004h]       Asl Compiler Revision : 00000001

[024h 0036 004h]            Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 79 48 50 51 4F 45 4D  // WSMT(....yHPQOEM
    0010: 38 35 42 39 20 20 20 20 01 00 00 00 48 50 20 20  // 85B9    ....HP  
    0020: 01 00 00 00 07 00 00 00                          // ........


