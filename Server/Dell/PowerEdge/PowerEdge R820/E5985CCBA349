
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20200925
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x000181D4  0x01  "INTEL "  "PPM RCM "  0x80000001  "INTL"   0x20061109
 02)  SPCR  0x00000050  0x01  "DELL  "  "PE_SC3  "  0x00000001  "DELL"   0x00000001
 03)  MCFG  0x0000003C  0x01  "DELL  "  "PE_SC3  "  0x00000001  "DELL"   0x00000001
 04)  WD__  0x00000134  0x01  "DELL  "  "PE_SC3  "  0x00000001  "DELL"   0x00000001
 05)  EINJ  0x00000190  0x01  "DELL  "  "PE_SC3  "  0x00000001  "DELL"   0x00000001
 06)  APIC  0x00000382  0x01  "DELL  "  "PE_SC3  "  0x00000001  "DELL"   0x00000001
 07)  SLIC  0x00000024  0x01  "DELL  "  "PE_SC3  "  0x00000001  "DELL"   0x00000001
 08)  SLIT  0x00000045  0x01  "DELL  "  "PE_SC3  "  0x00000001  "DELL"   0x00000001
 09)  ERST  0x00000270  0x01  "DELL  "  "PE_SC3  "  0x00000001  "DELL"   0x00000001
 10)  DSDT  0x00008349  0x01  "DELL  "  "PE_SC3  "  0x00000001  "INTL"   0x20110211
 11)  SRAT  0x000007C0  0x01  "DELL  "  "PE_SC3  "  0x00000001  "DELL"   0x00000001
 12)  HEST  0x00000620  0x01  "DELL  "  "PE_SC3  "  0x00000001  "DELL"   0x00000001
 13)  BERT  0x00000030  0x01  "DELL  "  "PE_SC3  "  0x00000001  "DELL"   0x00000001
 14)  DMAR  0x00000190  0x01  "DELL  "  "PE_SC3  "  0x00000001  "DELL"   0x00000001
 15)  FACP  0x000000F4  0x03  "DELL  "  "PE_SC3  "  0x00000001  "DELL"   0x00000001
 16)  PC__  0x0000006E  0x01  "DELL  "  "PE_SC3  "  0x00000001  "DELL"   0x00000001
 17)  TCPA  0x00000064  0x02  "DELL  "  "PE_SC3  "  0x00000001  "DELL"   0x00000001
 18)  HPET  0x00000038  0x01  "DELL  "  "PE_SC3  "  0x00000001  "DELL"   0x00000001
 19)  FACS  0x00000040  0x01

Found 19 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000382
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 96
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "PE_SC3  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "DELL"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 20
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 03
[03Fh 0063   1]                Local Apic ID : 40
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 04
[047h 0071   1]                Local Apic ID : 60
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 05
[04Fh 0079   1]                Local Apic ID : 02
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 06
[057h 0087   1]                Local Apic ID : 22
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 07
[05Fh 0095   1]                Local Apic ID : 42
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 08
[067h 0103   1]                Local Apic ID : 62
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 09
[06Fh 0111   1]                Local Apic ID : 04
[070h 0112   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 0A
[077h 0119   1]                Local Apic ID : 24
[078h 0120   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 0B
[07Fh 0127   1]                Local Apic ID : 44
[080h 0128   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0C
[087h 0135   1]                Local Apic ID : 64
[088h 0136   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0D
[08Fh 0143   1]                Local Apic ID : 06
[090h 0144   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0E
[097h 0151   1]                Local Apic ID : 26
[098h 0152   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0F
[09Fh 0159   1]                Local Apic ID : 46
[0A0h 0160   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 10
[0A7h 0167   1]                Local Apic ID : 66
[0A8h 0168   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 11
[0AFh 0175   1]                Local Apic ID : 08
[0B0h 0176   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 12
[0B7h 0183   1]                Local Apic ID : 28
[0B8h 0184   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 13
[0BFh 0191   1]                Local Apic ID : 48
[0C0h 0192   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 14
[0C7h 0199   1]                Local Apic ID : 68
[0C8h 0200   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : 15
[0CFh 0207   1]                Local Apic ID : 10
[0D0h 0208   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : 16
[0D7h 0215   1]                Local Apic ID : 30
[0D8h 0216   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : 17
[0DFh 0223   1]                Local Apic ID : 50
[0E0h 0224   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : 18
[0E7h 0231   1]                Local Apic ID : 70
[0E8h 0232   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ECh 0236   1]                Subtable Type : 00 [Processor Local APIC]
[0EDh 0237   1]                       Length : 08
[0EEh 0238   1]                 Processor ID : 19
[0EFh 0239   1]                Local Apic ID : 12
[0F0h 0240   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0F4h 0244   1]                Subtable Type : 00 [Processor Local APIC]
[0F5h 0245   1]                       Length : 08
[0F6h 0246   1]                 Processor ID : 1A
[0F7h 0247   1]                Local Apic ID : 32
[0F8h 0248   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0FCh 0252   1]                Subtable Type : 00 [Processor Local APIC]
[0FDh 0253   1]                       Length : 08
[0FEh 0254   1]                 Processor ID : 1B
[0FFh 0255   1]                Local Apic ID : 52
[100h 0256   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[104h 0260   1]                Subtable Type : 00 [Processor Local APIC]
[105h 0261   1]                       Length : 08
[106h 0262   1]                 Processor ID : 1C
[107h 0263   1]                Local Apic ID : 72
[108h 0264   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[10Ch 0268   1]                Subtable Type : 00 [Processor Local APIC]
[10Dh 0269   1]                       Length : 08
[10Eh 0270   1]                 Processor ID : 1D
[10Fh 0271   1]                Local Apic ID : 14
[110h 0272   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[114h 0276   1]                Subtable Type : 00 [Processor Local APIC]
[115h 0277   1]                       Length : 08
[116h 0278   1]                 Processor ID : 1E
[117h 0279   1]                Local Apic ID : 34
[118h 0280   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[11Ch 0284   1]                Subtable Type : 00 [Processor Local APIC]
[11Dh 0285   1]                       Length : 08
[11Eh 0286   1]                 Processor ID : 1F
[11Fh 0287   1]                Local Apic ID : 54
[120h 0288   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[124h 0292   1]                Subtable Type : 00 [Processor Local APIC]
[125h 0293   1]                       Length : 08
[126h 0294   1]                 Processor ID : 20
[127h 0295   1]                Local Apic ID : 74
[128h 0296   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[12Ch 0300   1]                Subtable Type : 00 [Processor Local APIC]
[12Dh 0301   1]                       Length : 08
[12Eh 0302   1]                 Processor ID : 21
[12Fh 0303   1]                Local Apic ID : 16
[130h 0304   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[134h 0308   1]                Subtable Type : 00 [Processor Local APIC]
[135h 0309   1]                       Length : 08
[136h 0310   1]                 Processor ID : 22
[137h 0311   1]                Local Apic ID : 36
[138h 0312   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[13Ch 0316   1]                Subtable Type : 00 [Processor Local APIC]
[13Dh 0317   1]                       Length : 08
[13Eh 0318   1]                 Processor ID : 23
[13Fh 0319   1]                Local Apic ID : 56
[140h 0320   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[144h 0324   1]                Subtable Type : 00 [Processor Local APIC]
[145h 0325   1]                       Length : 08
[146h 0326   1]                 Processor ID : 24
[147h 0327   1]                Local Apic ID : 76
[148h 0328   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[14Ch 0332   1]                Subtable Type : 00 [Processor Local APIC]
[14Dh 0333   1]                       Length : 08
[14Eh 0334   1]                 Processor ID : 25
[14Fh 0335   1]                Local Apic ID : 18
[150h 0336   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[154h 0340   1]                Subtable Type : 00 [Processor Local APIC]
[155h 0341   1]                       Length : 08
[156h 0342   1]                 Processor ID : 26
[157h 0343   1]                Local Apic ID : 38
[158h 0344   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[15Ch 0348   1]                Subtable Type : 00 [Processor Local APIC]
[15Dh 0349   1]                       Length : 08
[15Eh 0350   1]                 Processor ID : 27
[15Fh 0351   1]                Local Apic ID : 58
[160h 0352   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[164h 0356   1]                Subtable Type : 00 [Processor Local APIC]
[165h 0357   1]                       Length : 08
[166h 0358   1]                 Processor ID : 28
[167h 0359   1]                Local Apic ID : 78
[168h 0360   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[16Ch 0364   1]                Subtable Type : 00 [Processor Local APIC]
[16Dh 0365   1]                       Length : 08
[16Eh 0366   1]                 Processor ID : 29
[16Fh 0367   1]                Local Apic ID : 01
[170h 0368   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[174h 0372   1]                Subtable Type : 00 [Processor Local APIC]
[175h 0373   1]                       Length : 08
[176h 0374   1]                 Processor ID : 2A
[177h 0375   1]                Local Apic ID : 21
[178h 0376   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[17Ch 0380   1]                Subtable Type : 00 [Processor Local APIC]
[17Dh 0381   1]                       Length : 08
[17Eh 0382   1]                 Processor ID : 2B
[17Fh 0383   1]                Local Apic ID : 41
[180h 0384   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[184h 0388   1]                Subtable Type : 00 [Processor Local APIC]
[185h 0389   1]                       Length : 08
[186h 0390   1]                 Processor ID : 2C
[187h 0391   1]                Local Apic ID : 61
[188h 0392   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[18Ch 0396   1]                Subtable Type : 00 [Processor Local APIC]
[18Dh 0397   1]                       Length : 08
[18Eh 0398   1]                 Processor ID : 2D
[18Fh 0399   1]                Local Apic ID : 03
[190h 0400   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[194h 0404   1]                Subtable Type : 00 [Processor Local APIC]
[195h 0405   1]                       Length : 08
[196h 0406   1]                 Processor ID : 2E
[197h 0407   1]                Local Apic ID : 23
[198h 0408   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[19Ch 0412   1]                Subtable Type : 00 [Processor Local APIC]
[19Dh 0413   1]                       Length : 08
[19Eh 0414   1]                 Processor ID : 2F
[19Fh 0415   1]                Local Apic ID : 43
[1A0h 0416   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[1A4h 0420   1]                Subtable Type : 00 [Processor Local APIC]
[1A5h 0421   1]                       Length : 08
[1A6h 0422   1]                 Processor ID : 30
[1A7h 0423   1]                Local Apic ID : 63
[1A8h 0424   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[1ACh 0428   1]                Subtable Type : 00 [Processor Local APIC]
[1ADh 0429   1]                       Length : 08
[1AEh 0430   1]                 Processor ID : 31
[1AFh 0431   1]                Local Apic ID : 05
[1B0h 0432   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[1B4h 0436   1]                Subtable Type : 00 [Processor Local APIC]
[1B5h 0437   1]                       Length : 08
[1B6h 0438   1]                 Processor ID : 32
[1B7h 0439   1]                Local Apic ID : 25
[1B8h 0440   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[1BCh 0444   1]                Subtable Type : 00 [Processor Local APIC]
[1BDh 0445   1]                       Length : 08
[1BEh 0446   1]                 Processor ID : 33
[1BFh 0447   1]                Local Apic ID : 45
[1C0h 0448   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[1C4h 0452   1]                Subtable Type : 00 [Processor Local APIC]
[1C5h 0453   1]                       Length : 08
[1C6h 0454   1]                 Processor ID : 34
[1C7h 0455   1]                Local Apic ID : 65
[1C8h 0456   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[1CCh 0460   1]                Subtable Type : 00 [Processor Local APIC]
[1CDh 0461   1]                       Length : 08
[1CEh 0462   1]                 Processor ID : 35
[1CFh 0463   1]                Local Apic ID : 07
[1D0h 0464   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[1D4h 0468   1]                Subtable Type : 00 [Processor Local APIC]
[1D5h 0469   1]                       Length : 08
[1D6h 0470   1]                 Processor ID : 36
[1D7h 0471   1]                Local Apic ID : 27
[1D8h 0472   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[1DCh 0476   1]                Subtable Type : 00 [Processor Local APIC]
[1DDh 0477   1]                       Length : 08
[1DEh 0478   1]                 Processor ID : 37
[1DFh 0479   1]                Local Apic ID : 47
[1E0h 0480   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[1E4h 0484   1]                Subtable Type : 00 [Processor Local APIC]
[1E5h 0485   1]                       Length : 08
[1E6h 0486   1]                 Processor ID : 38
[1E7h 0487   1]                Local Apic ID : 67
[1E8h 0488   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[1ECh 0492   1]                Subtable Type : 00 [Processor Local APIC]
[1EDh 0493   1]                       Length : 08
[1EEh 0494   1]                 Processor ID : 39
[1EFh 0495   1]                Local Apic ID : 09
[1F0h 0496   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[1F4h 0500   1]                Subtable Type : 00 [Processor Local APIC]
[1F5h 0501   1]                       Length : 08
[1F6h 0502   1]                 Processor ID : 3A
[1F7h 0503   1]                Local Apic ID : 29
[1F8h 0504   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[1FCh 0508   1]                Subtable Type : 00 [Processor Local APIC]
[1FDh 0509   1]                       Length : 08
[1FEh 0510   1]                 Processor ID : 3B
[1FFh 0511   1]                Local Apic ID : 49
[200h 0512   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[204h 0516   1]                Subtable Type : 00 [Processor Local APIC]
[205h 0517   1]                       Length : 08
[206h 0518   1]                 Processor ID : 3C
[207h 0519   1]                Local Apic ID : 69
[208h 0520   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[20Ch 0524   1]                Subtable Type : 00 [Processor Local APIC]
[20Dh 0525   1]                       Length : 08
[20Eh 0526   1]                 Processor ID : 3D
[20Fh 0527   1]                Local Apic ID : 11
[210h 0528   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[214h 0532   1]                Subtable Type : 00 [Processor Local APIC]
[215h 0533   1]                       Length : 08
[216h 0534   1]                 Processor ID : 3E
[217h 0535   1]                Local Apic ID : 31
[218h 0536   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[21Ch 0540   1]                Subtable Type : 00 [Processor Local APIC]
[21Dh 0541   1]                       Length : 08
[21Eh 0542   1]                 Processor ID : 3F
[21Fh 0543   1]                Local Apic ID : 51
[220h 0544   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[224h 0548   1]                Subtable Type : 00 [Processor Local APIC]
[225h 0549   1]                       Length : 08
[226h 0550   1]                 Processor ID : 40
[227h 0551   1]                Local Apic ID : 71
[228h 0552   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[22Ch 0556   1]                Subtable Type : 00 [Processor Local APIC]
[22Dh 0557   1]                       Length : 08
[22Eh 0558   1]                 Processor ID : 41
[22Fh 0559   1]                Local Apic ID : 13
[230h 0560   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[234h 0564   1]                Subtable Type : 00 [Processor Local APIC]
[235h 0565   1]                       Length : 08
[236h 0566   1]                 Processor ID : 42
[237h 0567   1]                Local Apic ID : 33
[238h 0568   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[23Ch 0572   1]                Subtable Type : 00 [Processor Local APIC]
[23Dh 0573   1]                       Length : 08
[23Eh 0574   1]                 Processor ID : 43
[23Fh 0575   1]                Local Apic ID : 53
[240h 0576   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[244h 0580   1]                Subtable Type : 00 [Processor Local APIC]
[245h 0581   1]                       Length : 08
[246h 0582   1]                 Processor ID : 44
[247h 0583   1]                Local Apic ID : 73
[248h 0584   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[24Ch 0588   1]                Subtable Type : 00 [Processor Local APIC]
[24Dh 0589   1]                       Length : 08
[24Eh 0590   1]                 Processor ID : 45
[24Fh 0591   1]                Local Apic ID : 15
[250h 0592   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[254h 0596   1]                Subtable Type : 00 [Processor Local APIC]
[255h 0597   1]                       Length : 08
[256h 0598   1]                 Processor ID : 46
[257h 0599   1]                Local Apic ID : 35
[258h 0600   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[25Ch 0604   1]                Subtable Type : 00 [Processor Local APIC]
[25Dh 0605   1]                       Length : 08
[25Eh 0606   1]                 Processor ID : 47
[25Fh 0607   1]                Local Apic ID : 55
[260h 0608   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[264h 0612   1]                Subtable Type : 00 [Processor Local APIC]
[265h 0613   1]                       Length : 08
[266h 0614   1]                 Processor ID : 48
[267h 0615   1]                Local Apic ID : 75
[268h 0616   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[26Ch 0620   1]                Subtable Type : 00 [Processor Local APIC]
[26Dh 0621   1]                       Length : 08
[26Eh 0622   1]                 Processor ID : 49
[26Fh 0623   1]                Local Apic ID : 17
[270h 0624   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[274h 0628   1]                Subtable Type : 00 [Processor Local APIC]
[275h 0629   1]                       Length : 08
[276h 0630   1]                 Processor ID : 4A
[277h 0631   1]                Local Apic ID : 37
[278h 0632   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[27Ch 0636   1]                Subtable Type : 00 [Processor Local APIC]
[27Dh 0637   1]                       Length : 08
[27Eh 0638   1]                 Processor ID : 4B
[27Fh 0639   1]                Local Apic ID : 57
[280h 0640   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[284h 0644   1]                Subtable Type : 00 [Processor Local APIC]
[285h 0645   1]                       Length : 08
[286h 0646   1]                 Processor ID : 4C
[287h 0647   1]                Local Apic ID : 77
[288h 0648   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[28Ch 0652   1]                Subtable Type : 00 [Processor Local APIC]
[28Dh 0653   1]                       Length : 08
[28Eh 0654   1]                 Processor ID : 4D
[28Fh 0655   1]                Local Apic ID : 19
[290h 0656   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[294h 0660   1]                Subtable Type : 00 [Processor Local APIC]
[295h 0661   1]                       Length : 08
[296h 0662   1]                 Processor ID : 4E
[297h 0663   1]                Local Apic ID : 39
[298h 0664   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[29Ch 0668   1]                Subtable Type : 00 [Processor Local APIC]
[29Dh 0669   1]                       Length : 08
[29Eh 0670   1]                 Processor ID : 4F
[29Fh 0671   1]                Local Apic ID : 59
[2A0h 0672   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[2A4h 0676   1]                Subtable Type : 00 [Processor Local APIC]
[2A5h 0677   1]                       Length : 08
[2A6h 0678   1]                 Processor ID : 50
[2A7h 0679   1]                Local Apic ID : 79
[2A8h 0680   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[2ACh 0684   1]                Subtable Type : 00 [Processor Local APIC]
[2ADh 0685   1]                       Length : 08
[2AEh 0686   1]                 Processor ID : 51
[2AFh 0687   1]                Local Apic ID : D0
[2B0h 0688   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2B4h 0692   1]                Subtable Type : 00 [Processor Local APIC]
[2B5h 0693   1]                       Length : 08
[2B6h 0694   1]                 Processor ID : 52
[2B7h 0695   1]                Local Apic ID : D1
[2B8h 0696   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2BCh 0700   1]                Subtable Type : 00 [Processor Local APIC]
[2BDh 0701   1]                       Length : 08
[2BEh 0702   1]                 Processor ID : 53
[2BFh 0703   1]                Local Apic ID : D2
[2C0h 0704   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2C4h 0708   1]                Subtable Type : 00 [Processor Local APIC]
[2C5h 0709   1]                       Length : 08
[2C6h 0710   1]                 Processor ID : 54
[2C7h 0711   1]                Local Apic ID : D3
[2C8h 0712   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2CCh 0716   1]                Subtable Type : 00 [Processor Local APIC]
[2CDh 0717   1]                       Length : 08
[2CEh 0718   1]                 Processor ID : 55
[2CFh 0719   1]                Local Apic ID : D4
[2D0h 0720   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2D4h 0724   1]                Subtable Type : 00 [Processor Local APIC]
[2D5h 0725   1]                       Length : 08
[2D6h 0726   1]                 Processor ID : 56
[2D7h 0727   1]                Local Apic ID : D5
[2D8h 0728   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2DCh 0732   1]                Subtable Type : 00 [Processor Local APIC]
[2DDh 0733   1]                       Length : 08
[2DEh 0734   1]                 Processor ID : 57
[2DFh 0735   1]                Local Apic ID : D6
[2E0h 0736   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2E4h 0740   1]                Subtable Type : 00 [Processor Local APIC]
[2E5h 0741   1]                       Length : 08
[2E6h 0742   1]                 Processor ID : 58
[2E7h 0743   1]                Local Apic ID : D7
[2E8h 0744   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2ECh 0748   1]                Subtable Type : 00 [Processor Local APIC]
[2EDh 0749   1]                       Length : 08
[2EEh 0750   1]                 Processor ID : 59
[2EFh 0751   1]                Local Apic ID : D8
[2F0h 0752   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2F4h 0756   1]                Subtable Type : 00 [Processor Local APIC]
[2F5h 0757   1]                       Length : 08
[2F6h 0758   1]                 Processor ID : 5A
[2F7h 0759   1]                Local Apic ID : D9
[2F8h 0760   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[2FCh 0764   1]                Subtable Type : 00 [Processor Local APIC]
[2FDh 0765   1]                       Length : 08
[2FEh 0766   1]                 Processor ID : 5B
[2FFh 0767   1]                Local Apic ID : DA
[300h 0768   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[304h 0772   1]                Subtable Type : 00 [Processor Local APIC]
[305h 0773   1]                       Length : 08
[306h 0774   1]                 Processor ID : 5C
[307h 0775   1]                Local Apic ID : DB
[308h 0776   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[30Ch 0780   1]                Subtable Type : 00 [Processor Local APIC]
[30Dh 0781   1]                       Length : 08
[30Eh 0782   1]                 Processor ID : 5D
[30Fh 0783   1]                Local Apic ID : DC
[310h 0784   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[314h 0788   1]                Subtable Type : 00 [Processor Local APIC]
[315h 0789   1]                       Length : 08
[316h 0790   1]                 Processor ID : 5E
[317h 0791   1]                Local Apic ID : DD
[318h 0792   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[31Ch 0796   1]                Subtable Type : 00 [Processor Local APIC]
[31Dh 0797   1]                       Length : 08
[31Eh 0798   1]                 Processor ID : 5F
[31Fh 0799   1]                Local Apic ID : DE
[320h 0800   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[324h 0804   1]                Subtable Type : 00 [Processor Local APIC]
[325h 0805   1]                       Length : 08
[326h 0806   1]                 Processor ID : 60
[327h 0807   1]                Local Apic ID : DF
[328h 0808   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[32Ch 0812   1]                Subtable Type : 04 [Local APIC NMI]
[32Dh 0813   1]                       Length : 06
[32Eh 0814   1]                 Processor ID : FF
[32Fh 0815   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[331h 0817   1]         Interrupt Input LINT : 01

[332h 0818   1]                Subtable Type : 02 [Interrupt Source Override]
[333h 0819   1]                       Length : 0A
[334h 0820   1]                          Bus : 00
[335h 0821   1]                       Source : 00
[336h 0822   4]                    Interrupt : 00000002
[33Ah 0826   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[33Ch 0828   1]                Subtable Type : 02 [Interrupt Source Override]
[33Dh 0829   1]                       Length : 0A
[33Eh 0830   1]                          Bus : 00
[33Fh 0831   1]                       Source : 09
[340h 0832   4]                    Interrupt : 00000009
[344h 0836   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[346h 0838   1]                Subtable Type : 01 [I/O APIC]
[347h 0839   1]                       Length : 0C
[348h 0840   1]                  I/O Apic ID : 00
[349h 0841   1]                     Reserved : 00
[34Ah 0842   4]                      Address : FEC00000
[34Eh 0846   4]                    Interrupt : 00000000

[352h 0850   1]                Subtable Type : 01 [I/O APIC]
[353h 0851   1]                       Length : 0C
[354h 0852   1]                  I/O Apic ID : 01
[355h 0853   1]                     Reserved : 00
[356h 0854   4]                      Address : FEC3F000
[35Ah 0858   4]                    Interrupt : 00000020

[35Eh 0862   1]                Subtable Type : 01 [I/O APIC]
[35Fh 0863   1]                       Length : 0C
[360h 0864   1]                  I/O Apic ID : 02
[361h 0865   1]                     Reserved : 00
[362h 0866   4]                      Address : FEC7F000
[366h 0870   4]                    Interrupt : 00000040

[36Ah 0874   1]                Subtable Type : 01 [I/O APIC]
[36Bh 0875   1]                       Length : 0C
[36Ch 0876   1]                  I/O Apic ID : 03
[36Dh 0877   1]                     Reserved : 00
[36Eh 0878   4]                      Address : FEC80000
[372h 0882   4]                    Interrupt : 00000060

[376h 0886   1]                Subtable Type : 01 [I/O APIC]
[377h 0887   1]                       Length : 0C
[378h 0888   1]                  I/O Apic ID : 04
[379h 0889   1]                     Reserved : 00
[37Ah 0890   4]                      Address : FECC0000
[37Eh 0894   4]                    Interrupt : 00000080

Raw Table Data: Length 898 (0x382)

    0000: 41 50 49 43 82 03 00 00 01 96 44 45 4C 4C 20 20  // APIC......DELL  
    0010: 50 45 5F 53 43 33 20 20 01 00 00 00 44 45 4C 4C  // PE_SC3  ....DELL
    0020: 01 00 00 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
    0030: 01 00 00 00 00 08 02 20 01 00 00 00 00 08 03 40  // ....... .......@
    0040: 01 00 00 00 00 08 04 60 01 00 00 00 00 08 05 02  // .......`........
    0050: 01 00 00 00 00 08 06 22 01 00 00 00 00 08 07 42  // .......".......B
    0060: 01 00 00 00 00 08 08 62 01 00 00 00 00 08 09 04  // .......b........
    0070: 01 00 00 00 00 08 0A 24 01 00 00 00 00 08 0B 44  // .......$.......D
    0080: 01 00 00 00 00 08 0C 64 01 00 00 00 00 08 0D 06  // .......d........
    0090: 01 00 00 00 00 08 0E 26 01 00 00 00 00 08 0F 46  // .......&.......F
    00A0: 01 00 00 00 00 08 10 66 01 00 00 00 00 08 11 08  // .......f........
    00B0: 01 00 00 00 00 08 12 28 01 00 00 00 00 08 13 48  // .......(.......H
    00C0: 01 00 00 00 00 08 14 68 01 00 00 00 00 08 15 10  // .......h........
    00D0: 01 00 00 00 00 08 16 30 01 00 00 00 00 08 17 50  // .......0.......P
    00E0: 01 00 00 00 00 08 18 70 01 00 00 00 00 08 19 12  // .......p........
    00F0: 01 00 00 00 00 08 1A 32 01 00 00 00 00 08 1B 52  // .......2.......R
    0100: 01 00 00 00 00 08 1C 72 01 00 00 00 00 08 1D 14  // .......r........
    0110: 01 00 00 00 00 08 1E 34 01 00 00 00 00 08 1F 54  // .......4.......T
    0120: 01 00 00 00 00 08 20 74 01 00 00 00 00 08 21 16  // ...... t......!.
    0130: 01 00 00 00 00 08 22 36 01 00 00 00 00 08 23 56  // ......"6......#V
    0140: 01 00 00 00 00 08 24 76 01 00 00 00 00 08 25 18  // ......$v......%.
    0150: 01 00 00 00 00 08 26 38 01 00 00 00 00 08 27 58  // ......&8......'X
    0160: 01 00 00 00 00 08 28 78 01 00 00 00 00 08 29 01  // ......(x......).
    0170: 01 00 00 00 00 08 2A 21 01 00 00 00 00 08 2B 41  // ......*!......+A
    0180: 01 00 00 00 00 08 2C 61 01 00 00 00 00 08 2D 03  // ......,a......-.
    0190: 01 00 00 00 00 08 2E 23 01 00 00 00 00 08 2F 43  // .......#....../C
    01A0: 01 00 00 00 00 08 30 63 01 00 00 00 00 08 31 05  // ......0c......1.
    01B0: 01 00 00 00 00 08 32 25 01 00 00 00 00 08 33 45  // ......2%......3E
    01C0: 01 00 00 00 00 08 34 65 01 00 00 00 00 08 35 07  // ......4e......5.
    01D0: 01 00 00 00 00 08 36 27 01 00 00 00 00 08 37 47  // ......6'......7G
    01E0: 01 00 00 00 00 08 38 67 01 00 00 00 00 08 39 09  // ......8g......9.
    01F0: 01 00 00 00 00 08 3A 29 01 00 00 00 00 08 3B 49  // ......:)......;I
    0200: 01 00 00 00 00 08 3C 69 01 00 00 00 00 08 3D 11  // ......<i......=.
    0210: 01 00 00 00 00 08 3E 31 01 00 00 00 00 08 3F 51  // ......>1......?Q
    0220: 01 00 00 00 00 08 40 71 01 00 00 00 00 08 41 13  // ......@q......A.
    0230: 01 00 00 00 00 08 42 33 01 00 00 00 00 08 43 53  // ......B3......CS
    0240: 01 00 00 00 00 08 44 73 01 00 00 00 00 08 45 15  // ......Ds......E.
    0250: 01 00 00 00 00 08 46 35 01 00 00 00 00 08 47 55  // ......F5......GU
    0260: 01 00 00 00 00 08 48 75 01 00 00 00 00 08 49 17  // ......Hu......I.
    0270: 01 00 00 00 00 08 4A 37 01 00 00 00 00 08 4B 57  // ......J7......KW
    0280: 01 00 00 00 00 08 4C 77 01 00 00 00 00 08 4D 19  // ......Lw......M.
    0290: 01 00 00 00 00 08 4E 39 01 00 00 00 00 08 4F 59  // ......N9......OY
    02A0: 01 00 00 00 00 08 50 79 01 00 00 00 00 08 51 D0  // ......Py......Q.
    02B0: 00 00 00 00 00 08 52 D1 00 00 00 00 00 08 53 D2  // ......R.......S.
    02C0: 00 00 00 00 00 08 54 D3 00 00 00 00 00 08 55 D4  // ......T.......U.
    02D0: 00 00 00 00 00 08 56 D5 00 00 00 00 00 08 57 D6  // ......V.......W.
    02E0: 00 00 00 00 00 08 58 D7 00 00 00 00 00 08 59 D8  // ......X.......Y.
    02F0: 00 00 00 00 00 08 5A D9 00 00 00 00 00 08 5B DA  // ......Z.......[.
    0300: 00 00 00 00 00 08 5C DB 00 00 00 00 00 08 5D DC  // ......\.......].
    0310: 00 00 00 00 00 08 5E DD 00 00 00 00 00 08 5F DE  // ......^......._.
    0320: 00 00 00 00 00 08 60 DF 00 00 00 00 04 06 FF 05  // ......`.........
    0330: 00 01 02 0A 00 00 02 00 00 00 00 00 02 0A 00 09  // ................
    0340: 09 00 00 00 0D 00 01 0C 00 00 00 00 C0 FE 00 00  // ................
    0350: 00 00 01 0C 01 00 00 F0 C3 FE 20 00 00 00 01 0C  // .......... .....
    0360: 02 00 00 F0 C7 FE 40 00 00 00 01 0C 03 00 00 00  // ......@.........
    0370: C8 FE 60 00 00 00 01 0C 04 00 00 00 CC FE 80 00  // ..`.............
    0380: 00 00                                            // ..


BERT
----
[000h 0000   4]                    Signature : "BERT"    [Boot Error Record Table]
[004h 0004   4]                 Table Length : 00000030
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : B7
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "PE_SC3  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "DELL"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]     Boot Error Region Length : 00000400
[028h 0040   8]    Boot Error Region Address : 00000000BD2D7C00

Raw Table Data: Length 48 (0x30)

    0000: 42 45 52 54 30 00 00 00 01 B7 44 45 4C 4C 20 20  // BERT0.....DELL  
    0010: 50 45 5F 53 43 33 20 20 01 00 00 00 44 45 4C 4C  // PE_SC3  ....DELL
    0020: 01 00 00 00 00 04 00 00 00 7C 2D BD 00 00 00 00  // .........|-.....


DMAR
----
[000h 0000   4]                    Signature : "DMAR"    [DMA Remapping table]
[004h 0004   4]                 Table Length : 00000190
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : B5
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "PE_SC3  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "DELL"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   1]           Host Address Width : 2D
[025h 0037   1]                        Flags : 03
[026h 0038  10]                     Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048   2]                Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050   2]                       Length : 0048

[034h 0052   1]                        Flags : 00
[035h 0053   1]                     Reserved : 00
[036h 0054   2]           PCI Segment Number : 0000
[038h 0056   8]        Register Base Address : 00000000CF000000

[040h 0064   1]            Device Scope Type : 03 [IOAPIC Device]
[041h 0065   1]                 Entry Length : 08
[042h 0066   2]                     Reserved : 0000
[044h 0068   1]               Enumeration ID : 02
[045h 0069   1]               PCI Bus Number : 40

[046h 0070   2]                     PCI Path : 05,04


[048h 0072   1]            Device Scope Type : 02 [PCI Bridge Device]
[049h 0073   1]                 Entry Length : 08
[04Ah 0074   2]                     Reserved : 0000
[04Ch 0076   1]               Enumeration ID : 00
[04Dh 0077   1]               PCI Bus Number : 40

[04Eh 0078   2]                     PCI Path : 01,00


[050h 0080   1]            Device Scope Type : 02 [PCI Bridge Device]
[051h 0081   1]                 Entry Length : 08
[052h 0082   2]                     Reserved : 0000
[054h 0084   1]               Enumeration ID : 00
[055h 0085   1]               PCI Bus Number : 40

[056h 0086   2]                     PCI Path : 02,00


[058h 0088   1]            Device Scope Type : 02 [PCI Bridge Device]
[059h 0089   1]                 Entry Length : 08
[05Ah 0090   2]                     Reserved : 0000
[05Ch 0092   1]               Enumeration ID : 00
[05Dh 0093   1]               PCI Bus Number : 40

[05Eh 0094   2]                     PCI Path : 02,02


[060h 0096   1]            Device Scope Type : 02 [PCI Bridge Device]
[061h 0097   1]                 Entry Length : 08
[062h 0098   2]                     Reserved : 0000
[064h 0100   1]               Enumeration ID : 00
[065h 0101   1]               PCI Bus Number : 40

[066h 0102   2]                     PCI Path : 03,00


[068h 0104   1]            Device Scope Type : 01 [PCI Endpoint Device]
[069h 0105   1]                 Entry Length : 08
[06Ah 0106   2]                     Reserved : 0000
[06Ch 0108   1]               Enumeration ID : 00
[06Dh 0109   1]               PCI Bus Number : 40

[06Eh 0110   2]                     PCI Path : 05,00


[070h 0112   1]            Device Scope Type : 01 [PCI Endpoint Device]
[071h 0113   1]                 Entry Length : 08
[072h 0114   2]                     Reserved : 0000
[074h 0116   1]               Enumeration ID : 00
[075h 0117   1]               PCI Bus Number : 40

[076h 0118   2]                     PCI Path : 05,02


[078h 0120   2]                Subtable Type : 0000 [Hardware Unit Definition]
[07Ah 0122   2]                       Length : 0020

[07Ch 0124   1]                        Flags : 00
[07Dh 0125   1]                     Reserved : 00
[07Eh 0126   2]           PCI Segment Number : 0000
[080h 0128   8]        Register Base Address : 00000000C8000000

[088h 0136   1]            Device Scope Type : 03 [IOAPIC Device]
[089h 0137   1]                 Entry Length : 08
[08Ah 0138   2]                     Reserved : 0000
[08Ch 0140   1]               Enumeration ID : 03
[08Dh 0141   1]               PCI Bus Number : 80

[08Eh 0142   2]                     PCI Path : 05,04


[090h 0144   1]            Device Scope Type : 01 [PCI Endpoint Device]
[091h 0145   1]                 Entry Length : 08
[092h 0146   2]                     Reserved : 0000
[094h 0148   1]               Enumeration ID : 00
[095h 0149   1]               PCI Bus Number : 80

[096h 0150   2]                     PCI Path : 05,00


[098h 0152   2]                Subtable Type : 0000 [Hardware Unit Definition]
[09Ah 0154   2]                       Length : 0020

[09Ch 0156   1]                        Flags : 00
[09Dh 0157   1]                     Reserved : 00
[09Eh 0158   2]           PCI Segment Number : 0000
[0A0h 0160   8]        Register Base Address : 00000000C4000000

[0A8h 0168   1]            Device Scope Type : 03 [IOAPIC Device]
[0A9h 0169   1]                 Entry Length : 08
[0AAh 0170   2]                     Reserved : 0000
[0ACh 0172   1]               Enumeration ID : 04
[0ADh 0173   1]               PCI Bus Number : C0

[0AEh 0174   2]                     PCI Path : 05,04


[0B0h 0176   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0B1h 0177   1]                 Entry Length : 08
[0B2h 0178   2]                     Reserved : 0000
[0B4h 0180   1]               Enumeration ID : 00
[0B5h 0181   1]               PCI Bus Number : C0

[0B6h 0182   2]                     PCI Path : 05,00


[0B8h 0184   2]                Subtable Type : 0000 [Hardware Unit Definition]
[0BAh 0186   2]                       Length : 0028

[0BCh 0188   1]                        Flags : 01
[0BDh 0189   1]                     Reserved : 00
[0BEh 0190   2]           PCI Segment Number : 0000
[0C0h 0192   8]        Register Base Address : 00000000DF100000

[0C8h 0200   1]            Device Scope Type : 03 [IOAPIC Device]
[0C9h 0201   1]                 Entry Length : 08
[0CAh 0202   2]                     Reserved : 0000
[0CCh 0204   1]               Enumeration ID : 00
[0CDh 0205   1]               PCI Bus Number : 00

[0CEh 0206   2]                     PCI Path : 1E,01


[0D0h 0208   1]            Device Scope Type : 03 [IOAPIC Device]
[0D1h 0209   1]                 Entry Length : 08
[0D2h 0210   2]                     Reserved : 0000
[0D4h 0212   1]               Enumeration ID : 01
[0D5h 0213   1]               PCI Bus Number : 00

[0D6h 0214   2]                     PCI Path : 05,04


[0D8h 0216   1]            Device Scope Type : 04 [Message-capable HPET Device]
[0D9h 0217   1]                 Entry Length : 08
[0DAh 0218   2]                     Reserved : 0000
[0DCh 0220   1]               Enumeration ID : 00
[0DDh 0221   1]               PCI Bus Number : 00

[0DEh 0222   2]                     PCI Path : 0F,00


[0E0h 0224   2]                Subtable Type : 0001 [Reserved Memory Region]
[0E2h 0226   2]                       Length : 0028

[0E4h 0228   2]                     Reserved : 0000
[0E6h 0230   2]           PCI Segment Number : 0000
[0E8h 0232   8]                 Base Address : 00000000BF458000
[0F0h 0240   8]          End Address (limit) : 00000000BF46FFFF

[0F8h 0248   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0F9h 0249   1]                 Entry Length : 08
[0FAh 0250   2]                     Reserved : 0000
[0FCh 0252   1]               Enumeration ID : 00
[0FDh 0253   1]               PCI Bus Number : 00

[0FEh 0254   2]                     PCI Path : 1A,00


[100h 0256   1]            Device Scope Type : 01 [PCI Endpoint Device]
[101h 0257   1]                 Entry Length : 08
[102h 0258   2]                     Reserved : 0000
[104h 0260   1]               Enumeration ID : 00
[105h 0261   1]               PCI Bus Number : 00

[106h 0262   2]                     PCI Path : 1D,00


[108h 0264   2]                Subtable Type : 0001 [Reserved Memory Region]
[10Ah 0266   2]                       Length : 0020

[10Ch 0268   2]                     Reserved : 0000
[10Eh 0270   2]           PCI Segment Number : 0000
[110h 0272   8]                 Base Address : 00000000BF450000
[118h 0280   8]          End Address (limit) : 00000000BF450FFF

[120h 0288   1]            Device Scope Type : 01 [PCI Endpoint Device]
[121h 0289   1]                 Entry Length : 08
[122h 0290   2]                     Reserved : 0000
[124h 0292   1]               Enumeration ID : 00
[125h 0293   1]               PCI Bus Number : 00

[126h 0294   2]                     PCI Path : 1A,00


[128h 0296   2]                Subtable Type : 0001 [Reserved Memory Region]
[12Ah 0298   2]                       Length : 0020

[12Ch 0300   2]                     Reserved : 0000
[12Eh 0302   2]           PCI Segment Number : 0000
[130h 0304   8]                 Base Address : 00000000BF452000
[138h 0312   8]          End Address (limit) : 00000000BF452FFF

[140h 0320   1]            Device Scope Type : 01 [PCI Endpoint Device]
[141h 0321   1]                 Entry Length : 08
[142h 0322   2]                     Reserved : 0000
[144h 0324   1]               Enumeration ID : 00
[145h 0325   1]               PCI Bus Number : 00

[146h 0326   2]                     PCI Path : 1D,00


[148h 0328   2]                Subtable Type : 0002 [Root Port ATS Capability]
[14Ah 0330   2]                       Length : 0048

[14Ch 0332   1]                        Flags : 00
[14Dh 0333   1]                     Reserved : 00
[14Eh 0334   2]           PCI Segment Number : 0000

[150h 0336   1]            Device Scope Type : 02 [PCI Bridge Device]
[151h 0337   1]                 Entry Length : 08
[152h 0338   2]                     Reserved : 0000
[154h 0340   1]               Enumeration ID : 00
[155h 0341   1]               PCI Bus Number : 00

[156h 0342   2]                     PCI Path : 01,00


[158h 0344   1]            Device Scope Type : 02 [PCI Bridge Device]
[159h 0345   1]                 Entry Length : 08
[15Ah 0346   2]                     Reserved : 0000
[15Ch 0348   1]               Enumeration ID : 00
[15Dh 0349   1]               PCI Bus Number : 00

[15Eh 0350   2]                     PCI Path : 02,00


[160h 0352   1]            Device Scope Type : 02 [PCI Bridge Device]
[161h 0353   1]                 Entry Length : 08
[162h 0354   2]                     Reserved : 0000
[164h 0356   1]               Enumeration ID : 00
[165h 0357   1]               PCI Bus Number : 00

[166h 0358   2]                     PCI Path : 02,02


[168h 0360   1]            Device Scope Type : 02 [PCI Bridge Device]
[169h 0361   1]                 Entry Length : 08
[16Ah 0362   2]                     Reserved : 0000
[16Ch 0364   1]               Enumeration ID : 00
[16Dh 0365   1]               PCI Bus Number : 00

[16Eh 0366   2]                     PCI Path : 03,00


[170h 0368   1]            Device Scope Type : 02 [PCI Bridge Device]
[171h 0369   1]                 Entry Length : 08
[172h 0370   2]                     Reserved : 0000
[174h 0372   1]               Enumeration ID : 00
[175h 0373   1]               PCI Bus Number : 40

[176h 0374   2]                     PCI Path : 01,00


[178h 0376   1]            Device Scope Type : 02 [PCI Bridge Device]
[179h 0377   1]                 Entry Length : 08
[17Ah 0378   2]                     Reserved : 0000
[17Ch 0380   1]               Enumeration ID : 00
[17Dh 0381   1]               PCI Bus Number : 40

[17Eh 0382   2]                     PCI Path : 02,00


[180h 0384   1]            Device Scope Type : 02 [PCI Bridge Device]
[181h 0385   1]                 Entry Length : 08
[182h 0386   2]                     Reserved : 0000
[184h 0388   1]               Enumeration ID : 00
[185h 0389   1]               PCI Bus Number : 40

[186h 0390   2]                     PCI Path : 02,02


[188h 0392   1]            Device Scope Type : 02 [PCI Bridge Device]
[189h 0393   1]                 Entry Length : 08
[18Ah 0394   2]                     Reserved : 0000
[18Ch 0396   1]               Enumeration ID : 00
[18Dh 0397   1]               PCI Bus Number : 40

[18Eh 0398   2]                     PCI Path : 03,00


Raw Table Data: Length 400 (0x190)

    0000: 44 4D 41 52 90 01 00 00 01 B5 44 45 4C 4C 20 20  // DMAR......DELL  
    0010: 50 45 5F 53 43 33 20 20 01 00 00 00 44 45 4C 4C  // PE_SC3  ....DELL
    0020: 01 00 00 00 2D 03 00 00 00 00 00 00 00 00 00 00  // ....-...........
    0030: 00 00 48 00 00 00 00 00 00 00 00 CF 00 00 00 00  // ..H.............
    0040: 03 08 00 00 02 40 05 04 02 08 00 00 00 40 01 00  // .....@.......@..
    0050: 02 08 00 00 00 40 02 00 02 08 00 00 00 40 02 02  // .....@.......@..
    0060: 02 08 00 00 00 40 03 00 01 08 00 00 00 40 05 00  // .....@.......@..
    0070: 01 08 00 00 00 40 05 02 00 00 20 00 00 00 00 00  // .....@.... .....
    0080: 00 00 00 C8 00 00 00 00 03 08 00 00 03 80 05 04  // ................
    0090: 01 08 00 00 00 80 05 00 00 00 20 00 00 00 00 00  // .......... .....
    00A0: 00 00 00 C4 00 00 00 00 03 08 00 00 04 C0 05 04  // ................
    00B0: 01 08 00 00 00 C0 05 00 00 00 28 00 01 00 00 00  // ..........(.....
    00C0: 00 00 10 DF 00 00 00 00 03 08 00 00 00 00 1E 01  // ................
    00D0: 03 08 00 00 01 00 05 04 04 08 00 00 00 00 0F 00  // ................
    00E0: 01 00 28 00 00 00 00 00 00 80 45 BF 00 00 00 00  // ..(.......E.....
    00F0: FF FF 46 BF 00 00 00 00 01 08 00 00 00 00 1A 00  // ..F.............
    0100: 01 08 00 00 00 00 1D 00 01 00 20 00 00 00 00 00  // .......... .....
    0110: 00 00 45 BF 00 00 00 00 FF 0F 45 BF 00 00 00 00  // ..E.......E.....
    0120: 01 08 00 00 00 00 1A 00 01 00 20 00 00 00 00 00  // .......... .....
    0130: 00 20 45 BF 00 00 00 00 FF 2F 45 BF 00 00 00 00  // . E....../E.....
    0140: 01 08 00 00 00 00 1D 00 02 00 48 00 00 00 00 00  // ..........H.....
    0150: 02 08 00 00 00 00 01 00 02 08 00 00 00 00 02 00  // ................
    0160: 02 08 00 00 00 00 02 02 02 08 00 00 00 00 03 00  // ................
    0170: 02 08 00 00 00 40 01 00 02 08 00 00 00 40 02 00  // .....@.......@..
    0180: 02 08 00 00 00 40 02 02 02 08 00 00 00 40 03 00  // .....@.......@..


DSDT
----
DefinitionBlock ("", "DSDT", 1, "DELL  ", "PE_SC3  ", 0x00000001)
{
    External (_PR_.MAXT, UnknownObj)

    Method (DBIN, 0, NotSerialized)
    {
        Noop
    }

    Scope (\_PR)
    {
        Name (PST0, 0x00)
        Name (PST1, 0x00)
        Name (PST2, 0x00)
        Name (PST3, 0x00)
        Name (TST0, 0x00)
        Name (TST1, 0x00)
        Name (TST2, 0x00)
        Name (TST3, 0x00)
        Processor (CPU1, 0x01, 0x00000810, 0x06) {}
        Processor (CPU2, 0x02, 0x00000810, 0x06) {}
        Processor (CPU3, 0x03, 0x00000810, 0x06) {}
        Processor (CPU4, 0x04, 0x00000810, 0x06) {}
        Processor (CPU5, 0x05, 0x00000810, 0x06) {}
        Processor (CPU6, 0x06, 0x00000810, 0x06) {}
        Processor (CPU7, 0x07, 0x00000810, 0x06) {}
        Processor (CPU8, 0x08, 0x00000810, 0x06) {}
        Processor (CPU9, 0x09, 0x00000810, 0x06) {}
        Processor (CPUA, 0x0A, 0x00000810, 0x06) {}
        Processor (CPUB, 0x0B, 0x00000810, 0x06) {}
        Processor (CPUC, 0x0C, 0x00000810, 0x06) {}
        Processor (CPUD, 0x0D, 0x00000810, 0x06) {}
        Processor (CPUE, 0x0E, 0x00000810, 0x06) {}
        Processor (CPUF, 0x0F, 0x00000810, 0x06) {}
        Processor (CPUG, 0x10, 0x00000810, 0x06) {}
        Processor (CP17, 0x11, 0x00000810, 0x06) {}
        Processor (CP18, 0x12, 0x00000810, 0x06) {}
        Processor (CP19, 0x13, 0x00000810, 0x06) {}
        Processor (CP20, 0x14, 0x00000810, 0x06) {}
        Processor (CP21, 0x15, 0x00000810, 0x06) {}
        Processor (CP22, 0x16, 0x00000810, 0x06) {}
        Processor (CP23, 0x17, 0x00000810, 0x06) {}
        Processor (CP24, 0x18, 0x00000810, 0x06) {}
        Processor (CP25, 0x19, 0x00000810, 0x06) {}
        Processor (CP26, 0x1A, 0x00000810, 0x06) {}
        Processor (CP27, 0x1B, 0x00000810, 0x06) {}
        Processor (CP28, 0x1C, 0x00000810, 0x06) {}
        Processor (CP29, 0x1D, 0x00000810, 0x06) {}
        Processor (CP30, 0x1E, 0x00000810, 0x06) {}
        Processor (CP31, 0x1F, 0x00000810, 0x06) {}
        Processor (CP32, 0x20, 0x00000810, 0x06) {}
        Processor (CP33, 0x21, 0x00000810, 0x06) {}
        Processor (CP34, 0x22, 0x00000810, 0x06) {}
        Processor (CP35, 0x23, 0x00000810, 0x06) {}
        Processor (CP36, 0x24, 0x00000810, 0x06) {}
        Processor (CP37, 0x25, 0x00000810, 0x06) {}
        Processor (CP38, 0x26, 0x00000810, 0x06) {}
        Processor (CP39, 0x27, 0x00000810, 0x06) {}
        Processor (CP40, 0x28, 0x00000810, 0x06) {}
        Processor (CP41, 0x29, 0x00000810, 0x06) {}
        Processor (CP42, 0x2A, 0x00000810, 0x06) {}
        Processor (CP43, 0x2B, 0x00000810, 0x06) {}
        Processor (CP44, 0x2C, 0x00000810, 0x06) {}
        Processor (CP45, 0x2D, 0x00000810, 0x06) {}
        Processor (CP46, 0x2E, 0x00000810, 0x06) {}
        Processor (CP47, 0x2F, 0x00000810, 0x06) {}
        Processor (CP48, 0x30, 0x00000810, 0x06) {}
        Processor (CP49, 0x31, 0x00000810, 0x06) {}
        Processor (CP50, 0x32, 0x00000810, 0x06) {}
        Processor (CP51, 0x33, 0x00000810, 0x06) {}
        Processor (CP52, 0x34, 0x00000810, 0x06) {}
        Processor (CP53, 0x35, 0x00000810, 0x06) {}
        Processor (CP54, 0x36, 0x00000810, 0x06) {}
        Processor (CP55, 0x37, 0x00000810, 0x06) {}
        Processor (CP56, 0x38, 0x00000810, 0x06) {}
        Processor (CP57, 0x39, 0x00000810, 0x06) {}
        Processor (CP58, 0x3A, 0x00000810, 0x06) {}
        Processor (CP59, 0x3B, 0x00000810, 0x06) {}
        Processor (CP60, 0x3C, 0x00000810, 0x06) {}
        Processor (CP61, 0x3D, 0x00000810, 0x06) {}
        Processor (CP62, 0x3E, 0x00000810, 0x06) {}
        Processor (CP63, 0x3F, 0x00000810, 0x06) {}
        Processor (CP64, 0x40, 0x00000810, 0x06) {}
        Processor (CP65, 0x41, 0x00000810, 0x06) {}
        Processor (CP66, 0x42, 0x00000810, 0x06) {}
        Processor (CP67, 0x43, 0x00000810, 0x06) {}
        Processor (CP68, 0x44, 0x00000810, 0x06) {}
        Processor (CP69, 0x45, 0x00000810, 0x06) {}
        Processor (CP70, 0x46, 0x00000810, 0x06) {}
        Processor (CP71, 0x47, 0x00000810, 0x06) {}
        Processor (CP72, 0x48, 0x00000810, 0x06) {}
        Processor (CP73, 0x49, 0x00000810, 0x06) {}
        Processor (CP74, 0x4A, 0x00000810, 0x06) {}
        Processor (CP75, 0x4B, 0x00000810, 0x06) {}
        Processor (CP76, 0x4C, 0x00000810, 0x06) {}
        Processor (CP77, 0x4D, 0x00000810, 0x06) {}
        Processor (CP78, 0x4E, 0x00000810, 0x06) {}
        Processor (CP79, 0x4F, 0x00000810, 0x06) {}
        Processor (CP80, 0x50, 0x00000810, 0x06) {}
        Processor (CP81, 0x51, 0x00000810, 0x06) {}
        Processor (CP82, 0x52, 0x00000810, 0x06) {}
        Processor (CP83, 0x53, 0x00000810, 0x06) {}
        Processor (CP84, 0x54, 0x00000810, 0x06) {}
        Processor (CP85, 0x55, 0x00000810, 0x06) {}
        Processor (CP86, 0x56, 0x00000810, 0x06) {}
        Processor (CP87, 0x57, 0x00000810, 0x06) {}
        Processor (CP88, 0x58, 0x00000810, 0x06) {}
        Processor (CP89, 0x59, 0x00000810, 0x06) {}
        Processor (CP90, 0x5A, 0x00000810, 0x06) {}
        Processor (CP91, 0x5B, 0x00000810, 0x06) {}
        Processor (CP92, 0x5C, 0x00000810, 0x06) {}
        Processor (CP93, 0x5D, 0x00000810, 0x06) {}
        Processor (CP94, 0x5E, 0x00000810, 0x06) {}
        Processor (CP95, 0x5F, 0x00000810, 0x06) {}
        Processor (CP96, 0x60, 0x00000810, 0x06) {}
    }

    Name (\_S0, Package (0x04)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    Name (\_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x07, 
        0x00, 
        0x00, 
        0x00
    })
    Name (\_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        0x00, 
        0x00, 
        0x00
    })
    Method (\_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        Debug = "_PTS"
        Debug = Arg0
        \_SB.PCI0.HEC2.PTS ()
        Sleep (0x0F)
    }

    Method (\_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        Debug = "_WAK"
        Debug = Arg0
        \_SB.PCI0.HEC2.WAK ()
        Return (Zero)
    }

    Scope (\_SI)
    {
        Method (_SST, 1, NotSerialized)  // _SST: System Status
        {
            Debug = "_SST"
            Debug = Arg0
            Sleep (0x0F)
        }
    }

    Scope (\)
    {
        Name (PICF, 0x00)
        Name (SWZL, 0x00)
        Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
        {
            Debug = "_PIC"
            Debug = Arg0
            PICF = Arg0
        }
    }

    Scope (\_SB)
    {
        Name (WCAP, 0x00)
        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Debug = "Platform _OSC"
            Debug = "UUID "
            Debug = Arg0
            CreateDWordField (Arg3, 0x00, CDW1)
            CreateDWordField (Arg3, 0x04, CDW2)
            Debug = "Revision "
            Debug = Arg1
            Debug = "Count "
            Debug = Arg2
            Debug = "DWORD 1 "
            Debug = CDW1 /* \_SB_._OSC.CDW1 */
            Debug = "DWORD 2 "
            Debug = CDW2 /* \_SB_._OSC.CDW2 */
            WCAP = CDW2 /* \_SB_._OSC.CDW2 */
            If ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If (Local1 = (WCAP & 0x10))
                {
                    \_SB.WSUP |= 0x01
                    Debug = "Platform _OSC, APEI is implementend"
                }

                If (Local2 = (WCAP & 0x40000000))
                {
                    Debug = "Platform _OSC, Page Retire is supported"
                }

                Local1 |= Local2
                If ((0x08 & UCMR (0x28)))
                {
                    If (Local3 = (WCAP & 0x01))
                    {
                        Debug = "Platform _OSC, Processor Aggregator Device is supported"
                        \PURE = 0x01
                    }

                    Local1 |= Local3
                }

                WCAP = Local1
                If ((CDW2 != WCAP))
                {
                    CDW1 |= 0x10
                }

                CDW2 = WCAP /* \_SB_.WCAP */
            }
            ElseIf ((Arg0 == ToUUID ("ed855e0c-6c90-47bf-a62a-26de0fc5ad5c") /* Unknown UUID */))
            {
                Return (\_SB.OSCW (Arg0, Arg1, Arg2, Arg3))
            }
            ElseIf ((Arg0 == ToUUID ("523a8cf4-f625-4d25-8166-2d2676cf2d05") /* Unknown UUID */))
            {
                If (WCAP &= 0x01)
                {
                    Debug = "CMCI delivery on Patrol Scrub UCE is supported by the OS"
                    Local0 = SMI2 (0x41)
                    Local0 >>= 0x08
                    WCAP &= Local0
                    If ((WCAP & 0x01))
                    {
                        Debug = "CMCI delivery on Patrol Scrub UCE is supported by the Platform"
                    }
                    Else
                    {
                        Debug = "CMCI delivery on Patrol Scrub UCE is not supported by the Platform"
                    }
                }

                If ((CDW2 != WCAP))
                {
                    CDW1 |= 0x10
                }

                CDW2 = WCAP /* \_SB_.WCAP */
            }
            Else
            {
                CDW1 |= 0x04
            }

            If ((Arg1 != One))
            {
                CDW1 |= 0x08
            }

            If ((Arg2 != 0x02))
            {
                CDW1 |= 0x02
            }

            CDW1 &= 0x1E
            Debug = "Return Status  "
            Debug = CDW1 /* \_SB_._OSC.CDW1 */
            Debug = "Return Support "
            Debug = CDW2 /* \_SB_._OSC.CDW2 */
            Return (Arg3)
        }
    }

    Scope (\_SB)
    {
        Name (WSUP, 0x00)
        Name (WCTR, 0x00)
        Method (OSCW, 4, NotSerialized)
        {
            Debug = "Method _OSC for WHEA"
            If ((Arg0 == ToUUID ("ed855e0c-6c90-47bf-a62a-26de0fc5ad5c") /* Unknown UUID */))
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                Debug = "Revision "
                Debug = Arg1
                Debug = "Count "
                Debug = Arg2
                Debug = "DWORD 1 "
                Debug = CDW1 /* \_SB_.OSCW.CDW1 */
                Debug = "DWORD 2 "
                Debug = CDW2 /* \_SB_.OSCW.CDW2 */
                Debug = "DWORD 3 "
                Debug = CDW3 /* \_SB_.OSCW.CDW3 */
                WSUP = CDW2 /* \_SB_.OSCW.CDW2 */
                WCTR = CDW3 /* \_SB_.OSCW.CDW3 */
                If ((WSUP & 0x01))
                {
                    Debug = "WHEA is implementend"
                }
                Else
                {
                    CDW1 |= 0x02
                }

                If ((Arg1 != One))
                {
                    CDW1 |= 0x08
                }

                If ((CDW3 != WCTR))
                {
                    CDW1 |= 0x10
                }

                CDW3 = WCTR /* \_SB_.WCTR */
            }
            Else
            {
                CDW1 |= 0x04
            }

            CDW1 &= 0x1E
            Debug = "Return Status  "
            Debug = CDW1 /* \_SB_.OSCW.CDW1 */
            Debug = "Return Support "
            Debug = CDW2 /* \_SB_.OSCW.CDW2 */
            Debug = "Return Control "
            Debug = CDW3 /* \_SB_.OSCW.CDW3 */
            Return (Arg3)
        }
    }

    Scope (\_SB)
    {
        Device (WHEA)
        {
            Name (_HID, EisaId ("PNP0C33") /* Error Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C01") /* System Board */)  // _CID: Compatible ID
            Name (_UID, "WHEA")  // _UID: Unique ID
            Method (_OST, 3, NotSerialized)  // _OST: OSPM Status Indication
            {
                Debug = "WHEA _OST"
                Local0 = Arg0
                Local1 = Arg1
                Local2 = Arg2
                Debug = Arg0
                Debug = Arg1
                Debug = Arg2
            }
        }
    }

    Scope (\_SB)
    {
        Device (PMI0)
        {
            Name (_HID, "ACPI000D" /* Power Meter Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C01") /* System Board */)  // _CID: Compatible ID
            Name (_UID, "PMI")  // _UID: Unique ID
            Name (_STA, 0x0F)  // _STA: Status
            OperationRegion (SYSI, IPMI, 0x0600, 0x0100)
            Field (SYSI, BufferAcc, Lock, Preserve)
            {
                AccessAs (BufferAcc, 0x01), 
                Offset (0x58), 
                SCMD,   8, 
                GCMD,   8
            }

            OperationRegion (POWR, IPMI, 0x3000, 0x0100)
            Field (POWR, BufferAcc, Lock, Preserve)
            {
                AccessAs (BufferAcc, 0x01), 
                Offset (0xB3), 
                GPMM,   8
            }

            Name (PVAL, 0x00)
            Name (PAVG, 0x07D0)
            Name (HLIM, 0x00)
            Name (PMIN, 0x00)
            Name (PMAX, 0x00)
            Method (_PMC, 0, NotSerialized)  // _PMC: Power Meter Capabilities
            {
                Debug = "PMI - _PMC"
                Name (RET0, Package (0x0E) {})
                RET0 [0x00] = 0x01
                RET0 [0x01] = 0x00
                RET0 [0x02] = 0x00
                RET0 [0x03] = 0x00015F90
                RET0 [0x04] = 0x07D0
                RET0 [0x05] = 0x07D0
                RET0 [0x06] = 0x240C8400
                RET0 [0x07] = 0xFFFFFFFF
                RET0 [0x08] = Zero
                Name (MDL, "PowerEdge")
                Name (OEM, "___DELL")
                RET0 [0x0B] = MDL /* \_SB_.PMI0._PMC.MDL_ */
                RET0 [0x0C] = ""
                RET0 [0x0D] = OEM /* \_SB_.PMI0._PMC.OEM_ */
                _GHL ()
                RET0 [0x09] = PMIN /* \_SB_.PMI0.PMIN */
                RET0 [0x0A] = PMAX /* \_SB_.PMI0.PMAX */
                Debug = RET0 /* \_SB_.PMI0._PMC.RET0 */
                Return (RET0) /* \_SB_.PMI0._PMC.RET0 */
            }

            Method (_PMD, 0, NotSerialized)  // _PMD: Power Metered Devices
            {
                Name (RET0, Package (0x01)
                {
                    \_SB
                })
                Return (RET0) /* \_SB_.PMI0._PMD.RET0 */
            }

            Method (_PMM, 0, NotSerialized)  // _PMM: Power Meter Measurement
            {
                Debug = "PMI - _PMM"
                If ((PAVG == 0x07D0))
                {
                    Debug = "2S Average interval"
                    Name (BUFF, Buffer (0x42) {})
                    CreateByteField (BUFF, 0x00, STAT)
                    CreateByteField (BUFF, 0x01, LENG)
                    LENG = 0x02
                    CreateByteField (BUFF, 0x02, IN01)
                    IN01 = 0x0A
                    CreateByteField (BUFF, 0x03, IN02)
                    IN02 = 0x00
                    CreateByteField (BUFF, 0x02, CMPC)
                    CreateWordField (BUFF, 0x03, APWR)
                    BUFF = GPMM = BUFF /* \_SB_.PMI0._PMM.BUFF */
                    If (((STAT == 0x00) && (CMPC == 0x00)))
                    {
                        Debug = "Instantaneous Power reading = "
                        Debug = APWR /* \_SB_.PMI0._PMM.APWR */
                        Debug = "BUFF, 0xB3 cmd"
                        Debug = BUFF /* \_SB_.PMI0._PMM.BUFF */
                        PVAL = (APWR * 0x03E8)
                        Return (PVAL) /* \_SB_.PMI0.PVAL */
                    }

                    Return (Ones)
                }
                Else
                {
                    Name (BUF2, Buffer (0x42) {})
                    Debug = "Not 2S Average interval"
                    CreateByteField (BUF2, 0x00, STA2)
                    CreateByteField (BUF2, 0x01, LEN2)
                    LEN2 = 0x04
                    CreateByteField (BUF2, 0x02, IN21)
                    IN21 = 0x00
                    CreateByteField (BUF2, 0x03, IN22)
                    IN22 = 0xEB
                    CreateByteField (BUF2, 0x04, IN23)
                    IN23 = 0x00
                    CreateByteField (BUF2, 0x05, IN24)
                    IN24 = 0x00
                    CreateByteField (BUF2, 0x02, CMP2)
                    CreateWordField (BUF2, 0x04, AMIN)
                    CreateWordField (BUF2, 0x06, AHOU)
                    CreateWordField (BUF2, 0x08, ADAY)
                    CreateWordField (BUF2, 0x0A, AWEE)
                    BUF2 = GCMD = BUF2 /* \_SB_.PMI0._PMM.BUF2 */
                    If (((STA2 == 0x00) && (CMP2 == 0x00)))
                    {
                        Debug = "BUF2, 0xEB cmd"
                        Debug = BUF2 /* \_SB_.PMI0._PMM.BUF2 */
                        Debug = "Instantaneous Power reading = "
                        If ((PAVG == 0xEA60))
                        {
                            Debug = AMIN /* \_SB_.PMI0._PMM.AMIN */
                            PVAL = (AMIN * 0x03E8)
                        }

                        If ((PAVG == 0x0036EE80))
                        {
                            Debug = AHOU /* \_SB_.PMI0._PMM.AHOU */
                            PVAL = (AHOU * 0x03E8)
                        }

                        If ((PAVG == 0x05265C00))
                        {
                            Debug = ADAY /* \_SB_.PMI0._PMM.ADAY */
                            PVAL = (ADAY * 0x03E8)
                        }

                        If ((PAVG == 0x240C8400))
                        {
                            Debug = AWEE /* \_SB_.PMI0._PMM.AWEE */
                            PVAL = (AWEE * 0x03E8)
                        }

                        Return (PVAL) /* \_SB_.PMI0.PVAL */
                    }

                    Return (Ones)
                }
            }

            Method (_GAI, 0, NotSerialized)  // _GAI: Get Averaging Interval
            {
                Debug = "PMI - _GAI"
                Debug = PAVG /* \_SB_.PMI0.PAVG */
                Return (PAVG) /* \_SB_.PMI0.PAVG */
            }

            Method (_GHL, 0, NotSerialized)  // _GHL: Get Hardware Limit
            {
                Debug = "PMI - _GHL"
                Name (BUFF, Buffer (0x42) {})
                CreateByteField (BUFF, 0x00, STAT)
                CreateByteField (BUFF, 0x01, LENG)
                LENG = 0x04
                CreateByteField (BUFF, 0x02, IN01)
                IN01 = 0x00
                CreateByteField (BUFF, 0x03, IN02)
                IN02 = 0xEA
                CreateByteField (BUFF, 0x04, IN03)
                IN03 = 0x00
                CreateByteField (BUFF, 0x05, IN04)
                IN04 = 0x00
                CreateByteField (BUFF, 0x02, CMPC)
                CreateWordField (BUFF, 0x04, PCAP)
                CreateWordField (BUFF, 0x07, MAPW)
                CreateWordField (BUFF, 0x09, MIPW)
                BUFF = GCMD = BUFF /* \_SB_.PMI0._GHL.BUFF */
                If (((STAT == 0x00) && (CMPC == 0x00)))
                {
                    Debug = "Power Cap = "
                    Debug = PCAP /* \_SB_.PMI0._GHL.PCAP */
                    Debug = "Max Power = "
                    Debug = MAPW /* \_SB_.PMI0._GHL.MAPW */
                    Debug = "Min Power = "
                    Debug = MIPW /* \_SB_.PMI0._GHL.MIPW */
                    Debug = "BUFF, 0xEA cmd"
                    Debug = BUFF /* \_SB_.PMI0._GHL.BUFF */
                    HLIM = (PCAP * 0x03E8)
                    PMAX = (MAPW * 0x03E8)
                    PMIN = (MIPW * 0x03E8)
                    Return (HLIM) /* \_SB_.PMI0.HLIM */
                }

                Return (Ones)
            }

            Method (_SHL, 1, NotSerialized)  // _SHL: Set Hardware Limit
            {
                Debug = "PMI - _SHL"
                Return (0x00)
            }

            Method (_PTP, 2, NotSerialized)  // _PTP: Power Trip Points
            {
                Return (0x00)
            }

            Method (_PAI, 1, NotSerialized)  // _PAI: Power Averaging Interval
            {
                Debug = "PMI - _PAI"
                If ((Arg0 >= 0x240C8400))
                {
                    PAVG = 0x240C8400
                }
                ElseIf ((Arg0 >= 0x05265C00))
                {
                    PAVG = 0x05265C00
                }
                ElseIf ((Arg0 >= 0x0036EE80))
                {
                    PAVG = 0x0036EE80
                }
                ElseIf ((Arg0 >= 0xEA60))
                {
                    PAVG = 0xEA60
                }
                Else
                {
                    PAVG = 0x07D0
                }

                Debug = PAVG /* \_SB_.PMI0.PAVG */
                Return (0x00)
            }
        }
    }

    Method (KDBG, 3, NotSerialized)
    {
        Debug = "Min:"
        Debug = Arg0
        Debug = "Max:"
        Debug = Arg1
        Debug = "Length:"
        Debug = Arg2
    }

    OperationRegion (SMIR, SystemIO, 0xB2, 0x02)
    Field (SMIR, ByteAcc, NoLock, Preserve)
    {
        SMIC,   8, 
        SMID,   8
    }

    Mutex (SMIM, 0x01)
    Method (SMI2, 1, NotSerialized)
    {
        Acquire (SMIM, 0xFFFF)
        SMIC = Arg0
        Local0 = SMIC /* \SMIC */
        Local0 = SMID /* \SMID */
        Local0 <<= 0x08
        Local0 += SMIC
        Release (SMIM)
        Return (Local0)
    }

    Method (SMI4, 1, NotSerialized)
    {
        Local0 = (Arg0 + 0x01)
        Local2 = SMI2 (Arg0)
        Local1 = SMI2 (Local0)
        Local1 <<= 0x10
        Local0 = (Local1 + Local2)
        Return (Local0)
    }

    Mutex (MTX, 0x01)
    Method (CMRD, 1, NotSerialized)
    {
        Acquire (SMIM, 0xFFFF)
        Local0 = Arg0
        Local0 &= 0x7F
        SMID = Local0
        SMIC = 0x72
        Local0 = SMIC /* \SMIC */
        SMIC = 0x73
        Local0 = SMIC /* \SMIC */
        Local0 = SMID /* \SMID */
        Release (SMIM)
        Return (Local0)
    }

    Method (CMWR, 2, NotSerialized)
    {
        Acquire (SMIM, 0xFFFF)
        Local0 = Arg0
        Local0 |= 0x80
        SMID = Local0
        SMIC = 0x72
        Local0 = SMIC /* \SMIC */
        SMID = Arg1
        SMIC = 0x73
        Local0 = SMIC /* \SMIC */
        Release (SMIM)
    }

    Method (UCMR, 1, NotSerialized)
    {
        Acquire (SMIM, 0xFFFF)
        Local0 = Arg0
        Local0 &= 0x7F
        SMID = Local0
        SMIC = 0x74
        Local0 = SMIC /* \SMIC */
        SMIC = 0x75
        Local0 = SMIC /* \SMIC */
        Local0 = SMID /* \SMID */
        Release (SMIM)
        Return (Local0)
    }

    Method (GCKB, 0, NotSerialized)
    {
        Return ((0x40 & UCMR (0x7D)))
    }

    Method (GCMS, 0, NotSerialized)
    {
        Return ((0x20 & UCMR (0x7D)))
    }

    Scope (_SB)
    {
        Method (MIN, 2, NotSerialized)
        {
            If ((Arg0 < Arg1))
            {
                Return (Arg0)
            }
            Else
            {
                Return (Arg1)
            }
        }

        Method (SLEN, 1, NotSerialized)
        {
            Local0 = Arg0
            Return (SizeOf (Local0))
        }

        Method (S2BF, 1, NotSerialized)
        {
            Local0 = Arg0
            Local0 = (SLEN (Local0) + One)
            Name (BUFF, Buffer (Local0) {})
            BUFF = Arg0
            Return (BUFF) /* \_SB_.S2BF.BUFF */
        }

        Method (SCMP, 2, NotSerialized)
        {
            Local0 = Arg0
            Local0 = S2BF (Local0)
            Local1 = S2BF (Arg1)
            Local4 = Zero
            Local5 = SLEN (Arg0)
            Local6 = SLEN (Arg1)
            Local7 = MIN (Local5, Local6)
            While ((Local4 < Local7))
            {
                Local2 = DerefOf (Local0 [Local4])
                Local3 = DerefOf (Local1 [Local4])
                If ((Local2 > Local3))
                {
                    Return (One)
                }
                ElseIf ((Local2 < Local3))
                {
                    Return (Ones)
                }

                Local4++
            }

            If ((Local4 < Local5))
            {
                Return (One)
            }
            ElseIf ((Local4 < Local6))
            {
                Return (Ones)
            }
            Else
            {
                Return (Zero)
            }
        }

        Name (TOOS, 0x00)
        Method (INIC, 0, NotSerialized)
        {
            If (CondRefOf (_OSI, Local0))
            {
                If (\_OSI ("Windows 2001"))
                {
                    TOOS = 0x05
                }

                If (\_OSI ("Windows 2001.1"))
                {
                    TOOS = 0x06
                }

                If (\_OSI ("Windows 2001.1 SP1"))
                {
                    TOOS = 0x07
                }

                If (\_OSI ("Windows 2006"))
                {
                    TOOS = 0x08
                }

                If (\_OSI ("Windows 2006.1"))
                {
                    TOOS = 0x08
                }

                If (\_OSI ("Linux"))
                {
                    TOOS = 0x01
                }
            }
            Else
            {
                Local0 = \_OS
                Local1 = SCMP (Local0, "Microsoft Windows NT")
                If (~Local1)
                {
                    TOOS = 0x04
                }
                Else
                {
                    Local2 = SCMP (Local0, "Microsoft Windows")
                    If (~Local2)
                    {
                        TOOS = 0x02
                    }
                    Else
                    {
                        Local3 = SCMP (Local0, "Microsoft WindowsME:Millennium Edition")
                        If (~Local3)
                        {
                            TOOS = 0x03
                        }
                    }
                }
            }
        }

        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            \_SB.INIC ()
            \_SB.INIS ()
        }
    }

    Name (CPUS, 0x00)
    OperationRegion (CPE0, SystemIO, 0xE0, 0x01)
    Field (CPE0, ByteAcc, NoLock, Preserve)
    {
        CPIN,   8
    }

    OperationRegion (CPE4, SystemIO, 0xE4, 0x01)
    Field (CPE4, ByteAcc, NoLock, Preserve)
    {
        CPDA,   8
    }

    OperationRegion (CO50, SystemMemory, 0xE0028000, 0x0200)
    Field (CO50, DWordAcc, NoLock, Preserve)
    {
        Offset (0x108), 
        C0IB,   32, 
        Offset (0x180), 
        VTB0,   32
    }

    OperationRegion (P3FA, SystemMemory, 0xE3FB1000, 0x0200)
    Field (P3FA, DWordAcc, NoLock, Preserve)
    {
        Offset (0x40), 
        P3I0,   32, 
        Offset (0x48), 
        P3I1,   32, 
        Offset (0x50), 
        P3I2,   32, 
        Offset (0x58), 
        P3I3,   32, 
        Offset (0x60), 
        P3I4,   32, 
        Offset (0x68), 
        P3I5,   32, 
        Offset (0x70), 
        P3I6,   32, 
        Offset (0x78), 
        P3I7,   32, 
        Offset (0xE0), 
        P3FI,   32, 
        P3FL,   32, 
        P3FM,   32
    }

    OperationRegion (P7FA, SystemMemory, 0xE7FB1000, 0x0200)
    Field (P7FA, DWordAcc, NoLock, Preserve)
    {
        P7F0,   32, 
        Offset (0xE4), 
        P7FL,   32, 
        P7FI,   32
    }

    OperationRegion (PFFA, SystemMemory, 0xEFFB1000, 0x0200)
    Field (PFFA, DWordAcc, NoLock, Preserve)
    {
        PFF0,   32, 
        Offset (0xE4), 
        PFFL,   32
    }

    Scope (\_SB)
    {
        Method (INIS, 0, NotSerialized)
        {
            If ((\_SB.TOOS >= 0x08))
            {
                \_SB.PCI0._HID = 0x080AD041
                \_SB.PCI0._CID = 0x030AD041
            }
            Else
            {
                \_SB.PCI0._HID = 0x030AD041
                \_SB.PCI0._CID = 0x080AD041
            }

            CPUS = UCMR (0x78)
        }

        Method (IO2P, 0, NotSerialized)
        {
            CPIN = 0x09
            Local0 = CPDA /* \CPDA */
            Local1 = ~Local0
            Local1 &= 0xF0
            If ((Local1 & 0x20))
            {
                Return (Ones)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (RDPT, 0, NotSerialized)
        {
            CPIN = 0x02
            Local0 = CPDA /* \CPDA */
            If ((Local0 == 0x04))
            {
                Return (Ones)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (P2IN, 0, NotSerialized)
        {
            Local0 = C0IB /* \C0IB */
            Local0 &= 0xFF00
            Local0 >>= 0x08
            Debug = "CPU0 INT BUS1"
            Debug = Local0
            Return (Local0)
        }

        Device (PCI0)
        {
            Name (P0BN, Buffer (0x01)
            {
                 0x00                                             // .
            })
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (0x00)
            }

            Name (_UID, "PCI0")  // _UID: Unique ID
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x0B, 
                0x05
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (!PICF)
                {
                    Name (P100, Package (0x15)
                    {
                        Package (0x04)
                        {
                            0xFFFF, 
                            0x00, 
                            LK00, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            LK00, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            LK00, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x00, 
                            LK00, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x00, 
                            LK00, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x01, 
                            LK01, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x02, 
                            LK02, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x03, 
                            LK03, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0011FFFF, 
                            0x00, 
                            LK00, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0011FFFF, 
                            0x01, 
                            LK01, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0011FFFF, 
                            0x02, 
                            LK02, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0011FFFF, 
                            0x03, 
                            LK03, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x00, 
                            LK07, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x00, 
                            LK00, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x01, 
                            LK01, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            LK02, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            LK03, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x00, 
                            LK06, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x00, 
                            LK04, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x01, 
                            LK05, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x02, 
                            LK05, 
                            0x00
                        }
                    })
                    Local0 = P100 /* \_SB_.PCI0._PRT.P100 */
                }
                Else
                {
                    Name (A100, Package (0x15)
                    {
                        Package (0x04)
                        {
                            0xFFFF, 
                            0x00, 
                            0x00, 
                            0x20
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            0x00, 
                            0x35
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            0x00, 
                            0x35
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x00, 
                            0x00, 
                            0x35
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x00, 
                            0x00, 
                            0x27
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x01, 
                            0x00, 
                            0x2F
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x02, 
                            0x00, 
                            0x27
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x03, 
                            0x00, 
                            0x2F
                        }, 

                        Package (0x04)
                        {
                            0x0011FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0011FFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0011FFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0011FFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x00, 
                            0x00, 
                            0x17
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x00, 
                            0x00, 
                            0x16
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x00, 
                            0x00, 
                            0x14
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x01, 
                            0x00, 
                            0x15
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x02, 
                            0x00, 
                            0x15
                        }
                    })
                    Local0 = A100 /* \_SB_.PCI0._PRT.A100 */
                }

                Return (Local0)
            }

            Name (_PXM, 0x01)  // _PXM: Device Proximity
            Device (PEX1)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Device (NDX0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        Name (VAR1, Zero)
                        If ((\_SB.P0B1.SPAD.SR05 & 0x04))
                        {
                            If ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                            {
                                If ((ToInteger (Arg1) == 0x02))
                                {
                                    VAR1 = ToInteger (Arg2)
                                    If ((VAR1 == 0x00))
                                    {
                                        Return (Buffer (0x01)
                                        {
                                             0x81                                             // .
                                        })
                                    }
                                    ElseIf ((VAR1 == 0x07))
                                    {
                                        Return (Package (0x02)
                                        {
                                            0x03, 
                                            Unicode ("NIC3")
                                        })
                                    }
                                }
                            }
                        }
                        ElseIf ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            If ((ToInteger (Arg1) == 0x02))
                            {
                                VAR1 = ToInteger (Arg2)
                                If ((VAR1 == 0x00))
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x81                                             // .
                                    })
                                }
                                ElseIf ((VAR1 == 0x07))
                                {
                                    Return (Package (0x02)
                                    {
                                        0x01, 
                                        Unicode ("NIC1")
                                    })
                                }
                            }
                        }
                    }
                }

                Device (NDX1)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        Name (VAR1, Zero)
                        If ((\_SB.P0B1.SPAD.SR05 & 0x04))
                        {
                            If ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                            {
                                If ((ToInteger (Arg1) == 0x02))
                                {
                                    VAR1 = ToInteger (Arg2)
                                    If ((VAR1 == 0x00))
                                    {
                                        Return (Buffer (0x01)
                                        {
                                             0x81                                             // .
                                        })
                                    }
                                    ElseIf ((VAR1 == 0x07))
                                    {
                                        Return (Package (0x02)
                                        {
                                            0x04, 
                                            Unicode ("NIC4")
                                        })
                                    }
                                }
                            }
                        }
                        ElseIf ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            If ((ToInteger (Arg1) == 0x02))
                            {
                                VAR1 = ToInteger (Arg2)
                                If ((VAR1 == 0x00))
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x81                                             // .
                                    })
                                }
                                ElseIf ((VAR1 == 0x07))
                                {
                                    Return (Package (0x02)
                                    {
                                        0x02, 
                                        Unicode ("NIC2")
                                    })
                                }
                            }
                        }
                    }
                }

                Device (NDX2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        Name (VAR1, Zero)
                        If ((\_SB.P0B1.SPAD.SR05 & 0x10))
                        {
                            If ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                            {
                                If ((ToInteger (Arg1) == 0x02))
                                {
                                    VAR1 = ToInteger (Arg2)
                                    If ((VAR1 == 0x00))
                                    {
                                        Return (Buffer (0x01)
                                        {
                                             0x81                                             // .
                                        })
                                    }
                                    ElseIf ((VAR1 == 0x07))
                                    {
                                        Return (Package (0x02)
                                        {
                                            0x03, 
                                            Unicode ("NIC3")
                                        })
                                    }
                                }
                            }
                        }
                    }
                }

                Device (NDX3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        Name (VAR1, Zero)
                        If ((\_SB.P0B1.SPAD.SR05 & 0x10))
                        {
                            If ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                            {
                                If ((ToInteger (Arg1) == 0x02))
                                {
                                    VAR1 = ToInteger (Arg2)
                                    If ((VAR1 == 0x00))
                                    {
                                        Return (Buffer (0x01)
                                        {
                                             0x81                                             // .
                                        })
                                    }
                                    ElseIf ((VAR1 == 0x07))
                                    {
                                        Return (Package (0x02)
                                        {
                                            0x04, 
                                            Unicode ("NIC4")
                                        })
                                    }
                                }
                            }
                        }
                    }
                }

                Device (NDX4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        Name (VAR1, Zero)
                        If ((\_SB.P0B1.SPAD.SR05 & 0x10))
                        {
                            If ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                            {
                                If ((ToInteger (Arg1) == 0x02))
                                {
                                    VAR1 = ToInteger (Arg2)
                                    If ((VAR1 == 0x00))
                                    {
                                        Return (Buffer (0x01)
                                        {
                                             0x81                                             // .
                                        })
                                    }
                                    ElseIf ((VAR1 == 0x07))
                                    {
                                        Return (Package (0x02)
                                        {
                                            0x05, 
                                            Unicode ("NIC5")
                                        })
                                    }
                                }
                            }
                        }
                    }
                }

                Device (NDX5)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        Name (VAR1, Zero)
                        If ((\_SB.P0B1.SPAD.SR05 & 0x10))
                        {
                            If ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                            {
                                If ((ToInteger (Arg1) == 0x02))
                                {
                                    VAR1 = ToInteger (Arg2)
                                    If ((VAR1 == 0x00))
                                    {
                                        Return (Buffer (0x01)
                                        {
                                             0x81                                             // .
                                        })
                                    }
                                    ElseIf ((VAR1 == 0x07))
                                    {
                                        Return (Package (0x02)
                                        {
                                            0x06, 
                                            Unicode ("NIC6")
                                        })
                                    }
                                }
                            }
                        }
                    }
                }

                Device (NDX6)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        Name (VAR1, Zero)
                        If ((\_SB.P0B1.SPAD.SR05 & 0x10))
                        {
                            If ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                            {
                                If ((ToInteger (Arg1) == 0x02))
                                {
                                    VAR1 = ToInteger (Arg2)
                                    If ((VAR1 == 0x00))
                                    {
                                        Return (Buffer (0x01)
                                        {
                                             0x81                                             // .
                                        })
                                    }
                                    ElseIf ((VAR1 == 0x07))
                                    {
                                        Return (Package (0x02)
                                        {
                                            0x07, 
                                            Unicode ("NIC7")
                                        })
                                    }
                                }
                            }
                        }
                    }
                }

                Device (NDX7)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        Name (VAR1, Zero)
                        If ((\_SB.P0B1.SPAD.SR05 & 0x10))
                        {
                            If ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                            {
                                If ((ToInteger (Arg1) == 0x02))
                                {
                                    VAR1 = ToInteger (Arg2)
                                    If ((VAR1 == 0x00))
                                    {
                                        Return (Buffer (0x01)
                                        {
                                             0x81                                             // .
                                        })
                                    }
                                    ElseIf ((VAR1 == 0x07))
                                    {
                                        Return (Package (0x02)
                                        {
                                            0x08, 
                                            Unicode ("NIC8")
                                        })
                                    }
                                }
                            }
                        }
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Name (P102, Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                LK00, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                LK01, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                LK02, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                LK03, 
                                0x00
                            }
                        })
                        Local0 = P102 /* \_SB_.PCI0.PEX1._PRT.P102 */
                    }
                    Else
                    {
                        Name (A102, Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x22
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x24
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x25
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x26
                            }
                        })
                        Local0 = A102 /* \_SB_.PCI0.PEX1._PRT.A102 */
                    }

                    Return (Local0)
                }
            }

            Device (PE1C)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Device (NDX0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        Name (VAR1, Zero)
                        If ((\_SB.P0B1.SPAD.SR05 & 0x04))
                        {
                            If ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                            {
                                If ((ToInteger (Arg1) == 0x02))
                                {
                                    VAR1 = ToInteger (Arg2)
                                    If ((VAR1 == 0x00))
                                    {
                                        Return (Buffer (0x01)
                                        {
                                             0x81                                             // .
                                        })
                                    }
                                    ElseIf ((VAR1 == 0x07))
                                    {
                                        Return (Package (0x02)
                                        {
                                            0x01, 
                                            Unicode ("NIC1")
                                        })
                                    }
                                }
                            }
                        }
                    }
                }

                Device (NDX1)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        Name (VAR1, Zero)
                        If ((\_SB.P0B1.SPAD.SR05 & 0x04))
                        {
                            If ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                            {
                                If ((ToInteger (Arg1) == 0x02))
                                {
                                    VAR1 = ToInteger (Arg2)
                                    If ((VAR1 == 0x00))
                                    {
                                        Return (Buffer (0x01)
                                        {
                                             0x81                                             // .
                                        })
                                    }
                                    ElseIf ((VAR1 == 0x07))
                                    {
                                        Return (Package (0x02)
                                        {
                                            0x02, 
                                            Unicode ("NIC2")
                                        })
                                    }
                                }
                            }
                        }
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Name (P103, Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                LK00, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                LK01, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                LK02, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                LK03, 
                                0x00
                            }
                        })
                        Local0 = P103 /* \_SB_.PCI0.PE1C._PRT.P103 */
                    }
                    Else
                    {
                        Name (A103, Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x23
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x26
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x24
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x25
                            }
                        })
                        Local0 = A103 /* \_SB_.PCI0.PE1C._PRT.A103 */
                    }

                    Return (Local0)
                }
            }

            Device (PEX2)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    Name (VAR1, Zero)
                    If ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        If ((ToInteger (Arg1) == 0x02))
                        {
                            VAR1 = ToInteger (Arg2)
                            If ((VAR1 == 0x00))
                            {
                                Return (Buffer (0x01)
                                {
                                     0x81                                             // .
                                })
                            }
                            ElseIf ((VAR1 == 0x07))
                            {
                                Return (Package (0x02)
                                {
                                    0x16, 
                                    Unicode ("SLOT 7")
                                })
                            }
                        }
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Name (P106, Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                LK00, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                LK01, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                LK02, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                LK03, 
                                0x00
                            }
                        })
                        Local0 = P106 /* \_SB_.PCI0.PEX2._PRT.P106 */
                    }
                    Else
                    {
                        Name (A106, Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x28
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x2C
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x2D
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x2E
                            }
                        })
                        Local0 = A106 /* \_SB_.PCI0.PEX2._PRT.A106 */
                    }

                    Return (Local0)
                }
            }

            Device (PEX3)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    Name (VAR1, Zero)
                    If ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        If ((ToInteger (Arg1) == 0x02))
                        {
                            VAR1 = ToInteger (Arg2)
                            If ((VAR1 == 0x00))
                            {
                                Return (Buffer (0x01)
                                {
                                     0x81                                             // .
                                })
                            }
                            ElseIf ((VAR1 == 0x07))
                            {
                                Return (Package (0x02)
                                {
                                    0x12, 
                                    Unicode ("SLOT 3")
                                })
                            }
                        }
                    }
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (RDPT ())
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Name (P107, Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                LK00, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                LK01, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                LK02, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                LK03, 
                                0x00
                            }
                        })
                        Local0 = P107 /* \_SB_.PCI0.PEX3._PRT.P107 */
                    }
                    Else
                    {
                        Name (A107, Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x2A
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x2D
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x2C
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x2E
                            }
                        })
                        Local0 = A107 /* \_SB_.PCI0.PEX3._PRT.A107 */
                    }

                    Return (Local0)
                }
            }

            Device (PEX4)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    Name (VAR1, Zero)
                    If ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        If ((ToInteger (Arg1) == 0x02))
                        {
                            VAR1 = ToInteger (Arg2)
                            If ((VAR1 == 0x00))
                            {
                                Return (Buffer (0x01)
                                {
                                     0x81                                             // .
                                })
                            }
                            ElseIf ((VAR1 == 0x07))
                            {
                                Return (Package (0x02)
                                {
                                    0x15, 
                                    Unicode ("SLOT 6")
                                })
                            }
                        }
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Name (P108, Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                LK00, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                LK01, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                LK02, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                LK03, 
                                0x00
                            }
                        })
                        Local0 = P108 /* \_SB_.PCI0.PEX4._PRT.P108 */
                    }
                    Else
                    {
                        Name (A108, Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x30
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x34
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x35
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x36
                            }
                        })
                        Local0 = A108 /* \_SB_.PCI0.PEX4._PRT.A108 */
                    }

                    Return (Local0)
                }
            }

            Device (PEX6)
            {
                Name (_ADR, 0x001C0007)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Name (P10D, Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                LK03, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                LK00, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                LK01, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                LK02, 
                                0x00
                            }
                        })
                        Local0 = P10D /* \_SB_.PCI0.PEX6._PRT.P10D */
                    }
                    Else
                    {
                        Name (A10D, Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x12
                            }
                        })
                        Local0 = A10D /* \_SB_.PCI0.PEX6._PRT.A10D */
                    }

                    Return (Local0)
                }
            }

            Device (PEX7)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                Device (NDX0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        Name (VAR1, Zero)
                        If ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            If ((ToInteger (Arg1) == 0x02))
                            {
                                VAR1 = ToInteger (Arg2)
                                If ((VAR1 == 0x00))
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x81                                             // .
                                    })
                                }
                                ElseIf ((VAR1 == 0x07))
                                {
                                    Return (Package (0x02)
                                    {
                                        0x03, 
                                        Unicode ("NIC3")
                                    })
                                }
                            }
                        }
                    }
                }

                Device (NDX1)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        Name (VAR1, Zero)
                        If ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            If ((ToInteger (Arg1) == 0x02))
                            {
                                VAR1 = ToInteger (Arg2)
                                If ((VAR1 == 0x00))
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x81                                             // .
                                    })
                                }
                                ElseIf ((VAR1 == 0x07))
                                {
                                    Return (Package (0x02)
                                    {
                                        0x04, 
                                        Unicode ("NIC4")
                                    })
                                }
                            }
                        }
                    }
                }
            }

            Name (\PETE, 0x00)
            Name (\NUMP, 0x00)
            Name (\PURA, 0x00)
            Name (\PURB, 0x00)
            Name (\PURE, 0x00)
            Name (\NUMS, 0x00)
            Name (\PWRM, 0x00)
            Device (HEC1)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
                OperationRegion (H1AD, PCI_Config, 0x10, 0x04)
                Field (H1AD, DWordAcc, NoLock, Preserve)
                {
                    H1BA,   32
                }

                OperationRegion (H1HS, PCI_Config, 0x4C, 0x04)
                Field (H1HS, DWordAcc, NoLock, Preserve)
                {
                    CTS0,   6, 
                    CTS1,   6, 
                    CTS2,   6, 
                    CTS3,   6, 
                    CTRV,   8
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0B)
                }
            }

            Device (HEC2)
            {
                Name (_ADR, 0x00160001)  // _ADR: Address
                OperationRegion (H2AD, PCI_Config, 0x10, 0x04)
                Field (H2AD, DWordAcc, NoLock, Preserve)
                {
                    H2BA,   32
                }

                OperationRegion (H2FS, PCI_Config, 0x40, 0x04)
                Field (H2FS, DWordAcc, NoLock, Preserve)
                {
                    RPS0,   6, 
                    RPS1,   6, 
                    RPS2,   6, 
                    RPS3,   6, 
                    RPRV,   8
                }

                OperationRegion (H2GS, PCI_Config, 0x48, 0x04)
                Field (H2GS, DWordAcc, NoLock, Preserve)
                {
                    RTS0,   6, 
                    RTS1,   6, 
                    RTS2,   6, 
                    RTS3,   6, 
                    RTRV,   8
                }

                OperationRegion (H2HS, PCI_Config, 0x4C, 0x04)
                Field (H2HS, DWordAcc, NoLock, Preserve)
                {
                    CPS0,   6, 
                    CPS1,   6, 
                    CPS2,   6, 
                    CPS3,   6, 
                    CPRV,   8
                }

                OperationRegion (HCSR, SystemMemory, 0xDF0FC000, 0x10)
                Field (HCSR, DWordAcc, NoLock, Preserve)
                {
                    CBWW,   32, 
                    HIE,    1, 
                    HIS,    1, 
                    HIG,    1, 
                    HRD,    1, 
                    HRS,    1, 
                    Offset (0x05), 
                    HRP,    8, 
                    HWP,    8, 
                    HBD,    8, 
                    CBRW,   32, 
                    MIE,    1, 
                    MIS,    1, 
                    MIG,    1, 
                    MRD,    1, 
                    MRS,    1, 
                    Offset (0x0D), 
                    MRP,    8, 
                    MWP,    8, 
                    MBD,    8
                }

                Method (_INI, 0, Serialized)  // _INI: Initialize
                {
                    WAK ()
                    RCPU ()
                    RPWM ()
                }

                Method (WAK, 0, Serialized)
                {
                    HRD = 0x01
                    HIE = 0x01
                    HIG = 0x01
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0B)
                }

                Method (PTS, 0, Serialized)
                {
                    HIE = 0x00
                    HRD = 0x00
                    HIG = 0x01
                }

                OperationRegion (CPLD, SystemIO, 0xE0, 0x08)
                Field (CPLD, ByteAcc, NoLock, Preserve)
                {
                    CPIN,   8, 
                    RES1,   24, 
                    CPDA,   8, 
                    RES2,   24
                }

                IndexField (CPIN, CPDA, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x02), 
                    PLNR,   8, 
                    Offset (0x09), 
                    CPUP,   8
                }

                Method (RCPU, 0, NotSerialized)
                {
                    Local0 = (~CPUP >> 0x04)
                    Local1 = (Local0 & 0x01)
                    Local2 = ((Local0 >> 0x01) & 0x01)
                    Local3 = ((Local0 >> 0x02) & 0x01)
                    Local4 = ((Local0 >> 0x03) & 0x01)
                    NUMS = (((Local1 + Local2) + Local3) + Local4)
                }

                Method (RPWM, 0, NotSerialized)
                {
                    Local0 = \_SB.P0B1.SPAD.SR04
                    Local0 = ((Local0 & 0xC000) >> 0x0E)
                    PWRM = Local0
                }

                Method (HSCI, 0, Serialized)
                {
                    If (HIS)
                    {
                        HIS = 0x01
                        If (MRS)
                        {
                            HRS = 0x01
                            HIG = 0x01
                        }
                        ElseIf (MRD)
                        {
                            If (!HRD)
                            {
                                HRS = 0x00
                                HRD = 0x01
                                HIG = 0x01
                            }

                            If ((MWP != MRP))
                            {
                                Local1 = CBRW /* \_SB_.PCI0.HEC2.CBRW */
                                Local0 = CBRW /* \_SB_.PCI0.HEC2.CBRW */
                                HIG = 0x01
                                If (((Local0 & 0xFF) == 0x00))
                                {
                                    If ((PWRM == 0x00))
                                    {
                                        Acquire (SMIM, 0xFFFF)
                                        SMIC = 0x99
                                        Local2 = SMIC /* \SMIC */
                                        Release (SMIM)
                                        CBWW = Local1
                                        PETE = 0x80
                                        PETE = (PETE | 0x40)
                                        CBWW = (Local0 | (PETE & 0xFF))
                                        HIG = 0x01
                                    }

                                    \_PR.PST0 = RPS0 /* \_SB_.PCI0.HEC2.RPS0 */
                                    \_PR.TST0 = RTS0 /* \_SB_.PCI0.HEC2.RTS0 */
                                    If ((NUMS > 0x01))
                                    {
                                        \_PR.PST1 = RPS1 /* \_SB_.PCI0.HEC2.RPS1 */
                                        \_PR.TST1 = RTS1 /* \_SB_.PCI0.HEC2.RTS1 */
                                    }

                                    If ((NUMS > 0x02))
                                    {
                                        \_PR.PST2 = RPS2 /* \_SB_.PCI0.HEC2.RPS2 */
                                        \_PR.TST2 = RTS2 /* \_SB_.PCI0.HEC2.RTS2 */
                                    }

                                    If ((NUMS > 0x03))
                                    {
                                        \_PR.PST3 = RPS3 /* \_SB_.PCI0.HEC2.RPS3 */
                                        \_PR.TST3 = RTS3 /* \_SB_.PCI0.HEC2.RTS3 */
                                    }

                                    If (CondRefOf (\_PR.CPU1._PSS, Local5))
                                    {
                                        Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                                        Notify (\_PR.CPU1, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CPU2, 0x80) // Performance Capability Change
                                        Notify (\_PR.CPU2, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CPU3, 0x80) // Performance Capability Change
                                        Notify (\_PR.CPU3, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CPU4, 0x80) // Performance Capability Change
                                        Notify (\_PR.CPU4, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CPU5, 0x80) // Performance Capability Change
                                        Notify (\_PR.CPU5, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CPU6, 0x80) // Performance Capability Change
                                        Notify (\_PR.CPU6, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CPU7, 0x80) // Performance Capability Change
                                        Notify (\_PR.CPU7, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CPU8, 0x80) // Performance Capability Change
                                        Notify (\_PR.CPU8, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CPU9, 0x80) // Performance Capability Change
                                        Notify (\_PR.CPU9, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CPUA, 0x80) // Performance Capability Change
                                        Notify (\_PR.CPUA, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CPUB, 0x80) // Performance Capability Change
                                        Notify (\_PR.CPUB, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CPUC, 0x80) // Performance Capability Change
                                        Notify (\_PR.CPUC, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CPUD, 0x80) // Performance Capability Change
                                        Notify (\_PR.CPUD, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CPUE, 0x80) // Performance Capability Change
                                        Notify (\_PR.CPUE, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CPUF, 0x80) // Performance Capability Change
                                        Notify (\_PR.CPUF, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CPUG, 0x80) // Performance Capability Change
                                        Notify (\_PR.CPUG, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP17, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP17, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP18, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP18, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP19, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP19, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP20, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP20, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP21, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP21, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP22, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP22, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP23, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP23, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP24, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP24, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP25, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP25, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP26, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP26, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP27, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP27, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP28, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP28, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP29, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP29, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP30, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP30, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP31, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP31, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP32, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP32, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP33, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP33, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP34, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP34, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP35, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP35, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP36, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP36, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP37, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP37, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP38, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP38, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP39, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP39, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP40, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP40, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP41, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP41, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP42, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP42, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP43, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP43, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP44, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP44, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP45, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP45, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP46, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP46, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP47, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP47, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP48, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP48, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP49, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP49, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP50, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP50, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP51, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP51, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP52, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP52, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP53, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP53, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP54, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP54, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP55, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP55, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP56, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP56, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP57, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP57, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP58, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP58, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP59, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP59, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP60, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP60, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP61, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP61, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP62, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP62, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP63, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP63, 0x82) // Throttling Capability Change
                                        Notify (\_PR.CP64, 0x80) // Performance Capability Change
                                        Notify (\_PR.CP64, 0x82) // Throttling Capability Change
                                    }

                                    If ((PWRM == 0x01))
                                    {
                                        \_SB.PCI0.HEC1.CTS0 = \_PR.TST0
                                        \_SB.PCI0.HEC1.CTS1 = \_PR.TST1
                                        \_SB.PCI0.HEC1.CTS2 = \_PR.TST2
                                        \_SB.PCI0.HEC1.CTS3 = \_PR.TST3
                                        \_SB.PCI0.HEC1.CTRV = RTRV /* \_SB_.PCI0.HEC2.RTRV */
                                        CPS0 = \_PR.PST0
                                        CPS1 = \_PR.PST1
                                        CPS2 = \_PR.PST2
                                        CPS3 = \_PR.PST3
                                        CPRV = RPRV /* \_SB_.PCI0.HEC2.RPRV */
                                        CBWW = Local1
                                        PETE = (0x80 | 0x40)
                                        CBWW = (Local0 | (PETE & 0xFF))
                                        HIG = 0x01
                                    }
                                }

                                If (((Local0 & 0xFF) == 0x03))
                                {
                                    \PURA = Local1
                                    \PURB = Local0
                                    If (PURE)
                                    {
                                        \NUMP = ((Local0 >> 0x10) & 0xFFFF)
                                        Notify (\_SB.PCI0.PRAD, 0x80) // Status Change
                                    }
                                    Else
                                    {
                                        CBWW = \PURA
                                        CBWW = \PURB
                                        HIG = 0x01
                                    }
                                }
                            }
                        }
                    }
                }
            }

            Device (PRAD)
            {
                Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (\PURE)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x00)
                    }
                }

                Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
                {
                    Name (IDL, Package (0x02)
                    {
                        0x01, 
                        0x00
                    })
                    IDL [0x01] = \NUMP
                    Return (IDL) /* \_SB_.PCI0.PRAD._PUR.IDL_ */
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Local1 = (Arg1 & 0xFF)
                    Local2 = ToInteger (Arg2)
                    If (((\PURB & 0xFF) == 0x03))
                    {
                        \_SB.PCI0.HEC2.CBWW = \PURA
                        Local2 = (\_PR.MAXT - Local2)
                        \PURB = ((\PURB & 0xFFFFFF00) | 0x83)
                        \_SB.PCI0.HEC2.CBWW = ((\PURB & 0xFFFF) | (Local2 << 0x10))
                        \_SB.PCI0.HEC2.HIG = 0x01
                    }
                }
            }

            Device (ISA)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                OperationRegion (LPCC, PCI_Config, 0x00, 0x0100)
                Device (DMA)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (DMAB, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0080,             // Range Minimum
                                0x0080,             // Range Maximum
                                0x01,               // Alignment
                                0x20,               // Length
                                )
                            IO (Decode16,
                                0x0000,             // Range Minimum
                                0x0000,             // Range Maximum
                                0x01,               // Alignment
                                0x20,               // Length
                                )
                            IO (Decode16,
                                0x00C0,             // Range Minimum
                                0x00C0,             // Range Maximum
                                0x01,               // Alignment
                                0x20,               // Length
                                )
                            DMA (Compatibility, NotBusMaster, Transfer16, )
                                {4}
                        })
                        Debug = "DMA_ _CRS"
                        Return (DMAB) /* \_SB_.PCI0.ISA_.DMA_._CRS.DMAB */
                    }
                }

                Device (FPU)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (FPUB, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x00F0,             // Range Minimum
                                0x00F0,             // Range Maximum
                                0x01,               // Alignment
                                0x10,               // Length
                                )
                            IRQNoFlags ()
                                {13}
                        })
                        Debug = "FPU _CRS"
                        Return (FPUB) /* \_SB_.PCI0.ISA_.FPU_._CRS.FPUB */
                    }
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (PICB, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0020,             // Range Minimum
                                0x0020,             // Range Maximum
                                0x01,               // Alignment
                                0x20,               // Length
                                )
                            IO (Decode16,
                                0x00A0,             // Range Minimum
                                0x00A0,             // Range Maximum
                                0x01,               // Alignment
                                0x20,               // Length
                                )
                            IO (Decode16,
                                0x04D0,             // Range Minimum
                                0x04D0,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IRQNoFlags ()
                                {2}
                        })
                        Debug = "PIC _CRS"
                        Return (PICB) /* \_SB_.PCI0.ISA_.PIC_._CRS.PICB */
                    }
                }

                Device (SPK)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (SPKB, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0061,             // Range Minimum
                                0x0061,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                        })
                        Debug = "SB_NMI _CRS"
                        Return (SPKB) /* \_SB_.PCI0.ISA_.SPK_._CRS.SPKB */
                    }
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTCB, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0070,             // Range Minimum
                                0x0070,             // Range Maximum
                                0x01,               // Alignment
                                0x10,               // Length
                                )
                            IRQNoFlags ()
                                {8}
                        })
                        Debug = "RTC _CRS"
                        Return (RTCB) /* \_SB_.PCI0.ISA_.RTC_._CRS.RTCB */
                    }
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (TMRB, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0040,             // Range Minimum
                                0x0040,             // Range Maximum
                                0x01,               // Alignment
                                0x20,               // Length
                                )
                            IRQNoFlags ()
                                {0}
                        })
                        Debug = "TMR _CRS"
                        Return (TMRB) /* \_SB_.PCI0.ISA_.TMR_._CRS.TMRB */
                    }
                }

                OperationRegion (NSIO, SystemIO, 0x0370, 0x02)
                Field (NSIO, ByteAcc, NoLock, Preserve)
                {
                    INDX,   8, 
                    DATA,   8
                }

                IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x02), 
                    CFG,    8, 
                    Offset (0x07), 
                    LDN,    8, 
                    Offset (0x20), 
                    SIID,   8, 
                    Offset (0x30), 
                    ACTR,   8, 
                    Offset (0x60), 
                    IOAH,   8, 
                    IOAL,   8, 
                    Offset (0x70), 
                    INTR,   8, 
                    Offset (0x74), 
                    DMCH,   8, 
                    Offset (0xF0), 
                    OPT1,   8, 
                    OPT2,   8, 
                    OPT3,   8
                }

                Mutex (MTX, 0x01)
                Method (SIOD, 1, NotSerialized)
                {
                    LDN = Arg0
                    Debug = "LDN:  "
                    Debug = LDN /* \_SB_.PCI0.ISA_.LDN_ */
                }

                Device (COMA)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Name (RET, Zero)
                        Debug = "COMA _STA "
                        Acquire (MTX, 0xFFFF)
                        SIOD (0x03)
                        If (ACTR)
                        {
                            RET = 0x0F
                        }
                        Else
                        {
                            RET = 0x0D
                        }

                        Release (MTX)
                        Debug = RET /* \_SB_.PCI0.ISA_.COMA._STA.RET_ */
                        Return (RET) /* \_SB_.PCI0.ISA_.COMA._STA.RET_ */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        Debug = "COMA _DIS "
                        Acquire (MTX, 0xFFFF)
                        SIOD (0x03)
                        INTR = Zero
                        ACTR = Zero
                        Release (MTX)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (CMA0, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x08,               // Alignment
                                0x08,               // Length
                                _Y00)
                            IRQNoFlags (_Y01)
                                {4}
                        })
                        Debug = "COMA _CRS "
                        CreateByteField (CMA0, \_SB.PCI0.ISA.COMA._CRS._Y00._MIN, IOL0)  // _MIN: Minimum Base Address
                        CreateByteField (CMA0, 0x03, IOH0)
                        CreateByteField (CMA0, \_SB.PCI0.ISA.COMA._CRS._Y00._MAX, IOL1)  // _MAX: Maximum Base Address
                        CreateByteField (CMA0, 0x05, IOH1)
                        CreateWordField (CMA0, \_SB.PCI0.ISA.COMA._CRS._Y01._INT, IQR)  // _INT: Interrupts
                        Acquire (MTX, 0xFFFF)
                        SIOD (0x03)
                        IOL0 = IOAL /* \_SB_.PCI0.ISA_.IOAL */
                        IOL1 = IOAL /* \_SB_.PCI0.ISA_.IOAL */
                        IOH0 = IOAH /* \_SB_.PCI0.ISA_.IOAH */
                        IOH1 = IOAH /* \_SB_.PCI0.ISA_.IOAH */
                        IQR = (One << INTR) /* \_SB_.PCI0.ISA_.INTR */
                        Debug = IOH0 /* \_SB_.PCI0.ISA_.COMA._CRS.IOH0 */
                        Debug = IOL0 /* \_SB_.PCI0.ISA_.COMA._CRS.IOL0 */
                        Debug = " "
                        Debug = IQR /* \_SB_.PCI0.ISA_.COMA._CRS.IQR_ */
                        Release (MTX)
                        Return (CMA0) /* \_SB_.PCI0.ISA_.COMA._CRS.CMA0 */
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Name (CMA1, Buffer (0x24)
                        {
                            /* 0000 */  0x30, 0x47, 0x01, 0xF8, 0x03, 0xF8, 0x03, 0x08,  // 0G......
                            /* 0008 */  0x08, 0x22, 0x10, 0x00, 0x30, 0x47, 0x01, 0xE8,  // ."..0G..
                            /* 0010 */  0x03, 0xE8, 0x03, 0x08, 0x08, 0x22, 0x10, 0x00,  // ....."..
                            /* 0018 */  0x30, 0x47, 0x01, 0xF8, 0x02, 0xF8, 0x02, 0x08,  // 0G......
                            /* 0020 */  0x08, 0x22, 0x08, 0x00                           // ."..
                        })
                        Concatenate (CMA1, SBCM, Local0)
                        Debug = Local0
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        Debug = "COMA _SRS"
                        CreateWordField (Arg0, 0x02, IOAD)
                        CreateByteField (Arg0, 0x02, IOLO)
                        CreateByteField (Arg0, 0x03, IOHI)
                        CreateWordField (Arg0, 0x09, IQR)
                        Acquire (MTX, 0xFFFF)
                        SIOD (0x03)
                        IOAL = IOLO /* \_SB_.PCI0.ISA_.COMA._SRS.IOLO */
                        IOAH = IOHI /* \_SB_.PCI0.ISA_.COMA._SRS.IOHI */
                        FindSetRightBit (IQR, Local0)
                        INTR = (Local0 - 0x01)
                        COMD (IOAD, 0x00)
                        Debug = IOAD /* \_SB_.PCI0.ISA_.COMA._SRS.IOAD */
                        Debug = " "
                        Debug = INTR /* \_SB_.PCI0.ISA_.INTR */
                        ACTR = One
                        Release (MTX)
                    }
                }

                Device (COMB)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Name (RET, Zero)
                        Debug = "COMB _STA "
                        Acquire (MTX, 0xFFFF)
                        SIOD (0x02)
                        If (ACTR)
                        {
                            RET = 0x0F
                        }
                        Else
                        {
                            RET = 0x0D
                        }

                        Release (MTX)
                        Debug = RET /* \_SB_.PCI0.ISA_.COMB._STA.RET_ */
                        Return (RET) /* \_SB_.PCI0.ISA_.COMB._STA.RET_ */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        Debug = "COMB _DIS "
                        Acquire (MTX, 0xFFFF)
                        SIOD (0x02)
                        INTR = Zero
                        ACTR = Zero
                        Release (MTX)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (CMB0, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x08,               // Alignment
                                0x08,               // Length
                                _Y02)
                            IRQNoFlags (_Y03)
                                {3}
                        })
                        Debug = "COMB _CRS "
                        CreateByteField (CMB0, \_SB.PCI0.ISA.COMB._CRS._Y02._MIN, IOL0)  // _MIN: Minimum Base Address
                        CreateByteField (CMB0, 0x03, IOH0)
                        CreateByteField (CMB0, \_SB.PCI0.ISA.COMB._CRS._Y02._MAX, IOL1)  // _MAX: Maximum Base Address
                        CreateByteField (CMB0, 0x05, IOH1)
                        CreateWordField (CMB0, \_SB.PCI0.ISA.COMB._CRS._Y03._INT, IQR)  // _INT: Interrupts
                        Acquire (MTX, 0xFFFF)
                        SIOD (0x02)
                        IOL0 = IOAL /* \_SB_.PCI0.ISA_.IOAL */
                        IOL1 = IOAL /* \_SB_.PCI0.ISA_.IOAL */
                        IOH0 = IOAH /* \_SB_.PCI0.ISA_.IOAH */
                        IOH1 = IOAH /* \_SB_.PCI0.ISA_.IOAH */
                        IQR = (One << INTR) /* \_SB_.PCI0.ISA_.INTR */
                        Debug = IOH0 /* \_SB_.PCI0.ISA_.COMB._CRS.IOH0 */
                        Debug = IOL0 /* \_SB_.PCI0.ISA_.COMB._CRS.IOL0 */
                        Debug = " "
                        Debug = IQR /* \_SB_.PCI0.ISA_.COMB._CRS.IQR_ */
                        Release (MTX)
                        Return (CMB0) /* \_SB_.PCI0.ISA_.COMB._CRS.CMB0 */
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Name (CMB1, Buffer (0x24)
                        {
                            /* 0000 */  0x30, 0x47, 0x01, 0xF8, 0x02, 0xF8, 0x02, 0x08,  // 0G......
                            /* 0008 */  0x08, 0x22, 0x08, 0x00, 0x30, 0x47, 0x01, 0xE8,  // ."..0G..
                            /* 0010 */  0x02, 0xE8, 0x02, 0x08, 0x08, 0x22, 0x08, 0x00,  // ....."..
                            /* 0018 */  0x30, 0x47, 0x01, 0xF8, 0x03, 0xF8, 0x03, 0x08,  // 0G......
                            /* 0020 */  0x08, 0x22, 0x10, 0x00                           // ."..
                        })
                        Concatenate (CMB1, SBCM, Local0)
                        Debug = Local0
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        Debug = "COMB _SRS "
                        CreateWordField (Arg0, 0x02, IOAD)
                        CreateByteField (Arg0, 0x02, IOLO)
                        CreateByteField (Arg0, 0x03, IOHI)
                        CreateWordField (Arg0, 0x09, IQR)
                        Acquire (MTX, 0xFFFF)
                        SIOD (0x02)
                        IOAL = IOLO /* \_SB_.PCI0.ISA_.COMB._SRS.IOLO */
                        IOAH = IOHI /* \_SB_.PCI0.ISA_.COMB._SRS.IOHI */
                        FindSetRightBit (IQR, Local0)
                        INTR = (Local0 - 0x01)
                        COMD (IOAD, 0x01)
                        Debug = IOAD /* \_SB_.PCI0.ISA_.COMB._SRS.IOAD */
                        Debug = " "
                        Debug = INTR /* \_SB_.PCI0.ISA_.INTR */
                        ACTR = One
                        Release (MTX)
                    }
                }

                Device (MBIO)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (_UID, "MBIO")  // _UID: Unique ID
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (SBDB, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0800,             // Range Minimum
                                0x0800,             // Range Maximum
                                0x01,               // Alignment
                                0x80,               // Length
                                )
                            IO (Decode16,
                                0x00E0,             // Range Minimum
                                0x00E0,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0880,             // Range Minimum
                                0x0880,             // Range Maximum
                                0x01,               // Alignment
                                0x80,               // Length
                                )
                            IO (Decode16,
                                0x0900,             // Range Minimum
                                0x0900,             // Range Maximum
                                0x01,               // Alignment
                                0x20,               // Length
                                )
                            IO (Decode16,
                                0x0920,             // Range Minimum
                                0x0920,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IO (Decode16,
                                0x0924,             // Range Minimum
                                0x0924,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0370,             // Range Minimum
                                0x0370,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0CA0,             // Range Minimum
                                0x0CA0,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0CA9,             // Range Minimum
                                0x0CA9,             // Range Maximum
                                0x01,               // Alignment
                                0x03,               // Length
                                )
                            IO (Decode16,
                                0x0CAD,             // Range Minimum
                                0x0CAD,             // Range Maximum
                                0x01,               // Alignment
                                0x03,               // Length
                                )
                            IO (Decode16,
                                0x0CB0,             // Range Minimum
                                0x0CB0,             // Range Maximum
                                0x01,               // Alignment
                                0x10,               // Length
                                )
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                _Y04)
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                _Y05)
                        })
                        CreateByteField (SBDB, \_SB.PCI0.ISA.MBIO._CRS._Y04._LEN, KBL1)  // _LEN: Length
                        CreateByteField (SBDB, \_SB.PCI0.ISA.MBIO._CRS._Y05._LEN, KBL2)  // _LEN: Length
                        If ((GCKB () || GCMS ()))
                        {
                            KBL1 = Zero
                            KBL2 = Zero
                        }

                        Return (SBDB) /* \_SB_.PCI0.ISA_.MBIO._CRS.SBDB */
                    }
                }

                Device (NIPM)
                {
                    Name (_HID, EisaId ("IPI0001"))  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0C01") /* System Board */)  // _CID: Compatible ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((TOOS == 0x01))
                        {
                            Return (0x0F)
                        }
                        ElseIf (((TOOS == 0x07) || (TOOS == 0x08)))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((TOOS == 0x08) || (TOOS == 0x01)))
                        {
                            Return (ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0CA8,             // Range Minimum
                                    0x0CA8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CAC,             // Range Minimum
                                    0x0CAC,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IRQNoFlags ()
                                    {10}
                            })
                        }
                        ElseIf ((TOOS == 0x07))
                        {
                            Return (ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0CA8,             // Range Minimum
                                    0x0CA8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CAC,             // Range Minimum
                                    0x0CAC,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IRQNoFlags ()
                                    {}
                            })
                        }
                        Else
                        {
                            Return (ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0CA8,             // Range Minimum
                                    0x0CA8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0CAC,             // Range Minimum
                                    0x0CAC,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IRQNoFlags ()
                                    {}
                            })
                        }
                    }

                    Method (_IFT, 0, NotSerialized)  // _IFT: IPMI Interface Type
                    {
                        Return (0x01)
                    }

                    Method (_SRV, 0, NotSerialized)  // _SRV: IPMI Spec Revision
                    {
                        Return (0x0200)
                    }
                }

                Device (MBI1)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((TOOS == 0x08) || (TOOS == 0x01)))
                        {
                            Return (0x00)
                        }
                        ElseIf ((TOOS == 0x07))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((TOOS == 0x08) || (TOOS == 0x01)))
                        {
                            Return (ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0CA8,             // Range Minimum
                                    0x0CA8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0CAC,             // Range Minimum
                                    0x0CAC,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IRQNoFlags ()
                                    {}
                            })
                        }
                        ElseIf ((TOOS == 0x07))
                        {
                            Return (ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0CA8,             // Range Minimum
                                    0x0CA8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0CAC,             // Range Minimum
                                    0x0CAC,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IRQNoFlags ()
                                    {}
                            })
                        }
                        Else
                        {
                            Return (ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0CA8,             // Range Minimum
                                    0x0CA8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CAC,             // Range Minimum
                                    0x0CAC,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IRQNoFlags ()
                                    {}
                            })
                        }
                    }
                }

                Device (TPM)
                {
                    Name (_HID, EisaId ("PNP0C31"))  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (!(0x04 & UCMR (0x63)))
                        {
                            If ((0x30 & UCMR (0x4E)))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (!(0x04 & UCMR (0x63)))
                        {
                            If ((0x30 & UCMR (0x4E)))
                            {
                                Return (ResourceTemplate ()
                                {
                                    Memory32Fixed (ReadWrite,
                                        0xFED40000,         // Address Base
                                        0x00005000,         // Address Length
                                        )
                                })
                            }
                            Else
                            {
                                Return (Buffer (0x01)
                                {
                                     0x00                                             // .
                                })
                            }
                        }
                        Else
                        {
                            Return (Buffer (0x01)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (!(0x04 & UCMR (0x63)))
                        {
                            If ((ToBuffer (Arg0) == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (0x00)
                                    {
                                        Return (Buffer (0x02)
                                        {
                                             0xFF, 0x01                                       // ..
                                        })
                                    }
                                    Case (0x01)
                                    {
                                        Return ("1.2")
                                    }
                                    Case (0x02)
                                    {
                                        Local7 = Zero
                                        Local0 = DerefOf (Arg3 [Local7])
                                        Local1 = CMRD (0x33)
                                        CMWR (0x3A, Local0)
                                        If ((Local0 == 0x00))
                                        {
                                            Local1 &= 0xBF
                                        }
                                        Else
                                        {
                                            Local1 |= 0x40
                                        }

                                        CMWR (0x33, Local1)
                                        Return (Zero)
                                    }
                                    Case (0x03)
                                    {
                                        Local0 = CMRD (0x3A)
                                        Local1 = CMRD (0x33)
                                        Local1 &= 0x40
                                        If ((Local1 == 0x40))
                                        {
                                            Switch (ToInteger (Local0))
                                            {
                                                Case (0x00)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x00
                                                    })
                                                }
                                                Case (0x01)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x01
                                                    })
                                                }
                                                Case (0x02)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x02
                                                    })
                                                }
                                                Case (0x03)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x03
                                                    })
                                                }
                                                Case (0x04)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x04
                                                    })
                                                }
                                                Case (0x05)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x05
                                                    })
                                                }
                                                Case (0x06)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x06
                                                    })
                                                }
                                                Case (0x07)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x07
                                                    })
                                                }
                                                Case (0x08)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x08
                                                    })
                                                }
                                                Case (0x09)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x09
                                                    })
                                                }
                                                Case (0x0A)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x0A
                                                    })
                                                }
                                                Case (0x0B)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x0B
                                                    })
                                                }
                                                Case (0x0C)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x0C
                                                    })
                                                }
                                                Case (0x0D)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x0D
                                                    })
                                                }
                                                Case (0x0E)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x0E
                                                    })
                                                }
                                                Case (0x0F)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x0F
                                                    })
                                                }
                                                Case (0x10)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x10
                                                    })
                                                }
                                                Case (0x11)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x11
                                                    })
                                                }
                                                Case (0x12)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x12
                                                    })
                                                }
                                                Case (0x13)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x13
                                                    })
                                                }
                                                Case (0x14)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x14
                                                    })
                                                }
                                                Case (0x15)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x15
                                                    })
                                                }
                                                Case (0x16)
                                                {
                                                    Return (Package (0x02)
                                                    {
                                                        0x00, 
                                                        0x16
                                                    })
                                                }

                                            }
                                        }

                                        Return (Package (0x02)
                                        {
                                            0x00, 
                                            0x00
                                        })
                                    }
                                    Case (0x04)
                                    {
                                        Return (0x02)
                                    }
                                    Case (0x05)
                                    {
                                        Local0 = CMRD (0x33)
                                        Local1 = CMRD (0x3A)
                                        Local2 = CMRD (0x3B)
                                        Local0 &= 0x40
                                        Local2 &= 0x7F
                                        If ((Local0 == 0x00))
                                        {
                                            If ((Local2 == 0x7F))
                                            {
                                                Switch (ToInteger (Local1))
                                                {
                                                    Case (0x00)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x00, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x01)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x01, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x02)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x02, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x03)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x03, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x04)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x04, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x05)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x05, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x06)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x06, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x07)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x07, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x08)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x08, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x09)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x09, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x0A)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x0A, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x0B)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x0B, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x0C)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x0C, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x0D)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x0D, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x0E)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x0E, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x0F)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x0F, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x10)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x10, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x11)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x11, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x12)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x12, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x13)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x13, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x14)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x14, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x15)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x15, 
                                                            0xFFFFFFF0
                                                        })
                                                    }
                                                    Case (0x16)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x16, 
                                                            0xFFFFFFF0
                                                        })
                                                    }

                                                }

                                                Return (Package (0x03)
                                                {
                                                    0x01, 
                                                    0x00, 
                                                    0x00
                                                })
                                            }
                                            Else
                                            {
                                                Switch (ToInteger (Local1))
                                                {
                                                    Case (0x00)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x00, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x01)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x01, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x02)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x02, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x03)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x03, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x04)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x04, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x05)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x05, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x06)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x06, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x07)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x07, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x08)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x08, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x09)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x09, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x0A)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x0A, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x0B)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x0B, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x0C)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x0C, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x0D)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x0D, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x0E)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x0E, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x0F)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x0F, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x10)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x10, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x11)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x11, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x12)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x12, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x13)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x13, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x14)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x14, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x15)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x15, 
                                                            0x00
                                                        })
                                                    }
                                                    Case (0x16)
                                                    {
                                                        Return (Package (0x03)
                                                        {
                                                            0x00, 
                                                            0x16, 
                                                            0x00
                                                        })
                                                    }

                                                }

                                                Return (Package (0x03)
                                                {
                                                    0x01, 
                                                    0x00, 
                                                    0x00
                                                })
                                            }
                                        }
                                        Else
                                        {
                                            Return (Package (0x03)
                                            {
                                                0x01, 
                                                0x00, 
                                                0x00
                                            })
                                        }
                                    }
                                    Case (0x06)
                                    {
                                        Return (0x03)
                                    }
                                    Case (0x07)
                                    {
                                        Local7 = Zero
                                        Local0 = DerefOf (Arg3 [Local7])
                                        Local1 = CMRD (0x33)
                                        Local3 = 0x01
                                        CMWR (0x3A, Local0)
                                        Switch (Local0)
                                        {
                                            Case (0x00)
                                            {
                                                Local3 = Zero
                                            }
                                            Case (0x01)
                                            {
                                                Local3 = Zero
                                            }
                                            Case (0x02)
                                            {
                                                Local3 = Zero
                                            }
                                            Case (0x03)
                                            {
                                                Local3 = Zero
                                            }
                                            Case (0x04)
                                            {
                                                Local3 = Zero
                                            }
                                            Case (0x05)
                                            {
                                                Local3 = Zero
                                            }
                                            Case (0x06)
                                            {
                                                Local3 = Zero
                                            }
                                            Case (0x07)
                                            {
                                                Local3 = Zero
                                            }
                                            Case (0x08)
                                            {
                                                Local3 = Zero
                                            }
                                            Case (0x09)
                                            {
                                                Local3 = Zero
                                            }
                                            Case (0x0A)
                                            {
                                                Local3 = Zero
                                            }
                                            Case (0x0B)
                                            {
                                                Local3 = Zero
                                            }
                                            Case (0x0E)
                                            {
                                                Local3 = Zero
                                            }
                                            Case (0x0F)
                                            {
                                                Local3 = Zero
                                            }
                                            Case (0x10)
                                            {
                                                Local3 = Zero
                                            }
                                            Case (0x15)
                                            {
                                                Local3 = Zero
                                            }
                                            Case (0x16)
                                            {
                                                Local3 = Zero
                                            }

                                        }

                                        If ((Local3 == 0x01))
                                        {
                                            Local0 = 0x00
                                        }

                                        If ((Local0 == 0x00))
                                        {
                                            Local1 &= 0xBF
                                        }
                                        Else
                                        {
                                            Local1 |= 0x40
                                        }

                                        CMWR (0x33, Local1)
                                        Return (Local3)
                                    }
                                    Case (0x08)
                                    {
                                        Local7 = Zero
                                        Local0 = DerefOf (Arg3 [Local7])
                                        Local1 = CMRD (0x5B)
                                        Local2 = (Local1 & 0x08)
                                        Local3 = (Local1 & 0x10)
                                        Switch (Local0)
                                        {
                                            Case (0x00)
                                            {
                                                Return (0x04)
                                            }
                                            Case (0x01)
                                            {
                                                If ((Local2 == 0x08))
                                                {
                                                    Return (0x03)
                                                }
                                                Else
                                                {
                                                    Return (0x04)
                                                }
                                            }
                                            Case (0x02)
                                            {
                                                If ((Local3 == 0x10))
                                                {
                                                    Return (0x03)
                                                }
                                                Else
                                                {
                                                    Return (0x04)
                                                }
                                            }
                                            Case (0x03)
                                            {
                                                If ((Local2 == 0x08))
                                                {
                                                    Return (0x03)
                                                }
                                                Else
                                                {
                                                    Return (0x04)
                                                }
                                            }
                                            Case (0x04)
                                            {
                                                If ((Local3 == 0x10))
                                                {
                                                    Return (0x03)
                                                }
                                                Else
                                                {
                                                    Return (0x04)
                                                }
                                            }
                                            Case (0x05)
                                            {
                                                Return (0x03)
                                            }
                                            Case (0x06)
                                            {
                                                If ((Local2 == 0x08))
                                                {
                                                    Return (0x03)
                                                }
                                                Else
                                                {
                                                    Return (0x04)
                                                }
                                            }
                                            Case (0x07)
                                            {
                                                If ((Local3 == 0x10))
                                                {
                                                    Return (0x03)
                                                }
                                                Else
                                                {
                                                    Return (0x04)
                                                }
                                            }
                                            Case (0x08)
                                            {
                                                If ((Local2 == 0x08))
                                                {
                                                    Return (0x03)
                                                }
                                                Else
                                                {
                                                    Return (0x04)
                                                }
                                            }
                                            Case (0x09)
                                            {
                                                If ((Local3 == 0x10))
                                                {
                                                    Return (0x03)
                                                }
                                                Else
                                                {
                                                    Return (0x04)
                                                }
                                            }
                                            Case (0x0A)
                                            {
                                                If ((Local2 == 0x08))
                                                {
                                                    Return (0x03)
                                                }
                                                Else
                                                {
                                                    Return (0x04)
                                                }
                                            }
                                            Case (0x0B)
                                            {
                                                If ((Local3 == 0x10))
                                                {
                                                    Return (0x03)
                                                }
                                                Else
                                                {
                                                    Return (0x04)
                                                }
                                            }
                                            Case (0x0E)
                                            {
                                                Return (0x03)
                                            }
                                            Case (0x0F)
                                            {
                                                Return (0x04)
                                            }
                                            Case (0x10)
                                            {
                                                Return (0x03)
                                            }
                                            Case (0x15)
                                            {
                                                Return (0x03)
                                            }
                                            Case (0x16)
                                            {
                                                Return (0x03)
                                            }

                                        }

                                        Return (0x00)
                                    }

                                }

                                Return (Buffer (0x01)
                                {
                                     0x00                                             // .
                                })
                            }

                            If ((ToBuffer (Arg0) == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (0x00)
                                    {
                                        Return (Buffer (0x01)
                                        {
                                             0x01                                             // .
                                        })
                                    }
                                    Case (0x01)
                                    {
                                        Local0 = CMRD (0x3B)
                                        Local0 &= 0x7F
                                        If (ToInteger (Arg3))
                                        {
                                            Local1 = 0x80
                                        }
                                        Else
                                        {
                                            Local1 = 0x00
                                        }

                                        Local0 |= Local1
                                        CMWR (0x3B, Local0)
                                        Return (0x00)
                                    }

                                }
                            }

                            Return (Buffer (0x01)
                            {
                                 0x00                                             // .
                            })
                        }

                        Return (Buffer (0x01)
                        {
                             0x00                                             // .
                        })
                    }
                }
            }

            Device (COR0)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                OperationRegion (MCH0, PCI_Config, 0x00, 0x0200)
                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    Debug = "CIBN ready"
                }

                Field (MCH0, DWordAcc, NoLock, Preserve)
                {
                    CDID,   32, 
                    Offset (0xD0), 
                    TOLM,   32, 
                    Offset (0x108), 
                    CIBN,   32
                }
            }

            Device (PEHB)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, "PEH0")  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (HBRS, ResourceTemplate ()
                    {
                        DWordMemory (ResourceConsumer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                            0x00000000,         // Granularity
                            0xE0000000,         // Range Minimum
                            0xE3EFFFFF,         // Range Maximum
                            0x00000000,         // Translation Offset
                            0x03F00000,         // Length
                            ,, , AddressRangeMemory, TypeStatic)
                    })
                    Debug = "PEHB _CRS"
                    Debug = HBRS /* \_SB_.PCI0.PEHB._CRS.HBRS */
                    Return (HBRS) /* \_SB_.PCI0.PEHB._CRS.HBRS */
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (HB0, ResourceTemplate ()
                {
                    WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x003E,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x003F,             // Length
                        ,, _Y07)
                    IO (Decode16,
                        0x0CF8,             // Range Minimum
                        0x0CF8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        )
                    WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x03AF,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x03B0,             // Length
                        ,, , TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x0000,             // Granularity
                        0x03E0,             // Range Minimum
                        0x0CF7,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0918,             // Length
                        ,, , TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0000,             // Length
                        ,, _Y08, TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinNotFixed, MaxNotFixed, SubDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0D00,             // Range Minimum
                        0x1FFF,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x1300,             // Length
                        ,, , TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinNotFixed, MaxNotFixed, SubDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0000,             // Length
                        ,, _Y12, TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinNotFixed, MaxNotFixed, SubDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0000,             // Length
                        ,, _Y13, TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinNotFixed, MaxNotFixed, SubDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0000,             // Length
                        ,, _Y14, TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinNotFixed, MaxNotFixed, SubDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0000,             // Length
                        ,, _Y15, TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinNotFixed, MaxNotFixed, SubDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0000,             // Length
                        ,, _Y16, TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinNotFixed, MaxNotFixed, SubDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0000,             // Length
                        ,, _Y17, TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinNotFixed, MaxNotFixed, SubDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0000,             // Length
                        ,, _Y18, TypeStatic, DenseTranslation)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x00000000,         // Range Minimum
                        0x00000000,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00000000,         // Length
                        ,, _Y09, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y0A, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y0B, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y0C, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y0D, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y0E, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y0F, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y10, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y11, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y06, AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0xFED40000,         // Range Minimum
                        0xFED44FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00005000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                })
                If ((0x02 & UCMR (0x53)))
                {
                    CreateDWordField (HB0, \_SB.PCI0._CRS._Y06._MIN, PMNL)  // _MIN: Minimum Base Address
                    Local0 = (0x0260 + 0x04)
                    CreateDWordField (HB0, Local0, PMNH)
                    CreateDWordField (HB0, \_SB.PCI0._CRS._Y06._MAX, PMXL)  // _MAX: Maximum Base Address
                    Local0 = (0x0268 + 0x04)
                    CreateDWordField (HB0, Local0, PMXH)
                    CreateDWordField (HB0, \_SB.PCI0._CRS._Y06._LEN, PMLL)  // _LEN: Length
                    Local0 = (0x0278 + 0x04)
                    CreateDWordField (HB0, Local0, PMLH)
                    PMNL = 0x00
                    PMNH = 0x03C0
                    PMXL = 0xFFFFFFFF
                    PMXH = 0x03FF
                    PMLL = 0x00
                    PMLH = 0x40
                }

                CreateWordField (HB0, \_SB.PCI0._CRS._Y07._MIN, BR0M)  // _MIN: Minimum Base Address
                CreateWordField (HB0, \_SB.PCI0._CRS._Y07._MAX, BR0P)  // _MAX: Maximum Base Address
                CreateWordField (HB0, \_SB.PCI0._CRS._Y07._LEN, BR0L)  // _LEN: Length
                CreateWordField (HB0, \_SB.PCI0._CRS._Y08._MIN, ION)  // _MIN: Minimum Base Address
                CreateWordField (HB0, \_SB.PCI0._CRS._Y08._MAX, IOX)  // _MAX: Maximum Base Address
                CreateWordField (HB0, \_SB.PCI0._CRS._Y08._LEN, IOL)  // _LEN: Length
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y09._MIN, VGAN)  // _MIN: Minimum Base Address
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y09._MAX, VGAX)  // _MAX: Maximum Base Address
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y09._LEN, VGAL)  // _LEN: Length
                If ((CMRD ((0x73 + 0x01)) < 0x3F))
                {
                    ION = 0x03B0
                    IOX = 0x03DF
                    IOL = ((IOX - ION) + 0x01)
                    VGAN = 0x000A0000
                    VGAX = 0x000BFFFF
                    VGAL = ((VGAX - VGAN) + 0x01)
                }

                CreateDWordField (HB0, \_SB.PCI0._CRS._Y0A._MIN, ME0M)  // _MIN: Minimum Base Address
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y0A._MAX, ME0U)  // _MAX: Maximum Base Address
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y0A._LEN, ME0L)  // _LEN: Length
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y0B._MIN, ME1M)  // _MIN: Minimum Base Address
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y0B._MAX, ME1U)  // _MAX: Maximum Base Address
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y0B._LEN, ME1L)  // _LEN: Length
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y0C._MIN, ME2M)  // _MIN: Minimum Base Address
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y0C._MAX, ME2U)  // _MAX: Maximum Base Address
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y0C._LEN, ME2L)  // _LEN: Length
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y0D._MIN, ME3M)  // _MIN: Minimum Base Address
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y0D._MAX, ME3U)  // _MAX: Maximum Base Address
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y0D._LEN, ME3L)  // _LEN: Length
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y0E._MIN, ME4M)  // _MIN: Minimum Base Address
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y0E._MAX, ME4U)  // _MAX: Maximum Base Address
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y0E._LEN, ME4L)  // _LEN: Length
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y0F._MIN, ME5M)  // _MIN: Minimum Base Address
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y0F._MAX, ME5U)  // _MAX: Maximum Base Address
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y0F._LEN, ME5L)  // _LEN: Length
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y10._MIN, ME6M)  // _MIN: Minimum Base Address
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y10._MAX, ME6U)  // _MAX: Maximum Base Address
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y10._LEN, ME6L)  // _LEN: Length
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y11._MIN, ME7M)  // _MIN: Minimum Base Address
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y11._MAX, ME7U)  // _MAX: Maximum Base Address
                CreateDWordField (HB0, \_SB.PCI0._CRS._Y11._LEN, ME7L)  // _LEN: Length
                CreateWordField (HB0, \_SB.PCI0._CRS._Y12._MIN, IO1M)  // _MIN: Minimum Base Address
                CreateWordField (HB0, \_SB.PCI0._CRS._Y12._MAX, IO1U)  // _MAX: Maximum Base Address
                CreateWordField (HB0, \_SB.PCI0._CRS._Y12._LEN, IO1L)  // _LEN: Length
                CreateWordField (HB0, \_SB.PCI0._CRS._Y13._MIN, IO2M)  // _MIN: Minimum Base Address
                CreateWordField (HB0, \_SB.PCI0._CRS._Y13._MAX, IO2U)  // _MAX: Maximum Base Address
                CreateWordField (HB0, \_SB.PCI0._CRS._Y13._LEN, IO2L)  // _LEN: Length
                CreateWordField (HB0, \_SB.PCI0._CRS._Y14._MIN, IO3M)  // _MIN: Minimum Base Address
                CreateWordField (HB0, \_SB.PCI0._CRS._Y14._MAX, IO3U)  // _MAX: Maximum Base Address
                CreateWordField (HB0, \_SB.PCI0._CRS._Y14._LEN, IO3L)  // _LEN: Length
                CreateWordField (HB0, \_SB.PCI0._CRS._Y15._MIN, IO4M)  // _MIN: Minimum Base Address
                CreateWordField (HB0, \_SB.PCI0._CRS._Y15._MAX, IO4U)  // _MAX: Maximum Base Address
                CreateWordField (HB0, \_SB.PCI0._CRS._Y15._LEN, IO4L)  // _LEN: Length
                CreateWordField (HB0, \_SB.PCI0._CRS._Y16._MIN, IO5M)  // _MIN: Minimum Base Address
                CreateWordField (HB0, \_SB.PCI0._CRS._Y16._MAX, IO5U)  // _MAX: Maximum Base Address
                CreateWordField (HB0, \_SB.PCI0._CRS._Y16._LEN, IO5L)  // _LEN: Length
                CreateWordField (HB0, \_SB.PCI0._CRS._Y17._MIN, IO6M)  // _MIN: Minimum Base Address
                CreateWordField (HB0, \_SB.PCI0._CRS._Y17._MAX, IO6U)  // _MAX: Maximum Base Address
                CreateWordField (HB0, \_SB.PCI0._CRS._Y17._LEN, IO6L)  // _LEN: Length
                CreateWordField (HB0, \_SB.PCI0._CRS._Y18._MIN, IO7M)  // _MIN: Minimum Base Address
                CreateWordField (HB0, \_SB.PCI0._CRS._Y18._MAX, IO7U)  // _MAX: Maximum Base Address
                CreateWordField (HB0, \_SB.PCI0._CRS._Y18._LEN, IO7L)  // _LEN: Length
                Local1 = P2IN ()
                If ((Local1 == 0x3F))
                {
                    Local0 = P3FL /* \P3FL */
                }
                ElseIf ((Local1 == 0x3F))
                {
                    Local0 = P3FL /* \P3FL */
                }
                Else
                {
                    Local0 = 0x00
                }

                If ((Local0 != 0x00))
                {
                    Local0 = 0xFF
                    Local0++
                    Local0 >>= 0x02
                    Local0--
                    Local0--
                    BR0L = Local0
                    Local0--
                    BR0P = Local0
                    Local0 = P3FM /* \P3FM */
                    If (((Local0 & 0x07) == 0x00))
                    {
                        Local6 = P3I0 /* \P3I0 */
                        If ((((Local6 & 0x01) != 0x00) && ((Local6 & 
                            0x001FFF80) == 0x00)))
                        {
                            Local7 = (Local6 & 0x001FFFFE)
                            Local7 <<= 0x19
                            ME0M = Local7
                            If ((CPUS < 0xE0))
                            {
                                Local7 = (Local6 & 0xFC000000)
                                Local7 |= 0x03FFFFFF
                            }
                            Else
                            {
                                Local7 = (Local6 & 0xFF000000)
                                Local7 |= 0x00FFFFFF
                            }

                            ME0U = Local7
                            ME0L = (ME0U - ME0M) /* \_SB_.PCI0._CRS.ME0M */
                            ME0L++
                        }
                    }

                    If (((Local0 & 0x38) == 0x00))
                    {
                        Local6 = P3I1 /* \P3I1 */
                        If ((((Local6 & 0x01) != 0x00) && ((Local6 & 
                            0x001FFF80) == 0x00)))
                        {
                            Local7 = (Local6 & 0x001FFFFE)
                            Local7 <<= 0x19
                            ME1M = Local7
                            If ((CPUS < 0xE0))
                            {
                                Local7 = (Local6 & 0xFC000000)
                                Local7 |= 0x03FFFFFF
                            }
                            Else
                            {
                                Local7 = (Local6 & 0xFF000000)
                                Local7 |= 0x00FFFFFF
                            }

                            ME1U = Local7
                            ME1L = (ME1U - ME1M) /* \_SB_.PCI0._CRS.ME1M */
                            ME1L++
                        }
                    }

                    Local0 = P3FI /* \P3FI */
                    If (((Local0 & 0x38) == 0x00))
                    {
                        IO1M = 0x2000
                        IO1U = 0x3FFF
                        IO1L = 0x2000
                    }

                    If (((Local0 & 0x01C0) == 0x00))
                    {
                        IO2M = 0x4000
                        IO2U = 0x5FFF
                        IO2L = 0x2000
                    }

                    If (((Local0 & 0x0E00) == 0x00))
                    {
                        IO3M = 0x6000
                        IO3U = 0x7FFF
                        IO3L = 0x2000
                    }

                    If (((Local0 & 0x7000) == 0x00))
                    {
                        IO4M = 0x8000
                        IO4U = 0x9FFF
                        IO4L = 0x2000
                    }

                    If (((Local0 & 0x00038000) == 0x00))
                    {
                        IO5M = 0xA000
                        IO5U = 0xBFFF
                        IO5L = 0x2000
                    }

                    If (((Local0 & 0x001C0000) == 0x00))
                    {
                        IO6M = 0xC000
                        IO6U = 0xDFFF
                        IO6L = 0x2000
                    }

                    If (((Local0 & 0x00E00000) == 0x00))
                    {
                        IO7M = 0xE000
                        IO7U = 0xFFFF
                        IO7L = 0x2000
                    }
                }
                Else
                {
                    Local0 = \_SB.PCI0.COR0.TOLM
                    Local0 &= 0xFC000000
                    Local0 |= 0x03FFFFFF
                    Local0++
                    ME0M = Local0
                    ME0U = 0xFBFFFFFF
                    ME0L = (ME0U - ME0M) /* \_SB_.PCI0._CRS.ME0M */
                    ME0L++
                    IO1M = 0x2000
                    IO1U = 0xFFFF
                    IO1L = 0xE000
                }

                Debug = HB0 /* \_SB_.PCI0._CRS.HB0_ */
                Return (HB0) /* \_SB_.PCI0._CRS.HB0_ */
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Debug = "Method _OSC"
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x00, CDW1)
                    CreateDWordField (Arg3, 0x04, CDW2)
                    CreateDWordField (Arg3, 0x08, CDW3)
                    Debug = "Revision "
                    Debug = Arg1
                    Debug = "Count "
                    Debug = Arg2
                    Debug = "Status  "
                    Debug = CDW1 /* \_SB_.PCI0._OSC.CDW1 */
                    Debug = "Support "
                    Debug = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    Debug = "Control "
                    Debug = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            Debug = "Turn off PCIE hotplug BIOS support"
                        }

                        If ((CTRL & 0x04))
                        {
                            Debug = "Turn off PME BIOS support"
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                }
                Else
                {
                    CDW1 |= 0x04
                }

                CDW1 &= 0x1F
                Debug = "Return Status  "
                Debug = CDW1 /* \_SB_.PCI0._OSC.CDW1 */
                Debug = "Return Support "
                Debug = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                Debug = "Return Control "
                Debug = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                Return (Arg3)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                Debug = "Method _DSM"
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Debug = "Arg2"
                    Debug = Arg2
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (0x01)
                        {
                             0x21                                             // !
                        })
                    }

                    If ((Arg2 == 0x05))
                    {
                        Debug = "Do not allow OS to control PCI resource rebalance"
                        Return (Buffer (0x01)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Debug = "Unsupported function"
                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }
        }

        Device (PCI1)
        {
            Name (P1BN, Buffer (0x01)
            {
                 0x40                                             // @
            })
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_PXM, 0x02)  // _PXM: Device Proximity
            Name (_ADR, 0x00)  // _ADR: Address
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Local0 = P1BN /* \_SB_.PCI1.P1BN */
                If ((Local0 == 0x80))
                {
                    Return (0x80)
                }
                Else
                {
                    Return (0x40)
                }
            }

            Name (_UID, "PCI1")  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IO2P ())
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                If (IO2P ())
                {
                    Local0 = C0IB /* \C0IB */
                    Local0 &= 0xFF00
                    Local0 >>= 0x08
                    Local0++
                    P1BN = Local0
                    Debug = "PCI1 BBN"
                    Debug = Local0
                }
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x0B, 
                0x05
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (!PICF)
                {
                    Name (P101, Package (0x08)
                    {
                        Package (0x04)
                        {
                            0xFFFF, 
                            0x00, 
                            LK00, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            LK00, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            LK00, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x00, 
                            LK00, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x00, 
                            LK00, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x01, 
                            LK01, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x02, 
                            LK02, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x03, 
                            LK03, 
                            0x00
                        }
                    })
                    Local0 = P101 /* \_SB_.PCI1._PRT.P101 */
                }
                Else
                {
                    Name (A101, Package (0x08)
                    {
                        Package (0x04)
                        {
                            0xFFFF, 
                            0x00, 
                            0x00, 
                            0x40
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            0x00, 
                            0x55
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            0x00, 
                            0x55
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x00, 
                            0x00, 
                            0x55
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x00, 
                            0x00, 
                            0x47
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x01, 
                            0x00, 
                            0x4F
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x02, 
                            0x00, 
                            0x47
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            0x03, 
                            0x00, 
                            0x4F
                        }
                    })
                    Local0 = A101 /* \_SB_.PCI1._PRT.A101 */
                }

                Return (Local0)
            }

            Device (PEXB)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    Name (VAR1, Zero)
                    If ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        If ((ToInteger (Arg1) == 0x02))
                        {
                            VAR1 = ToInteger (Arg2)
                            If ((VAR1 == 0x00))
                            {
                                Return (Buffer (0x01)
                                {
                                     0x81                                             // .
                                })
                            }
                            ElseIf ((VAR1 == 0x07))
                            {
                                Return (Package (0x02)
                                {
                                    0x14, 
                                    Unicode ("SLOT 5")
                                })
                            }
                        }
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Name (P109, Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                LK00, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                LK01, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                LK02, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                LK03, 
                                0x00
                            }
                        })
                        Local0 = P109 /* \_SB_.PCI1.PEXB._PRT.P109 */
                    }
                    Else
                    {
                        Name (A109, Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x42
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x44
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x45
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x46
                            }
                        })
                        Local0 = A109 /* \_SB_.PCI1.PEXB._PRT.A109 */
                    }

                    Return (Local0)
                }
            }

            Device (PEXC)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    Name (VAR1, Zero)
                    If ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        If ((ToInteger (Arg1) == 0x02))
                        {
                            VAR1 = ToInteger (Arg2)
                            If ((VAR1 == 0x00))
                            {
                                Return (Buffer (0x01)
                                {
                                     0x81                                             // .
                                })
                            }
                            ElseIf ((VAR1 == 0x07))
                            {
                                Return (Package (0x02)
                                {
                                    0x13, 
                                    Unicode ("SLOT 4")
                                })
                            }
                        }
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Name (P10A, Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                LK00, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                LK01, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                LK02, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                LK03, 
                                0x00
                            }
                        })
                        Local0 = P10A /* \_SB_.PCI1.PEXC._PRT.P10A */
                    }
                    Else
                    {
                        Name (A10A, Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x48
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x4C
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x4D
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x4E
                            }
                        })
                        Local0 = A10A /* \_SB_.PCI1.PEXC._PRT.A10A */
                    }

                    Return (Local0)
                }
            }

            Device (PEXD)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    Name (VAR1, Zero)
                    If ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        If ((ToInteger (Arg1) == 0x02))
                        {
                            VAR1 = ToInteger (Arg2)
                            If ((VAR1 == 0x00))
                            {
                                Return (Buffer (0x01)
                                {
                                     0x81                                             // .
                                })
                            }
                            ElseIf ((VAR1 == 0x07))
                            {
                                Return (Package (0x02)
                                {
                                    0x11, 
                                    Unicode ("SLOT 2")
                                })
                            }
                        }
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Name (P10B, Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                LK00, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                LK01, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                LK02, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                LK03, 
                                0x00
                            }
                        })
                        Local0 = P10B /* \_SB_.PCI1.PEXD._PRT.P10B */
                    }
                    Else
                    {
                        Name (A10B, Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x4A
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x4D
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x4C
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x4E
                            }
                        })
                        Local0 = A10B /* \_SB_.PCI1.PEXD._PRT.A10B */
                    }

                    Return (Local0)
                }
            }

            Device (PEXE)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    Name (VAR1, Zero)
                    If ((ToBuffer (Arg0) == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        If ((ToInteger (Arg1) == 0x02))
                        {
                            VAR1 = ToInteger (Arg2)
                            If ((VAR1 == 0x00))
                            {
                                Return (Buffer (0x01)
                                {
                                     0x81                                             // .
                                })
                            }
                            ElseIf ((VAR1 == 0x07))
                            {
                                Return (Package (0x02)
                                {
                                    0x10, 
                                    Unicode ("SLOT 1")
                                })
                            }
                        }
                    }
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (RDPT ())
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Name (P10C, Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                LK00, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                LK01, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                LK02, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                LK03, 
                                0x00
                            }
                        })
                        Local0 = P10C /* \_SB_.PCI1.PEXE._PRT.P10C */
                    }
                    Else
                    {
                        Name (A10C, Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x50
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x54
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x55
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x56
                            }
                        })
                        Local0 = A10C /* \_SB_.PCI1.PEXE._PRT.A10C */
                    }

                    Return (Local0)
                }
            }

            Device (COR0)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                OperationRegion (MCH1, PCI_Config, 0x00, 0x0200)
                Field (MCH1, DWordAcc, NoLock, Preserve)
                {
                    CDID,   32, 
                    Offset (0xD0), 
                    TOLM,   32, 
                    Offset (0x108), 
                    CIBN,   32
                }
            }

            Device (PEHB)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, "PEH1")  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (HBRS, ResourceTemplate ()
                    {
                        DWordMemory (ResourceConsumer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                            0x00000000,         // Granularity
                            0xE4000000,         // Range Minimum
                            0xE7FFFFFF,         // Range Maximum
                            0x00000000,         // Translation Offset
                            0x04000000,         // Length
                            ,, _Y19, AddressRangeMemory, TypeStatic)
                    })
                    CreateDWordField (HBRS, \_SB.PCI1.PEHB._CRS._Y19._MIN, HBAL)  // _MIN: Minimum Base Address
                    CreateDWordField (HBRS, \_SB.PCI1.PEHB._CRS._Y19._MAX, HBAU)  // _MAX: Maximum Base Address
                    CreateDWordField (HBRS, \_SB.PCI1.PEHB._CRS._Y19._LEN, HBAS)  // _LEN: Length
                    If (IO2P ())
                    {
                        Local0 = 0xE0000000
                        Local1 = 0x10000000
                        Local1 >>= 0x02
                        HBAL = (Local0 + Local1)
                        HBAU = (HBAL + Local1)
                        HBAS = Local1
                        HBAU--
                    }

                    Debug = "PEHB _CRS"
                    Debug = HBRS /* \_SB_.PCI1.PEHB._CRS.HBRS */
                    Return (HBRS) /* \_SB_.PCI1.PEHB._CRS.HBRS */
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (HB2P, ResourceTemplate ()
                {
                    WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                        0x0000,             // Granularity
                        0x0040,             // Range Minimum
                        0x007E,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x003F,             // Length
                        ,, )
                    WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0000,             // Length
                        ,, _Y1C, TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinNotFixed, MaxNotFixed, SubDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0000,             // Length
                        ,, _Y26, TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinNotFixed, MaxNotFixed, SubDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0000,             // Length
                        ,, _Y27, TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinNotFixed, MaxNotFixed, SubDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0000,             // Length
                        ,, _Y28, TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinNotFixed, MaxNotFixed, SubDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0000,             // Length
                        ,, _Y29, TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinNotFixed, MaxNotFixed, SubDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0000,             // Length
                        ,, _Y2A, TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinNotFixed, MaxNotFixed, SubDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0000,             // Length
                        ,, _Y2B, TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinNotFixed, MaxNotFixed, SubDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0000,             // Length
                        ,, _Y2C, TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinNotFixed, MaxNotFixed, SubDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0000,             // Length
                        ,, _Y2D, TypeStatic, DenseTranslation)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x00000000,         // Range Minimum
                        0x00000000,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00000000,         // Length
                        ,, _Y1D, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y1B, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y1E, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y1F, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y20, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y21, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y22, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y23, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y24, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y25, AddressRangeMemory, TypeStatic)
                    QWordMemory (ResourceProducer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                        0x0000000000000000, // Granularity
                        0x0000000000000000, // Range Minimum
                        0x0000000000000000, // Range Maximum
                        0x0000000000000000, // Translation Offset
                        0x0000000000000000, // Length
                        ,, _Y1A, AddressRangeMemory, TypeStatic)
                })
                Name (HB2N, ResourceTemplate ()
                {
                    WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                        0x0000,             // Granularity
                        0x0040,             // Range Minimum
                        0x007F,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0040,             // Length
                        ,, )
                })
                If ((0x02 & UCMR (0x53)))
                {
                    CreateDWordField (HB2P, \_SB.PCI1._CRS._Y1A._MIN, PMNL)  // _MIN: Minimum Base Address
                    Local0 = (0x0266 + 0x04)
                    CreateDWordField (HB2P, Local0, PMNH)
                    CreateDWordField (HB2P, \_SB.PCI1._CRS._Y1A._MAX, PMXL)  // _MAX: Maximum Base Address
                    Local0 = (0x026E + 0x04)
                    CreateDWordField (HB2P, Local0, PMXH)
                    CreateDWordField (HB2P, \_SB.PCI1._CRS._Y1A._LEN, PMLL)  // _LEN: Length
                    Local0 = (0x027E + 0x04)
                    CreateDWordField (HB2P, Local0, PMLH)
                    PMNL = 0x00
                    PMNH = 0x0380
                    PMXL = 0xFFFFFFFF
                    PMXH = 0x03BF
                    PMLL = 0x00
                    PMLH = 0x40
                }

                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y1B._MIN, MRPM)  // _MIN: Minimum Base Address
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y1B._MAX, MRPU)  // _MAX: Maximum Base Address
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y1B._LEN, MRPL)  // _LEN: Length
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y1C._MIN, ION)  // _MIN: Minimum Base Address
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y1C._MAX, IOX)  // _MAX: Maximum Base Address
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y1C._LEN, IOL)  // _LEN: Length
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y1D._MIN, VGAN)  // _MIN: Minimum Base Address
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y1D._MAX, VGAX)  // _MAX: Maximum Base Address
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y1D._LEN, VGAL)  // _LEN: Length
                If ((CMRD ((0x73 + 0x01)) > 0x3F))
                {
                    ION = 0x03B0
                    IOX = 0x03DF
                    IOL = ((IOX - ION) + 0x01)
                    VGAN = 0x000A0000
                    VGAX = 0x000BFFFF
                    VGAL = ((VGAX - VGAN) + 0x01)
                }

                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y1E._MIN, MR0M)  // _MIN: Minimum Base Address
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y1E._MAX, MR0U)  // _MAX: Maximum Base Address
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y1E._LEN, MR0L)  // _LEN: Length
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y1F._MIN, MR1M)  // _MIN: Minimum Base Address
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y1F._MAX, MR1U)  // _MAX: Maximum Base Address
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y1F._LEN, MR1L)  // _LEN: Length
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y20._MIN, MR2M)  // _MIN: Minimum Base Address
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y20._MAX, MR2U)  // _MAX: Maximum Base Address
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y20._LEN, MR2L)  // _LEN: Length
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y21._MIN, MR3M)  // _MIN: Minimum Base Address
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y21._MAX, MR3U)  // _MAX: Maximum Base Address
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y21._LEN, MR3L)  // _LEN: Length
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y22._MIN, MR4M)  // _MIN: Minimum Base Address
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y22._MAX, MR4U)  // _MAX: Maximum Base Address
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y22._LEN, MR4L)  // _LEN: Length
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y23._MIN, MR5M)  // _MIN: Minimum Base Address
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y23._MAX, MR5U)  // _MAX: Maximum Base Address
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y23._LEN, MR5L)  // _LEN: Length
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y24._MIN, MR6M)  // _MIN: Minimum Base Address
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y24._MAX, MR6U)  // _MAX: Maximum Base Address
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y24._LEN, MR6L)  // _LEN: Length
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y25._MIN, MR7M)  // _MIN: Minimum Base Address
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y25._MAX, MR7U)  // _MAX: Maximum Base Address
                CreateDWordField (HB2P, \_SB.PCI1._CRS._Y25._LEN, MR7L)  // _LEN: Length
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y26._MIN, IO0M)  // _MIN: Minimum Base Address
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y26._MAX, IO0U)  // _MAX: Maximum Base Address
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y26._LEN, IO0L)  // _LEN: Length
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y27._MIN, IO1M)  // _MIN: Minimum Base Address
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y27._MAX, IO1U)  // _MAX: Maximum Base Address
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y27._LEN, IO1L)  // _LEN: Length
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y28._MIN, IO2M)  // _MIN: Minimum Base Address
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y28._MAX, IO2U)  // _MAX: Maximum Base Address
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y28._LEN, IO2L)  // _LEN: Length
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y29._MIN, IO3M)  // _MIN: Minimum Base Address
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y29._MAX, IO3U)  // _MAX: Maximum Base Address
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y29._LEN, IO3L)  // _LEN: Length
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y2A._MIN, IO4M)  // _MIN: Minimum Base Address
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y2A._MAX, IO4U)  // _MAX: Maximum Base Address
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y2A._LEN, IO4L)  // _LEN: Length
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y2B._MIN, IO5M)  // _MIN: Minimum Base Address
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y2B._MAX, IO5U)  // _MAX: Maximum Base Address
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y2B._LEN, IO5L)  // _LEN: Length
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y2C._MIN, IO6M)  // _MIN: Minimum Base Address
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y2C._MAX, IO6U)  // _MAX: Maximum Base Address
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y2C._LEN, IO6L)  // _LEN: Length
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y2D._MIN, IO7M)  // _MIN: Minimum Base Address
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y2D._MAX, IO7U)  // _MAX: Maximum Base Address
                CreateWordField (HB2P, \_SB.PCI1._CRS._Y2D._LEN, IO7L)  // _LEN: Length
                If (IO2P ())
                {
                    Local1 = P2IN ()
                    If ((Local1 == 0x3F))
                    {
                        Local0 = P7FL /* \P7FL */
                    }
                    ElseIf ((Local1 == 0x3F))
                    {
                        Local0 = P3FL /* \P3FL */
                    }
                    Else
                    {
                        Local0 = 0x00
                    }

                    If ((Local0 != 0x00))
                    {
                        Local0 = P3FM /* \P3FM */
                        If (((Local0 & 0x07) == 0x01))
                        {
                            Local6 = P3I0 /* \P3I0 */
                            If (((Local6 & 0x01) != 0x00))
                            {
                                Local7 = (Local6 & 0x001FFFFE)
                                Local7 <<= 0x19
                                MR0M = Local7
                                If ((CPUS < 0xE0))
                                {
                                    Local7 = (Local6 & 0xFC000000)
                                    Local7 |= 0x03FFFFFF
                                }
                                Else
                                {
                                    Local7 = (Local6 & 0xFF000000)
                                    Local7 |= 0x00FFFFFF
                                }

                                MR0U = Local7
                                MR0L = (MR0U - MR0M) /* \_SB_.PCI1._CRS.MR0M */
                                MR0L++
                            }
                        }

                        If (((Local0 & 0x38) == 0x08))
                        {
                            Local6 = P3I1 /* \P3I1 */
                            If (((Local6 & 0x01) != 0x00))
                            {
                                Local7 = (Local6 & 0x001FFFFE)
                                Local7 <<= 0x19
                                MR1M = Local7
                                If ((CPUS < 0xE0))
                                {
                                    Local7 = (Local6 & 0xFC000000)
                                    Local7 |= 0x03FFFFFF
                                }
                                Else
                                {
                                    Local7 = (Local6 & 0xFF000000)
                                    Local7 |= 0x00FFFFFF
                                }

                                MR1U = Local7
                                MR1L = (MR1U - MR1M) /* \_SB_.PCI1._CRS.MR1M */
                                MR1L++
                            }
                        }

                        Local0 = P3FI /* \P3FI */
                        If (((Local0 & 0x38) == 0x08))
                        {
                            IO1M = 0x2000
                            IO1U = 0x3FFF
                            IO1L = 0x2000
                        }

                        If (((Local0 & 0x01C0) == 0x40))
                        {
                            IO2M = 0x4000
                            IO2U = 0x5FFF
                            IO2L = 0x2000
                        }

                        If (((Local0 & 0x0E00) == 0x0200))
                        {
                            IO3M = 0x6000
                            IO3U = 0x7FFF
                            IO3L = 0x2000
                        }

                        If (((Local0 & 0x7000) == 0x1000))
                        {
                            IO4M = 0x8000
                            IO4U = 0x9FFF
                            IO4L = 0x2000
                        }

                        If (((Local0 & 0x00038000) == 0x8000))
                        {
                            IO5M = 0xA000
                            IO5U = 0xBFFF
                            IO5L = 0x2000
                        }

                        If (((Local0 & 0x001C0000) == 0x00040000))
                        {
                            IO6M = 0xC000
                            IO6U = 0xDFFF
                            IO6L = 0x2000
                        }

                        If (((Local0 & 0x00E00000) == 0x00200000))
                        {
                            IO7M = 0xE000
                            IO7U = 0xFFFF
                            IO7L = 0x2000
                        }
                    }
                    Else
                    {
                        Local0 = 0x00
                        MRPM = Local0
                        MRPU = Local0
                        MRPL = Local0
                    }
                }

                Debug = "HB2P _CRS.TOMR"
                Debug = HB2P /* \_SB_.PCI1._CRS.HB2P */
                If (IO2P ())
                {
                    Return (HB2P) /* \_SB_.PCI1._CRS.HB2P */
                }
                Else
                {
                    Return (HB2N) /* \_SB_.PCI1._CRS.HB2N */
                }
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Debug = "Method _OSC"
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x00, CDW1)
                    CreateDWordField (Arg3, 0x04, CDW2)
                    CreateDWordField (Arg3, 0x08, CDW3)
                    Debug = "Revision "
                    Debug = Arg1
                    Debug = "Count "
                    Debug = Arg2
                    Debug = "Status  "
                    Debug = CDW1 /* \_SB_.PCI1._OSC.CDW1 */
                    Debug = "Support "
                    Debug = CDW2 /* \_SB_.PCI1._OSC.CDW2 */
                    Debug = "Control "
                    Debug = CDW3 /* \_SB_.PCI1._OSC.CDW3 */
                    SUPP = CDW2 /* \_SB_.PCI1._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI1._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            Debug = "Turn off PCIE hotplug BIOS support"
                        }

                        If ((CTRL & 0x04))
                        {
                            Debug = "Turn off PME BIOS support"
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI1.CTRL */
                }
                Else
                {
                    CDW1 |= 0x04
                }

                CDW1 &= 0x1F
                Debug = "Return Status  "
                Debug = CDW1 /* \_SB_.PCI1._OSC.CDW1 */
                Debug = "Return Support "
                Debug = CDW2 /* \_SB_.PCI1._OSC.CDW2 */
                Debug = "Return Control "
                Debug = CDW3 /* \_SB_.PCI1._OSC.CDW3 */
                Return (Arg3)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                Debug = "Method _DSM"
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Debug = "Arg2"
                    Debug = Arg2
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (0x01)
                        {
                             0x21                                             // !
                        })
                    }

                    If ((Arg2 == 0x05))
                    {
                        Debug = "Do not allow OS to control PCI resource rebalance"
                        Return (Buffer (0x01)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Debug = "Unsupported function"
                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }
        }

        Device (P0B1)
        {
            Name (_PXM, 0x01)  // _PXM: Device Proximity
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_UID, "Uncore Bus PCI0")  // _UID: Unique ID
            Name (_ADR, 0x00)  // _ADR: Address
            Name (_BBN, 0x3F)  // _BBN: BIOS Bus Number
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (PB1R, ResourceTemplate ()
                {
                    WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                        0x0000,             // Granularity
                        0x003F,             // Range Minimum
                        0x003F,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0001,             // Length
                        ,, _Y2E)
                })
                CreateWordField (PB1R, \_SB.P0B1._CRS._Y2E._MIN, BMIN)  // _MIN: Minimum Base Address
                CreateWordField (PB1R, \_SB.P0B1._CRS._Y2E._MAX, BMAX)  // _MAX: Maximum Base Address
                BMIN = _BBN /* \_SB_.P0B1._BBN */
                BMAX = _BBN /* \_SB_.P0B1._BBN */
                Return (PB1R) /* \_SB_.P0B1._CRS.PB1R */
            }

            Device (PEHB)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, "PEH2")  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (HBRS, ResourceTemplate ()
                    {
                        DWordMemory (ResourceConsumer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                            0x00000000,         // Granularity
                            0xE3F00000,         // Range Minimum
                            0xE3FFFFFF,         // Range Maximum
                            0x00000000,         // Translation Offset
                            0x00100000,         // Length
                            ,, , AddressRangeMemory, TypeStatic)
                    })
                    Debug = "PEHB _CRS"
                    Debug = HBRS /* \_SB_.P0B1.PEHB._CRS.HBRS */
                    Return (HBRS) /* \_SB_.P0B1.PEHB._CRS.HBRS */
                }
            }

            Device (VTD1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, "VT1")  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (VTIR, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00002000,         // Address Length
                            _Y2F)
                    })
                    CreateDWordField (VTIR, \_SB.P0B1.VTD1._CRS._Y2F._BAS, BASE)  // _BAS: Base Address
                    Local0 = \VTB0
                    Local0 &= 0xFFFFFFFE
                    BASE = Local0
                    Return (VTIR) /* \_SB_.P0B1.VTD1._CRS.VTIR */
                }
            }

            Device (VTD2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, "VT2")  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = \_SB.P0B1.SPAD.SR11
                    Local0 &= 0xFFFFFFFE
                    If ((Local0 == Zero))
                    {
                        Return (0x00)
                    }

                    If ((Local0 == 0xFFFFFFFE))
                    {
                        Return (0x00)
                    }

                    Return (0x0F)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (VTIR, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00002000,         // Address Length
                            _Y30)
                    })
                    CreateDWordField (VTIR, \_SB.P0B1.VTD2._CRS._Y30._BAS, BASE)  // _BAS: Base Address
                    Local0 = \_SB.P0B1.SPAD.SR11
                    Local0 &= 0xFFFFFFFE
                    BASE = Local0
                    Return (VTIR) /* \_SB_.P0B1.VTD2._CRS.VTIR */
                }
            }

            Device (VTD3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, "VT3")  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = \_SB.P0B1.SPAD.SR12
                    Local0 &= 0xFFFFFFFE
                    If ((Local0 == Zero))
                    {
                        Return (0x00)
                    }

                    If ((Local0 == 0xFFFFFFFE))
                    {
                        Return (0x00)
                    }

                    Return (0x0F)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (VTIR, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00002000,         // Address Length
                            _Y31)
                    })
                    CreateDWordField (VTIR, \_SB.P0B1.VTD3._CRS._Y31._BAS, BASE)  // _BAS: Base Address
                    Local0 = \_SB.P0B1.SPAD.SR12
                    Local0 &= 0xFFFFFFFE
                    BASE = Local0
                    Return (VTIR) /* \_SB_.P0B1.VTD3._CRS.VTIR */
                }
            }

            Device (VTD4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, "VT4")  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = \_SB.P0B1.SPAD.SR13
                    Local0 &= 0xFFFFFFFE
                    If ((Local0 == Zero))
                    {
                        Return (0x00)
                    }

                    If ((Local0 == 0xFFFFFFFE))
                    {
                        Return (0x00)
                    }

                    Return (0x0F)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (VTIR, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00002000,         // Address Length
                            _Y32)
                    })
                    CreateDWordField (VTIR, \_SB.P0B1.VTD4._CRS._Y32._BAS, BASE)  // _BAS: Base Address
                    Local0 = \_SB.P0B1.SPAD.SR13
                    Local0 &= 0xFFFFFFFE
                    BASE = Local0
                    Return (VTIR) /* \_SB_.P0B1.VTD4._CRS.VTIR */
                }
            }

            Device (SPAD)
            {
                Name (_ADR, 0x000B0003)  // _ADR: Address
                OperationRegion (STIC, PCI_Config, 0x50, 0x40)
                Field (STIC, DWordAcc, NoLock, Preserve)
                {
                    SR04,   32, 
                    SR05,   32, 
                    Offset (0x1C), 
                    SR11,   32, 
                    SR12,   32, 
                    SR13,   32, 
                    Offset (0x3C), 
                    S19I,   8, 
                    S19B,   8, 
                    S19D,   8
                }
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Debug = "Method _OSC"
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x00, CDW1)
                    CreateDWordField (Arg3, 0x04, CDW2)
                    CreateDWordField (Arg3, 0x08, CDW3)
                    Debug = "Revision "
                    Debug = Arg1
                    Debug = "Count "
                    Debug = Arg2
                    Debug = "Status  "
                    Debug = CDW1 /* \_SB_.P0B1._OSC.CDW1 */
                    Debug = "Support "
                    Debug = CDW2 /* \_SB_.P0B1._OSC.CDW2 */
                    Debug = "Control "
                    Debug = CDW3 /* \_SB_.P0B1._OSC.CDW3 */
                    SUPP = CDW2 /* \_SB_.P0B1._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.P0B1._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            Debug = "Turn off PCIE hotplug BIOS support"
                        }

                        If ((CTRL & 0x04))
                        {
                            Debug = "Turn off PME BIOS support"
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.P0B1.CTRL */
                }
                Else
                {
                    CDW1 |= 0x04
                }

                CDW1 &= 0x1F
                Debug = "Return Status  "
                Debug = CDW1 /* \_SB_.P0B1._OSC.CDW1 */
                Debug = "Return Support "
                Debug = CDW2 /* \_SB_.P0B1._OSC.CDW2 */
                Debug = "Return Control "
                Debug = CDW3 /* \_SB_.P0B1._OSC.CDW3 */
                Return (Arg3)
            }
        }

        Device (P1B1)
        {
            Name (P2BN, Buffer (0x01)
            {
                 0x3F                                             // ?
            })
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (0x7F)
            }

            Name (_PXM, 0x02)  // _PXM: Device Proximity
            Name (_UID, "PCI2")  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (HB7, ResourceTemplate ()
                {
                    WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                        0x0000,             // Granularity
                        0x007F,             // Range Minimum
                        0x007F,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0001,             // Length
                        ,, )
                })
                Return (HB7) /* \_SB_.P1B1._CRS.HB7_ */
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Debug = "Method _OSC"
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x00, CDW1)
                    CreateDWordField (Arg3, 0x04, CDW2)
                    CreateDWordField (Arg3, 0x08, CDW3)
                    Debug = "Revision "
                    Debug = Arg1
                    Debug = "Count "
                    Debug = Arg2
                    Debug = "Status  "
                    Debug = CDW1 /* \_SB_.P1B1._OSC.CDW1 */
                    Debug = "Support "
                    Debug = CDW2 /* \_SB_.P1B1._OSC.CDW2 */
                    Debug = "Control "
                    Debug = CDW3 /* \_SB_.P1B1._OSC.CDW3 */
                    SUPP = CDW2 /* \_SB_.P1B1._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.P1B1._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            Debug = "Turn off PCIE hotplug BIOS support"
                        }

                        If ((CTRL & 0x04))
                        {
                            Debug = "Turn off PME BIOS support"
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.P1B1.CTRL */
                }
                Else
                {
                    CDW1 |= 0x04
                }

                CDW1 &= 0x1F
                Debug = "Return Status  "
                Debug = CDW1 /* \_SB_.P1B1._OSC.CDW1 */
                Debug = "Return Support "
                Debug = CDW2 /* \_SB_.P1B1._OSC.CDW2 */
                Debug = "Return Control "
                Debug = CDW3 /* \_SB_.P1B1._OSC.CDW3 */
                Return (Arg3)
            }
        }

        Device (P2B1)
        {
            Name (P3BN, Buffer (0x01)
            {
                 0x7F                                             // .
            })
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (0xBF)
            }

            Name (_PXM, 0x03)  // _PXM: Device Proximity
            Name (_UID, "PCI3")  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (HBB, ResourceTemplate ()
                {
                    WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                        0x0000,             // Granularity
                        0x00BF,             // Range Minimum
                        0x00BF,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0001,             // Length
                        ,, )
                })
                Return (HBB) /* \_SB_.P2B1._CRS.HBB_ */
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Debug = "Method _OSC"
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x00, CDW1)
                    CreateDWordField (Arg3, 0x04, CDW2)
                    CreateDWordField (Arg3, 0x08, CDW3)
                    Debug = "Revision "
                    Debug = Arg1
                    Debug = "Count "
                    Debug = Arg2
                    Debug = "Status  "
                    Debug = CDW1 /* \_SB_.P2B1._OSC.CDW1 */
                    Debug = "Support "
                    Debug = CDW2 /* \_SB_.P2B1._OSC.CDW2 */
                    Debug = "Control "
                    Debug = CDW3 /* \_SB_.P2B1._OSC.CDW3 */
                    SUPP = CDW2 /* \_SB_.P2B1._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.P2B1._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            Debug = "Turn off PCIE hotplug BIOS support"
                        }

                        If ((CTRL & 0x04))
                        {
                            Debug = "Turn off PME BIOS support"
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.P2B1.CTRL */
                }
                Else
                {
                    CDW1 |= 0x04
                }

                CDW1 &= 0x1F
                Debug = "Return Status  "
                Debug = CDW1 /* \_SB_.P2B1._OSC.CDW1 */
                Debug = "Return Support "
                Debug = CDW2 /* \_SB_.P2B1._OSC.CDW2 */
                Debug = "Return Control "
                Debug = CDW3 /* \_SB_.P2B1._OSC.CDW3 */
                Return (Arg3)
            }
        }

        Device (P3B1)
        {
            Name (P4BN, Buffer (0x01)
            {
                 0xBF                                             // .
            })
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (0xFF)
            }

            Name (_PXM, 0x04)  // _PXM: Device Proximity
            Name (_UID, "PCI4")  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (HBF, ResourceTemplate ()
                {
                    WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                        0x0000,             // Granularity
                        0x00FF,             // Range Minimum
                        0x00FF,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0001,             // Length
                        ,, )
                })
                Return (HBF) /* \_SB_.P3B1._CRS.HBF_ */
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Debug = "Method _OSC"
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x00, CDW1)
                    CreateDWordField (Arg3, 0x04, CDW2)
                    CreateDWordField (Arg3, 0x08, CDW3)
                    Debug = "Revision "
                    Debug = Arg1
                    Debug = "Count "
                    Debug = Arg2
                    Debug = "Status  "
                    Debug = CDW1 /* \_SB_.P3B1._OSC.CDW1 */
                    Debug = "Support "
                    Debug = CDW2 /* \_SB_.P3B1._OSC.CDW2 */
                    Debug = "Control "
                    Debug = CDW3 /* \_SB_.P3B1._OSC.CDW3 */
                    SUPP = CDW2 /* \_SB_.P3B1._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.P3B1._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            Debug = "Turn off PCIE hotplug BIOS support"
                        }

                        If ((CTRL & 0x04))
                        {
                            Debug = "Turn off PME BIOS support"
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.P3B1.CTRL */
                }
                Else
                {
                    CDW1 |= 0x04
                }

                CDW1 &= 0x1F
                Debug = "Return Status  "
                Debug = CDW1 /* \_SB_.P3B1._OSC.CDW1 */
                Debug = "Return Support "
                Debug = CDW2 /* \_SB_.P3B1._OSC.CDW2 */
                Debug = "Return Control "
                Debug = CDW3 /* \_SB_.P3B1._OSC.CDW3 */
                Return (Arg3)
            }
        }

        Device (HPET)
        {
            Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            OperationRegion (HPOR, SystemMemory, 0xFED00000, 0x04)
            Field (HPOR, DWordAcc, NoLock, Preserve)
            {
                HPVI,   32
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((HPVI == 0xFFFFFFFF))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (HPRS, ResourceTemplate ()
                {
                    DWordMemory (ResourceConsumer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0xFED00000,         // Range Minimum
                        0xFED003FF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00000400,         // Length
                        ,, _Y33, AddressRangeMemory, TypeStatic)
                })
                Debug = "HPET _CRS"
                CreateDWordField (HPRS, \_SB.HPET._CRS._Y33._MAX, HMAX)  // _MAX: Maximum Base Address
                HMAX = (0xFED00000 + 0x0400)
                HMAX--
                Debug = HPRS /* \_SB_.HPET._CRS.HPRS */
                Return (HPRS) /* \_SB_.HPET._CRS.HPRS */
            }
        }

        Device (SRIO)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "SRIO")  // _UID: Unique ID
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */  0xF2, 0xF9, 0x7A, 0x0E, 0xA1, 0x44, 0x6F, 0x4C,  // ..z..DoL
                /* 0008 */  0xA4, 0xB0, 0xA7, 0x67, 0x84, 0x80, 0xDA, 0x61,  // ...g...a
                /* 0010 */  0x41, 0x41, 0x01, 0x02                           // AA..
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (WMAA, 3, NotSerialized)
            {
                Debug = Arg0
                Debug = Arg1
                Debug = Arg2
                Local0 = Arg2
                CreateWordField (Local0, 0x00, CPW0)
                CreateByteField (Local0, 0x02, CPB2)
                CreateByteField (Local0, 0x03, CPB3)
                CreateByteField (Local0, 0x04, CPB4)
                \_SB.P0B1.SPAD.S19B = CPB2 /* \_SB_.SRIO.WMAA.CPB2 */
                Local1 = CPB3 /* \_SB_.SRIO.WMAA.CPB3 */
                Local1 <<= 0x03
                \_SB.P0B1.SPAD.S19D = (Local1 | CPB4) /* \_SB_.SRIO.WMAA.CPB4 */
                If ((Arg1 == 0x01))
                {
                    Debug = "MethodID = 1"
                    \_SB.P0B1.SPAD.S19I = 0x01
                    SMI2 (0x40)
                }

                If ((Arg1 == 0x02))
                {
                    Debug = "MethodID = 2"
                    \_SB.P0B1.SPAD.S19I = 0x02
                    SMI2 (0x40)
                }

                If ((Arg1 == 0x03))
                {
                    Debug = "MethodID = 3"
                    \_SB.P0B1.SPAD.S19I = 0x03
                    SMI2 (0x40)
                }

                Return (\_SB.P0B1.SPAD.S19I)
            }
        }

        Field (\_SB.PCI0.ISA.LPCC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x60), 
            PRQ0,   8, 
            PRQ1,   8, 
            PRQ2,   8, 
            PRQ3,   8, 
            Offset (0x68), 
            PRQ4,   8, 
            PRQ5,   8, 
            PRQ6,   8, 
            PRQ7,   8
        }

        Device (LK00)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {3,4,5,6,7,11,14,15}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (MSTA (PRQ0))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PRQ0 = MDIS (PRQ0)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (MCRS (PRQ0))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                PRQ0 = MSRS (Arg0)
            }
        }

        Device (LK01)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {3,4,5,6,7,11,14,15}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (MSTA (PRQ1))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PRQ1 = MDIS (PRQ1)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (MCRS (PRQ1))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                PRQ1 = MSRS (Arg0)
            }
        }

        Device (LK02)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {3,4,5,6,7,11,14,15}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (MSTA (PRQ2))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PRQ2 = MDIS (PRQ2)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (MCRS (PRQ2))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                PRQ2 = MSRS (Arg0)
            }
        }

        Device (LK03)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {3,4,5,6,7,11,14,15}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (MSTA (PRQ3))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PRQ3 = MDIS (PRQ3)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (MCRS (PRQ3))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                PRQ3 = MSRS (Arg0)
            }
        }

        Device (LK04)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {3,4,5,6,7,11,14,15}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (MSTA (PRQ4))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PRQ4 = MDIS (PRQ4)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (MCRS (PRQ4))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                PRQ4 = MSRS (Arg0)
            }
        }

        Device (LK05)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {3,4,5,6,7,11,14,15}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (MSTA (PRQ5))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PRQ5 = MDIS (PRQ5)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (MCRS (PRQ5))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                PRQ5 = MSRS (Arg0)
            }
        }

        Device (LK06)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {3,4,5,6,7,11,14,15}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (MSTA (PRQ6))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PRQ6 = MDIS (PRQ6)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (MCRS (PRQ6))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                PRQ6 = MSRS (Arg0)
            }
        }

        Device (LK07)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {3,4,5,6,7,11,14,15}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (MSTA (PRQ7))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PRQ7 = MDIS (PRQ7)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (MCRS (PRQ7))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                PRQ7 = MSRS (Arg0)
            }
        }

        Method (MSTA, 1, NotSerialized)
        {
            Local0 = 0x0B
            If ((0x80 & Arg0))
            {
                Local0 = 0x09
            }

            Return (Local0)
        }

        Method (MDIS, 1, NotSerialized)
        {
            Local0 = (Arg0 | 0x80)
            Return (Local0)
        }

        Method (MCRS, 1, NotSerialized)
        {
            Name (CRSB, ResourceTemplate ()
            {
                IRQ (Level, ActiveLow, Shared, _Y34)
                    {}
            })
            CreateWordField (CRSB, \_SB.MCRS._Y34._INT, IQR)  // _INT: Interrupts
            Local0 = Arg0
            If ((Local0 >= 0x80))
            {
                IQR = Zero
            }
            Else
            {
                IQR = (One << Local0)
            }

            Return (CRSB) /* \_SB_.MCRS.CRSB */
        }

        Method (MSRS, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x01, IQR)
            FindSetRightBit (IQR, Local0)
            Local0--
            Return (Local0)
        }

        Field (\_SB.PCI0.ISA.LPCC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x80), 
            NSCA,   3, 
                ,   1, 
            NSCB,   3, 
            Offset (0x81)
        }

        Name (SBCM, ResourceTemplate ()
        {
            StartDependentFnNoPri ()
            {
                IO (Decode16,
                    0x03F8,             // Range Minimum
                    0x03F8,             // Range Maximum
                    0x08,               // Alignment
                    0x08,               // Length
                    )
                IRQNoFlags ()
                    {3,4,5,6,7,12}
            }
            StartDependentFnNoPri ()
            {
                IO (Decode16,
                    0x02F8,             // Range Minimum
                    0x02F8,             // Range Maximum
                    0x08,               // Alignment
                    0x08,               // Length
                    )
                IRQNoFlags ()
                    {3,4,5,6,7,12}
            }
            EndDependentFn ()
        })
        Method (COMD, 2, NotSerialized)
        {
            If (!Arg1)
            {
                If ((Arg0 == 0x03F8))
                {
                    NSCA = 0x00
                }

                If ((Arg0 == 0x02F8))
                {
                    NSCA = 0x01
                }

                If ((Arg0 == 0x0220))
                {
                    NSCA = 0x02
                }

                If ((Arg0 == 0x0228))
                {
                    NSCA = 0x03
                }

                If ((Arg0 == 0x0238))
                {
                    NSCA = 0x04
                }

                If ((Arg0 == 0x02E8))
                {
                    NSCA = 0x05
                }

                If ((Arg0 == 0x0338))
                {
                    NSCA = 0x06
                }

                If ((Arg0 == 0x03E8))
                {
                    NSCA = 0x07
                }
            }
            Else
            {
                If ((Arg0 == 0x03F8))
                {
                    NSCB = 0x00
                }

                If ((Arg0 == 0x02F8))
                {
                    NSCB = 0x01
                }

                If ((Arg0 == 0x0220))
                {
                    NSCB = 0x02
                }

                If ((Arg0 == 0x0228))
                {
                    NSCB = 0x03
                }

                If ((Arg0 == 0x0238))
                {
                    NSCB = 0x04
                }

                If ((Arg0 == 0x02E8))
                {
                    NSCB = 0x05
                }

                If ((Arg0 == 0x0338))
                {
                    NSCB = 0x06
                }

                If ((Arg0 == 0x03E8))
                {
                    NSCB = 0x07
                }
            }
        }
    }

    Scope (\_GPE)
    {
        OperationRegion (TCOS, SystemIO, 0x0864, 0x02)
        Field (TCOS, ByteAcc, NoLock, WriteAsZeros)
        {
            Offset (0x01), 
                ,   1, 
            DSCI,   1
        }

        Method (_L24, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.HEC2.HSCI ()
        }

        Method (_L06, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
        }

        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Debug = "_GPE.L0B "
            Local0 = 0x01
        }

        Method (_L16, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Debug = "GPE 16 occured"
            If ((\_SB.P0B1.SPAD.SR04 & 0x0400))
            {
                \_SB.P0B1.SPAD.SR04 &= ~0x0400
                Debug = "Notify CPC event"
                Notify (\_PR.CPU1, 0x83) // Guaranteed Change
                Notify (\_PR.CPU2, 0x83) // Guaranteed Change
                Notify (\_PR.CPU3, 0x83) // Guaranteed Change
                Notify (\_PR.CPU4, 0x83) // Guaranteed Change
                Notify (\_PR.CPU5, 0x83) // Guaranteed Change
                Notify (\_PR.CPU6, 0x83) // Guaranteed Change
                Notify (\_PR.CPU7, 0x83) // Guaranteed Change
                Notify (\_PR.CPU8, 0x83) // Guaranteed Change
                Notify (\_PR.CPU9, 0x83) // Guaranteed Change
                Notify (\_PR.CPUA, 0x83) // Guaranteed Change
                Notify (\_PR.CPUB, 0x83) // Guaranteed Change
                Notify (\_PR.CPUC, 0x83) // Guaranteed Change
                Notify (\_PR.CPUD, 0x83) // Guaranteed Change
                Notify (\_PR.CPUE, 0x83) // Guaranteed Change
                Notify (\_PR.CPUF, 0x83) // Guaranteed Change
                Notify (\_PR.CPUG, 0x83) // Guaranteed Change
                Notify (\_PR.CP17, 0x83) // Guaranteed Change
                Notify (\_PR.CP18, 0x83) // Guaranteed Change
                Notify (\_PR.CP19, 0x83) // Guaranteed Change
                Notify (\_PR.CP20, 0x83) // Guaranteed Change
                Notify (\_PR.CP21, 0x83) // Guaranteed Change
                Notify (\_PR.CP22, 0x83) // Guaranteed Change
                Notify (\_PR.CP23, 0x83) // Guaranteed Change
                Notify (\_PR.CP24, 0x83) // Guaranteed Change
                Notify (\_PR.CP25, 0x83) // Guaranteed Change
                Notify (\_PR.CP26, 0x83) // Guaranteed Change
                Notify (\_PR.CP27, 0x83) // Guaranteed Change
                Notify (\_PR.CP28, 0x83) // Guaranteed Change
                Notify (\_PR.CP29, 0x83) // Guaranteed Change
                Notify (\_PR.CP30, 0x83) // Guaranteed Change
                Notify (\_PR.CP31, 0x83) // Guaranteed Change
                Notify (\_PR.CP32, 0x83) // Guaranteed Change
                Notify (\_PR.CP33, 0x83) // Guaranteed Change
                Notify (\_PR.CP34, 0x83) // Guaranteed Change
                Notify (\_PR.CP35, 0x83) // Guaranteed Change
                Notify (\_PR.CP36, 0x83) // Guaranteed Change
                Notify (\_PR.CP37, 0x83) // Guaranteed Change
                Notify (\_PR.CP38, 0x83) // Guaranteed Change
                Notify (\_PR.CP39, 0x83) // Guaranteed Change
                Notify (\_PR.CP40, 0x83) // Guaranteed Change
                Notify (\_PR.CP41, 0x83) // Guaranteed Change
                Notify (\_PR.CP42, 0x83) // Guaranteed Change
                Notify (\_PR.CP43, 0x83) // Guaranteed Change
                Notify (\_PR.CP44, 0x83) // Guaranteed Change
                Notify (\_PR.CP45, 0x83) // Guaranteed Change
                Notify (\_PR.CP46, 0x83) // Guaranteed Change
                Notify (\_PR.CP47, 0x83) // Guaranteed Change
                Notify (\_PR.CP48, 0x83) // Guaranteed Change
                Notify (\_PR.CP49, 0x83) // Guaranteed Change
                Notify (\_PR.CP50, 0x83) // Guaranteed Change
                Notify (\_PR.CP51, 0x83) // Guaranteed Change
                Notify (\_PR.CP52, 0x83) // Guaranteed Change
                Notify (\_PR.CP53, 0x83) // Guaranteed Change
                Notify (\_PR.CP54, 0x83) // Guaranteed Change
                Notify (\_PR.CP55, 0x83) // Guaranteed Change
                Notify (\_PR.CP56, 0x83) // Guaranteed Change
                Notify (\_PR.CP57, 0x83) // Guaranteed Change
                Notify (\_PR.CP58, 0x83) // Guaranteed Change
                Notify (\_PR.CP59, 0x83) // Guaranteed Change
                Notify (\_PR.CP60, 0x83) // Guaranteed Change
                Notify (\_PR.CP61, 0x83) // Guaranteed Change
                Notify (\_PR.CP62, 0x83) // Guaranteed Change
                Notify (\_PR.CP63, 0x83) // Guaranteed Change
                Notify (\_PR.CP64, 0x83) // Guaranteed Change
                Notify (\_PR.CP65, 0x83) // Guaranteed Change
                Notify (\_PR.CP66, 0x83) // Guaranteed Change
                Notify (\_PR.CP67, 0x83) // Guaranteed Change
                Notify (\_PR.CP68, 0x83) // Guaranteed Change
                Notify (\_PR.CP69, 0x83) // Guaranteed Change
                Notify (\_PR.CP70, 0x83) // Guaranteed Change
                Notify (\_PR.CP71, 0x83) // Guaranteed Change
                Notify (\_PR.CP72, 0x83) // Guaranteed Change
                Notify (\_PR.CP73, 0x83) // Guaranteed Change
                Notify (\_PR.CP74, 0x83) // Guaranteed Change
                Notify (\_PR.CP75, 0x83) // Guaranteed Change
                Notify (\_PR.CP76, 0x83) // Guaranteed Change
                Notify (\_PR.CP77, 0x83) // Guaranteed Change
                Notify (\_PR.CP78, 0x83) // Guaranteed Change
                Notify (\_PR.CP79, 0x83) // Guaranteed Change
                Notify (\_PR.CP80, 0x83) // Guaranteed Change
                Notify (\_PR.CP81, 0x83) // Guaranteed Change
                Notify (\_PR.CP82, 0x83) // Guaranteed Change
                Notify (\_PR.CP83, 0x83) // Guaranteed Change
                Notify (\_PR.CP84, 0x83) // Guaranteed Change
                Notify (\_PR.CP85, 0x83) // Guaranteed Change
                Notify (\_PR.CP86, 0x83) // Guaranteed Change
                Notify (\_PR.CP87, 0x83) // Guaranteed Change
                Notify (\_PR.CP88, 0x83) // Guaranteed Change
                Notify (\_PR.CP89, 0x83) // Guaranteed Change
                Notify (\_PR.CP90, 0x83) // Guaranteed Change
                Notify (\_PR.CP91, 0x83) // Guaranteed Change
                Notify (\_PR.CP92, 0x83) // Guaranteed Change
                Notify (\_PR.CP93, 0x83) // Guaranteed Change
                Notify (\_PR.CP94, 0x83) // Guaranteed Change
                Notify (\_PR.CP95, 0x83) // Guaranteed Change
                Notify (\_PR.CP96, 0x83) // Guaranteed Change
            }

            If ((\_SB.P0B1.SPAD.SR04 & 0x20000000))
            {
                \_SB.P0B1.SPAD.SR04 &= ~0x20000000
                If ((\_SB.WSUP & 0x01))
                {
                    Debug = "Notify WHEA event"
                    Notify (\_SB.WHEA, 0x80) // Status Change
                }
            }

            If ((\_SB.P0B1.SPAD.SR04 & 0x10000000))
            {
                Debug = "_GPE Page Retire Request"
                \_SB.P0B1.SPAD.SR04 &= ~0x10000000
                If ((\_SB.WCAP & 0x40000000))
                {
                    Debug = "Notify Page Retire Request"
                    Notify (\_SB.WHEA, 0x81) // Information Change
                }
            }

            If ((\_SB.P0B1.SPAD.SR04 & 0x80000000))
            {
                Debug = "_GPE PMI Power Cap Change"
                \_SB.P0B1.SPAD.SR04 &= ~0x80000000
                Notify (\_SB.PMI0, 0x82) // Device-Specific Change
            }

            Return (Zero)
        }
    }
}



EINJ
----
[000h 0000   4]                    Signature : "EINJ"    [Error Injection table]
[004h 0004   4]                 Table Length : 00000190
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : F8
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "PE_SC3  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "DELL"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]      Injection Header Length : 0000000C
[028h 0040   1]                        Flags : 00
[029h 0041   3]                     Reserved : 000000
[02Ch 0044   4]        Injection Entry Count : 0000000B

[030h 0048   1]                       Action : 00 [Begin Operation]
[031h 0049   1]                  Instruction : 03 [Write Register Value]
[032h 0050   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[033h 0051   1]                     Reserved : 00

[034h 0052  12]              Register Region : [Generic Address Structure]
[034h 0052   1]                     Space ID : 00 [SystemMemory]
[035h 0053   1]                    Bit Width : 08
[036h 0054   1]                   Bit Offset : 00
[037h 0055   1]         Encoded Access Width : 01 [Byte Access:8]
[038h 0056   8]                      Address : 00000000BD2D007D

[040h 0064   8]                        Value : 0000000000000000
[048h 0072   8]                         Mask : 00000000000000FF

[050h 0080   1]                       Action : 01 [Get Trigger Table]
[051h 0081   1]                  Instruction : 00 [Read Register]
[052h 0082   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[053h 0083   1]                     Reserved : 00

[054h 0084  12]              Register Region : [Generic Address Structure]
[054h 0084   1]                     Space ID : 00 [SystemMemory]
[055h 0085   1]                    Bit Width : 40
[056h 0086   1]                   Bit Offset : 00
[057h 0087   1]         Encoded Access Width : 04 [QWord Access:64]
[058h 0088   8]                      Address : 00000000BD2D00AD

[060h 0096   8]                        Value : 0000000000000000
[068h 0104   8]                         Mask : 00000000FFFFFFFF

[070h 0112   1]                       Action : 02 [Set Error Type]
[071h 0113   1]                  Instruction : 02 [Write Register]
[072h 0114   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[073h 0115   1]                     Reserved : 00

[074h 0116  12]              Register Region : [Generic Address Structure]
[074h 0116   1]                     Space ID : 00 [SystemMemory]
[075h 0117   1]                    Bit Width : 20
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 03 [DWord Access:32]
[078h 0120   8]                      Address : 00000000BD2D0085

[080h 0128   8]                        Value : 0000000000000000
[088h 0136   8]                         Mask : 00000000FFFFFFFF

[090h 0144   1]                       Action : 08 [Set Error Type With Address]
[091h 0145   1]                  Instruction : 02 [Write Register]
[092h 0146   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[093h 0147   1]                     Reserved : 00

[094h 0148  12]              Register Region : [Generic Address Structure]
[094h 0148   1]                     Space ID : 00 [SystemMemory]
[095h 0149   1]                    Bit Width : 00
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 03 [DWord Access:32]
[098h 0152   8]                      Address : 00000000BD2D0085

[0A0h 0160   8]                        Value : 0000000000000000
[0A8h 0168   8]                         Mask : 00000000FFFFFFFF

[0B0h 0176   1]                       Action : 03 [Get Error Type]
[0B1h 0177   1]                  Instruction : 00 [Read Register]
[0B2h 0178   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0B3h 0179   1]                     Reserved : 00

[0B4h 0180  12]              Register Region : [Generic Address Structure]
[0B4h 0180   1]                     Space ID : 00 [SystemMemory]
[0B5h 0181   1]                    Bit Width : 20
[0B6h 0182   1]                   Bit Offset : 00
[0B7h 0183   1]         Encoded Access Width : 03 [DWord Access:32]
[0B8h 0184   8]                      Address : 00000000BD2D0081

[0C0h 0192   8]                        Value : 0000000000000000
[0C8h 0200   8]                         Mask : 00000000FFFFFFFF

[0D0h 0208   1]                       Action : 04 [End Operation]
[0D1h 0209   1]                  Instruction : 03 [Write Register Value]
[0D2h 0210   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0D3h 0211   1]                     Reserved : 00

[0D4h 0212  12]              Register Region : [Generic Address Structure]
[0D4h 0212   1]                     Space ID : 00 [SystemMemory]
[0D5h 0213   1]                    Bit Width : 08
[0D6h 0214   1]                   Bit Offset : 00
[0D7h 0215   1]         Encoded Access Width : 01 [Byte Access:8]
[0D8h 0216   8]                      Address : 00000000BD2D007D

[0E0h 0224   8]                        Value : 0000000000000004
[0E8h 0232   8]                         Mask : 00000000000000FF

[0F0h 0240   1]                       Action : 05 [Execute Operation]
[0F1h 0241   1]                  Instruction : 03 [Write Register Value]
[0F2h 0242   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0F3h 0243   1]                     Reserved : 00

[0F4h 0244  12]              Register Region : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 08
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 01 [Byte Access:8]
[0F8h 0248   8]                      Address : 00000000BD2D007E

[100h 0256   8]                        Value : 0000000000000000
[108h 0264   8]                         Mask : 00000000000000FF

[110h 0272   1]                       Action : 05 [Execute Operation]
[111h 0273   1]                  Instruction : 03 [Write Register Value]
[112h 0274   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[113h 0275   1]                     Reserved : 00

[114h 0276  12]              Register Region : [Generic Address Structure]
[114h 0276   1]                     Space ID : 00 [SystemMemory]
[115h 0277   1]                    Bit Width : 08
[116h 0278   1]                   Bit Offset : 00
[117h 0279   1]         Encoded Access Width : 01 [Byte Access:8]
[118h 0280   8]                      Address : 00000000BD2D007F

[120h 0288   8]                        Value : 0000000000000000
[128h 0296   8]                         Mask : 00000000000000FF

[130h 0304   1]                       Action : 05 [Execute Operation]
[131h 0305   1]                  Instruction : 03 [Write Register Value]
[132h 0306   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[133h 0307   1]                     Reserved : 00

[134h 0308  12]              Register Region : [Generic Address Structure]
[134h 0308   1]                     Space ID : 00 [SystemMemory]
[135h 0309   1]                    Bit Width : 08
[136h 0310   1]                   Bit Offset : 00
[137h 0311   1]         Encoded Access Width : 01 [Byte Access:8]
[138h 0312   8]                      Address : 00000000BD2D007D

[140h 0320   8]                        Value : 0000000000000005
[148h 0328   8]                         Mask : 00000000000000FF

[150h 0336   1]                       Action : 06 [Check Busy Status]
[151h 0337   1]                  Instruction : 01 [Read Register Value]
[152h 0338   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[153h 0339   1]                     Reserved : 00

[154h 0340  12]              Register Region : [Generic Address Structure]
[154h 0340   1]                     Space ID : 00 [SystemMemory]
[155h 0341   1]                    Bit Width : 08
[156h 0342   1]                   Bit Offset : 00
[157h 0343   1]         Encoded Access Width : 01 [Byte Access:8]
[158h 0344   8]                      Address : 00000000BD2D007E

[160h 0352   8]                        Value : 0000000000000001
[168h 0360   8]                         Mask : 00000000000000FF

[170h 0368   1]                       Action : 07 [Get Command Status]
[171h 0369   1]                  Instruction : 00 [Read Register]
[172h 0370   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[173h 0371   1]                     Reserved : 00

[174h 0372  12]              Register Region : [Generic Address Structure]
[174h 0372   1]                     Space ID : 00 [SystemMemory]
[175h 0373   1]                    Bit Width : 08
[176h 0374   1]                   Bit Offset : 00
[177h 0375   1]         Encoded Access Width : 01 [Byte Access:8]
[178h 0376   8]                      Address : 00000000BD2D007F

[180h 0384   8]                        Value : 0000000000000000
[188h 0392   8]                         Mask : 00000000000000FF

Raw Table Data: Length 400 (0x190)

    0000: 45 49 4E 4A 90 01 00 00 01 F8 44 45 4C 4C 20 20  // EINJ......DELL  
    0010: 50 45 5F 53 43 33 20 20 01 00 00 00 44 45 4C 4C  // PE_SC3  ....DELL
    0020: 01 00 00 00 0C 00 00 00 00 00 00 00 0B 00 00 00  // ................
    0030: 00 03 00 00 00 08 00 01 7D 00 2D BD 00 00 00 00  // ........}.-.....
    0040: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0050: 01 00 00 00 00 40 00 04 AD 00 2D BD 00 00 00 00  // .....@....-.....
    0060: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0070: 02 02 00 00 00 20 00 03 85 00 2D BD 00 00 00 00  // ..... ....-.....
    0080: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    0090: 08 02 00 00 00 00 00 03 85 00 2D BD 00 00 00 00  // ..........-.....
    00A0: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    00B0: 03 00 00 00 00 20 00 03 81 00 2D BD 00 00 00 00  // ..... ....-.....
    00C0: 00 00 00 00 00 00 00 00 FF FF FF FF 00 00 00 00  // ................
    00D0: 04 03 00 00 00 08 00 01 7D 00 2D BD 00 00 00 00  // ........}.-.....
    00E0: 04 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    00F0: 05 03 00 00 00 08 00 01 7E 00 2D BD 00 00 00 00  // ........~.-.....
    0100: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0110: 05 03 00 00 00 08 00 01 7F 00 2D BD 00 00 00 00  // ..........-.....
    0120: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0130: 05 03 00 00 00 08 00 01 7D 00 2D BD 00 00 00 00  // ........}.-.....
    0140: 05 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0150: 06 01 00 00 00 08 00 01 7E 00 2D BD 00 00 00 00  // ........~.-.....
    0160: 01 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0170: 07 00 00 00 00 08 00 01 7F 00 2D BD 00 00 00 00  // ..........-.....
    0180: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................


ERST
----
[000h 0000   4]                    Signature : "ERST"    [Error Record Serialization Table]
[004h 0004   4]                 Table Length : 00000270
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : FD
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "PE_SC3  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "DELL"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]  Serialization Header Length : 0000000C
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   4]      Instruction Entry Count : 00000012

[030h 0048   1]                       Action : 00 [Begin Write Operation]
[031h 0049   1]                  Instruction : 03 [Write Register Value]
[032h 0050   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[033h 0051   1]                     Reserved : 00

[034h 0052  12]              Register Region : [Generic Address Structure]
[034h 0052   1]                     Space ID : 00 [SystemMemory]
[035h 0053   1]                    Bit Width : 08
[036h 0054   1]                   Bit Offset : 00
[037h 0055   1]         Encoded Access Width : 01 [Byte Access:8]
[038h 0056   8]                      Address : 00000000BD2D0000

[040h 0064   8]                        Value : 0000000000000000
[048h 0072   8]                         Mask : 00000000000000FF

[050h 0080   1]                       Action : 01 [Begin Read Operation]
[051h 0081   1]                  Instruction : 03 [Write Register Value]
[052h 0082   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[053h 0083   1]                     Reserved : 00

[054h 0084  12]              Register Region : [Generic Address Structure]
[054h 0084   1]                     Space ID : 00 [SystemMemory]
[055h 0085   1]                    Bit Width : 08
[056h 0086   1]                   Bit Offset : 00
[057h 0087   1]         Encoded Access Width : 01 [Byte Access:8]
[058h 0088   8]                      Address : 00000000BD2D0000

[060h 0096   8]                        Value : 0000000000000001
[068h 0104   8]                         Mask : 00000000000000FF

[070h 0112   1]                       Action : 02 [Begin Clear Operation]
[071h 0113   1]                  Instruction : 03 [Write Register Value]
[072h 0114   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[073h 0115   1]                     Reserved : 00

[074h 0116  12]              Register Region : [Generic Address Structure]
[074h 0116   1]                     Space ID : 00 [SystemMemory]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 01 [Byte Access:8]
[078h 0120   8]                      Address : 00000000BD2D0000

[080h 0128   8]                        Value : 0000000000000002
[088h 0136   8]                         Mask : 00000000000000FF

[090h 0144   1]                       Action : 03 [End Operation]
[091h 0145   1]                  Instruction : 03 [Write Register Value]
[092h 0146   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[093h 0147   1]                     Reserved : 00

[094h 0148  12]              Register Region : [Generic Address Structure]
[094h 0148   1]                     Space ID : 00 [SystemMemory]
[095h 0149   1]                    Bit Width : 08
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 01 [Byte Access:8]
[098h 0152   8]                      Address : 00000000BD2D0000

[0A0h 0160   8]                        Value : 0000000000000003
[0A8h 0168   8]                         Mask : 00000000000000FF

[0B0h 0176   1]                       Action : 04 [Set Record Offset]
[0B1h 0177   1]                  Instruction : 02 [Write Register]
[0B2h 0178   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0B3h 0179   1]                     Reserved : 00

[0B4h 0180  12]              Register Region : [Generic Address Structure]
[0B4h 0180   1]                     Space ID : 00 [SystemMemory]
[0B5h 0181   1]                    Bit Width : 10
[0B6h 0182   1]                   Bit Offset : 00
[0B7h 0183   1]         Encoded Access Width : 02 [Word Access:16]
[0B8h 0184   8]                      Address : 00000000BD2D0002

[0C0h 0192   8]                        Value : 0000000000000000
[0C8h 0200   8]                         Mask : 000000000000FFFF

[0D0h 0208   1]                       Action : 05 [Execute Operation]
[0D1h 0209   1]                  Instruction : 03 [Write Register Value]
[0D2h 0210   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0D3h 0211   1]                     Reserved : 00

[0D4h 0212  12]              Register Region : [Generic Address Structure]
[0D4h 0212   1]                     Space ID : 00 [SystemMemory]
[0D5h 0213   1]                    Bit Width : 08
[0D6h 0214   1]                   Bit Offset : 00
[0D7h 0215   1]         Encoded Access Width : 01 [Byte Access:8]
[0D8h 0216   8]                      Address : 00000000BD2D0015

[0E0h 0224   8]                        Value : 0000000000000001
[0E8h 0232   8]                         Mask : 00000000000000FF

[0F0h 0240   1]                       Action : 05 [Execute Operation]
[0F1h 0241   1]                  Instruction : 03 [Write Register Value]
[0F2h 0242   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0F3h 0243   1]                     Reserved : 00

[0F4h 0244  12]              Register Region : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 08
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 01 [Byte Access:8]
[0F8h 0248   8]                      Address : 00000000BD2D0016

[100h 0256   8]                        Value : 0000000000000005
[108h 0264   8]                         Mask : 00000000000000FF

[110h 0272   1]                       Action : 05 [Execute Operation]
[111h 0273   1]                  Instruction : 03 [Write Register Value]
[112h 0274   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[113h 0275   1]                     Reserved : 00

[114h 0276  12]              Register Region : [Generic Address Structure]
[114h 0276   1]                     Space ID : 01 [SystemIO]
[115h 0277   1]                    Bit Width : 08
[116h 0278   1]                   Bit Offset : 00
[117h 0279   1]         Encoded Access Width : 01 [Byte Access:8]
[118h 0280   8]                      Address : 00000000000000B2

[120h 0288   8]                        Value : 0000000000000079
[128h 0296   8]                         Mask : 00000000000000FF

[130h 0304   1]                       Action : 06 [Check Busy Status]
[131h 0305   1]                  Instruction : 01 [Read Register Value]
[132h 0306   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[133h 0307   1]                     Reserved : 00

[134h 0308  12]              Register Region : [Generic Address Structure]
[134h 0308   1]                     Space ID : 00 [SystemMemory]
[135h 0309   1]                    Bit Width : 08
[136h 0310   1]                   Bit Offset : 00
[137h 0311   1]         Encoded Access Width : 01 [Byte Access:8]
[138h 0312   8]                      Address : 00000000BD2D0015

[140h 0320   8]                        Value : 0000000000000001
[148h 0328   8]                         Mask : 00000000000000FF

[150h 0336   1]                       Action : 07 [Get Command Status]
[151h 0337   1]                  Instruction : 00 [Read Register]
[152h 0338   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[153h 0339   1]                     Reserved : 00

[154h 0340  12]              Register Region : [Generic Address Structure]
[154h 0340   1]                     Space ID : 00 [SystemMemory]
[155h 0341   1]                    Bit Width : 08
[156h 0342   1]                   Bit Offset : 00
[157h 0343   1]         Encoded Access Width : 01 [Byte Access:8]
[158h 0344   8]                      Address : 00000000BD2D0014

[160h 0352   8]                        Value : 0000000000000000
[168h 0360   8]                         Mask : 00000000000000FF

[170h 0368   1]                       Action : 08 [Get Record Identifier]
[171h 0369   1]                  Instruction : 00 [Read Register]
[172h 0370   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[173h 0371   1]                     Reserved : 00

[174h 0372  12]              Register Region : [Generic Address Structure]
[174h 0372   1]                     Space ID : 00 [SystemMemory]
[175h 0373   1]                    Bit Width : 40
[176h 0374   1]                   Bit Offset : 00
[177h 0375   1]         Encoded Access Width : 04 [QWord Access:64]
[178h 0376   8]                      Address : 00000000BD2D000C

[180h 0384   8]                        Value : 0000000000000000
[188h 0392   8]                         Mask : FFFFFFFFFFFFFFFF

[190h 0400   1]                       Action : 09 [Set Record Identifier]
[191h 0401   1]                  Instruction : 02 [Write Register]
[192h 0402   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[193h 0403   1]                     Reserved : 00

[194h 0404  12]              Register Region : [Generic Address Structure]
[194h 0404   1]                     Space ID : 00 [SystemMemory]
[195h 0405   1]                    Bit Width : 40
[196h 0406   1]                   Bit Offset : 00
[197h 0407   1]         Encoded Access Width : 04 [QWord Access:64]
[198h 0408   8]                      Address : 00000000BD2D000C

[1A0h 0416   8]                        Value : 0000000000000000
[1A8h 0424   8]                         Mask : FFFFFFFFFFFFFFFF

[1B0h 0432   1]                       Action : 0A [Get Record Count]
[1B1h 0433   1]                  Instruction : 00 [Read Register]
[1B2h 0434   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[1B3h 0435   1]                     Reserved : 00

[1B4h 0436  12]              Register Region : [Generic Address Structure]
[1B4h 0436   1]                     Space ID : 00 [SystemMemory]
[1B5h 0437   1]                    Bit Width : 08
[1B6h 0438   1]                   Bit Offset : 00
[1B7h 0439   1]         Encoded Access Width : 01 [Byte Access:8]
[1B8h 0440   8]                      Address : 00000000BD2D0001

[1C0h 0448   8]                        Value : 0000000000000000
[1C8h 0456   8]                         Mask : 00000000000000FF

[1D0h 0464   1]                       Action : 0D [Get Error Address Range]
[1D1h 0465   1]                  Instruction : 00 [Read Register]
[1D2h 0466   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[1D3h 0467   1]                     Reserved : 00

[1D4h 0468  12]              Register Region : [Generic Address Structure]
[1D4h 0468   1]                     Space ID : 00 [SystemMemory]
[1D5h 0469   1]                    Bit Width : 40
[1D6h 0470   1]                   Bit Offset : 00
[1D7h 0471   1]         Encoded Access Width : 04 [QWord Access:64]
[1D8h 0472   8]                      Address : 00000000BD2D0071

[1E0h 0480   8]                        Value : 0000000000000000
[1E8h 0488   8]                         Mask : FFFFFFFFFFFFFFFF

[1F0h 0496   1]                       Action : 0E [Get Error Address Length]
[1F1h 0497   1]                  Instruction : 00 [Read Register]
[1F2h 0498   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[1F3h 0499   1]                     Reserved : 00

[1F4h 0500  12]              Register Region : [Generic Address Structure]
[1F4h 0500   1]                     Space ID : 00 [SystemMemory]
[1F5h 0501   1]                    Bit Width : 10
[1F6h 0502   1]                   Bit Offset : 00
[1F7h 0503   1]         Encoded Access Width : 02 [Word Access:16]
[1F8h 0504   8]                      Address : 00000000BD2D0079

[200h 0512   8]                        Value : 0000000000000000
[208h 0520   8]                         Mask : 000000000000FFFF

[210h 0528   1]                       Action : 0F [Get Error Attributes]
[211h 0529   1]                  Instruction : 00 [Read Register]
[212h 0530   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[213h 0531   1]                     Reserved : 00

[214h 0532  12]              Register Region : [Generic Address Structure]
[214h 0532   1]                     Space ID : 00 [SystemMemory]
[215h 0533   1]                    Bit Width : 10
[216h 0534   1]                   Bit Offset : 00
[217h 0535   1]         Encoded Access Width : 02 [Word Access:16]
[218h 0536   8]                      Address : 00000000BD2D007B

[220h 0544   8]                        Value : 0000000000000000
[228h 0552   8]                         Mask : 000000000000FFFF

[230h 0560   1]                       Action : 0B [Begin Dummy Write]
[231h 0561   1]                  Instruction : 03 [Write Register Value]
[232h 0562   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[233h 0563   1]                     Reserved : 00

[234h 0564  12]              Register Region : [Generic Address Structure]
[234h 0564   1]                     Space ID : 00 [SystemMemory]
[235h 0565   1]                    Bit Width : 08
[236h 0566   1]                   Bit Offset : 00
[237h 0567   1]         Encoded Access Width : 01 [Byte Access:8]
[238h 0568   8]                      Address : 00000000BD2D0016

[240h 0576   8]                        Value : 000000000000000B
[248h 0584   8]                         Mask : 00000000000000FF

[250h 0592   1]                       Action : 0B [Begin Dummy Write]
[251h 0593   1]                  Instruction : 03 [Write Register Value]
[252h 0594   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[253h 0595   1]                     Reserved : 00

[254h 0596  12]              Register Region : [Generic Address Structure]
[254h 0596   1]                     Space ID : 00 [SystemMemory]
[255h 0597   1]                    Bit Width : 08
[256h 0598   1]                   Bit Offset : 00
[257h 0599   1]         Encoded Access Width : 01 [Byte Access:8]
[258h 0600   8]                      Address : 00000000BD2D0016

[260h 0608   8]                        Value : 0000000000000000
[268h 0616   8]                         Mask : 00000000000000FF

Raw Table Data: Length 624 (0x270)

    0000: 45 52 53 54 70 02 00 00 01 FD 44 45 4C 4C 20 20  // ERSTp.....DELL  
    0010: 50 45 5F 53 43 33 20 20 01 00 00 00 44 45 4C 4C  // PE_SC3  ....DELL
    0020: 01 00 00 00 0C 00 00 00 00 00 00 00 12 00 00 00  // ................
    0030: 00 03 00 00 00 08 00 01 00 00 2D BD 00 00 00 00  // ..........-.....
    0040: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0050: 01 03 00 00 00 08 00 01 00 00 2D BD 00 00 00 00  // ..........-.....
    0060: 01 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0070: 02 03 00 00 00 08 00 01 00 00 2D BD 00 00 00 00  // ..........-.....
    0080: 02 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0090: 03 03 00 00 00 08 00 01 00 00 2D BD 00 00 00 00  // ..........-.....
    00A0: 03 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    00B0: 04 02 00 00 00 10 00 02 02 00 2D BD 00 00 00 00  // ..........-.....
    00C0: 00 00 00 00 00 00 00 00 FF FF 00 00 00 00 00 00  // ................
    00D0: 05 03 00 00 00 08 00 01 15 00 2D BD 00 00 00 00  // ..........-.....
    00E0: 01 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    00F0: 05 03 00 00 00 08 00 01 16 00 2D BD 00 00 00 00  // ..........-.....
    0100: 05 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0110: 05 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    0120: 79 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // y...............
    0130: 06 01 00 00 00 08 00 01 15 00 2D BD 00 00 00 00  // ..........-.....
    0140: 01 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0150: 07 00 00 00 00 08 00 01 14 00 2D BD 00 00 00 00  // ..........-.....
    0160: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0170: 08 00 00 00 00 40 00 04 0C 00 2D BD 00 00 00 00  // .....@....-.....
    0180: 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF  // ................
    0190: 09 02 00 00 00 40 00 04 0C 00 2D BD 00 00 00 00  // .....@....-.....
    01A0: 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF  // ................
    01B0: 0A 00 00 00 00 08 00 01 01 00 2D BD 00 00 00 00  // ..........-.....
    01C0: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    01D0: 0D 00 00 00 00 40 00 04 71 00 2D BD 00 00 00 00  // .....@..q.-.....
    01E0: 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF  // ................
    01F0: 0E 00 00 00 00 10 00 02 79 00 2D BD 00 00 00 00  // ........y.-.....
    0200: 00 00 00 00 00 00 00 00 FF FF 00 00 00 00 00 00  // ................
    0210: 0F 00 00 00 00 10 00 02 7B 00 2D BD 00 00 00 00  // ........{.-.....
    0220: 00 00 00 00 00 00 00 00 FF FF 00 00 00 00 00 00  // ................
    0230: 0B 03 00 00 00 08 00 01 16 00 2D BD 00 00 00 00  // ..........-.....
    0240: 0B 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0250: 0B 03 00 00 00 08 00 01 16 00 2D BD 00 00 00 00  // ..........-.....
    0260: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................


FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 4B
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "PE_SC3  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "DELL"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]                 FACS Address : BD313000
[028h 0040   4]                 DSDT Address : BD2FC000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 04 [Enterprise Server]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : 70
[035h 0053   1]           ACPI Disable Value : 71
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 90
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000850
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 10
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 90
[060h 0096   2]                   C2 Latency : 01F4
[062h 0098   2]                   C3 Latency : 1388
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 00
[069h 0105   1]             Duty Cycle Width : 00
[06Ah 0106   1]          RTC Day Alarm Index : 00
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0010
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000400A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 0
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 1
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 00000000BD313000
[08Ch 0140   8]                 DSDT Address : 00000000BD2FC000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 00 [SystemMemory]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000000850

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 80
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 00 [SystemMemory]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

    0000: 46 41 43 50 F4 00 00 00 03 4B 44 45 4C 4C 20 20  // FACP.....KDELL  
    0010: 50 45 5F 53 43 33 20 20 01 00 00 00 44 45 4C 4C  // PE_SC3  ....DELL
    0020: 01 00 00 00 00 30 31 BD 00 C0 2F BD 00 04 09 00  // .....01.../.....
    0030: B2 00 00 00 70 71 00 90 00 08 00 00 00 00 00 00  // ....pq..........
    0040: 04 08 00 00 00 00 00 00 50 08 00 00 08 08 00 00  // ........P.......
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 10 00 00 90  //  ...............
    0060: F4 01 88 13 00 00 00 00 00 00 00 00 32 10 00 00  // ............2...
    0070: A5 00 04 00 01 08 00 00 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 00 00 30 31 BD 00 00 00 00 00 C0 2F BD  // .....01......./.
    0090: 00 00 00 00 01 20 00 00 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 10 00 00  // ................
    00B0: 04 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 00 50 08 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 00 08 08 00 00 00 00 00 00 01 80 00 00  // . ..............
    00E0: 20 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00  //  ...............
    00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HEST
----
[000h 0000   4]                    Signature : "HEST"    [Hardware Error Source Table]
[004h 0004   4]                 Table Length : 00000620
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : DB
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "PE_SC3  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "DELL"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]           Error Source Count : 0000000D

[028h 0040   2]                Subtable Type : 0006 [PCI Express Root Port AER]
[02Ah 0042   2]                    Source Id : 00E0
[02Ch 0044   2]                     Reserved : 0000
[02Eh 0046   1]        Flags (decoded below) : 03
                              Firmware First : 1
                                      Global : 1
[02Fh 0047   1]                      Enabled : 01
[030h 0048   4]       Records To Preallocate : 00000001
[034h 0052   4]      Max Sections Per Record : 00000005
[038h 0056   4]                          Bus : 00000000
[03Ch 0060   2]                       Device : 0000
[03Eh 0062   2]                     Function : 0000
[040h 0064   2]                DeviceControl : 0004
[042h 0066   2]                     Reserved : 0000
[044h 0068   4]           Uncorrectable Mask : 00318000
[048h 0072   4]       Uncorrectable Severity : 004E7030
[04Ch 0076   4]             Correctable Mask : 0000F1C1
[050h 0080   4]        Advanced Capabilities : 00000000
[054h 0084   4]           Root Error Command : 00000000

[058h 0088   2]                Subtable Type : 0007 [PCI Express AER (AER Endpoint)]
[05Ah 0090   2]                    Source Id : 00E1
[05Ch 0092   2]                     Reserved : 0000
[05Eh 0094   1]        Flags (decoded below) : 03
                              Firmware First : 1
                                      Global : 1
[05Fh 0095   1]                      Enabled : 01
[060h 0096   4]       Records To Preallocate : 00000001
[064h 0100   4]      Max Sections Per Record : 00000005
[068h 0104   4]                          Bus : 00000000
[06Ch 0108   2]                       Device : 0000
[06Eh 0110   2]                     Function : 0000
[070h 0112   2]                DeviceControl : 0004
[072h 0114   2]                     Reserved : 0000
[074h 0116   4]           Uncorrectable Mask : 00318000
[078h 0120   4]       Uncorrectable Severity : 004E7030
[07Ch 0124   4]             Correctable Mask : 0000F1C1
[080h 0128   4]        Advanced Capabilities : 00000000

[084h 0132   2]                Subtable Type : 0008 [PCI Express/PCI-X Bridge AER]
[086h 0134   2]                    Source Id : 00E2
[088h 0136   2]                     Reserved : 0000
[08Ah 0138   1]        Flags (decoded below) : 03
                              Firmware First : 1
                                      Global : 1
[08Bh 0139   1]                      Enabled : 01
[08Ch 0140   4]       Records To Preallocate : 00000001
[090h 0144   4]      Max Sections Per Record : 00000005
[094h 0148   4]                          Bus : 00000000
[098h 0152   2]                       Device : 0000
[09Ah 0154   2]                     Function : 0000
[09Ch 0156   2]                DeviceControl : 0004
[09Eh 0158   2]                     Reserved : 0000
[0A0h 0160   4]           Uncorrectable Mask : 00318000
[0A4h 0164   4]       Uncorrectable Severity : 004E7030
[0A8h 0168   4]             Correctable Mask : 0000F1C1
[0ACh 0172   4]        Advanced Capabilities : 00000000
[0B0h 0176   4]       2nd Uncorrectable Mask : 0000243F
[0B4h 0180   4]   2nd Uncorrectable Severity : 00001BC0
[0B8h 0184   4]    2nd Advanced Capabilities : 00000000

[0BCh 0188   2]                Subtable Type : 0009 [Generic Hardware Error Source]
[0BEh 0190   2]                    Source Id : 80E0
[0C0h 0192   2]            Related Source Id : 00E0
[0C2h 0194   1]                     Reserved : 00
[0C3h 0195   1]                      Enabled : 01
[0C4h 0196   4]       Records To Preallocate : 00000001
[0C8h 0200   4]      Max Sections Per Record : 00000005
[0CCh 0204   4]          Max Raw Data Length : 00000400

[0D0h 0208  12]         Error Status Address : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 00 [SystemMemory]
[0D1h 0209   1]                    Bit Width : 40
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 04 [QWord Access:64]
[0D4h 0212   8]                      Address : 00000000BD2D0028

[0DCh 0220  28]                       Notify : [Hardware Error Notification Structure]
[0DCh 0220   1]                  Notify Type : 04 [NMI]
[0DDh 0221   1]                Notify Length : 1C
[0DEh 0222   2]   Configuration Write Enable : 0000
[0E0h 0224   4]                 PollInterval : 0000EA60
[0E4h 0228   4]                       Vector : 00000000
[0E8h 0232   4]      Polling Threshold Value : 00000002
[0ECh 0236   4]     Polling Threshold Window : 00000002
[0F0h 0240   4]        Error Threshold Value : 00000001
[0F4h 0244   4]       Error Threshold Window : 00000001

[0F8h 0248   4]    Error Status Block Length : 00000400

[0FCh 0252   2]                Subtable Type : 0009 [Generic Hardware Error Source]
[0FEh 0254   2]                    Source Id : 80E1
[100h 0256   2]            Related Source Id : 00E1
[102h 0258   1]                     Reserved : 00
[103h 0259   1]                      Enabled : 01
[104h 0260   4]       Records To Preallocate : 00000001
[108h 0264   4]      Max Sections Per Record : 00000005
[10Ch 0268   4]          Max Raw Data Length : 00000400

[110h 0272  12]         Error Status Address : [Generic Address Structure]
[110h 0272   1]                     Space ID : 00 [SystemMemory]
[111h 0273   1]                    Bit Width : 40
[112h 0274   1]                   Bit Offset : 00
[113h 0275   1]         Encoded Access Width : 04 [QWord Access:64]
[114h 0276   8]                      Address : 00000000BD2D0030

[11Ch 0284  28]                       Notify : [Hardware Error Notification Structure]
[11Ch 0284   1]                  Notify Type : 04 [NMI]
[11Dh 0285   1]                Notify Length : 1C
[11Eh 0286   2]   Configuration Write Enable : 0000
[120h 0288   4]                 PollInterval : 0000EA60
[124h 0292   4]                       Vector : 00000000
[128h 0296   4]      Polling Threshold Value : 00000002
[12Ch 0300   4]     Polling Threshold Window : 00000002
[130h 0304   4]        Error Threshold Value : 00000001
[134h 0308   4]       Error Threshold Window : 00000001

[138h 0312   4]    Error Status Block Length : 00000400

[13Ch 0316   2]                Subtable Type : 0009 [Generic Hardware Error Source]
[13Eh 0318   2]                    Source Id : 80E2
[140h 0320   2]            Related Source Id : 00E2
[142h 0322   1]                     Reserved : 00
[143h 0323   1]                      Enabled : 01
[144h 0324   4]       Records To Preallocate : 00000001
[148h 0328   4]      Max Sections Per Record : 00000005
[14Ch 0332   4]          Max Raw Data Length : 00000400

[150h 0336  12]         Error Status Address : [Generic Address Structure]
[150h 0336   1]                     Space ID : 00 [SystemMemory]
[151h 0337   1]                    Bit Width : 40
[152h 0338   1]                   Bit Offset : 00
[153h 0339   1]         Encoded Access Width : 04 [QWord Access:64]
[154h 0340   8]                      Address : 00000000BD2D0038

[15Ch 0348  28]                       Notify : [Hardware Error Notification Structure]
[15Ch 0348   1]                  Notify Type : 04 [NMI]
[15Dh 0349   1]                Notify Length : 1C
[15Eh 0350   2]   Configuration Write Enable : 0000
[160h 0352   4]                 PollInterval : 0000EA60
[164h 0356   4]                       Vector : 00000000
[168h 0360   4]      Polling Threshold Value : 00000002
[16Ch 0364   4]     Polling Threshold Window : 00000002
[170h 0368   4]        Error Threshold Value : 00000001
[174h 0372   4]       Error Threshold Window : 00000001

[178h 0376   4]    Error Status Block Length : 00000400

[17Ch 0380   2]                Subtable Type : 0009 [Generic Hardware Error Source]
[17Eh 0382   2]                    Source Id : 00E3
[180h 0384   2]            Related Source Id : FFFF
[182h 0386   1]                     Reserved : 00
[183h 0387   1]                      Enabled : 01
[184h 0388   4]       Records To Preallocate : 00000001
[188h 0392   4]      Max Sections Per Record : 00000002
[18Ch 0396   4]          Max Raw Data Length : 00000400

[190h 0400  12]         Error Status Address : [Generic Address Structure]
[190h 0400   1]                     Space ID : 00 [SystemMemory]
[191h 0401   1]                    Bit Width : 40
[192h 0402   1]                   Bit Offset : 00
[193h 0403   1]         Encoded Access Width : 04 [QWord Access:64]
[194h 0404   8]                      Address : 00000000BD2D0040

[19Ch 0412  28]                       Notify : [Hardware Error Notification Structure]
[19Ch 0412   1]                  Notify Type : 04 [NMI]
[19Dh 0413   1]                Notify Length : 1C
[19Eh 0414   2]   Configuration Write Enable : 0000
[1A0h 0416   4]                 PollInterval : 0000EA60
[1A4h 0420   4]                       Vector : 00000000
[1A8h 0424   4]      Polling Threshold Value : 00000002
[1ACh 0428   4]     Polling Threshold Window : 00000002
[1B0h 0432   4]        Error Threshold Value : 00000001
[1B4h 0436   4]       Error Threshold Window : 00000001

[1B8h 0440   4]    Error Status Block Length : 00000400

[1BCh 0444   2]                Subtable Type : 0009 [Generic Hardware Error Source]
[1BEh 0446   2]                    Source Id : C0E0
[1C0h 0448   2]            Related Source Id : 00E0
[1C2h 0450   1]                     Reserved : 00
[1C3h 0451   1]                      Enabled : 01
[1C4h 0452   4]       Records To Preallocate : 00000001
[1C8h 0456   4]      Max Sections Per Record : 00000005
[1CCh 0460   4]          Max Raw Data Length : 00000400

[1D0h 0464  12]         Error Status Address : [Generic Address Structure]
[1D0h 0464   1]                     Space ID : 00 [SystemMemory]
[1D1h 0465   1]                    Bit Width : 40
[1D2h 0466   1]                   Bit Offset : 00
[1D3h 0467   1]         Encoded Access Width : 04 [QWord Access:64]
[1D4h 0468   8]                      Address : 00000000BD2D0048

[1DCh 0476  28]                       Notify : [Hardware Error Notification Structure]
[1DCh 0476   1]                  Notify Type : 03 [SCI]
[1DDh 0477   1]                Notify Length : 1C
[1DEh 0478   2]   Configuration Write Enable : 0000
[1E0h 0480   4]                 PollInterval : 0000EA60
[1E4h 0484   4]                       Vector : 00000000
[1E8h 0488   4]      Polling Threshold Value : 00000002
[1ECh 0492   4]     Polling Threshold Window : 00000002
[1F0h 0496   4]        Error Threshold Value : 00000001
[1F4h 0500   4]       Error Threshold Window : 00000001

[1F8h 0504   4]    Error Status Block Length : 00000400

[1FCh 0508   2]                Subtable Type : 0009 [Generic Hardware Error Source]
[1FEh 0510   2]                    Source Id : C0E1
[200h 0512   2]            Related Source Id : 00E1
[202h 0514   1]                     Reserved : 00
[203h 0515   1]                      Enabled : 01
[204h 0516   4]       Records To Preallocate : 00000001
[208h 0520   4]      Max Sections Per Record : 00000005
[20Ch 0524   4]          Max Raw Data Length : 00000400

[210h 0528  12]         Error Status Address : [Generic Address Structure]
[210h 0528   1]                     Space ID : 00 [SystemMemory]
[211h 0529   1]                    Bit Width : 40
[212h 0530   1]                   Bit Offset : 00
[213h 0531   1]         Encoded Access Width : 04 [QWord Access:64]
[214h 0532   8]                      Address : 00000000BD2D0050

[21Ch 0540  28]                       Notify : [Hardware Error Notification Structure]
[21Ch 0540   1]                  Notify Type : 03 [SCI]
[21Dh 0541   1]                Notify Length : 1C
[21Eh 0542   2]   Configuration Write Enable : 0000
[220h 0544   4]                 PollInterval : 0000EA60
[224h 0548   4]                       Vector : 00000000
[228h 0552   4]      Polling Threshold Value : 00000002
[22Ch 0556   4]     Polling Threshold Window : 00000002
[230h 0560   4]        Error Threshold Value : 00000001
[234h 0564   4]       Error Threshold Window : 00000001

[238h 0568   4]    Error Status Block Length : 00000400

[23Ch 0572   2]                Subtable Type : 0009 [Generic Hardware Error Source]
[23Eh 0574   2]                    Source Id : C0E2
[240h 0576   2]            Related Source Id : 00E2
[242h 0578   1]                     Reserved : 00
[243h 0579   1]                      Enabled : 01
[244h 0580   4]       Records To Preallocate : 00000001
[248h 0584   4]      Max Sections Per Record : 00000005
[24Ch 0588   4]          Max Raw Data Length : 00000400

[250h 0592  12]         Error Status Address : [Generic Address Structure]
[250h 0592   1]                     Space ID : 00 [SystemMemory]
[251h 0593   1]                    Bit Width : 40
[252h 0594   1]                   Bit Offset : 00
[253h 0595   1]         Encoded Access Width : 04 [QWord Access:64]
[254h 0596   8]                      Address : 00000000BD2D0058

[25Ch 0604  28]                       Notify : [Hardware Error Notification Structure]
[25Ch 0604   1]                  Notify Type : 03 [SCI]
[25Dh 0605   1]                Notify Length : 1C
[25Eh 0606   2]   Configuration Write Enable : 0000
[260h 0608   4]                 PollInterval : 0000EA60
[264h 0612   4]                       Vector : 00000000
[268h 0616   4]      Polling Threshold Value : 00000002
[26Ch 0620   4]     Polling Threshold Window : 00000002
[270h 0624   4]        Error Threshold Value : 00000001
[274h 0628   4]       Error Threshold Window : 00000001

[278h 0632   4]    Error Status Block Length : 00000400

[27Ch 0636   2]                Subtable Type : 0009 [Generic Hardware Error Source]
[27Eh 0638   2]                    Source Id : C0E5
[280h 0640   2]            Related Source Id : FFFF
[282h 0642   1]                     Reserved : 00
[283h 0643   1]                      Enabled : 01
[284h 0644   4]       Records To Preallocate : 00000001
[288h 0648   4]      Max Sections Per Record : 00000034
[28Ch 0652   4]          Max Raw Data Length : 00002000

[290h 0656  12]         Error Status Address : [Generic Address Structure]
[290h 0656   1]                     Space ID : 00 [SystemMemory]
[291h 0657   1]                    Bit Width : 40
[292h 0658   1]                   Bit Offset : 00
[293h 0659   1]         Encoded Access Width : 04 [QWord Access:64]
[294h 0660   8]                      Address : 00000000BD2D001F

[29Ch 0668  28]                       Notify : [Hardware Error Notification Structure]
[29Ch 0668   1]                  Notify Type : 03 [SCI]
[29Dh 0669   1]                Notify Length : 1C
[29Eh 0670   2]   Configuration Write Enable : 0000
[2A0h 0672   4]                 PollInterval : 0000EA60
[2A4h 0676   4]                       Vector : 00000000
[2A8h 0680   4]      Polling Threshold Value : 00000002
[2ACh 0684   4]     Polling Threshold Window : 00000002
[2B0h 0688   4]        Error Threshold Value : 00000001
[2B4h 0692   4]       Error Threshold Window : 00000001

[2B8h 0696   4]    Error Status Block Length : 00002000

[2BCh 0700   2]                Subtable Type : 0009 [Generic Hardware Error Source]
[2BEh 0702   2]                    Source Id : FFFE
[2C0h 0704   2]            Related Source Id : FFFF
[2C2h 0706   1]                     Reserved : 00
[2C3h 0707   1]                      Enabled : 01
[2C4h 0708   4]       Records To Preallocate : 00000001
[2C8h 0712   4]      Max Sections Per Record : 00000007
[2CCh 0716   4]          Max Raw Data Length : 00000400

[2D0h 0720  12]         Error Status Address : [Generic Address Structure]
[2D0h 0720   1]                     Space ID : 00 [SystemMemory]
[2D1h 0721   1]                    Bit Width : 40
[2D2h 0722   1]                   Bit Offset : 00
[2D3h 0723   1]         Encoded Access Width : 04 [QWord Access:64]
[2D4h 0724   8]                      Address : 00000000BD2D0068

[2DCh 0732  28]                       Notify : [Hardware Error Notification Structure]
[2DCh 0732   1]                  Notify Type : 03 [SCI]
[2DDh 0733   1]                Notify Length : 1C
[2DEh 0734   2]   Configuration Write Enable : 0000
[2E0h 0736   4]                 PollInterval : 00000000
[2E4h 0740   4]                       Vector : 00000000
[2E8h 0744   4]      Polling Threshold Value : 00000000
[2ECh 0748   4]     Polling Threshold Window : 00000000
[2F0h 0752   4]        Error Threshold Value : 00000000
[2F4h 0756   4]       Error Threshold Window : 00000000

[2F8h 0760   4]    Error Status Block Length : 00000400

[2FCh 0764   2]                Subtable Type : 0001 [IA-32 Corrected Machine Check]
[2FEh 0766   2]                    Source Id : 00E4
[300h 0768   2]                    Reserved1 : 0000
[302h 0770   1]        Flags (decoded below) : 00
                              Firmware First : 0
                                 GHES Assist : 0
[303h 0771   1]                      Enabled : 01
[304h 0772   4]       Records To Preallocate : 00000001
[308h 0776   4]      Max Sections Per Record : 00000005

[30Ch 0780  28]                       Notify : [Hardware Error Notification Structure]
[30Ch 0780   1]                  Notify Type : 00 [Polled]
[30Dh 0781   1]                Notify Length : 1C
[30Eh 0782   2]   Configuration Write Enable : 0000
[310h 0784   4]                 PollInterval : 0000EA60
[314h 0788   4]                       Vector : 00000000
[318h 0792   4]      Polling Threshold Value : 00000100
[31Ch 0796   4]     Polling Threshold Window : 00000002
[320h 0800   4]        Error Threshold Value : 00000100
[324h 0804   4]       Error Threshold Window : 00DBBA00

[328h 0808   1]           Num Hardware Banks : 1B
[329h 0809   3]                    Reserved2 : 000000

[32Ch 0812   1]                  Bank Number : 00
[32Dh 0813   1]         Clear Status On Init : 01
[32Eh 0814   1]                Status Format : 00
[32Fh 0815   1]                     Reserved : 00
[330h 0816   4]             Control Register : 00000400
[334h 0820   8]                 Control Data : FFFFFFFFFFFFFFFF
[33Ch 0828   4]              Status Register : 00000401
[340h 0832   4]             Address Register : 00000402
[344h 0836   4]                Misc Register : 00000403

[348h 0840   1]                  Bank Number : 01
[349h 0841   1]         Clear Status On Init : 01
[34Ah 0842   1]                Status Format : 00
[34Bh 0843   1]                     Reserved : 00
[34Ch 0844   4]             Control Register : 00000404
[350h 0848   8]                 Control Data : FFFFFFFFFFFFFFFF
[358h 0856   4]              Status Register : 00000405
[35Ch 0860   4]             Address Register : 00000406
[360h 0864   4]                Misc Register : 00000407

[364h 0868   1]                  Bank Number : 02
[365h 0869   1]         Clear Status On Init : 01
[366h 0870   1]                Status Format : 00
[367h 0871   1]                     Reserved : 00
[368h 0872   4]             Control Register : 00000408
[36Ch 0876   8]                 Control Data : FFFFFFFFFFFFFFFF
[374h 0884   4]              Status Register : 00000409
[378h 0888   4]             Address Register : 00000000
[37Ch 0892   4]                Misc Register : 00000000

[380h 0896   1]                  Bank Number : 03
[381h 0897   1]         Clear Status On Init : 01
[382h 0898   1]                Status Format : 00
[383h 0899   1]                     Reserved : 00
[384h 0900   4]             Control Register : 0000040C
[388h 0904   8]                 Control Data : FFFFFFFFFFFFFFFF
[390h 0912   4]              Status Register : 0000040D
[394h 0916   4]             Address Register : 0000040E
[398h 0920   4]                Misc Register : 0000040F

[39Ch 0924   1]                  Bank Number : 04
[39Dh 0925   1]         Clear Status On Init : 01
[39Eh 0926   1]                Status Format : 00
[39Fh 0927   1]                     Reserved : 00
[3A0h 0928   4]             Control Register : 00000410
[3A4h 0932   8]                 Control Data : FFFFFFFFFFFFFFFF
[3ACh 0940   4]              Status Register : 00000411
[3B0h 0944   4]             Address Register : 00000000
[3B4h 0948   4]                Misc Register : 00000000

[3B8h 0952   1]                  Bank Number : 05
[3B9h 0953   1]         Clear Status On Init : 01
[3BAh 0954   1]                Status Format : 00
[3BBh 0955   1]                     Reserved : 00
[3BCh 0956   4]             Control Register : 00000414
[3C0h 0960   8]                 Control Data : FFFFFFFFFFFFFFFF
[3C8h 0968   4]              Status Register : 00000415
[3CCh 0972   4]             Address Register : 00000416
[3D0h 0976   4]                Misc Register : 00000417

[3D4h 0980   1]                  Bank Number : 06
[3D5h 0981   1]         Clear Status On Init : 01
[3D6h 0982   1]                Status Format : 00
[3D7h 0983   1]                     Reserved : 00
[3D8h 0984   4]             Control Register : 00000418
[3DCh 0988   8]                 Control Data : FFFFFFFFFFFFFFFF
[3E4h 0996   4]              Status Register : 00000419
[3E8h 1000   4]             Address Register : 0000041A
[3ECh 1004   4]                Misc Register : 0000041B

[3F0h 1008   1]                  Bank Number : 07
[3F1h 1009   1]         Clear Status On Init : 01
[3F2h 1010   1]                Status Format : 00
[3F3h 1011   1]                     Reserved : 00
[3F4h 1012   4]             Control Register : 0000041C
[3F8h 1016   8]                 Control Data : FFFFFFFFFFFFFFFF
[400h 1024   4]              Status Register : 0000041D
[404h 1028   4]             Address Register : 0000041E
[408h 1032   4]                Misc Register : 0000041F

[40Ch 1036   1]                  Bank Number : 08
[40Dh 1037   1]         Clear Status On Init : 01
[40Eh 1038   1]                Status Format : 00
[40Fh 1039   1]                     Reserved : 00
[410h 1040   4]             Control Register : 00000420
[414h 1044   8]                 Control Data : FFFFFFFFFFFFFFFF
[41Ch 1052   4]              Status Register : 00000421
[420h 1056   4]             Address Register : 00000422
[424h 1060   4]                Misc Register : 00000423

[428h 1064   1]                  Bank Number : 09
[429h 1065   1]         Clear Status On Init : 01
[42Ah 1066   1]                Status Format : 00
[42Bh 1067   1]                     Reserved : 00
[42Ch 1068   4]             Control Register : 00000424
[430h 1072   8]                 Control Data : FFFFFFFFFFFFFFFF
[438h 1080   4]              Status Register : 00000425
[43Ch 1084   4]             Address Register : 00000426
[440h 1088   4]                Misc Register : 00000427

[444h 1092   1]                  Bank Number : 0A
[445h 1093   1]         Clear Status On Init : 01
[446h 1094   1]                Status Format : 00
[447h 1095   1]                     Reserved : 00
[448h 1096   4]             Control Register : 00000428
[44Ch 1100   8]                 Control Data : FFFFFFFFFFFFFFFF
[454h 1108   4]              Status Register : 00000429
[458h 1112   4]             Address Register : 0000042A
[45Ch 1116   4]                Misc Register : 0000042B

[460h 1120   1]                  Bank Number : 0B
[461h 1121   1]         Clear Status On Init : 01
[462h 1122   1]                Status Format : 00
[463h 1123   1]                     Reserved : 00
[464h 1124   4]             Control Register : 0000042C
[468h 1128   8]                 Control Data : FFFFFFFFFFFFFFFF
[470h 1136   4]              Status Register : 0000042D
[474h 1140   4]             Address Register : 0000042E
[478h 1144   4]                Misc Register : 0000042F

[47Ch 1148   1]                  Bank Number : 0C
[47Dh 1149   1]         Clear Status On Init : 01
[47Eh 1150   1]                Status Format : 00
[47Fh 1151   1]                     Reserved : 00
[480h 1152   4]             Control Register : 00000430
[484h 1156   8]                 Control Data : FFFFFFFFFFFFFFFF
[48Ch 1164   4]              Status Register : 00000431
[490h 1168   4]             Address Register : 00000432
[494h 1172   4]                Misc Register : 00000433

[498h 1176   1]                  Bank Number : 0D
[499h 1177   1]         Clear Status On Init : 01
[49Ah 1178   1]                Status Format : 00
[49Bh 1179   1]                     Reserved : 00
[49Ch 1180   4]             Control Register : 00000434
[4A0h 1184   8]                 Control Data : FFFFFFFFFFFFFFFF
[4A8h 1192   4]              Status Register : 00000435
[4ACh 1196   4]             Address Register : 00000436
[4B0h 1200   4]                Misc Register : 00000437

[4B4h 1204   1]                  Bank Number : 0E
[4B5h 1205   1]         Clear Status On Init : 01
[4B6h 1206   1]                Status Format : 00
[4B7h 1207   1]                     Reserved : 00
[4B8h 1208   4]             Control Register : 00000438
[4BCh 1212   8]                 Control Data : FFFFFFFFFFFFFFFF
[4C4h 1220   4]              Status Register : 00000439
[4C8h 1224   4]             Address Register : 0000043A
[4CCh 1228   4]                Misc Register : 0000043B

[4D0h 1232   1]                  Bank Number : 0F
[4D1h 1233   1]         Clear Status On Init : 01
[4D2h 1234   1]                Status Format : 00
[4D3h 1235   1]                     Reserved : 00
[4D4h 1236   4]             Control Register : 0000043C
[4D8h 1240   8]                 Control Data : FFFFFFFFFFFFFFFF
[4E0h 1248   4]              Status Register : 0000043D
[4E4h 1252   4]             Address Register : 0000043E
[4E8h 1256   4]                Misc Register : 0000043F

[4ECh 1260   1]                  Bank Number : 10
[4EDh 1261   1]         Clear Status On Init : 01
[4EEh 1262   1]                Status Format : 00
[4EFh 1263   1]                     Reserved : 00
[4F0h 1264   4]             Control Register : 00000440
[4F4h 1268   8]                 Control Data : FFFFFFFFFFFFFFFF
[4FCh 1276   4]              Status Register : 00000441
[500h 1280   4]             Address Register : 00000442
[504h 1284   4]                Misc Register : 00000443

[508h 1288   1]                  Bank Number : 11
[509h 1289   1]         Clear Status On Init : 01
[50Ah 1290   1]                Status Format : 00
[50Bh 1291   1]                     Reserved : 00
[50Ch 1292   4]             Control Register : 00000444
[510h 1296   8]                 Control Data : FFFFFFFFFFFFFFFF
[518h 1304   4]              Status Register : 00000445
[51Ch 1308   4]             Address Register : 00000446
[520h 1312   4]                Misc Register : 00000447

[524h 1316   1]                  Bank Number : 12
[525h 1317   1]         Clear Status On Init : 01
[526h 1318   1]                Status Format : 00
[527h 1319   1]                     Reserved : 00
[528h 1320   4]             Control Register : 00000448
[52Ch 1324   8]                 Control Data : FFFFFFFFFFFFFFFF
[534h 1332   4]              Status Register : 00000449
[538h 1336   4]             Address Register : 0000044A
[53Ch 1340   4]                Misc Register : 0000044B

[540h 1344   1]                  Bank Number : 13
[541h 1345   1]         Clear Status On Init : 01
[542h 1346   1]                Status Format : 00
[543h 1347   1]                     Reserved : 00
[544h 1348   4]             Control Register : 0000044C
[548h 1352   8]                 Control Data : FFFFFFFFFFFFFFFF
[550h 1360   4]              Status Register : 0000044D
[554h 1364   4]             Address Register : 0000044E
[558h 1368   4]                Misc Register : 0000044F

[55Ch 1372   1]                  Bank Number : 14
[55Dh 1373   1]         Clear Status On Init : 01
[55Eh 1374   1]                Status Format : 00
[55Fh 1375   1]                     Reserved : 00
[560h 1376   4]             Control Register : 00000450
[564h 1380   8]                 Control Data : FFFFFFFFFFFFFFFF
[56Ch 1388   4]              Status Register : 00000451
[570h 1392   4]             Address Register : 00000452
[574h 1396   4]                Misc Register : 00000453

[578h 1400   1]                  Bank Number : 15
[579h 1401   1]         Clear Status On Init : 01
[57Ah 1402   1]                Status Format : 00
[57Bh 1403   1]                     Reserved : 00
[57Ch 1404   4]             Control Register : 00000454
[580h 1408   8]                 Control Data : FFFFFFFFFFFFFFFF
[588h 1416   4]              Status Register : 00000455
[58Ch 1420   4]             Address Register : 00000456
[590h 1424   4]                Misc Register : 00000457

[594h 1428   1]                  Bank Number : 16
[595h 1429   1]         Clear Status On Init : 01
[596h 1430   1]                Status Format : 00
[597h 1431   1]                     Reserved : 00
[598h 1432   4]             Control Register : 00000458
[59Ch 1436   8]                 Control Data : FFFFFFFFFFFFFFFF
[5A4h 1444   4]              Status Register : 00000459
[5A8h 1448   4]             Address Register : 0000045A
[5ACh 1452   4]                Misc Register : 0000045B

[5B0h 1456   1]                  Bank Number : 17
[5B1h 1457   1]         Clear Status On Init : 01
[5B2h 1458   1]                Status Format : 00
[5B3h 1459   1]                     Reserved : 00
[5B4h 1460   4]             Control Register : 0000045C
[5B8h 1464   8]                 Control Data : FFFFFFFFFFFFFFFF
[5C0h 1472   4]              Status Register : 0000045D
[5C4h 1476   4]             Address Register : 0000045E
[5C8h 1480   4]                Misc Register : 0000045F

[5CCh 1484   1]                  Bank Number : 18
[5CDh 1485   1]         Clear Status On Init : 01
[5CEh 1486   1]                Status Format : 00
[5CFh 1487   1]                     Reserved : 00
[5D0h 1488   4]             Control Register : 00000460
[5D4h 1492   8]                 Control Data : FFFFFFFFFFFFFFFF
[5DCh 1500   4]              Status Register : 00000461
[5E0h 1504   4]             Address Register : 00000462
[5E4h 1508   4]                Misc Register : 00000463

[5E8h 1512   1]                  Bank Number : 19
[5E9h 1513   1]         Clear Status On Init : 01
[5EAh 1514   1]                Status Format : 00
[5EBh 1515   1]                     Reserved : 00
[5ECh 1516   4]             Control Register : 00000464
[5F0h 1520   8]                 Control Data : FFFFFFFFFFFFFFFF
[5F8h 1528   4]              Status Register : 00000465
[5FCh 1532   4]             Address Register : 00000466
[600h 1536   4]                Misc Register : 00000467

[604h 1540   1]                  Bank Number : 1A
[605h 1541   1]         Clear Status On Init : 01
[606h 1542   1]                Status Format : 00
[607h 1543   1]                     Reserved : 00
[608h 1544   4]             Control Register : 00000468
[60Ch 1548   8]                 Control Data : FFFFFFFFFFFFFFFF
[614h 1556   4]              Status Register : 00000469
[618h 1560   4]             Address Register : 0000046A
[61Ch 1564   4]                Misc Register : 0000046B

Raw Table Data: Length 1568 (0x620)

    0000: 48 45 53 54 20 06 00 00 01 DB 44 45 4C 4C 20 20  // HEST .....DELL  
    0010: 50 45 5F 53 43 33 20 20 01 00 00 00 44 45 4C 4C  // PE_SC3  ....DELL
    0020: 01 00 00 00 0D 00 00 00 06 00 E0 00 00 00 03 01  // ................
    0030: 01 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 04 00 00 00 00 80 31 00 30 70 4E 00 C1 F1 00 00  // ......1.0pN.....
    0050: 00 00 00 00 00 00 00 00 07 00 E1 00 00 00 03 01  // ................
    0060: 01 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 04 00 00 00 00 80 31 00 30 70 4E 00 C1 F1 00 00  // ......1.0pN.....
    0080: 00 00 00 00 08 00 E2 00 00 00 03 01 01 00 00 00  // ................
    0090: 05 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    00A0: 00 80 31 00 30 70 4E 00 C1 F1 00 00 00 00 00 00  // ..1.0pN.........
    00B0: 3F 24 00 00 C0 1B 00 00 00 00 00 00 09 00 E0 80  // ?$..............
    00C0: E0 00 00 01 01 00 00 00 05 00 00 00 00 04 00 00  // ................
    00D0: 00 40 00 04 28 00 2D BD 00 00 00 00 04 1C 00 00  // .@..(.-.........
    00E0: 60 EA 00 00 00 00 00 00 02 00 00 00 02 00 00 00  // `...............
    00F0: 01 00 00 00 01 00 00 00 00 04 00 00 09 00 E1 80  // ................
    0100: E1 00 00 01 01 00 00 00 05 00 00 00 00 04 00 00  // ................
    0110: 00 40 00 04 30 00 2D BD 00 00 00 00 04 1C 00 00  // .@..0.-.........
    0120: 60 EA 00 00 00 00 00 00 02 00 00 00 02 00 00 00  // `...............
    0130: 01 00 00 00 01 00 00 00 00 04 00 00 09 00 E2 80  // ................
    0140: E2 00 00 01 01 00 00 00 05 00 00 00 00 04 00 00  // ................
    0150: 00 40 00 04 38 00 2D BD 00 00 00 00 04 1C 00 00  // .@..8.-.........
    0160: 60 EA 00 00 00 00 00 00 02 00 00 00 02 00 00 00  // `...............
    0170: 01 00 00 00 01 00 00 00 00 04 00 00 09 00 E3 00  // ................
    0180: FF FF 00 01 01 00 00 00 02 00 00 00 00 04 00 00  // ................
    0190: 00 40 00 04 40 00 2D BD 00 00 00 00 04 1C 00 00  // .@..@.-.........
    01A0: 60 EA 00 00 00 00 00 00 02 00 00 00 02 00 00 00  // `...............
    01B0: 01 00 00 00 01 00 00 00 00 04 00 00 09 00 E0 C0  // ................
    01C0: E0 00 00 01 01 00 00 00 05 00 00 00 00 04 00 00  // ................
    01D0: 00 40 00 04 48 00 2D BD 00 00 00 00 03 1C 00 00  // .@..H.-.........
    01E0: 60 EA 00 00 00 00 00 00 02 00 00 00 02 00 00 00  // `...............
    01F0: 01 00 00 00 01 00 00 00 00 04 00 00 09 00 E1 C0  // ................
    0200: E1 00 00 01 01 00 00 00 05 00 00 00 00 04 00 00  // ................
    0210: 00 40 00 04 50 00 2D BD 00 00 00 00 03 1C 00 00  // .@..P.-.........
    0220: 60 EA 00 00 00 00 00 00 02 00 00 00 02 00 00 00  // `...............
    0230: 01 00 00 00 01 00 00 00 00 04 00 00 09 00 E2 C0  // ................
    0240: E2 00 00 01 01 00 00 00 05 00 00 00 00 04 00 00  // ................
    0250: 00 40 00 04 58 00 2D BD 00 00 00 00 03 1C 00 00  // .@..X.-.........
    0260: 60 EA 00 00 00 00 00 00 02 00 00 00 02 00 00 00  // `...............
    0270: 01 00 00 00 01 00 00 00 00 04 00 00 09 00 E5 C0  // ................
    0280: FF FF 00 01 01 00 00 00 34 00 00 00 00 20 00 00  // ........4.... ..
    0290: 00 40 00 04 1F 00 2D BD 00 00 00 00 03 1C 00 00  // .@....-.........
    02A0: 60 EA 00 00 00 00 00 00 02 00 00 00 02 00 00 00  // `...............
    02B0: 01 00 00 00 01 00 00 00 00 20 00 00 09 00 FE FF  // ......... ......
    02C0: FF FF 00 01 01 00 00 00 07 00 00 00 00 04 00 00  // ................
    02D0: 00 40 00 04 68 00 2D BD 00 00 00 00 03 1C 00 00  // .@..h.-.........
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 04 00 00 01 00 E4 00  // ................
    0300: 00 00 00 01 01 00 00 00 05 00 00 00 00 1C 00 00  // ................
    0310: 60 EA 00 00 00 00 00 00 00 01 00 00 02 00 00 00  // `...............
    0320: 00 01 00 00 00 BA DB 00 1B 00 00 00 00 01 00 00  // ................
    0330: 00 04 00 00 FF FF FF FF FF FF FF FF 01 04 00 00  // ................
    0340: 02 04 00 00 03 04 00 00 01 01 00 00 04 04 00 00  // ................
    0350: FF FF FF FF FF FF FF FF 05 04 00 00 06 04 00 00  // ................
    0360: 07 04 00 00 02 01 00 00 08 04 00 00 FF FF FF FF  // ................
    0370: FF FF FF FF 09 04 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 03 01 00 00 0C 04 00 00 FF FF FF FF FF FF FF FF  // ................
    0390: 0D 04 00 00 0E 04 00 00 0F 04 00 00 04 01 00 00  // ................
    03A0: 10 04 00 00 FF FF FF FF FF FF FF FF 11 04 00 00  // ................
    03B0: 00 00 00 00 00 00 00 00 05 01 00 00 14 04 00 00  // ................
    03C0: FF FF FF FF FF FF FF FF 15 04 00 00 16 04 00 00  // ................
    03D0: 17 04 00 00 06 01 00 00 18 04 00 00 FF FF FF FF  // ................
    03E0: FF FF FF FF 19 04 00 00 1A 04 00 00 1B 04 00 00  // ................
    03F0: 07 01 00 00 1C 04 00 00 FF FF FF FF FF FF FF FF  // ................
    0400: 1D 04 00 00 1E 04 00 00 1F 04 00 00 08 01 00 00  // ................
    0410: 20 04 00 00 FF FF FF FF FF FF FF FF 21 04 00 00  //  ...........!...
    0420: 22 04 00 00 23 04 00 00 09 01 00 00 24 04 00 00  // "...#.......$...
    0430: FF FF FF FF FF FF FF FF 25 04 00 00 26 04 00 00  // ........%...&...
    0440: 27 04 00 00 0A 01 00 00 28 04 00 00 FF FF FF FF  // '.......(.......
    0450: FF FF FF FF 29 04 00 00 2A 04 00 00 2B 04 00 00  // ....)...*...+...
    0460: 0B 01 00 00 2C 04 00 00 FF FF FF FF FF FF FF FF  // ....,...........
    0470: 2D 04 00 00 2E 04 00 00 2F 04 00 00 0C 01 00 00  // -......./.......
    0480: 30 04 00 00 FF FF FF FF FF FF FF FF 31 04 00 00  // 0...........1...
    0490: 32 04 00 00 33 04 00 00 0D 01 00 00 34 04 00 00  // 2...3.......4...
    04A0: FF FF FF FF FF FF FF FF 35 04 00 00 36 04 00 00  // ........5...6...
    04B0: 37 04 00 00 0E 01 00 00 38 04 00 00 FF FF FF FF  // 7.......8.......
    04C0: FF FF FF FF 39 04 00 00 3A 04 00 00 3B 04 00 00  // ....9...:...;...
    04D0: 0F 01 00 00 3C 04 00 00 FF FF FF FF FF FF FF FF  // ....<...........
    04E0: 3D 04 00 00 3E 04 00 00 3F 04 00 00 10 01 00 00  // =...>...?.......
    04F0: 40 04 00 00 FF FF FF FF FF FF FF FF 41 04 00 00  // @...........A...
    0500: 42 04 00 00 43 04 00 00 11 01 00 00 44 04 00 00  // B...C.......D...
    0510: FF FF FF FF FF FF FF FF 45 04 00 00 46 04 00 00  // ........E...F...
    0520: 47 04 00 00 12 01 00 00 48 04 00 00 FF FF FF FF  // G.......H.......
    0530: FF FF FF FF 49 04 00 00 4A 04 00 00 4B 04 00 00  // ....I...J...K...
    0540: 13 01 00 00 4C 04 00 00 FF FF FF FF FF FF FF FF  // ....L...........
    0550: 4D 04 00 00 4E 04 00 00 4F 04 00 00 14 01 00 00  // M...N...O.......
    0560: 50 04 00 00 FF FF FF FF FF FF FF FF 51 04 00 00  // P...........Q...
    0570: 52 04 00 00 53 04 00 00 15 01 00 00 54 04 00 00  // R...S.......T...
    0580: FF FF FF FF FF FF FF FF 55 04 00 00 56 04 00 00  // ........U...V...
    0590: 57 04 00 00 16 01 00 00 58 04 00 00 FF FF FF FF  // W.......X.......
    05A0: FF FF FF FF 59 04 00 00 5A 04 00 00 5B 04 00 00  // ....Y...Z...[...
    05B0: 17 01 00 00 5C 04 00 00 FF FF FF FF FF FF FF FF  // ....\...........
    05C0: 5D 04 00 00 5E 04 00 00 5F 04 00 00 18 01 00 00  // ]...^..._.......
    05D0: 60 04 00 00 FF FF FF FF FF FF FF FF 61 04 00 00  // `...........a...
    05E0: 62 04 00 00 63 04 00 00 19 01 00 00 64 04 00 00  // b...c.......d...
    05F0: FF FF FF FF FF FF FF FF 65 04 00 00 66 04 00 00  // ........e...f...
    0600: 67 04 00 00 1A 01 00 00 68 04 00 00 FF FF FF FF  // g.......h.......
    0610: FF FF FF FF 69 04 00 00 6A 04 00 00 6B 04 00 00  // ....i...j...k...


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : AE
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "PE_SC3  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "DELL"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]            Hardware Block ID : 8086A701

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 03E8
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 AE 44 45 4C 4C 20 20  // HPET8.....DELL  
    0010: 50 45 5F 53 43 33 20 20 01 00 00 00 44 45 4C 4C  // PE_SC3  ....DELL
    0020: 01 00 00 00 01 A7 86 80 00 00 00 00 00 00 D0 FE  // ................
    0030: 00 00 00 00 00 E8 03 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 46
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "PE_SC3  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "DELL"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 46 44 45 4C 4C 20 20  // MCFG<....FDELL  
    0010: 50 45 5F 53 43 33 20 20 01 00 00 00 44 45 4C 4C  // PE_SC3  ....DELL
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


PC__
----
[000h 0000   4]                    Signature : "PC__"    
[004h 0004   4]                 Table Length : 0000006E
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 00
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "PE_SC3  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "DELL"
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [PC__]


Raw Table Data: Length 110 (0x6E)

    0000: 50 43 5F 5F 6E 00 00 00 01 00 44 45 4C 4C 20 20  // PC__n.....DELL  
    0010: 50 45 5F 53 43 33 20 20 01 00 00 00 44 45 4C 4C  // PE_SC3  ....DELL
    0020: 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 3E 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .>..............
    0040: 00 00 00 00 00 00 00 00 01 08 00 01 B2 00 00 00  // ................
    0050: 00 00 00 00 7D FF FF FF FF FF FF FF 82 00 00 00  // ....}...........
    0060: 00 00 00 00 F4 01 00 00 00 00 00 00 D0 07        // ..............


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000024
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 2F
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "PE_SC3  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "DELL"
[020h 0032   4]        Asl Compiler Revision : 00000001

/**** ACPI table terminates in the middle of a data structure! (dump table) */

Raw Table Data: Length 36 (0x24)

    0000: 53 4C 49 43 24 00 00 00 01 2F 44 45 4C 4C 20 20  // SLIC$..../DELL  
    0010: 50 45 5F 53 43 33 20 20 01 00 00 00 44 45 4C 4C  // PE_SC3  ....DELL
    0020: 01 00 00 00                                      // ....


SLIT
----
[000h 0000   4]                    Signature : "SLIT"    [System Locality Information Table]
[004h 0004   4]                 Table Length : 00000045
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 0E
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "PE_SC3  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "DELL"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   8]                   Localities : 0000000000000005
[02Ch 0044   5]                 Locality   0 : 0A 14 14 14 14
[031h 0049   5]                 Locality   1 : 14 0A 14 1E 14
[036h 0054   5]                 Locality   2 : 14 14 0A 14 1E
[03Bh 0059   5]                 Locality   3 : 14 1E 14 0A 14
[040h 0064   5]                 Locality   4 : 14 14 1E 14 0A

Raw Table Data: Length 69 (0x45)

    0000: 53 4C 49 54 45 00 00 00 01 0E 44 45 4C 4C 20 20  // SLITE.....DELL  
    0010: 50 45 5F 53 43 33 20 20 01 00 00 00 44 45 4C 4C  // PE_SC3  ....DELL
    0020: 01 00 00 00 05 00 00 00 00 00 00 00 0A 14 14 14  // ................
    0030: 14 14 0A 14 1E 14 14 14 0A 14 1E 14 1E 14 0A 14  // ................
    0040: 14 14 1E 14 0A                                   // .....


SPCR
----
[000h 0000   4]                    Signature : "SPCR"    [Serial Port Console Redirection table]
[004h 0004   4]                 Table Length : 00000050
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : EB
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "PE_SC3  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "DELL"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   1]               Interface Type : 00
[025h 0037   3]                     Reserved : 000000

[028h 0040  12]         Serial Port Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 0000000000000000

[034h 0052   1]               Interrupt Type : 03
[035h 0053   1]          PCAT-compatible IRQ : 04
[036h 0054   4]                    Interrupt : 00000004
[03Ah 0058   1]                    Baud Rate : 00
[03Bh 0059   1]                       Parity : 00
[03Ch 0060   1]                    Stop Bits : 01
[03Dh 0061   1]                 Flow Control : 02
[03Eh 0062   1]                Terminal Type : 01
[04Ch 0076   1]                     Reserved : 00
[040h 0064   2]                PCI Device ID : FFFF
[042h 0066   2]                PCI Vendor ID : FFFF
[044h 0068   1]                      PCI Bus : 00
[045h 0069   1]                   PCI Device : 00
[046h 0070   1]                 PCI Function : 00
[047h 0071   4]                    PCI Flags : 00000000
[04Bh 0075   1]                  PCI Segment : 00
[04Ch 0076   4]                     Reserved : 00000000

Raw Table Data: Length 80 (0x50)

    0000: 53 50 43 52 50 00 00 00 01 EB 44 45 4C 4C 20 20  // SPCRP.....DELL  
    0010: 50 45 5F 53 43 33 20 20 01 00 00 00 44 45 4C 4C  // PE_SC3  ....DELL
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 03 04 04 00 00 00 00 00 01 02 01 00  // ................
    0040: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................


SRAT
----
[000h 0000   4]                    Signature : "SRAT"    [System Resource Affinity Table]
[004h 0004   4]                 Table Length : 000007C0
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 34
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "PE_SC3  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "DELL"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]               Table Revision : 00000001
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[031h 0049   1]                       Length : 10

[032h 0050   1]      Proximity Domain Low(8) : 01
[033h 0051   1]                      Apic ID : 00
[034h 0052   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[038h 0056   1]              Local Sapic EID : 00
[039h 0057   3]    Proximity Domain High(24) : 000000
[03Ch 0060   4]                 Clock Domain : 00000000

[040h 0064   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[041h 0065   1]                       Length : 10

[042h 0066   1]      Proximity Domain Low(8) : 02
[043h 0067   1]                      Apic ID : 20
[044h 0068   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[048h 0072   1]              Local Sapic EID : 00
[049h 0073   3]    Proximity Domain High(24) : 000000
[04Ch 0076   4]                 Clock Domain : 00000000

[050h 0080   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[051h 0081   1]                       Length : 10

[052h 0082   1]      Proximity Domain Low(8) : 03
[053h 0083   1]                      Apic ID : 40
[054h 0084   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[058h 0088   1]              Local Sapic EID : 00
[059h 0089   3]    Proximity Domain High(24) : 000000
[05Ch 0092   4]                 Clock Domain : 00000000

[060h 0096   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[061h 0097   1]                       Length : 10

[062h 0098   1]      Proximity Domain Low(8) : 04
[063h 0099   1]                      Apic ID : 60
[064h 0100   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[068h 0104   1]              Local Sapic EID : 00
[069h 0105   3]    Proximity Domain High(24) : 000000
[06Ch 0108   4]                 Clock Domain : 00000000

[070h 0112   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[071h 0113   1]                       Length : 10

[072h 0114   1]      Proximity Domain Low(8) : 01
[073h 0115   1]                      Apic ID : 02
[074h 0116   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[078h 0120   1]              Local Sapic EID : 00
[079h 0121   3]    Proximity Domain High(24) : 000000
[07Ch 0124   4]                 Clock Domain : 00000000

[080h 0128   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[081h 0129   1]                       Length : 10

[082h 0130   1]      Proximity Domain Low(8) : 02
[083h 0131   1]                      Apic ID : 22
[084h 0132   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[088h 0136   1]              Local Sapic EID : 00
[089h 0137   3]    Proximity Domain High(24) : 000000
[08Ch 0140   4]                 Clock Domain : 00000000

[090h 0144   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[091h 0145   1]                       Length : 10

[092h 0146   1]      Proximity Domain Low(8) : 03
[093h 0147   1]                      Apic ID : 42
[094h 0148   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[098h 0152   1]              Local Sapic EID : 00
[099h 0153   3]    Proximity Domain High(24) : 000000
[09Ch 0156   4]                 Clock Domain : 00000000

[0A0h 0160   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0A1h 0161   1]                       Length : 10

[0A2h 0162   1]      Proximity Domain Low(8) : 04
[0A3h 0163   1]                      Apic ID : 62
[0A4h 0164   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[0A8h 0168   1]              Local Sapic EID : 00
[0A9h 0169   3]    Proximity Domain High(24) : 000000
[0ACh 0172   4]                 Clock Domain : 00000000

[0B0h 0176   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0B1h 0177   1]                       Length : 10

[0B2h 0178   1]      Proximity Domain Low(8) : 01
[0B3h 0179   1]                      Apic ID : 04
[0B4h 0180   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[0B8h 0184   1]              Local Sapic EID : 00
[0B9h 0185   3]    Proximity Domain High(24) : 000000
[0BCh 0188   4]                 Clock Domain : 00000000

[0C0h 0192   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0C1h 0193   1]                       Length : 10

[0C2h 0194   1]      Proximity Domain Low(8) : 02
[0C3h 0195   1]                      Apic ID : 24
[0C4h 0196   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[0C8h 0200   1]              Local Sapic EID : 00
[0C9h 0201   3]    Proximity Domain High(24) : 000000
[0CCh 0204   4]                 Clock Domain : 00000000

[0D0h 0208   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0D1h 0209   1]                       Length : 10

[0D2h 0210   1]      Proximity Domain Low(8) : 03
[0D3h 0211   1]                      Apic ID : 44
[0D4h 0212   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[0D8h 0216   1]              Local Sapic EID : 00
[0D9h 0217   3]    Proximity Domain High(24) : 000000
[0DCh 0220   4]                 Clock Domain : 00000000

[0E0h 0224   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0E1h 0225   1]                       Length : 10

[0E2h 0226   1]      Proximity Domain Low(8) : 04
[0E3h 0227   1]                      Apic ID : 64
[0E4h 0228   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[0E8h 0232   1]              Local Sapic EID : 00
[0E9h 0233   3]    Proximity Domain High(24) : 000000
[0ECh 0236   4]                 Clock Domain : 00000000

[0F0h 0240   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[0F1h 0241   1]                       Length : 10

[0F2h 0242   1]      Proximity Domain Low(8) : 01
[0F3h 0243   1]                      Apic ID : 06
[0F4h 0244   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[0F8h 0248   1]              Local Sapic EID : 00
[0F9h 0249   3]    Proximity Domain High(24) : 000000
[0FCh 0252   4]                 Clock Domain : 00000000

[100h 0256   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[101h 0257   1]                       Length : 10

[102h 0258   1]      Proximity Domain Low(8) : 02
[103h 0259   1]                      Apic ID : 26
[104h 0260   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[108h 0264   1]              Local Sapic EID : 00
[109h 0265   3]    Proximity Domain High(24) : 000000
[10Ch 0268   4]                 Clock Domain : 00000000

[110h 0272   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[111h 0273   1]                       Length : 10

[112h 0274   1]      Proximity Domain Low(8) : 03
[113h 0275   1]                      Apic ID : 46
[114h 0276   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[118h 0280   1]              Local Sapic EID : 00
[119h 0281   3]    Proximity Domain High(24) : 000000
[11Ch 0284   4]                 Clock Domain : 00000000

[120h 0288   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[121h 0289   1]                       Length : 10

[122h 0290   1]      Proximity Domain Low(8) : 04
[123h 0291   1]                      Apic ID : 66
[124h 0292   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[128h 0296   1]              Local Sapic EID : 00
[129h 0297   3]    Proximity Domain High(24) : 000000
[12Ch 0300   4]                 Clock Domain : 00000000

[130h 0304   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[131h 0305   1]                       Length : 10

[132h 0306   1]      Proximity Domain Low(8) : 01
[133h 0307   1]                      Apic ID : 08
[134h 0308   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[138h 0312   1]              Local Sapic EID : 00
[139h 0313   3]    Proximity Domain High(24) : 000000
[13Ch 0316   4]                 Clock Domain : 00000000

[140h 0320   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[141h 0321   1]                       Length : 10

[142h 0322   1]      Proximity Domain Low(8) : 02
[143h 0323   1]                      Apic ID : 28
[144h 0324   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[148h 0328   1]              Local Sapic EID : 00
[149h 0329   3]    Proximity Domain High(24) : 000000
[14Ch 0332   4]                 Clock Domain : 00000000

[150h 0336   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[151h 0337   1]                       Length : 10

[152h 0338   1]      Proximity Domain Low(8) : 03
[153h 0339   1]                      Apic ID : 48
[154h 0340   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[158h 0344   1]              Local Sapic EID : 00
[159h 0345   3]    Proximity Domain High(24) : 000000
[15Ch 0348   4]                 Clock Domain : 00000000

[160h 0352   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[161h 0353   1]                       Length : 10

[162h 0354   1]      Proximity Domain Low(8) : 04
[163h 0355   1]                      Apic ID : 68
[164h 0356   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[168h 0360   1]              Local Sapic EID : 00
[169h 0361   3]    Proximity Domain High(24) : 000000
[16Ch 0364   4]                 Clock Domain : 00000000

[170h 0368   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[171h 0369   1]                       Length : 10

[172h 0370   1]      Proximity Domain Low(8) : 01
[173h 0371   1]                      Apic ID : 10
[174h 0372   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[178h 0376   1]              Local Sapic EID : 00
[179h 0377   3]    Proximity Domain High(24) : 000000
[17Ch 0380   4]                 Clock Domain : 00000000

[180h 0384   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[181h 0385   1]                       Length : 10

[182h 0386   1]      Proximity Domain Low(8) : 02
[183h 0387   1]                      Apic ID : 30
[184h 0388   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[188h 0392   1]              Local Sapic EID : 00
[189h 0393   3]    Proximity Domain High(24) : 000000
[18Ch 0396   4]                 Clock Domain : 00000000

[190h 0400   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[191h 0401   1]                       Length : 10

[192h 0402   1]      Proximity Domain Low(8) : 03
[193h 0403   1]                      Apic ID : 50
[194h 0404   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[198h 0408   1]              Local Sapic EID : 00
[199h 0409   3]    Proximity Domain High(24) : 000000
[19Ch 0412   4]                 Clock Domain : 00000000

[1A0h 0416   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1A1h 0417   1]                       Length : 10

[1A2h 0418   1]      Proximity Domain Low(8) : 04
[1A3h 0419   1]                      Apic ID : 70
[1A4h 0420   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[1A8h 0424   1]              Local Sapic EID : 00
[1A9h 0425   3]    Proximity Domain High(24) : 000000
[1ACh 0428   4]                 Clock Domain : 00000000

[1B0h 0432   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1B1h 0433   1]                       Length : 10

[1B2h 0434   1]      Proximity Domain Low(8) : 01
[1B3h 0435   1]                      Apic ID : 12
[1B4h 0436   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[1B8h 0440   1]              Local Sapic EID : 00
[1B9h 0441   3]    Proximity Domain High(24) : 000000
[1BCh 0444   4]                 Clock Domain : 00000000

[1C0h 0448   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1C1h 0449   1]                       Length : 10

[1C2h 0450   1]      Proximity Domain Low(8) : 02
[1C3h 0451   1]                      Apic ID : 32
[1C4h 0452   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[1C8h 0456   1]              Local Sapic EID : 00
[1C9h 0457   3]    Proximity Domain High(24) : 000000
[1CCh 0460   4]                 Clock Domain : 00000000

[1D0h 0464   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1D1h 0465   1]                       Length : 10

[1D2h 0466   1]      Proximity Domain Low(8) : 03
[1D3h 0467   1]                      Apic ID : 52
[1D4h 0468   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[1D8h 0472   1]              Local Sapic EID : 00
[1D9h 0473   3]    Proximity Domain High(24) : 000000
[1DCh 0476   4]                 Clock Domain : 00000000

[1E0h 0480   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1E1h 0481   1]                       Length : 10

[1E2h 0482   1]      Proximity Domain Low(8) : 04
[1E3h 0483   1]                      Apic ID : 72
[1E4h 0484   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[1E8h 0488   1]              Local Sapic EID : 00
[1E9h 0489   3]    Proximity Domain High(24) : 000000
[1ECh 0492   4]                 Clock Domain : 00000000

[1F0h 0496   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[1F1h 0497   1]                       Length : 10

[1F2h 0498   1]      Proximity Domain Low(8) : 01
[1F3h 0499   1]                      Apic ID : 14
[1F4h 0500   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[1F8h 0504   1]              Local Sapic EID : 00
[1F9h 0505   3]    Proximity Domain High(24) : 000000
[1FCh 0508   4]                 Clock Domain : 00000000

[200h 0512   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[201h 0513   1]                       Length : 10

[202h 0514   1]      Proximity Domain Low(8) : 02
[203h 0515   1]                      Apic ID : 34
[204h 0516   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[208h 0520   1]              Local Sapic EID : 00
[209h 0521   3]    Proximity Domain High(24) : 000000
[20Ch 0524   4]                 Clock Domain : 00000000

[210h 0528   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[211h 0529   1]                       Length : 10

[212h 0530   1]      Proximity Domain Low(8) : 03
[213h 0531   1]                      Apic ID : 54
[214h 0532   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[218h 0536   1]              Local Sapic EID : 00
[219h 0537   3]    Proximity Domain High(24) : 000000
[21Ch 0540   4]                 Clock Domain : 00000000

[220h 0544   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[221h 0545   1]                       Length : 10

[222h 0546   1]      Proximity Domain Low(8) : 04
[223h 0547   1]                      Apic ID : 74
[224h 0548   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[228h 0552   1]              Local Sapic EID : 00
[229h 0553   3]    Proximity Domain High(24) : 000000
[22Ch 0556   4]                 Clock Domain : 00000000

[230h 0560   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[231h 0561   1]                       Length : 10

[232h 0562   1]      Proximity Domain Low(8) : 01
[233h 0563   1]                      Apic ID : 16
[234h 0564   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[238h 0568   1]              Local Sapic EID : 00
[239h 0569   3]    Proximity Domain High(24) : 000000
[23Ch 0572   4]                 Clock Domain : 00000000

[240h 0576   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[241h 0577   1]                       Length : 10

[242h 0578   1]      Proximity Domain Low(8) : 02
[243h 0579   1]                      Apic ID : 36
[244h 0580   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[248h 0584   1]              Local Sapic EID : 00
[249h 0585   3]    Proximity Domain High(24) : 000000
[24Ch 0588   4]                 Clock Domain : 00000000

[250h 0592   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[251h 0593   1]                       Length : 10

[252h 0594   1]      Proximity Domain Low(8) : 03
[253h 0595   1]                      Apic ID : 56
[254h 0596   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[258h 0600   1]              Local Sapic EID : 00
[259h 0601   3]    Proximity Domain High(24) : 000000
[25Ch 0604   4]                 Clock Domain : 00000000

[260h 0608   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[261h 0609   1]                       Length : 10

[262h 0610   1]      Proximity Domain Low(8) : 04
[263h 0611   1]                      Apic ID : 76
[264h 0612   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[268h 0616   1]              Local Sapic EID : 00
[269h 0617   3]    Proximity Domain High(24) : 000000
[26Ch 0620   4]                 Clock Domain : 00000000

[270h 0624   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[271h 0625   1]                       Length : 10

[272h 0626   1]      Proximity Domain Low(8) : 01
[273h 0627   1]                      Apic ID : 18
[274h 0628   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[278h 0632   1]              Local Sapic EID : 00
[279h 0633   3]    Proximity Domain High(24) : 000000
[27Ch 0636   4]                 Clock Domain : 00000000

[280h 0640   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[281h 0641   1]                       Length : 10

[282h 0642   1]      Proximity Domain Low(8) : 02
[283h 0643   1]                      Apic ID : 38
[284h 0644   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[288h 0648   1]              Local Sapic EID : 00
[289h 0649   3]    Proximity Domain High(24) : 000000
[28Ch 0652   4]                 Clock Domain : 00000000

[290h 0656   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[291h 0657   1]                       Length : 10

[292h 0658   1]      Proximity Domain Low(8) : 03
[293h 0659   1]                      Apic ID : 58
[294h 0660   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[298h 0664   1]              Local Sapic EID : 00
[299h 0665   3]    Proximity Domain High(24) : 000000
[29Ch 0668   4]                 Clock Domain : 00000000

[2A0h 0672   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[2A1h 0673   1]                       Length : 10

[2A2h 0674   1]      Proximity Domain Low(8) : 04
[2A3h 0675   1]                      Apic ID : 78
[2A4h 0676   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[2A8h 0680   1]              Local Sapic EID : 00
[2A9h 0681   3]    Proximity Domain High(24) : 000000
[2ACh 0684   4]                 Clock Domain : 00000000

[2B0h 0688   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[2B1h 0689   1]                       Length : 10

[2B2h 0690   1]      Proximity Domain Low(8) : 01
[2B3h 0691   1]                      Apic ID : 01
[2B4h 0692   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[2B8h 0696   1]              Local Sapic EID : 00
[2B9h 0697   3]    Proximity Domain High(24) : 000000
[2BCh 0700   4]                 Clock Domain : 00000000

[2C0h 0704   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[2C1h 0705   1]                       Length : 10

[2C2h 0706   1]      Proximity Domain Low(8) : 02
[2C3h 0707   1]                      Apic ID : 21
[2C4h 0708   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[2C8h 0712   1]              Local Sapic EID : 00
[2C9h 0713   3]    Proximity Domain High(24) : 000000
[2CCh 0716   4]                 Clock Domain : 00000000

[2D0h 0720   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[2D1h 0721   1]                       Length : 10

[2D2h 0722   1]      Proximity Domain Low(8) : 03
[2D3h 0723   1]                      Apic ID : 41
[2D4h 0724   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[2D8h 0728   1]              Local Sapic EID : 00
[2D9h 0729   3]    Proximity Domain High(24) : 000000
[2DCh 0732   4]                 Clock Domain : 00000000

[2E0h 0736   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[2E1h 0737   1]                       Length : 10

[2E2h 0738   1]      Proximity Domain Low(8) : 04
[2E3h 0739   1]                      Apic ID : 61
[2E4h 0740   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[2E8h 0744   1]              Local Sapic EID : 00
[2E9h 0745   3]    Proximity Domain High(24) : 000000
[2ECh 0748   4]                 Clock Domain : 00000000

[2F0h 0752   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[2F1h 0753   1]                       Length : 10

[2F2h 0754   1]      Proximity Domain Low(8) : 01
[2F3h 0755   1]                      Apic ID : 03
[2F4h 0756   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[2F8h 0760   1]              Local Sapic EID : 00
[2F9h 0761   3]    Proximity Domain High(24) : 000000
[2FCh 0764   4]                 Clock Domain : 00000000

[300h 0768   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[301h 0769   1]                       Length : 10

[302h 0770   1]      Proximity Domain Low(8) : 02
[303h 0771   1]                      Apic ID : 23
[304h 0772   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[308h 0776   1]              Local Sapic EID : 00
[309h 0777   3]    Proximity Domain High(24) : 000000
[30Ch 0780   4]                 Clock Domain : 00000000

[310h 0784   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[311h 0785   1]                       Length : 10

[312h 0786   1]      Proximity Domain Low(8) : 03
[313h 0787   1]                      Apic ID : 43
[314h 0788   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[318h 0792   1]              Local Sapic EID : 00
[319h 0793   3]    Proximity Domain High(24) : 000000
[31Ch 0796   4]                 Clock Domain : 00000000

[320h 0800   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[321h 0801   1]                       Length : 10

[322h 0802   1]      Proximity Domain Low(8) : 04
[323h 0803   1]                      Apic ID : 63
[324h 0804   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[328h 0808   1]              Local Sapic EID : 00
[329h 0809   3]    Proximity Domain High(24) : 000000
[32Ch 0812   4]                 Clock Domain : 00000000

[330h 0816   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[331h 0817   1]                       Length : 10

[332h 0818   1]      Proximity Domain Low(8) : 01
[333h 0819   1]                      Apic ID : 05
[334h 0820   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[338h 0824   1]              Local Sapic EID : 00
[339h 0825   3]    Proximity Domain High(24) : 000000
[33Ch 0828   4]                 Clock Domain : 00000000

[340h 0832   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[341h 0833   1]                       Length : 10

[342h 0834   1]      Proximity Domain Low(8) : 02
[343h 0835   1]                      Apic ID : 25
[344h 0836   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[348h 0840   1]              Local Sapic EID : 00
[349h 0841   3]    Proximity Domain High(24) : 000000
[34Ch 0844   4]                 Clock Domain : 00000000

[350h 0848   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[351h 0849   1]                       Length : 10

[352h 0850   1]      Proximity Domain Low(8) : 03
[353h 0851   1]                      Apic ID : 45
[354h 0852   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[358h 0856   1]              Local Sapic EID : 00
[359h 0857   3]    Proximity Domain High(24) : 000000
[35Ch 0860   4]                 Clock Domain : 00000000

[360h 0864   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[361h 0865   1]                       Length : 10

[362h 0866   1]      Proximity Domain Low(8) : 04
[363h 0867   1]                      Apic ID : 65
[364h 0868   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[368h 0872   1]              Local Sapic EID : 00
[369h 0873   3]    Proximity Domain High(24) : 000000
[36Ch 0876   4]                 Clock Domain : 00000000

[370h 0880   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[371h 0881   1]                       Length : 10

[372h 0882   1]      Proximity Domain Low(8) : 01
[373h 0883   1]                      Apic ID : 07
[374h 0884   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[378h 0888   1]              Local Sapic EID : 00
[379h 0889   3]    Proximity Domain High(24) : 000000
[37Ch 0892   4]                 Clock Domain : 00000000

[380h 0896   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[381h 0897   1]                       Length : 10

[382h 0898   1]      Proximity Domain Low(8) : 02
[383h 0899   1]                      Apic ID : 27
[384h 0900   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[388h 0904   1]              Local Sapic EID : 00
[389h 0905   3]    Proximity Domain High(24) : 000000
[38Ch 0908   4]                 Clock Domain : 00000000

[390h 0912   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[391h 0913   1]                       Length : 10

[392h 0914   1]      Proximity Domain Low(8) : 03
[393h 0915   1]                      Apic ID : 47
[394h 0916   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[398h 0920   1]              Local Sapic EID : 00
[399h 0921   3]    Proximity Domain High(24) : 000000
[39Ch 0924   4]                 Clock Domain : 00000000

[3A0h 0928   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[3A1h 0929   1]                       Length : 10

[3A2h 0930   1]      Proximity Domain Low(8) : 04
[3A3h 0931   1]                      Apic ID : 67
[3A4h 0932   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[3A8h 0936   1]              Local Sapic EID : 00
[3A9h 0937   3]    Proximity Domain High(24) : 000000
[3ACh 0940   4]                 Clock Domain : 00000000

[3B0h 0944   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[3B1h 0945   1]                       Length : 10

[3B2h 0946   1]      Proximity Domain Low(8) : 01
[3B3h 0947   1]                      Apic ID : 09
[3B4h 0948   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[3B8h 0952   1]              Local Sapic EID : 00
[3B9h 0953   3]    Proximity Domain High(24) : 000000
[3BCh 0956   4]                 Clock Domain : 00000000

[3C0h 0960   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[3C1h 0961   1]                       Length : 10

[3C2h 0962   1]      Proximity Domain Low(8) : 02
[3C3h 0963   1]                      Apic ID : 29
[3C4h 0964   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[3C8h 0968   1]              Local Sapic EID : 00
[3C9h 0969   3]    Proximity Domain High(24) : 000000
[3CCh 0972   4]                 Clock Domain : 00000000

[3D0h 0976   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[3D1h 0977   1]                       Length : 10

[3D2h 0978   1]      Proximity Domain Low(8) : 03
[3D3h 0979   1]                      Apic ID : 49
[3D4h 0980   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[3D8h 0984   1]              Local Sapic EID : 00
[3D9h 0985   3]    Proximity Domain High(24) : 000000
[3DCh 0988   4]                 Clock Domain : 00000000

[3E0h 0992   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[3E1h 0993   1]                       Length : 10

[3E2h 0994   1]      Proximity Domain Low(8) : 04
[3E3h 0995   1]                      Apic ID : 69
[3E4h 0996   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[3E8h 1000   1]              Local Sapic EID : 00
[3E9h 1001   3]    Proximity Domain High(24) : 000000
[3ECh 1004   4]                 Clock Domain : 00000000

[3F0h 1008   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[3F1h 1009   1]                       Length : 10

[3F2h 1010   1]      Proximity Domain Low(8) : 01
[3F3h 1011   1]                      Apic ID : 11
[3F4h 1012   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[3F8h 1016   1]              Local Sapic EID : 00
[3F9h 1017   3]    Proximity Domain High(24) : 000000
[3FCh 1020   4]                 Clock Domain : 00000000

[400h 1024   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[401h 1025   1]                       Length : 10

[402h 1026   1]      Proximity Domain Low(8) : 02
[403h 1027   1]                      Apic ID : 31
[404h 1028   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[408h 1032   1]              Local Sapic EID : 00
[409h 1033   3]    Proximity Domain High(24) : 000000
[40Ch 1036   4]                 Clock Domain : 00000000

[410h 1040   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[411h 1041   1]                       Length : 10

[412h 1042   1]      Proximity Domain Low(8) : 03
[413h 1043   1]                      Apic ID : 51
[414h 1044   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[418h 1048   1]              Local Sapic EID : 00
[419h 1049   3]    Proximity Domain High(24) : 000000
[41Ch 1052   4]                 Clock Domain : 00000000

[420h 1056   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[421h 1057   1]                       Length : 10

[422h 1058   1]      Proximity Domain Low(8) : 04
[423h 1059   1]                      Apic ID : 71
[424h 1060   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[428h 1064   1]              Local Sapic EID : 00
[429h 1065   3]    Proximity Domain High(24) : 000000
[42Ch 1068   4]                 Clock Domain : 00000000

[430h 1072   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[431h 1073   1]                       Length : 10

[432h 1074   1]      Proximity Domain Low(8) : 01
[433h 1075   1]                      Apic ID : 13
[434h 1076   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[438h 1080   1]              Local Sapic EID : 00
[439h 1081   3]    Proximity Domain High(24) : 000000
[43Ch 1084   4]                 Clock Domain : 00000000

[440h 1088   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[441h 1089   1]                       Length : 10

[442h 1090   1]      Proximity Domain Low(8) : 02
[443h 1091   1]                      Apic ID : 33
[444h 1092   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[448h 1096   1]              Local Sapic EID : 00
[449h 1097   3]    Proximity Domain High(24) : 000000
[44Ch 1100   4]                 Clock Domain : 00000000

[450h 1104   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[451h 1105   1]                       Length : 10

[452h 1106   1]      Proximity Domain Low(8) : 03
[453h 1107   1]                      Apic ID : 53
[454h 1108   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[458h 1112   1]              Local Sapic EID : 00
[459h 1113   3]    Proximity Domain High(24) : 000000
[45Ch 1116   4]                 Clock Domain : 00000000

[460h 1120   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[461h 1121   1]                       Length : 10

[462h 1122   1]      Proximity Domain Low(8) : 04
[463h 1123   1]                      Apic ID : 73
[464h 1124   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[468h 1128   1]              Local Sapic EID : 00
[469h 1129   3]    Proximity Domain High(24) : 000000
[46Ch 1132   4]                 Clock Domain : 00000000

[470h 1136   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[471h 1137   1]                       Length : 10

[472h 1138   1]      Proximity Domain Low(8) : 01
[473h 1139   1]                      Apic ID : 15
[474h 1140   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[478h 1144   1]              Local Sapic EID : 00
[479h 1145   3]    Proximity Domain High(24) : 000000
[47Ch 1148   4]                 Clock Domain : 00000000

[480h 1152   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[481h 1153   1]                       Length : 10

[482h 1154   1]      Proximity Domain Low(8) : 02
[483h 1155   1]                      Apic ID : 35
[484h 1156   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[488h 1160   1]              Local Sapic EID : 00
[489h 1161   3]    Proximity Domain High(24) : 000000
[48Ch 1164   4]                 Clock Domain : 00000000

[490h 1168   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[491h 1169   1]                       Length : 10

[492h 1170   1]      Proximity Domain Low(8) : 03
[493h 1171   1]                      Apic ID : 55
[494h 1172   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[498h 1176   1]              Local Sapic EID : 00
[499h 1177   3]    Proximity Domain High(24) : 000000
[49Ch 1180   4]                 Clock Domain : 00000000

[4A0h 1184   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[4A1h 1185   1]                       Length : 10

[4A2h 1186   1]      Proximity Domain Low(8) : 04
[4A3h 1187   1]                      Apic ID : 75
[4A4h 1188   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[4A8h 1192   1]              Local Sapic EID : 00
[4A9h 1193   3]    Proximity Domain High(24) : 000000
[4ACh 1196   4]                 Clock Domain : 00000000

[4B0h 1200   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[4B1h 1201   1]                       Length : 10

[4B2h 1202   1]      Proximity Domain Low(8) : 01
[4B3h 1203   1]                      Apic ID : 17
[4B4h 1204   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[4B8h 1208   1]              Local Sapic EID : 00
[4B9h 1209   3]    Proximity Domain High(24) : 000000
[4BCh 1212   4]                 Clock Domain : 00000000

[4C0h 1216   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[4C1h 1217   1]                       Length : 10

[4C2h 1218   1]      Proximity Domain Low(8) : 02
[4C3h 1219   1]                      Apic ID : 37
[4C4h 1220   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[4C8h 1224   1]              Local Sapic EID : 00
[4C9h 1225   3]    Proximity Domain High(24) : 000000
[4CCh 1228   4]                 Clock Domain : 00000000

[4D0h 1232   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[4D1h 1233   1]                       Length : 10

[4D2h 1234   1]      Proximity Domain Low(8) : 03
[4D3h 1235   1]                      Apic ID : 57
[4D4h 1236   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[4D8h 1240   1]              Local Sapic EID : 00
[4D9h 1241   3]    Proximity Domain High(24) : 000000
[4DCh 1244   4]                 Clock Domain : 00000000

[4E0h 1248   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[4E1h 1249   1]                       Length : 10

[4E2h 1250   1]      Proximity Domain Low(8) : 04
[4E3h 1251   1]                      Apic ID : 77
[4E4h 1252   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[4E8h 1256   1]              Local Sapic EID : 00
[4E9h 1257   3]    Proximity Domain High(24) : 000000
[4ECh 1260   4]                 Clock Domain : 00000000

[4F0h 1264   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[4F1h 1265   1]                       Length : 10

[4F2h 1266   1]      Proximity Domain Low(8) : 01
[4F3h 1267   1]                      Apic ID : 19
[4F4h 1268   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[4F8h 1272   1]              Local Sapic EID : 00
[4F9h 1273   3]    Proximity Domain High(24) : 000000
[4FCh 1276   4]                 Clock Domain : 00000000

[500h 1280   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[501h 1281   1]                       Length : 10

[502h 1282   1]      Proximity Domain Low(8) : 02
[503h 1283   1]                      Apic ID : 39
[504h 1284   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[508h 1288   1]              Local Sapic EID : 00
[509h 1289   3]    Proximity Domain High(24) : 000000
[50Ch 1292   4]                 Clock Domain : 00000000

[510h 1296   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[511h 1297   1]                       Length : 10

[512h 1298   1]      Proximity Domain Low(8) : 03
[513h 1299   1]                      Apic ID : 59
[514h 1300   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[518h 1304   1]              Local Sapic EID : 00
[519h 1305   3]    Proximity Domain High(24) : 000000
[51Ch 1308   4]                 Clock Domain : 00000000

[520h 1312   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[521h 1313   1]                       Length : 10

[522h 1314   1]      Proximity Domain Low(8) : 04
[523h 1315   1]                      Apic ID : 79
[524h 1316   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
[528h 1320   1]              Local Sapic EID : 00
[529h 1321   3]    Proximity Domain High(24) : 000000
[52Ch 1324   4]                 Clock Domain : 00000000

[530h 1328   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[531h 1329   1]                       Length : 10

[532h 1330   1]      Proximity Domain Low(8) : 00
[533h 1331   1]                      Apic ID : D0
[534h 1332   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[538h 1336   1]              Local Sapic EID : 00
[539h 1337   3]    Proximity Domain High(24) : 000000
[53Ch 1340   4]                 Clock Domain : 00000000

[540h 1344   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[541h 1345   1]                       Length : 10

[542h 1346   1]      Proximity Domain Low(8) : 00
[543h 1347   1]                      Apic ID : D1
[544h 1348   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[548h 1352   1]              Local Sapic EID : 00
[549h 1353   3]    Proximity Domain High(24) : 000000
[54Ch 1356   4]                 Clock Domain : 00000000

[550h 1360   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[551h 1361   1]                       Length : 10

[552h 1362   1]      Proximity Domain Low(8) : 00
[553h 1363   1]                      Apic ID : D2
[554h 1364   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[558h 1368   1]              Local Sapic EID : 00
[559h 1369   3]    Proximity Domain High(24) : 000000
[55Ch 1372   4]                 Clock Domain : 00000000

[560h 1376   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[561h 1377   1]                       Length : 10

[562h 1378   1]      Proximity Domain Low(8) : 00
[563h 1379   1]                      Apic ID : D3
[564h 1380   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[568h 1384   1]              Local Sapic EID : 00
[569h 1385   3]    Proximity Domain High(24) : 000000
[56Ch 1388   4]                 Clock Domain : 00000000

[570h 1392   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[571h 1393   1]                       Length : 10

[572h 1394   1]      Proximity Domain Low(8) : 00
[573h 1395   1]                      Apic ID : D4
[574h 1396   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[578h 1400   1]              Local Sapic EID : 00
[579h 1401   3]    Proximity Domain High(24) : 000000
[57Ch 1404   4]                 Clock Domain : 00000000

[580h 1408   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[581h 1409   1]                       Length : 10

[582h 1410   1]      Proximity Domain Low(8) : 00
[583h 1411   1]                      Apic ID : D5
[584h 1412   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[588h 1416   1]              Local Sapic EID : 00
[589h 1417   3]    Proximity Domain High(24) : 000000
[58Ch 1420   4]                 Clock Domain : 00000000

[590h 1424   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[591h 1425   1]                       Length : 10

[592h 1426   1]      Proximity Domain Low(8) : 00
[593h 1427   1]                      Apic ID : D6
[594h 1428   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[598h 1432   1]              Local Sapic EID : 00
[599h 1433   3]    Proximity Domain High(24) : 000000
[59Ch 1436   4]                 Clock Domain : 00000000

[5A0h 1440   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[5A1h 1441   1]                       Length : 10

[5A2h 1442   1]      Proximity Domain Low(8) : 00
[5A3h 1443   1]                      Apic ID : D7
[5A4h 1444   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[5A8h 1448   1]              Local Sapic EID : 00
[5A9h 1449   3]    Proximity Domain High(24) : 000000
[5ACh 1452   4]                 Clock Domain : 00000000

[5B0h 1456   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[5B1h 1457   1]                       Length : 10

[5B2h 1458   1]      Proximity Domain Low(8) : 00
[5B3h 1459   1]                      Apic ID : D8
[5B4h 1460   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[5B8h 1464   1]              Local Sapic EID : 00
[5B9h 1465   3]    Proximity Domain High(24) : 000000
[5BCh 1468   4]                 Clock Domain : 00000000

[5C0h 1472   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[5C1h 1473   1]                       Length : 10

[5C2h 1474   1]      Proximity Domain Low(8) : 00
[5C3h 1475   1]                      Apic ID : D9
[5C4h 1476   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[5C8h 1480   1]              Local Sapic EID : 00
[5C9h 1481   3]    Proximity Domain High(24) : 000000
[5CCh 1484   4]                 Clock Domain : 00000000

[5D0h 1488   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[5D1h 1489   1]                       Length : 10

[5D2h 1490   1]      Proximity Domain Low(8) : 00
[5D3h 1491   1]                      Apic ID : DA
[5D4h 1492   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[5D8h 1496   1]              Local Sapic EID : 00
[5D9h 1497   3]    Proximity Domain High(24) : 000000
[5DCh 1500   4]                 Clock Domain : 00000000

[5E0h 1504   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[5E1h 1505   1]                       Length : 10

[5E2h 1506   1]      Proximity Domain Low(8) : 00
[5E3h 1507   1]                      Apic ID : DB
[5E4h 1508   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[5E8h 1512   1]              Local Sapic EID : 00
[5E9h 1513   3]    Proximity Domain High(24) : 000000
[5ECh 1516   4]                 Clock Domain : 00000000

[5F0h 1520   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[5F1h 1521   1]                       Length : 10

[5F2h 1522   1]      Proximity Domain Low(8) : 00
[5F3h 1523   1]                      Apic ID : DC
[5F4h 1524   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[5F8h 1528   1]              Local Sapic EID : 00
[5F9h 1529   3]    Proximity Domain High(24) : 000000
[5FCh 1532   4]                 Clock Domain : 00000000

[600h 1536   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[601h 1537   1]                       Length : 10

[602h 1538   1]      Proximity Domain Low(8) : 00
[603h 1539   1]                      Apic ID : DD
[604h 1540   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[608h 1544   1]              Local Sapic EID : 00
[609h 1545   3]    Proximity Domain High(24) : 000000
[60Ch 1548   4]                 Clock Domain : 00000000

[610h 1552   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[611h 1553   1]                       Length : 10

[612h 1554   1]      Proximity Domain Low(8) : 00
[613h 1555   1]                      Apic ID : DE
[614h 1556   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[618h 1560   1]              Local Sapic EID : 00
[619h 1561   3]    Proximity Domain High(24) : 000000
[61Ch 1564   4]                 Clock Domain : 00000000

[620h 1568   1]                Subtable Type : 00 [Processor Local APIC/SAPIC Affinity]
[621h 1569   1]                       Length : 10

[622h 1570   1]      Proximity Domain Low(8) : 00
[623h 1571   1]                      Apic ID : DF
[624h 1572   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
[628h 1576   1]              Local Sapic EID : 00
[629h 1577   3]    Proximity Domain High(24) : 000000
[62Ch 1580   4]                 Clock Domain : 00000000

[630h 1584   1]                Subtable Type : 01 [Memory Affinity]
[631h 1585   1]                       Length : 28

[632h 1586   4]             Proximity Domain : 00000001
[636h 1590   2]                    Reserved1 : 0000
[638h 1592   8]                 Base Address : 0000000000000000
[640h 1600   8]               Address Length : 0000000440000000
[648h 1608   4]                    Reserved2 : 00000000
[64Ch 1612   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[650h 1616   8]                    Reserved3 : 0000000000000000

[658h 1624   1]                Subtable Type : 01 [Memory Affinity]
[659h 1625   1]                       Length : 28

[65Ah 1626   4]             Proximity Domain : 00000002
[65Eh 1630   2]                    Reserved1 : 0000
[660h 1632   8]                 Base Address : 0000000440000000
[668h 1640   8]               Address Length : 0000000400000000
[670h 1648   4]                    Reserved2 : 00000000
[674h 1652   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[678h 1656   8]                    Reserved3 : 0000000000000000

[680h 1664   1]                Subtable Type : 01 [Memory Affinity]
[681h 1665   1]                       Length : 28

[682h 1666   4]             Proximity Domain : 00000003
[686h 1670   2]                    Reserved1 : 0000
[688h 1672   8]                 Base Address : 0000000840000000
[690h 1680   8]               Address Length : 0000000400000000
[698h 1688   4]                    Reserved2 : 00000000
[69Ch 1692   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[6A0h 1696   8]                    Reserved3 : 0000000000000000

[6A8h 1704   1]                Subtable Type : 01 [Memory Affinity]
[6A9h 1705   1]                       Length : 28

[6AAh 1706   4]             Proximity Domain : 00000004
[6AEh 1710   2]                    Reserved1 : 0000
[6B0h 1712   8]                 Base Address : 0000000C40000000
[6B8h 1720   8]               Address Length : 0000000400000000
[6C0h 1728   4]                    Reserved2 : 00000000
[6C4h 1732   4]        Flags (decoded below) : 00000001
                                     Enabled : 1
                               Hot Pluggable : 0
                                Non-Volatile : 0
[6C8h 1736   8]                    Reserved3 : 0000000000000000

[6D0h 1744   1]                Subtable Type : 01 [Memory Affinity]
[6D1h 1745   1]                       Length : 28

[6D2h 1746   4]             Proximity Domain : 00000000
[6D6h 1750   2]                    Reserved1 : 0000
[6D8h 1752   8]                 Base Address : 0000000000000000
[6E0h 1760   8]               Address Length : 0000000000000000
[6E8h 1768   4]                    Reserved2 : 00000000
[6ECh 1772   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[6F0h 1776   8]                    Reserved3 : 0000000000000000

[6F8h 1784   1]                Subtable Type : 01 [Memory Affinity]
[6F9h 1785   1]                       Length : 28

[6FAh 1786   4]             Proximity Domain : 00000000
[6FEh 1790   2]                    Reserved1 : 0000
[700h 1792   8]                 Base Address : 0000000000000000
[708h 1800   8]               Address Length : 0000000000000000
[710h 1808   4]                    Reserved2 : 00000000
[714h 1812   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[718h 1816   8]                    Reserved3 : 0000000000000000

[720h 1824   1]                Subtable Type : 01 [Memory Affinity]
[721h 1825   1]                       Length : 28

[722h 1826   4]             Proximity Domain : 00000000
[726h 1830   2]                    Reserved1 : 0000
[728h 1832   8]                 Base Address : 0000000000000000
[730h 1840   8]               Address Length : 0000000000000000
[738h 1848   4]                    Reserved2 : 00000000
[73Ch 1852   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[740h 1856   8]                    Reserved3 : 0000000000000000

[748h 1864   1]                Subtable Type : 01 [Memory Affinity]
[749h 1865   1]                       Length : 28

[74Ah 1866   4]             Proximity Domain : 00000000
[74Eh 1870   2]                    Reserved1 : 0000
[750h 1872   8]                 Base Address : 0000000000000000
[758h 1880   8]               Address Length : 0000000000000000
[760h 1888   4]                    Reserved2 : 00000000
[764h 1892   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[768h 1896   8]                    Reserved3 : 0000000000000000

[770h 1904   1]                Subtable Type : 01 [Memory Affinity]
[771h 1905   1]                       Length : 28

[772h 1906   4]             Proximity Domain : 00000000
[776h 1910   2]                    Reserved1 : 0000
[778h 1912   8]                 Base Address : 0000000000000000
[780h 1920   8]               Address Length : 0000000000000000
[788h 1928   4]                    Reserved2 : 00000000
[78Ch 1932   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[790h 1936   8]                    Reserved3 : 0000000000000000

[798h 1944   1]                Subtable Type : 01 [Memory Affinity]
[799h 1945   1]                       Length : 28

[79Ah 1946   4]             Proximity Domain : 00000000
[79Eh 1950   2]                    Reserved1 : 0000
[7A0h 1952   8]                 Base Address : 0000000000000000
[7A8h 1960   8]               Address Length : 0000000000000000
[7B0h 1968   4]                    Reserved2 : 00000000
[7B4h 1972   4]        Flags (decoded below) : 00000000
                                     Enabled : 0
                               Hot Pluggable : 0
                                Non-Volatile : 0
[7B8h 1976   8]                    Reserved3 : 0000000000000000

Raw Table Data: Length 1984 (0x7C0)

    0000: 53 52 41 54 C0 07 00 00 01 34 44 45 4C 4C 20 20  // SRAT.....4DELL  
    0010: 50 45 5F 53 43 33 20 20 01 00 00 00 44 45 4C 4C  // PE_SC3  ....DELL
    0020: 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 10 01 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 10 02 20 01 00 00 00 00 00 00 00 00 00 00 00  // ... ............
    0050: 00 10 03 40 01 00 00 00 00 00 00 00 00 00 00 00  // ...@............
    0060: 00 10 04 60 01 00 00 00 00 00 00 00 00 00 00 00  // ...`............
    0070: 00 10 01 02 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 10 02 22 01 00 00 00 00 00 00 00 00 00 00 00  // ..."............
    0090: 00 10 03 42 01 00 00 00 00 00 00 00 00 00 00 00  // ...B............
    00A0: 00 10 04 62 01 00 00 00 00 00 00 00 00 00 00 00  // ...b............
    00B0: 00 10 01 04 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 10 02 24 01 00 00 00 00 00 00 00 00 00 00 00  // ...$............
    00D0: 00 10 03 44 01 00 00 00 00 00 00 00 00 00 00 00  // ...D............
    00E0: 00 10 04 64 01 00 00 00 00 00 00 00 00 00 00 00  // ...d............
    00F0: 00 10 01 06 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 10 02 26 01 00 00 00 00 00 00 00 00 00 00 00  // ...&............
    0110: 00 10 03 46 01 00 00 00 00 00 00 00 00 00 00 00  // ...F............
    0120: 00 10 04 66 01 00 00 00 00 00 00 00 00 00 00 00  // ...f............
    0130: 00 10 01 08 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 10 02 28 01 00 00 00 00 00 00 00 00 00 00 00  // ...(............
    0150: 00 10 03 48 01 00 00 00 00 00 00 00 00 00 00 00  // ...H............
    0160: 00 10 04 68 01 00 00 00 00 00 00 00 00 00 00 00  // ...h............
    0170: 00 10 01 10 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 10 02 30 01 00 00 00 00 00 00 00 00 00 00 00  // ...0............
    0190: 00 10 03 50 01 00 00 00 00 00 00 00 00 00 00 00  // ...P............
    01A0: 00 10 04 70 01 00 00 00 00 00 00 00 00 00 00 00  // ...p............
    01B0: 00 10 01 12 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    01C0: 00 10 02 32 01 00 00 00 00 00 00 00 00 00 00 00  // ...2............
    01D0: 00 10 03 52 01 00 00 00 00 00 00 00 00 00 00 00  // ...R............
    01E0: 00 10 04 72 01 00 00 00 00 00 00 00 00 00 00 00  // ...r............
    01F0: 00 10 01 14 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0200: 00 10 02 34 01 00 00 00 00 00 00 00 00 00 00 00  // ...4............
    0210: 00 10 03 54 01 00 00 00 00 00 00 00 00 00 00 00  // ...T............
    0220: 00 10 04 74 01 00 00 00 00 00 00 00 00 00 00 00  // ...t............
    0230: 00 10 01 16 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0240: 00 10 02 36 01 00 00 00 00 00 00 00 00 00 00 00  // ...6............
    0250: 00 10 03 56 01 00 00 00 00 00 00 00 00 00 00 00  // ...V............
    0260: 00 10 04 76 01 00 00 00 00 00 00 00 00 00 00 00  // ...v............
    0270: 00 10 01 18 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0280: 00 10 02 38 01 00 00 00 00 00 00 00 00 00 00 00  // ...8............
    0290: 00 10 03 58 01 00 00 00 00 00 00 00 00 00 00 00  // ...X............
    02A0: 00 10 04 78 01 00 00 00 00 00 00 00 00 00 00 00  // ...x............
    02B0: 00 10 01 01 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    02C0: 00 10 02 21 01 00 00 00 00 00 00 00 00 00 00 00  // ...!............
    02D0: 00 10 03 41 01 00 00 00 00 00 00 00 00 00 00 00  // ...A............
    02E0: 00 10 04 61 01 00 00 00 00 00 00 00 00 00 00 00  // ...a............
    02F0: 00 10 01 03 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0300: 00 10 02 23 01 00 00 00 00 00 00 00 00 00 00 00  // ...#............
    0310: 00 10 03 43 01 00 00 00 00 00 00 00 00 00 00 00  // ...C............
    0320: 00 10 04 63 01 00 00 00 00 00 00 00 00 00 00 00  // ...c............
    0330: 00 10 01 05 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 10 02 25 01 00 00 00 00 00 00 00 00 00 00 00  // ...%............
    0350: 00 10 03 45 01 00 00 00 00 00 00 00 00 00 00 00  // ...E............
    0360: 00 10 04 65 01 00 00 00 00 00 00 00 00 00 00 00  // ...e............
    0370: 00 10 01 07 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 10 02 27 01 00 00 00 00 00 00 00 00 00 00 00  // ...'............
    0390: 00 10 03 47 01 00 00 00 00 00 00 00 00 00 00 00  // ...G............
    03A0: 00 10 04 67 01 00 00 00 00 00 00 00 00 00 00 00  // ...g............
    03B0: 00 10 01 09 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    03C0: 00 10 02 29 01 00 00 00 00 00 00 00 00 00 00 00  // ...)............
    03D0: 00 10 03 49 01 00 00 00 00 00 00 00 00 00 00 00  // ...I............
    03E0: 00 10 04 69 01 00 00 00 00 00 00 00 00 00 00 00  // ...i............
    03F0: 00 10 01 11 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0400: 00 10 02 31 01 00 00 00 00 00 00 00 00 00 00 00  // ...1............
    0410: 00 10 03 51 01 00 00 00 00 00 00 00 00 00 00 00  // ...Q............
    0420: 00 10 04 71 01 00 00 00 00 00 00 00 00 00 00 00  // ...q............
    0430: 00 10 01 13 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0440: 00 10 02 33 01 00 00 00 00 00 00 00 00 00 00 00  // ...3............
    0450: 00 10 03 53 01 00 00 00 00 00 00 00 00 00 00 00  // ...S............
    0460: 00 10 04 73 01 00 00 00 00 00 00 00 00 00 00 00  // ...s............
    0470: 00 10 01 15 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0480: 00 10 02 35 01 00 00 00 00 00 00 00 00 00 00 00  // ...5............
    0490: 00 10 03 55 01 00 00 00 00 00 00 00 00 00 00 00  // ...U............
    04A0: 00 10 04 75 01 00 00 00 00 00 00 00 00 00 00 00  // ...u............
    04B0: 00 10 01 17 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 10 02 37 01 00 00 00 00 00 00 00 00 00 00 00  // ...7............
    04D0: 00 10 03 57 01 00 00 00 00 00 00 00 00 00 00 00  // ...W............
    04E0: 00 10 04 77 01 00 00 00 00 00 00 00 00 00 00 00  // ...w............
    04F0: 00 10 01 19 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0500: 00 10 02 39 01 00 00 00 00 00 00 00 00 00 00 00  // ...9............
    0510: 00 10 03 59 01 00 00 00 00 00 00 00 00 00 00 00  // ...Y............
    0520: 00 10 04 79 01 00 00 00 00 00 00 00 00 00 00 00  // ...y............
    0530: 00 10 00 D0 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0540: 00 10 00 D1 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0550: 00 10 00 D2 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0560: 00 10 00 D3 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0570: 00 10 00 D4 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0580: 00 10 00 D5 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0590: 00 10 00 D6 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05A0: 00 10 00 D7 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05B0: 00 10 00 D8 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05C0: 00 10 00 D9 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05D0: 00 10 00 DA 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05E0: 00 10 00 DB 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05F0: 00 10 00 DC 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0600: 00 10 00 DD 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0610: 00 10 00 DE 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0620: 00 10 00 DF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0630: 01 28 01 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0640: 00 00 00 40 04 00 00 00 00 00 00 00 01 00 00 00  // ...@............
    0650: 00 00 00 00 00 00 00 00 01 28 02 00 00 00 00 00  // .........(......
    0660: 00 00 00 40 04 00 00 00 00 00 00 00 04 00 00 00  // ...@............
    0670: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0680: 01 28 03 00 00 00 00 00 00 00 00 40 08 00 00 00  // .(.........@....
    0690: 00 00 00 00 04 00 00 00 00 00 00 00 01 00 00 00  // ................
    06A0: 00 00 00 00 00 00 00 00 01 28 04 00 00 00 00 00  // .........(......
    06B0: 00 00 00 40 0C 00 00 00 00 00 00 00 04 00 00 00  // ...@............
    06C0: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    06D0: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    06E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    0700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0720: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0740: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    0750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0770: 01 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0790: 00 00 00 00 00 00 00 00 01 28 00 00 00 00 00 00  // .........(......
    07A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


SSDT
----
DefinitionBlock ("", "SSDT", 1, "INTEL ", "PPM RCM ", 0x80000001)
{
    External (_PR_.CP17, DeviceObj)
    External (_PR_.CP18, DeviceObj)
    External (_PR_.CP19, DeviceObj)
    External (_PR_.CP20, DeviceObj)
    External (_PR_.CP21, DeviceObj)
    External (_PR_.CP22, DeviceObj)
    External (_PR_.CP23, DeviceObj)
    External (_PR_.CP24, DeviceObj)
    External (_PR_.CP25, DeviceObj)
    External (_PR_.CP26, DeviceObj)
    External (_PR_.CP27, DeviceObj)
    External (_PR_.CP28, DeviceObj)
    External (_PR_.CP29, DeviceObj)
    External (_PR_.CP30, DeviceObj)
    External (_PR_.CP31, DeviceObj)
    External (_PR_.CP32, DeviceObj)
    External (_PR_.CP33, DeviceObj)
    External (_PR_.CP34, DeviceObj)
    External (_PR_.CP35, DeviceObj)
    External (_PR_.CP36, DeviceObj)
    External (_PR_.CP37, DeviceObj)
    External (_PR_.CP38, DeviceObj)
    External (_PR_.CP39, DeviceObj)
    External (_PR_.CP40, DeviceObj)
    External (_PR_.CP41, DeviceObj)
    External (_PR_.CP42, DeviceObj)
    External (_PR_.CP43, DeviceObj)
    External (_PR_.CP44, DeviceObj)
    External (_PR_.CP45, DeviceObj)
    External (_PR_.CP46, DeviceObj)
    External (_PR_.CP47, DeviceObj)
    External (_PR_.CP48, DeviceObj)
    External (_PR_.CP49, DeviceObj)
    External (_PR_.CP50, DeviceObj)
    External (_PR_.CP51, DeviceObj)
    External (_PR_.CP52, DeviceObj)
    External (_PR_.CP53, DeviceObj)
    External (_PR_.CP54, DeviceObj)
    External (_PR_.CP55, DeviceObj)
    External (_PR_.CP56, DeviceObj)
    External (_PR_.CP57, DeviceObj)
    External (_PR_.CP58, DeviceObj)
    External (_PR_.CP59, DeviceObj)
    External (_PR_.CP60, DeviceObj)
    External (_PR_.CP61, DeviceObj)
    External (_PR_.CP62, DeviceObj)
    External (_PR_.CP63, DeviceObj)
    External (_PR_.CP64, DeviceObj)
    External (_PR_.CP65, DeviceObj)
    External (_PR_.CP66, DeviceObj)
    External (_PR_.CP67, DeviceObj)
    External (_PR_.CP68, DeviceObj)
    External (_PR_.CP69, DeviceObj)
    External (_PR_.CP70, DeviceObj)
    External (_PR_.CP71, DeviceObj)
    External (_PR_.CP72, DeviceObj)
    External (_PR_.CP73, DeviceObj)
    External (_PR_.CP74, DeviceObj)
    External (_PR_.CP75, DeviceObj)
    External (_PR_.CP76, DeviceObj)
    External (_PR_.CP77, DeviceObj)
    External (_PR_.CP78, DeviceObj)
    External (_PR_.CP79, DeviceObj)
    External (_PR_.CP80, DeviceObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)
    External (_PR_.CPU8, DeviceObj)
    External (_PR_.CPU9, DeviceObj)
    External (_PR_.CPUA, DeviceObj)
    External (_PR_.CPUB, DeviceObj)
    External (_PR_.CPUC, DeviceObj)
    External (_PR_.CPUD, DeviceObj)
    External (_PR_.CPUE, DeviceObj)
    External (_PR_.CPUF, DeviceObj)
    External (_PR_.CPUG, DeviceObj)
    External (PST0, IntObj)
    External (PST1, IntObj)
    External (PST2, IntObj)
    External (PST3, IntObj)

    Name (\_PR.MAXT, 0x00000050)
    Scope (\_PR.CPU1)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPU1._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPU1._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPU1._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST0) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000000, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CPU2)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPU2._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPU2._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPU2._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST1) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000020, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CPU3)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPU3._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPU3._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPU3._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST2) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000040, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CPU4)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPU4._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPU4._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPU4._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST3) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000060, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CPU5)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPU5._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPU5._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPU5._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST0) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000002, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CPU6)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPU6._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPU6._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPU6._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST1) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000022, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CPU7)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPU7._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPU7._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPU7._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST2) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000042, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CPU8)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPU8._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPU8._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPU8._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST3) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000062, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CPU9)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPU9._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPU9._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPU9._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST0) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000004, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CPUA)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPUA._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPUA._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPUA._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST1) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000024, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CPUB)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPUB._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPUB._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPUB._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST2) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000044, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CPUC)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPUC._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPUC._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPUC._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST3) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000064, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CPUD)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPUD._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPUD._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPUD._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST0) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000006, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CPUE)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPUE._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPUE._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPUE._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST1) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000026, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CPUF)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPUF._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPUF._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPUF._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST2) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000046, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CPUG)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPUG._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPUG._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPUG._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST3) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000066, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP17)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP17._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP17._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP17._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST0) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000008, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP18)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP18._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP18._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP18._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST1) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000028, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP19)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP19._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP19._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP19._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST2) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000048, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP20)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP20._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP20._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP20._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST3) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000068, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP21)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP21._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP21._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP21._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST0) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000010, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP22)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP22._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP22._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP22._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST1) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000030, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP23)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP23._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP23._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP23._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST2) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000050, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP24)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP24._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP24._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP24._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST3) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000070, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP25)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP25._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP25._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP25._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST0) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000012, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP26)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP26._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP26._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP26._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST1) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000032, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP27)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP27._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP27._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP27._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST2) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000052, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP28)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP28._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP28._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP28._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST3) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000072, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP29)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP29._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP29._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP29._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST0) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000014, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP30)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP30._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP30._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP30._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST1) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000034, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP31)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP31._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP31._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP31._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST2) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000054, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP32)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP32._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP32._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP32._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST3) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000074, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP33)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP33._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP33._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP33._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST0) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000016, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP34)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP34._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP34._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP34._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST1) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000036, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP35)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP35._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP35._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP35._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST2) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000056, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP36)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP36._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP36._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP36._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST3) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000076, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP37)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP37._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP37._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP37._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST0) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000018, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP38)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP38._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP38._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP38._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST1) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000038, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP39)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP39._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP39._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP39._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST2) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000058, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP40)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP40._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP40._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP40._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST3) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000078, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP41)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP41._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP41._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP41._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST0) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000001, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP42)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP42._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP42._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP42._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST1) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000021, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP43)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP43._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP43._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP43._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST2) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000041, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP44)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP44._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP44._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP44._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST3) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000061, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP45)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP45._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP45._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP45._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST0) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000003, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP46)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP46._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP46._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP46._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST1) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000023, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP47)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP47._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP47._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP47._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST2) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000043, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP48)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP48._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP48._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP48._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST3) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000063, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP49)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP49._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP49._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP49._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST0) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000005, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP50)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP50._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP50._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP50._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST1) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000025, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP51)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP51._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP51._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP51._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST2) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000045, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP52)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP52._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP52._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP52._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST3) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000065, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP53)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP53._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP53._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP53._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST0) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000007, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP54)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP54._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP54._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP54._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST1) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000027, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP55)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP55._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP55._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP55._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST2) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000047, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP56)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP56._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP56._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP56._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST3) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000067, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP57)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP57._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP57._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP57._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST0) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000009, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP58)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP58._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP58._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP58._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST1) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000029, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP59)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP59._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP59._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP59._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST2) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000049, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP60)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP60._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP60._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP60._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST3) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000069, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP61)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP61._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP61._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP61._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST0) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000011, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP62)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP62._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP62._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP62._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST1) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000031, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP63)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP63._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP63._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP63._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST2) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000051, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP64)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP64._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP64._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP64._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST3) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000071, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP65)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP65._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP65._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP65._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST0) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000013, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP66)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP66._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP66._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP66._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST1) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000033, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP67)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP67._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP67._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP67._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST2) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000053, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP68)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP68._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP68._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP68._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST3) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000073, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP69)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP69._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP69._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP69._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST0) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000015, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP70)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP70._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP70._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP70._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST1) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000035, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP71)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP71._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP71._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP71._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST2) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000055, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP72)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP72._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP72._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP72._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST3) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000075, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP73)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP73._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP73._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP73._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST0) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000017, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP74)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP74._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP74._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP74._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST1) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000037, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP75)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP75._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP75._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP75._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST2) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000057, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP76)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP76._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP76._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP76._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST3) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000077, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP77)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP77._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP77._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP77._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST0) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000019, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP78)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP78._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP78._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP78._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST1) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000039, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP79)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP79._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP79._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP79._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST2) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000059, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }

    Scope (\_PR.CP80)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000001)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000000)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CP80._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CP80._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CP80._OSC.CAP0 */
            Return (Arg3)
        }

        Method (PPSS, 0, NotSerialized)
        {
            If (PSEN)
            {
                Return (Package (0x0E)
                {
                    Package (0x06)
                    {
                        0x00000961, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001D00, 
                        0x00001D00
                    }, 

                    Package (0x06)
                    {
                        0x00000960, 
                        0x00017318, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001800, 
                        0x00001800
                    }, 

                    Package (0x06)
                    {
                        0x000008FC, 
                        0x00015F90, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001700, 
                        0x00001700
                    }, 

                    Package (0x06)
                    {
                        0x00000898, 
                        0x00014C08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001600, 
                        0x00001600
                    }, 

                    Package (0x06)
                    {
                        0x00000834, 
                        0x00013880, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001500, 
                        0x00001500
                    }, 

                    Package (0x06)
                    {
                        0x000007D0, 
                        0x000124F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001400, 
                        0x00001400
                    }, 

                    Package (0x06)
                    {
                        0x0000076C, 
                        0x00011170, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001300, 
                        0x00001300
                    }, 

                    Package (0x06)
                    {
                        0x00000708, 
                        0x000101D0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001200, 
                        0x00001200
                    }, 

                    Package (0x06)
                    {
                        0x000006A4, 
                        0x0000F230, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001100, 
                        0x00001100
                    }, 

                    Package (0x06)
                    {
                        0x00000640, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00001000, 
                        0x00001000
                    }, 

                    Package (0x06)
                    {
                        0x000005DC, 
                        0x0000CF08, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000F00, 
                        0x00000F00
                    }, 

                    Package (0x06)
                    {
                        0x00000578, 
                        0x0000BF68, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000E00, 
                        0x00000E00
                    }, 

                    Package (0x06)
                    {
                        0x00000514, 
                        0x0000AFC8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000D00, 
                        0x00000D00
                    }, 

                    Package (0x06)
                    {
                        0x000004B0, 
                        0x0000A028, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000C00, 
                        0x00000C00
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (P_CT, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (PPPC, 0, NotSerialized)
        {
            Return (PST3) /* External reference */
        }

        Method (P_SD, 0, NotSerialized)
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000079, 
                        0x000000FE, 
                        0x00000001
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }

        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (CSEN)
            {
                If ((MWOS && (TYPE & 0x0200)))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x0001, 
                            0x000003E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x0029, 
                            0x0000015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x0001, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000815, // Address
                                ,)
                        }, 

                        0x02, 
                        0x0029, 
                        0x0000015E
                    }
                })
            }

            Return (Package (0x01)
            {
                Zero
            })
        }
    }
}



TCPA
----
[000h 0000   4]                    Signature : "TCPA"    [Trusted Computing Platform Alliance table]
[004h 0004   4]                 Table Length : 00000064
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 2A
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "PE_SC3  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "DELL"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   2]               Platform Class : 0001
[026h 0038   2]                     Reserved : 0000
[028h 0040   8]         Min Event Log Length : 0000000000010000
[030h 0048   8]            Event Log Address : 00000000BD35E000
[038h 0056   2]       Specification Revision : 0120
[03Ah 0058   1] Device Flags (decoded below) : 00
                                  Pci Device : 0
                                  Bus is Pnp : 0
                               Address Valid : 0
[03Bh 0059   1] Interrupt Flags (decoded below) : 00
                                        Mode : 0
                                    Polarity : 0
                           GPE SCI Triggered : 0
                     Global System Interrupt : 0
[03Ch 0060   1]                   Gpe Number : 00
[03Dh 0061   3]                     Reserved : 000000
[040h 0064   4]             Global Interrupt : 00000000

[044h 0068  12]                      Address : [Generic Address Structure]
[044h 0068   1]                     Space ID : 00 [SystemMemory]
[045h 0069   1]                    Bit Width : 00
[046h 0070   1]                   Bit Offset : 00
[047h 0071   1]         Encoded Access Width : 00 [Undefined/Legacy]
[048h 0072   8]                      Address : 00000000FED40000

[050h 0080   4]                     Reserved : 00000000
[054h 0084  12]        Configuration Address : [Generic Address Structure]
[054h 0084   1]                     Space ID : 00 [SystemMemory]
[055h 0085   1]                    Bit Width : 00
[056h 0086   1]                   Bit Offset : 00
[057h 0087   1]         Encoded Access Width : 00 [Undefined/Legacy]
[058h 0088   8]                      Address : 0000000000000000

[060h 0096   1]                    Pci Group : 00
[061h 0097   1]                      Pci Bus : 00
[062h 0098   1]                   Pci Device : 00
[063h 0099   1]                 Pci Function : 00

Raw Table Data: Length 100 (0x64)

    0000: 54 43 50 41 64 00 00 00 02 2A 44 45 4C 4C 20 20  // TCPAd....*DELL  
    0010: 50 45 5F 53 43 33 20 20 01 00 00 00 44 45 4C 4C  // PE_SC3  ....DELL
    0020: 01 00 00 00 01 00 00 00 00 00 01 00 00 00 00 00  // ................
    0030: 00 E0 35 BD 00 00 00 00 20 01 00 00 00 00 00 00  // ..5..... .......
    0040: 00 00 00 00 00 00 00 00 00 00 D4 FE 00 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0060: 00 00 00 00                                      // ....


WD__
----
[000h 0000   4]                    Signature : "WD__"    
[004h 0004   4]                 Table Length : 00000134
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : DA
[00Ah 0010   6]                       Oem ID : "DELL  "
[010h 0016   8]                 Oem Table ID : "PE_SC3  "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "DELL"
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [WD__]


Raw Table Data: Length 308 (0x134)

    0000: 57 44 5F 5F 34 01 00 00 01 DA 44 45 4C 4C 20 20  // WD__4.....DELL  
    0010: 50 45 5F 53 43 33 20 20 01 00 00 00 44 45 4C 4C  // PE_SC3  ....DELL
    0020: 01 00 00 00 20 00 00 00 FF 00 FF FF FF 00 00 00  // .... ...........
    0030: 58 02 00 00 FF 03 00 00 02 00 00 00 00 00 00 00  // X...............
    0040: 0A 00 00 00 01 82 00 00 01 10 00 02 60 08 00 00  // ............`...
    0050: 00 00 00 00 00 00 00 00 FF 03 00 00 04 01 00 00  // ................
    0060: 01 10 00 02 60 08 00 00 00 00 00 00 00 00 00 00  // ....`...........
    0070: FF 03 00 00 05 01 00 00 01 10 00 02 72 08 00 00  // ............r...
    0080: 00 00 00 00 00 00 00 00 FF 03 00 00 06 83 00 00  // ................
    0090: 01 10 00 02 72 08 00 00 00 00 00 00 00 00 00 00  // ....r...........
    00A0: FF 03 00 00 08 00 00 00 01 10 00 02 68 08 00 00  // ............h...
    00B0: 00 00 00 00 00 00 00 00 00 08 00 00 09 82 00 00  // ................
    00C0: 01 10 00 02 68 08 00 00 00 00 00 00 00 00 00 00  // ....h...........
    00D0: 00 08 00 00 0A 00 00 00 01 10 00 02 68 08 00 00  // ............h...
    00E0: 00 00 00 00 00 08 00 00 00 08 00 00 0B 82 00 00  // ................
    00F0: 01 10 00 02 68 08 00 00 00 00 00 00 00 08 00 00  // ....h...........
    0100: 00 08 00 00 20 00 00 00 01 10 00 02 6A 08 00 00  // .... .......j...
    0110: 00 00 00 00 10 00 00 00 10 00 00 00 21 82 00 00  // ............!...
    0120: 01 10 00 02 6A 08 00 00 00 00 00 00 00 00 00 00  // ....j...........
    0130: 10 00 00 00                                      // ....


