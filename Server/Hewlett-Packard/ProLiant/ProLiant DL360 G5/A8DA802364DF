
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20200925
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000C85  0x01  "HP    "  "SSDTP   "  0x00000001  "INTL"   0x20061109
 02)  SPCR  0x00000050  0x01  "HP    "  "SPCRRBSU"  0x00000001  "    "   0x0000162E
 03)  MCFG  0x0000003C  0x01  "HP    "  "ProLiant"  0x00000001  "    "   0x00000000
 04)  FFFF  0x00000176  0x01  "HP    "  "ProLiant"  0x00000001  "    "   0x0000162E
 05)  APIC  0x0000009E  0x01  "HP    "  "ProLiant"  0x00000002  "    "   0x00000000
 06)  SPMI  0x00000040  0x05  "HP    "  "ProLiant"  0x00000001  "    "   0x0000162E
 07)  ERST  0x000001D0  0x01  "HP    "  "ProLiant"  0x00000001  "    "   0x0000162E
 08)  DSDT  0x00002148  0x01  "HP    "  "DSDT    "  0x00000001  "INTL"   0x20030228
 09)  HEST  0x000000BC  0x01  "HP    "  "ProLiant"  0x00000001  "    "   0x0000162E
 10)  BERT  0x00000030  0x01  "HP    "  "ProLiant"  0x00000001  "    "   0x0000162E
 11)  FACP  0x000000F4  0x03  "HP    "  "ProLiant"  0x00000002  "    "   0x0000162E
 12)  HPET  0x00000038  0x01  "HP    "  "ProLiant"  0x00000002  "    "   0x0000162E
 13)  FACS  0x00000040  0x01
 14)  SSDT  0x000000AD  0x01  "HP    "  "CPU2CST "  0x00000001  "INTL"   0x20061109
 15)  SSDT  0x000000AD  0x01  "HP    "  "CPU0CST "  0x00000001  "INTL"   0x20061109
 16)  SSDT  0x000000AD  0x01  "HP    "  "CPU7CST "  0x00000001  "INTL"   0x20061109
 17)  SSDT  0x000000AD  0x01  "HP    "  "CPU5CST "  0x00000001  "INTL"   0x20061109
 18)  SSDT  0x000000AD  0x01  "HP    "  "CPU3CST "  0x00000001  "INTL"   0x20061109
 19)  SSDT  0x000000AD  0x01  "HP    "  "CPU1CST "  0x00000001  "INTL"   0x20061109
 20)  SSDT  0x000000AD  0x01  "HP    "  "CPU6CST "  0x00000001  "INTL"   0x20061109
 21)  SSDT  0x000000AD  0x01  "HP    "  "CPU4CST "  0x00000001  "INTL"   0x20061109

Found 21 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000009E
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 93
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "ProLiant"
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : ""
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 04
[037h 0055   1]                Local Apic ID : 04
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 02
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 06
[047h 0071   1]                Local Apic ID : 06
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 01
[04Fh 0079   1]                Local Apic ID : 01
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 05
[057h 0087   1]                Local Apic ID : 05
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 03
[05Fh 0095   1]                Local Apic ID : 03
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 07
[067h 0103   1]                Local Apic ID : 07
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 01 [I/O APIC]
[06Dh 0109   1]                       Length : 0C
[06Eh 0110   1]                  I/O Apic ID : 08
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]                      Address : FEC00000
[074h 0116   4]                    Interrupt : 00000000

[078h 0120   1]                Subtable Type : 01 [I/O APIC]
[079h 0121   1]                       Length : 0C
[07Ah 0122   1]                  I/O Apic ID : 09
[07Bh 0123   1]                     Reserved : 00
[07Ch 0124   4]                      Address : FEC80000
[080h 0128   4]                    Interrupt : 00000018

[084h 0132   1]                Subtable Type : 02 [Interrupt Source Override]
[085h 0133   1]                       Length : 0A
[086h 0134   1]                          Bus : 00
[087h 0135   1]                       Source : 00
[088h 0136   4]                    Interrupt : 00000002
[08Ch 0140   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1

[08Eh 0142   1]                Subtable Type : 02 [Interrupt Source Override]
[08Fh 0143   1]                       Length : 0A
[090h 0144   1]                          Bus : 00
[091h 0145   1]                       Source : 09
[092h 0146   4]                    Interrupt : 00000009
[096h 0150   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[098h 0152   1]                Subtable Type : 04 [Local APIC NMI]
[099h 0153   1]                       Length : 06
[09Ah 0154   1]                 Processor ID : FF
[09Bh 0155   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[09Dh 0157   1]         Interrupt Input LINT : 01

Raw Table Data: Length 158 (0x9E)

    0000: 41 50 49 43 9E 00 00 00 01 93 48 50 20 20 20 20  // APIC......HP    
    0010: 50 72 6F 4C 69 61 6E 74 02 00 00 00 00 00 00 00  // ProLiant........
    0020: 00 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 04 04 01 00 00 00 00 08 02 02  // ................
    0040: 01 00 00 00 00 08 06 06 01 00 00 00 00 08 01 01  // ................
    0050: 01 00 00 00 00 08 05 05 01 00 00 00 00 08 03 03  // ................
    0060: 01 00 00 00 00 08 07 07 01 00 00 00 01 0C 08 00  // ................
    0070: 00 00 C0 FE 00 00 00 00 01 0C 09 00 00 00 C8 FE  // ................
    0080: 18 00 00 00 02 0A 00 00 02 00 00 00 05 00 02 0A  // ................
    0090: 00 09 09 00 00 00 0D 00 04 06 FF 00 00 01        // ..............


BERT
----
[000h 0000   4]                    Signature : "BERT"    [Boot Error Record Table]
[004h 0004   4]                 Table Length : 00000030
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 83
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "ProLiant"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "  "
[020h 0032   4]        Asl Compiler Revision : 0000162E

[024h 0036   4]     Boot Error Region Length : 00000040
[028h 0040   8]    Boot Error Region Address : 00000000CFE4D000

Raw Table Data: Length 48 (0x30)

    0000: 42 45 52 54 30 00 00 00 01 83 48 50 20 20 20 20  // BERT0.....HP    
    0010: 50 72 6F 4C 69 61 6E 74 01 00 00 00 D2 04 00 00  // ProLiant........
    0020: 2E 16 00 00 40 00 00 00 00 D0 E4 CF 00 00 00 00  // ....@...........


DSDT
----
DefinitionBlock ("", "DSDT", 1, "HP    ", "DSDT", 0x00000001)
{
    Scope (_PR)
    {
        Processor (CPU0, 0x00, 0x00000910, 0x06) {}
        Processor (CPU1, 0x01, 0x00000910, 0x06) {}
        Processor (CPU2, 0x02, 0x00000910, 0x06) {}
        Processor (CPU3, 0x03, 0x00000910, 0x06) {}
        Processor (CPU4, 0x04, 0x00000910, 0x06) {}
        Processor (CPU5, 0x05, 0x00000910, 0x06) {}
        Processor (CPU6, 0x06, 0x00000910, 0x06) {}
        Processor (CPU7, 0x07, 0x00000910, 0x06) {}
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x06, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Device (_SB.PCI0)
    {
        Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
        Name (_CID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _CID: Compatible ID
        Name (_ADR, Zero)  // _ADR: Address
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x0B, 
            0x05
        })
        Device (CFG0)
        {
            Name (_ADR, 0x00100001)  // _ADR: Address
            OperationRegion (MEM0, PCI_Config, Zero, 0x0100)
            Field (MEM0, AnyAcc, NoLock, Preserve)
            {
                Offset (0x6C), 
                TOLM,   16
            }
        }

        Name (REST, ResourceTemplate ()
        {
            WordBusNumber (ResourceConsumer, MinNotFixed, MaxNotFixed, PosDecode,
                0x0000,             // Granularity
                0x0000,             // Range Minimum
                0x007F,             // Range Maximum
                0x0000,             // Translation Offset
                0x0080,             // Length
                ,, )
            WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                0x0000,             // Granularity
                0x0000,             // Range Minimum
                0x0CF7,             // Range Maximum
                0x0000,             // Translation Offset
                0x0CF8,             // Length
                ,, , TypeStatic, DenseTranslation)
            WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                0x00FF,             // Granularity
                0x0D00,             // Range Minimum
                0xFFFF,             // Range Maximum
                0x0000,             // Translation Offset
                0xF300,             // Length
                ,, , TypeStatic, DenseTranslation)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x0000FFFF,         // Granularity
                0x000A0000,         // Range Minimum
                0x000BFFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00020000,         // Length
                ,, , AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x0FFFFFFF,         // Granularity
                0x00000000,         // Range Minimum
                0x00000000,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00000000,         // Length
                ,, _Y00, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x0FFFFFFF,         // Granularity
                0x00000000,         // Range Minimum
                0x00000000,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00000000,         // Length
                ,, _Y01, AddressRangeMemory, TypeStatic)
        })
        CreateDWordField (REST, \_SB.PCI0._Y00._MIN, MGN0)  // _MIN: Minimum Base Address
        CreateDWordField (REST, \_SB.PCI0._Y00._MAX, MGX0)  // _MAX: Maximum Base Address
        CreateDWordField (REST, \_SB.PCI0._Y00._LEN, MGL0)  // _LEN: Length
        CreateDWordField (REST, \_SB.PCI0._Y01._MIN, MGN1)  // _MIN: Minimum Base Address
        CreateDWordField (REST, \_SB.PCI0._Y01._MAX, MGX1)  // _MAX: Maximum Base Address
        CreateDWordField (REST, \_SB.PCI0._Y01._LEN, MGL1)  // _LEN: Length
        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Local0 = ^CFG0.TOLM /* \_SB_.PCI0.CFG0.TOLM */
            MGN0 = (Local0 << 0x10)
            MGX0 = 0xDFFFFFFF
            Local0 = (MGX0 - MGN0) /* \_SB_.PCI0.MGN0 */
            MGL0 = (Local0 + One)
            MGN1 = 0xF0000000
            MGX1 = 0xFEBFFFFF
            Local0 = (MGX1 - MGN1) /* \_SB_.PCI0.MGN1 */
            MGL1 = (Local0 + One)
            Return (REST) /* \_SB_.PCI0.REST */
        }

        Device (IP2P)
        {
            Name (_ADR, 0x001E0000)  // _ADR: Address
        }

        Device (PT02)
        {
            Name (_ADR, 0x00020000)  // _ADR: Address
            Device (IPE4)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (IPE1)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PES1)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_SUN, One)  // _SUN: Slot User Number
                    }

                    Device (PE11)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Name (_SUN, One)  // _SUN: Slot User Number
                    }

                    Device (PE12)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Name (_SUN, One)  // _SUN: Slot User Number
                    }

                    Device (PE13)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Name (_SUN, One)  // _SUN: Slot User Number
                    }

                    Device (PE14)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Name (_SUN, One)  // _SUN: Slot User Number
                    }

                    Device (PE15)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                        Name (_SUN, One)  // _SUN: Slot User Number
                    }

                    Device (PE16)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                        Name (_SUN, One)  // _SUN: Slot User Number
                    }

                    Device (PE17)
                    {
                        Name (_ADR, 0x07)  // _ADR: Address
                        Name (_SUN, One)  // _SUN: Slot User Number
                    }
                }
            }

            Device (P2P2)
            {
                Name (_ADR, 0x03)  // _ADR: Address
            }
        }

        Device (PT03)
        {
            Name (_ADR, 0x00030000)  // _ADR: Address
        }

        Device (PT04)
        {
            Name (_ADR, 0x00040000)  // _ADR: Address
            Device (PES2)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_SUN, 0x02)  // _SUN: Slot User Number
            }

            Device (PE21)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_SUN, 0x02)  // _SUN: Slot User Number
            }

            Device (PE22)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_SUN, 0x02)  // _SUN: Slot User Number
            }

            Device (PE23)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Name (_SUN, 0x02)  // _SUN: Slot User Number
            }

            Device (PE24)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Name (_SUN, 0x02)  // _SUN: Slot User Number
            }

            Device (PE25)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Name (_SUN, 0x02)  // _SUN: Slot User Number
            }

            Device (PE26)
            {
                Name (_ADR, 0x06)  // _ADR: Address
                Name (_SUN, 0x02)  // _SUN: Slot User Number
            }

            Device (PE27)
            {
                Name (_ADR, 0x07)  // _ADR: Address
                Name (_SUN, 0x02)  // _SUN: Slot User Number
            }
        }

        Device (PT06)
        {
            Name (_ADR, 0x00060000)  // _ADR: Address
            Device (NB01)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }
        }

        Device (PT07)
        {
            Name (_ADR, 0x00070000)  // _ADR: Address
            Device (NB02)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }
        }
    }

    Scope (_TZ)
    {
        Name (\TEMP, 0x0AFF)
        ThermalZone (THM0)
        {
            Name (_TSP, 0x3C)  // _TSP: Thermal Sampling Period
            Name (_TC1, 0x04)  // _TC1: Thermal Constant 1
            Name (_TC2, 0x04)  // _TC2: Thermal Constant 2
            Name (_PSL, Package (0x01)  // _PSL: Passive List
            {
                \_PR.CPU0
            })
            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                Debug = "_PSV Method"
                Return (0x0B0E)
            }

            Method (_SCP, 1, NotSerialized)  // _SCP: Set Cooling Policy
            {
                Notify (THM0, 0x81) // Thermal Trip Point Change
            }

            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                Debug = "_TMP Method"
                Return (TEMP) /* \TEMP */
            }

            Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
            {
                Debug = "_CRT Method"
                Return (0x0BE5)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        OperationRegion (INTP, SystemIO, 0x2844, 0x04)
        Field (INTP, ByteAcc, NoLock, Preserve)
        {
            INT1,   16, 
            INT3,   8, 
            Offset (0x04)
        }

        OperationRegion (INTL, SystemIO, 0x28C8, 0x02)
        Field (INTL, ByteAcc, NoLock, Preserve)
        {
            IRQL,   16
        }

        OperationRegion (NVRM, SystemIO, 0x2800, 0xB0)
        Field (NVRM, AnyAcc, NoLock, Preserve)
        {
            Offset (0x8A), 
            AUTO,   1, 
            Offset (0x94), 
            GSTA,   8, 
            Offset (0x9B), 
            NVDT,   1, 
            Offset (0xA6), 
            NVPG,   16
        }

        Mutex (LCK1, 0x00)
    }

    Scope (_SB.PCI0.IP2P)
    {
        Device (ASMD)
        {
            Name (_ADR, 0x00040000)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }
    }

    Device (_SB.PCI0.IBRG)
    {
        Name (_ADR, 0x001F0000)  // _ADR: Address
        OperationRegion (PMCF, PCI_Config, Zero, 0x0100)
        Field (PMCF, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            AFG3,   8
        }
    }

    Device (_SB.PCI0.IBRG.MOMB)
    {
        Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
        Name (_UID, Zero)  // _UID: Unique ID
        Name (CRS1, ResourceTemplate ()
        {
            IO (Decode16,
                0x0070,             // Range Minimum
                0x0070,             // Range Maximum
                0x00,               // Alignment
                0x08,               // Length
                )
            IO (Decode16,
                0x0408,             // Range Minimum
                0x0408,             // Range Maximum
                0x00,               // Alignment
                0x08,               // Length
                )
            IO (Decode16,
                0x04D0,             // Range Minimum
                0x04D0,             // Range Maximum
                0x00,               // Alignment
                0x02,               // Length
                )
            IO (Decode16,
                0x0020,             // Range Minimum
                0x0020,             // Range Maximum
                0x00,               // Alignment
                0x20,               // Length
                )
            IO (Decode16,
                0x00A0,             // Range Minimum
                0x00A0,             // Range Maximum
                0x00,               // Alignment
                0x20,               // Length
                )
            IO (Decode16,
                0x0090,             // Range Minimum
                0x0090,             // Range Maximum
                0x00,               // Alignment
                0x10,               // Length
                )
            IO (Decode16,
                0x0050,             // Range Minimum
                0x0050,             // Range Maximum
                0x00,               // Alignment
                0x04,               // Length
                )
            IO (Decode16,
                0x0700,             // Range Minimum
                0x0700,             // Range Maximum
                0x00,               // Alignment
                0x20,               // Length
                )
            IO (Decode16,
                0x0800,             // Range Minimum
                0x0800,             // Range Maximum
                0x00,               // Alignment
                0x40,               // Length
                )
            IO (Decode16,
                0x0900,             // Range Minimum
                0x0900,             // Range Maximum
                0x00,               // Alignment
                0x80,               // Length
                )
            IO (Decode16,
                0x0010,             // Range Minimum
                0x0010,             // Range Maximum
                0x00,               // Alignment
                0x10,               // Length
                )
            IO (Decode16,
                0x0C80,             // Range Minimum
                0x0C80,             // Range Maximum
                0x00,               // Alignment
                0x04,               // Length
                )
            IO (Decode16,
                0x0CD4,             // Range Minimum
                0x0CD4,             // Range Maximum
                0x00,               // Alignment
                0x04,               // Length
                )
            IO (Decode16,
                0x0F50,             // Range Minimum
                0x0F50,             // Range Maximum
                0x00,               // Alignment
                0x09,               // Length
                )
            IO (Decode16,
                0x00F0,             // Range Minimum
                0x00F0,             // Range Maximum
                0x00,               // Alignment
                0x01,               // Length
                )
            IO (Decode16,
                0x0CA0,             // Range Minimum
                0x0CA0,             // Range Maximum
                0x00,               // Alignment
                0x02,               // Length
                )
            IO (Decode16,
                0x0CA4,             // Range Minimum
                0x0CA4,             // Range Maximum
                0x00,               // Alignment
                0x02,               // Length
                )
            Memory32Fixed (ReadWrite,
                0xE0000000,         // Address Base
                0x10000000,         // Address Length
                )
            Memory32Fixed (ReadWrite,
                0xFE000000,         // Address Base
                0x00C00000,         // Address Length
                )
            IO (Decode16,
                0x02F8,             // Range Minimum
                0x02F8,             // Range Maximum
                0x00,               // Alignment
                0x08,               // Length
                _Y02)
        })
        CreateWordField (CRS1, \_SB.PCI0.IBRG.MOMB._Y02._MIN, VMIN)  // _MIN: Minimum Base Address
        CreateWordField (CRS1, \_SB.PCI0.IBRG.MOMB._Y02._MAX, VMAX)  // _MAX: Maximum Base Address
        CreateByteField (CRS1, \_SB.PCI0.IBRG.MOMB._Y02._LEN, VLEN)  // _LEN: Length
        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Local0 = VPRT /* \VPRT */
            Local0 &= 0x07
            VMIN = Zero
            VMAX = Zero
            VLEN = Zero
            If ((Local0 == One))
            {
                VMIN = 0x03F8
                VMAX = 0x03F8
                VLEN = 0x08
            }

            If ((Local0 == 0x02))
            {
                VMIN = 0x02F8
                VMAX = 0x02F8
                VLEN = 0x08
            }

            If ((Local0 == 0x03))
            {
                VMIN = 0x03E8
                VMAX = 0x03E8
                VLEN = 0x08
            }

            If ((Local0 == 0x04))
            {
                VMIN = 0x02E8
                VMAX = 0x02E8
                VLEN = 0x08
            }

            Return (CRS1) /* \_SB_.PCI0.IBRG.MOMB.CRS1 */
        }
    }

    Device (_SB.PCI0.IBRG.MI0)
    {
        Name (_HID, EisaId ("IPI0001"))  // _HID: Hardware ID
        Name (_STR, Unicode ("IPMI_KCS"))  // _STR: Description String
        Name (_UID, Zero)  // _UID: Unique ID
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            IO (Decode16,
                0x0CA2,             // Range Minimum
                0x0CA2,             // Range Maximum
                0x00,               // Alignment
                0x02,               // Length
                )
        })
        Method (_IFT, 0, NotSerialized)  // _IFT: IPMI Interface Type
        {
            Return (One)
        }

        Method (_SRV, 0, NotSerialized)  // _SRV: IPMI Spec Revision
        {
            Return (0x0200)
        }
    }

    Device (_SB.PCI0.IBRG.TIME)
    {
        Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            IRQ (Edge, ActiveHigh, Exclusive, )
                {0}
            IO (Decode16,
                0x0040,             // Range Minimum
                0x0040,             // Range Maximum
                0x01,               // Alignment
                0x04,               // Length
                )
        })
    }

    Device (_SB.PCI0.IBRG.HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Name (_UID, Zero)  // _UID: Unique ID
        Name (BUF0, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0xFED00000,         // Address Base
                0x00000400,         // Address Length
                )
        })
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (0x0F)
        }

        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            Return (BUF0) /* \_SB_.PCI0.IBRG.HPET.BUF0 */
        }
    }

    Device (_SB.PCI0.IBRG.DMA0)
    {
        Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            DMA (Compatibility, NotBusMaster, Transfer16, )
                {7}
            IO (Decode16,
                0x0000,             // Range Minimum
                0x0000,             // Range Maximum
                0x01,               // Alignment
                0x10,               // Length
                )
            IO (Decode16,
                0x0080,             // Range Minimum
                0x0080,             // Range Maximum
                0x01,               // Alignment
                0x10,               // Length
                )
            IO (Decode16,
                0x00C0,             // Range Minimum
                0x00C0,             // Range Maximum
                0x01,               // Alignment
                0x20,               // Length
                )
        })
    }

    Device (_SB.PCI0.IBRG.BEEP)
    {
        Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            IO (Decode16,
                0x0061,             // Range Minimum
                0x0061,             // Range Maximum
                0x01,               // Alignment
                0x01,               // Length
                )
        })
    }

    Scope (_SB.PCI0.IBRG)
    {
        OperationRegion (ICH5, PCI_Config, 0x60, 0x0C)
        Field (ICH5, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            Offset (0x08), 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8
        }
    }

    Scope (_SB.PCI0.IBRG)
    {
        Device (KBD)
        {
            Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0060,             // Range Minimum
                    0x0060,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0064,             // Range Minimum
                    0x0064,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {1}
            })
        }
    }

    Scope (_SB.PCI0.IBRG)
    {
        Device (PS2M)
        {
            Name (_HID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0F0E"))  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQNoFlags ()
                    {12}
            })
        }
    }

    Scope (_SB.PCI0.IBRG)
    {
        Device (S417)
        {
            Name (_HID, EisaId ("PNP0A06") /* Generic Container Device */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x002E,             // Range Minimum
                    0x002E,             // Range Maximum
                    0x00,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x004E,             // Range Minimum
                    0x004E,             // Range Maximum
                    0x00,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0620,             // Range Minimum
                    0x0620,             // Range Maximum
                    0x00,               // Alignment
                    0x40,               // Length
                    )
                IO (Decode16,
                    0x0680,             // Range Minimum
                    0x0680,             // Range Maximum
                    0x00,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0x0600,             // Range Minimum
                    0x0600,             // Range Maximum
                    0x00,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0x0660,             // Range Minimum
                    0x0660,             // Range Maximum
                    0x00,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0x0300,             // Range Minimum
                    0x0300,             // Range Maximum
                    0x00,               // Alignment
                    0x10,               // Length
                    )
            })
            OperationRegion (N417, SystemIO, 0x2E, 0x02)
            Field (N417, ByteAcc, NoLock, Preserve)
            {
                INDX,   8, 
                DATA,   8
            }

            IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                CFG,    8, 
                Offset (0x07), 
                LDN,    8, 
                Offset (0x30), 
                ACTR,   8, 
                Offset (0x60), 
                IOAH,   8, 
                IOAL,   8, 
                Offset (0x70), 
                INTR,   8, 
                Offset (0x74), 
                DMCH,   8, 
                Offset (0xF0), 
                CFG1,   8, 
                CFG2,   8
            }

            Mutex (LCK2, 0x00)
        }
    }

    Scope (_SB.PCI0.IBRG.S417)
    {
        Device (COMA)
        {
            Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _CID: Compatible ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Name (_UID, Zero)  // _UID: Unique ID
            Name (CRS0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {4}
                IO (Decode16,
                    0x03F8,             // Range Minimum
                    0x03F8,             // Range Maximum
                    0x00,               // Alignment
                    0x08,               // Length
                    _Y03)
            })
            CreateWordField (CRS0, One, IRQ1)
            CreateByteField (CRS0, \_SB.PCI0.IBRG.S417.COMA._Y03._MIN, IOLP)  // _MIN: Minimum Base Address
            CreateByteField (CRS0, 0x06, IOHP)
            CreateByteField (CRS0, \_SB.PCI0.IBRG.S417.COMA._Y03._MAX, IOLR)  // _MAX: Maximum Base Address
            CreateByteField (CRS0, 0x08, IOHR)
            CreateByteField (CRS0, \_SB.PCI0.IBRG.S417.COMA._Y03._LEN, IOLN)  // _LEN: Length
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Acquire (LCK2, 0xFFFF)
                INDX = 0x55
                LDN = 0x04
                If (ACTR)
                {
                    INDX = 0xAA
                    Release (LCK2)
                    Return (0x0F)
                }
                Else
                {
                    If ((INTR == Zero))
                    {
                        INDX = 0xAA
                        Release (LCK2)
                        Return (Zero)
                    }
                    Else
                    {
                        INDX = 0xAA
                        Release (LCK2)
                        Return (0x0D)
                    }

                    Release (LCK2)
                    Return (0x0D)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Acquire (LCK2, 0xFFFF)
                INDX = 0x55
                LDN = 0x04
                If ((INTR == Zero))
                {
                    IRQ1 = Zero
                    IOLP = Zero
                    IOHP = Zero
                    IOLR = Zero
                    IOHR = Zero
                    IOLN = Zero
                    INDX = 0xAA
                }
                Else
                {
                    Local0 = One
                    IRQ1 = (Local0 << INTR) /* \_SB_.PCI0.IBRG.S417.INTR */
                    IOLP = IOAL /* \_SB_.PCI0.IBRG.S417.IOAL */
                    IOHP = IOAH /* \_SB_.PCI0.IBRG.S417.IOAH */
                    IOLR = IOAL /* \_SB_.PCI0.IBRG.S417.IOAL */
                    IOHR = IOAH /* \_SB_.PCI0.IBRG.S417.IOAH */
                    IOLN = 0x08
                    INDX = 0xAA
                }

                Release (LCK2)
                Return (CRS0) /* \_SB_.PCI0.IBRG.S417.COMA.CRS0 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Acquire (LCK2, 0xFFFF)
                INDX = 0x55
                LDN = 0x04
                ACTR = Zero
                INDX = 0xAA
                Release (LCK2)
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Acquire (LCK2, 0xFFFF)
                INDX = 0x55
                LDN = 0x04
                If ((INTR == Zero))
                {
                    IRQ1 = Zero
                    IRQ1 = Zero
                    IOLP = Zero
                    IOHP = Zero
                    IOLR = Zero
                    IOHR = Zero
                    IOLN = Zero
                    INDX = 0xAA
                }
                Else
                {
                    Local0 = One
                    IRQ1 = (Local0 << INTR) /* \_SB_.PCI0.IBRG.S417.INTR */
                    IOLP = IOAL /* \_SB_.PCI0.IBRG.S417.IOAL */
                    IOHP = IOAH /* \_SB_.PCI0.IBRG.S417.IOAH */
                    IOLR = IOAL /* \_SB_.PCI0.IBRG.S417.IOAL */
                    IOHR = IOAH /* \_SB_.PCI0.IBRG.S417.IOAH */
                    IOLN = 0x08
                    INDX = 0xAA
                }

                Release (LCK2)
                Return (CRS0) /* \_SB_.PCI0.IBRG.S417.COMA.CRS0 */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                Acquire (LCK2, 0xFFFF)
                INDX = 0x55
                LDN = 0x04
                CreateWordField (Arg0, One, IRQW)
                CreateByteField (Arg0, 0x05, IOLO)
                CreateByteField (Arg0, 0x06, IOHI)
                IOAL = IOLO /* \_SB_.PCI0.IBRG.S417.COMA._SRS.IOLO */
                IOAH = IOHI /* \_SB_.PCI0.IBRG.S417.COMA._SRS.IOHI */
                If ((IRQW == Zero))
                {
                    INTR = Zero
                }
                Else
                {
                    FindSetLeftBit (IRQW, Local0)
                    Local0--
                    INTR = Local0
                }

                ACTR = One
                INDX = 0xAA
                Release (LCK2)
            }
        }
    }

    Scope (_SB.PCI0.IBRG.S417)
    {
        Device (FDC0)
        {
            Name (_HID, EisaId ("PNP0700"))  // _HID: Hardware ID
            Name (CRES, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {6}
                DMA (Compatibility, NotBusMaster, Transfer8, _Y04)
                    {2}
                IO (Decode16,
                    0x03F2,             // Range Minimum
                    0x03F2,             // Range Maximum
                    0x02,               // Alignment
                    0x04,               // Length
                    _Y05)
            })
            Name (ODIS, One)
            Name (REST, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {6}
                DMA (Compatibility, NotBusMaster, Transfer8, )
                    {2}
                IO (Decode16,
                    0x03F0,             // Range Minimum
                    0x03F0,             // Range Maximum
                    0x00,               // Alignment
                    0x06,               // Length
                    )
                IO (Decode16,
                    0x03F7,             // Range Minimum
                    0x03F7,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
            })
            Device (DRV0)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_FDI, Package (0x10)  // _FDI: Floppy Drive Information
                {
                    Zero, 
                    0x04, 
                    0x4F, 
                    0x12, 
                    One, 
                    0xDF, 
                    0x02, 
                    0x25, 
                    0x02, 
                    0x12, 
                    0x1B, 
                    0xFF, 
                    0x65, 
                    0xF6, 
                    0x0F, 
                    0x08
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Acquire (LCK2, 0xFFFF)
                    NVPG = 0x02
                    If (NVDT)
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }

                    Release (LCK2)
                }
            }

            Method (_FDE, 0, NotSerialized)  // _FDE: Floppy Disk Enumerate
            {
                Name (FBUF, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x02, 0x00, 0x00, 0x00                           // ....
                })
                CreateByteField (FBUF, Zero, DRV0)
                Local0 = ^DRV0._STA ()
                If ((Local0 == 0x0F))
                {
                    DRV0 = One
                }

                Return (FBUF) /* \_SB_.PCI0.IBRG.S417.FDC0._FDE.FBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Acquire (LCK2, 0xFFFF)
                INDX = 0x55
                LDN = Zero
                If (ACTR)
                {
                    INDX = 0xAA
                    Release (LCK2)
                    Return (0x0F)
                }
                Else
                {
                    INDX = 0xAA
                    Release (LCK2)
                    If (ODIS)
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x0D)
                    }
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (CRES, One, IRQW)
                CreateByteField (CRES, \_SB.PCI0.IBRG.S417.FDC0._Y04._DMA, DMAC)  // _DMA: Direct Memory Access
                CreateByteField (CRES, \_SB.PCI0.IBRG.S417.FDC0._Y05._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (CRES, 0x09, IOHI)
                CreateByteField (CRES, \_SB.PCI0.IBRG.S417.FDC0._Y05._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (CRES, 0x0B, IORH)
                INDX = 0x55
                LDN = Zero
                IOLO = IOAL /* \_SB_.PCI0.IBRG.S417.IOAL */
                IOHI = IOAH /* \_SB_.PCI0.IBRG.S417.IOAH */
                IORL = IOAL /* \_SB_.PCI0.IBRG.S417.IOAL */
                IORH = IOAH /* \_SB_.PCI0.IBRG.S417.IOAH */
                If ((INTR == Zero))
                {
                    IRQW = Zero
                }
                Else
                {
                    Local0 = One
                    IRQW = (Local0 << INTR) /* \_SB_.PCI0.IBRG.S417.INTR */
                }

                If ((DMCH == 0x04))
                {
                    DMAC = Zero
                }
                Else
                {
                    Local0 = One
                    DMAC = (Local0 << DMCH) /* \_SB_.PCI0.IBRG.S417.DMCH */
                }

                INDX = 0xAA
                Return (CRES) /* \_SB_.PCI0.IBRG.S417.FDC0.CRES */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Acquire (LCK2, 0xFFFF)
                INDX = 0x55
                LDN = Zero
                ACTR = Zero
                INDX = 0xAA
                ODIS = Zero
                Release (LCK2)
            }

            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQNoFlags ()
                    {6}
                DMA (Compatibility, NotBusMaster, Transfer8, )
                    {2}
                IO (Decode16,
                    0x03F0,             // Range Minimum
                    0x03F0,             // Range Maximum
                    0x00,               // Alignment
                    0x06,               // Length
                    )
                IO (Decode16,
                    0x03F7,             // Range Minimum
                    0x03F7,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
            })
            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                Acquire (LCK2, 0xFFFF)
                INDX = 0x55
                LDN = Zero
                CreateWordField (Arg0, One, IRQW)
                CreateByteField (Arg0, 0x04, DMAC)
                CreateByteField (Arg0, 0x08, IOLO)
                CreateByteField (Arg0, 0x09, IOHI)
                IOAL = IOLO /* \_SB_.PCI0.IBRG.S417.FDC0._SRS.IOLO */
                IOAH = IOHI /* \_SB_.PCI0.IBRG.S417.FDC0._SRS.IOHI */
                If ((IRQW == Zero))
                {
                    INTR = Zero
                }
                Else
                {
                    FindSetLeftBit (IRQW, Local0)
                    Local0--
                    INTR = Local0
                }

                If ((DMAC == Zero))
                {
                    DMCH = 0x04
                }
                Else
                {
                    FindSetLeftBit (DMAC, Local0)
                    Local0--
                    DMCH = Local0
                }

                ACTR = One
                INDX = 0xAA
                ODIS = One
                Release (LCK2)
            }
        }
    }

    Scope (_SB)
    {
        Name (SUPP, Zero)
        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, CDW1)
            CreateDWordField (Arg3, 0x04, CDW2)
            CreateDWordField (Arg3, 0x08, CDW3)
            SUPP = CDW2 /* \_SB_._OSC.CDW2 */
            If (((SUPP & One) && (ILOW == One)))
            {
                Return (Arg3)
            }

            Return (0x04)
        }
    }

    OperationRegion (IMEM, SystemMemory, 0x000E8050, One)
    Field (IMEM, AnyAcc, NoLock, Preserve)
    {
        ILOW,   8
    }

    Name (PICM, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        PICM = Arg0
    }

    Scope (_SB)
    {
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (BUFA, ResourceTemplate ()
            {
                IRQ (Level, ActiveLow, Shared, )
                    {11}
            })
            CreateWordField (BUFA, One, IRA0)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (^^PCI0.IBRG.PIRA & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IBRG.PIRA |= 0x80
            }

            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {5,7,10,11}
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (^^PCI0.IBRG.PIRA & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFA) /* \_SB_.LNKA.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                ^^PCI0.IBRG.PIRA = (Local0 - One)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (BUFB, ResourceTemplate ()
            {
                IRQ (Level, ActiveLow, Shared, )
                    {11}
            })
            CreateWordField (BUFB, One, IRA0)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (^^PCI0.IBRG.PIRB & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IBRG.PIRB |= 0x80
            }

            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {5,7,10,11}
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (^^PCI0.IBRG.PIRB & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFB) /* \_SB_.LNKB.BUFB */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                ^^PCI0.IBRG.PIRB = (Local0 - One)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (BUFC, ResourceTemplate ()
            {
                IRQ (Level, ActiveLow, Shared, )
                    {11}
            })
            CreateWordField (BUFC, One, IRA0)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (^^PCI0.IBRG.PIRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IBRG.PIRC |= 0x80
            }

            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {5,7,10,11}
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (^^PCI0.IBRG.PIRC & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFC) /* \_SB_.LNKC.BUFC */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                ^^PCI0.IBRG.PIRC = (Local0 - One)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (BUFD, ResourceTemplate ()
            {
                IRQ (Level, ActiveLow, Shared, )
                    {11}
            })
            CreateWordField (BUFD, One, IRA0)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (^^PCI0.IBRG.PIRD & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IBRG.PIRD |= 0x80
            }

            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {5,7,10,11}
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (^^PCI0.IBRG.PIRD & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFD) /* \_SB_.LNKD.BUFD */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                ^^PCI0.IBRG.PIRD = (Local0 - One)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Name (BUFE, ResourceTemplate ()
            {
                IRQ (Level, ActiveLow, Shared, )
                    {11}
            })
            CreateWordField (BUFE, One, IRA0)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (^^PCI0.IBRG.PIRE & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IBRG.PIRE |= 0x80
            }

            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {5,7,10,11}
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (^^PCI0.IBRG.PIRE & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFE) /* \_SB_.LNKE.BUFE */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                ^^PCI0.IBRG.PIRE = (Local0 - One)
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Name (BUFF, ResourceTemplate ()
            {
                IRQ (Level, ActiveLow, Shared, )
                    {11}
            })
            CreateWordField (BUFF, One, IRA0)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (^^PCI0.IBRG.PIRF & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IBRG.PIRF |= 0x80
            }

            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {5,7,10,11}
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (^^PCI0.IBRG.PIRF & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFF) /* \_SB_.LNKF.BUFF */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                ^^PCI0.IBRG.PIRF = (Local0 - One)
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Name (BUFG, ResourceTemplate ()
            {
                IRQ (Level, ActiveLow, Shared, )
                    {11}
            })
            CreateWordField (BUFG, One, IRA0)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (^^PCI0.IBRG.PIRG & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IBRG.PIRG |= 0x80
            }

            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {5,7,10,11}
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (^^PCI0.IBRG.PIRG & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFG) /* \_SB_.LNKG.BUFG */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                ^^PCI0.IBRG.PIRG = (Local0 - One)
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Name (BUFH, ResourceTemplate ()
            {
                IRQ (Level, ActiveLow, Shared, )
                    {11}
            })
            CreateWordField (BUFH, One, IRA0)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (^^PCI0.IBRG.PIRH & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IBRG.PIRH |= 0x80
            }

            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                IRQ (Level, ActiveLow, Shared, )
                    {5,7,10,11}
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (^^PCI0.IBRG.PIRH & 0x0F)
                IRA0 = (One << Local0)
                Return (BUFH) /* \_SB_.LNKH.BUFH */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                ^^PCI0.IBRG.PIRH = (Local0 - One)
            }
        }
    }

    Method (_SB.PCI0._PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
    {
        If ((PICM == One))
        {
            Return (Package (0x05)
            {
                Package (0x04)
                {
                    0x001DFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    Zero, 
                    Zero, 
                    0x11
                }
            })
        }
        Else
        {
            Return (Package (0x05)
            {
                Package (0x04)
                {
                    0x001DFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    Zero, 
                    LNKB, 
                    Zero
                }
            })
        }
    }

    Method (_SB.PCI0.PT02._PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
    {
        If ((PICM == One))
        {
            Return (Package (0x00) {})
        }
        Else
        {
            Return (Package (0x00) {})
        }
    }

    Method (_SB.PCI0.PT02.IPE4._PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
    {
        If ((PICM == One))
        {
            Return (Package (0x03)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }
            })
        }
        Else
        {
            Return (Package (0x03)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }
            })
        }
    }

    Method (_SB.PCI0.PT02.IPE4.IPE1._PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
    {
        If ((PICM == One))
        {
            Return (Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
        }
        Else
        {
            Return (Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }
            })
        }
    }

    Method (_SB.PCI0.PT02.P2P2._PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
    {
        If ((PICM == One))
        {
            Return (Package (0x04)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x18
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x19
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x18
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    Zero, 
                    0x19
                }
            })
        }
        Else
        {
            Return (Package (0x04)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    LNKB, 
                    Zero
                }
            })
        }
    }

    Method (_SB.PCI0.PT03._PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
    {
        If ((PICM == One))
        {
            Return (Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
        }
        Else
        {
            Return (Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }
            })
        }
    }

    Method (_SB.PCI0.PT04._PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
    {
        If ((PICM == One))
        {
            Return (Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x10
                }
            })
        }
        Else
        {
            Return (Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKA, 
                    Zero
                }
            })
        }
    }

    Method (_SB.PCI0.PT06.NB01._PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
    {
        If ((PICM == One))
        {
            Return (Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x11
                }
            })
        }
        Else
        {
            Return (Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKB, 
                    Zero
                }
            })
        }
    }

    Method (_SB.PCI0.PT07.NB02._PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
    {
        If ((PICM == One))
        {
            Return (Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x12
                }
            })
        }
        Else
        {
            Return (Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKC, 
                    Zero
                }
            })
        }
    }

    Method (_SB.PCI0.IP2P._PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
    {
        If ((PICM == One))
        {
            Return (Package (0x03)
            {
                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    Zero, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    One, 
                    Zero, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    Zero, 
                    Zero, 
                    0x17
                }
            })
        }
        Else
        {
            Return (Package (0x03)
            {
                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    LNKF, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    One, 
                    LNKG, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    Zero, 
                    LNKH, 
                    Zero
                }
            })
        }
    }

    OperationRegion (AMEM, SystemMemory, 0x000E81A0, One)
    Field (AMEM, AnyAcc, NoLock, Preserve)
    {
        VPRT,   8
    }

    OperationRegion (CMEM, SystemMemory, 0x000E81A5, One)
    Field (CMEM, AnyAcc, NoLock, Preserve)
    {
        CC3S,   8
    }

    OperationRegion (PSSM, SystemMemory, 0x000E81A6, One)
    Field (PSSM, AnyAcc, NoLock, Preserve)
    {
        PSSS,   8
    }

    OperationRegion (SBPM, SystemIO, 0x0900, 0x04)
    Field (SBPM, ByteAcc, NoLock, Preserve)
    {
        SPMS,   16, 
        SPME,   16
    }

    OperationRegion (SGPE, SystemIO, 0x0928, 0x08)
    Field (SGPE, ByteAcc, NoLock, Preserve)
    {
        GPES,   32, 
        GPEE,   32
    }

    OperationRegion (SYSS, SystemIO, 0xB2, One)
    Field (SYSS, ByteAcc, NoLock, Preserve)
    {
        SMIP,   8
    }

    OperationRegion (BMEM, SystemMemory, 0x000E81A1, One)
    Field (BMEM, AnyAcc, NoLock, Preserve)
    {
            ,   7, 
        JACK,   1
    }

    OperationRegion (GMEM, SystemMemory, 0x000E81B0, 0x0191)
    Field (GMEM, AnyAcc, NoLock, Preserve)
    {
        P0C0,   32, 
        P1C0,   32, 
        P2C0,   32, 
        P3C0,   32, 
        P0C1,   32, 
        P1C1,   32, 
        P2C1,   32, 
        P3C1,   32, 
        P0C2,   32, 
        P1C2,   32, 
        P2C2,   32, 
        P3C2,   32, 
        P0C3,   32, 
        P1C3,   32, 
        P2C3,   32, 
        P3C3,   32, 
        P0C4,   32, 
        P1C4,   32, 
        P2C4,   32, 
        P3C4,   32, 
        P0C5,   32, 
        P1C5,   32, 
        P2C5,   32, 
        P3C5,   32, 
        P0C6,   32, 
        P1C6,   32, 
        P2C6,   32, 
        P3C6,   32, 
        P0C7,   32, 
        P1C7,   32, 
        P2C7,   32, 
        P3C7,   32, 
        P0S0,   32, 
        P1S0,   32, 
        P2S0,   32, 
        P3S0,   32, 
        P0S1,   32, 
        P1S1,   32, 
        P2S1,   32, 
        P3S1,   32, 
        P0S2,   32, 
        P1S2,   32, 
        P2S2,   32, 
        P3S2,   32, 
        P0S3,   32, 
        P1S3,   32, 
        P2S3,   32, 
        P3S3,   32, 
        P0S4,   32, 
        P1S4,   32, 
        P2S4,   32, 
        P3S4,   32, 
        P0S5,   32, 
        P1S5,   32, 
        P2S5,   32, 
        P3S5,   32, 
        P0S6,   32, 
        P1S6,   32, 
        P2S6,   32, 
        P3S6,   32, 
        P0S7,   32, 
        P1S7,   32, 
        P2S7,   32, 
        P3S7,   32, 
        P0P0,   32, 
        P1P0,   32, 
        P2P0,   32, 
        P3P0,   32, 
        P0P1,   32, 
        P1P1,   32, 
        P2P1,   32, 
        P3P1,   32, 
        P0P2,   32, 
        P1P2,   32, 
        P2P2,   32, 
        P3P2,   32, 
        P0P3,   32, 
        P1P3,   32, 
        P2P3,   32, 
        P3P3,   32, 
        P0P4,   32, 
        P1P4,   32, 
        P2P4,   32, 
        P3P4,   32, 
        P0P5,   32, 
        P1P5,   32, 
        P2P5,   32, 
        P3P5,   32, 
        P0P6,   32, 
        P1P6,   32, 
        P2P6,   32, 
        P3P6,   32, 
        P0P7,   32, 
        P1P7,   32, 
        P2P7,   32, 
        P3P7,   32, 
        P0FQ,   32, 
        P1FQ,   32, 
        P2FQ,   32, 
        P3FQ,   32, 
        NPPC,   8
    }

    OperationRegion (SMEM, SystemMemory, 0x000E8350, 0x80)
    Field (SMEM, AnyAcc, NoLock, Preserve)
    {
        SSD0,   32, 
        SSD1,   32, 
        SSD2,   32, 
        SSD3,   32, 
        SSD4,   32, 
        SSD5,   32, 
        SSD6,   32, 
        SSD7,   32, 
        SSL0,   32, 
        SSL1,   32, 
        SSL2,   32, 
        SSL3,   32, 
        SSL4,   32, 
        SSL5,   32, 
        SSL6,   32, 
        SSL7,   32, 
        SSD8,   32, 
        SSD9,   32, 
        SSDA,   32, 
        SSDB,   32, 
        SSDC,   32, 
        SSDD,   32, 
        SSDE,   32, 
        SSDF,   32, 
        SSL8,   32, 
        SSL9,   32, 
        SSLA,   32, 
        SSLB,   32, 
        SSLC,   32, 
        SSLD,   32, 
        SSLE,   32, 
        SSLF,   32
    }

    OperationRegion (SME2, SystemMemory, 0x000E8080, 0x80)
    Field (SME2, AnyAcc, NoLock, Preserve)
    {
        CSD0,   32, 
        CSD1,   32, 
        CSD2,   32, 
        CSD3,   32, 
        CSD4,   32, 
        CSD5,   32, 
        CSD6,   32, 
        CSD7,   32, 
        CSL0,   32, 
        CSL1,   32, 
        CSL2,   32, 
        CSL3,   32, 
        CSL4,   32, 
        CSL5,   32, 
        CSL6,   32, 
        CSL7,   32, 
        CSD8,   32, 
        CSD9,   32, 
        CSDA,   32, 
        CSDB,   32, 
        CSDC,   32, 
        CSDD,   32, 
        CSDE,   32, 
        CSDF,   32, 
        CSL8,   32, 
        CSL9,   32, 
        CSLA,   32, 
        CSLB,   32, 
        CSLC,   32, 
        CSLD,   32, 
        CSLE,   32, 
        CSLF,   32
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        SPMS = 0xFFFF
        GPES = Ones
        Local0 = \_SB.PCI0.IBRG.AFG3
        Local0 |= One
        \_SB.PCI0.IBRG.AFG3 = Local0
    }
}



ERST
----
[000h 0000   4]                    Signature : "ERST"    [Error Record Serialization Table]
[004h 0004   4]                 Table Length : 000001D0
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : C5
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "ProLiant"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "  "
[020h 0032   4]        Asl Compiler Revision : 0000162E

[024h 0036   4]  Serialization Header Length : 0000000C
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   4]      Instruction Entry Count : 0000000D

[030h 0048   1]                       Action : 00 [Begin Write Operation]
[031h 0049   1]                  Instruction : 03 [Write Register Value]
[032h 0050   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[033h 0051   1]                     Reserved : 00

[034h 0052  12]              Register Region : [Generic Address Structure]
[034h 0052   1]                     Space ID : 00 [SystemMemory]
[035h 0053   1]                    Bit Width : 08
[036h 0054   1]                   Bit Offset : 00
[037h 0055   1]         Encoded Access Width : 01 [Byte Access:8]
[038h 0056   8]                      Address : 00000000000E8024

[040h 0064   8]                        Value : 0000000000000000
[048h 0072   8]                         Mask : 00000000000000FF

[050h 0080   1]                       Action : 01 [Begin Read Operation]
[051h 0081   1]                  Instruction : 03 [Write Register Value]
[052h 0082   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[053h 0083   1]                     Reserved : 00

[054h 0084  12]              Register Region : [Generic Address Structure]
[054h 0084   1]                     Space ID : 00 [SystemMemory]
[055h 0085   1]                    Bit Width : 08
[056h 0086   1]                   Bit Offset : 00
[057h 0087   1]         Encoded Access Width : 01 [Byte Access:8]
[058h 0088   8]                      Address : 00000000000E8024

[060h 0096   8]                        Value : 0000000000000001
[068h 0104   8]                         Mask : 00000000000000FF

[070h 0112   1]                       Action : 02 [Begin Clear Operation]
[071h 0113   1]                  Instruction : 03 [Write Register Value]
[072h 0114   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[073h 0115   1]                     Reserved : 00

[074h 0116  12]              Register Region : [Generic Address Structure]
[074h 0116   1]                     Space ID : 00 [SystemMemory]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 01 [Byte Access:8]
[078h 0120   8]                      Address : 00000000000E8024

[080h 0128   8]                        Value : 0000000000000002
[088h 0136   8]                         Mask : 00000000000000FF

[090h 0144   1]                       Action : 03 [End Operation]
[091h 0145   1]                  Instruction : 03 [Write Register Value]
[092h 0146   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[093h 0147   1]                     Reserved : 00

[094h 0148  12]              Register Region : [Generic Address Structure]
[094h 0148   1]                     Space ID : 00 [SystemMemory]
[095h 0149   1]                    Bit Width : 08
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 01 [Byte Access:8]
[098h 0152   8]                      Address : 00000000000E8024

[0A0h 0160   8]                        Value : 00000000000000FF
[0A8h 0168   8]                         Mask : 00000000000000FF

[0B0h 0176   1]                       Action : 04 [Set Record Offset]
[0B1h 0177   1]                  Instruction : 02 [Write Register]
[0B2h 0178   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0B3h 0179   1]                     Reserved : 00

[0B4h 0180  12]              Register Region : [Generic Address Structure]
[0B4h 0180   1]                     Space ID : 00 [SystemMemory]
[0B5h 0181   1]                    Bit Width : 40
[0B6h 0182   1]                   Bit Offset : 00
[0B7h 0183   1]         Encoded Access Width : 02 [Word Access:16]
[0B8h 0184   8]                      Address : 00000000000E8028

[0C0h 0192   8]                        Value : 0000000000000000
[0C8h 0200   8]                         Mask : 000000000000FFFF

[0D0h 0208   1]                       Action : 05 [Execute Operation]
[0D1h 0209   1]                  Instruction : 03 [Write Register Value]
[0D2h 0210   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0D3h 0211   1]                     Reserved : 00

[0D4h 0212  12]              Register Region : [Generic Address Structure]
[0D4h 0212   1]                     Space ID : 00 [SystemMemory]
[0D5h 0213   1]                    Bit Width : 08
[0D6h 0214   1]                   Bit Offset : 00
[0D7h 0215   1]         Encoded Access Width : 01 [Byte Access:8]
[0D8h 0216   8]                      Address : 00000000000E8025

[0E0h 0224   8]                        Value : 0000000000000001
[0E8h 0232   8]                         Mask : 00000000000000FF

[0F0h 0240   1]                       Action : 05 [Execute Operation]
[0F1h 0241   1]                  Instruction : 03 [Write Register Value]
[0F2h 0242   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[0F3h 0243   1]                     Reserved : 00

[0F4h 0244  12]              Register Region : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 01 [SystemIO]
[0F5h 0245   1]                    Bit Width : 08
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 01 [Byte Access:8]
[0F8h 0248   8]                      Address : 00000000000000B2

[100h 0256   8]                        Value : 0000000000000010
[108h 0264   8]                         Mask : 00000000000000FF

[110h 0272   1]                       Action : 06 [Check Busy Status]
[111h 0273   1]                  Instruction : 01 [Read Register Value]
[112h 0274   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[113h 0275   1]                     Reserved : 00

[114h 0276  12]              Register Region : [Generic Address Structure]
[114h 0276   1]                     Space ID : 00 [SystemMemory]
[115h 0277   1]                    Bit Width : 08
[116h 0278   1]                   Bit Offset : 00
[117h 0279   1]         Encoded Access Width : 01 [Byte Access:8]
[118h 0280   8]                      Address : 00000000000E8025

[120h 0288   8]                        Value : 0000000000000001
[128h 0296   8]                         Mask : 00000000000000FF

[130h 0304   1]                       Action : 07 [Get Command Status]
[131h 0305   1]                  Instruction : 00 [Read Register]
[132h 0306   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[133h 0307   1]                     Reserved : 00

[134h 0308  12]              Register Region : [Generic Address Structure]
[134h 0308   1]                     Space ID : 00 [SystemMemory]
[135h 0309   1]                    Bit Width : 08
[136h 0310   1]                   Bit Offset : 00
[137h 0311   1]         Encoded Access Width : 01 [Byte Access:8]
[138h 0312   8]                      Address : 00000000000E8026

[140h 0320   8]                        Value : 0000000000000000
[148h 0328   8]                         Mask : 00000000000000FF

[150h 0336   1]                       Action : 08 [Get Record Identifier]
[151h 0337   1]                  Instruction : 00 [Read Register]
[152h 0338   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[153h 0339   1]                     Reserved : 00

[154h 0340  12]              Register Region : [Generic Address Structure]
[154h 0340   1]                     Space ID : 00 [SystemMemory]
[155h 0341   1]                    Bit Width : 40
[156h 0342   1]                   Bit Offset : 00
[157h 0343   1]         Encoded Access Width : 04 [QWord Access:64]
[158h 0344   8]                      Address : 00000000000E8030

[160h 0352   8]                        Value : 0000000000000000
[168h 0360   8]                         Mask : FFFFFFFFFFFFFFFF

[170h 0368   1]                       Action : 09 [Set Record Identifier]
[171h 0369   1]                  Instruction : 02 [Write Register]
[172h 0370   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[173h 0371   1]                     Reserved : 00

[174h 0372  12]              Register Region : [Generic Address Structure]
[174h 0372   1]                     Space ID : 00 [SystemMemory]
[175h 0373   1]                    Bit Width : 40
[176h 0374   1]                   Bit Offset : 00
[177h 0375   1]         Encoded Access Width : 04 [QWord Access:64]
[178h 0376   8]                      Address : 00000000000E8030

[180h 0384   8]                        Value : 0000000000000000
[188h 0392   8]                         Mask : FFFFFFFFFFFFFFFF

[190h 0400   1]                       Action : 0A [Get Record Count]
[191h 0401   1]                  Instruction : 00 [Read Register]
[192h 0402   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[193h 0403   1]                     Reserved : 00

[194h 0404  12]              Register Region : [Generic Address Structure]
[194h 0404   1]                     Space ID : 00 [SystemMemory]
[195h 0405   1]                    Bit Width : 08
[196h 0406   1]                   Bit Offset : 00
[197h 0407   1]         Encoded Access Width : 01 [Byte Access:8]
[198h 0408   8]                      Address : 00000000000E8027

[1A0h 0416   8]                        Value : 0000000000000000
[1A8h 0424   8]                         Mask : 00000000000000FF

[1B0h 0432   1]                       Action : 0B [Begin Dummy Write]
[1B1h 0433   1]                  Instruction : 03 [Write Register Value]
[1B2h 0434   1]        Flags (decoded below) : 00
                      Preserve Register Bits : 0
[1B3h 0435   1]                     Reserved : 00

[1B4h 0436  12]              Register Region : [Generic Address Structure]
[1B4h 0436   1]                     Space ID : 00 [SystemMemory]
[1B5h 0437   1]                    Bit Width : 08
[1B6h 0438   1]                   Bit Offset : 00
[1B7h 0439   1]         Encoded Access Width : 01 [Byte Access:8]
[1B8h 0440   8]                      Address : 00000000000E8024

[1C0h 0448   8]                        Value : 000000000000000B
[1C8h 0456   8]                         Mask : 00000000000000FF

Raw Table Data: Length 464 (0x1D0)

    0000: 45 52 53 54 D0 01 00 00 01 C5 48 50 20 20 20 20  // ERST......HP    
    0010: 50 72 6F 4C 69 61 6E 74 01 00 00 00 D2 04 00 00  // ProLiant........
    0020: 2E 16 00 00 0C 00 00 00 00 00 00 00 0D 00 00 00  // ................
    0030: 00 03 00 00 00 08 00 01 24 80 0E 00 00 00 00 00  // ........$.......
    0040: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0050: 01 03 00 00 00 08 00 01 24 80 0E 00 00 00 00 00  // ........$.......
    0060: 01 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0070: 02 03 00 00 00 08 00 01 24 80 0E 00 00 00 00 00  // ........$.......
    0080: 02 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0090: 03 03 00 00 00 08 00 01 24 80 0E 00 00 00 00 00  // ........$.......
    00A0: FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    00B0: 04 02 00 00 00 40 00 02 28 80 0E 00 00 00 00 00  // .....@..(.......
    00C0: 00 00 00 00 00 00 00 00 FF FF 00 00 00 00 00 00  // ................
    00D0: 05 03 00 00 00 08 00 01 25 80 0E 00 00 00 00 00  // ........%.......
    00E0: 01 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    00F0: 05 03 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    0100: 10 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0110: 06 01 00 00 00 08 00 01 25 80 0E 00 00 00 00 00  // ........%.......
    0120: 01 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0130: 07 00 00 00 00 08 00 01 26 80 0E 00 00 00 00 00  // ........&.......
    0140: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    0150: 08 00 00 00 00 40 00 04 30 80 0E 00 00 00 00 00  // .....@..0.......
    0160: 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF  // ................
    0170: 09 02 00 00 00 40 00 04 30 80 0E 00 00 00 00 00  // .....@..0.......
    0180: 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF  // ................
    0190: 0A 00 00 00 00 08 00 01 27 80 0E 00 00 00 00 00  // ........'.......
    01A0: 00 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    01B0: 0B 03 00 00 00 08 00 01 24 80 0E 00 00 00 00 00  // ........$.......
    01C0: 0B 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................


FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 79
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "ProLiant"
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "  "
[020h 0032   4]        Asl Compiler Revision : 0000162E

[024h 0036   4]                 FACS Address : CFE44100
[028h 0040   4]                 DSDT Address : CFE44940
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 00 [Unspecified]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : 01
[035h 0053   1]           ACPI Disable Value : 00
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000900
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000904
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000950
[04Ch 0076   4]       PM Timer Block Address : 00000908
[050h 0080   4]           GPE0 Block Address : 00000928
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 04
[05Ah 0090   1]     PM2 Control Block Length : 04
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : FFFF
[062h 0098   2]                   C3 Latency : 003C
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 00
[069h 0105   1]             Duty Cycle Width : 00
[06Ah 0106   1]          RTC Day Alarm Index : 49
[06Bh 0107   1]        RTC Month Alarm Index : 4A
[06Ch 0108   1]            RTC Century Index : 48
[06Dh 0109   2]   Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000000A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 0
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 00 [SystemMemory]
[075h 0117   1]                    Bit Width : 00
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000000

[080h 0128   1]         Value to cause reset : 00
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 00000000CFE44100
[08Ch 0140   8]                 DSDT Address : 00000000CFE44940
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000000900

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 00 [SystemMemory]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 20
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000000904

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 20
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000000950

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000000908

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000000928

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 00 [SystemMemory]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

    0000: 46 41 43 50 F4 00 00 00 03 79 48 50 20 20 20 20  // FACP.....yHP    
    0010: 50 72 6F 4C 69 61 6E 74 02 00 00 00 D2 04 00 00  // ProLiant........
    0020: 2E 16 00 00 00 41 E4 CF 40 49 E4 CF 01 00 09 00  // .....A..@I......
    0030: B2 00 00 00 01 00 00 00 00 09 00 00 00 00 00 00  // ................
    0040: 04 09 00 00 00 00 00 00 50 09 00 00 08 09 00 00  // ........P.......
    0050: 28 09 00 00 00 00 00 00 04 04 04 04 08 00 00 00  // (...............
    0060: FF FF 3C 00 00 00 00 00 00 00 49 4A 48 03 00 00  // ..<.......IJH...
    0070: A5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 00 41 E4 CF 00 00 00 00 40 49 E4 CF  // .....A......@I..
    0090: 00 00 00 00 01 20 00 00 00 09 00 00 00 00 00 00  // ..... ..........
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 20 00 00  // ............. ..
    00B0: 04 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 20 00 00 50 09 00 00 00 00 00 00  // ..... ..P.......
    00D0: 01 20 00 00 08 09 00 00 00 00 00 00 01 40 00 00  // . ...........@..
    00E0: 28 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // (...............
    00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 0000ABCD
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 CD AB 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FFFF
----
[000h 0000   4]                    Signature : "FFFF"    
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 14
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "ProLiant"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "  "
[020h 0032   4]        Asl Compiler Revision : 0000162E


**** Unknown ACPI table signature [FFFF]


Raw Table Data: Length 374 (0x176)

    0000: 46 46 46 46 76 01 00 00 01 14 48 50 20 20 20 20  // FFFFv.....HP    
    0010: 50 72 6F 4C 69 61 6E 74 01 00 00 00 D2 04 00 00  // ProLiant........
    0020: 2E 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00                                // ......


HEST
----
[000h 0000   4]                    Signature : "HEST"    [Hardware Error Source Table]
[004h 0004   4]                 Table Length : 000000BC
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 1C
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "ProLiant"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "  "
[020h 0032   4]        Asl Compiler Revision : 0000162E

[024h 0036   4]           Error Source Count : 00000003

[028h 0040   2]                Subtable Type : 0006 [PCI Express Root Port AER]
[02Ah 0042   2]                    Source Id : 0006
[02Ch 0044   2]                     Reserved : 0000
[02Eh 0046   1]        Flags (decoded below) : 02
                              Firmware First : 0
                                      Global : 0
[02Fh 0047   1]                      Enabled : 00
[030h 0048   4]       Records To Preallocate : 00000001
[034h 0052   4]      Max Sections Per Record : 00000001
[038h 0056   4]                          Bus : 00000000
[03Ch 0060   2]                       Device : 0000
[03Eh 0062   2]                     Function : 0000
[040h 0064   2]                DeviceControl : 0856
[042h 0066   2]                     Reserved : 0000
[044h 0068   4]           Uncorrectable Mask : 00100020
[048h 0072   4]       Uncorrectable Severity : 0017F011
[04Ch 0076   4]             Correctable Mask : 000011C1
[050h 0080   4]        Advanced Capabilities : 00000000
[054h 0084   4]           Root Error Command : 00000006

[058h 0088   2]                Subtable Type : 0007 [PCI Express AER (AER Endpoint)]
[05Ah 0090   2]                    Source Id : 0007
[05Ch 0092   2]                     Reserved : 0000
[05Eh 0094   1]        Flags (decoded below) : 02
                              Firmware First : 0
                                      Global : 0
[05Fh 0095   1]                      Enabled : 00
[060h 0096   4]       Records To Preallocate : 00000001
[064h 0100   4]      Max Sections Per Record : 00000001
[068h 0104   4]                          Bus : 00000000
[06Ch 0108   2]                       Device : 0000
[06Eh 0110   2]                     Function : 0000
[070h 0112   2]                DeviceControl : 0856
[072h 0114   2]                     Reserved : 0000
[074h 0116   4]           Uncorrectable Mask : 00100020
[078h 0120   4]       Uncorrectable Severity : 0017F011
[07Ch 0124   4]             Correctable Mask : 000011C1
[080h 0128   4]        Advanced Capabilities : 00000000

[084h 0132   2]                Subtable Type : 0008 [PCI Express/PCI-X Bridge AER]
[086h 0134   2]                    Source Id : 0008
[088h 0136   2]                     Reserved : 0000
[08Ah 0138   1]        Flags (decoded below) : 02
                              Firmware First : 0
                                      Global : 0
[08Bh 0139   1]                      Enabled : 00
[08Ch 0140   4]       Records To Preallocate : 00000001
[090h 0144   4]      Max Sections Per Record : 00000001
[094h 0148   4]                          Bus : 00000000
[098h 0152   2]                       Device : 0000
[09Ah 0154   2]                     Function : 0000
[09Ch 0156   2]                DeviceControl : 0006
[09Eh 0158   2]                     Reserved : 0000
[0A0h 0160   4]           Uncorrectable Mask : 00100020
[0A4h 0164   4]       Uncorrectable Severity : 0017F011
[0A8h 0168   4]             Correctable Mask : 000011C1
[0ACh 0172   4]        Advanced Capabilities : 00000000
[0B0h 0176   4]       2nd Uncorrectable Mask : 00100020
[0B4h 0180   4]   2nd Uncorrectable Severity : 0017F011
[0B8h 0184   4]    2nd Advanced Capabilities : 00000000

Raw Table Data: Length 188 (0xBC)

    0000: 48 45 53 54 BC 00 00 00 01 1C 48 50 20 20 20 20  // HEST......HP    
    0010: 50 72 6F 4C 69 61 6E 74 01 00 00 00 D2 04 00 00  // ProLiant........
    0020: 2E 16 00 00 03 00 00 00 06 00 06 00 00 00 02 00  // ................
    0030: 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 56 08 00 00 20 00 10 00 11 F0 17 00 C1 11 00 00  // V... ...........
    0050: 00 00 00 00 06 00 00 00 07 00 07 00 00 00 02 00  // ................
    0060: 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 56 08 00 00 20 00 10 00 11 F0 17 00 C1 11 00 00  // V... ...........
    0080: 00 00 00 00 08 00 08 00 00 00 02 00 01 00 00 00  // ................
    0090: 01 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00  // ................
    00A0: 20 00 10 00 11 F0 17 00 C1 11 00 00 00 00 00 00  //  ...............
    00B0: 20 00 10 00 11 F0 17 00 00 00 00 00              //  ...........


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : C2
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "ProLiant"
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "  "
[020h 0032   4]        Asl Compiler Revision : 0000162E

[024h 0036   4]            Hardware Block ID : 8086A201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0000
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 C2 48 50 20 20 20 20  // HPET8.....HP    
    0010: 50 72 6F 4C 69 61 6E 74 02 00 00 00 D2 04 00 00  // ProLiant........
    0020: 2E 16 00 00 01 A2 86 80 00 00 00 00 00 00 D0 FE  // ................
    0030: 00 00 00 00 00 00 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 85
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "ProLiant"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : ""
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 85 48 50 20 20 20 20  // MCFG<.....HP    
    0010: 50 72 6F 4C 69 61 6E 74 01 00 00 00 00 00 00 00  // ProLiant........
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


SPCR
----
[000h 0000   4]                    Signature : "SPCR"    [Serial Port Console Redirection table]
[004h 0004   4]                 Table Length : 00000050
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : C8
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "SPCRRBSU"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "  "
[020h 0032   4]        Asl Compiler Revision : 0000162E

[024h 0036   1]               Interface Type : 00
[025h 0037   3]                     Reserved : 000000

[028h 0040  12]         Serial Port Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 0000000000000000

[034h 0052   1]               Interrupt Type : 01
[035h 0053   1]          PCAT-compatible IRQ : 04
[036h 0054   4]                    Interrupt : 00000000
[03Ah 0058   1]                    Baud Rate : 03
[03Bh 0059   1]                       Parity : 00
[03Ch 0060   1]                    Stop Bits : 01
[03Dh 0061   1]                 Flow Control : 03
[03Eh 0062   1]                Terminal Type : 00
[04Ch 0076   1]                     Reserved : 00
[040h 0064   2]                PCI Device ID : FFFF
[042h 0066   2]                PCI Vendor ID : FFFF
[044h 0068   1]                      PCI Bus : 00
[045h 0069   1]                   PCI Device : 00
[046h 0070   1]                 PCI Function : 00
[047h 0071   4]                    PCI Flags : 00000000
[04Bh 0075   1]                  PCI Segment : 00
[04Ch 0076   4]                     Reserved : 00000000

Raw Table Data: Length 80 (0x50)

    0000: 53 50 43 52 50 00 00 00 01 C8 48 50 20 20 20 20  // SPCRP.....HP    
    0010: 53 50 43 52 52 42 53 55 01 00 00 00 D2 04 00 00  // SPCRRBSU........
    0020: 2E 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 01 04 00 00 00 00 03 00 01 03 00 00  // ................
    0040: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................


SPMI
----
[000h 0000   4]                    Signature : "SPMI"    [Server Platform Management Interface table]
[004h 0004   4]                 Table Length : 00000040
[008h 0008   1]                     Revision : 05
[009h 0009   1]                     Checksum : 62
[00Ah 0010   6]                       Oem ID : "HP    "
[010h 0016   8]                 Oem Table ID : "ProLiant"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "  "
[020h 0032   4]        Asl Compiler Revision : 0000162E

[024h 0036   1]               Interface Type : 01
[025h 0037   1]                     Reserved : 01
[026h 0038   2]            IPMI Spec Version : 0200
[028h 0040   1]               Interrupt Type : 00
[029h 0041   1]                   GPE Number : 00
[02Ah 0042   1]                     Reserved : 00
[02Bh 0043   1]              PCI Device Flag : 00
[02Ch 0044   4]                    Interrupt : 00000000

[030h 0048  12]                IPMI Register : [Generic Address Structure]
[030h 0048   1]                     Space ID : 01 [SystemIO]
[031h 0049   1]                    Bit Width : 10
[032h 0050   1]                   Bit Offset : 00
[033h 0051   1]         Encoded Access Width : 01 [Byte Access:8]
[034h 0052   8]                      Address : 0000000000000CA2

[03Ch 0060   1]                  PCI Segment : 00
[03Dh 0061   1]                      PCI Bus : 00
[03Eh 0062   1]                   PCI Device : 00
[03Fh 0063   1]                 PCI Function : 00
/**** ACPI table terminates in the middle of a data structure! (dump table) */


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "SSDTP", 0x00000001)
{
    /*
     * iASL Warning: There were 32 external control methods found during
     * disassembly, but only 0 were resolved (32 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)
    External (CSD0, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (CSD1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (CSD2, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (CSD3, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (CSD4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (CSD5, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (CSD6, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (CSD7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (CSL0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (CSL1, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (CSL2, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (CSL3, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (CSL4, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (CSL5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (CSL6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (CSL7, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (JACK, UnknownObj)
    External (PSSS, UnknownObj)
    External (SSD0, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (SSD1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (SSD2, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (SSD3, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (SSD4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (SSD5, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (SSD6, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (SSD7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (SSL0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (SSL1, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (SSL2, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (SSL3, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (SSL4, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (SSL5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (SSL6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (SSL7, MethodObj)    // Warning: Unknown method, guessing 0 arguments

    Scope (\)
    {
        Name (PDC0, Zero)
        Name (PDC1, Zero)
        Name (PDC2, Zero)
        Name (PDC3, Zero)
        Name (PDC4, Zero)
        Name (PDC5, Zero)
        Name (PDC6, Zero)
        Name (PDC7, Zero)
        Name (TBL0, Zero)
        Name (TBL1, Zero)
        Name (TBL2, Zero)
        Name (TBL3, Zero)
        Name (TBL4, Zero)
        Name (TBL5, Zero)
        Name (TBL6, Zero)
        Name (TBL7, Zero)
        Name (CTL0, Zero)
        Name (CTL1, Zero)
        Name (CTL2, Zero)
        Name (CTL3, Zero)
        Name (CTL4, Zero)
        Name (CTL5, Zero)
        Name (CTL6, Zero)
        Name (CTL7, Zero)
    }

    Scope (\_PR)
    {
        Method (CUID, 1, NotSerialized)
        {
            Local0 = Zero
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, Zero, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                EID2) && (IID3 == EID3))))
            {
                Local0 = One
            }

            Return (Local0)
        }
    }

    Scope (_PR.CPU0)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            PDC0 = CAP0 /* \_PR_.CPU0._OSC.CAP0 */
            Local0 = \_PR.CUID (Arg0)
            If (!Local0)
            {
                STS0 [Zero] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 [Zero] = 0x0A
                Return (Arg3)
            }

            Name (HI0, Zero)
            Name (HC0, Zero)
            OperationRegion (IST0, SystemMemory, SSD0 (SSL0 ()), OperationRegion (CST0, SystemMemory, CSD0 (CSL0 ()), If ((!TBL0 && PSSS))
                    {
                        If ((!JACK && ((PDC0 & 0x09) == 0x09)))
                        {
                            Load (IST0, HI0) /* \_PR_.CPU0._OSC.HI0_ */
                            TBL0 = One
                        }

                        If ((JACK && ((PDC0 & 0x08) == 0x08)))
                        {
                            Load (IST0, HI0) /* \_PR_.CPU0._OSC.HI0_ */
                            TBL0 = One
                        }
                    }))
            If ((((PDC0 & 0x18) == 0x18) && (CTL0 == Zero)))
            {
                Load (CST0, HC0) /* \_PR_.CPU0._OSC.HC0_ */
                CTL0 = One
            }

            Return (Arg3)
        }
    }

    Scope (_PR.CPU1)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP1)
            PDC1 = CAP1 /* \_PR_.CPU1._OSC.CAP1 */
            Local0 = \_PR.CUID (Arg0)
            If (!Local0)
            {
                STS0 [Zero] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 [Zero] = 0x0A
                Return (Arg3)
            }

            Name (HI1, Zero)
            Name (HC1, Zero)
            OperationRegion (IST1, SystemMemory, SSD1 (SSL1 ()), OperationRegion (CST1, SystemMemory, CSD1 (CSL1 ()), If ((!TBL1 && PSSS))
                    {
                        If ((!JACK && ((PDC1 & 0x09) == 0x09)))
                        {
                            Load (IST1, HI1) /* \_PR_.CPU1._OSC.HI1_ */
                            TBL1 = One
                        }

                        If ((JACK && ((PDC1 & 0x08) == 0x08)))
                        {
                            Load (IST1, HI1) /* \_PR_.CPU1._OSC.HI1_ */
                            TBL1 = One
                        }
                    }))
            If ((((PDC1 & 0x18) == 0x18) && (CTL1 == Zero)))
            {
                Load (CST1, HC1) /* \_PR_.CPU1._OSC.HC1_ */
                CTL1 = One
            }

            Return (Arg3)
        }
    }

    Scope (_PR.CPU2)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP2)
            PDC2 = CAP2 /* \_PR_.CPU2._OSC.CAP2 */
            Local0 = \_PR.CUID (Arg0)
            If (!Local0)
            {
                STS0 [Zero] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 [Zero] = 0x0A
                Return (Arg3)
            }

            Name (HI2, Zero)
            Name (HC2, Zero)
            OperationRegion (IST2, SystemMemory, SSD2 (SSL2 ()), OperationRegion (CST2, SystemMemory, CSD2 (CSL2 ()), If ((!TBL2 && PSSS))
                    {
                        If ((!JACK && ((PDC2 & 0x09) == 0x09)))
                        {
                            Load (IST2, HI2) /* \_PR_.CPU2._OSC.HI2_ */
                            TBL2 = One
                        }

                        If ((JACK && ((PDC2 & 0x08) == 0x08)))
                        {
                            Load (IST2, HI2) /* \_PR_.CPU2._OSC.HI2_ */
                            TBL2 = One
                        }
                    }))
            If ((((PDC2 & 0x18) == 0x18) && (CTL2 == Zero)))
            {
                Load (CST2, HC2) /* \_PR_.CPU2._OSC.HC2_ */
                CTL2 = One
            }

            Return (Arg3)
        }
    }

    Scope (_PR.CPU3)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP3)
            PDC3 = CAP3 /* \_PR_.CPU3._OSC.CAP3 */
            Local0 = \_PR.CUID (Arg0)
            If (!Local0)
            {
                STS0 [Zero] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 [Zero] = 0x0A
                Return (Arg3)
            }

            Name (HI3, Zero)
            Name (HC3, Zero)
            OperationRegion (IST3, SystemMemory, SSD3 (SSL3 ()), OperationRegion (CST3, SystemMemory, CSD3 (CSL3 ()), If ((!TBL3 && PSSS))
                    {
                        If ((!JACK && ((PDC3 & 0x09) == 0x09)))
                        {
                            Load (IST3, HI3) /* \_PR_.CPU3._OSC.HI3_ */
                            TBL3 = One
                        }

                        If ((JACK && ((PDC3 & 0x08) == 0x08)))
                        {
                            Load (IST3, HI3) /* \_PR_.CPU3._OSC.HI3_ */
                            TBL3 = One
                        }
                    }))
            If ((((PDC3 & 0x18) == 0x18) && (CTL3 == Zero)))
            {
                Load (CST3, HC3) /* \_PR_.CPU3._OSC.HC3_ */
                CTL3 = One
            }

            Return (Arg3)
        }
    }

    Scope (_PR.CPU4)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP4)
            PDC4 = CAP4 /* \_PR_.CPU4._OSC.CAP4 */
            Local0 = \_PR.CUID (Arg0)
            If (!Local0)
            {
                STS0 [Zero] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 [Zero] = 0x0A
                Return (Arg3)
            }

            Name (HI4, Zero)
            Name (HC4, Zero)
            OperationRegion (IST4, SystemMemory, SSD4 (SSL4 ()), OperationRegion (CST4, SystemMemory, CSD4 (CSL4 ()), If ((!TBL4 && PSSS))
                    {
                        If ((!JACK && ((PDC4 & 0x09) == 0x09)))
                        {
                            Load (IST4, HI4) /* \_PR_.CPU4._OSC.HI4_ */
                            TBL4 = One
                        }

                        If ((JACK && ((PDC4 & 0x08) == 0x08)))
                        {
                            Load (IST4, HI4) /* \_PR_.CPU4._OSC.HI4_ */
                            TBL4 = One
                        }
                    }))
            If ((((PDC4 & 0x18) == 0x18) && (CTL4 == Zero)))
            {
                Load (CST4, HC4) /* \_PR_.CPU4._OSC.HC4_ */
                CTL4 = One
            }

            Return (Arg3)
        }
    }

    Scope (_PR.CPU5)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP5)
            PDC5 = CAP5 /* \_PR_.CPU5._OSC.CAP5 */
            Local0 = \_PR.CUID (Arg0)
            If (!Local0)
            {
                STS0 [Zero] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 [Zero] = 0x0A
                Return (Arg3)
            }

            Name (HI5, Zero)
            Name (HC5, Zero)
            OperationRegion (IST5, SystemMemory, SSD5 (SSL5 ()), OperationRegion (CST5, SystemMemory, CSD5 (CSL5 ()), If ((!TBL5 && PSSS))
                    {
                        If ((!JACK && ((PDC5 & 0x09) == 0x09)))
                        {
                            Load (IST5, HI5) /* \_PR_.CPU5._OSC.HI5_ */
                            TBL5 = One
                        }

                        If ((JACK && ((PDC0 & 0x08) == 0x08)))
                        {
                            Load (IST5, HI5) /* \_PR_.CPU5._OSC.HI5_ */
                            TBL5 = One
                        }
                    }))
            If ((((PDC5 & 0x18) == 0x18) && (CTL5 == Zero)))
            {
                Load (CST5, HC5) /* \_PR_.CPU5._OSC.HC5_ */
                CTL5 = One
            }

            Return (Arg3)
        }
    }

    Scope (_PR.CPU6)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP6)
            PDC6 = CAP6 /* \_PR_.CPU6._OSC.CAP6 */
            Local0 = \_PR.CUID (Arg0)
            If (!Local0)
            {
                STS0 [Zero] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 [Zero] = 0x0A
                Return (Arg3)
            }

            Name (HI6, Zero)
            Name (HC6, Zero)
            OperationRegion (IST6, SystemMemory, SSD6 (SSL6 ()), OperationRegion (CST6, SystemMemory, CSD6 (CSL6 ()), If ((!TBL6 && PSSS))
                    {
                        If ((!JACK && ((PDC6 & 0x09) == 0x09)))
                        {
                            Load (IST6, HI6) /* \_PR_.CPU6._OSC.HI6_ */
                            TBL6 = One
                        }

                        If ((JACK && ((PDC6 & 0x08) == 0x08)))
                        {
                            Load (IST6, HI6) /* \_PR_.CPU6._OSC.HI6_ */
                            TBL6 = One
                        }
                    }))
            If ((((PDC6 & 0x18) == 0x18) && (CTL6 == Zero)))
            {
                Load (CST6, HC6) /* \_PR_.CPU6._OSC.HC6_ */
                CTL6 = One
            }

            Return (Arg3)
        }
    }

    Scope (_PR.CPU7)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP7)
            PDC7 = CAP7 /* \_PR_.CPU7._OSC.CAP7 */
            Local0 = \_PR.CUID (Arg0)
            If (!Local0)
            {
                STS0 [Zero] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 [Zero] = 0x0A
                Return (Arg3)
            }

            Name (HI7, Zero)
            Name (HC7, Zero)
            OperationRegion (IST7, SystemMemory, SSD7 (SSL7 ()), OperationRegion (CST7, SystemMemory, CSD7 (CSL7 ()), If ((!TBL7 && PSSS))
                    {
                        If ((!JACK && ((PDC7 & 0x09) == 0x09)))
                        {
                            Load (IST7, HI7) /* \_PR_.CPU7._OSC.HI7_ */
                            TBL7 = One
                        }

                        If ((JACK && ((PDC7 & 0x08) == 0x08)))
                        {
                            Load (IST7, HI7) /* \_PR_.CPU7._OSC.HI7_ */
                            TBL7 = One
                        }
                    }))
            If ((((PDC7 & 0x18) == 0x18) && (CTL7 == Zero)))
            {
                Load (CST7, HC7) /* \_PR_.CPU7._OSC.HC7_ */
                CTL7 = One
            }

            Return (Arg3)
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "CPU2CST", 0x00000001)
{
    External (_PR_.CPU2, DeviceObj)
    External (CC3S, UnknownObj)
    External (PDC2, UnknownObj)

    Scope (\_PR.CPU2)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((PDC2 && 0x10) && (CC3S && One)))
            {
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        One, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000915, // Address
                                ,)
                        }, 

                        0x03, 
                        0x11, 
                        0xFA
                    }
                })
            }

            Return (Package (0x02)
            {
                One, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    One, 
                    One, 
                    0x03E8
                }
            })
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "CPU0CST", 0x00000001)
{
    External (_PR_.CPU0, DeviceObj)
    External (CC3S, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((PDC0 && 0x10) && (CC3S && One)))
            {
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        One, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000915, // Address
                                ,)
                        }, 

                        0x03, 
                        0x11, 
                        0xFA
                    }
                })
            }

            Return (Package (0x02)
            {
                One, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    One, 
                    One, 
                    0x03E8
                }
            })
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "CPU7CST", 0x00000001)
{
    External (_PR_.CPU7, DeviceObj)
    External (CC3S, UnknownObj)
    External (PDC7, UnknownObj)

    Scope (\_PR.CPU7)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((PDC7 && 0x10) && (CC3S && One)))
            {
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        One, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000915, // Address
                                ,)
                        }, 

                        0x03, 
                        0x11, 
                        0xFA
                    }
                })
            }

            Return (Package (0x02)
            {
                One, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    One, 
                    One, 
                    0x03E8
                }
            })
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "CPU5CST", 0x00000001)
{
    External (_PR_.CPU5, DeviceObj)
    External (CC3S, UnknownObj)
    External (PDC5, UnknownObj)

    Scope (\_PR.CPU5)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((PDC5 && 0x10) && (CC3S && One)))
            {
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        One, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000915, // Address
                                ,)
                        }, 

                        0x03, 
                        0x11, 
                        0xFA
                    }
                })
            }

            Return (Package (0x02)
            {
                One, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    One, 
                    One, 
                    0x03E8
                }
            })
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "CPU3CST", 0x00000001)
{
    External (_PR_.CPU3, DeviceObj)
    External (CC3S, UnknownObj)
    External (PDC3, UnknownObj)

    Scope (\_PR.CPU3)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((PDC3 && 0x10) && (CC3S && One)))
            {
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        One, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000915, // Address
                                ,)
                        }, 

                        0x03, 
                        0x11, 
                        0xFA
                    }
                })
            }

            Return (Package (0x02)
            {
                One, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    One, 
                    One, 
                    0x03E8
                }
            })
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "CPU1CST", 0x00000001)
{
    External (_PR_.CPU1, DeviceObj)
    External (CC3S, UnknownObj)
    External (PDC1, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((PDC1 && 0x10) && (CC3S && One)))
            {
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        One, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000915, // Address
                                ,)
                        }, 

                        0x03, 
                        0x11, 
                        0xFA
                    }
                })
            }

            Return (Package (0x02)
            {
                One, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    One, 
                    One, 
                    0x03E8
                }
            })
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "CPU6CST", 0x00000001)
{
    External (_PR_.CPU6, DeviceObj)
    External (CC3S, UnknownObj)
    External (PDC6, UnknownObj)

    Scope (\_PR.CPU6)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((PDC6 && 0x10) && (CC3S && One)))
            {
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        One, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000915, // Address
                                ,)
                        }, 

                        0x03, 
                        0x11, 
                        0xFA
                    }
                })
            }

            Return (Package (0x02)
            {
                One, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    One, 
                    One, 
                    0x03E8
                }
            })
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 1, "HP    ", "CPU4CST", 0x00000001)
{
    External (_PR_.CPU4, DeviceObj)
    External (CC3S, UnknownObj)
    External (PDC4, UnknownObj)

    Scope (\_PR.CPU4)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((PDC4 && 0x10) && (CC3S && One)))
            {
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        One, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000915, // Address
                                ,)
                        }, 

                        0x03, 
                        0x11, 
                        0xFA
                    }
                })
            }

            Return (Package (0x02)
            {
                One, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    One, 
                    One, 
                    0x03E8
                }
            })
        }
    }
}



